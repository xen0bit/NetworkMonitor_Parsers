//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  MSDTC Connection Manager: OleTx Management Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-CMOM]: MSDTC Connection Manager: OleTx Management Protocol Specification (12.0)
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 9/29/2009
//#
//####

table CMOMTraceSeverityLevelTable( value )
{
	switch( value )
	{
		case 0x00000001: "Error - must trace errors in the operation of the system";
		case 0x00000002: "Warning - must trace events that indicate the possible occurrence of a future problem";
		case 0x00000004: "Information - must trace information about the normal progress of significant operations";
		default:FormatString("Undefined value(%d)",value);
	}
}

table CMOMTraceLevelTable( value )
{
	switch( value )
	{
		case 0x00000000: "TraceNone - no event must be traced";
		case 0x00000001: "TraceErrors - only significant problems, such as the failure of a critical task must be traced";
		case 0x00000002: "TraceWarnings - all lower-level events plus warnings must be traced";
		case 0x00000003: "TraceInformation - all lower-level events plus informational events must be traced";
		case 0x00000004: "TraceAll - All error, warning, and information events must be traced";
		default:FormatString("Undefined value(%d)",value);
	}
}

table CMOMUpdateLimitTable( value )
{
	switch( value )
	{
		case 0x00000000: "Update20 - 20-second update period must be used";
		case 0x00000001: "Update10 - 10-second update period must be used";
		case 0x00000002: "Update5 - 5-second update period must be used";
		case 0x00000003: "Update3 - 3-second update period must be used";
		case 0x00000004: "Update1 - 1-second update period must be used";
		default:FormatString("Undefined value(%d)",value);
	}
}

table CMOMShowLimitTable( value )
{
	switch( value )
	{
		case 0x00000000: "Show5Min - 5-minute minimum transaction age must be used";
		case 0x00000001: "Show1Min - 1-minute minimum transaction age must be used";
		case 0x00000002: "Show30Sec - 30-second minimum transaction age must be used";
		case 0x00000003: "Show10Sec - 10-second minimum transaction age must be used";
		case 0x00000004: "Show1Sec - 1-second minimum transaction age must be used";
		default:FormatString("Undefined value(%d)",value);
	}
}

table CMOMTrackingStatusTable( value )
{
	switch( value )
	{
		case 0x00000003: "XactstatOpen - transaction still in active phase";
		case 0x00000004: "XactstatPreparing - transaction is preparing";
		case 0x00000008: "XactstatPrepared - transaction is prepared";
		case 0x00000040: "XactstatCommitting - transaction is committing";
		case 0x00000100: "XactstatAborting - transaction is aborting";
		case 0x00000200: "XactstatAborted - transaction is aborted";
		case 0x00000201: "XactstatForcedAbort - transaction was forced to abort by external intervention";
		case 0x00000400: "XactstatCommitted - transaction is committed";
		case 0x00000401: "XactstatForcedCommit - transaction was forced to commit";
		case 0x00000801: "XactstatNotifyingcommitted - transaction is committed";
		case 0x00000C01: "XactstatOnlyFailedCommittedRemain - transaction is in the aborting phase";
		case 0x00020000: "XactstatIndoubt - transaction is in doubt";
		case 0x00080001: "XactstatForget - transaction completed and is no longer managed by the transaction manager";
		default:FormatString("Undefined value(%d)",value);
	}
}

Table CMOMSourceTable(value)
{
	switch(value)
	{
		case 0x00000001:"The MSDTC service functionality";
		case 0x00000002:"The Transaction Manager core";
		case 0x00000003:"The connection manager";
		default:FormatString("Undefined value(%d)",value);
	}
}

Table CMOMTracedwMessageTable(value)
{
	switch(value)
	{
		case 0x4000100F:"The MSDTC service is shutting down.";
		case 0x8000102D:"Unknown message type encountered";
		case 0x8000102E:"Message length incorrect";
		case 0x8000102F:"Bad message value";
		case 0x80001030:"Message not expected";
		case 0xC0001061:"ReenlistmentComplete was called on a Resource Manager (RM) and there is at least one transaction that was enlisted on the RM that is still in doubt.";
		default:FormatString("Undefined value(%d)",value);
	}
}

Table CMOMTracefHasParamTable(value)
{
	switch(value)
	{
		case 0x00000000:"Field does not contain a non-null string.";
		case 0x00000001:"Field contains a non-null string.";
		default:FormatString("Undefined value(%d)",value);
	}
}

//------------------ MS-CMOM ------------------
struct CMOMMsgDtcuicTrace
{
	CMPMessagePacket MsgHeader;
	UINT32 dwSev = CMOMTraceSeverityLevelTable( this );
	UINT32 dwSource = CMOMSourceTable(this);
	UINT32 dwMessage = CMOMTracedwMessageTable(this);
	UINT32 fHasParam = CMOMTracefHasParamTable(this);
	AsciiString szParam;
}

struct CMOMMsgDtcuicTracestring
{
	CMPMessagePacket MsgHeader;
	UINT32 dwSev = CMOMTraceSeverityLevelTable( this );
	UINT32 dwSource = CMOMSourceTable(this);
	AsciiString szMsg;
}

struct CMOMMsgDtcuicStats
{
	CMPMessagePacket MsgHeader;
	UINT32 cOpen = FormatString( "%d the number of currently opened transactions", this );
	UINT32 cCommitted = FormatString( "%d the current number of committed transactions", this );
	UINT32 cAborted = FormatString( "%d the current number of aborted transactions", this );
	UINT32 cInDoubt = FormatString( "%d the current number of in-doubt transactions", this );
	UINT32 cHeuristic = MUSTBeSetToTable(this,"0");
	UINT32 cOpenMax = FormatString( "%d the current maximum number of open transactions", this );
	UINT32 cCommittedMax = FormatString( "%d the current maximum number of committed transactions", this );
	UINT32 cAbortedMax = FormatString( "%d the current maximum number of aborted transactions", this );
	UINT32 cInDoubtMax = FormatString( "%d the current maximum number of in-doubt transactions", this );
	UINT32 cHeuristicMax = MUSTBeSetToTable(this,"0");
	UINT32 cForcedCommit = FormatString( "%d the current number of transactions that were in doubt, and were forced to commit", this );
	UINT32 cForcedAbort = FormatString( "%d the current number of transactions that were in doubt, and were forced to abort", this );
	UINT32 cAvgResponseTime = FormatString( "%s the current average time in milliseconds for transaction committing", this );
	UINT32 cMinResponseTime = FormatString( "%s the current minimum time in milliseconds for transaction committing", this );
	UINT32 cMaxResponseTime = FormatString( "%s the current maximum time in milliseconds for transaction committing", this );
	UINT32 timeTransactionsUp;
	switch
	{
	case MsgHeader.cbVarLenData > 60:
		_struct
		{
			SYSTEMTIME systemTimeTransactionsUp;
			UINT32 dwTimeStamp = MUSTBeSetToTable(this,"0");
			UINT32 cSinglePhaseInDoubt;
		}
	}
}

struct CMOMMsgDtcuicTranlist
{
	CMPMessagePacket MsgHeader;
	UINT32 dwNumElements = FormatString( "%s elements in rgElements array", this );
	CMOMDtcUITransListElement rgElements[ dwNumElements ];
}

struct CMOMMsgDtcuicTracelimit
{
	CMPMessagePacket MsgHeader;
	UINT32 dwTraceLimit = CMOMTraceLevelTable( this );
}

struct CMOMMsgDtcuicUpdatelimit
{
	CMPMessagePacket MsgHeader;
	UINT32 dwUpdateLimit = CMOMUpdateLimitTable( this );
}

struct CMOMMsgDtcuicShowlimit
{
	CMPMessagePacket MsgHeader;
	UINT32 dwShowLimit = CMOMShowLimitTable( this );
}

struct CMOMMtagHello
{
	CMPMessagePacket MsgHeader;
}

struct CMOMDtcUITransListElement
{
	GUID(True) GuidTx;
	UINT32 ulIsol = DTCOOletxIsolationLevelTable( this );
	AsciiString(40) szDesc;
	UINT32 dwStatus = CMOMTrackingStatusTable( this );
	AsciiString(16) szParent;
}
