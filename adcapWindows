//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Active Directory Web Services: Custom Action Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-ADCAP]: Active Directory Web Services: Custom Action Protocol Specification (0.1.2)
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 12/09/2009
//#                          Minor, 12/22/2009
//#
//####

[Property.SoapBodySummary = "ADCAP Payload"]
[RegisterBefore(SoapBody.DefaultSoapBody, ADCAP, ADCAPSoapActionTable(Property.SOAPAction))]
Protocol ADCAP = Property.ADCAPSummary
{
	Switch(Property.SOAPAction)
	{
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADGroupMember":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADGroupMemberResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPGetADGroupMember ADCAPGetADGroupMember;
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADPrincipalGroupMembership":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADPrincipalGroupMembershipResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPGetADPrincipalGroupMembership ADCAPGetADPrincipalGroupMembership;
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/SetPassword":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/SetPasswordResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPSetPassword ADCAPSetPassword;
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/ChangePassword":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/ChangePasswordResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPChangePassword ADCAPChangePassword;
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADPrincipalAuthorizationGroup":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADPrincipalAuthorizationGroupResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPGetADPrincipalAuthorizationGroup ADCAPGetADPrincipalAuthorizationGroup;
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/TranslateName":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/TranslateNameResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPTranslateName ADCAPTranslateName;
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADDomainController":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADDomainControllerResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPGetADDomainController ADCAPGetADDomainController;
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADDomain":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADDomainResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPGetADDomain ADCAPGetADDomain;
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/MoveADOperationMasterRole":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/MoveADOperationMasterRoleResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPMoveADOperationMasterRole ADCAPMoveADOperationMasterRole;
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADForest":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADForestResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPGetADForest ADCAPGetADForest;
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/ChangeOptionalFeature":
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/ChangeOptionalFeatureResponse":
			[Property.ADCAPSummary = this.ToString]
			ADCAPChangeOptionalFeature ADCAPChangeOptionalFeature;
		Default:
			While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
			{
				XmlElement(true) AnyNode;
			}
	}
	
}

struct ADCAPGetADGroupMember = FormatString("%s Message", Property.ADCAPGetADGroupMemberSummary)
{
	[Post.Local.ADCAPGetADGroupMember_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPGetADGroupMember_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADGroupMemberResponse"):
						[Property.ADCAPGetADGroupMemberSummary = "GetADGroupMember Response"]
						ADCAPcaGetADGroupMemberResponseElement GetADGroupMemberResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADGroupMemberRequest"):
						[Property.ADCAPGetADGroupMemberSummary = "GetADGroupMember Request"]
						ADCAPcaGetADGroupMemberRequestElement GetADGroupMemberRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPGetADGroupMemberSummary = "Fault GetADGroupMember Response"]
						SoapFaultElement FaultGetADGroupMemberElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPGetADGroupMemberSummary = "Encrypted GetADGroupMember Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADCAPGetADPrincipalGroupMembership = FormatString("%s Message", Property.ADCAPGetADPrincipalGroupMembershipSummary)
{
	[Post.Local.ADCAPGetADPrincipalGroupMembership_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPGetADPrincipalGroupMembership_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADPrincipalGroupMembershipResponse"):
						[Property.ADCAPGetADPrincipalGroupMembershipSummary = "GetADPrincipalGroupMembership Response"]
						ADCAPcaGetADPrincipalGroupMembershipResponseElement GetADPrincipalGroupMembershipResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADPrincipalGroupMembershipRequest"):
						[Property.ADCAPGetADPrincipalGroupMembershipSummary = "GetADPrincipalGroupMembership Request"]
						ADCAPcaGetADPrincipalGroupMembershipRequestElement GetADPrincipalGroupMembershipRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPGetADPrincipalGroupMembershipSummary = "Fault GetADPrincipalGroupMembership Response"]
						SoapFaultElement FaultGetADPrincipalGroupMembershipElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPGetADPrincipalGroupMembershipSummary = "Encrypted GetADPrincipalGroupMembership Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADCAPSetPassword = FormatString("%s Message", Property.ADCAPSetPasswordSummary)
{
	[Post.Local.ADCAPSetPassword_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPSetPassword_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "SetPasswordResponse"):
						[Property.ADCAPSetPasswordSummary = "SetPassword Response"]
						ADCAPcaSetPasswordResponseElement SetPasswordResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "SetPasswordRequest"):
						[Property.ADCAPSetPasswordSummary = "SetPassword Request"]
						ADCAPcaSetPasswordRequestElement SetPasswordRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPSetPasswordSummary = "Fault SetPassword Response"]
						SoapFaultElement FaultSetPasswordElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPSetPasswordSummary = "Encrypted SetPassword Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADCAPChangePassword = FormatString("%s Message", Property.ADCAPChangePasswordSummary)
{
	[Post.Local.ADCAPChangePassword_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPChangePassword_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ChangePasswordResponse"):
						[Property.ADCAPChangePasswordSummary = "ChangePassword Response"]
						ADCAPcaChangePasswordResponseElement ChangePasswordResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ChangePasswordRequest"):
						[Property.ADCAPChangePasswordSummary = "ChangePassword Request"]
						ADCAPcaChangePasswordRequestElement ChangePasswordRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPChangePasswordSummary = "Fault ChangePassword Response"]
						SoapFaultElement FaultChangePasswordElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPChangePasswordSummary = "Encrypted ChangePassword Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADCAPGetADPrincipalAuthorizationGroup = FormatString("%s Message", Property.ADCAPGetADPrincipalAuthorizationGroupSummary)
{
	[Post.Local.ADCAPGetADPrincipalAuthorizationGroup_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPGetADPrincipalAuthorizationGroup_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADPrincipalAuthorizationGroupResponse"):
						[Property.ADCAPGetADPrincipalAuthorizationGroupSummary = "GetADPrincipalAuthorizationGroup Response"]
						ADCAPcaGetADPrincipalAuthorizationGroupResponseElement GetADPrincipalAuthorizationGroupResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADPrincipalAuthorizationGroupRequest"):
						[Property.ADCAPGetADPrincipalAuthorizationGroupSummary = "GetADPrincipalAuthorizationGroup Request"]
						ADCAPcaGetADPrincipalAuthorizationGroupRequestElement GetADPrincipalAuthorizationGroupRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPGetADPrincipalAuthorizationGroupSummary = "Fault GetADPrincipalAuthorizationGroup Response"]
						SoapFaultElement FaultGetADPrincipalAuthorizationGroupElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPGetADPrincipalAuthorizationGroupSummary = "Encrypted GetADPrincipalAuthorizationGroup Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADCAPTranslateName = FormatString("%s Message", Property.ADCAPTranslateNameSummary)
{
	[Post.Local.ADCAPTranslateName_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPTranslateName_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "TranslateNameResponse"):
						[Property.ADCAPTranslateNameSummary = "TranslateName Response"]
						ADCAPcaTranslateNameResponseElement TranslateNameResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "TranslateNameRequest"):
						[Property.ADCAPTranslateNameSummary = "TranslateName Request"]
						ADCAPcaTranslateNameRequestElement TranslateNameRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPTranslateNameSummary = "Fault TranslateName Response"]
						SoapFaultElement FaultTranslateNameElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPTranslateNameSummary = "Encrypted TranslateName Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADCAPGetADDomainController = FormatString("%s Message", Property.ADCAPGetADDomainControllerSummary)
{
	[Post.Local.ADCAPGetADDomainController_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPGetADDomainController_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADDomainControllerResponse"):
						[Property.ADCAPGetADDomainControllerSummary = "GetADDomainController Response"]
						ADCAPcaGetADDomainControllerResponseElement GetADDomainControllerResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADDomainControllerRequest"):
						[Property.ADCAPGetADDomainControllerSummary = "GetADDomainController Request"]
						ADCAPcaGetADDomainControllerRequestElement GetADDomainControllerRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPGetADDomainControllerSummary = "Fault GetADDomainController Response"]
						SoapFaultElement FaultGetADDomainControllerElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPGetADDomainControllerSummary = "Encrypted GetADDomainController Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADCAPGetADDomain = FormatString("%s Message", Property.ADCAPGetADDomainSummary)
{
	[Post.Local.ADCAPGetADDomain_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPGetADDomain_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADDomainResponse"):
						[Property.ADCAPGetADDomainSummary = "GetADDomain Response"]
						ADCAPcaGetADDomainResponseElement GetADDomainResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADDomainRequest"):
						[Property.ADCAPGetADDomainSummary = "GetADDomain Request"]
						ADCAPcaGetADDomainRequestElement GetADDomainRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPGetADDomainSummary = "Fault GetADDomain Response"]
						SoapFaultElement FaultGetADDomainElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPGetADDomainSummary = "Encrypted GetADDomain Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADCAPMoveADOperationMasterRole = FormatString("%s Message", Property.ADCAPMoveADOperationMasterRoleSummary)
{
	[Post.Local.ADCAPMoveADOperationMasterRole_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPMoveADOperationMasterRole_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MoveADOperationMasterRoleResponse"):
						[Property.ADCAPMoveADOperationMasterRoleSummary = "MoveADOperationMasterRole Response"]
						ADCAPcaMoveADOperationMasterRoleResponseElement MoveADOperationMasterRoleResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MoveADOperationMasterRoleRequest"):
						[Property.ADCAPMoveADOperationMasterRoleSummary = "MoveADOperationMasterRole Request"]
						ADCAPcaMoveADOperationMasterRoleRequestElement MoveADOperationMasterRoleRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPMoveADOperationMasterRoleSummary = "Fault MoveADOperationMasterRole Response"]
						SoapFaultElement FaultMoveADOperationMasterRoleElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPMoveADOperationMasterRoleSummary = "Encrypted MoveADOperationMasterRole Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADCAPGetADForest = FormatString("%s Message", Property.ADCAPGetADForestSummary)
{
	[Post.Local.ADCAPGetADForest_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPGetADForest_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADForestResponse"):
						[Property.ADCAPGetADForestSummary = "GetADForest Response"]
						ADCAPcaGetADForestResponseElement GetADForestResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetADForestRequest"):
						[Property.ADCAPGetADForestSummary = "GetADForest Request"]
						ADCAPcaGetADForestRequestElement GetADForestRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPGetADForestSummary = "Fault GetADForest Response"]
						SoapFaultElement FaultGetADForestElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPGetADForestSummary = "Encrypted GetADForest Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADCAPChangeOptionalFeature = FormatString("%s Message", Property.ADCAPChangeOptionalFeatureSummary)
{
	[Post.Local.ADCAPChangeOptionalFeature_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADCAPChangeOptionalFeature_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ChangeOptionalFeatureResponse"):
						[Property.ADCAPChangeOptionalFeatureSummary = "ChangeOptionalFeature Response"]
						ADCAPcaChangeOptionalFeatureResponseElement ChangeOptionalFeatureResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ChangeOptionalFeatureRequest"):
						[Property.ADCAPChangeOptionalFeatureSummary = "ChangeOptionalFeature Request"]
						ADCAPcaChangeOptionalFeatureRequestElement ChangeOptionalFeatureRequest;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADCAPChangeOptionalFeatureSummary = "Fault ChangeOptionalFeature Response"]
						SoapFaultElement FaultChangeOptionalFeatureElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADCAPChangeOptionalFeatureSummary = "Encrypted ChangeOptionalFeature Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

[RegisterBefore(
    SoapHeader.SoapHeaderNodes.Node,
    ADCAPServer,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, true, false), "Server>"))]
struct ADCAPServer
{
	XMLTag("Server") ServerSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				XmlElemContent Port;
				XMLTag("Server") ServerETag;
			}
	}
}


struct ADCAPcaChangePasswordRequestElement = FormatString("AccountDN: %s",Property.ADCAPAccountDN)
{
	XMLTag("ChangePasswordRequest") ChangePasswordRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{	
				while[!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ChangePasswordRequest")]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("AccountDN"):
							[Property.ADCAPAccountDN = Property.XMLElementContent]
							XMLElement(true) AccountDN = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("NewPassword"):
							XMLElement(true) NewPassword = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("OldPassword"):
							XMLElement(true) OldPassword = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("PartitionDN"):
							XMLElement(true) PartitionDN = Property.XMLElementContent;
						default:
							XMLElement(true) Element;
						}
				}
					XMLTag("ChangePasswordRequest") ChangePasswordRequestETag;
			}	
	}
}

struct ADCAPcaChangePasswordResponseElement
{
	XMLTag("ChangePasswordResponse") ChangePasswordResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case string(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</":
						XmlElement(true)Element;
					case string(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && StringTerm(FrameData, FrameOffset, Property.XMLEncoding, ">", false, true, true).Contains("</ChangePasswordResponse"):
						struct{};
					case String(FrameData, FrameOffset, Property.XMLEncoding, 1) != "<":
						XmlElemContent value;
				}
				XMLTag("ChangePasswordResponse") ChangePasswordResponseETag;
			}
	}
}

struct ADCAPArgumentError
{
	XMLTag("ArgumentError") ArgumentErrorSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("message"):
						XMLElement(true) Message = Property.XMLElementContent;
				}
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("parameterName"):
						XMLElement(true) ParameterName = Property.XMLElementContent;
				}
				XMLTag("ArgumentError") ArgumentErrorETag;
			}
	}
}

struct ADCAPDirectoryError
{
	XMLTag("DirectoryError") DirectoryErrorSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("errorCode"):
						XMLElement(true) ErrorCode = Property.XMLElementContent;
				}
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("extendedErrorMessage"):
						XMLElement(true) ExtendedErrorMessage = Property.XMLElementContent;
				}
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("matchedDN"):
						XMLElement(true) MatchedDN = Property.XMLElementContent;
				}
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("referral"):
						ADCAPSTRING("referral") Referral;
				}
				XMLTag("DirectoryError") DirectoryErrorETag;
			}
	}
}


struct ADCAPFaultDetail(tag)
{
	XMLTag(tag) STag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while[!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains(tag)]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ArgumentError"):
							ADCAPArgumentError ArgumentError;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("DirectoryError"):
							ADCAPDirectoryError DirectoryError;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("Error"):
							XMLElement(true) Error = Property.XMLElementContent;
					}
				}
				XMLTag(tag) ETag;
			}
	}
}

struct ADCAPcaGetADGroupMemberRequestElement
{
	XMLTag("GetADGroupMemberRequest") GetADGroupMemberRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while[!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GetADGroupMemberRequest")]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GroupDN"):
							XMLElement(true) GroupDN = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("PartitionDN"):
							XMLElement(true) PartitionDN = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("Recursive"):
							XMLElement(true) Recursive = Property.XMLElementContent;
						default:
							XMLElement(true) Element;
						}
				}
				XMLTag("GetADGroupMemberRequest") GetADGroupMemberRequestETag;
			}
	}
}

struct ADCAPActiveDirectoryObjectElement
{
	switch
	{
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("DistinguishedName"):
			XMLElement(true) DistinguishedName = Property.XMLElementContent;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("Name"):
			XMLElement(true) Name = Property.XMLElementContent;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ObjectClass"):
			XMLElement(true) ObjectClass = Property.XMLElementContent;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ObjectGuid"):
			XMLElement(true) ObjectGuid = Property.XMLElementContent;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ObjectTypes"):
			ADCAPString("ObjectTypes") ObjectTypes;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ReferenceServer"):
			XMLElement(true) ReferenceServer = Property.XMLElementContent;
		default:
			XMLElement(true) Element;
	}
}

struct ADCAPActiveDirectoryPrincipalElement
{
	XMLTag("ActiveDirectoryPrincipal") ActiveDirectoryPrincipalSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while[!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ActiveDirectoryPrincipal")]
				{
						ADCAPActiveDirectoryObjectElement ActiveDirectoryObjectElement;
						switch
						{
							case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("SID"):
								XMLElement(true) SID = Property.XMLElementContent;
							case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("SamAccountName"):
								XMLElement(true) SamAccountName = Property.XMLElementContent;
							default:
								XMLElement(true) Element;
						}
				}
				XMLTag("ActiveDirectoryPrincipal") ActiveDirectoryPrincipalETag;
			}
	}
	
}

struct ADCAPActiveDirectoryPrincipal
{
	XMLTag("Members") ActiveDirectoryPrincipalSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				ADCAPActiveDirectoryPrincipalElement ActiveDirectoryPrincipalElement;
				XMLTag("Members") ActiveDirectoryPrincipalETag;
			}
	}
}

struct ADCAPcaGetADGroupMemberResponseElement
{
	XMLTag("GetADGroupMemberResponse") GetADGroupMemberResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				ADCAPActiveDirectoryPrincipal Members;
				XMLTag("GetADGroupMemberResponse") GetADGroupMemberResponseETag;
			}
	}
}

struct ADCAPcaGetADPrincipalAuthorizationGroupRequestElement
{
	XMLTag("GetADPrincipalAuthorizationGroupRequest") GetADPrincipalAuthorizationGroupRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GetADPrincipalAuthorizationGroupRequest")]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("PartitionDN"):
							XMLElement(true) PartitionDN = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("PrincipalDN"):
							XMLElement(true) PrincipalDN = Property.XMLElementContent;
						default:
							XMLElement(true) Element;
					}
				}
				XMLTag("GetADPrincipalAuthorizationGroupRequest") GetADPrincipalAuthorizationGroupRequestETag;
			}
	}
}

struct ADCAPActiveDirectoryGroup
{
	XMLTag("ActiveDirectoryGroup") ActiveDirectoryGroupeSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ActiveDirectoryGroup")]
				{
					ADCAPActiveDirectoryPrincipalElement ADCAPActiveDirectoryPrincipal;
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GroupScope"):
							XMLElement(true) GroupScope = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GroupType"):
							XMLElement(true) GroupType = Property.XMLElementContent;
						default:
							XMLElement(true) Element;
					}
				}
				XMLTag("ActiveDirectoryGroup") ActiveDirectoryGroupETag;
			}
	}
}

struct ADCAPMembers  = FormatString("There are %d ActiveDirectoryGroup",Property.ADCAPActiveDirectoryGroupCount)
{
	XMLTag("MemberOf") GetADPrincipalAuthorizationGroupResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
		struct
		{
			[Property.ADCAPActiveDirectoryGroupCount = 0]
			while MemberOf[!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("MemberOf")]
			{
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ActiveDirectoryGroup"):
						struct
						{
							[Property.ADCAPActiveDirectoryGroupCount = Property.ADCAPActiveDirectoryGroupCount + 1]
							ADCAPActiveDirectoryGroup ActiveDirectoryGroup;
						}
					}
			}
			XMLTag("MemberOf") GetADPrincipalAuthorizationGroupResponseETag;
		}
	}
}

struct ADCAPcaGetADPrincipalAuthorizationGroupResponseElement
{
	XMLTag("GetADPrincipalAuthorizationGroupResponse") GetADPrincipalAuthorizationGroupResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				ADCAPMembers Members;
				XMLTag("GetADPrincipalAuthorizationGroupResponse") GetADPrincipalAuthorizationGroupResponseETag;
			}
	}
}

struct ADCAPcaGetADPrincipalGroupMembershipRequestElement
{
	XMLTag("GetADPrincipalGroupMemberShipRequest") GetADPrincipalGroupMemberShipRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GetADPrincipalGroupMemberShipRequest")]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("PartitionDN"):
							XMLElement(true) PartitionDN = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("PrincipalDN"):
							XMLElement(true) PrincipalDN = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ResourceContextPartition"):
							XMLElement(true) ResourceContextPartition = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ResourceContextServer"):
							XMLElement(true) ResourceContextServer = Property.XMLElementContent;
						default:
								XMLElement(true) Element;
					}
				}
				XMLTag("GetADPrincipalGroupMemberShipRequest") GetADPrincipalGroupMemberShipRequestETag;
			}
	}
}

struct ADCAPcaGetADPrincipalGroupMembershipResponseElement
{
	XMLTag("GetADPrincipalGroupMembershipResponse") GetADPrincipalGroupMembershipResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				ADCAPMembers Members;
				XMLTag("GetADPrincipalGroupMembershipResponse") GetADPrincipalGroupMembershipResponseETag;
			}
	}
}

struct ADCAPcaSetPasswordRequestElement
{
	XMLTag("SetPasswordRequest") SetPasswordRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("SetPasswordRequest")]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("AccountDN"):
							XMLElement(true) AccountDN = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("NewPassword"):
							XMLElement(true) NewPassword = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("PartitionDN"):
							XMLElement(true) PartitionDN = Property.XMLElementContent;
						default:
							XMLElement(true) Element;
					}
				}
				XMLTag("SetPasswordRequest") SetPasswordRequestETag;
			}
	}
}

struct ADCAPcaSetPasswordResponseElement
{
	XMLTag("SetPasswordResponse") SetPasswordResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case string(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</":
						XmlElement(true)Element;
					case string(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && StringTerm(FrameData, FrameOffset, Property.XMLEncoding, ">", false, true, true).Contains("</SetPasswordResponse"):
						struct{};
					case String(FrameData, FrameOffset, Property.XMLEncoding, 1) != "<":
						XmlElemContent value;
				}
				XMLTag("SetPasswordResponse") SetPasswordResponseETag;
			}
	}
}

struct ADCAPcaTranslateNameRequestElement
{
	XMLTag("TranslateNameRequest") TranslateNameRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("TranslateNameRequest")]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("FormatDesired"):
							XMLElement(true) FormatDesired = "DS_FQDN_1779_NAME";
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("FormatOffered"):
							XMLElement(true) FormatOffered = "DS_CANONICAL_NAME ";
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("Names"):
							ADCAPString("Names") Names;
						default:
							XMLElement(true) Element;
					}
				}
				XMLTag("TranslateNameRequest") TranslateNameRequestETag;
			}
	}
}

struct ADCAPActiveDirectoryNameTranslateResult
{
	XMLTag("ActiveDirectoryNameTranslateResult") ActiveDirectoryNameTranslateResultSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ActiveDirectoryNameTranslateResult")]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("Name"):
							XMLElement(true) Name = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("Result"):
							XMLElement(true) Result = Property.XMLElementContent;
						default:
							XMLElement(true) Element;
					}
				}
				XMLTag("ActiveDirectoryNameTranslateResult") ActiveDirectoryNameTranslateResultETag;
			}
	}
}

struct ADCAPNameTranslateResult = FormatString("There are %d NameTranslateResult",Property.ADCAPNameTranslateResultCount)
{
	XMLTag("NameTranslateResult") NameTranslateResultSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				[Property.ADCAPNameTranslateResultCount = 0]
				while MemberOf[!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("NameTranslateResult")]
				{
					[Property.ADCAPNameTranslateResultCount = Property.ADCAPNameTranslateResultCount + 1]
					ADCAPActiveDirectoryNameTranslateResult ActiveDirectoryNameTranslateResult;
				}
				XMLTag("NameTranslateResult") NameTranslateResultETag;
			}
	}
}

struct ADCAPcaTranslateNameResponseElement
{
	XMLTag("TranslateNameResponse") TranslateNameResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("NameTranslateResult"):
						ADCAPNameTranslateResult NameTranslateResult;
				}
				XMLTag("TranslateNameResponse") TranslateNameResponseETag;
			}
	}
}

struct ADCAPcaChangeOptionalFeatureRequestElement
{
	XMLTag("ChangeOptionalFeatureRequest") ChangeOptionalFeatureRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ChangeOptionalFeatureRequest")]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("DistinguishedName"):
							XMLElement(true) DistinguishedName = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("Enable"):
							XMLElement(true) Enable = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("FeatureId"):
							XMLElement(true) FeatureId = Property.XMLElementContent;
						default:
							XMLElement(true) Element;
					}
				}
				XMLTag("ChangeOptionalFeatureRequest") ChangeOptionalFeatureRequestETag;
			}
	}
}

struct ADCAPcaChangeOptionalFeatureResponseElement
{
	XMLTag("ChangeOptionalFeatureResponse") ChangeOptionalFeatureResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case string(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</":
						XmlElement(true)Element;
					case string(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && StringTerm(FrameData, FrameOffset, Property.XMLEncoding, ">", false, true, true).Contains("</ChangeOptionalFeatureResponse"):
						struct{};
					case String(FrameData, FrameOffset, Property.XMLEncoding, 1) != "<":
						XmlElemContent value;
				}
				XMLTag("ChangeOptionalFeatureResponse") ChangeOptionalFeatureResponseETag;
			}
	}
}

struct ADCAPcaGetADDomainRequestElement
{
	XMLTag("GetADDomainRequest") GetADDomainRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case string(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</":
						XmlElement(true)Element;
					case string(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && StringTerm(FrameData, FrameOffset, Property.XMLEncoding, ">", false, true, true).Contains("</GetADDomainRequest"):
						struct{};
					case String(FrameData, FrameOffset, Property.XMLEncoding, 1) != "<":
						XmlElemContent value;
				}
				XMLTag("GetADDomainRequest") GetADDomainRequestETag;
			}
	}
}

Table ADCAPDomainModeTable(value)
{
	switch(value)
	{
		case 0: "Windows 2000 Domain Mode";
		case 1: "Windows Server 2003 Interim Domain Mode";
		case 2: "Windows Server 2003 Domain Mode";
		case 3: "Windows Server 2008 Domain Mode";
		case 4: "Windows Server 2008 R2 Domain Mode";
		default:"unknown";
	}
}

struct ADCAPDomain
{
	XMLTag("Domain") DomainSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("Domain")]
				{
					ADCAPActiveDirectoryObjectElement ActiveDirectoryObjectElement;
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("AllowedDNSSuffixes"):
							ADCAPString("AllowedDNSSuffixes") AllowedDNSSuffixes;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("AppliedGroupPolicies"):
							ADCAPString("AppliedGroupPolicies") AppliedGroupPolicies;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ChildDomains"):
							ADCAPString("ChildDomains") ChildDomains;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ComputersContainer"):
							XMLElement(true) ComputersContainer = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("DeletedObjectsContainer"):
							XMLElement(true) DeletedObjectsContainer = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("DistinguishedName"):
							XMLElement(true) DistinguishedName = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("DNSRoot"):
							XMLElement(true) DNSRoot = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("DomainControllersContainer"):
							XMLElement(true) DomainControllersContainer = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("DomainMode"):
							XMLElement(true) DomainMode = ADCAPDomainModeTable(Property.XMLElementContent);
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("DomainSID"):
							XMLElement(true) DomainSID = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ForeignSecurityPrincipalsContainer"):
							XMLElement(true) ForeignSecurityPrincipalsContainer = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("Forest"):
							XMLElement(true) Forest = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("InfrastructureMaster"):
							XMLElement(true) InfrastructureMaster = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("LastLogonReplicationInterval"):
							XMLElement(true) LastLogonReplicationInterval = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("LostAndFoundContainer"):
							XMLElement(true) LostAndFoundContainer = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ManagedBy"):
							XMLElement(true) ManagedBy = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("Name"):
							XMLElement(true) Name = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("NetBIOSName"):
							XMLElement(true) NetBIOSName = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ObjectClass"):
							XMLElement(true) ObjectClass = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ObjectGuid"):
							XMLElement(true) ObjectGuid = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ObjectTypes"):
							ADCAPString("ObjectTypes") ObjectTypes;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ParentDomain"):
							XMLElement(true) ParentDomain = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("PDCEmulator"):
							XMLElement(true) PDCEmulator = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("QuotasContainer"):
							XMLElement(true) QuotasContainer = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ReadOnlyReplicaDirectoryServer"):
							XMLElement(true) ReadOnlyReplicaDirectoryServer = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ReferenceServer"):
							XMLElement(true) ReferenceServer = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ReplicaDirectoryServer"):
							ADCAPString("ReplicaDirectoryServer") ReplicaDirectoryServer = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("RIDMaster"):
							XMLElement(true) RIDMaster = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("SubordinateReferences"):
							ADCAPString("SubordinateReferences") SubordinateReferences = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("SystemsContainer"):
							XMLElement(true) SystemsContainer = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("UsersContainer"):
							XMLElement(true) UsersContainer = Property.XMLElementContent;
						default:
							XMLElement(true) Element;
					}
				}
					XMLTag("Domain") DomainETag;
			}
	}
}
struct ADCAPcaGetADDomainResponseElement
{
	XMLTag("GetADDomainResponse") GetADDomainResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				ADCAPDomain Domain;
				XMLTag("GetADDomainResponse") GetADDomainResponseETag;
			}
	}
}

struct ADCAPcaGetADDomainControllerRequestElement
{
	XMLTag("GetADDomainControllerRequest") GetADDomainControllerRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("NtdsSettingsDN"):
						struct
						{
							ADCAPString("NtdsSettingsDN") NtdsSettingsDN;
							XMLTag("GetADDomainControllerRequest") GetADDomainControllerRequestETag;
						}
				}
			}
	}
}
struct ADCAPActiveDirectoryDomainController
{
	XMLTag("ActiveDirectoryDomainController") ActiveDirectoryDomainControllerSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ActiveDirectoryDomainController")]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("DefaultPartition"):
							XMLElement(true) DefaultPartition = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("HostName"):
							XMLElement(true) HostName = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("InvocationId"):
							XMLElement(true) InvocationId = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("LdapPort"):
							XMLElement(true) LdapPort = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("NTDSSettingsObjectDN"):
							XMLElement(true) NTDSSettingsObjectDN = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("Name"):
							XMLElement(true) Name = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("OperationMasterRole"):
							XMLElement(true) OperationMasterRole = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("Partitions"):
							XMLElement(true) Partitions = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("ServerObjectDN"):
							XMLElement(true) ServerObjectDN = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("ServerObjectGuid"):
							XMLElement(true) ServerObjectGuid = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("Site"):
							XMLElement(true) Site = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("SslPort"):
							XMLElement(true) SslPort = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("ComputerDN"):
							XMLElement(true) ComputerDN = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("Domain"):
							XMLElement(true) Domain = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("Enabled"):
							XMLElement(true) Enabled = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("Forest"):
							XMLElement(true) Forest = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("IsGlobalCatalog"):
							XMLElement(true) IsGlobalCatalog = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("IsReadOnly"):
							XMLElement(true) IsReadOnly = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("OSHotFix"):
							XMLElement(true) OSHotFix = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("OSName"):
							XMLElement(true) OSName = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("OSServicepack"):
							XMLElement(true) OSServicepack = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("OSVersion"):
							XMLElement(true) OSVersion = Property.XMLElementContent;
						default:
							XMLElement(true) Element;
					}
				}
				XMLTag("ActiveDirectoryDomainController") ActiveDirectoryDomainControllerETag;
			}
	}
}

struct ADCAPDomainControllers = FormatString("There are %d ActiveDirectoryDomainController",Property.ADCAPActiveDirectoryDomainControllerCount)
{
	XMLTag("DomainControllers") DomainControllersSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				[Property.ADCAPActiveDirectoryDomainControllerCount = 0]
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("DomainControllers")]
				{
					[Property.ADCAPActiveDirectoryDomainControllerCount = Property.ADCAPActiveDirectoryDomainControllerCount + 1]
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("ActiveDirectoryDomainController"):
							ADCAPActiveDirectoryDomainController NtdsSettingsDNString;
					}
				}
				XMLTag("DomainControllers") DomainControllersETag;
			}
	}
}

struct ADCAPcaGetADDomainControllerResponseElement
{
	XMLTag("GetADDomainControllerResponse") GetADDomainControllerResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("DomainControllers"):
						ADCAPDomainControllers DomainControllers;
				}
				XMLTag("GetADDomainControllerResponse") GetADDomainControllerResponseETag;
			}
	}
}

struct ADCAPcaGetADForestRequestElement
{
	XMLTag("GetADForestRequest") GetADForestRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case string(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</":
						XmlElement(true)Element;
					case string(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && StringTerm(FrameData, FrameOffset, Property.XMLEncoding, ">", false, true, true).Contains("</GetADForestRequest"):
						struct{};
					case String(FrameData, FrameOffset, Property.XMLEncoding, 1) != "<":
						XmlElemContent value;
				}
				XMLTag("GetADForestRequest") GetADForestRequestETag;
			}
	}
}

struct ADCAPstring(tag) = FormatString("There are %d String",Property.ADCAPStringCount)
{
	XMLTag(tag) STag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				[Property.ADCAPStringCount = 0]
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains(tag)]
				{
					[Property.ADCAPStringCount = Property.ADCAPStringCount + 1]
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("sera:string"):
							XMLElement(true) StringElement;
					}
				}
				XMLTag(tag) ETag;
			}
	}
}

Table ADCAPActiveDirectoryForestTable(value)
{
	Switch(Value)
	{
		case 0: "Windows 2000 Server Forest Mode";
		case 1: "Windows Server 2003 Interim Forest Mode";
		case 2: "Windows Server 2003 Forest Mode";
		case 3: "Windows Server 2008 Forest Mode";
		case 4: "Windows Server 2008 R2 Forest Mode";
		default:"unknown";
	}
}
struct ADCAPActiveDirectoryForest
{
	XMLTag("Forest") ActiveDirectoryForestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while [!StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ActiveDirectoryForest")]
				{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("ApplicationPartitions"):
							ADCAPstring("ApplicationPartitions") ApplicationPartitions;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("CrossForestReferences"):
							ADCAPstring("CrossForestReferences") CrossForestReferences;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("DomainNamingMaster"):
							XMLElement(true) DomainNamingMaster = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("Domains"):
							ADCAPstring("Domains") Domains;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("ForestMode"):
							XMLElement(true) ForestMode = ADCAPActiveDirectoryForestTable(Property.XMLElementContent);
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("GlobalCatalogs"):
							ADCAPstring("GlobalCatalogs") GlobalCatalogs;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("Name"):
							XMLElement(true) Name = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("RootDomain"):
							XMLElement(true) RootDomain = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("SPNSuffixes"):
							ADCAPstring("SPNSuffixes") SPNSuffixes;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("SchemaMaster"):
							XMLElement(true) SchemaMaster = Property.XMLElementContent;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("Sites"):
							ADCAPstring("Sites") Sites;
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("UPNSuffixes"):
							ADCAPstring("UPNSuffixes") UPNSuffixes;
					}
				}
				
				XMLTag("Forest") ActiveDirectoryForestETag;
			}
	}
}

struct ADCAPcaGetADForestResponseElement
{
	XMLTag("GetADForestResponse") GetADForestResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				ADCAPActiveDirectoryForest Forest;
				XMLTag("GetADForestResponse") GetADForestResponseETag;
			}
	}
}

struct ADCAPcaMoveADOperationMasterRoleRequestElement
{
	XMLTag("MoveADOperationMasterRoleRequest") MoveADOperationMasterRoleRequestSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("OperationMasterRole"):
								XMLElement(true) OperationMasterRole = Property.XMLElementContent;
					}
					switch
					{
						case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("Seize"):
								XMLElement(true) Seize = Property.XMLElementContent;
					}
					XMLTag("MoveADOperationMasterRoleRequest") MoveADOperationMasterRoleRequestETag;
			}
	}
}

struct ADCAPcaMoveADOperationMasterRoleResponseElement
{
	XMLTag("MoveADOperationMasterRoleResponse") MoveADOperationMasterRoleResponseSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, false, false, false).contains("WasSeized"):
						XMLElement(true) WasSeized = Property.XMLElementContent;
				}
				XMLTag("MoveADOperationMasterRoleResponse") MoveADOperationMasterRoleResponseETag;
			}
	}
}


Table ADCAPSoapActionTable(value)
{
	Switch(value)
	{
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADGroupMember": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADGroupMemberResponse": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADPrincipalGroupMembership": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADPrincipalGroupMembershipResponse": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/SetPassword": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/SetPasswordResponse": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/ChangePassword": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/ChangePasswordResponse": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADPrincipalAuthorizationGroup": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/GetADPrincipalAuthorizationGroupResponse": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/TranslateName": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/AccountManagement/TranslateNameResponse": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADDomainController": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADDomainControllerResponse": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADDomain": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADDomainResponse": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/MoveADOperationMasterRole": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/MoveADOperationMasterRoleResponse": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADForest": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/GetADForestResponse": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/ChangeOptionalFeature": 
		Case "http://schemas.microsoft.com/2008/1/ActiveDirectory/CustomActions/TopologyManagement/ChangeOptionalFeatureResponse": true;
		Default:false;
	}
}

[RegisterBefore(SoapDetail.OtherElement, ADCAPFaultDetail, ADCAPcaFaultElementTable( StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false)))]
struct ADCAPcaFaultElement
{
	switch
	{
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ChangePasswordFault"):
			ADCAPFaultDetail("ChangePasswordFault") ChangePasswordFault;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GetADGroupMemberFault"):
			ADCAPFaultDetail("GetADGroupMemberFault") GetADGroupMemberFault;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GetADPrincipalAuthorizationGroupFault"):
			ADCAPFaultDetail("GetADPrincipalAuthorizationGroupFault ") GetADPrincipalAuthorizationGroupFault;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GetADPrincipalGroupMemberShipFault"):
			ADCAPFaultDetail("GetADPrincipalGroupMemberShipFault") GetADPrincipalGroupMemberShipFault;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("SetPasswordFault"):
			ADCAPFaultDetail("SetPasswordFault") SetPasswordFault;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("TranslateNameFault"):
			ADCAPFaultDetail("TranslateNameFault") TranslateNameFault;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("ChangeOptionalFeatureFault"):
			ADCAPFaultDetail("ChangeOptionalFeatureFault") ChangeOptionalFeatureFault ;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GetADDomainFault"):
			ADCAPFaultDetail("GetADDomainFault") GetADDomainFault;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GetADDomainControllerFault"):
			ADCAPFaultDetail("GetADDomainControllerFault") GetADDomainControllerFault;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("GetADForestFault"):
			ADCAPFaultDetail("GetADForestFault") GetADForestFault;
		case StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("MoveADOperationMasterRoleFault"):
			ADCAPFaultDetail("MoveADOperationMasterRoleFault") MoveADOperationMasterRoleFault;
	}
}

table ADCAPcaFaultElementTable( Value )
{
	switch( Value )
	{
		case Value.contains("ChangePasswordFault"): 
		case Value.contains("GetADPrincipalGroupMembershipFault"): 
		case Value.contains("SetPasswordFault"): 
		case Value.contains("GetADPrincipalAuthorizationGroupFault"): 
		case Value.contains("TranslateNameFault"): 
		case Value.contains("GetADDomainControllerFault"): 
		case Value.contains("GetADDomainFault"): 
		case Value.contains("MoveADOperationMasterRoleFault"): 
		case Value.contains("GetADForestFault"): 
		case Value.contains("ChangeOptionalFeatureFault"): 
		case Value.contains("GetADGroupMemberFault"): True;
		default: False;
	}
}