//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Fax Server and Client Remote Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-FAX]: Fax Server and Client Remote Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 3/2/2010
//#
//####

[FaxSummary = ""]//Property.MSRPCPType ? " Response" : " Request"]
Protocol FAX = FormatString( "%s%s%s%s%s", FaxMethodTable( Property.MSRPCIfUuid, Property.MSRPCOpnum ), Property.MSRPCPType ? " Response" : " Request", FaxSummary != "" ? ", " + FaxSummary : "", Property.MSRPCPType ? ", " + "Status = " + FAXErrorCodeNameTable( ReturnValue ) : "", Property.ParserError ? ", " + Property.ParserErrorMessage : Property.ParserErrorMessage )
{
	switch
	{
		Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
		case Property.MSRPCEncrypted != ConstEncTypeClearData:
			[FaxSummary = Property.MSRPCEncrypted == ConstEncTypeEncrypted ? "*Encrypted*" :"*Un-Interpreted*"] 
			Blob( FrameLength - FrameOffset ) EncryptedData;
		default:			
			Switch( Property.MSRPCIfUuid )
			{
				Case "{6099FC12-3EFF-11D0-ABD0-00C04FD91A4E}":
				_Struct Client
				{
					Switch( Property.MSRPCOpnum )
					{
						Case 0x0000:
						_Struct FAX_OpenConnection
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Notification Context: %u", NotificationContext)]
								_Struct Request
								{
									UINT64 NotificationContext = FormatString("%u", this);
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("FaxHandle: %s",FaxHandle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE FaxHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0001:
						_Struct FAX_ClientEventQueue
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("FaxPortHandle: %s, %s",FaxPortHandle.toString,FaxEvent.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE FaxPortHandle;
									FaxEvent FaxEvent;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0002:
						_Struct FAX_CloseConnection
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Context Handle: %s",FaxPortHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE FaxPortHandle;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("FaxPortHandle: %s",FaxPortHandle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE FaxPortHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0003:
						_Struct FAX_ClientEventQueueEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",FaxEvent.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE ClientContext;
									NdrConformant MaxCount;
									FaxEventEx FaxEvent; //ProtoDoc #20464
									Align4 pad;
									UINT32 DataSize;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Default: ReportParserError(ParserErrorProtocolClassWindows, "Fax Client", "Unknown Fax Client Request") ProtocolError;
					}
				}
    		
				Case "{EA0A3165-4834-11D2-A6F8-00C04FA346CC}":
				_Struct Server
				{
					Switch( Property.MSRPCOpnum )
					{
						Case 0x0000:
						_Struct FAX_GetServicePrinters {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("BufferSize: %u, PrintersReturned: %u",BufferSize,PrintersReturned)]
								_Struct Response
								{
									PFaxPrinterInfoWArray(UINT32(FrameData,FrameLength - 8)) PrinterInformation;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 PrintersReturned;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0001:
						_Struct FAX_ConnectionRefCount
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Connect: %s, Handle: %s",FaxConnectTable( Connect,FALSE),Handle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE Handle;
									UINT32 Connect = FaxConnectTable( this,TRUE );
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("CanShare: %s, Handle: %s",CanShare.toString,Handle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE Handle;
									UINT32 CanShare;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0002:
						_Struct FAX_OpenPort
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("DeviceID: %u, Flags: %s",DeviceID,Flags.toString)]
								_Struct Request
								{
									UINT32 DeviceID = FormatString("%u",this);
									Switch( Property.MSRPCByteOrder )
									{
										Case LittleEndian:
										Struct {
											UINT32 Flags = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
											{
												UINT32 PortOpenQuery:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Port access level required to obtain a fax port handle" : "Port access level NOT required to obtain a fax port handle");
												UINT32 PortOpenModify:1 = FormatString("(%s) %s", this.ToBitString, this ? "Port access level required to change the configuration of a fax port" : "Port access level NOT required to change the configuration of a fax port");
												UINT32 Unused:30 = FormatString("        (%s)", this.ToBitString);
											}
										}
										Default:
										Struct {
											UINT32 Flags = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
											{
												UINT32 Unused:30 = FormatString("        (%s)", this.ToBitString);
												UINT32 PortOpenModify:1 = FormatString("(%s) %s", this.ToBitString, this ? "Port access level required to change the configuration of a fax port" : "Port access level NOT required to change the configuration of a fax port");
												UINT32 PortOpenQuery:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Port access level required to obtain a fax port handle" : "Port access level NOT required to obtain a fax port handle");
											}
										}
									}
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("FaxPortHandle: %s",FaxPortHandle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE FaxPortHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0003:
						_Struct FAX_ClosePort
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("FaxPortHandle: %s",FaxPortHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE FaxPortHandle;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("FaxPortHandle: %s",FaxPortHandle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE FaxPortHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0004:
						_Struct FAX_EnumJobs {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("BufferSize: %u, JobsReturned: %u",BufferSize,JobsReturned)]
								_Struct Response
								{
									FaxJobEntryArray(UINT32(FrameData,FrameLength - 8 )) FaxJobEntries;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 JobsReturned;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0005:
						_Struct FAX_GetJob
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("JobID: %u",JobID)]
								_Struct Request
								{
									UINT32 JobID;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("BufferSize: %u",BufferSize)]
								_Struct Response
								{
									FaxJobEntryArray(0) FaxJobEntries;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0006:
						_Struct FAX_SetJob
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("JobId: %u, Command: %s",JobId,FaxCommandTable(Command,FALSE))]
								_Struct Request
								{
									UINT32 JobId;
									UINT32 Command = FaxCommandTable( this,TRUE );
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0007:
						_Struct FAX_GetPageData
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("JobID: %u, ImageWidth: %u, ImageHeight: %u",JobID,ImageWidth,ImageHeight)]
								_Struct Request
								{
									UINT32 JobId;
									UINT32 ImageWidth;
									UINT32 ImageHeight;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("BufferSize: %u, ImageWidth: %u, ImageHeight: %u",BufferSize,ImageWidth,ImageHeight)]
								_Struct Response
								{
									NdrPtrToConformant Pointer;
									switch
									{
										case Pointer.ReferentID > 0:
											BLOB(Pointer.MaxCount) Buffer;
									}
									Align4 pad;
									UINT32 BufferSize;
									UINT32 ImageWidth;
									UINT32 ImageHeight;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0008:
						_Struct FAX_GetDeviceStatus
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("FaxPortHandle: %s",FaxPortHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE FaxPortHandle;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("StatusBuffer: %s, BufferSize: %u",StatusBuffer.toString,BufferSize)]
								_Struct Response
								{
									PFaxDeviceStatus StatusBuffer;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0009:
						_Struct FAX_Abort
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("JobID: %u",JobID)]
								_Struct Request
								{
									UINT32 JobId;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x000A:
						_Struct FAX_EnumPorts {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("PortsReturned: %u, BufferSize: %u",PortsReturned, BufferSize)]
								_Struct Response
								{
									PFaxPortInfoArray(UINT32(FrameData,FrameLength - 8 )) FaxPortInformation;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 PortsReturned;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x000B:
						_Struct FAX_GetPort
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("FaxPortHandle: %s",FaxPortHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE FaxPortHandle;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s, BufferSize: %u",FaxPortInformation.toString,BufferSize)]
								_Struct Response
								{
									PFaxPortInfoArray(1) FaxPortInformation;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x000C:
						_Struct FAX_SetPort
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s, FaxPortHandle: %s",PortInfo.toString,FaxPortHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE FaxPortHandle;
									PFaxPortInfo PortInfo;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x000D:
						_Struct FAX_EnumRoutingMethods
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("FaxPortHandle: %s",FaxPortHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE FaxPortHandle;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("RoutingInfoBufferSize: %u, PortsReturned: %u",RoutingInfoBufferSize,PortsReturned)]
								_Struct Response
								{
									FaxRoutingMethodArray(UINT32(FrameData,FrameLength - 8 )) RoutingInfoBuffer;
									Align4 pad;
									UINT32 RoutingInfoBufferSize = FormatString("%u",RoutingInfoBufferSize);
									UINT32 PortsReturned = FormatString("%u",PortsReturned);
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x000E:
						_Struct FAX_EnableRoutingMethod
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("RoutingGuid: %s, Enabled: %s, FaxPortHandle: %s",RoutingGuid.toString,Enabled.toString,FaxPortHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE FaxPortHandle;
									NdrWIDESTRINGPtr RoutingGuid;
									Align4 pad;
									BOOL Enabled;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x000F:
						_Struct FAX_GetRoutingInfo
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("RoutingGuid: %s, FaxPortHandle: %s",RoutingGuid.toString,FaxPortHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE FaxPortHandle;
									[Conversation.FaxRoutingGuid = RoutingGuid.toString]
									NdrWIDESTRINGPtr RoutingGuid;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("FaxRoutingInfo: %s, RoutingInfoBufferSize: %u",FaxRoutingInfo,RoutingInfoBufferSize)]
								_Struct Response
								{
									NdrPtrToConformant MaxCount;
									switch
									{
										case MaxCount.referentID > 0:
										struct
										{
											switch (Conversation.FaxRoutingGuid)
											{
												case "{6bbf7bfe-9af2-11d0-abf7-00c04fd91a4e}": [FaxRoutingInfo = RoutingEmailInfo.toString]NdrWideString RoutingEmailInfo;
												case "{92041a90-9af2-11d0-abf7-00c04fd91a4e}": [FaxRoutingInfo = RoutingFolderInfo.toString]NdrWideString RoutingFolderInfo;
												case "{aec1b37c-9af2-11d0-abf7-00c04fd91a4e}": [FaxRoutingInfo = RoutingPrinterInfo.toString]NdrWideString RoutingPrinterInfo;
												case "{aacc65ec-0091-40d6-a6f3-a2ed6057e1fa}":
												[Post.FaxRoutingInfo = local.FlagsTemp]
												switch( Property.MSRPCByteOrder )
												{
													Case LittleEndian:
													Struct {
														[local.FlagsTemp= Flags.ToString]
														UINT32 Flags = FormatString("0x%08X", UINT32(FrameData,FrameOffset))
														{
															UINT32 Printer:1 = FormatString("(%s) %s", this.ToBitString,this?"Route faxes to a printer":"Faxes are NOT routed to a printer");
															UINT32 Folder:1 = FormatString(" (%s) %s", this.ToBitString,this?"Route faxes to a folder":"Faxes are NOT routed to a folder");
															UINT32 Inbox:1 = FormatString("  (%s) %s", this.ToBitString,this?"Route faxes to the inbox":"Faxes are NOT routed to the inbox");
															UINT32 Email:1 = FormatString("  (%s) %s", this.ToBitString,this?"Route faxes to an email address":"Faxes are NOT routed to an email address");
															UINT32 Unused:28 = FormatString(" (%s)", this.ToBitString); 
														}
													}
													Default:
													Struct {
														[local.FlagsTemp= Flags.ToString]
														UINT32 Flags = FormatString("0x%08X", UINT32(FrameData,FrameOffset))
														{
															UINT32 Unused:28 = FormatString(" (%s)", this.ToBitString); 
															UINT32 Email:1 = FormatString("  (%s) %s", this.ToBitString,this?"Route faxes to an email address":"Faxes are NOT routed to an email address");
															UINT32 Inbox:1 = FormatString("  (%s) %s", this.ToBitString,this?"Route faxes to the inbox":"Faxes are NOT routed to the inbox");
															UINT32 Folder:1 = FormatString(" (%s) %s", this.ToBitString,this?"Route faxes to a folder":"Faxes are NOT routed to a folder");
															UINT32 Printer:1 = FormatString("(%s) %s", this.ToBitString,this?"Route faxes to a printer":"Faxes are NOT routed to a printer");
														}
													}
												}
											}
										}
									}
									UINT32 RoutingInfoBufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0010:
						_Struct FAX_SetRoutingInfo
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("RoutingGuid: %s, RoutingInfo: %s",FaxRoutingGuidTable(RoutingGuid.toString),FaxRoutingInfo)]
								_Struct Request
								{
									CONTEXT_HANDLE FaxPortHandle;
									NdrWIDESTRINGPtr RoutingGuid;
									NdrPtrToConformant RoutingInfoBuffer;
									switch
									{
										case RoutingInfoBuffer.ReferentID > 0:
										switch
										{
											case RoutingGuid.toString == "{6bbf7bfe-9af2-11d0-abf7-00c04fd91a4e}":[FaxRoutingInfo = RoutingEmailInfo.toString]NdrWideString RoutingEmailInfo;
											case RoutingGuid.toString == "{92041a90-9af2-11d0-abf7-00c04fd91a4e}":[FaxRoutingInfo = RoutingFolderInfo.toString]NdrWideString RoutingFolderInfo;
											case RoutingGuid.toString == "{aec1b37c-9af2-11d0-abf7-00c04fd91a4e}":[FaxRoutingInfo = RoutingPrinterInfo.toString]NdrWideString RoutingPrinterInfo;
											case RoutingGuid.toString == "{aacc65ec-0091-40d6-a6f3-a2ed6057e1fa}":
											[Post.FaxRoutingInfo = local.FlagsTemp]
											switch( Property.MSRPCByteOrder )
											{
												Case LittleEndian:
												Struct {
													[local.FlagsTemp= Flags.ToString]
													UINT32 Flags = FormatString("0x%08X", UINT32(FrameData,FrameOffset))
													{
														UINT32 Printer:1 = FormatString("(%s) %s", this.ToBitString,this?"Route faxes to a printer":"Faxes are NOT routed to a printer");
														UINT32 Folder:1 = FormatString(" (%s) %s", this.ToBitString,this?"Route faxes to a folder":"Faxes are NOT routed to a folder");
														UINT32 Inbox:1 = FormatString("  (%s) %s", this.ToBitString,this?"Route faxes to the inbox":"Faxes are NOT routed to the inbox");
														UINT32 Email:1 = FormatString("  (%s) %s", this.ToBitString,this?"Route faxes to an email address":"Faxes are NOT routed to an email address");
														UINT32 Unused:28 = FormatString(" (%s)", this.ToBitString); 
													}
												}
												Default:
												Struct {
													[local.FlagsTemp= Flags.ToString]
													UINT32 Flags = FormatString("0x%08X", UINT32(FrameData,FrameOffset))
													{
														UINT32 Unused:28 = FormatString(" (%s)", this.ToBitString); 
														UINT32 Email:1 = FormatString("  (%s) %s", this.ToBitString,this?"Route faxes to an email address":"Faxes are NOT routed to an email address");
														UINT32 Inbox:1 = FormatString("  (%s) %s", this.ToBitString,this?"Route faxes to the inbox":"Faxes are NOT routed to the inbox");
														UINT32 Folder:1 = FormatString(" (%s) %s", this.ToBitString,this?"Route faxes to a folder":"Faxes are NOT routed to a folder");
														UINT32 Printer:1 = FormatString("(%s) %s", this.ToBitString,this?"Route faxes to a printer":"Faxes are NOT routed to a printer");
													}
												}
											}
										}
									}
									Align4 Pad;
									UINT32 RoutingInfoBufferSize;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0011:
						_Struct FAX_EnumGlobalRoutingInfo {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("RoutingInfoBufferSize: %u, MethodsReturned: %u",RoutingInfoBufferSize, MethodsReturned)]
								_Struct Response
								{
									FaxGlobalRoutingInfoArray(UINT32(FrameData,FrameLength - 8 )) RoutingInfoBuffer;
									Align4 pad;
									UINT32 RoutingInfoBufferSize;
									UINT32 MethodsReturned;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0012:
						_Struct FAX_SetGlobalRoutingInfo
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("RoutingInfo: %s",RoutingInfo.toString)]
								_Struct Request
								{
									PFaxGlobalRoutingInfoW RoutingInfo;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0013:
						_Struct FAX_GetConfiguration {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",FaxConfiguration.toString)]
								_Struct Response
								{
									PFaxConfigurationW FaxConfiguration;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0014:
						_Struct FAX_SetConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",FaxConfig.toString)]
								_Struct Request
								{
									PFaxConfigurationW FaxConfig;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0015:
						_Struct FAX_GetLoggingCategories {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("NumberCategories: %u, BufferSize: %u",NumberCategories,BufferSize)]
								_Struct Response
								{
									FaxLogCategoryArray(UINT32(FrameData,FrameLength - 8 )) Buffer;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 NumberCategories;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0016:
						_Struct FAX_SetLoggingCategories
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s, Categories: %u",FaxLogCategoryBuffer.toString,NumberCategories)]
								_Struct Request
								{
									FaxLogCategoryArray(UINT32(FrameData,FrameLength - 4 )) FaxLogCategoryBuffer;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 NumberCategories;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0017:
						_Struct FAX_GetSecurity {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",SecurityDescriptor.toString)]
								_Struct Response
								{
									NdrPtrToConformant Pointer;
									switch
									{
										case Pointer.ReferentID > 0:
											NdrSecurityDescriptor SecurityDescriptor;
									}
									Align4 Pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0018:
						_Struct FAX_SetSecurity
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("SecurityInformation: %s, SecurityDescriptor: %s",SecurityInformation.toString,SecurityDescriptor.toString)]
								_Struct Request
								{
									FaxSecurityInformation SecurityInformation;
									NdrPtrToConformant Pointer;
									switch
									{
										case Pointer.ReferentID > 0:
											NdrSecurityDescriptor SecurityDescriptor;	
									}
									Align4 pad;						
									UINT32 BufferSize;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0064:
						//#? the same as FAX_SetSecurity
						_Struct FAX_SetSecurityEx2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("SecurityInformation: %s, SecurityDescriptor: %s",SecurityInformation.toString,SecurityDescriptor.toString)]
								_Struct Request
								{
									FaxSecurityInformation SecurityInformation;
									NdrPtrToConformant Pointer;
									switch
									{
										case Pointer.ReferentID > 0:
											NdrSecurityDescriptor SecurityDescriptor;	
									}
									Align4 pad;
									UINT32 BufferSize;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0019:
						_Struct FAX_AccessCheck
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Accessmask: %s",Accessmask.toString)]
								_Struct Request
								{
									FaxSpecificAccessRights Accessmask;
									NdrPtr Pointer;
									switch
									{
										case Pointer.ReferentID > 0:FaxSpecificAccessRights AccessRights;
									}
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("Access: %s, AccessRights: %s",Access.ToString,AccessRights.toString)]
								_Struct Response
								{
									BOOL Access;
									NdrPtr Pointer;
									switch
									{
										case Pointer.ReferentID > 0:FaxSpecificAccessRights AccessRights;
									}
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x0065:
						_Struct FAX_AccessCheckEx2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Accessmask: %s",Accessmask.toString)]
								_Struct Request
								{
						      FaxSpecificAccessRights Accessmask;
						      NdrPtr Pointer;
									switch
									{
										case Pointer.ReferentID > 0:FaxSpecificAccessRights AccessRights;
									}				            
								}
						
								Case 0x02:
								[FaxSummary = FormatString("Access: %s, AccessRights: %s",Access.ToString,AccessRights.toString)]
								_Struct Response
								{
									BOOL Access;
									NdrPtr Pointer;
									switch
									{
										case Pointer.ReferentID > 0:FaxSpecificAccessRights AccessRights;
									}
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
    		
						Case 0x001A:
						_Struct FAX_CheckServerProtSeq
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Protocol Sequence: %s",ProtSeq.toString)]
								_Struct Request
								{
									UINT32Ptr ProtSeq = FormatString( "%s", ProtSeq.Pointer.ReferentID > 0 ? FaxProtocolSequenceTypeTable( ProtSeq.Value ) : this.ToString );
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("Protocol Sequence: %s",ProtSeq.toString)]
								_Struct Response
								{
									UINT32Ptr ProtSeq = FormatString( "%s", ProtSeq.Pointer.ReferentID > 0 ? FaxProtocolSequenceTypeTable( ProtSeq.Value ) : this.ToString );
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x001B:
						_Struct FAX_SendDocumentEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("FileName: %s, Recipients: %u, JobId: %u",FileName.toString,NumRecipients,JobId.Value)]
								_Struct Request
								{
									NdrWIDESTRINGPtr FileName;
									NdrAlign Pad;
									FaxCoverpageInfoExW CoverPageInfo;
									NdrAlign Padding;
									FaxPersonalProfileW SenderProfile;
    							Align4 Pad1;
									UINT32 NumRecipients;
									FaxPersonalProfileWArray RecipientList;
    							Align4 Pad2;
									FaxJobParamExW JobParams;
									UINT32Ptr JobId;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("JobId: %u, MessageId: %u",JobId,MessageId)]
								_Struct Response
								{
									UINT32Ptr JobId;
									ALIGN8 Pad1;							
									UINT64 MessageId;
									NdrConformant MaxCount;
									switch
									{
										case MaxCount.MaxCount:
										_struct RecipientMessageId
										{								
											ALIGN8 Pad2;
											UINT64 RecipientMessageId[MaxCount.MaxCount];
										}
									}
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x001C:
						_Struct FAX_EnumJobsEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("JobTypes: %s",JobTypes.toString)]
								_Struct Request
								{
									UINT32 JobTypes = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
									{
										Switch( Property.MSRPCByteOrder )
										{
											Case LittleEndian:
											Struct
											{
												UINT32 JTUnknown:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Job type is unknown" : "Job type is known");
												UINT32 JTSend:1 = FormatString("       (%s) %s", this.ToBitString, this ? "Job is an outgoing fax transmission" : "Job is not an outgoing fax transmission");
												UINT32 JTReceive:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Job is an incoming fax transmission" : "Job is not an incoming fax transmission");
												UINT32 JTRouting:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Fax server tried to route the fax transmission, but routing failed" : "Fax server did not try to route the transmission");
												UINT32 JTFailReceive:1 = FormatString("(%s) %s", this.ToBitString, this ? "Fax server failed to receive the job" : "Fax server received the job");
												UINT32 JTBroadcast:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Job is an outgoing broadcast message" : "Job is not an outgoing broadcast message");
												UINT32 Unused:26 = FormatString("       (%s)", this.ToBitString);
											}
    		
											Default:
											Struct
											{
												UINT32 Unused:26 = FormatString("       (%s)", this.ToBitString);
												UINT32 JTBroadcast:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Job is an outgoing broadcast message" : "Job is not an outgoing broadcast message");
												UINT32 JTFailReceive:1 = FormatString("(%s) %s", this.ToBitString, this ? "Fax server failed to receive the job" : "Fax server received the job");
												UINT32 JTRouting:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Fax server tried to route the fax transmission, but routing failed" : "Fax server did not try to route the transmission");
												UINT32 JTReceive:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Job is an incoming fax transmission" : "Job is not an incoming fax transmission");
												UINT32 JTSend:1 = FormatString("       (%s) %s", this.ToBitString, this ? "Job is an outgoing fax transmission" : "Job is not an outgoing fax transmission");
												UINT32 JTUnknown:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Job type is unknown" : "Job type is known");
											}									
										}
									}
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("Jobs: %u, BufferSize: %u",dwJobs ? dwJobs : Property.FaxJobEntryCount , Property.FaxJobEntryBufferSize)]
								_Struct Response
								{
									FaxJobEntryExWArray FaxJobEntries;  
									Align4 pad;
									UINT32 BufferSize;
									UINT32 dwJobs;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x0058:
						_Struct FAX_EnumJobsEx2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("JobTypes: %s",JobTypes.toString)]
								_Struct Request
								{
						      BOOL Accounts = this? "All accounts are enumerated": "AccountName enumerated";
						      NdrWIDESTRINGPtr AccountName;
						      Align4 Pad;
									UINT32 JobTypes = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
									{
										Switch( Property.MSRPCByteOrder )
										{
											Case LittleEndian:
											Struct
											{
												UINT32 JTUnknown:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Job type is unknown" : "Job type is known");
												UINT32 JTSend:1 = FormatString("       (%s) %s", this.ToBitString, this ? "Job is an outgoing fax transmission" : "Job is not an outgoing fax transmission");
												UINT32 JTReceive:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Job is an incoming fax transmission" : "Job is not an incoming fax transmission");
												UINT32 JTRouting:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Fax server tried to route the fax transmission, but routing failed" : "Fax server did not try to route the transmission");
												UINT32 JTFailReceive:1 = FormatString("(%s) %s", this.ToBitString, this ? "Fax server failed to receive the job" : "Fax server received the job");
												UINT32 JTBroadcast:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Job is an outgoing broadcast message" : "Job is not an outgoing broadcast message");
												UINT32 Unused:26 = FormatString("       (%s)", this.ToBitString);
											}
    		
											Default:
											Struct
											{
												UINT32 Unused:26 = FormatString("       (%s)", this.ToBitString);
												UINT32 JTBroadcast:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Job is an outgoing broadcast message" : "Job is not an outgoing broadcast message");
												UINT32 JTFailReceive:1 = FormatString("(%s) %s", this.ToBitString, this ? "Fax server failed to receive the job" : "Fax server received the job");
												UINT32 JTRouting:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Fax server tried to route the fax transmission, but routing failed" : "Fax server did not try to route the transmission");
												UINT32 JTReceive:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Job is an incoming fax transmission" : "Job is not an incoming fax transmission");
												UINT32 JTSend:1 = FormatString("       (%s) %s", this.ToBitString, this ? "Job is an outgoing fax transmission" : "Job is not an outgoing fax transmission");
												UINT32 JTUnknown:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Job type is unknown" : "Job type is known");
											}									
										}
									}
									UINT32 Level =  MustBeSetToTable(this,"1");			            
								}
						
								Case 0x02:
								[FaxSummary = FormatString("Jobs: %u, BufferSize: %u",dwJobs, BufferSize)]
								_Struct Response
								{
						      FaxJobEntryEx1WArray(UINT32(FrameData,FrameLength - 8 )) FaxJobEntries; // same problem with opnum 28,29,87,88
						      Align4 pad;
						      UINT32 BufferSize;
						      UINT32 dwJobs;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}				
    		
    		
						Case 0x001D:
						_Struct FAX_GetJobEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("MessageId: %u",MessageId)]
								_Struct Request
								{
									UINT64 MessageId;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",FaxJobEntry.toString)]
								_Struct Response
								{
									FaxJobEntryExWArray FaxJobEntries;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x0057:
						_Struct FAX_GetJobEx2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("MessageId: %u",MessageId)]
								_Struct Request
								{
									UINT64 MessageId;
									UINT32 Level =  MustBeSetToTable(this,"1");				
						
								}
						
								Case 0x02:
								[FaxSummary = FormatString("%s",FaxJobEntry.toString)]
								_Struct Response
								{
									FaxJobEntryEx1WArray(1) FaxJobEntries;//same problem with opnum 28,29,87,88
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}				
    		
						Case 0x001E:
						_Struct FAX_GetCountryList {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("CountryList: %s, BufferSize: %u", CountryList.toString,BufferSize)]
								_Struct Response
								{
									PFaxTAPILineCountryListW CountryList;
									Align4 pad;
									UINT32 BufferSize;//22000
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x001F:
						_Struct FAX_GetPersonalProfileInfo
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Folder: %s, ProfileType: %s, MessageId: %u",FaxEnumMessageFolderTable( Folder, FALSE ),FaxProfTypeTable( ProfType,FALSE),MessageId)]
								_Struct Request
								{
									UINT64 MessageId;
									UINT16 Folder = FaxEnumMessageFolderTable( this, TRUE );
									UINT16 ProfType = FaxProfTypeTable( this,TRUE );
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",FaxPersonalProfile.toString)]
								_Struct Response
								{
									NdrPtr FaxPersonalProfilePtr;
									switch
									{
										case FaxPersonalProfilePtr.ReferentID > 0:
											FaxPersonalProfileWArray FaxPersonalProfile;
									}
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0020:
						_Struct FAX_GetQueueStates {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("QueueStates: %s",QueueStates.toString)]
								_Struct Response
								{
									FaxQueueStates QueueStates;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0021:
						_Struct FAX_SetQueue {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("QueueStates: %s",QueueStates.toString)]
								_Struct Response
								{
									FaxQueueStates QueueStates;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0022:
						_Struct FAX_GetReceiptsConfiguration {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",FaxReceiptsConfig.toString)]
								_Struct Response
								{
									PFaxReceiptsConfigW FaxReceiptsConfig;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0023:
						_Struct FAX_SetReceiptsConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",Receipts.toString)]
								_Struct Request
								{
									FaxReceiptsConfigW Receipts;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0024:
						_Struct FAX_GetReceiptsOptions {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("ReceiptOptions: %s",ReceiptOptions.toString)]
								_Struct Response
								{
									Switch( Property.MSRPCByteOrder )
									{
										Case LittleEndian:
										Struct
										{
											UINT32 ReceiptOptions = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
											{
												UINT32 DRTEmail:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Allow sending the receipt by e-mail" : "Do NOT allow sending the receipt by e-mail");
												UINT32 Reserved:1 = FormatString(" (%s)", this.ToBitString);
												UINT32 DRTMsgBox:1 = FormatString("(%s) %s", this.ToBitString, this ? "Allow notification on the transmission result using a message box to the sending user's machine" : "Don't allow notification on the transmission result using a message box to the sending user's machine");
												UINT32 Unused:29 = FormatString("   (%s)", this.ToBitString);
											}									
										}
										Default:
										Struct
										{
											UINT32 ReceiptOptions = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) ) 
											{
												UINT32 Unused:29 = FormatString("   (%s)", this.ToBitString);
												UINT32 DRTMsgBox:1 = FormatString("(%s) %s", this.ToBitString, this ? "Allow notification on the transmission result using a message box to the sending user's machine" : "Don't allow notification on the transmission result using a message box to the sending user's machine");
												UINT32 Reserved:1 = FormatString(" (%s)", this.ToBitString);
												UINT32 DRTEmail:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Allow sending the receipt by e-mail" : "Do NOT allow sending the receipt by e-mail");
											}										
										}
									}
    		
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0025:
						_Struct FAX_GetVersion
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",Version.toString)]
								_Struct Request
								{
									FaxVersion Version;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s", Version.toString)]
								_Struct Response
								{
									FaxVersion Version;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0026:
						_Struct FAX_GetOutboxConfiguration {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",FaxOutboxConfig.toString)]
								_Struct Response
								{
									PFaxOutboxConfig FaxOutboxConfig;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0027:
						_Struct FAX_SetOutboxConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",OutboxConfig.toString)]
								_Struct Request
								{
									FaxOutboxConfig OutboxConfig;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0028:
						_Struct FAX_GetPersonalCoverPagesOption {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("PersonalCoverPagesAllowed: %s",PersonalCPAllowed.toString)]
								_Struct Response
								{
									BOOL PersonalCPAllowed;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0029:
						_Struct FAX_GetArchiveConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Folder: %s",FaxEnumMessageFolderTable( folder, false ))]
								_Struct Request
								{
									NdrEnum Folder = FaxEnumMessageFolderTable( this.value, TRUE );
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",FaxArchiveConfig.toString)]
								_Struct Response
								{
									PFaxArchiveConfigW FaxArchiveConfig;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x002A:
						_Struct FAX_SetArchiveConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Folder: %s, %s",FaxEnumMessageFolderTable( folder, false ),ArchiveConfig.toString)]
								_Struct Request
								{
									NdrEnum Folder = FaxEnumMessageFolderTable( this.value, TRUE );
									Align4 Align;
									FaxArchiveConfigW ArchiveConfig;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x002B:
						_Struct FAX_GetActivityLoggingConfiguration {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",FaxActivityLoggingConfig.toString)]
								_Struct Response
								{
									PFaxActivityLoggingConfigW FaxActivityLoggingConfig;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x002C:
						_Struct FAX_SetActivityLoggingConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",ActivityLogConfig.toString )]
								_Struct Request
								{
									FaxActivityLoggingConfigW ActivityLogConfig;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x002D:
						_Struct FAX_EnumerateProviders {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("NumProviders: %u, BufferSize: %u",NumProviders,BufferSize)]
								_Struct Response
								{
									PFaxDeviceProviderInfoArray(UINT32(FrameData,FrameLength - 8 )) FaxDeviceProviderInfo;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 NumProviders;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x002E:
						_Struct FAX_GetPortEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("DeviceId: %u",DeviceId)]
								_Struct Request
								{
									UINT32 DeviceId = FormatString("%u",this);
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s, BufferSize: %u",FaxPortInfo.toString,BufferSize)]
								_Struct Response
								{
									PFaxPortInfoW(1) FaxPortInfo;
									Align4 pad;
									UINT32 BufferSize = FormatString("%u", this);
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x002F:
						_Struct FAX_SetPortEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("DeviceId: %u, %s",DeviceId,PortInfo.toString)]
								_Struct Request
								{
									UINT32 DeviceId = FormatString("%u",this);
									FaxPortInfoW PortInfo;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0030:
						_Struct FAX_EnumPortsEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s, NumPorts: %u, BufferSize: %u",FaxPortInfo.toString,NumPorts,BufferSize)]
								_Struct Response
								{
									PFaxPortInfoW(UINT32(FrameData,FrameLength - 8 )) FaxPortInfo;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 NumPorts;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0031:
						_Struct FAX_GetExtensionData
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("DeviceId: %u, NameGUID: %s",DeviceId, NameGUID.toString)]
								_Struct Request
								{
									UINT32 DeviceId;
									NdrWideString NameGUID;	
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("DataSize: %s",DataSize)]
								_Struct Response
								{
									NdrPtrToConformant Pointer;
									BLOB(Pointer.MaxCount) Data;
									Align4 pad;
									UINT32 DataSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0032:
						_Struct FAX_SetExtensionData
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("ComputerName: %s, NameGUID: %s, DeviceId: %u",ComputerName.toString,NameGUID.toString,DeviceId)]
								_Struct Request
								{
									NdrWideString ComputerName;
									Align4 Pad;
									UINT32 DeviceId;
									NdrWideString NameGUID;
									NdrConformantArray (FALSE, TRUE) MaxCount;
									UINT32 DataSize;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0033:
						_Struct FAX_AddOutboundGroup
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("GroupName: %s",GroupName.toString)]
								_Struct Request
								{
									NdrWideString GroupName;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0034:
						_Struct FAX_SetOutboundGroup
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",OutboundRoutingGroup.toString)]
								_Struct Request
								{
									RPCFaxOutboundRoutingGroupW OutboundRoutingGroup;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0035:
						_Struct FAX_RemoveOutboundGroup
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("GroupName: %s",GroupName.toString)]
								_Struct Request
								{
									NdrWideString GroupName;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0036:
						_Struct FAX_EnumOutboundGroups {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s, DataSize: %u, NumGroups: %u",FaxOutboundRoutingGroup.toString,DataSize,NumGroups)]
								_Struct Response
								{
									FaxRPCFaxOutboundRoutingGroupArray(UINT32(FrameData,FrameLength - 8 )) FaxOutboundRoutingGroup;
									Align4 pad;
									UINT32 DataSize;
									UINT32 NumGroups;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0037:
						_Struct FAX_SetDeviceOrderInGroup
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("GroupName: %s, DeviceId: %u, NewOrder: %u",GroupName.toString,DeviceId,NewOrder)]
								_Struct Request
								{
									NdrWideString GroupName;
									Align4 Pad;
									UINT32 DeviceId;
									UINT32 NewOrder;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0038:
						_Struct FAX_AddOutboundRule
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("GroupName: %s, AreaCode: %u, CountryCode: %u, DeviceID: %u, UseGroup: %s",GroupName.toString,AreaCode,CountryCode,DeviceID,UseGroup.toString)]
								_Struct Request
								{
									UINT32 AreaCode;
									UINT32 CountryCode;
									UINT32 DeviceID;
									NdrWIDESTRINGPtr GroupName;
									Align4 pad;
									BOOL UseGroup;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0039:
						_Struct FAX_RemoveOutboundRule
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("AreaCode: %u, CountryCode: %u",AreaCode,CountryCode)]
								_Struct Request
								{
									UINT32 AreaCode;
									UINT32 CountryCode;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x003A:
						_Struct FAX_SetOutboundRule
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",OutboundRoutingRule.toString)]
								_Struct Request
								{
									RPCFaxOutboundRoutingRuleSingle OutboundRoutingRule;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x003B:
						_Struct FAX_EnumOutboundRules {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s, NumRules: %u, DataSize: %u", FaxOutboundRoutingRule.ToString, NumRules, DataSize)]
								_Struct Response
								{
									RPCFaxOutboundRoutingRuleW(UINT32(FrameData,FrameLength - 8 )) FaxOutboundRoutingRule;
									Align4 pad;
									UINT32 DataSize;
									UINT32 NumRules;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x003C:
						_Struct FAX_RegisterServiceProviderEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("FriendlyName: %s, ImageName: %s", FriendlyName.toString,ImageName.toString)]
								_Struct Request
								{
									NdrWideString GUID;
									NdrWideString FriendlyName;
									NdrWideString ImageName;
									NdrWideString TspName;
									Align4 Pad;
									UINT32 FSPIVersion = FormatString("%d (0X%08x) (must set to 0x00010000 (Vesion 1))", this, this);
									UINT32 Capabilities =  MustBeSetToTable(this,"0");
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x003D:
						_Struct FAX_UnregisterServiceProviderEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("GUID: %s",GUID.toString)]
								_Struct Request
								{
									NdrWideString GUID;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x003F:
						_Struct FAX_StartMessagesEnum
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Folder: %s",FaxEnumMessageFolderTable( Folder,FALSE ))]
								_Struct Request
								{
									NdrEnum Folder = FaxEnumMessageFolderTable( this.value,TRUE );
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("Handle: %s",Handle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE Handle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x005A:
						_Struct FAX_StartMessagesEnumEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Folder: %s",FaxEnumMessageFolderTable( Folder,FALSE ))]
								_Struct Request
								{
									BOOL AllAccounts = this? "For all accounts": "For AccountName";
									NdrWIDESTRINGPtr AccountName;
									NdrEnum Folder = FaxEnumMessageFolderTable( this.value,TRUE );
									ALIGN4 Pad;
									UINT32 Level = MustBeSetToTable(this,"0");
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("Handle: %s",Handle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE Handle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0040:
						_Struct FAX_EndMessagesEnum
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Handle: %s",Handle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE Handle;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									CONTEXT_HANDLE Handle;
    		         	[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0041:
						_Struct FAX_EnumMessages
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("EnumHandle: %s, NumMessages: %u",EnumHandle.toString,NumMessages)]
								_Struct Request
								{
									CONTEXT_HANDLE EnumHandle;
									UINT32 NumMessages;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s, NumMessagesRetrieved: %u",FaxMessageBuffer.toString,NumMessagesRetrieved)]
								_Struct Response
								{
									PFaxMessageWArray(UINT32(FrameData,FrameLength - 8 )) FaxMessageBuffer;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 NumMessagesRetrieved;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0042:
						_Struct FAX_GetMessage
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("MessageId: %u, Folder: %s",MessageId,FaxEnumMessageFolderTable(Folder,FALSE))]
								_Struct Request
								{
									UINT64 MessageId;
									NdrEnum Folder = FaxEnumMessageFolderTable( this.value,TRUE );
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",FaxMessageBuffer.toString)]
								_Struct Response
								{
									PFaxMessageWArray(1) FaxMessageBuffer;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x0059:
						_Struct FAX_GetMessageEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("MessageId: %u, Folder: %s, Level: %s",MessageId,FaxEnumMessageFolderTable(Folder,FALSE),Level)]
								_Struct Request
								{
									UINT64 MessageId;
									NdrEnum Folder = FaxEnumMessageFolderTable( this.value,TRUE );
									Align4 Pad;
									UINT32 Level;
								}
								
								Case 0x02:
								[FaxSummary = FormatString("%s",FaxMessageBuffer.toString)]
								_Struct Response
								{
									PFaxMessageWArray(1) FaxMessageBuffer;
									Align4 pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this ); 
								}                                                                                         
							}
						}
    		
						Case 0x0043:
						_Struct FAX_RemoveMessage
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("MessageId: %u, Folder: %s",MessageId,FaxEnumMessageFolderTable(Folder,FALSE))]
								_Struct Request
								{
									UINT64 MessageId;
									NdrEnum Folder = FaxEnumMessageFolderTable(this.value,TRUE);
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0044:
						_Struct FAX_StartCopyToServer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("FileExt: %s, ServerFileName: %s",FileExt.toString,ServerFileName.toString)]
								_Struct Request
								{
									NdrWideString FileExt;
									NdrWideString ServerFileName;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("ServerFileName: %s, Handle: %s",ServerFileName.toString,ContextHandle.toString)]
								_Struct Response
								{
									NdrWideString ServerFileName;
									Align4 pad;
									CONTEXT_HANDLE ContextHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0045:
						_Struct FAX_StartCopyMessageFromServer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("MessageId: %u, Folder: %s",MessageId,FaxEnumMessageFolderTable(Folder, FALSE))]
								_Struct Request
								{
									UINT64 MessageId;
									NdrEnum Folder = FaxEnumMessageFolderTable(this.value, TRUE);
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("ContextHandle: %s",ContextHandle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE ContextHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0046:
						_Struct FAX_WriteFile
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("DataSize: %u, CopyHandle: %s",DataSize,CopyHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE CopyHandle;
									NdrConformant MaxCount;
									BLOB(MaxCount.MaxCount) Data;
									ALIGN4 Pad;							
									UINT32 DataSize;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0047:
						_Struct FAX_ReadFile
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("DataSize: %u, CopyHandle: %s",DataSize,CopyHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE CopyHandle;
									UINT32 MaxDataSize;
									UINT32 DataSize;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("DataSize: %u", DataSize)]
								_Struct Response
								{
									NdrConformant MaxCount;
									BLOB(MaxCount.MaxCount) Data;
    							Align4 pad;
									UINT32 DataSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0048:
						_Struct FAX_EndCopy
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("CopyHandle: %s",CopyHandle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE CopyHandle;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("Context Handle: %s",ContextHandle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE ContextHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0049:
						_Struct FAX_StartServerNotification
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("MachineName: %s, EndPoint: %s, ProtseqString: %s",MachineName.toString,EndPoint.toString,ProtseqString.toString)]
								_Struct Request
								{
									NdrWideString MachineName;
									NdrWideString EndPoint;
									Align8 Pad1;
									UINT64 Context;
									NdrWideString ProtseqString;
									Align4 pad2;
									BOOL EventEx;
									UINT32 EventTypes = FaxClientFaxEventTypeTable(this,TRUE);
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("Context Handle: %s",ContextHandle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE ContextHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x004A:
						_Struct FAX_StartServerNotificationEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("MachineName: %s, EndPoint: %s, Protseq: %s",MachineName.toString,EndPoint.toString,Protseq.toString)]
								_Struct Request
								{
									NdrWideString MachineName;
									NdrWideString EndPoint;
									Align8 Pad1;
									UINT64 Context;
									NdrWideString ProtSeq;
									Align4 pad2;
									BOOL EventEx;
									FaxEnumEventType EventTypes = FaxClientFaxEventTypeTable(this,TRUE);
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("Context Handle: %s",ContextHandle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE ContextHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x005C:
						_Struct FAX_StartServerNotificationEx2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("AccountName: %s, MachineName: %s, EndPoint: %s, Protseq: %s",
															AccountName.stringValue.toString, MachineName.toString, EndPoint.toString, Protseq.toString)]
								_Struct Request
								{									
									NdrWIDESTRINGPtr AccountName;
									NdrWideString MachineName;
									NdrWideString EndPoint;
									Align8 Pad1;
									UINT64 Context;
									NdrWideString Protseq;
									Align4 pad2;
									FaxEnumEventType EventTypes = FaxClientFaxEventTypeTable(this,TRUE);
									UINT32 Level =  MustBeSetToTable(this,"1");				
						
								}
						
								Case 0x02:
								[FaxSummary = FormatString("Context Handle: %s",ContextHandle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE Contexthandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}					
    		
						Case 0x004B:
						_Struct FAX_EndServerNotification
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("ContextHandle: %s",Handle.toString)]
								_Struct Request
								{
									CONTEXT_HANDLE Handle;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("Context Handle: %s",ContextHandle.toString)]
								_Struct Response
								{
									CONTEXT_HANDLE ContextHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x004C:
						_Struct FAX_GetServerActivity
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",ServerActivity.toString)]
								_Struct Request
								{
									FaxServerActivity ServerActivity;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",ServerActivity.toString)]
								_Struct Response
								{
									FaxServerActivity ServerActivity;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x004D:
						_Struct FAX_SetConfigWizardUsed
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("ConfigWizardUsed: %s",ConfigWizardUsed.toString)]
								_Struct Request
								{
									BOOL ConfigWizardUsed;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x004E:
						_Struct FAX_EnumRoutingExtensions {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("FaxRoutingExtensionInfoBuffer: %s, NumExtensions: %u", FaxRoutingExtensionInfoBuffer.toString,NumExts)]
								_Struct Response
								{
									PFaxRoutingExtensionInfoWArray(UINT32(FrameData,FrameLength - 8 )) FaxRoutingExtensionInfoBuffer;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 NumExts;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x004F:
						_Struct FAX_AnswerCall
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("DeviceId: %u",DeviceId)]
								_Struct Request
								{
									UINT32 DeviceId;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0050:
						_Struct FAX_ConnectFaxServer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("ClientAPIVersion: %s",FaxClientAPIVersionTable(ClientAPIVersion))]
								_Struct Request
								{
									UINT32 ClientAPIVersion = FaxClientAPIVersionTable( this );
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("ServerAPIVersion: %s, BindingHandle: %s",ServerAPIVersion.toString,BindingHandle.toString)]
								_Struct Response
								{
									UINT32 ServerAPIVersion;
									CONTEXT_HANDLE BindingHandle;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0051:
						_Struct FAX_GetSecurityEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",SecurityInformation.toString)]
								_Struct Request
								{
									FaxSecurityInformation SecurityInformation;
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("%s",SecurityDescriptor.toString)]
								_Struct Response
								{
									NdrPtrToConformant Pointer;
									switch
									{
										case Pointer.ReferentID  > 0:NdrSecurityDescriptor SecurityDescriptor;
									}
									Align4 Pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0052:
						_Struct FAX_RefreshArchive
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("%s",FaxEnumMessageFolderTable(Folder, FALSE))]
								_Struct Request
								{   		
									NdrEnum Folder = FaxEnumMessageFolderTable(this.value, TRUE);
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0053:
						_Struct FAX_SetRecipientsLimit
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("RecipientsLimit: %u",RecipientsLimit)]
								_Struct Request
								{
									UINT32 RecipientsLimit;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0054:
						_Struct FAX_GetRecipientsLimit {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("RecipientsLimit: %u",RecipientsLimit)]
								_Struct Response
								{
									UINT32 RecipientsLimit;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0055:
						_Struct FAX_GetServerSKU {
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "No Parameters"]
								_Struct Request
								{
								}
    		
								Case 0x02:
								[FaxSummary = FormatString("ServerSKU: %s",FaxProductSkuType( ServerSKU, FALSE))]
								_Struct Response
								{
									UINT32 ServerSKU = FaxProductSkuType( this, TRUE );
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
    		
						Case 0x0056:
						_Struct FAX_CheckValidFaxFolder
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Path: %s",Path.toString)]
								_Struct Request
								{
									NdrWideString Path;
								}
    		
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x0067:
						_Struct FAX_SetMessage
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("MessageId: %s, Folder: %s", MessageId.ToString, Folder.ToString)]
								_Struct Request
								{
									UINT64 MessageId;
									NdrEnum Folder = FaxEnumMessageFolderTable( this.value,TRUE );
									Align4 Pad;
									FaxMessageProps MessageProps;
								}
						
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );	
								}
							}
						}
						Case 0x0062:
						_Struct FAX_SetGeneralConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "General Config"]
								_Struct Request
								{
									UINT32 Level =  MustBeSetToTable(this,"1");
									NdrConformant MaxCount;
									FaxGeneralConfigW GeneralConfig;
									Align4 pad;
									UINT32 BufferSize;
						
								}
						
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x0063:
						_Struct FAX_GetSecurityEx2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "Security Information"]
								_Struct Request
								{
									FaxSecurityInformation SecurityInformation;											
								}
						
								Case 0x02:
								[FaxSummary = SecurityDescriptor.SecurityDescriptor.ToString]
								_Struct Response
								{
						      NdrPtrToConformant MaxCount;
						      switch
						      {
						      	case MaxCount.ReferentID > 0:
						     			 NdrSecurityDescriptorPtr SecurityDescriptor;
						    	}
						      Align4 pad;
						      UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x0061:
						_Struct FAX_GetGeneralConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Level: %d", Level)]
								_Struct Request
								{
									UINT32 Level =  MustBeSetToTable(this,"1");				
								}
						
								Case 0x02:
								[FaxSummary = "General Config"]
								_Struct Response
								{
						      PFaxGeneralConfigW GeneralConfig;
						      Align4 pad;
						      UINT32 BufferSize;				
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x0068:
						_Struct FAX_GetConfigOption
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = Option.ToString]
								_Struct Request
								{
									[conversation.OptionFaxGetConfigOption]
									UINT16 Option = FaxEnumConfigOption(this);			
						
								}
						
								Case 0x02:						
								_Struct Response
								{
						      switch(conversation.OptionFaxGetConfigOption)
						      {
						      	case 0x0000: 
						      		[FaxSummary = Coverpage.ToString]
						      		BOOL Coverpage = this? "Allow personal coverpage": "Allow only server-side coverpage";
						      	case 0x0001: 
											switch(property.MSRPCByteOrder)
											{
												case LittleEndian:
												struct
												{
													[FaxSummary = FaxServerQueue.ToString]
													UINT32 FaxServerQueue = this == 0? "Allow both incoming and outgoing queues": FormatString("0X%08x", FaxServerQueue)
													{
														UINT32 Incoming:1 = FormatString("(%s) %s", this.ToBitString, this? "Fax incoming blocked": "");
														UINT32 Outgoing:1 = FormatString("(%s) %s", this.ToBitString, this? "Fax outgoing blocked": "");
														UINT32 OutPause:1 = FormatString("(%s) %s", this.ToBitString, this? "Fax outgoing paused": "");
														UINT32 Reserved:29 = FormatString("(%s)", this.ToBitString);
													}
												}
												default:
												struct
												{
													[FaxSummary = FaxServerQueue.ToString]
													UINT32 FaxServerQueue = this == 0? "Allow both incoming and outgoing queues": FormatString("0X%08x", FaxServerQueue)
													{
														UINT32 Reserved:29 = FormatString("(%s)", this.ToBitString);
														UINT32 OutPause:1 = FormatString("(%s) %s", this.ToBitString, this? "Fax outgoing paused": "");
														UINT32 Outgoing:1 = FormatString("(%s) %s", this.ToBitString, this? "Fax outgoing blocked": "");
														UINT32 Incoming:1 = FormatString("(%s) %s", this.ToBitString, this? "Fax incoming blocked": "");												
													}		
												}
											}
										case 0x0002:
											switch(property.MSRPCByteOrder)
											{
												case LittleEndian:
												struct
												{
													[FaxSummary = FaxReceipts.ToString]
													UINT32 FaxReceipts = this == 0? "Not send a receipt": FormatString("0X%08x", FaxReceipts)
													{
														UINT32 Email:1 = FormatString("(%s) %s", this.ToBitString, this? "Send receipt by email": "");
														UINT32 Reserved1:2 = FormatString("(%s)", this.ToBitString);
														UINT32 Group:1 = FormatString("(%s) %s", this.ToBitString, this? "Deliver one receipt for a group of recipients": "");
														UINT32 Attach:1 = FormatString("(%s) %s", this.ToBitString, this? "Attach the fax in TIFF to receipt": "");	
														UINT32 Reserved2:27 = FormatString("(%s)", this.ToBitString);
													}
												}
												default:
												struct
												{
													[FaxSummary = FaxReceipts.ToString]
													UINT32 FaxReceipts = this == 0? "Not send a receipt": FormatString("0X%08x", FaxReceipts)
													{
														UINT32 Reserved2:27 = FormatString("(%s)", this.ToBitString);											}		
														UINT32 Attach:1 = FormatString("(%s) %s", this.ToBitString, this? "Attach the fax in TIFF to receipt": "");	
														UINT32 Group:1 = FormatString("(%s) %s", this.ToBitString, this? "Deliver one receipt for a group of recipients": "");
														UINT32 Reserved1:2 = FormatString("(%s)", this.ToBitString);
														UINT32 Email:1 = FormatString("(%s) %s", this.ToBitString, this? "Send receipt by email": "");
												}
											}
										case 0x0003:
											[FaxSummary = Permission.ToString]
											BOOL Permission = this? "All incoming faxes can be viewed by all fax users": "Incoming faxes can be viewed only by recipients";
									}
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x0060:
						_Struct Fax_GetAccountInfo
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = AccountName.ToString]
								_Struct Request
								{
									NdrWIDESTRINGPtr AccountName;
									Align4 Pad;
									UINT32 Level =  MustBeSetToTable(this,"0");				
								}
						
								Case 0x02:
								[FaxSummary = AccountInfo.ToString]
								_Struct Response
								{
									NdrPtrToConformant MaxCount;
									switch
									{
										case MaxCount.MaxCount > 0:
											FaxAccountInfo0Single AccountInfo;
									}
									ALIGN4 Pad;
									UINT32 BufferSize;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x005B:
						_Struct FAX_EnumMessagesEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Max number of messages: %d", NumMessages)]
								_Struct Request
								{
									CONTEXT_HANDLE handle;
									UINT32 NumMessages;				
								}
						
								Case 0x02:
								[FaxSummary = FormatString("Messages Retrieved: %d", NumMessagesRetrieved)]
								_Struct Response
								{
									PFaxMessageWArray(UINT32(FrameData,FrameLength - 12 )) Buffer;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 NumMessagesRetrieved;
									UINT32 Level;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						
						Case 0x005F:
						_Struct FAX_EnumAccounts
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = "Enumerate fax accounts"]
								_Struct Request
								{
						       UINT32 Level = MustBeSetToTable(this,"0");
								}
						
								Case 0x02:
								[FaxSummary = "FaxAccountsArray"]
								_Struct Response
								{
									FaxAccountInfo0Array(UINT32(FrameData,FrameLength - 8 )) FaxAccounts;
									Align4 pad;
									UINT32 BufferSize;
									UINT32 Accounts;
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x005E:
						_Struct FAX_DeleteAccount
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Delete account: %s", AccountName.ToString)]
								_Struct Request
								{
									NdrWIDESTRINGPtr AccountName;						
								}
						
								Case 0x02:
								[FaxSummary = "Delete account:"]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						Case 0x005D:
						_Struct FAX_CreateAccount
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = FormatString("Create account: %s", FaxAccount.ToString)]
								_Struct Request
								{
						      UINT32 Level = MustBeSetToTable(this,"0");
						      NdrConformant MaxCount;
						      FaxAccountInfo0Single FaxAccount;
						      ALIGN4 Pad;
						      UINT32 BufferSize;
								}
						
								Case 0x02:
								[FaxSummary = "Create account"]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}
						}
						
						Case 0x0066:
						_Struct FAX_ReAssignMessage
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = ReassingInfo.ToString]
								_Struct Request
								{
									UINT64 MessageId;
									FaxReassignInfo ReassingInfo;							
								}

								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}	
						}
						Case 0x003E:
						_Struct FAX_UnregisterRoutingExtension
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00:
								[FaxSummary = ExtensionName.ToString]
								_Struct Request
								{
									NdrWideString ExtensionName;						
								}
						
								Case 0x02:
								[FaxSummary = ""]
								_Struct Response
								{
									[ReturnValue = UINT32( FrameData, Offset )]
									UINT32 ReturnValue = FAXErrorCodeTable( this );
								}
							}	
						}
						Default: ReportParserError(ParserErrorProtocolClassWindows, "Fax Server", "Unknown Fax Server Request") ProtocolError;					
					}					
				}							
			}
	}
}

Table FAXErrorCodeTable(code)
{
	switch (code)
	{
		case 0x00001B59: FormatString( "0x%08X - FAX_ERR_SRV_OUTOFMEMORY - The fax server failed to allocate memory.", code );
		case 0x00001B5A: FormatString( "0x%08X - FAX_ERR_GROUP_NOT_FOUND - The group specified by the lpwstrGroupName argument cannot be found.", code );
		case 0x00001B5B: FormatString( "0x%08X - FAX_ERR_BAD_GROUP_CONFIGURATION - The fax server encountered an outbound routing group with a bad configuration, or the group device list is empty; the status for the new rule object created by the server based on the specified dialing location and device ID is FAX_RULE_STATUS_ALL_GROUP_DEV_NOT_VALID or FAX_RULE_STATUS_EMPTY_GROUP.", code );
		case 0x00001B5C: FormatString( "0x%08X - FAX_ERR_GROUP_IN_USE - The fax server cannot remove the outbound routing group identified by the lpwstrGroupName parameter. The outbound routing group is in use by one or more outbound routing rules.", code );
		case 0x00001B5D: FormatString( "0x%08X - FAX_ERR_RULE_NOT_FOUND - The fax server failed to locate an outbound routing rule by country/region code and area code.", code );
		case 0x00001B5F: FormatString( "0x%08X - FAX_ERR_DIRECTORY_IN_USE - The path specified by the lpcwstrPath argument points to a current fax queue folder.", code );
		case 0x00001B60: FormatString( "0x%08X - FAX_ERR_FILE_ACCESS_DENIED - The fax server failed to remove the fax message. When trying to delete the fax archived file (the file that represents the fax message to be removed), the fax server internally encountered an access denied or sharing violation error.", code );
		case 0x00001B61: FormatString( "0x%08X - FAX_ERR_MESSAGE_NOT_FOUND - The fax server cannot complete the operation because the number of active fax devices allowed for this version of Windows was exceeded. ", code );
		case 0x00001B62: FormatString( "0x%08X - FAX_ERR_DEVICE_NUM_LIMIT_EXCEEDED - The fax server cannot complete the operation because the number of active fax devices allowed for this version of Windows was exceeded.", code );
		case 0x00001B63: FormatString( "0x%08X - FAX_ERR_NOT_SUPPORTED_ON_THIS_SKU - The fax client module API versionis FAX_API_VERSION_1 or above, and the fax server is running on a version of the operating system that does not support the requested operation.", code );
		case 0x00001B64: FormatString( "0x%08X - FAX_ERR_VERSION_MISMATCH - The fax client/server versions mismatch.", code );
		case 0x00001B65: FormatString( "0x%08X - FAX_ERR_RECIPIENTS_LIMIT - The limit on the number of recipients for a single fax broadcast was reached.", code );
		case 0x0000006A7: FormatString( "0x%08X - RPC_S_PROTSEQ_NOT_SUPPORTED - The protocol sequence specified by the lpdwProtSeq argument is not supported.", code );
		default: WinErrorCodeTable(code);
	}
}

Table FaxErrorCodeNameTable(code)
{
	switch (code)
	{
		case 0x00001B59: "FAX_ERR_SRV_OUTOFMEMORY";
		case 0x00001B5A: "FAX_ERR_GROUP_NOT_FOUND";
		case 0x00001B5B: "FAX_ERR_BAD_GROUP_CONFIGURATION";
		case 0x00001B5C: "FAX_ERR_GROUP_IN_USE";
		case 0x00001B5D: "FAX_ERR_RULE_NOT_FOUND";
		case 0x00001B5F: "FAX_ERR_DIRECTORY_IN_USE";
		case 0x00001B60: "FAX_ERR_FILE_ACCESS_DENIED";
		case 0x00001B61: "FAX_ERR_MESSAGE_NOT_FOUND";
		case 0x00001B62: "FAX_ERR_DEVICE_NUM_LIMIT_EXCEEDED";
		case 0x00001B63: "FAX_ERR_NOT_SUPPORTED_ON_THIS_SKU";
		case 0x00001B64: "FAX_ERR_VERSION_MISMATCH";
		case 0x00001B65: "FAX_ERR_RECIPIENTS_LIMIT";
		case 0x0000006A7: "RPC_S_PROTSEQ_NOT_SUPPORTED";
		default: WinErrorCodeNameTable(code);
	}
}

Table FaxMethodClientOpnumTable(Opnum)
{
	switch(Opnum)
	{
		Case 0x0000: "FAX_OpenConnection";    
		Case 0x0001: "FAX_ClientEventQueue";  
		Case 0x0002: "FAX_CloseConnection";   
		Case 0x0003: "FAX_ClientEventQueueEx";
	}
}

Table FaxMethodSeverOpnumTable(Opnum)
{
	switch(Opnum)
	{
		Case 0x0000: "FAX_GetServicePrinters";                      
		Case 0x0001: "FAX_ConnectionRefCount";                      
		Case 0x0002: "FAX_OpenPort";                                
		Case 0x0003: "FAX_ClosePort";                               
		Case 0x0004: "FAX_EnumJobs";                                
		Case 0x0005: "FAX_GetJob";                                  
		Case 0x0006: "FAX_SetJob";                                  
		Case 0x0007: "FAX_GetPageData";                             
		Case 0x0008: "FAX_GetDeviceStatus";                         
		Case 0x0009: "FAX_Abort";                                   
		Case 0x000A: "FAX_EnumPorts";                               
		Case 0x000B: "FAX_GetPort";                                 
		Case 0x000C: "FAX_SetPort";                                 
		Case 0x000D: "FAX_EnumRoutingMethods";                      
		Case 0x000E: "FAX_EnableRoutingMethod";                     
		Case 0x000F: "FAX_GetRoutingInfo";                          
		Case 0x0010: "FAX_SetRoutingInfo";                          
		Case 0x0011: "FAX_EnumGlobalRoutingInfo";                   
		Case 0x0012: "FAX_SetGlobalRoutingInfo";                    
		Case 0x0013: "FAX_GetConfiguration";                        
		Case 0x0014: "FAX_SetConfiguration";                        
		Case 0x0015: "FAX_GetLoggingCategories";                    
		Case 0x0016: "FAX_SetLoggingCategories";                    
		Case 0x0017: "FAX_GetSecurity";                             
		Case 0x0018: "FAX_SetSecurity";                             
		Case 0x0064: "FAX_SetSecurityEx2";                          
		Case 0x0019: "FAX_AccessCheck";
		Case 0x0065: "FAX_AccessCheckEx2";                             
		Case 0x001A: "FAX_CheckServerProtSeq";                      
		Case 0x001B: "FAX_SendDocumentEx";                          
		Case 0x001C: "FAX_EnumJobsEx";
		Case 0x0058: "FAX_EnumJobsEx2";                              
		Case 0x001D: "FAX_GetJobEx";
		Case 0x0057: "FAX_GetJobEx2";                                
		Case 0x001E: "FAX_GetCountryList";                          
		Case 0x001F: "FAX_GetPersonalProfileInfo";                  
		Case 0x0020: "FAX_GetQueueStates";                          
		Case 0x0021: "FAX_SetQueue";                                
		Case 0x0022: "FAX_GetReceiptsConfiguration";                
		Case 0x0023: "FAX_SetReceiptsConfiguration";                
		Case 0x0024: "FAX_GetReceiptsOptions";                      
		Case 0x0025: "FAX_GetVersion";                              
		Case 0x0026: "FAX_GetOutboxConfiguration";                  
		Case 0x0027: "FAX_SetOutboxConfiguration";                  
		Case 0x0028: "FAX_GetPersonalCoverPagesOption";             
		Case 0x0029: "FAX_GetArchiveConfiguration";                 
		Case 0x002A: "FAX_SetArchiveConfiguration";                 
		Case 0x002B: "FAX_GetActivityLoggingConfiguration";         
		Case 0x002C: "FAX_SetActivityLoggingConfiguration";         
		Case 0x002D: "FAX_EnumerateProviders";                      
		Case 0x002E: "FAX_GetPortEx";                               
		Case 0x002F: "FAX_SetPortEx";                               
		Case 0x0030: "FAX_EnumPortsEx";                             
		Case 0x0031: "FAX_GetExtensionData";                        
		Case 0x0032: "FAX_SetExtensionData";                        
		Case 0x0033: "FAX_AddOutboundGroup";                        
		Case 0x0034: "FAX_SetOutboundGroup";                        
		Case 0x0035: "FAX_RemoveOutboundGroup";                     
		Case 0x0036: "FAX_EnumOutboundGroups";                      
		Case 0x0037: "FAX_SetDeviceOrderInGroup";                   
		Case 0x0038: "FAX_AddOutboundRule";                         
		Case 0x0039: "FAX_RemoveOutboundRule";                      
		Case 0x003A: "FAX_SetOutboundRule";                         
		Case 0x003B: "FAX_EnumOutboundRules";                       
		Case 0x003C: "FAX_RegisterServiceProviderEx";               
		Case 0x003D: "FAX_UnregisterServiceProviderEx";             
		Case 0x003F: "FAX_StartMessagesEnum";                       
		Case 0x005A: "FAX_StartMessagesEnumEx";                     
		Case 0x0040: "FAX_EndMessagesEnum";                         
		Case 0x0041: "FAX_EnumMessages";                            
		Case 0x0042: "FAX_GetMessage";
		Case 0x0059: "FAX_GetMessageEx";                              
		Case 0x0043: "FAX_RemoveMessage";                           
		Case 0x0044: "FAX_StartCopyToServer";                       
		Case 0x0045: "FAX_StartCopyMessageFromServer";              
		Case 0x0046: "FAX_WriteFile";                               
		Case 0x0047: "FAX_ReadFile";                                
		Case 0x0048: "FAX_EndCopy";                                 
		Case 0x0049: "FAX_StartServerNotification";                 
		Case 0x004A: "FAX_StartServerNotificationEx";               
		Case 0x005C: "FAX_StartServerNotificationEx2";		        
		Case 0x004B: "FAX_EndServerNotification";                   
		Case 0x004C: "FAX_GetServerActivity";                       
		Case 0x004D: "FAX_SetConfigWizardUsed";                     
		Case 0x004E: "FAX_EnumRoutingExtensions";                   
		Case 0x004F: "FAX_AnswerCall";                              
		Case 0x0050: "FAX_ConnectFaxServer";                        
		Case 0x0051: "FAX_GetSecurityEx";                           
		Case 0x0052: "FAX_RefreshArchive";
		Case 0x0061: "FAX_GetGeneralConfiguration";                           
		Case 0x0062: "FAX_SetGeneralConfiguration";
		Case 0x0063: "FAX_GetSecurityEx2";                 
		Case 0x0067: "FAX_SetMessage";
		Case 0x0068: "FAX_GetConfigOption";
		Case 0x0060: "FAX_GetAccountInfo";
		Case 0x005B: "FAX_EnumMessagesEx";
		Case 0x005F: "FAX_EnumAccounts";
		Case 0x005E: "FAX_DeleteAccount";
		Case 0x005D: "FAX_CreateAccount";
		Case 0x0056: "FAX_CheckValidFaxFolder";
		Case 0x0055: "FAX_GetServerSKU";
		Case 0x0054: "FAX_GetRecipientsLimit";
		Case 0x0053: "FAX_SetRecipientsLimit";
		Case 0x0066: "FAX_ReAssignMessage";
		Case 0x003E: "FAX_UnregisterRoutingExtension";
	}
} 
  
Table FaxMethodTable( UUID, Opnum )
{ 
	Switch(UUID)
	{
		case "{6099FC12-3EFF-11D0-ABD0-00C04FD91A4E}": FaxMethodClientOpnumTable(Opnum);
		case "{EA0A3165-4834-11D2-A6F8-00C04FA346CC}": FaxMethodSeverOpnumTable(Opnum);		
	}
}

Table FaxClientFaxEventTypeTable( Value, Description )
{
	Switch( Value )
	{
		Case 0x00000000: FormatString( "LEGACY (0x%08X) %s",Value,Description?"Legacy events. Client is registered for this kind of events":"");
		Case 0x00000001: FormatString( "IN_QUEUE (0x%08X) %s",Value,Description?"Requests notification about fax jobs in the incoming queue":"" );
		Case 0x00000002: FormatString( "OUT_QUEUE (0x%08X) %s",Value,Description?" Requests notification about fax jobs in the outgoing queue":"");
		Case 0x00000004: FormatString( "CONFIG (0x%08X) %s",Value,Description?"Requests notifications about fax server configuration changes":"");
		Case 0x00000008: FormatString( "ACTIVITY (0x%08X) %s",Value,Description?"Requests notifications about the fax server activity":"" );
		Case 0x00000010: FormatString( "QUEUE_STATE (0x%08X) %s",Value,Description?"Requests notifications about the fax queue state":"");
		Case 0x00000020: FormatString( "IN_ARCHIVE (0x%08X) %s",Value,Description?"Requests notifications about the removal of fax messages from the incoming messages archive":"");
		Case 0x00000040: FormatString( "OUT_ARCHIVE (0x%08X) %s",Value,Description?"Requests notifications about the removal of fax messages from the outgoing messages archive":"");
		Case 0x00000080: FormatString( "FXSSVC_ENDED (0x%08X) %s",Value,Description?"Specifies the shutdown of the fax server":"" );
		Case 0x00000100: FormatString( "DEVICE_STATUS (0x%08X) %s",Value,Description?"Specifies that the status of a device has changed":"");
		Case 0x00000200: FormatString( "NEW_CALL (0x%08X) %s",Value,Description?"Specifies that a new incoming call was detected by the fax service":"");
		Case 0x80000000: FormatString( "LOCAL_ONLY (0x%08X) %s",Value,Description?"Specifies that the fax client (acting as RPC server) wants to accept only local (same machine) notifications":"");
		Default        : FormatString( "(0x%08X) %s",Value,Description?"No Description Available ":"" );
	}
}

Table FaxClientFaxEventIdTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "FEI_DIALING (0x%08X) - The sending device is dialing a fax number", Value );
		Case 0x00000002: FormatString( "FEI_SENDING (0x%08X) - The sending device is transmitting a page of fax data", Value );
		Case 0x00000003: FormatString( "FEI_RECEIVING (0x%08X) - The receiving device is receiving a page of fax data", Value );
		Case 0x00000004: FormatString( "FEI_COMPLETED (0x%08X) - The device has completed a fax transmission call", Value );
		Case 0x00000005: FormatString( "FEI_BUSY (0x%08X) - The sending device has encountered a busy signal", Value );
		Case 0x00000006: FormatString( "FEI_NO_ANSWER (0x%08X) - The receiving device does not answer", Value );
		Case 0x00000007: FormatString( "FEI_BAD_ADDRESS (0x%08X) - The sending device cannot complete the call because the fax number is invalid", Value );
		Case 0x00000008: FormatString( "FEI_NO_DIAL_TONE (0x%08X) - The sending device cannot complete the call because it does not detect a dial tone", Value );
		Case 0x00000009: FormatString( "FEI_DISCONNECTED (0x%08X) - The device cannot complete the call because a fax device was disconnected, or because the fax call itself was disconnected", Value );
		Case 0x0000000A: FormatString( "FEI_FATAL_ERROR (0x%08X) - The device encountered a fatal protocol error", Value );
		Case 0x0000000B: FormatString( "FEI_NOT_FAX_CALL (0x%08X) - The modem device received a data call or a voice call", Value );
		Case 0x0000000C: FormatString( "FEI_CALL_DELAYED (0x%08X) - The sending device received a busy signal multiple times. The device cannot retry the call because dialing restrictions exist", Value );
		Case 0x0000000D: FormatString( "FEI_CALL_BLACKLISTED (0x%08X) - The device cannot complete the call because the telephone number is blocked or reserved; numbers such as 911 are blocked", Value );
		Case 0x0000000E: FormatString( "FEI_RINGING (0x%08X) - The receiving device is ringing", Value );
		Case 0x0000000F: FormatString( "FEI_ABORTING (0x%08X) - The device is aborting a fax job", Value );
		Case 0x00000010: FormatString( "FEI_ROUTING (0x%08X) - The receiving device is routing a received fax document", Value );
		Case 0x00000011: FormatString( "FEI_MODEM_POWERED_ON (0x%08X) - The modem device was turned on", Value );
		Case 0x00000012: FormatString( "FEI_MODEM_POWERED_OFF (0x%08X) - The modem device was turned off", Value );
		Case 0x00000013: FormatString( "FEI_IDLE (0x%08X) - The device is idle", Value );
		Case 0x00000014: FormatString( "FEI_FAXSVC_ENDED (0x%08X) - The fax service has terminated", Value );
		Case 0x00000015: FormatString( "FEI_ANSWERED (0x%08X) - The receiving device answered a new call", Value );
		Case 0x00000016: FormatString( "FEI_JOB_QUEUED (0x%08X) - The fax job has been queued", Value );
		Case 0x00000017: FormatString( "FEI_DELETED (0x%08X) - The fax job has been processed. The job identifier for the job is no longer valid", Value );
		Case 0x00000018: FormatString( "FEI_INITIALIZING (0x%08X) - No Description Available", Value );
		Case 0x00000019: FormatString( "FEI_LINE_UNAVAILABLE (0x%08X) - No Description Available", Value );
		Case 0x0000001A: FormatString( "FEI_HANDLED (0x%08X) - No Description Available", Value );
		Case 0x0000001B: FormatString( "FEI_FAXSVC_STARTED (0x%08X) - The fax service has started", Value );
		Default        : FormatString( "No Description Available (0x%08X)", Value );
	}
}

Table FaxClientFaxJobIdTable( Value )
{
	Switch( Value )
	{
		Case 0xFFFFFFFF: FormatString( "Inactive Fax Job (0x%08X)", Value );
		Default        : FormatString( "Undefined Value (0x%08X)", Value );
	}
}

Table FaxClientFaxEventJobTypeTable( Value,Description )
{
	Switch( Value )
	{
		Case 0x00000000: FormatString( "FAX_JOB_EVENT_TYPE_ADDED (0x%08X) %s", Value, Description ? " A job was added to the queue or a message was added to the archive":"" );
		Case 0x00000001: FormatString( "FAX_JOB_EVENT_TYPE_REMOVED (0x%08X) %s", Value, Description ? " A job was removed from the queue or a message was removed from the archive":"");
		Case 0x00000002: FormatString( "FAX_JOB_EVENT_TYPE_STATUS (0x%08X) %s", Value, Description ? " The job has changed its status. This does not apply to archive messages":"" );
		Case 0x00000003: FormatString( "FAX_JOB_EVENT_TYPE_CHANGED (0x%08X) %s", Value, Description ? " An archives message has changed":"");
		Default        : FormatString( "(0x%08X) %s", Value, Description ? "No Description Available ":"");
	}
}

Table FaxJobTypeTable( Value, bDescription )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "JT_UNKNOWN (0x%08X)%s", Value, bDescription ? " - The job type is unknown. This Value indicates that the fax server has not yet scheduled the job" : "" );
		Case 0x00000002: FormatString( "JT_SEND (0x%08X)%s", Value, bDescription ? " - The job is an outgoing fax transmission" : "" );
		Case 0x00000004: FormatString( "JT_RECEIVE (0x%08X)%s", Value, bDescription ? " - The job is an incoming fax transmission" : "" );		Case 0x00000008: FormatString( "JT_ROUTING (0x%08X)%s", Value, bDescription ? " - The fax server tried to route the fax transmission, but routing failed" : "" );
		Case 0x00000010: FormatString( "JT_FAIL_RECEIVE (0x%08X)%s", Value, bDescription ? " - The fax server failed to receive the job" : "" );
		Case 0x00000020: FormatString( "JT_BROADCAST (0x%08X)%s", Value, bDescription ? " - The job is an outgoing broadcast message" : "" );
		Default        : FormatString( "%u (0x%08X)%s", Value, Value, bDescription ? " - No Description Available" : "" );
	}
}

Table FaxClientFaxJobStatusQueueStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "JS_PENDING (0x%08X) - The fax job is in the queue and pending service", Value );
		Case 0x00000002: FormatString( "JS_INPROGRESS (0x%08X) - The fax job is in progress", Value );
		Case 0x00000004: FormatString( "JS_DELETING (0x%08X) - The fax server is deleting the fax job", Value );
		Case 0x00000008: FormatString( "JS_FAILED (0x%08X) - The fax job failed", Value );
		Case 0x00000010: FormatString( "JS_PAUSED (0x%08X) - The fax server paused the fax job", Value );
		Case 0x00000020: FormatString( "JS_NOLINE (0x%08X) - There is no line available to send the fax", Value );
		Case 0x00000040: FormatString( "JS_RETRYING (0x%08X) - The fax job failed. The fax server will attempt to retransmit the fax after a specified interval", Value );
		Case 0x00000080: FormatString( "JS_RETRIES_EXCEEDED (0x%08X) - The fax server exceeded the maximum number of retransmission attempts allowed", Value );
		Case 0x00000100: FormatString( "JS_COMPLETED (0x%08X) - The fax job is completed", Value );
		Case 0x00000200: FormatString( "JS_CANCELED (0x%08X) - The fax job is canceled", Value );
		Case 0x00000400: FormatString( "JS_CANCELING (0x%08X) - The fax job is canceling", Value );
		Case 0x00000800: FormatString( "JS_ROUTING (0x%08X) - The fax job is being routed", Value );
		Default        : FormatString( "No Description Available", Value );
	}
}

Table FaxClientFaxJobStatusExtendedStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "JS_EX_DISCONNECTED (0x%08X) - The sender or the caller disconnected the fax call", Value );
		Case 0x00000002: FormatString( "JS_EX_INITIALIZING (0x%08X) - The device is initializing a call", Value );
		Case 0x00000003: FormatString( "JS_EX_DIALING (0x%08X) - The device is dialing a fax number", Value );
		Case 0x00000004: FormatString( "JS_EX_TRANSMITTING (0x%08X) - The device is sending a fax document", Value );
		Case 0x00000005: FormatString( "JS_EX_ANSWERED (0x%08X) - The device answered a new call", Value );
		Case 0x00000006: FormatString( "JS_EX_RECEIVING (0x%08X) - The device is receiving a fax document", Value );
		Case 0x00000007: FormatString( "JS_EX_LINE_UNAVAILABLE (0x%08X) - The device is not available because it is in use by another application", Value );
		Case 0x00000008: FormatString( "JS_EX_BUSY (0x%08X) - The device encountered a busy signal", Value );
		Case 0x00000009: FormatString( "JS_EX_NO_ANSWER (0x%08X) - The receiving device did not answer the call", Value );
		Case 0x0000000A: FormatString( "JS_EX_BAD_ADDRESS (0x%08X) - The device dialed an invalid fax number", Value );
		Case 0x0000000B: FormatString( "JS_EX_NO_DIAL_TONE (0x%08X) - The sending device cannot complete the call because it does not detect a dial tone", Value );
		Case 0x0000000C: FormatString( "JS_EX_FATAL_ERROR (0x%08X) - The device has encountered a fatal protocol error", Value );
		Case 0x0000000D: FormatString( "JS_EX_CALL_DELAYED (0x%08X) - The device delayed a fax call because the sending device received a busy signal multiple times", Value );
		Case 0x0000000E: FormatString( "JS_EX_CALL_BLACKLISTED (0x%08X) - The device could not complete a call because the telephone number was blocked or reserved; emergency numbers such as 911 are blocked", Value );
		Case 0x0000000F: FormatString( "JS_EX_NOT_FAX_CALL (0x%08X) - The device received a call that was a data call or a voice call", Value );
		Case 0x00000010: FormatString( "JS_EX_PARTIALLY_RECEIVED (0x%08X) - The incoming fax was partially received. Some (but not all) of the pages are available", Value );
		Case 0x00000011: FormatString( "JS_EX_HANDLED (0x%08X) - The fax service processed the outbound fax document; the fax service provider will transmit the document", Value );
		Case 0x00000012: FormatString( "JS_EX_CALL_COMPLETED (0x%08X) - The call was completed successfully", Value );
		Case 0x00000013: FormatString( "JS_EX_CALL_ABORTED (0x%08X) - The call was terminated", Value );
		Default        : FormatString( "No Description Available", Value );
	}
}

Table FaxClientFaxEventExConfigTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x0000: FormatString( "FAX_CONFIG_TYPE_RECEIPTS (0x%04X) - Receipt configuration has changed", Value );
		Case 0x0001: FormatString( "FAX_CONFIG_TYPE_ACTIVITY_LOGGING (0x%04X) - Activity logging configuration has changed", Value );
		Case 0x0002: FormatString( "FAX_CONFIG_TYPE_OUTBOX (0x%04X) - Outbox configuration has changed", Value );
		Case 0x0003: FormatString( "FAX_CONFIG_TYPE_SENTITEMS (0x%04X) - Sent items archive configuration has changed", Value );
		Case 0x0004: FormatString( "FAX_CONFIG_TYPE_INBOX (0x%04X) - Inbox configuration has changed", Value );
		Case 0x0005: FormatString( "FAX_CONFIG_TYPE_SECURITY (0x%04X) - Security configuration has changed", Value );
		Case 0x0006: FormatString( "FAX_CONFIG_TYPE_EVENTLOGS (0x%04X) - Eventlog configuration has changed", Value );
		Case 0x0007: FormatString( "FAX_CONFIG_TYPE_DEVICES (0x%04X) - Device configuration has changed", Value );
		Case 0x0008: FormatString( "FAX_CONFIG_TYPE_OUT_GROUPS (0x%04X) - Outbound routing groups configuration has changed", Value );
		Case 0x0009: FormatString( "FAX_CONFIG_TYPE_OUT_RULES (0x%04X) - Outbound routing rules configuration has changed", Value );
		Case 0x000A: FormatString( "FAX_CONFIG_TYPE_GENERAL_CONFIG (0x%04X) - Outbound general config has changed", Value);
		Default        : FormatString( "No Description Available (0x%04X)", Value );
	}
}

Table FaxOpenPortFlagsTable( Value, bDescription )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "PORT_OPEN_QUERY (0x%08X)%s", Value, bDescription ? " - Port access level required to obtain a fax port handle. This access level is also required to call the FAX_GetPort method to query fax port information" : "" );
		Case 0x00000002: FormatString( "PORT_OPEN_MODIFY (0x%08X)%s", Value, bDescription ? " - Port access level required to change the configuration of a fax port with a call to the FAX_SetPort method. This access level also includes the access rights associated with the PORT_OPEN_QUERY access level" : "" );
		Case 0x00000003: FormatString( "PORT_OPEN_QUERY & MODIFY (0x%08X)%s", Value, bDescription ? " - Port access level required to obtain a fax port handle and change the configuration of a fax port" : "" );		
		Default        : FormatString( "%u (0x%08X)%s", bDescription ? " - No Description Available" : "" );
	}
}

Table FaxConnectTable( Value,Description )
{
	Switch( Value )
	{
		Case 0x00000000: FormatString( "Disconnect (0x%08X)%s", Value, Description ? " Close the fax service connection":"");
		Case 0x00000001: FormatString( "Connect (0x%08X)%s", Value, Description ? " Connect to the fax service":"");
		Case 0x00000002: FormatString( "Release (0x%08X)%s", Value, Description ? " Release a connection to the fax service":"");
		Default        : FormatString( "(0x%08X)%s", Value, Description ? " No Description Available":"");
	}
}

Table FaxProtocolSequenceTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: FormatString( "0x%08X - RPC_PROT_NOT_SUPPORTED - The protocol sequence is not supported", Value );
		Case 0x00000001: FormatString( "0x%08X - RPC_PROT_TCP_IP - Check the protocol sequence for TCP/IP", Value );
		Case 0x00000002: FormatString( "0x%08X - RPC_PROT_SPX - Check the protocol sequence for IPX/SPX", Value );
		Default        : FormatString( "0x%08X - No Description Available", Value );
	}
}

Table FaxPriorityTypeTable( Value,Description)
{
	Switch( Value )
	{
		Case 0x00000000: FormatString( "FAX_PRIORITY_TYPE_LOW (0x%08X) %s", Value, Description ? "The fax should be sent with a low priority":"" );
		Case 0x00000001: FormatString( "FAX_PRIORITY_TYPE_NORMAL (0x%08X) %s", Value, Description ? "The fax should be sent with a normal priority":"" );
		Case 0x00000002: FormatString( "FAX_PRIORITY_TYPE_HIGH (0x%08X) %s", Value, Description ? "The fax should be sent with a high priority":"");	
		Default        : FormatString( "(0x%08X) %s", Value, Description ? "No Description Available":"" );
	}
}

Table FaxQueueStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "0x%08X - JS_PENDING - The fax job is in the queue and pending service", Value );
		Case 0x00000002: FormatString( "0x%08X - JS_INPROGRESS - The fax job is in progress", Value );
		Case 0x00000004: FormatString( "0x%08X - JS_DELETING - The fax server is deleting the fax job", Value );
		Case 0x00000008: FormatString( "0x%08X - JS_FAILED - The fax job failed", Value );
		Case 0x00000010: FormatString( "0x%08X - JS_PAUSED - The fax server paused the fax job", Value );
		Case 0x00000020: FormatString( "0x%08X - JS_NOLINE - There is no line available to send the fax", Value );
		Case 0x00000040: FormatString( "0x%08X - JS_RETRYING - The fax job failed. The fax server will attempt to retransmit the fax after a specified interval", Value );
		Case 0x00000080: FormatString( "0x%08X - JS_RETRIES_EXCEEDED - The fax server exceeded the maximum number of retransmission attempts allowed", Value );
		Default        : FormatString( "0x%08X - No Description Available", Value );
	}
}

Table FaxDeviceStatusTable( Value,Description )
{
	Switch( Value )
	{
		Case 0x20000001: FormatString( "FPS_DIALING (0x%08X) %s", Value, Description ?" The device is dialing a fax number":"");
		Case 0x20000002: FormatString( "FPS_SENDING (0x%08X) %s", Value, Description ? "The device is sending a fax document":"" );
		Case 0x20000004: FormatString( "FPS_RECEIVING (0x%08X) %s", Value, Description ? "The device is receiving a fax document":"" );
		Case 0x20000008: FormatString( "FPS_COMPLETED (0x%08X) %s", Value, Description ? "The device completed sending or receiving a fax transmission":"");
		Case 0x20000010: FormatString( "FPS_HANDLED (0x%08X) %s", Value, Description ? "The fax service processed the outbound fax document; the fax service provider will transmit the document":"");
		Case 0x20000020: FormatString( "FPS_UNAVAILABLE (0x%08X) %s", Value, Description ? "The device is not available because it is in use by another application":"" );
		Case 0x20000040: FormatString( "FPS_BUSY (0x%08X) %s", Value, Description ? "The device encountered a busy signal":"" );
		Case 0x20000080: FormatString( "FPS_NO_ANSWER (0x%08X) %s", Value, Description ? "The receiving device did not answer the call":"" );
		Case 0x20000100: FormatString( "FPS_BAD_ADDRESS (0x%08X) %s", Value, Description ? "The device dialed an invalid fax number":"" );
		Case 0x20000200: FormatString( "FPS_NO_DIAL_TONE (0x%08X) %s", Value, Description ? "The sending device cannot complete the call because it does not detect a dial tone":"" );
		Case 0x20000400: FormatString( "FPS_DISCONNECTED (0x%08X) %s", Value, Description ? "The fax call was disconnected by the sender or the caller":"" );
		Case 0x20000800: FormatString( "FPS_FATAL_ERROR (0x%08X) %s", Value, Description ? "The device has encountered a fatal protocol error":"");
		Case 0x20001000: FormatString( "FPS_NOT_FAX_CALL (0x%08X) %s", Value, Description ? "The device received a call that was a data call or a voice call":"" );
		Case 0x20002000: FormatString( "FPS_CALL_DELAYED (0x%08X) %s", Value, Description ? "The device delayed a fax call because the sending device received a busy signal multiple times. The device cannot retry the call because dialing restrictions exist":"" );
		Case 0x20004000: FormatString( "FPS_CALL_BLACKLISTED (0x%08X) %s", Value, Description ? "The device could not complete a call because the telephone number was blocked or reserved; emergency numbers such as 911 are blocked":"" );
		Case 0x20008000: FormatString( "FPS_INITIALIZING (0x%08X) %s", Value, Description ? "The device is initializing a call":"");
		Case 0x20010000: FormatString( "FPS_OFFLINE (0x%08X) %s", Value, Description ? "The device is offline and unavailable":"" );
		Case 0x20020000: FormatString( "FPS_RINGING (0x%08X) %s", Value, Description ? "The device is ringing":"");
		Case 0x20100000: FormatString( "FPS_AVAILABLE (0x%08X) %s", Value, Description ? "The device is available":"");
		Case 0x20200000: FormatString( "FPS_ABORTING (0x%08X) %s", Value, Description ? "The device is aborting a fax job":"" );
		Case 0x20400000: FormatString( "FPS_ROUTING (0x%08X) %s", Value, Description ? "The device is routing a received fax document":"" );
		Case 0x20800000: FormatString( "FPS_ANSWERED (0x%08X) %s", Value, Description ? "The device answered a new call":"");
		Default        : FormatString( "(0x%08X) %s", Value, Description ? "No Description Available":"");
	}
}

Table FaxDeliveryReportTypeTable( Value,Description )
{
	Switch( Value )
	{
		Case 0x00000000: FormatString( "DRT_NONE (0x%08X) %s",value,Description ? "Do not send a DR or an NDR to the sender of the fax transmission":"");
		Case 0x00000001: FormatString( "DRT_EMAIL (0x%08X) %s",value,Description ? "Send the DR or NDR in an e-mail message to the sender of the fax transmission":"");
		Case 0x00000002: FormatString( "DRT_INBOX (0x%08X) %s",value,Description ? "Send the DR or NDR in e-mail to the sender's local personal folder store (PST)":"");
		Default        : FormatString( "(0x%08X) %s",value,Description ? "No Description Available":"");
	}
}

Table FaxScheduledActionTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: FormatString( "0x%08X - JSA_NOW - Send the fax as soon as a device is available", Value );
		Case 0x00000001: FormatString( "0x%08X - JSA_SPECIFIC_TIME - Send the fax at the time specified by the tmSchedule member", Value );
		Case 0x00000002: FormatString( "0x%08X - JSA_DISCOUNT_PERIOD - Send the fax during the discount rate period", Value );
		Default        : FormatString( "0x%08X - No Description Available", Value );
	}
}

Table FaxCommandTable( Value,Description )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "JC_DELETE (0x%08X)%s",value,Description ? "  Cancel the specified fax job. The job can be active or queued":"");
		Case 0x00000002: FormatString( "JC_PAUSE (0x%08X)%s",value,Description ? "  Pause the specified queued fax job. If the fax job is active, the fax service pauses the job when it returns to the queued state":"");
		Case 0x00000003: FormatString( "JC_RESUME | JC_RESTART (0x%08X)%s",value,Description ? "  Resume the paused fax job | Restart the specified fax job":"");
		Default        : FormatString( "0x%08X - No Description Available", Value );
	}
}

Table FaxLogCategoryTable( Value,Description )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "FAXLOG_CATEGORY_INIT (0x%08X) %s",value,Description ? " A fax service initialization or termination event":"");
		Case 0x00000002: FormatString( "FAXLOG_CATEGORY_OUTBOUND (0x%08X) %s",value,Description ? " An outgoing fax transmission event such as sending a fax":"");
		Case 0x00000003: FormatString( "FAXLOG_CATEGORY_INBOUND (0x%08X) %s",value,Description ? " An incoming fax transmission event such as receiving a fax or routing a fax":"");
		Case 0x00000004: FormatString( "FAXLOG_CATEGORY_UNKNOWN (0x%08X) %s",value,Description ? " An unknown event":"");
		Default        : FormatString( "(0x%08X) %s",value,Description ? " No Description Available":"");
	}
}

Table FaxLogCategoryLevelTable( Value,Description )
{
	Switch( Value )
	{
		Case 0x00000000: FormatString( "FAXLOG_LEVEL_NONE (0x%08X) %s",value,Description ? " The fax server does not log events":"" );
		Case 0x00000001: FormatString( "FAXLOG_LEVEL_MIN (0x%08X) %s",value,Description ? " The fax server logs only the most severe failure events":"");
		Case 0x00000002: FormatString( "FAXLOG_LEVEL_MED (0x%08X) %s",value,Description ? " The fax server logs most events":"");
		Case 0x00000003: FormatString( "FAXLOG_LEVEL_MAX (0x%08X) %s",value,Description ? " The fax server logs all events":"");
		Default        : FormatString( "(0x%08X) %s",value,Description ? "No Description Available":"" );
	}
}

Table FaxProductSkuType( Value, ShowDescription )
{
	Switch( Value )
	{
		Case 0x00000000: FormatString( "PRODUCT_SKU_UNKNOWN (0x%08X)%s", Value, ShowDescription ? "SKU of the operating system is unknown" : "" );
		Case 0x00000001: FormatString( "PRODUCT_SKU_PERSONAL (0x%08X)%s", Value, ShowDescription ? "SKU of the operating system is Windows XP, Personal Edition" : "" );
		Case 0x00000002: FormatString( "PRODUCT_SKU_PROFESSIONAL (0x%08X)%s", Value, ShowDescription ? "SKU of the operating system is Windows XP Professional Edition" : "" );
		Case 0x00000004: FormatString( "PRODUCT_SKU_SERVER (0x%08X)%s", Value, ShowDescription ? "SKU of the operating system is Windows Server 2003, Standard Edition" : "" );
		Case 0x00000008: FormatString( "PRODUCT_SKU_ADVANCED_SERVER (0x%08X)%s", Value, ShowDescription ? "SKU of the operating system is Windows Server 2003 Advanced Edition" : "" );
		Case 0x00000010: FormatString( "PRODUCT_SKU_DATA_CENTER (0x%08X)%s", Value, ShowDescription ? "SKU of the operating system is Windows Server 2003, Datacenter Edition" : "" );
		Case 0x00000020: FormatString( "PRODUCT_SKU_DESKTOP_EMBEDDED (0x%08X)%s", Value, ShowDescription ? "SKU of the operating system is Windows XP Embedded Edition" : "" );
		Case 0x00000040: FormatString( "PRODUCT_SKU_SERVER_EMBEDDED (0x%08X)%s", Value, ShowDescription ? "SKU of the operating system is Windows Server 2003 Embedded Edition" : "" );
		Case 0x00000080: FormatString( "PRODUCT_SKU_WEB_SERVER (0x%08X)%s", Value, ShowDescription ? "SKU of the operating system is Windows Server 2003 Web Server Edition" : "" );
	}
}

Table FaxEnumMessageFolderTable( Value,Description )
{
	Switch( Value )
	{
		Case 0x0000: FormatString( "FAX_MESSAGE_FOLDER_INBOX (0x%04X) %s",Value,Description ? " The incoming fax transmissions archive":"");
		Case 0x0001: FormatString( "FAX_MESSAGE_FOLDER_SENTITEMS (0x%04X) %s",Value,Description ? " The outgoing fax transmissions archive":"" );
		Case 0x0002: FormatString( "FAX_MESSAGE_FOLDER_QUEUE (0x%04X) %s",Value,Description ? " The outgoing and incoming fax queue":"");
		Default        : FormatString( "0x%04X - No Description Available", Value );
	}
}

Table FaxProfTypeTable( Value,Description )
{
	Switch( Value )
	{
		Case 0x0001: FormatString( "RECIPIENT_PERSONAL_PROF (0x%04X) %s",Value,Description ? " Indicates a recipient profile":"");
		Case 0x0002: FormatString( "SENDER_PERSONAL_PROF (0x%04X) %s",Value,Description ? " Indicates a sender profile":"");
		Default        : FormatString( "(0x%04X) %s",Value,Description ? " No Description Available":"");
	}
}

Table FaxServerVersionFlagsTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "0x%08X - The server component was built in debug mode", Value );
		Case 0x00000002: FormatString( "0x%08X - The server component was built for evaluation purposes", Value );
		Default        : FormatString( "0x%08X - No Description Available", Value );
	}
}

Table FaxClientAPIVersionTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: FormatString( "0x%08X - FAX_API_VERSION_0 - No FAX_ERR_* values are returned", Value );
		Case 0x00010000: FormatString( "0x%08X - FAX_API_VERSION_1 - FAX_ERR 7001-7012 can be returned from the server", Value );
		Case 0x00020000: FormatString( "0x%08X - FAX_API_VERSION_2 - FAX_ERR 7001-7013 can be returned from the server", Value );
		Case 0x00030000: FormatString( "0x%08X - FAX_API_VERSION_3 - FAX_ERR 7001-7013 can be returned from the server", Value );
		Default        : FormatString( "0x%08X - No Description Available", Value );
	}
}

Table FaxExtendedQueueStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "0x%08X - JS_EX_DISCONNECTED - The sender or the caller disconnected the fax call", Value );
		Case 0x00000002: FormatString( "0x%08X - JS_EX_INITIALIZING - The device is initializing a call", Value );
		Case 0x00000003: FormatString( "0x%08X - JS_EX_DIALING - The device is dialing a fax number", Value );
		Case 0x00000004: FormatString( "0x%08X - JS_EX_TRANSMITTING - The device is sending a fax document", Value );
		Case 0x00000005: FormatString( "0x%08X - JS_EX_ANSWERED - The device answered a new call", Value );
		Case 0x00000007: FormatString( "0x%08X - JS_EX_LINE_UNAVAILABLE - The device is not available because it is in use by another application", Value );
		Case 0x00000008: FormatString( "0x%08X - JS_EX_BUSY - The device encountered a busy signal", Value );
		Case 0x00000009: FormatString( "0x%08X - JS_EX_NO_ANSWER - The receiving device did not answer the call", Value );
		Case 0x0000000A: FormatString( "0x%08X - JS_EX_BAD_ADDRESS - The device dialed an invalid fax number", Value );
		Case 0x0000000B: FormatString( "0x%08X - JS_EX_NO_DIAL_TONE - The sending device cannot complete the call because it does not detect a dial tone", Value );
		Case 0x0000000C: FormatString( "0x%08X - JS_EX_FATAL_ERROR - The device has encountered a fatal protocol error", Value );
		Case 0x0000000D: FormatString( "0x%08X - JS_EX_CALL_DELAYED - The device delayed a fax call because the sending device received a busy signal multiple times", Value );
		Case 0x0000000E: FormatString( "0x%08X - JS_EX_CALL_BLACKLISTED - The device could not complete a call because the telephone number was blocked or reserved; emergency numbers such as 911 are blocked", Value );
		Case 0x0000000F: FormatString( "0x%08X - JS_EX_NOT_FAX_CALL - The device received a call that was a data call or a voice call", Value );
		Case 0x00000010: FormatString( "0x%08X - JS_EX_PARTIALLY_RECEIVED - The incoming fax was partially received. Some of the pages are available", Value );
		Case 0x00000011: FormatString( "0x%08X - JS_EX_HANDLED - The fax service processed the outbound fax document; the Fax Service Provider will transmit the document", Value );
		Case 0x00000012: FormatString( "0x%08X - JS_EX_CALL_COMPLETED - The call was completed successfully", Value );
		Case 0x00000013: FormatString( "0x%08X - JS_EX_CALL_ABORTED - The call was terminated", Value );
		Default        : FormatString( "0x%08X - No Description Available", Value );
	}
}

Table FaxAccessMaskTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString( "0x%08X - FAX_GENERIC_EXECUTE - Identical to the FAX_ACCESS_SUBMIT specific access right", Value );
		Case 0x000002A8: FormatString( "0x%08X - FAX_GENERIC_READ - Includes the read-only rights granted by the following specific access rights: FAX_ACCESS_QUERY_JOBS, FAX_ACCESS_QUERY_CONFIG, FAX_ACCESS_QUERY_IN_ARCHIVE, FAX_ACCESS_QUERY_OUT_ARCHIVE", Value );
		Case 0x00000550: FormatString( "0x%08X - FAX_GENERIC_WRITE - Includes the management rights granted by the following specific access rights: FAX_ACCESS_MANAGE_JOBS, FAX_ACCESS_MANAGE_CONFIG, FAX_ACCESS_MANAGE_IN_ARCHIVE, FAX_ACCESS_MANAGE_OUT_ARCHIVE", Value );
		Case 0x000007FF: FormatString( "0x%08X - FAX_GENERIC_ALL - Includes all of the specific fax permissions", Value );
		Default        : FormatString( "0x%08X - No Description Available", Value );
	}
}

Table FaxEnumDeviceStatusTable ( Value )
{
	switch( Value )
	{
		Case 0x0001:FormatString( "0x%04X - FAX_DEVICE_STATUS_POWERED_OFF - The device is powered Off", Value);
		Case 0x0002:FormatString( "0x%04X - FAX_DEVICE_STATUS_SENDING - The device is currently sending one or more fax jobs", Value);
		Case 0x0004:FormatString( "0x%04X - FAX_DEVICE_STATUS_RECEIVING - The device is currently receiving one or more fax jobs", Value);
		Case 0x0008:FormatString( "0x%04X - FAX_DEVICE_STATUS_RINGING - The device is currently ringing", Value);
		Default        : FormatString( "0x%04X - No Description Available", Value );
	}
}

Table FaxEnumSMTPAuthOptionsTable (Value,Description)
{
	switch(Value)
	{
		case 0x0000:FormatString("FAX_SMTP_AUTH_ANONYMOUS (0x%04X) %s",value,Description ? "The server will send fax transmission receipts using a non-authenticated SMTP server":"");
		case 0x0001:FormatString("FAX_SMTP_AUTH_BASIC (0x%04X) %s",value,Description ? "The server will send fax transmission receipts using a basic (plain text) authenticated SMTP server":"");
		case 0x0002:FormatString("FAX_SMTP_AUTH_NTLM (0x%04X) %s",value,Description ? "The server will send fax transmission receipts using an NTLM-authenticated SMTP server":"");
		Default:FormatString("(0x%04X) %s",value,Description ? "No Description Available":"");
	}
}

Table FaxEnumDeviceReceiveModeTable (Value)
{
	switch(Value)
	{
		case 0x0000:FormatString("FAX_DEVICE_RECEIVE_MODE_OFF (0x%04X) Do not answer incoming calls",Value);
		case 0x0001:FormatString("FAX_DEVICE_RECEIVE_MODE_AUTO (0x%04X) Automatically answer incoming calls after the specified number of rings", Value);
		case 0x0002:FormatString("FAX_DEVICE_RECEIVE_MODE_MANUAL (0x%04X) Manually answer incoming calls", Value);
		Default:FormatString("(0x%04X) No Description Available", Value);
	}
}

Table FaxEnumGroupStatusTable (Value)
{
	switch(Value)
	{
		case 0x0000:FormatString("ALL_DEV_VALID (0x%04X) All the devices in the group are valid and available for sending outgoing faxes", Value);
		case 0x0001:FormatString("EMPTY (0x%04X) The group is empty (does not contain any device)", Value);
		case 0x0002:FormatString("ALL_DEV_NOT_VALID (0x%04X) All the devices in the group are not available for sending outgoing faxes", Value);
		case 0x0003:FormatString("SOME_DEV_NOT_VALID (0x%04X) Some (but not all) of the devices in the group are not available for sending outgoing faxes",Value);
		Default:FormatString("(0x%04X) No Description Available", Value);
	}
}

Table FaxEnumProviderStatusTable (Value,Description)
{
	switch(Value)
	{
		case 0x0000:FormatString("SUCCESS (0x%04X) %s",value,Description ? "The provider was successfully loaded, linked, and initialized":"");
		case 0x0001:FormatString("SERVER_ERROR (0x%04X) %s",value,Description ? "Error encountered while trying to load, link, and initialize the provider":"");
		case 0x0002:FormatString("BAD_GUID (0x%04X) %s",value,Description ? "Error encountered while parsing the installation data of the device provider":"");
		case 0x0003:FormatString("BAD_VERSION (0x%04X) %s",value,Description ? "Error encountered while parsing the installation data of the device provider":"");
		case 0x0004:FormatString("CANT_LOAD (0x%04X) %s",value,Description ? "Error encountered while loading the providers DLL":"");
		case 0x0005:FormatString("CANT_LINK (0x%04X) %s",value,Description ? "Error encountered while linking to external routines":"");
		case 0x0006:FormatString("CANT_INIT (0x%04X) %s",value,Description ? "Error encountered while calling the initialization function of the provider":"");
		Default:FormatString("(0x%04X) %s",value,Description ? "Undefined Value":"");
	}
}

Table FaxRoutingGuidTable(Value)
{
	switch(Value)
	{
		case "{6bbf7bfe-9af2-11d0-abf7-00c04fd91a4e}":FormatString("REGVAL_RM_EMAIL_GUID");
		case "{92041a90-9af2-11d0-abf7-00c04fd91a4e}":FormatString("REGVAL_RM_FOLDER_GUID");
		case "{aec1b37c-9af2-11d0-abf7-00c04fd91a4e}":FormatString("REGVAL_RM_PRINTING_GUID");
		case "{aacc65ec-0091-40d6-a6f3-a2ed6057e1fa}":FormatString("REGVAL_RM_FLAGS_GUID");
		Default:FormatString("No Description Available");
	}
}

Struct FaxEvent = FormatString("Timestamp: %s, DeviceId: %u, EventId: %u, JobId: %u", TimeStamp,DeviceId,EventId, JobId)
{
	UINT32 SizeOfStruct = FormatString( "%u bytes", this );
	FILETIME TimeStamp;
	UINT32 DeviceId;
	UINT32 EventId = FaxClientFaxEventIdTable( this );
	UINT32 JobId = FaxClientFaxJobIdTable( this );
}


Struct FaxJobValidityMask = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
{
	Switch( Property.MSRPCByteOrder )
	{
		Case LittleEndian:
		Struct
		{
			UINT32 ValidityMask = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
			{
				UINT32 JobID:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "The job information contains a queue job session identifier" : "The job information does NOT contain a queue job session identifier");
				UINT32 Type:1 = FormatString("                  (%s) %s", this.ToBitString, this ? "The job information contains a job type" : "The job information does NOT contain a job type");
				UINT32 QueueStatus:1 = FormatString("           (%s) %s", this.ToBitString, this ? "The job information contains contains a job status" : "The job information does NOT contain contains a job status");
				UINT32 StatusEx:1 = FormatString("              (%s) %s", this.ToBitString, this ? "The job information contains a job extended status code" : "The job information does NOT contain a job extended status code");
				UINT32 Size:1 = FormatString("                  (%s) %s", this.ToBitString, this ? "The job information contains the message size" : "The job information does NOTcontain the message size");
				UINT32 PageCount:1 = FormatString("             (%s) %s", this.ToBitString, this ? "The job information contains the number of pages in the message" : "The job information does NOT contain the number of pages in the message");
				UINT32 CurrentPage:1 = FormatString("           (%s) %s", this.ToBitString, this ? "The job information contains the current page count being transmitted" : "The job information does NOT contain the current page count being transmitted");
				UINT32 RecepientProfile:1 = FormatString("      (%s) %s", this.ToBitString, this ? "The job information contains additional recipient information" : "The job information does NOT contain additional recipient information");
				UINT32 ScheduleTime:1 = FormatString("          (%s) %s", this.ToBitString, this ? "The job information contains the time this message is scheduled to be processed" : "The job information does NOT contain the time this message is scheduled to be processed");
				UINT32 OriginalScheduleTime:1 = FormatString("  (%s) %s", this.ToBitString, this ? "The job information contains the original time this message was scheduled to be sent" : "The job information does NOT contain the original time this message was scheduled to be sent");
				UINT32 SubmissionTime:1 = FormatString("        (%s) %s", this.ToBitString, this ? "The job information contains the time this job was submitted" : "The job information does NOT contain the time this job was submitted");
				UINT32 TransmissionStartTime:1 = FormatString(" (%s) %s", this.ToBitString, this ? "The job information contains the start time of this job's successful send or receive transmission" : "The job information does NOT contain the start time of this job's successful send or receive transmission");
				UINT32 TransmissionEndTime:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The job information contains the end time of this job's successful send or receive transmission" : "The job information does NOT contain the end time of this job's successful send or receive transmission");
				UINT32 Priority:1 = FormatString("              (%s) %s", this.ToBitString, this ? "The job information contains the priority with which this message was submitted" : "The job information does NOT contain the priority with which this message was submitted");
				UINT32 Retries:1 = FormatString("               (%s) %s", this.ToBitString, this ? "The job information contains the number of send retries" : "The job information does NOT contain the number of send retries");
				UINT32 DeliveryReportType:1 = FormatString("    (%s) %s", this.ToBitString, this ? "The job information contains the delivery report type requested when the message was submitted" : "The job information does NOT contain the delivery report type requested when the message was submitted");
				UINT32 SenderProfile:1 = FormatString("         (%s) %s", this.ToBitString, this ? "The job information contains additional send information" : "The job information does NOT contain additional send information");
				UINT32 StatusSubStruct:1 = FormatString("       (%s) %s", this.ToBitString, this ? "The job information contains a pointer to a FAX_JOB_STATUS structure" : "The job information does NOT contain a pointer to a FaxJobStatus structure");
				UINT32 DeviceID:1 = FormatString("              (%s) %s", this.ToBitString, this ? "The job information contains the identifier of the device from which this job was last sent or at which the job was last received" : "The job information does NOT contain the identifier of the device from which this job was last sent or at which the job was last received");
				UINT32 MessageID:1 = FormatString("             (%s) %s", this.ToBitString, this ? "The job information contains the unique 64-bit identifier of the job" : "The job information does NOT contain the unique 64-bit identifier of the job");
				UINT32 BroadcastID:1 = FormatString("           (%s) %s", this.ToBitString, this ? "The job information contains the unique 64-bit identifier of the broadcast operation" : "The job information does NOT contain the unique 64-bit identifier of the broadcast operation");
				UINT32 Reserved:11 = FormatString("              (%s)", this.ToBitString);
			}
		}
		Default:
		Struct
		{
			UINT32 ValidityMask = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
			{
				UINT32 Reserved:11 = FormatString("              (%s)", this.ToBitString);
				UINT32 BroadcastID:1 = FormatString("           (%s) %s", this.ToBitString, this ? "The job information contains the unique 64-bit identifier of the broadcast operation" : "The job information does NOT contain the unique 64-bit identifier of the broadcast operation");
				UINT32 MessageID:1 = FormatString("             (%s) %s", this.ToBitString, this ? "The job information contains the unique 64-bit identifier of the job" : "The job information does NOT contain the unique 64-bit identifier of the job");
				UINT32 DeviceID:1 = FormatString("              (%s) %s", this.ToBitString, this ? "The job information contains the identifier of the device from which this job was last sent or at which the job was last received" : "The job information does NOT contain the identifier of the device from which this job was last sent or at which the job was last received");
				UINT32 StatusSubStruct:1 = FormatString("       (%s) %s", this.ToBitString, this ? "The job information contains a pointer to a FAX_JOB_STATUS structure" : "The job information does NOT contain a pointer to a FaxJobStatus structure");
				UINT32 SenderProfile:1 = FormatString("         (%s) %s", this.ToBitString, this ? "The job information contains additional send information" : "The job information does NOT contain additional send information");
				UINT32 DeliveryReportType:1 = FormatString("    (%s) %s", this.ToBitString, this ? "The job information contains the delivery report type requested when the message was submitted" : "The job information does NOT contain the delivery report type requested when the message was submitted");
				UINT32 Retries:1 = FormatString("               (%s) %s", this.ToBitString, this ? "The job information contains the number of send retries" : "The job information does NOT contain the number of send retries");
				UINT32 Priority:1 = FormatString("              (%s) %s", this.ToBitString, this ? "The job information contains the priority with which this message was submitted" : "The job information does NOT contain the priority with which this message was submitted");
				UINT32 TransmissionEndTime:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The job information contains the end time of this job's successful send or receive transmission" : "The job information does NOT contain the end time of this job's successful send or receive transmission");
				UINT32 TransmissionStartTime:1 = FormatString(" (%s) %s", this.ToBitString, this ? "The job information contains the start time of this job's successful send or receive transmission" : "The job information does NOT contain the start time of this job's successful send or receive transmission");
				UINT32 SubmissionTime:1 = FormatString("        (%s) %s", this.ToBitString, this ? "The job information contains the time this job was submitted" : "The job information does NOT contain the time this job was submitted");
				UINT32 OriginalScheduleTime:1 = FormatString("  (%s) %s", this.ToBitString, this ? "The job information contains the original time this message was scheduled to be sent" : "The job information does NOT contain the original time this message was scheduled to be sent");
				UINT32 ScheduleTime:1 = FormatString("          (%s) %s", this.ToBitString, this ? "The job information contains the time this message is scheduled to be processed" : "The job information does NOT contain the time this message is scheduled to be processed");
				UINT32 RecepientProfile:1 = FormatString("      (%s) %s", this.ToBitString, this ? "The job information contains additional recipient information" : "The job information does NOT contain additional recipient information");
				UINT32 CurrentPage:1 = FormatString("           (%s) %s", this.ToBitString, this ? "The job information contains the current page count being transmitted" : "The job information does NOT contain the current page count being transmitted");
				UINT32 PageCount:1 = FormatString("             (%s) %s", this.ToBitString, this ? "The job information contains the number of pages in the message" : "The job information does NOT contain the number of pages in the message");
				UINT32 Size:1 = FormatString("                  (%s) %s", this.ToBitString, this ? "The job information contains the message size" : "The job information does NOT contain the message size");
				UINT32 StatusEx:1 = FormatString("              (%s) %s", this.ToBitString, this ? "The job information contains a job extended status code" : "The job information does NOT contain a job extended status code");
				UINT32 QueueStatus:1 = FormatString("           (%s) %s", this.ToBitString, this ? "The job information contains contains a job status" : "The job information does NOT contain contains a job status");
				UINT32 Type:1 = FormatString("                  (%s) %s", this.ToBitString, this ? "The job information contains a job type" : "The job information does NOT contain a job type");
				UINT32 JobID:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "The job information contains a queue job session identifier" : "The job information does NOT contain a queue job session identifier");
			}			
		}
	}
}

Struct FaxJobStatusW = FormatString("JobID: %u, ValidityMask: %s, JobType: %s, JobOperations: %s", JobID,ValidityMask.toString, FaxJobTypeTable( JobType, FALSE ),AvailableJobOperations.toString)
{
	UINT32 SizeOfStruct = FormatString( "%u bytes", this );
	FaxJobValidityMask ValidityMask; 
	UINT32 JobID = FormatString( "%u", this );
	UINT32 JobType = FaxJobTypeTable( this, TRUE );
	UINT32 QueueStatus = FaxClientFaxJobStatusQueueStatusTable( this );
	UINT32 ExtendedStatus = FaxClientFaxJobStatusExtendedStatusTable( this );
	[property.ExtendedStatus.AddToProperty(ExtendedStatusPtr.ReferentID, 0)]
	NdrPtr ExtendedStatusPtr;
	UINT32 Size = FormatString( "%u bytes", this );
	UINT32 PageCount = FormatString( "%u", this );
	UINT32 CurrentPage = FormatString( "%u", this );
	[property.TSid.AddToProperty(TSidPtr.ReferentID, 0)]
	NdrPtr TSidPtr;	
	[property.CSid.AddToProperty(CSidPtr.ReferentID, 0)]
	NdrPtr CSidPtr;
	SystemTime ScheduleTime;
	SystemTime TransmissionStartTime;
	SystemTime TransmissionEndTime;
	UINT32 DeviceID = FormatString( "%u (0x%08X)", this, this );
	[property.DeviceName.AddToProperty(DeviceNamePtr.ReferentID, 0)]
	NdrPtr DeviceNamePtr;
	UINT32 Retries;
	[property.CallerID.AddToProperty(CallerIDPtr.ReferentID, 0)]
	NdrPtr CallerIDPtr;
	[property.RoutingInfo.AddToProperty(RoutingInfoPtr.ReferentID, 0)]
	NdrPtr RoutingInfoPtr;
	UINT32 AvailableJobOperations = FormatString( "0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
			Struct
			{
				UINT32 View:1 = FormatString("         (%s) %s", this.ToBitString, this ? "Indicates that the client may request the job's TIFF image" : "Indicates that the client may NOT request the job's TIFF image");
				UINT32 Pause:1 = FormatString("        (%s) %s", this.ToBitString, this ? "The job can be paused using the legacy FaxSetJob method" : "The job can NOT be paused using the legacy FaxSetJob method");
				UINT32 Resume:1 = FormatString("       (%s) %s", this.ToBitString, this ? "The job can be resumed using the legacy FaxSetJob method" : "The job can NOT be resumed using the legacy FaxSetJob method");
				UINT32 Restart:1 = FormatString("      (%s) %s", this.ToBitString, this ? "The job can be restarted using the legacy FaxSetJob method" : "The job can NOT be restarted using the legacy FaxSetJob method");
				UINT32 Delete:1 = FormatString("       (%s) %s", this.ToBitString, this ? "The job can be deleted using the legacy FaxSetJob or FaxAbort methods" : "The job can NOT be deleted using the legacy FaxSetJob or FaxAbort methods");
				UINT32 RecipientInfo:1 = FormatString("(%s) %s", this.ToBitString, this ? "The job's recipient information can be retrieved by calling FaxGetPersonalProfileInfo" : "The job's recipient information can NOT be retrieved by calling FaxGetPersonalProfileInfo");
				UINT32 SenderInfo:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The job's sender information can be retrieved by calling FaxGetPersonalProfileInfo" : "The job's sender information can NOT be retrieved by calling FaxGetPersonalProfileInfo");
				UINT32 Reserved:25 = FormatString("     (%s)", this.ToBitString);
			}
			Default:
			Struct
			{
				UINT32 Reserved:25 = FormatString("     (%s)", this.ToBitString);
				UINT32 SenderInfo:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The job's sender information can be retrieved by calling FaxGetPersonalProfileInfo" : "The job's sender information can NOT be retrieved by calling FaxGetPersonalProfileInfo");
				UINT32 RecipientInfo:1 = FormatString("(%s) %s", this.ToBitString, this ? "The job's recipient information can be retrieved by calling FaxGetPersonalProfileInfo" : "The job's recipient information can NOT be retrieved by calling FaxGetPersonalProfileInfo");
				UINT32 Delete:1 = FormatString("       (%s) %s", this.ToBitString, this ? "The job can be deleted using the legacy FaxSetJob or FaxAbort methods" : "The job can NOT be deleted using the legacy FaxSetJob or FaxAbort methods");
				UINT32 Restart:1 = FormatString("      (%s) %s", this.ToBitString, this ? "The job can be restarted using the legacy FaxSetJob method" : "The job can NOT be restarted using the legacy FaxSetJob method");
				UINT32 Resume:1 = FormatString("       (%s) %s", this.ToBitString, this ? "The job can be resumed using the legacy FaxSetJob method" : "The job can NOT be resumed using the legacy FaxSetJob method");
				UINT32 Pause:1 = FormatString("        (%s) %s", this.ToBitString, this ? "The job can be paused using the legacy FaxSetJob method" : "The job can NOT be paused using the legacy FaxSetJob method");
				UINT32 View:1 = FormatString("         (%s) %s", this.ToBitString, this ? "Indicates that the client may request the job's TIFF image" : "Indicates that the client may NOT request the job's TIFF image");
			}
		}
	}
}

Struct FaxEventJobW = FormatString("MessageId: %u, Type: %s",MessageId, FaxClientFaxEventJobTypeTable( Type,FALSE))
{
	UINT64 MessageId;
	UINT32 Type = FaxClientFaxEventJobTypeTable( this,TRUE);
	UINT32 OffsetToJobStatus;
	Struct AdjustToSizeofStruct = FormatString("24 bytes of data adjusted to the size of largest member in the union")
	{
		BLOB(24) Data;
	}
	Switch( Type & 0x00000002 )
	{
		Case 0x00000002:
		Struct
		{
			FaxJobStatusW JobData;
			[Property.FaxJobUnicodeStringcount = 1]
			switch
			{
				Case Property.ExtendedStatus[Property.FaxJobUnicodeStringcount - 1] > 0:
				Case Property.TSid[Property.FaxJobUnicodeStringcount - 1] > 0:
				Case Property.CSid[Property.FaxJobUnicodeStringcount - 1] > 0:
				Case Property.DeviceName[Property.FaxJobUnicodeStringcount - 1] > 0:
				Case Property.CallerID[Property.FaxJobUnicodeStringcount - 1] > 0:
				Case Property.RoutingInfo[Property.FaxJobUnicodeStringcount - 1] > 0:
					FaxJobStatusWArrayUnicodeString FaxJobStatusWArrayUnicodeString;
			}
		}
	}
}

Struct FaxServerActivity = FormatString("Incoming: %u, Routing: %u, Outgoing: %u, Queued: %u",IncomingMessages,RoutingMessages,OutgoingMessages,QueuedMessages)
{
	UINT32 SizeOfStruct;
	UINT32 IncomingMessages;
	UINT32 RoutingMessages;
	UINT32 OutgoingMessages;
	UINT32 DelegatedOutgoingMessages;
	UINT32 QueuedMessages;
	UINT32 ErrorEvents;
	UINT32 WarningEvents;
	UINT32 InformationEvents;
}

Struct FaxEventNewCallW = FormatString("Call: %u, DeviceId: %u, CallerId: %s", Call,DeviceId, CallerId.toString)
{
	UINT32 Call;
	UINT32 DeviceId;
	NdrPtr OffsetToCallerId;
	switch
	{
		case OffsetToCallerId.ReferentID > 0:NdrWideString CallerId;	
	}
}

Struct FaxEventDeviceStatus = FormatString("DeviceId: %u, NewStatus: %s", DeviceId,FaxEnumDeviceStatusTable(NewStatus))
{
	UINT32 DeviceId;
	UINT32 NewStatus = FaxEnumDeviceStatusTable( this );
}

[FaxEventExSummary = ""]
Struct FaxEventEx = FormatString("TimeStamp: %s, EventType: %s %s",TimeStamp,FaxClientFaxEventTypeTable(EventType,FALSE),FaxEventExSummary)
{
	UINT32 SizeOfStruct;
	FILETIME TimeStamp;
	NdrEnum EventType = FaxClientFaxEventTypeTable( this.value,TRUE );
	Switch( EventType.Value )
	{
		Case 0x00000001:
		[FaxEventExSummary = FormatString("%s",JobInfo.toString)]
		FaxEventJobW JobInfo;
		Case 0x00000002:
			struct
			{
				Align8 Padding;
				[FaxEventExSummary = FormatString("%s",JobInformation.toString)]
				FaxEventJobW JobInformation;
			}
		Case 0x00000004:
		[FaxEventExSummary = FormatString("%s",FaxClientFaxEventExConfigTypeTable(ConfigType))]
		Struct
		{
			UINT16 ConfigType = FaxClientFaxEventExConfigTypeTable( this );
			Struct AdjustToSizeofStruct = FormatString("38 bytes of data adjusted to the size of largest member in the union")
			{
				BLOB(38) Data;
			}
		}
		Case 0x00000008:
		[FaxEventExSummary = FormatString("%s",ActivityInfo.toString)]
		Struct {
			FaxServerActivity ActivityInfo;
			Struct AdjustToSizeofStruct = FormatString("4 bytes of data adjusted to the size of largest member in the union")
			{
				BLOB(4) Data;
			}
		}
		Case 0x00000010:
		[FaxEventExSummary = FormatString("%s",QueueStates.toString)]
		Struct
		{
			Switch( Property.MSRPCByteOrder )
			{
				Case LittleEndian:
				Struct
				{
					UINT32 QueueStates = FormatString( "0x%08X", this )
					{
						UINT32 IncomingBlocked:1 = FormatString("(%s) %s", this.ToBitString, this ? "The incoming faxes queue is blocked" : "The incoming faxes queue is NOT blocked");
						UINT32 OutboxBlocked:1 = FormatString("  (%s) %s", this.ToBitString, this ? "The outbox queue is blocked" : "The outbox queue is NOT blocked");
						UINT32 OutboxPaused:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The outbox queue is paused" : "The outbox queue is NOT paused");
						UINT32 Reserved:29 = FormatString("       (%s)", this.ToBitString);
					}
					Struct AdjustToSizeofStruct = FormatString("36 bytes of data adjusted to the size of largest member in the union")
					{
						BLOB(36) Data;
					}
				}
				Default:
				Struct
				{
					UINT32 QueueStates = FormatString( "0x%08X", this )
					{
						UINT32 Reserved:29 = FormatString("       (%s)", this.ToBitString);
						UINT32 OutboxPaused:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The outbox queue is paused" : "The outbox queue is NOT paused");
						UINT32 OutboxBlocked:1 = FormatString("  (%s) %s", this.ToBitString, this ? "The outbox queue is blocked" : "The outbox queue is NOT blocked");
						UINT32 IncomingBlocked:1 = FormatString("(%s) %s", this.ToBitString, this ? "The incoming faxes queue is blocked" : "The incoming faxes queue is NOT blocked");
					}
					Struct AdjustToSizeofStruct = FormatString("36 bytes of data adjusted to the size of largest member in the union")
					{
						BLOB(36) Data;
					}
				}				
			}
		}
		Case 0x00000020:
		[FaxEventExSummary = FormatString("%s",FaxEventJobInfo.toString)]
		FaxEventJobW FaxEventJobInfo;
		Case 0x00000040:
		[FaxEventExSummary = FormatString("%u",MessageId)]
		struct
		{
			UINT64 MessageId;
			Struct AdjustToSizeofStruct = FormatString("32 bytes of data adjusted to the size of largest member in the union")
			{
				BLOB(32) Data;
			}
		}
		Case 0x00000100:
		[FaxEventExSummary = FormatString("%s",DeviceStatus.toString)]
		struct
		{
			FaxEventDeviceStatus DeviceStatus;
			Struct AdjustToSizeofStruct = FormatString("32 bytes of data adjusted to the size of largest member in the union")
			{
				BLOB(32) Data;
			}
		}
		Case 0x00000200:
		[FaxEventExSummary = FormatString("%s",NewCall.toString)]
		Struct
		{
			FaxEventNewCallW NewCall;
			Struct AdjustToSizeofStruct = FormatString("28 bytes of data adjusted to the size of largest member in the union")
			{
				BLOB(28) Data;
			}
		}
	}
}

Struct FaxPrinterInfow
{
	[property.PrinterName.AddToProperty(PrinterNamePtr.ReferentID, 0)]
	NdrPtr PrinterNamePtr;
	[property.ServerName.AddToProperty(ServerNamePtr.ReferentID, 0)]
	NdrPtr ServerNamePtr;
	[property.DriverName.AddToProperty(DriverNamePtr.ReferentID, 0)]
	NdrPtr DriverNamePtr;
}

Struct PFaxPrinterInfoWArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	switch
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct 
		{
			[MaxLoopcount = count]
			while [true]
			{
				FAXPrinterInfow PrinterInfow;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.PrinterName[Local.Arraycount - 1] > 0:
						UnicodeString UserName;
				}
				switch
				{
					case property.ServerName[Local.Arraycount - 1] > 0:
						UnicodeString RecipientNumber;
				}
				switch
				{
					case property.DriverName[Local.Arraycount - 1] > 0:
						UnicodeString RecipientName;
				}
			}
		}
	}
}

Struct FaxEnumEventType = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ))
{
	Switch( Property.MSRPCByteOrder )
	{
		Case LittleEndian:
		Struct
		{
			UINT32 EventType = FormatString( "0x%08X", this )
			{
				UINT32 InQueue:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Request notification about fax job changes in the incoming queue":"Do NOT request notification about fax job changes in the incoming queue");
				UINT32 OutQueue:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Request notification about fax job changes in the outgoing queue" : "Do NOT request notification about fax job changes in the outgoing queue");
				UINT32 Config:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Request notifications about fax server configuration changes" : "Do NOT request notifications about fax server configuration changes");
				UINT32 Activity:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Request notifications about fax server activity" : "Do NOT request notifications about fax server activity");
				UINT32 QueueState:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Request notifications about the fax queue state" : "Do NOT request notifications about the fax queue state");
				UINT32 InArchive:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Request notifications about the removal of fax messages from the incoming messages archive" : "Do NOT request notifications about the removal of fax messages from the incoming messages archive");
				UINT32 OutArchive:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Request notifications about the removal of fax messages from the outgoing messages archive" : "Do NOT request notifications about the removal of fax messages from the outgoing messages archive");
				UINT32 FxssvcEnded:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Specifies the shutdown of the fax server" : "Does NOT specify the shutdown of the fax server");
				UINT32 DeviceStatus:1 = FormatString("(%s) %s", this.ToBitString, this ? "Specifies that the status of a device has changed" : "Specifies the status of a device has NOT changed");
				UINT32 NewCall:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Specifies that a new incoming call was detected by the fax service" : "Does NOT specify a new incoming call by the fax service");
				UINT32 Reserved:21 = FormatString("    (%s)", this.ToBitString);
				UINT32 LocalOnly:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Specifies that the fax client wants to accept only local notifications" : "Does NOT specify that the fax client wants to accept only local notifications");
			}
		}

		Default:
		Struct
		{
			UINT32 EventType = FormatString( "0x%08X", this )
			{
				UINT32 LocalOnly:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Specifies that the fax client wants to accept only local notifications" : "Does NOT specify that the fax client wants to accept only local notifications");
				UINT32 Reserved:21 = FormatString("    (%s)", this.ToBitString);
				UINT32 NewCall:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Specifies that a new incoming call was detected by the fax service" : "Does NOT specify a new incoming call by the fax service");
				UINT32 DeviceStatus:1 = FormatString("(%s) %s", this.ToBitString, this ? "Specifies that the status of a device has changed" : "Specifies the status of a device has NOT changed");
				UINT32 FxssvcEnded:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Specifies the shutdown of the fax server" : "Does NOT specify the shutdown of the fax server");
				UINT32 OutArchive:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Request notifications about the removal of fax messages from the outgoing messages archive" : "Do NOT request notifications about the removal of fax messages from the outgoing messages archive");
				UINT32 InArchive:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Request notifications about the removal of fax messages from the incoming messages archive" : "Do NOT request notifications about the removal of fax messages from the incoming messages archive");
				UINT32 QueueState:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Request notifications about the fax queue state" : "Do NOT request notifications about the fax queue state");
				UINT32 Activity:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Request notifications about fax server activity" : "Do NOT request notifications about fax server activity");
				UINT32 Config:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Request notifications about fax server configuration changes" : "Do NOT request notifications about fax server configuration changes");
				UINT32 OutQueue:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Request notification about fax job changes in the outgoing queue" : "Do NOT request notification about fax job changes in the outgoing queue");
				UINT32 InQueue:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Request notification about fax job changes in the incoming queue":"Do NOT request notification about fax job changes in the incoming queue");
			}
		}		
	}
}

Struct FaxQueueStatus = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ))
{
	Switch( Property.MSRPCByteOrder )
	{
		Case LittleEndian:
		Struct
		{
			UINT32 QueueStatus = FormatString( "0x%08X", this )
			{        
				UINT32 JSInProgress:1 = FormatString("     (%s) %s", this.ToBitString,this?"The fax job is in progress":"The fax job is NOT in progress");     
				UINT32 JSDeleting:1 = FormatString("       (%s) %s", this.ToBitString,this?"The fax server is deleting the fax job":"The fax server is NOT deleting the fax job");  
				UINT32 JSFailed:1 = FormatString("         (%s) %s", this.ToBitString,this?"The fax job failed":"The fax job passed");
				UINT32 JSPaused:1 = FormatString("         (%s) %s", this.ToBitString,this?"The fax server paused the fax job":"The fax job is continuing");
				UINT32 JSNoLine:1 = FormatString("         (%s) %s", this.ToBitString,this?"There is no line available to send the fax":"There is a line available to send the fax");
				UINT32 JSRetrying:1 = FormatString("       (%s) %s", this.ToBitString,this?"The fax job failed and fax server is attempting to retransmit the fax after specified interval":"The fax job passed");
				UINT32 JSRetriesExceeded:1 = FormatString("(%s) %s", this.ToBitString,this?"The fax server exceeded the maximum number of retransmission attempts allowed":"The fax server did NOT exceed the maximum number of retransmission attempts allowed");
				UINT32 Reserved:25 = FormatString("         (%s)", this.ToBitString);
			}
		}
		Default:
		Struct
		{
			UINT32 QueueStatus = FormatString( "0x%08X", this )
			{
				UINT32 Reserved:25 = FormatString("         (%s)", this.ToBitString);
				UINT32 JSRetriesExceeded:1 = FormatString("(%s) %s", this.ToBitString,this?"The fax server exceeded the maximum number of retransmission attempts allowed":"The fax server did NOT exceed the maximum number of retransmission attempts allowed");
				UINT32 JSRetrying:1 = FormatString("       (%s) %s", this.ToBitString,this?"The fax job failed and fax server is attempting to retransmit the fax after specified interval":"The fax job passed");
				UINT32 JSNoLine:1 = FormatString("         (%s) %s", this.ToBitString,this?"There is no line available to send the fax":"There is a line available to send the fax");
				UINT32 JSPaused:1 = FormatString("         (%s) %s", this.ToBitString,this?"The fax server paused the fax job":"The fax job is continuing");
				UINT32 JSFailed:1 = FormatString("         (%s) %s", this.ToBitString,this?"The fax job failed":"The fax job passed");
				UINT32 JSDeleting:1 = FormatString("       (%s) %s", this.ToBitString,this?"The fax server is deleting the fax job":"The fax server is NOT deleting the fax job");  
				UINT32 JSInProgress:1 = FormatString("     (%s) %s", this.ToBitString,this?"The fax job is in progress":"The fax job is NOT in progress");     
			}
		}
	}
}

Struct FaxJobEntry = FormatString("JobID: %u, JobType: %s, QueueStatus: %s, PageCount: %u",JobID,FaxJobTypeTable( JobType, FALSE ),QueueStatus.toString,PageCount)
{
	[Property.Structsize]
	UINT32 SizeOfStruct;
	UINT32 JobId;
	[property.FaxJobEntryUserName.AddToProperty(UserNamePtr.ReferentID, 0)]
	NdrPtr UserNamePtr;
	UINT32 JobType = FaxJobTypeTable( this, TRUE );
	FaxQueueStatus QueueStatus;
	UINT32 Status = FaxDeviceStatusTable( this,TRUE );
	UINT32 Size;
	UINT32 PageCount;
	[property.FaxJobEntryRecipientNumber.AddToProperty(RecipientNumberPtr.ReferentID, 0)]
	NdrPtr RecipientNumberPtr;
	[property.FaxJobEntryRecipientName.AddToProperty(RecipientNamePtr.ReferentID, 0)]
	NdrPtr RecipientNamePtr;
}

Struct FaxJobEntryArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	switch
	{
		case count == 0:
		struct
		{
			switch
			{
				Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
				struct
				{
					[Local.Length = 0 , Local.Stringcount = 0]
					while [Local.Length < ArrayPointer.Maxcount]
					{
						[Local.Length = Local.Length + UINT32(FrameData,FrameOffset),Local.Stringcount = Local.Stringcount + 1]
						FaxJobEntry FaxJobEntry;
					}
					[Local.Arraycount = 0]
					while [Local.Arraycount < Local.Stringcount]
					{
						[Local.Arraycount = Local.Arraycount + 1]
						switch
						{
							case property.FaxJobEntryUserName[Local.Arraycount - 1] > 0:
								UnicodeString UserName;
						}
						switch
						{
							case property.FaxJobEntryRecipientNumber[Local.Arraycount - 1] > 0:
								UnicodeString RecipientNumber;
						}
						switch
						{
							case property.FaxJobEntryRecipientName[Local.Arraycount - 1] > 0:
								UnicodeString RecipientName;
						}
					}
				}
			}
		}
		case	count > 0 :
		struct
		{
			switch
			{
				Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
				struct 
				{
					[MaxLoopcount = count]
					while [true]
					{
						FaxJobEntry FaxJobEntry;
					}
					[Local.Arraycount = 0]
					while [Local.Arraycount < count]
					{
						[Local.Arraycount = Local.Arraycount + 1]
						switch
						{
							case property.FaxJobEntryUserName[Local.Arraycount - 1] > 0:
								UnicodeString UserName;
						}
						switch
						{
							case property.FaxJobEntryRecipientNumber[Local.Arraycount - 1] > 0:
								UnicodeString RecipientNumber;
						}
						switch
						{
							case property.FaxJobEntryRecipientName[Local.Arraycount - 1] > 0:
								UnicodeString RecipientName;
						}
					}
				}
			}
		}
	}
}

Struct FaxJobEntryExW = FormatString("ValidityMask: %s, MessageId: %u, BroadcastId: %u, SubmissionTime: %s, Priority: %s, DeliveryReportType: %s",ValidityMask,MessageId,BroadcastId,SubmissionTime,FaxPriorityTypeTable( Priority,FALSE),FaxDeliveryReportTypeTable( DeliveryReportType,FALSE ))
{
	UINT32 SizeOfStruct;
	FaxJobValidityMask ValidityMask;
	UINT64 MessageId;
	UINT64 BroadcastId;
	[property.RecipientNumber.AddToProperty(RecipientNumberPointer.ReferentID, 0)]
	NdrPtr RecipientNumberPointer;
	[property.RecipientName.AddToProperty(RecipientNamePointer.ReferentID, 0)]
	NdrPtr RecipientNamePointer;
	[property.SenderUserName.AddToProperty(SenderUserNamePointer.ReferentID, 0)]
	NdrPtr SenderUserNamePointer;
	[property.BillingCode.AddToProperty(BillingCodePointer.ReferentID, 0)]
	NdrPtr BillingCodePointer;
	SystemTime OriginalScheduleTime;
	SystemTime SubmissionTime;
	NdrEnum Priority = FaxPriorityTypeTable( this.value,TRUE );
	Align4 Pad;
	UINT32 DeliveryReportType = FaxDeliveryReportTypeTable( this,TRUE );
	[property.DocumentName.AddToProperty(DocumentNamePointer.ReferentID, 0)]
	NdrPtr DocumentNamePointer;
	[property.Subject.AddToProperty(SubjectPointer.ReferentID, 0)]
	NdrPtr SubjectPointer;
	[Property.FaxStatusPtr = StatusPtr.ReferentID]
	NdrPtr StatusPtr;
	Align8 Padding;
}

struct FaxJobStatusWArrayUnicodeString
{
	switch
	{
		Case Property.ExtendedStatus[Property.FaxJobUnicodeStringcount - 1] > 0:
		 UnicodeString ExtendedStatus;
	}
	switch
	{
		Case Property.TSid[Property.FaxJobUnicodeStringcount - 1] > 0:
		 UnicodeString Tsid;
	}
	switch
	{
		Case Property.CSid[Property.FaxJobUnicodeStringcount - 1] > 0:
		 UnicodeString Csid;
	}
	switch
	{
		Case Property.DeviceName[Property.FaxJobUnicodeStringcount - 1] > 0:
		 UnicodeString DeviceName;
	}
	switch
	{
		Case Property.CallerID[Property.FaxJobUnicodeStringcount - 1] > 0:
		 UnicodeString CallerID;
	}
	switch
	{
		Case Property.RoutingInfo[Property.FaxJobUnicodeStringcount - 1] > 0:
		 UnicodeString RoutingInfo;
	}
}

struct FaxJobEntryExWArrayUnicodeString
{
	switch
	{
		case property.RecipientNumber[Property.FaxJobUnicodeStringcount - 1] > 0:
			UnicodeString RecipientNumber;
	}
	switch
	{
		case property.RecipientName[Property.FaxJobUnicodeStringcount - 1] > 0:
			UnicodeString RecipientName;
	}
	switch
	{
		case property.SenderUserName[Property.FaxJobUnicodeStringcount - 1] > 0:
			UnicodeString SenderUserName;
	}
	switch
	{
		case property.BillingCode[Property.FaxJobUnicodeStringcount - 1] > 0:
			UnicodeString BillingCode;
	}
	switch
	{
		case property.DocumentName[Property.FaxJobUnicodeStringcount - 1] > 0:
			UnicodeString DocumentName;
	}
	switch
	{
		case property.Subject[Property.FaxJobUnicodeStringcount - 1] > 0:
			UnicodeString Subject;
	}
	switch
	{
		Case Property.ExtendedStatus[Property.FaxJobUnicodeStringcount - 1] > 0:
		Case Property.TSid[Property.FaxJobUnicodeStringcount - 1] > 0:
		Case Property.CSid[Property.FaxJobUnicodeStringcount - 1] > 0:
		Case Property.DeviceName[Property.FaxJobUnicodeStringcount - 1] > 0:
		Case Property.CallerID[Property.FaxJobUnicodeStringcount - 1] > 0:
		Case Property.RoutingInfo[Property.FaxJobUnicodeStringcount - 1] > 0:
			FaxJobStatusWArrayUnicodeString FaxJobStatusWArrayUnicodeString;
	}
}

//This buffer go against RPC rule.the sort is : An array of FAX_JOB_ENTRY_EXW (section 2.2.25) structures followed by 
//an array of the same number of FAX_JOB_STATUS (section 2.2.26) structures,followed by other data pointed at from 
//these structures (from pointer type fields)
Struct FaxJobEntryExWArray = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
		[Property.FaxJobEntryBufferSize = ArrayPointer.Maxcount]
		NdrPtrToConformant ArrayPointer;
		switch 
		{
			Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
				struct
				{
					[Property.FaxJobEntryCount = 0]
					while[UINT32(FrameData,FrameOffset) == 0X60]
					{
						[Property.FaxJobEntryCount = Property.FaxJobEntryCount + 1]
						FaxJobEntryExW JobEntryExW;
					}
					switch
					{
						case !(Property.FaxStatusPtr) > 0:
							struct
							{
								while[UINT32(FrameData,FrameOffset) == 0X78]
								{
									FaxJobStatusW FaxJobStatusW;
								}
								[Property.FaxJobUnicodeStringcount = 0]
								while[Property.FaxJobUnicodeStringcount  < Property.FaxJobEntryCount]
								{
									[Property.FaxJobUnicodeStringcount = Property.FaxJobUnicodeStringcount + 1]
									FaxJobEntryExWArrayUnicodeString JobEntryExWArrayUnicodeString;
								}
							}
								
						default:
							struct
							{
								[Property.FaxJobUnicodeStringcount = 0]
								while[Property.FaxJobUnicodeStringcount < Property.FaxJobEntryCount]
								{
									[Property.FaxJobUnicodeStringcount = Property.FaxJobUnicodeStringcount + 1]
									FaxJobEntryExWArrayUnicodeString JobEntryExWArrayUnicodeString;
									FaxJobStatusW JobStatusW;
									switch
									{
										Case Property.ExtendedStatus[Property.FaxJobUnicodeStringcount - 1] > 0:
										Case Property.TSid[Property.FaxJobUnicodeStringcount - 1] > 0:
										Case Property.CSid[Property.FaxJobUnicodeStringcount - 1] > 0:
										Case Property.DeviceName[Property.FaxJobUnicodeStringcount - 1] > 0:
										Case Property.CallerID[Property.FaxJobUnicodeStringcount - 1] > 0:
										Case Property.RoutingInfo[Property.FaxJobUnicodeStringcount - 1] > 0:
											FaxJobStatusWArrayUnicodeString FaxJobStatusWArrayUnicodeString;
									}
								}
							}
					}
				}
		}
}

Struct FaxDeviceStatus = FormatString("DeviceId: %s, JobType: %s, Status: %s, SubmittedTime: %s",DeviceId,FaxJobTypeTable( JobType, FALSE ),FaxDeviceStatusTable( Status,FALSE ),SubmittedTime.toString) 
{
	UINT32 SizeOfStruct;
	NdrPtr CallerIdPtr;
	NdrPtr CsidPtr;
	UINT32 CurrentPage;
	UINT32 DeviceId;
	NdrPtr DeviceNamePtr;
	NdrPtr DocumentNamePtr;
	UINT32 JobType = FaxJobTypeTable( this, TRUE );
	NdrPtr PhoneNumberPtr;
	NdrPtr RoutingStringPtr;
	NdrPtr SenderNamePtr;
	NdrPtr RecipientNamePtr;
	UINT32 Size;
	FILETIME StartTime;
	UINT32 Status = FaxDeviceStatusTable( this,TRUE );
	NdrPtr StatusStringPtr;
	FILETIME SubmittedTime;
	UINT32 TotalPages;
	NdrPtr TsidPtr;
	NdrPtr UserNamePtr;

	switch
	{
		case CallerIdPtr.ReferentID > 0:UnicodeString CallerId;
	}
	switch
	{
		case CsidPtr.ReferentID > 0:UnicodeString Csid;
	}
	switch
	{
		case DeviceNamePtr.ReferentID > 0:UnicodeString DeviceName;
	}
	switch
	{
		case DocumentNamePtr.ReferentID > 0:UnicodeString DocumentName;
	}
	switch
	{
		case PhoneNumberPtr.ReferentID > 0:UnicodeString PhoneNumber;
	}
	switch
	{
		case RoutingStringPtr.ReferentID > 0:UnicodeString RoutingString;
	}
	switch
	{
		case SenderNamePtr.ReferentID > 0:UnicodeString SenderName;
	}
	switch
	{
		case RecipientNamePtr.ReferentID > 0:UnicodeString RecipientName;
	}
	switch
	{
		case StatusStringPtr.ReferentID > 0:UnicodeString StatusString;
	}
	switch
	{
		case TsidPtr.ReferentID > 0:UnicodeString Tsid;
	}
	switch
	{
		case UserNamePtr.ReferentID > 0:UnicodeString UserName;
	}
}

Struct PFaxDeviceStatus = FormatString("%s",FaxDeviceStatus.toString)
{
	NdrPtrToConformant Pointer;
	Switch {
		Case Pointer.ReferentID > 0: FaxDeviceStatus FaxDeviceStatus;
	}
}

Struct FaxPortInfo = FormatString("DeviceId: %u, State: %s, Flags: %s, Priority: %u",DeviceId,FaxDeviceStatusTable( State,FALSE),Flags.toString,Priority)
{
	UINT32 SizeOfStruct;
	UINT32 DeviceId;
	UINT32 State = FaxDeviceStatusTable( this,TRUE );
	UINT32 Flags = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:			
			Struct
			{
				UINT32 FPFReceive:1 = FormatString("(%s) %s", this.ToBitString, this ? "The device can receive faxes" : "The device can NOT receive faxes");
				UINT32 FPFSend:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The device can send faxes" : "The device can NOT send faxes");
				UINT32 FPFVirtual:1 = FormatString("(%s) %s", this.ToBitString, this ? "The device is a virtual fax device" : "The device is NOT a virtual fax device");
				UINT32 Reserved:29 = FormatString("  (%s)", this.ToBitString); 
			}

			Default:
			Struct
			{
				UINT32 Reserved:29 = FormatString("  (%s)", this.ToBitString); 
				UINT32 FPFVirtual:1 = FormatString("(%s) %s", this.ToBitString, this ? "The device is a virtual fax device" : "The device is not a virtual fax device");
				UINT32 FPFSend:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The device can send faxes" : "The device cannot send faxes");
				UINT32 FPFReceive:1 = FormatString("(%s) %s", this.ToBitString, this ? "The device can receive faxes" : "The device cannot receive faxes");
			}			
		}
	}

	UINT32 Rings;
	UINT32 Priority;
	[property.DeviceName.AddToProperty(DeviceNamePtr.ReferentID, 0)]
	NdrPtr DeviceNamePtr;
	[property.TsidName.AddToProperty(TsidPtr.ReferentID, 0)]
	NdrPtr TsidPtr;
	[property.CsidName.AddToProperty(CsidPtr.ReferentID, 0)]
	NdrPtr CsidPtr;
}

Struct PFaxPortInfoArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	switch
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				FaxPortInfo FaxPortData;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.DeviceName[Local.Arraycount - 1] > 0:
						UnicodeString UserName;
				}
				switch
				{
					case property.TsidName[Local.Arraycount - 1] > 0:
					UnicodeString RecipientNumber;
				}
				switch
				{
					case property.CsidName[Local.Arraycount - 1] > 0:
						UnicodeString RecipientName;
				}
			}
		}
	}
}

Struct PFaxPortInfo = FormatString("DeviceId: %u, State: %s, Flags: %s, Priority: %u",DeviceId,FaxDeviceStatusTable( State,FALSE),Flags.toString,Priority)
{
	UINT32 SizeOfStruct;
	UINT32 DeviceId;
	UINT32 State = FaxDeviceStatusTable( this,TRUE );
	UINT32 Flags = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:			
			Struct
			{
				UINT32 FPFReceive:1 = FormatString("(%s) %s", this.ToBitString, this ? "The device can receive faxes" : "The device can NOT receive faxes");
				UINT32 FPFSend:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The device can send faxes" : "The device can NOT send faxes");
				UINT32 FPFVirtual:1 = FormatString("(%s) %s", this.ToBitString, this ? "The device is a virtual fax device" : "The device is NOT a virtual fax device");
				UINT32 Reserved:29 = FormatString("  (%s)", this.ToBitString); 
			}

			Default:
			Struct
			{
				UINT32 Reserved:29 = FormatString("  (%s)", this.ToBitString); 
				UINT32 FPFVirtual:1 = FormatString("(%s) %s", this.ToBitString, this ? "The device is a virtual fax device" : "The device is not a virtual fax device");
				UINT32 FPFSend:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The device can send faxes" : "The device cannot send faxes");
				UINT32 FPFReceive:1 = FormatString("(%s) %s", this.ToBitString, this ? "The device can receive faxes" : "The device cannot receive faxes");
			}			
		}
	}

	UINT32 Rings;
	UINT32 Priority;
	NdrPtr DeviceNamePtr;
	switch
				{
					case DeviceNamePtr.ReferentID > 0:
						UnicodeString DeviceName;
				}
	NdrPtr TsidPtr;
	switch
				{
					case TsidPtr.ReferentID > 0:
						UnicodeString Tsid;
				}
	NdrPtr CsidPtr;
	switch
				{
					case CsidPtr.ReferentID > 0:
						UnicodeString Csid;
				}
}

Struct FaxRoutingMethod = FormatString("DeviceId: %u, Enabled: %s",DeviceId,Enabled.toString)
{
	UINT32 SizeOfStruct;
	UINT32 DeviceId;
	BOOL Enabled;
	[property.DeviceName.AddToProperty(DeviceNamePtr.ReferentID, 0)]
	NdrPtr DeviceNamePtr;
	[property.Guid.AddToProperty(GuidPtr.ReferentID, 0)]
	NdrPtr GuidPtr;
	[property.FriendlyName.AddToProperty(FriendlyNamePtr.ReferentID, 0)]
	NdrPtr FriendlyNamePtr;
	[property.FunctionName.AddToProperty(FunctionNamePtr.ReferentID, 0)]
	NdrPtr FunctionNamePtr;
	[property.ExtensionImageName.AddToProperty(ExtensionImageNamePtr.ReferentID, 0)]
	NdrPtr ExtensionImageNamePtr;
	[property.ExtensionFriendlyName.AddToProperty(ExtensionFriendlyNamePtr.ReferentID, 0)]
	NdrPtr ExtensionFriendlyNamePtr;
}

Struct FaxRoutingMethodArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	switch
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				FaxRoutingMethod FaxRoutingInformation;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.DeviceName[Local.Arraycount - 1] > 0:
						UnicodeString DeviceName;
				}
				switch
				{
					case property.Guid[Local.Arraycount - 1] > 0:
						UnicodeString Guid;
				}
				switch
				{
					case property.FriendlyName[Local.Arraycount - 1] > 0:
						UnicodeString FriendlyName;
				}
				switch
				{
					case property.FunctionName[Local.Arraycount - 1] > 0:
						UnicodeString FunctionName;
				}
				switch
				{
					case property.ExtensionImageName[Local.Arraycount - 1] > 0:
						UnicodeString ExtensionImageName;
				}
				switch
				{
					case property.ExtensionFriendlyName[Local.Arraycount - 1] > 0:
						UnicodeString ExtensionFriendlyName;
				}
			}
		}
	}
}

Struct FaxGlobalRoutingInfo = FormatString("Priority: %u",Priority)
{
	UINT32 SizeOfStruct;
	UINT32 Priority;
	[property.Guid.AddToProperty(GuidPtr.ReferentID, 0)]
	NdrPtr GuidPtr;
	[property.FriendlyName.AddToProperty(FriendlyNamePtr.ReferentID, 0)]
	NdrPtr FriendlyNamePtr;
	[property.FunctionName.AddToProperty(FunctionNamePtr.ReferentID, 0)]
	NdrPtr FunctionNamePtr;
	[property.ExtensionImageName.AddToProperty(ExtensionImageNamePtr.ReferentID, 0)]
	NdrPtr ExtensionImageNamePtr;
	[property.ExtensionFriendlyName.AddToProperty(ExtensionFriendlyNamePtr.ReferentID, 0)]
	NdrPtr ExtensionFriendlyNamePtr;
}

Struct FaxGlobalRoutingInfoArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	switch
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				FaxGlobalRoutingInfo FaxGlobalRoutingInformation;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.Guid[Local.Arraycount - 1] > 0:
						UnicodeString Guid;
				}
				switch
				{
					case property.FriendlyName[Local.Arraycount - 1] > 0:
						UnicodeString FriendlyName;
				}
				switch
				{
					case property.FunctionName[Local.Arraycount - 1] > 0:
						UnicodeString FunctionName;
				}
				switch
				{
					case property.ExtensionImageName[Local.Arraycount - 1] > 0:
						UnicodeString ExtensionImageName;
				}
				switch
				{
					case property.ExtensionFriendlyName[Local.Arraycount - 1] > 0:
						UnicodeString ExtensionFriendlyName;
				}
			}
		}
	}
}

Struct PFaxGlobalRoutingInfoW
{
	NdrPtr Pointer;
	switch
	{
		case Pointer.ReferentID > 0:
		struct
		{
			FaxGlobalRoutingInfo FaxGlobalRoutingInformation;
			switch
			{
				case FaxGlobalRoutingInformation.GuidPtr.ReferentID > 0:
					NdrWideString Guid;
			}
			switch
			{
				case FaxGlobalRoutingInformation.FriendlyNamePtr.ReferentID > 0:
					NdrWideString FriendlyName;
			}
			switch
			{
				case FaxGlobalRoutingInformation.FunctionNamePtr.ReferentID > 0:
					NdrWideString FunctionName;
			}
			switch
			{
				case FaxGlobalRoutingInformation.ExtensionImageNamePtr.ReferentID > 0:
					NdrWideString ExtensionImageName;
			}
			switch
			{
				case FaxGlobalRoutingInformation.ExtensionFriendlyNamePtr.ReferentID > 0:
					NdrWideString ExtensionFriendlyName;
			}
		}
	}
}

Struct FaxTime = FormatString("%u:%u",Hour,Minute) {
	UINT16 Hour;
	UINT16 Minute;
}

Struct FaxConfigurationW = FormatString("Retries: %u, Branding: %s, UseDeviceTsid: %s, ServerCp: %s",Retries,FaxConfigurationWBranding,FaxConfigurationWUseDeviceTsid,FaxConfigurationWServerCp)
{
	UINT32 SizeOfStruct = FormatString("Size of Structure in bytes: %u",SizeOfStruct);
	UINT32 Retries;
	UINT32 RetryDelay;
	UINT32 DirtyDays;
	[FaxConfigurationWBranding = FormatString("%s",Branding?"TRUE":"FALSE")]
	BOOL Branding = FormatString("%s",Branding?"TRUE - The fax server should generate a brand":"FALSE - The fax server should NOT generate a brand");
	[FaxConfigurationWUseDeviceTsid = FormatString("%s",UseDeviceTsid?"TRUE":"FALSE")]
	BOOL UseDeviceTsid = FormatString("%s",UseDeviceTsid?"TRUE - The Server uses the device's transmitting station identifier":"FALSE - The Server does NOT use the device's transmitting station identifier");
	[FaxConfigurationWServerCp = FormatString("%s",ServerCp?"TRUE":"FALSE")]
	BOOL ServerCp = FormatString("%s",ServerCp?"TRUE - The Client must use a common cover page":"FALSE - The Client can use a personal cover page file");
	BOOL PauseServerQueue = FormatString("%s",PauseServerQueue?"TRUE - The queue has been paused":"FALSE - The fax job is continued");
	FaxTime StartCheapTime;
	FaxTime StopCheapTime;
	BOOL ArchiveOutgoingFaxes = FormatString("%s",ArchiveOutgoingFaxes?"TRUE - The server archives outgoing transmissions in the directory":"FALSE - The server does NOT archive outgoing transmissions");
	NdrPtr ArchiveDirectoryOffset;
	NdrPtr ReservedOffset;
	switch
	{
		case ArchiveDirectoryOffset.ReferentID > 0:UnicodeString ArchiveDirectory;
	}
	switch
	{
		case ReservedOffset.ReferentID > 0: UnicodeString Reserved;
	}
}

Struct PFaxConfigurationW = FormatString("%s",FaxConfigurationW.toString)
{
	NdrPtrToConformant Pointer;
	switch 
	{
		case Pointer.ReferentID > 0: FaxConfigurationW FaxConfigurationW;
	}
}

Struct FaxLogCategory = FormatString("Category: %s, Level: %s",FaxLogCategoryTable( Category,FALSE),FaxLogCategoryLevelTable( Level,FALSE))
{
	[property.LogCategoryName.AddToProperty(LogCategoryNamePtr.ReferentID, 0)]
	NdrPtr LogCategoryNamePtr;
	UINT32 Category = FaxLogCategoryTable( this,TRUE );
	UINT32 Level = FaxLogCategoryLevelTable( this,TRUE );
}

Struct FaxLogCategoryArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	switch
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				FaxLogCategory FaxLogCategory;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.LogCategoryName[Local.Arraycount - 1] > 0:
						UnicodeString AccountNameOffset;
				}
			}
		}
	}
}

Struct FaxCoverpageInfoExW = FormatString("CoverPageFormat: %u, ServerBased: %s",CoverPageFormat,FaxCoverageServerBased )
{
	UINT32 SizeOfStruct;
	UINT32 CoverPageFormat;
	NdrPtr CoverPageFileNamePtr;
	switch
	{
		case CoverPageFileNamePtr.ReferentID > 0:UnicodeString CoverPageFileName;
	}
	[FaxCoverageServerBased = FormatString("%s",ServerBased?"TRUE":"FALSE")]
	BOOL ServerBased = FormatString("%s",ServerBased?"TRUE - CoverPageFileName specifies a server based cover page":"FALSE - CoverPageFileName specifies a personal cover page");
	NdrPtr NotePtr;
	switch
	{
		case NotePtr.ReferentID > 0:UnicodeString Note;
	}
	NdrPtr SubjectPtr;
	switch
	{
		case SubjectPtr.ReferentID > 0:UnicodeString Subject;
	}
}

Struct FaxPersonalProfileWHead = FormatString("Size of Struct in bytes: %u",SizeOfStruct)
{
	UINT32 SizeOfStruct;
	[property.Name.AddToProperty(NameOffset.ReferentID, 0)]
	NdrPtr NameOffset;
	[property.FaxNumber.AddToProperty(FaxNumberOffset.ReferentID, 0)]
	NdrPtr FaxNumberOffset;
	[property.Company.AddToProperty(CompanyOffset.ReferentID, 0)]
	NdrPtr CompanyOffset;
	[property.StreetAddress.AddToProperty(StreetAddressOffset.ReferentID, 0)]
	NdrPtr StreetAddressOffset;
	[property.City.AddToProperty(CityOffset.ReferentID, 0)]
	NdrPtr CityOffset;
	[property.State.AddToProperty(StateOffset.ReferentID, 0)]
	NdrPtr StateOffset;
	[property.Zip.AddToProperty(ZipOffset.ReferentID, 0)]
	NdrPtr ZipOffset;
	[property.Country.AddToProperty(CountryOffset.ReferentID, 0)]
	NdrPtr CountryOffset;
	[property.Title.AddToProperty(TitleOffset.ReferentID, 0)]
	NdrPtr TitleOffset;
	[property.Department.AddToProperty(DepartmentOffset.ReferentID, 0)]
	NdrPtr DepartmentOffset;
	[property.OfficeLocation.AddToProperty(OfficeLocationOffset.ReferentID, 0)]
	NdrPtr OfficeLocationOffset;
	[property.HomePhone.AddToProperty(HomePhoneOffset.ReferentID, 0)]
	NdrPtr HomePhoneOffset;
	[property.OfficePhone.AddToProperty(OfficePhoneOffset.ReferentID, 0)]
	NdrPtr OfficePhoneOffset;
	[property.Email.AddToProperty(EmailOffset.ReferentID, 0)]
	NdrPtr EmailOffset;
	[property.BillingCode.AddToProperty(BillingCodeOffset.ReferentID, 0)]
	NdrPtr BillingCodeOffset;
	[property.StationIdentifier.AddToProperty(StationIdentifierOffset.ReferentID, 0)]
	NdrPtr StationIdentifierOffset;
}

Struct FaxPersonalProfileWUnicodeStrings
{
	switch
	{
	case property.Name[0] > 0:
		UnicodeString Name;
	}
	switch
	{
	case property.FaxNumber[0] > 0:
		UnicodeString FaxNumber;
	}
	switch
	{
	case property.Company[0] > 0:
		UnicodeString Company;
	}
	switch
	{
	case property.StreetAddress[0] > 0:
		UnicodeString StreetAddress;
	}
	switch
	{
	case property.City[0] > 0:
		UnicodeString City;
	}
	switch
	{
	case property.State[0] > 0:
		UnicodeString State;
	}
	switch
	{
	case property.Zip[0] > 0:
		UnicodeString Zip;
	}
	switch
	{
	case property.Country[0] > 0:
		UnicodeString Country;
	}
	switch
	{
	case property.Title[0] > 0:
		UnicodeString Title;
	}
	switch
	{
	case property.Department[0] > 0:
		UnicodeString Department;
	}
	switch
	{
	case property.OfficeLocation[0] > 0:
		UnicodeString OfficeLocation;
	}
	switch
	{
	case property.HomePhone[0] > 0:
		UnicodeString HomePhone;
	}
	switch
	{
	case property.OfficePhone[0] > 0:
		UnicodeString OfficePhone;
	}
	switch
	{
	case property.Email[0] > 0:
		UnicodeString Email;
	}
	switch
	{
	case property.BillingCode[0] > 0:
		UnicodeString BillingCode;
	}
	switch
	{
	case property.StationIdentifier[0] > 0:
		UnicodeString StationIdentifier;
	}
}

Struct FaxPersonalProfileW
{
	FaxPersonalProfileWHead FaxPersonalProfileW;
	FaxPersonalProfileWUnicodeStrings FaxPersonalProfileWStrings;
}

Struct FaxPersonalProfileWArray
{
	NdrConformant MaxCount;
	switch
	{
		case MaxCount.MaxCount > 0:
		struct
		{
			[MaxLoopcount = MaxCount.MaxCount]
			while [true]
			{
				FaxPersonalProfileWHead FaxPersonalProfileW;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < MaxCount.MaxCount]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.Name[Local.Arraycount - 1] > 0:
						UnicodeString Name;
				}
				switch
				{
					case property.FaxNumber[Local.Arraycount - 1] > 0:
						UnicodeString FaxNumber;
				}
				switch
				{
					case property.Company[Local.Arraycount - 1] > 0:
						UnicodeString Company;
				}
				switch
				{
					case property.StreetAddress[Local.Arraycount - 1] > 0:
						UnicodeString StreetAddress;
				}
				switch
				{
					case property.City[Local.Arraycount - 1] > 0:
						UnicodeString City;
				}
				switch
				{
					case property.State[Local.Arraycount - 1] > 0:
						UnicodeString State;
				}
				switch
				{
					case property.Zip[Local.Arraycount - 1] > 0:
						UnicodeString Zip;
				}
				switch
				{
					case property.Country[Local.Arraycount - 1] > 0:
						UnicodeString Country;
				}
				switch
				{
					case property.Title[Local.Arraycount - 1] > 0:
						UnicodeString Title;
				}
				switch
				{
					case property.Department[Local.Arraycount - 1] > 0:
						UnicodeString Department;
				}
				switch
				{
					case property.OfficeLocation[Local.Arraycount - 1] > 0:
						UnicodeString OfficeLocation;
				}
				switch
				{
					case property.HomePhone[Local.Arraycount - 1] > 0:
						UnicodeString HomePhone;
				}
				switch
				{
					case property.OfficePhone[Local.Arraycount - 1] > 0:
						UnicodeString OfficePhone;
				}
				switch
				{
					case property.Email[Local.Arraycount - 1] > 0:
						UnicodeString Email;
				}
				switch
				{
					case property.BillingCode[Local.Arraycount - 1] > 0:
						UnicodeString BillingCode;
				}
				switch
				{
					case property.StationIdentifier[Local.Arraycount - 1] > 0:
						UnicodeString StationIdentifier;
				}
			}
		}
	}	
}

Struct FaxJobParamExW = FormatString("Schedule: %s, Priority: %s",Schedule.toString,FaxPriorityTypeTable( Priority.value,FALSE))
{
	UINT32 SizeOfStruct;
	UINT32 ScheduleAction = FaxScheduledActionTable( this );
	SystemTime Schedule;
	UINT32 ReceiptDeliveryType
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
			Struct
			{
				//UINT32 DRTNone:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Do NOT send a receipt" : "Send a receipt");
				UINT32 DRTEmail:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Send the receipt by e-mail" : "Do NOT send the receipt by e-mail");
				UINT32 Unused1:1 = FormatString("     (%s)", this.ToBitString);
				UINT32 DRTMsgBox:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Notify on the transmission result using a message box to the sending user's machine" : "Do NOT notify on the transmission result using a message box to the sending user's machine");
				UINT32 DRTGrpParent:1 = FormatString("(%s) %s", this.ToBitString, this ? "The format of the receipt is dependent on the delivery method" : "The format of the receipt is NOT dependent on the delivery method");
				UINT32 DRTAttachFax:1 = FormatString("(%s) %s", this.ToBitString, this ? "Attach the fax Tagged Image File Format (TIFF) file to the receipt" : "Do NOT attach the fax Tagged Image File Format (TIFF) file to the receipt");
				UINT32 Unused2:27 = FormatString("     (%s)", this.ToBitString);				
			}

			Default:
			Struct
			{
				UINT32 Unused2:27 = FormatString("     (%s)", this.ToBitString);
				UINT32 DRTAttachFax:1 = FormatString("(%s) %s", this.ToBitString, this ? "Attach the fax Tagged Image File Format (TIFF) file to the receipt" : "Do NOT attach the fax Tagged Image File Format (TIFF) file to the receipt");
				UINT32 DRTGrpParent:1 = FormatString("(%s) %s", this.ToBitString, this ? "The format of the receipt is dependent on the delivery method" : "The format of the receipt is NOT dependent on the delivery method");
				UINT32 DRTMsgBox:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Notify on the transmission result using a message box to the sending user's machine" : "Do NOT notify on the transmission result using a message box to the sending user's machine");
				UINT32 Unused1:1 = FormatString("     (%s)", this.ToBitString);
				UINT32 DRTEmail:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Send the receipt by e-mail" : "Do NOT send the receipt by e-mail");
				//UINT32 DRTNone:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Do NOT send a receipt" : "Send a receipt");
			}
		}		
		
	}
	NdrPtr ReceiptDeliveryAddressOffset;
	NdrEnum Priority = FaxPriorityTypeTable( this.value,TRUE );
	UINT32 Call;
	UINT32 NotUsed[4];
	NdrPtr DocumentNameOffset;
	UINT32 PageCount;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
	switch
	{
		case ReceiptDeliveryAddressOffset.ReferentID > 0:UnicodeString ReceiptDeliveryAddress;
	}
	switch
	{
		case DocumentNameOffset.ReferentID > 0:UnicodeString DocumentName;
	}
}
Struct FaxReceiptsConfigW = FormatString("AllowedReceipts: %s, SMTPAuthOption: %s, SMTPPort: %u",AllowedReceipts.toString,FaxEnumSMTPAuthOptionsTable (SMTPAuthOption,FALSE),SMTPPort)
{
	UINT32 SizeOfStruct;
	UINT32 AllowedReceipts
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
			Struct
			{
				//UINT32 DRTNone:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Do NOT send a receipt" : "Send a receipt");
				UINT32 DRTEmail:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Send the receipt by e-mail" : "Do NOT send the receipt by e-mail");
				UINT32 Unused1:1 = FormatString("     (%s)", this.ToBitString);
				UINT32 DRTMsgBox:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Notify on the transmission result using a message box to the sending user's machine" : "Do NOT notify on the transmission result using a message box to the sending user's machine");
				UINT32 DRTGrpParent:1 = FormatString("(%s) %s", this.ToBitString, this ? "The format of the receipt is dependent on the delivery method" : "The format of the receipt is NOT dependent on the delivery method");
				UINT32 DRTAttachFax:1 = FormatString("(%s) %s", this.ToBitString, this ? "Attach the fax Tagged Image File Format (TIFF) file to the receipt" : "Do NOT attach the fax Tagged Image File Format (TIFF) file to the receipt");
				UINT32 Unused2:27 = FormatString("     (%s)", this.ToBitString);
			}

			Default:
			Struct
			{
				UINT32 Unused2:27 = FormatString("     (%s)", this.ToBitString);
				UINT32 DRTAttachFax:1 = FormatString("(%s) %s", this.ToBitString, this ? "Attach the fax Tagged Image File Format (TIFF) file to the receipt" : "Do NOT attach the fax Tagged Image File Format (TIFF) file to the receipt");
				UINT32 DRTGrpParent:1 = FormatString("(%s) %s", this.ToBitString, this ? "The format of the receipt is dependent on the delivery method" : "The format of the receipt is NOT dependent on the delivery method");
				UINT32 DRTMsgBox:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Notify on the transmission result using a message box to the sending user's machine" : "Do NOT notify on the transmission result using a message box to the sending user's machine");
				UINT32 Unused1:1 = FormatString("     (%s)", this.ToBitString);
				UINT32 DRTEmail:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Send the receipt by e-mail" : "Do NOT send the receipt by e-mail");
				//UINT32 DRTNone:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Do NOT send a receipt" : "Send a receipt");
			}			
		}
	}
	NdrEnum SMTPAuthOption = FaxEnumSMTPAuthOptionsTable (this.value,TRUE);
	NdrPtr ReservedOffset;
	NdrPtr SMTPServerOffset;
	UINT32 SMTPPort;
	NdrPtr SMTPFromOffset;
	NdrPtr SMTPUserNameOffset;
	NdrPtr SMTPPasswordOffset;
	BOOL	ToUseForMSRouteThroughEmailMethod;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
	switch
	{
		case ReservedOffset.ReferentID > 0:UnicodeString Reserved;
	}
	switch
	{
		case SMTPServerOffset.ReferentID > 0:UnicodeString SMTPServer;
	}
	switch
	{
		case SMTPFromOffset.ReferentID > 0:UnicodeString SMTPFrom;
	}
	switch
	{
		case SMTPUserNameOffset.ReferentID > 0:UnicodeString SMTPUserName;
	}
	switch
	{
		case SMTPPasswordOffset.ReferentID > 0:UnicodeString SMTPPassword;
	}
}

Struct PFaxReceiptsConfigW = FormatString("%s",ReceiptsConfiguration.toString)
{
	NdrPtrToConformant Pointer;
	switch 
	{
		case Pointer.ReferentID > 0: FaxReceiptsConfigW ReceiptsConfiguration;
	}
}

Struct FaxVersion = FormatString("Version: %u.%u, BuildNumber: %u.%u",MajorVersion,MinorVersion,MajorBuildNumber,MinorBuildNumber)
{
	UINT32 SizeOfStruct;
	BOOL VersionValid;
	UINT16 MajorVersion;
	UINT16 MinorVersion;
	UINT16 MajorBuildNumber;
	UINT16 MinorBuildNumber;
	UINT32 Flags = FaxServerVersionFlagsTable( this );
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

Struct FaxOutboxConfig = FormatString("AllowPersonalCP: %s, UseDeviceTSID: %s, Retries: %u, Branding: %s",FaxAllowPersonalCP,FaxUseDeviceTSID,Retries,Branding.toString)
{
	UINT32 SizeOfStruct;
	[FaxAllowPersonalCP = FormatString("%s",this?"TRUE":"FALSE")]
	BOOL AllowPersonalCP = FormatString("%s",this?"TRUE - The client expects to provide a personal cover page file":"FALSE - The client expects to use a common cover page stored on the fax server");
	[FaxUseDeviceTSID = FormatString("%s",this?"TRUE":"FALSE")]
	BOOL UseDeviceTSID = FormatString("%s",this?"TRUE - The server is expected to uses the device's TSID":"FALSE - The server is expected to use the value specified when submitting a new job");
	UINT32 Retries;
	UINT32 RetryDelay;
	FaxTime DiscountStart;
	FaxTime DiscountEnd;
	UINT32 AgeLimit;
	BOOL Branding;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

Struct PFaxOutboxConfig = FormatString("%s",OutboxConfiguration.toString)
{
	NdrPtrToConformant Pointer;
	switch 
	{ 
		case Pointer.ReferentID > 0: FaxOutboxConfig OutboxConfiguration;
	}
}

Struct FaxArchiveConfigW = FormatString("UseArchive: %s, SizeQuotaWarning: %s, AgeLimit: %u, ArchiveSize: %u",UseArchive.toString, SizeQuotaWarning.toString, AgeLimit, ArchiveSize)
{
	UINT32 SizeOfStruct;
	BOOL UseArchive;
	UINT32 FolderOffset;
	BOOL SizeQuotaWarning;
	UINT32 SizeQuotaHighWatermark;
	UINT32 SizeQuotaLowWatermark;
	UINT32 AgeLimit;
	UINT64 ArchiveSize;
}

Struct PFaxArchiveConfigW = FormatString("%s",ArchiveConfiguration.toString)
{
	NdrPtrToConformant Pointer;
	switch 
	{
		case Pointer.ReferentID > 0: FaxArchiveConfigW ArchiveConfiguration;
	}
}

Struct FaxActivityLoggingConfigW = FormatString("LogIncoming: %s, LogOutgoing: %s",LogIncoming.toString,LogOutgoing.toString)
{
	UINT32 SizeOfStruct;
	BOOL LogIncoming;
	BOOL LogOutgoing;
	NdrPtr DBPathOffset;

	switch
	{
		case DBPathOffset.ReferentID > 0:UnicodeString DBPath;
	}
}

Struct PFaxActivityLoggingConfigW = FormatString("%s",ActivityLoggingConfiguration.toString)
{
	NdrPtrToConformant Pointer;
	switch 
	{
		case Pointer.ReferentID > 0: FaxActivityLoggingConfigW ActivityLoggingConfiguration;
	}
}

Struct FaxPortInfoW = FormatString("DeviceID: %u, Send: %s, Rings: %u",DeviceID,Send.toString,Rings)
{
	UINT32 SizeOfStruct;
	UINT32 DeviceID;
	NdrPtr DeviceNameOffset;
	NdrPtr DescriptionOffset;
	NdrPtr ProviderNameOffset;
	NdrPtr ProviderGUIDOffset;
	BOOL Send;
	NdrEnum ReceiveMode = FaxEnumDeviceReceiveModeTable( this.value );
	Align4 pad;
	UINT32 Status = FaxEnumDeviceStatusTable( this );
	UINT32 Rings;
	NdrPtr CSidOffset;
	NdrPtr TSidOffset;
	Switch {
		Case DeviceNameOffset.ReferentID > 0: NdrWideString DeviceName;
	}

	Switch {
		Case DescriptionOffset.ReferentID > 0: NdrWideString DescriptionName;
	}

	Switch {
		Case ProviderNameOffset.ReferentID > 0: NdrWideString ProviderName;
	}

	Switch {
		Case ProviderGUIDOffset.ReferentID > 0: NdrWideString ProviderGUID;
	}

	Switch {
		Case CSidOffset.ReferentID > 0: NdrWideString CSid;
	}

	Switch {
		Case TSidOffset.ReferentID > 0: NdrWideString TSid;
	}
}

Struct FaxPortInfoWHead = FormatString("DeviceID: %u, Send: %s, Rings: %u",DeviceID,Send.toString,Rings)
{
	UINT32 SizeOfStruct;
	UINT32 DeviceID;
	[property.DeviceName.AddToProperty(DeviceNameOffset.ReferentID, 0)]
	NdrPtr DeviceNameOffset;
	[property.Description.AddToProperty(DescriptionOffset.ReferentID, 0)]
	NdrPtr DescriptionOffset;
	[property.ProviderName.AddToProperty(ProviderNameOffset.ReferentID, 0)]
	NdrPtr ProviderNameOffset;
	[property.ProviderGUID.AddToProperty(ProviderGUIDOffset.ReferentID, 0)]
	NdrPtr ProviderGUIDOffset;
	BOOL Send;
	NdrEnum ReceiveMode = FaxEnumDeviceReceiveModeTable( this.value );
	Align4 pad;
	UINT32 Status = FaxEnumDeviceStatusTable( this );
	UINT32 Rings;
	[property.CSid.AddToProperty(CSidOffset.ReferentID, 0)]
	NdrPtr CSidOffset;
	[property.TSid.AddToProperty(TSidOffset.ReferentID, 0)]
	NdrPtr TSidOffset;
}

Struct PFaxPortInfoW(count) = FormatString("%s",PortInfoExW.toString)
{
	NdrPtrToConformant Pointer;
	switch
	{
		case Pointer.ReferentID > 0 && Pointer.Maxcount > 0:
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				FaxPortInfoWHead PortInfoExW;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.DeviceName[Local.Arraycount - 1] > 0:
						UnicodeString DeviceName;
				}
				switch
				{
					case property.Description[Local.Arraycount - 1] > 0:
						UnicodeString Description;
				}
				switch
				{
					case property.ProviderName[Local.Arraycount - 1] > 0:
						UnicodeString ProviderName;
				}
				switch
				{
					case property.ProviderGUID[Local.Arraycount - 1] > 0:
						UnicodeString ProviderGUID;
				}
				switch
				{
					case property.CSid[Local.Arraycount - 1] > 0:
						UnicodeString CSid;
				}
				switch
				{
					case property.TSid[Local.Arraycount - 1] > 0:
						UnicodeString TSid;
				}
			}
		}
	}
}

Struct RPCFaxOutboundRoutingGroupW = FormatString("NumDevices: %u, GroupName: %s",NumDevices,GroupName.toString)
{
	UINT32 SizeOfStruct;
	NdrPTr GroupNameOffset;
	UINT32 NumDevices;
	NdrPtr ptrDevices;
	NdrEnum Status = FaxEnumGroupStatusTable( this.value );
	switch
	{
		case GroupNameOffset.ReferentID > 0:NdrWideString GroupName;
	}
	switch
	{
		case ptrDevices.ReferentID:
		_struct
		{
			NdrConformant Count;
			UINT32 DeviceId[NumDevices];
		}
	}
}

Struct RPCFaxOutboundRoutingGroup = FormatString("Status: %s",Status.toString)
{
	UINT32 SizeOfStruct;
	[property.GroupName.AddToProperty(GroupNameOffset.ReferentID, 0)]
	NdrPtr GroupNameOffset;
	UINT32 NumDevices;
	[property.Devices.AddToProperty(DevicesOffset.ReferentID, 0)]
	NdrPtr DevicesOffset;
	NdrEnum Status = FaxEnumGroupStatusTable( this.value );
}

Struct FaxRPCFaxOutboundRoutingGroupArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	switch
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				RPCFaxOutboundRoutingGroup FaxOutboundingGroup;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.GroupName[Local.Arraycount - 1] > 0:
						NdrWideString GroupName;
				}
				switch
				{
					case property.Devices[Local.Arraycount - 1] > 0:
					struct
					{
						NdrConformant Maxcount;
						UINT32 Devices[Maxcount.Maxcount];
					}
				}
			}
		}
	}
}


table FaxEnumRuleStatusTable(value)
{
	switch(value)
	{
		case 0: "FAX_RULE_STATUS_VALID";
		case 1: "FAX_RULE_STATUS_EMPTY_GROUP";
		case 2: "FAX_RULE_STATUS_ALL_GROUP_DEV_NOT_VALID";
		case 3: "FAX_RULE_STATUS_SOME_GROUP_DEV_NOT_VALID";
		case 4: "FAX_RULE_STATUS_BAD_DEVICE";
		default:
			"Unknown value";
	}
}

Struct RPCFaxOutboundRoutingRuleSingle = FormatString("AreaCode: %u, CountryCode: %u, %s, UseGroup: %s",AreaCode,CountryCode,FaxOutboundRoutingDestination,FaxOutboundRoutingUseGroup)
{
	UINT32 SizeOfStruct;
	UINT32 AreaCode;
	UINT32 CountryCode;
	NdrPtr CountryNameOffset;
	Int32 UseGroup;
	switch
	{
		case Property.MSRPCNdr64: NdrAlign Pad2;
	}
	switch(UseGroup)
	{
		case false: UINT32 DeviceId;
		default: NdrPtr GroupNameOffset;
	}
	//UINT32 Status = FaxEnumRuleStatusTable(this);
	[FaxOutboundRoutingUseGroup = FormatString("%s",this?"TRUE":"FALSE")]
	BOOL UseGroupc = FormatString("%s",this?"TRUE - The group is used as the rule's destination":"FALSE - The device is used as the rule's destination");
	switch
	{
		case CountryNameOffset.ReferentID > 0:NdrWideString CountryName;
	}
	_struct FaxRuleDestination
	{
		switch(RPCFaxOutboundRoutingRuleSingle.UseGroup)
		{
			case 0:[FaxOutboundRoutingDestination="DeviceId: "+RPCFaxOutboundRoutingRuleSingle.DeviceId] _struct dummy678969{}
			Default:
				switch
				{
					case RPCFaxOutboundRoutingRuleSingle.GroupNameOffset.ReferentID > 0:
						[FaxOutboundRoutingDestination="GroupName: "+GroupName.toString]
						NdrWideString GroupName;
				}
		}
	}
}

Struct RPCFaxOutboundRoutingRuleHead = FormatString("AreaCode: %u, CountryCode: %u, UseGroup: %s",AreaCode,CountryCode,FaxOutboundRoutingUseGroup)
{
	UINT32 SizeOfStruct;
	UINT32 AreaCode;
	UINT32 CountryCode;
	[property.CountryName.AddToProperty(CountryNameOffset.ReferentID, 0)]
	NdrPtr CountryNameOffset;
	Int32 UseGroup;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad2;
	}
	switch(UseGroup)
	{
		case 0: UINT32 DeviceId;
		default: 
		[property.GroupName.AddToProperty(GroupNameOffset.ReferentID, 0)]
		NdrPtr GroupNameOffset;
	}
	[FaxOutboundRoutingUseGroup = FormatString("%s",this?"TRUE":"FALSE")]
	BOOL UseGroupc = FormatString("%s",this?"TRUE - The group is used as the rule's destination":"FALSE - The device is used as the rule's destination");
	//UINT32 Status = FaxEnumRuleStatusTable(this);
}

struct RPCFaxOutboundRoutingRuleW(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	Switch
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				RPCFaxOutboundRoutingRuleHead FaxOutboundRoutingRule;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.CountryName[Local.Arraycount - 1] > 0:
						NdrWideString CountryName;
				}
				switch
				{
					case property.GroupName[Local.Arraycount - 1] > 0:
						NdrWideString GroupName;
				}
			}
		}
	}
}

Struct FaxTAPILineCountryEntryW = FormatString("CountryID: %u, CountryCode: %u",CountryID,CountryCode)
{
	UINT32 CountryID;
	UINT32 CountryCode;
	[property.CountryName.AddToProperty(CountryNamePtr.ReferentID, 0)]
	NdrPtr CountryNamePtr;
	[property.LongDistanceRule.AddToProperty(LongDistanceRulePtr.ReferentID, 0)]
	NdrPtr LongDistanceRulePtr;
}

Struct FaxTAPILineCountryListW = FormatString("NumCountries: %u",NumCountries)
{
	UINT32 NumCountries;
	NdrPtr LineCountryEntriesPtr;
	switch
	{
		case LineCountryEntriesPtr.ReferentID > 0:
		struct
		{
			[MaxLoopcount = NumCountries]
			while [true]
			{
				FaxTAPILineCountryEntryW FaxCountryEntries;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < NumCountries]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.CountryName[Local.Arraycount - 1] > 0:
						UnicodeString CountryName;
				}
				switch
				{
					case property.LongDistanceRule[Local.Arraycount - 1] > 0:
						UnicodeString LongDistanceRule;
				}
			}
		}
	}
}

Struct PFaxTAPILineCountryListW = FormatString("%s",LineCountryListW.toString)
{
	NdrPtrToConformant Pointer;
	Switch
	{
		Case Pointer.ReferentID > 0: FaxTAPILineCountryListW LineCountryListW; 
	}
}

Struct FaxDeviceProviderInfo = FormatString("Capabilities: %s, Status: %s, %s, LastError: %u",Capabilities.toString,FaxEnumProviderStatusTable( Status,FALSE),FaxVersion.toString,LastError)
{
	UINT32 SizeOfStruct;
	[property.FriendlyName.AddToProperty(FriendlyNameOffset.ReferentID, 0)]
	NdrPtr FriendlyNameOffset;
	[property.ImageName.AddToProperty(ImageNameOffset.ReferentID, 0)]
	NdrPtr ImageNameOffset;
	[property.ProviderName.AddToProperty(ProviderNameOffset.ReferentID, 0)]
	NdrPtr ProviderNameOffset;
	[property.GUID.AddToProperty(GUIDOffset.ReferentID, 0)]
	NdrPtr GUIDOffset;
	UINT32 Capabilities = MustBeSetToTable(this,"0");
	FaxVersion FaxVersion;
	NdrEnum Status = FaxEnumProviderStatusTable( this.value,TRUE );
	Align4 Pad;
	UINT32 LastError;
}

Struct PFaxDeviceProviderInfoArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	Switch
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				FaxDeviceProviderInfo FaxDeviceProviderInformation;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.FriendlyName[Local.Arraycount - 1] > 0:
						UnicodeString FriendlyName;
				}
				switch
				{
					case property.ImageName[Local.Arraycount - 1] > 0:
						UnicodeString ImageName;
				}
				switch
				{
					case property.ProviderName[Local.Arraycount - 1] > 0:
						UnicodeString ProviderName;
				}
				switch
				{
					case property.GUID[Local.Arraycount - 1] > 0:
						UnicodeString GUID;
				}
			}
		}
	}
}

Struct FaxMessage = FormatString("ValidityMask: %s, MessageId: %u, BroadcastId: %u, JobType: %s, QueueStatus: %s",ValidityMask.toString, MessageId, BroadcastId, FaxJobTypeTable( JobType, FALSE ),QueueStatus.toString)
{
	UINT32 SizeOfStruct;
	FaxJobValidityMask ValidityMask;
	UINT64 MessageId;
	UINT64 BroadcastId;
	UINT32 JobType = FaxJobTypeTable( this, TRUE );
	FaxQueueStatus QueueStatus;
	UINT32 ExtendedStatus = FaxExtendedQueueStatusTable( this );
	[property.ExtendedStatus.AddToProperty(ExtendedStatusOffset.ReferentID, 0)]
	NdrPtr ExtendedStatusOffset;
	UINT32 Size;
	UINT32 PageCount;
	[property.RecipientNumber.AddToProperty(RecipientNumberOffset.ReferentID, 0)]
	NdrPtr RecipientNumberOffset;
	[property.RecipientName.AddToProperty(RecipientNameOffset.ReferentID, 0)]
	NdrPtr RecipientNameOffset;
	[property.SenderNumber.AddToProperty(SenderNumberOffset.ReferentID, 0)]
	NdrPtr SenderNumberOffset;
	[property.SenderName.AddToProperty(SenderNameOffset.ReferentID, 0)]
	NdrPtr SenderNameOffset;
	[property.Tsid.AddToProperty(TsidOffset.ReferentID, 0)]
	NdrPtr TsidOffset;
	[property.Csid.AddToProperty(CsidOffset.ReferentID, 0)]
	NdrPtr CsidOffset;
	[property.SenderUserName.AddToProperty(SenderUserNameOffset.ReferentID, 0)]
	NdrPtr SenderUserNameOffset;
	[property.BillingCode.AddToProperty(BillingCodeOffset.ReferentID, 0)]
	NdrPtr BillingCodeOffset;
	SystemTime OriginalScheduleTime;
	SystemTime SubmissionTime;
	SystemTime TransmissionStartTime;
	SystemTime TransmissionEndTime;
	[property.DeviceName.AddToProperty(DeviceNameOffset.ReferentID, 0)]
	NdrPtr DeviceNameOffset;
	NdrEnum Priority = FaxPriorityTypeTable( this.value,TRUE );
	Align4 Pad;
	UINT32 Retries;
	[property.DocumentName.AddToProperty(DocumentNameOffset.ReferentID, 0)]
	NdrPtr DocumentNameOffset;
	[property.Subject.AddToProperty(SubjectOffset.ReferentID, 0)]
	NdrPtr SubjectOffset;
	[property.CallerID.AddToProperty(CallerIDOffset.ReferentID, 0)]
	NdrPtr CallerIDOffset;
	[property.RoutingInfo.AddToProperty(RoutingInfoOffset.ReferentID, 0)]
	NdrPtr RoutingInfoOffset;
	BOOL HasCoverPage;
	UINT32  ReceiptType = FaxMessage1ReceiptTypeTable(this);
	[property.ReceiptAddress.AddToProperty(ReceiptAddressOffset.ReferentID, 0)]
	NdrPtr ReceiptAddressOffset;
	BOOL ServerReceiveFolder = this? "Sent to the server receive folder": "Sent to the appropriate account";
	switch(property.MSRPCByteOrder)
	{
		case LittleEndian:
		struct
		{
			UINT32 MsgFlag = FormatString("0X%08x", this)
			{
				UINT32 Read:1 = FormatString("    (%s) %s", this.ToBitString, this? "Marked as read": "Marked as unread");
				UINT32 Reserved:31 = FormatString("(%s)", this.ToBitString);
			}
		}
		default:
		struct
		{
			UINT32 MsgFlag = FormatString("0X%08x", this)
			{
				UINT32 Reserved:31 = FormatString("(%s)", this.ToBitString);
				UINT32 Read:1 = FormatString("    (%s) %s", this.ToBitString, this? "Marked as read": "Marked as unread"); 
			}			
		}
	}
}

Struct PFaxMessageWArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	Switch
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				FaxMessage FaxMessage;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.ExtendedStatus[Local.Arraycount - 1] > 0:
						UnicodeString ExtendedStatus;
				}
				switch
				{
					case property.RecipientNumber[Local.Arraycount - 1] > 0:
						UnicodeString RecipientNumber;
				}
				switch
				{
					case property.RecipientName[Local.Arraycount - 1] > 0:
						UnicodeString RecipientName;
				}
				switch
				{
					case property.SenderNumber[Local.Arraycount - 1] > 0:
						UnicodeString SenderNumber;
				}
				switch
				{
					case property.SenderName[Local.Arraycount - 1] > 0:
						UnicodeString SenderName;
				}
				switch
				{
					case property.Tsid[Local.Arraycount - 1] > 0:
						UnicodeString Tsid;
				}
				switch
				{
					case property.Csid[Local.Arraycount - 1] > 0:
						UnicodeString Csid;
				}
				switch
				{	
					case property.SenderUserName[Local.Arraycount - 1] > 0:
						UnicodeString SenderUserName;
				}
				switch
				{
					case property.BillingCode[Local.Arraycount - 1] > 0:
						UnicodeString BillingCode;
				}
				switch
				{
					case property.DeviceName[Local.Arraycount - 1] > 0:
						UnicodeString DeviceName;
				}
				switch
				{
					case property.DocumentName[Local.Arraycount - 1] > 0:
						UnicodeString DocumentName;
				}
				switch
				{
					case property.Subject[Local.Arraycount - 1] > 0:
						UnicodeString Subject;
				}
				switch
				{
					case property.CallerID[Local.Arraycount - 1] > 0:
						UnicodeString CallerID;
				}
				switch
				{
					case property.RoutingInfo[Local.Arraycount - 1] > 0:
						UnicodeString RoutingInfo;
				}
				switch
				{
					case property.ReceiptAddress[Local.Arraycount - 1] > 0:
						UnicodeString ReceiptAddress;
				}
			}
		}
	}
}

Struct FaxRoutingExtensionInfoW = FormatString("%s, Status: %s, LastError: %u",FaxVersion.toString,FaxEnumProviderStatusTable (Status,FALSE),LastError)
{
	UINT32 SizeOfStruct;
	[property.FriendlyName.AddToProperty(FriendlyNameOffset.ReferentID, 0)]
	NdrPtr FriendlyNameOffset;
	[property.ImageName.AddToProperty(ImageNameOffset.ReferentID, 0)]
	NdrPtr ImageNameOffset;
	[property.ExtensionName.AddToProperty(ExtensionNameOffset.ReferentID, 0)]
	NdrPtr ExtensionNameOffset;
	FaxVersion FaxVersion;
	NdrEnum Status = FaxEnumProviderStatusTable (this.value,TRUE);
	Align4 Pad;
	UINT32 LastError;
}

Struct PFaxRoutingExtensionInfoWArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	Switch {
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				FaxRoutingExtensionInfoW FaxRoutingExtensionInfoW;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.FriendlyName[Local.Arraycount - 1] > 0:
						UnicodeString FriendlyName;
				}
				switch
				{
					case property.ImageName[Local.Arraycount - 1] > 0:
						UnicodeString ImageName;
				}
				switch
				{
					case property.ExtensionName[Local.Arraycount - 1] > 0:
						UnicodeString ExtensionName;
				}
			}
		}
	}
}

struct FaxSpecificAccessRights = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) ) {
	Switch( Property.MSRPCByteOrder )
	{
		Case LittleEndian:
		Struct
		{
			UINT16 SpecificRights = FormatString( "0x%04X", UINT16( FrameData, FrameOffset ) )
			{
				UINT16 Submit:1 = FormatString("          (%s) %s", this.ToBitString, this ? "Grants permission to send a low priority fax transmission to one or more recipients" : "Does not grant permission to send a low priority fax transmission to one or more recipients");
				UINT16 SubmitNormal:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Grants permission to send a normal priority fax transmission to one or more recipients" : "Does not grant permission to send a normal priority fax transmission to one or more recipients");
				UINT16 SubmitHigh:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Grants permission to send a high priority fax transmission to one or more recipients" : "Does not grant permission to send a high priority fax transmission to one or more recipients");
				UINT16 QueryJobs:1 = FormatString("       (%s) %s", this.ToBitString, this ? "Grants permission to view all of the incoming and outgoing faxes in the Incoming and Outbox queues" : "Does not grant permission to view all of the incoming and outgoing faxes in the Incoming and Outbox queues");
				UINT16 ManageJobs:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Grants permission to manage all of the incoming and outgoing faxes in the Incoming and Outbox queues" : "Does not grant permission to manage all of the incoming and outgoing faxes in the Incoming and Outbox queues");
				UINT16 QueryConfig:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Grants permission to view the properties of the Fax Service" : "Does not grant permission to view the properties of the Fax Service");
				UINT16 ManageConfig:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Grants permission to modify the properties of the Fax Service" : "Does not grant permission to modify the properties of the Fax Service");
				UINT16 QueryInArchive:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Grants permission to view all successfully received messages in the Inbox archive" : "Does not grant permission to view all successfully received messages in the Inbox archive");
				UINT16 ManageInArchive:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Grants permission to manage all successfully received messages in the Inbox archive" : "Does not grant permission to manage all successfully received messages in the Inbox archive");
				UINT16 QueryOutArchive:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Grants permission to view all successfully received messages in the Sent Items archive" : "Does not grant permission to view all successfully received messages in the Sent Items archive");
				UINT16 ManageOutArchive:1 = FormatString("(%s) %s", this.ToBitString, this ? "Grants permission to manage all successfully received messages in the Sent Items archive" : "Does not grant permission to manage all successfully received messages in the Sent Items archive");
				UINT16 Reserved:5 = FormatString("        (%s)", this.ToBitString);                         
			}
			MSRPCAccessRights AccessRights;
		}

		Default:
		Struct
		{
			MSRPCAccessRights AccessRights;
			UINT16 SpecificRights = FormatString( "0x%04X", UINT16( FrameData, FrameOffset ) )
			{
				UINT16 Reserved:5 = FormatString("        (%s)", this.ToBitString);           
				UINT16 ManageOutArchive:1 = FormatString("(%s) %s", this.ToBitString, this ? "Grants permission to manage all successfully received messages in the Sent Items archive" : "Does not grant permission to manage all successfully received messages in the Sent Items archive");
				UINT16 QueryOutArchive:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Grants permission to view all successfully received messages in the Sent Items archive" : "Does not grant permission to view all successfully received messages in the Sent Items archive");
				UINT16 ManageInArchive:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Grants permission to manage all successfully received messages in the Inbox archive" : "Does not grant permission to manage all successfully received messages in the Inbox archive");
				UINT16 QueryInArchive:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Grants permission to view all successfully received messages in the Inbox archive" : "Does not grant permission to view all successfully received messages in the Inbox archive");
				UINT16 ManageConfig:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Grants permission to modify the properties of the Fax Service" : "Does not grant permission to modify the properties of the Fax Service");
				UINT16 QueryConfig:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Grants permission to view the properties of the Fax Service" : "Does not grant permission to view the properties of the Fax Service");
				UINT16 ManageJobs:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Grants permission to manage all of the incoming and outgoing faxes in the Incoming and Outbox queues" : "Does not grant permission to manage all of the incoming and outgoing faxes in the Incoming and Outbox queues");
				UINT16 QueryJobs:1 = FormatString("       (%s) %s", this.ToBitString, this ? "Grants permission to view all of the incoming and outgoing faxes in the Incoming and Outbox queues" : "Does not grant permission to view all of the incoming and outgoing faxes in the Incoming and Outbox queues");
				UINT16 SubmitHigh:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Grants permission to send a high priority fax transmission to one or more recipients" : "Does not grant permission to send a high priority fax transmission to one or more recipients");
				UINT16 SubmitNormal:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Grants permission to send a normal priority fax transmission to one or more recipients" : "Does not grant permission to send a normal priority fax transmission to one or more recipients");
				UINT16 Submit:1 = FormatString("          (%s) %s", this.ToBitString, this ? "Grants permission to send a low priority fax transmission to one or more recipients" : "Does not grant permission to send a low priority fax transmission to one or more recipients");
			}
		}									
	}
}

struct FaxQueueStates = FormatString("0x%08X", UINT32(FrameData,FrameOffset)) {
	Switch( Property.MSRPCByteOrder )
	{
		Case LittleEndian:
		Struct
		{
			UINT32 QueueStates = FormatString("0x%08X", UINT32(FrameData,FrameOffset))
			{
				UINT32 IncomingBlocked:1 = FormatString("(%s) %s", this.ToBitString, this ? "The incoming faxes queue is blocked" : "The incoming faxes queue is NOT blocked");
				UINT32 OutboxBlocked:1 = FormatString("  (%s) %s", this.ToBitString, this ? "The outbox queue is blocked" : "The outbox queue is NOT blocked");
				UINT32 OutboxPaused:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The outbox queue is paused" : "The outbox queue is NOT paused");
				UINT32 Unused:29 = FormatString("         (%s)", this.ToBitString);
			}
		}
		Default:
		Struct
		{
			UINT32 QueueStates = FormatString("0x%08X", UINT32(FrameData,FrameOffset))
			{
				UINT32 Unused:29 = FormatString("         (%s)", this.ToBitString);
				UINT32 OutboxPaused:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The outbox queue is paused" : "The outbox queue is NOT paused");
				UINT32 OutboxBlocked:1 = FormatString("  (%s) %s", this.ToBitString, this ? "The outbox queue is blocked" : "The outbox queue is NOT blocked");
				UINT32 IncomingBlocked:1 = FormatString("(%s) %s", this.ToBitString, this ? "The incoming faxes queue is blocked" : "The incoming faxes queue is NOT blocked");
			}									
		}
	}
}

Struct FaxSecurityInformation  = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
{
	Switch( Property.MSRPCByteOrder )
	{
		Case LittleEndian:
		Struct
		{
			UINT32 SecurityInformation  = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
			{
				UINT32 OwnerSecurityInformation:1 = FormatString("(%s) %s", this.ToBitString, "Security identifier (SID) of the object's owner");
				UINT32 GroupSecurityInformation:1 = FormatString("(%s) %s", this.ToBitString,"SID of the owner's primary group");
				UINT32 DaclSecurityInformation:1 = FormatString(" (%s) %s", this.ToBitString,"Discretionary access-control list (DACL) of the object");
				UINT32 SaclSecurityInformation:1 = FormatString(" (%s) %s", this.ToBitString,"System access-control list (SACL) of the object");
				UINT32 Reserved:28 = FormatString("                (%s)", this.ToBitString);
			}
		}
		Default:
		Struct
		{
			UINT32 SecurityInformation  = FormatString( "0x%08X", UINT32( FrameData, FrameOffset ) )
			{
				UINT32 Reserved:28 = FormatString("                (%s)", this.ToBitString);
				UINT32 SaclSecurityInformation:1 = FormatString(" (%s) %s", this.ToBitString,"System access-control list (SACL) of the object");
				UINT32 DaclSecurityInformation:1 = FormatString(" (%s) %s", this.ToBitString,"Discretionary access-control list (DACL) of the object");
				UINT32 GroupSecurityInformation:1 = FormatString("(%s) %s", this.ToBitString,"SID of the owner's primary group");
				UINT32 OwnerSecurityInformation:1 = FormatString("(%s) %s", this.ToBitString, "Security identifier (SID) of the object's owner");
			}
		}
	}
}


struct FaxReassignInfo = FormatString("Recipients: %s, SenderName: %s, Subject: %s", Recipients.ToString, SenderName.ToString, Subject.ToString)
{
	NdrPtr RecipientsOffset;
	NdrPtr SenderNameOffset;
	NdrPtr SenderFaxNumberOffset;
	NdrPtr SubjectOffset;
	BOOL CoverPage = this? "May include a cover page": "Not include a cover page";
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
	switch
	{
		case RecipientsOffset.ReferentID > 0: NdrWideString Recipients;
	}
	switch
	{
		case SenderNameOffset.ReferentID > 0: NdrWideString SenderName;
	}
	switch
	{
		case SenderFaxNumberOffset.ReferentID > 0: NdrWideString SenderFaxNumber;
	}
	switch
	{
		case SubjectOffset.ReferentID > 0: NdrWideString Subject;
	}
}

Table FaxMessage1ReceiptTypeTable(value)
{
	switch(value)
	{
		case 0x00000000: "No receipt is sent";
		case 0x00000001: "Receipt is email";
		case 0x00000004: "Receipt is message box";
		default:
			"Unknown value";
	}
}

struct FaxGeneralConfigW
{
	UINT32 SizeOfStruct = FormatString("Size of Structure in bytes: %u",SizeOfStruct);
	BOOL Archive = this? "Use archive to store fax msg": "Not use archive to store msg";
	NdrPtr ArchiveLocationOffset;
	BOOL QuotaWarning = this? "Issue quota warning": "Not issue quota warning";
	UINT32 QuotaHighWaterMark;
	UINT32 QuotaLowWaterMark;
	UINT32 ArchiveAgeLimit = FormatString("Days retain in archives: %d", this);
	BLOB(4) Pad1;
	UINT64 ArchiveSize;
	UINT32 QueueAgeLimit = FormatString("Days retain in fax queue: %d", this);
	UINT32 Retries;
	UINT32 RetryDelay = FormatString("%d Min(s)", this);
	BOOL UseDeviceTSID = this? "Use device's transmitting station identifier": "Not use device's transmitting station identifier";
	FaxTime DiscountStart;
	FaxTime DiscountEnd;
	BOOL Branding = this? "Generate brand": "No brand";
	BOOL AllowPersonalCP = this? "Can include user-designed cover page": "Can not include user-designed cover page";
	switch(property.MSRPCByteOrder)
	{
		case LittleEndian:
		struct
		{
			UINT32 QueueState = this == 0? "Allow both incoming and outgoing msg": FormatString("0x%08x", this)
			{
				UINT32 Incoming:1 = FormatString("   (%s) %s", this.ToBitString, this? "Block incoming msg": "");
				UINT32 OutboxBlock:1 = FormatString("(%s) %s", this.ToBitString, this? "Block outgoing msg": "");
				UINT32 OutboxPause:1 = FormatString("(%s) %s", this.ToBitString, this? "Pause outgoing msg": "");
				UINT32 Reserved:29 = FormatString("   (%s)", this);
			}
		}
		default:
		struct
		{
			UINT32 QueueState = this == 0? "Allow both incoming and outgoing msg": FormatString("0x%08x", this)
			{
				UINT32 Reserved:29 = FormatString("   (%s)", this);				
				UINT32 OutboxPause:1 = FormatString("(%s) %s", this.ToBitString, this? "Pause outgoing msg": "");				
				UINT32 OutboxBlock:1 = FormatString("(%s) %s", this.ToBitString, this? "Block outgoing msg": "");
				UINT32 Incoming:1 = FormatString("   (%s) %s", this.ToBitString, this? "Block incoming msg": "");
			}
		}		
	}
	BOOL CreateAccount = this? "Auto create account": "Manual create acount";
	BOOL IncomingFaxes = this? "Incoming Faxs are public": "Incoming Faxs are private";
	BLOB(4) Pad2;
	switch
	{
		case ArchiveLocationOffset.ReferentID > 0: UnicodeString ArchiveLocation;
	}
}

Struct PFaxGeneralConfigW
{
	NdrPtrToConformant Pointer;
	Switch {
		Case Pointer.ReferentID > 0: FaxGeneralConfigW FaxGeneralConfig;
	}
}

struct FaxMessageProps
{
	switch(property.MSRPCByteOrder)
	{
		case LittleEndian:
		struct
		{
			UINT32 ValidityMask = FormatString("0X%08x", this)
			{
				UINT32 MsgFlagValid:1 = FormatString("(%s) %s", this.ToBitString, this? "MsgFlag is valid": "MsgFlag is invalid");
				UINT32 Reserved:31 = FormatString("    (%s)", this.ToBitString);
			}

			UINT32 MsgFlag = FormatString("0X%08x", this)
			{
				UINT32 Read:1 = FormatString("    (%s) %s", this.ToBitString, this? "Marked as read": "Marked as unread");
				UINT32 Reserved:31 = FormatString("(%s)", this.ToBitString);
			}
		}
		default:
		struct
		{
			UINT32 ValidityMask = FormatString("0X%08x", this)
			{
				UINT32 Reserved:31 = FormatString("    (%s)", this.ToBitString);				
				UINT32 MsgFlagValid:1 = FormatString("(%s) %s", this.ToBitString, this? "MsgFlag is valid": "MsgFlag is invalid");
			}

			UINT32 MsgFlag = FormatString("0X%08x", this)
			{
				UINT32 Reserved:31 = FormatString("(%s)", this.ToBitString);
				UINT32 Read:1 = FormatString("    (%s) %s", this.ToBitString, this? "Marked as read": "Marked as unread"); 
			}			
		}
	}
}

Struct FaxJobEntryEx1W = FormatString("ValidityMask: %s, MessageId: %u, BroadcastId: %u, SubmissionTime: %s, Priority: %s, DeliveryReportType: %s",ValidityMask,MessageId,BroadcastId,SubmissionTime,FaxPriorityTypeTable( Priority,FALSE),FaxDeliveryReportTypeTable( DeliveryReportType,FALSE ))
{
	UINT32 SizeOfStruct;
	FaxJobValidityMask ValidityMask;
	UINT64 MessageId;
	UINT64 BroadcastId;
	[property.RecipientNumber.AddToProperty(RecipientNumberPointer.ReferentID, 0)]
	NdrPtr RecipientNumberPointer;
	[property.RecipientName.AddToProperty(RecipientNamePointer.ReferentID, 0)]
	NdrPtr RecipientNamePointer;
	[property.SenderUserName.AddToProperty(SenderUserNamePointer.ReferentID, 0)]
	NdrPtr SenderUserNamePointer;
	[property.BillingCode.AddToProperty(BillingCodePointer.ReferentID, 0)]
	NdrPtr BillingCodePointer;
	SystemTime OriginalScheduleTime;
	SystemTime SubmissionTime;
	NdrEnum Priority = FaxPriorityTypeTable( this.value,TRUE );
	UINT32 DeliveryReportType = FaxDeliveryReportTypeTable( this,TRUE );
	[property.DocumentName.AddToProperty(DocumentNamePointer.ReferentID, 0)]
	NdrPtr DocumentNamePointer;
	[property.Subject.AddToProperty(SubjectPointer.ReferentID, 0)]
	NdrPtr SubjectPointer;
	[property.Job.AddToProperty(JobStatus.ReferentID, 0)]
	NdrPtr JobStatus;
	BOOL CoverPage = this? "Has cover page": "No cover page";
	[property.DeliveryReportAddress.AddToProperty(DeliveryReportAddressPointer.ReferentID, 0)]
	NdrPtr DeliveryReportAddressPointer;
	UINT32 ScheduleAction = FaxScheduledActionTable(this);
}

Struct FaxJobEntryEx1WArray(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	switch 
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				FaxJobEntryEx1W JobEntryExW;
			}
			[MaxLoopcount = count]
			while [true]
			{
				FaxJobStatusW JobStatusW;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.RecipientNumber[Local.Arraycount - 1] > 0:
						UnicodeString RecipientNumber;
				}
				switch
				{
					case property.RecipientName[Local.Arraycount - 1] > 0:
						UnicodeString RecipientName;
				}
				switch
				{
					case property.SenderUserName[Local.Arraycount - 1] > 0:
						UnicodeString SenderUserName;
				}
				switch
				{
					case property.BillingCode[Local.Arraycount - 1] > 0:
						UnicodeString BillingCode;
				}
				switch
				{
					case property.DocumentName[Local.Arraycount - 1] > 0:
						UnicodeString DocumentName;
				}
				switch
				{
					case property.Subject[Local.Arraycount - 1] > 0:
						UnicodeString Subject;
				}
				switch
				{
					case property.Job[Local.Arraycount - 1] > 0:
						struct
						{
							FaxJobStatusW FaxJobStatusW;
							[Property.FaxJobUnicodeStringcount = 1]
							switch
							{
								Case Property.ExtendedStatus[Property.FaxJobUnicodeStringcount - 1] > 0:
								Case Property.TSid[Property.FaxJobUnicodeStringcount - 1] > 0:
								Case Property.CSid[Property.FaxJobUnicodeStringcount - 1] > 0:
								Case Property.DeviceName[Property.FaxJobUnicodeStringcount - 1] > 0:
								Case Property.CallerID[Property.FaxJobUnicodeStringcount - 1] > 0:
								Case Property.RoutingInfo[Property.FaxJobUnicodeStringcount - 1] > 0:
									FaxJobStatusWArrayUnicodeString FaxJobStatusWArrayUnicodeString;
							}
						}
				}
				switch
				{
					case property.DeliveryReportAddress[Local.Arraycount - 1] > 0:
						UnicodeString DeliveryReportAddress;
				}
			}
		}
	}
}

Table FaxEnumConfigOption(value)
{
	switch(value)
	{
		case 0x0000: "Personal cover page allowed";
		case 0x0001: "Status of the queue";
		case 0x0002: "The type of receipt";
		case 0x0003: "Viewing permissions of incoming faxes";
		default:
			"Unknown value";
	}
}

struct FaxAccountInfo0Single = AccountName.ToString
{
	UINT32 SizeOfStruct;
	NdrPtr AccountNameOffset;
	switch
	{
		case AccountNameOffset.ReferentID > 0: UnicodeString AccountName;
	}
}

struct FaxAccountInfo0
{
	UINT32 SizeOfStruct;
	[property.AccountNameOffset.AddToProperty(AccountNamePtr.ReferentID, 0)]
	NdrPtr AccountNamePtr;
}

struct FaxAccountInfo0Array(count) = FormatString("BufferSize: %u",ArrayPointer.MaxCount)
{
	NdrPtrToConformant ArrayPointer;
	switch
	{
		Case ArrayPointer.ReferentID > 0 &&  ArrayPointer.Maxcount > 0 :
		struct
		{
			[MaxLoopcount = count]
			while [true]
			{
				FaxAccountInfo0 AcountInfo0;
			}
			[Local.Arraycount = 0]
			while [Local.Arraycount < count]
			{
				[Local.Arraycount = Local.Arraycount + 1]
				switch
				{
					case property.AccountNameOffset[Local.Arraycount - 1] > 0:
						UnicodeString AccountNameOffset;
				}
			}
		}
	}
}
