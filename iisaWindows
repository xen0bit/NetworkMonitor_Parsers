//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Internet Information Services (IIS) Application Host COM Protocol
//#
//#  Details:                
//#
//#  Public References:      [MC-IISA]: Internet Information Services (IIS) Application Host COM Protocol Specification
//#
//#  Comments:               Parser Framework: PAC v2.1.1991.0
//#
//#  Revision Class and Date:Major, 02/24/2010
//#                          Minor, 03/10/2010
//#
//####

protocol IISA = FormatString( "%s %s%s%s%s%s", 
	property.IISAMethodName,
	property.MSRPCPType ? "Response" : "Request",
	property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	property.IISASummary && property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + property.IISASummary : "" )
{
	[property.IISASummary = ""]
	switch( property.MSRPCIfUuid )
	{
		case "{70184AC9-7673-4770-96B1-445CE035CF70}":
			[property.IISAMethodName = "IAppHostMethodExtension::" + IISAIAppHostMethodExtensionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostMethodExtension
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct ProvideMethod
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Method=%s, MethodInstance=%s, Element=%s", Method.ToString, MethodInstance.ToString, Element.ToString )]
												struct
												{
													DCOMMInterfacePointer Method;
													DCOMMInterfacePointer MethodInstance;
													DCOMMInterfacePointer Element;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostMethodExtension method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{31A83EA0-C0E4-4A2C-8A01-353CC2A4C60A}":
			[property.IISAMethodName = "IAppHostMappingExtension::" + IISAIAppHostMappingExtensionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostMappingExtension
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct GetSiteNameFromSiteId
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SiteId=%u", SiteId )]
												struct
												{
													UINT32 SiteId = (this == 0) ? "Invalid site ID (0)" : this;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SiteName=%s, ReturnValue=%s", SiteName.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR SiteName;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct GetSiteIdFromSiteName
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SiteName=%s", SiteName.ToString )]
												struct
												{
													BSTR SiteName;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SiteId=%u, ReturnValue=%s", SiteId, ReturnValue.ToString )]
												struct
												{
													UINT32 SiteId = (this == 0) ? "Invalid site ID (0)" : this;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct GetSiteElementFromSiteId
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SiteId=%u", SiteId )]
												struct
												{
													UINT32 SiteId;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SiteElement=%s, ReturnValue=%s", SiteElement.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr SiteElement;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct MapPath
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SiteName=%s, VirtualPath=%s", SiteName.ToString, VirtualPath.ToString )]
												struct
												{
													BSTR SiteName;
													BSTR VirtualPath;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "PhysicalPath=%s, VirtualDirectoryElement=%s, ApplicationElement=%s, ReturnValue=%s", PhysicalPath.ToString, VirtualDirectoryElement.ToString, ApplicationElement.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR PhysicalPath;
													DCOMMInterfacePointerPtr VirtualDirectoryElement;
													DCOMMInterfacePointerPtr ApplicationElement;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostMappingExtension method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{0191775E-BCFF-445A-B4F4-3BDDA54E2816}":
			[property.IISAMethodName = "IAppHostPropertyCollection::" + IISAIAppHostPropertyCollectionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostPropertyCollection
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Count=%u, ReturnValue=%s", Count, ReturnValue.ToString )]
												struct
												{
													UINT32 Count;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Property=%s, ReturnValue=%s", Property.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Property;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostPropertyCollection method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{9BE77978-73ED-4A9A-87FD-13F09FEC1B13}":
			[property.IISAMethodName = "IAppHostAdminManager::" + IISAIAppHostAdminManagerMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostAdminManager
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct GetAdminSection
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionName=%s, Path=%s", SectionName.ToString, Path.ToString )]
												struct
												{
													BSTR SectionName;
													BSTR Path;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AdminSection=%s, ReturnValue=%s", AdminSection.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr AdminSection;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct GetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s", IISAGetMetadataMetadataTypeTable(MetadataType.ToString, false ))]
												struct
												{
													BSTR MetadataType = IISAGetMetadataMetadataTypeTable( this.ToString, true );
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value=%s, ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVARIANT Value;
													Align4 Pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct SetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s, %s", IISAIAppHostAdminManagerMetadataTypeTable( MetadataType.ToString, false), Value.ToString )]
												struct
												{
													BSTR MetadataType = IISAIAppHostAdminManagerMetadataTypeTable(this.ToString, true);
													OLEAUTVARIANT Value;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct ConfigManager
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigManager=%s, ReturnValue=%s", ConfigManager.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr ConfigManager;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostAdminManager method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{450386DB-7409-4667-935E-384DBBEE2A9E}":
			[property.IISAMethodName = "IISAIAppHostPropertySchema::" + IISAIAppHostPropertySchemaMethodNameTable( property.MSRPCOpnum )]
			_Struct IISAIAppHostPropertySchema
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Name
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Name=%s, ReturnValue=%s", Name.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Name;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Type
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Type=%s, ReturnValue=%s", Type.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Type;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct DefaultValue
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "DefaultValue( %s ), ReturnValue=%s", DefaultValue.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVariant DefaultValue;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct IsRequired
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "IsRequired=%s, ReturnValue=%s",  IsRequired, ReturnValue.ToString)]
												struct
												{
													VARIANTBOOL IsRequired;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct IsUniqueKey
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "IsUniqueKey=%s, ReturnValue=%s", IsUniqueKey, ReturnValue.ToString )]
												struct
												{
													VARIANTBOOL IsUniqueKey;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct IsCombinedKey
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "IsCombinedKey=%s, ReturnValue=%s", IsCombinedKey, ReturnValue.ToString )]
												struct
												{
													VARIANTBOOL IsCombinedKey;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct IsExpanded
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "IsExpanded%s, ReturnValue=%s", IsExpanded, ReturnValue.ToString )]
												struct
												{
													VARIANTBOOL IsExpanded;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 10:
						_Struct ValidationType
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ValidationType=%s, ReturnValue=%s", ValidationType.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR ValidationType;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 11:
						_Struct ValidationParameter
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ValidationParameter=%s, ReturnValue=%s", ValidationParameter.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR ValidationParameter;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 12:
						_Struct GetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s", MetadataType.ToString )]
												struct
												{
													BSTR MetadataType;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value( %s ), ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVariant Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 13:
						_Struct IsCaseSensitive
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "IsCaseSensitive=%s, ReturnValue=%s", IsCaseSensitive, ReturnValue.ToString )]
												struct
												{
													VARIANTBOOL IsCaseSensitive;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 14:
						_Struct PossibleValues
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Values=%s, ReturnValue=%s", Values.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Values;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 15:
						_Struct DoesAllowInfinite
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AllowInfinite=%s, ReturnValue=%s", AllowInfinite, ReturnValue.ToString )]
												struct
												{
													VARIANTBOOL AllowInfinite;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 16:
						_Struct IsEncrypted
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "IsEncrypted=%s, ReturnValue=%s", IsEncrypted, ReturnValue.ToString )]
												struct
												{
													VARIANTBOOL IsEncrypted;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 17:
						_Struct TimeSpanFormat
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "TimeSpanFormat=%s, ReturnValue=%s", TimeSpanFormat.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR TimeSpanFormat;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostPropertySchema method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{370AF178-7758-4DAD-8146-7391F6E18585}":
			[property.IISAMethodName = "IAppHostConfigLocation::" + IISAIAppHostConfigLocationMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostConfigLocation
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Path
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "LocationPath=%s, ReturnValue=%s", LocationPath.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR LocationPath;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Count=%u, ReturnValue=%s", Count, ReturnValue.ToString )]
												struct
												{
													UINT32 Count;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Section=%s, ReturnValue=%s", Section.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Section;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct AddConfigSection
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionName=%s", SectionName.ToString )]
												struct
												{
													BSTR SectionName;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AdminElement=%s, ReturnValue=%s", AdminElement.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr AdminElement;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct DeleteConfigSection
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index=%s", Index.ToString )]
												struct
												{
													OLEAUTVARIANT Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostConfigLocation method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{ADA4E6FB-E025-401E-A5D0-C3134A281F07}":
			[property.IISAMethodName = "IAppHostConfigFile::" + IISAIAppHostConfigFileMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostConfigFile
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct ConfigPath
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigPath=%s, ReturnValue=%s", ConfigPath.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR ConfigPath;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct FilePath
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "FilePath=%s, ReturnValue=%s", FilePath.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR FilePath;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct Locations
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Locations=%s, ReturnValue=%s", Locations.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Locations;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct GetAdminSection
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionName=%s, Path=%s", SectionName.ToString,Path.ToString )]
												struct
												{
													BSTR SectionName;
													BSTR Path;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AdminSection=%s, ReturnValue=%s", AdminSection.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr AdminSection;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}

					case 7:
						_Struct GetMetaData
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s", MetadataType.ToString )]
												struct
												{
													BSTR MetadataType;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value=%s, ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVARIANT Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct SetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s, Value=%s", MetadataType.ToString, Value.ToString )]
												struct
												{
													BSTR MetadataType;
													OLEAUTVARIANT Value;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct ClearInvalidSections
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 10:
						_Struct RootSectionGroup
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionGroups=%s, ReturnValue=%s", SectionGroups.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr SectionGroups;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostConfigFile method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{8BED2C68-A5FB-4B28-8581-A0DC5267419F}":
			[property.IISAMethodName = "IAppHostPropertySchemaCollection::" + IISAIAppHostPropertySchemaCollectionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostPropertySchemaCollection
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Count=%u, ReturnValue=%s", Count, ReturnValue.ToString )]
												struct
												{
													UINT32 Count;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index=%s", Index.ToString )]
												struct
												{
													OLEAUTVARIANT Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "PropertySchema=%s, ReturnValue=%s", PropertySchema.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr PropertySchema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostPropertySchemaCollection method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{832A32F7-B3EA-4B8C-B260-9A2923001184}":
			[property.IISAMethodName = "IAppHostConfigLocationCollection::" + IISAIAppHostConfigLocationCollectionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostConfigLocationCollection
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Count=%u, ReturnValue=%s", Count, ReturnValue.ToString )]
												struct
												{
													UINT32 Count;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index=%s", Index.ToString )]
												struct
												{
													OLEAUTVARIANT Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Location=%s, ReturnValue=%s", Location.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Location;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct AddLocation
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "LocationPath=%s", LocationPath.ToString )]
												struct
												{
													BSTR LocationPath;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "NewLocation=%s, ReturnValue=%s", NewLocation.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr NewLocation;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct DeleteLocation
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostConfigLocationCollection method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{ED35F7A1-5024-4E7B-A44D-07DDAF4B524D}":
			[property.IISAMethodName = "IAppHostProperty::" + IISAIAppHostPropertyMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostProperty
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Name
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Name=%s, ReturnValue=%s", Name.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Name;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct get_Value
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Variant( %s ), ReturnValue=%s", Variant.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVariant Variant;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct set_Value
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value( %s )", Value.ToString )]
												struct
												{
													OLEAUTVariant Value;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct Clear
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct StringValue
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value=%s, ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct Exception
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Exception=%s, ReturnValue=%s", Exception.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Exception;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct GetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s", IISAIAppHostPropertyMetadataType( MetadataType.ToString, false ))]
												struct
												{
													BSTR MetadataType = IISAIAppHostPropertyMetadataType( this.ToString, true );
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value( %s ), ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVariant Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 10:
						_Struct SetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s, Value( %s )", IISAIAppHostPropertyMetadataType( MetadataType.ToString, false), Value.ToString )]
												struct
												{
													BSTR MetadataType = IISAIAppHostPropertyMetadataType(  this.ToString, true );
													OLEAUTVariant Value;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 11:
						_Struct Schema
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Schema=%s, ReturnValue=%s", Schema.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Schema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostProperty method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{FA7660F6-7B3F-4237-A8BF-ED0AD0DCBBD9}":
			[property.IISAMethodName = "IAppHostWritableAdminManager::" + IISAIAppHostWritableAdminManagerMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostWritableAdminManager
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct GetAdminSection
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionName=%s, Pat%s", SectionName.ToString, Path.ToString )]
												struct
												{
													BSTR SectionName;
													BSTR Path;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AdminSection=%s", AdminSection.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr AdminSection;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct GetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s", MetadataType.ToString )]
												struct
												{
													BSTR MetadataType;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value( %s ), ReturnValue=%s", Value.ToString )]
												struct
												{
													OLEAUTVariant Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct SetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s, Value( %s )", MetadataType.ToString, Value.ToString )]
												struct
												{
													BSTR MetadataType;
													OLEAUTVariant Value;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct ConfigManager
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigManager=%s, ReturnValue=%s", ConfigManager.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr ConfigManager;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct CommitChanges
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct get_CommitPath
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "CommitPath=%s, ReturnValue=%s", CommitPath.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR CommitPath;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct set_CommitPath
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "CommitPath=%s", CommitPath.ToString )]
												struct
												{
													BSTR CommitPath;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostWritableAdminManager method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{64FF8CCC-B287-4DAE-B08A-A72CBF45F453}":
			[property.IISAMethodName = "IAppHostElement::" + IISAIAppHostElementMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostElement
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Name
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Name=%s, ReturnValue=%s", Name.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Name;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Collection
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Collection=%s, ReturnValue=%s", Collection.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Collection;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct Properties
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Properties=%s, ReturnValue=%s", Properties.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Properties;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct ChildElements
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Elements=%s, ReturnValue=%s", Elements.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Elements;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}

					case 7:
						_Struct GetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s", MetadataType.ToString )]
												struct
												{
													BSTR MetadataType;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value=%s, ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVARIANT Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
								
					case 8:
						_Struct SetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s, Value( %s )", IISAIAppHostElementMetadataTypeTable( MetadataType.ToString, false), Value.ToString )]
												struct
												{
													BSTR MetadataType = IISAIAppHostElementMetadataTypeTable( this.ToString, true );
													OLEAUTVariant Value;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct Schema
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Schema=%s, ReturnValue=%s", Schema.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Schema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 10:
						_Struct GetElementByName
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SubName=%s", SubName.ToString )]
												struct
												{
													BSTR SubName;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Element=%s, ReturnValue=%s", Element.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Element;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 11:
						_Struct GetPropertyByName
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SubName=%s", SubName.ToString )]
												struct
												{
													BSTR SubName;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Property=%s, ReturnValue=%s", Property.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Property;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 12:
						_Struct Clear
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 13:
						_Struct Methods
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Methods=%s, ReturnValue=%s", Methods.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Methods;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostElement method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{C8550BFF-5281-4B1E-AC34-99B6FA38464D}":
			[property.IISAMethodName = "IAppHostElementCollection::" + IISAIAppHostElementCollectionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostElementCollection
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ElementCount=%u, ReturnValue=%s", ElementCount, ReturnValue.ToString )]
												struct
												{
													UINT32 ElementCount;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Element=%s, ReturnValue=%s", Element.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Element;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct AddElement
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Element=%s, Position=%d", Element.ToString, Position )]
												struct
												{
													DCOMMInterfacePointerPtr Element;
													Align4 pad;
													INT32 Position;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct DeleteElement
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct Clear
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct CreateNewElement
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ElementName=%s", ElementName.ToString )]
												struct
												{
													BSTR ElementName;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Element=%s, ReturnValue=%s", Element.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Element;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct Schema
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Schema=%s, ReturnValue=%s", Schema.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Schema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostElementCollection method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{09829352-87C2-418D-8D79-4133969A489D}":
			[property.IISAMethodName = "IAppHostChangeHandler::" + IISAIAppHostChangeHandlerMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostChangeHandler
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct OnSectionChanges
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionName=%s, ConfigPath=%s", SectionName.ToString, ConfigPath.ToString )]
												struct
												{
													BSTR SectionName;
													BSTR ConfigPath;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostChangeHandler method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{B80F3C42-60E0-4AE0-9007-F52852D3DBED}":
			[property.IISAMethodName = "IAppHostMethodInstance::" + IISAIAppHostMethodInstanceMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostMethodInstance
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Input
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "InputElement=%s, ReturnValue=%s", InputElement.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr InputElement;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Output
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "OutputElementg=%s, ReturnValue=%s", OutputElementg.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr OutputElementg;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct Execute
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct GetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s", MetadataType.ToString )]
												struct
												{
													BSTR MetadataType;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value( %s ), ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVariant Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct SetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s, Value( %s )", MetadataType.ToString, Value.ToString )]
												struct
												{
													BSTR MetadataType;
													OLEAUTVariant Value;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostMethodInstance method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{E7927575-5CC3-403B-822E-328A6B904BEE}":
			[property.IISAMethodName = "IAppHostPathMapper::" + IISAIAppHostPathMapperMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostPathMapper
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct MapPath
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigPath=%s, MappedPhysicalPath=%s", ConfigPath.ToString, MappedPhysicalPath.ToString )]
												struct
												{
													BSTR ConfigPath;
													BSTR MappedPhysicalPath;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "NewPhysicalPath=%s, ReturnValue=%s", NewPhysicalPath.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR NewPhysicalPath;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostPathMapper method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{0F80E901-8F4C-449A-BF90-13D5D082F187}":
			[property.IISAMethodName = "IAppHostPathMapper2::" + IISAIAppHostPathMapper2MethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostPathMapper2
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct MapPath
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigPath=%s, MappedPhysicalPath=%s", ConfigPath.ToString, MappedPhysicalPath.ToString )]
												struct
												{
													BSTR ConfigPath;
													BSTR MappedPhysicalPath;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "NewPhysicalPath=%s, ReturnValue=%s", NewPhysicalPath.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR NewPhysicalPath;
													Align4 pad;
													CONTEXT_HANDLE ImpersonationToken;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostPathMapper2 method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{8F6D760F-F0CB-4D69-B5F6-848B33E9BDC6}":
			[property.IISAMethodName = "IAppHostConfigManager::" + IISAIAppHostConfigManagerMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostConfigManager
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct GetConfigFile
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigPath=%s", ConfigPath.ToString )]
												struct
												{
													BSTR ConfigPath;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigFile=%s, ReturnValue=%s", ConfigFile.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr ConfigFile;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct GetUniqueConfigPath
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigPath=%s", ConfigPath.ToString )]
												struct
												{
													BSTR ConfigPath;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "UniquePath=%s, ReturnValue=%s", UniquePath.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR UniquePath;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostConfigManager method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{0716CAF8-7D05-4A46-8099-77594BE91394}":
			[property.IISAMethodName = "IAppHostConstantValue::" + IISAIAppHostConstantValueMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostConstantValue
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Name
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Name=%s, ReturnValue=%s", Name.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Name;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Value
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value=%u, ReturnValue=%s", Value, ReturnValue.ToString )]
												struct
												{
													UINT32 Value;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostConstantValue method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{B7D381EE-8860-47A1-8AF4-1F33B2B1F325}":
			[property.IISAMethodName = "IAppHostSectionDefinitionCollection::" + IISAIAppHostSectionDefinitionCollectionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostSectionDefinitionCollection
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Count=%u, ReturnValue=%s", Count, ReturnValue.ToString )]
												struct
												{
													UINT32 Count;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigSection=%s, ReturnValue=%s", ConfigSection.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr ConfigSection;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct AddSection
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionName=%s", SectionName.ToString )]
												struct
												{
													BSTR SectionName;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigSection=%s, ReturnValue=%s", ConfigSection.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr ConfigSection;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct DeleteSection
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostSectionDefinitionCollection method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{5B5A68E6-8B9F-45E1-8199-A95FFCCDFFFF}":
			[property.IISAMethodName = "IAppHostConstantValueCollection::" + IISAIAppHostConstantValueCollectionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostConstantValueCollection
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Count=%u, ReturnValue=%s", Count, ReturnValue.ToString )]
												struct
												{
													UINT32 Count;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConstantValue=%s, ReturnValue=%s", ConstantValue.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr ConstantValue;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostConstantValueCollection method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{0DD8A158-EBE6-4008-A1D9-B7ECC8F1104B}":
			[property.IISAMethodName = "IAppHostSectionGroup::" + IISAIAppHostSectionGroupMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostSectionGroup
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionGroup=%u, ReturnValue=%s", SectionGroup, ReturnValue.ToString )]
												struct
												{
													UINT32 SectionGroup;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index=%s", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionGroup=%s, ReturnValue=%s", SectionGroup.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr SectionGroup;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct Sections
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Sections=%s, ReturnValue=%s", Sections.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Sections;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct AddSectionGroup
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionGroupName=%s", SectionGroupName.ToString )]
												struct
												{
													BSTR SectionGroupName;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "SectionGroup=%s, ReturnValue=%s", SectionGroup.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr SectionGroup;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct DeleteSectionGroup
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct Name
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Name=%s, ReturnValue=%s", Name.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Name;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct get_Type
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Type=%s, ReturnValue=%s", Type.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Type;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 10:
						_Struct set_Type
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Type=%s", Type.ToString )]
												struct
												{
													BSTR Type;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostSectionGroup method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{7883CA1C-1112-4447-84C3-52FBEB38069D}":
			[property.IISAMethodName = "IAppHostMethod::" + IISAIAppHostMethodMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostMethod
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Name
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Name=%s, ReturnValue=%s", Name.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Name;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Schema
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Name=%s, ReturnValue=%s", MethodSchema.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr MethodSchema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct CreateInstance
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MethodInstance=%s, ReturnValue=%s", MethodInstance.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr MethodInstance;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostMethod method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{DE095DB1-5368-4D11-81F6-EFEF619B7BCF}":
			[property.IISAMethodName = "IAppHostCollectionSchema::" + IISAIAppHostCollectionSchemaMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostCollectionSchema
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct AddElementNames
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ElementName=%s, ReturnValue=%s", ElementName.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR ElementName;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct GetAddElementSchema
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ElementName=%s", ElementName.ToString )]
												struct
												{
													BSTR ElementName;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Schema=%s, ReturnValue=%s", Schema.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Schema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct RemoveElementSchema
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Schema=%s, ReturnValue=%s", Schema.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Schema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct ClearElementSchema
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Schema=%s, ReturnValue=%s", Schema.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Schema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct IsMergeAppend
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "IsMergeAppend=%s, ReturnValue=%s", IsMergeAppend, ReturnValue.ToString )]
												struct
												{
													VARIANTBOOL IsMergeAppend;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct GetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s", MetadataType.ToString )]
												struct
												{
													BSTR MetadataType;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value( %s ), ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVariant Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct DoesAllowDuplicates
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AllowDuplicates=%s, ReturnValue=%s", AllowDuplicates, ReturnValue.ToString )]
												struct
												{
													VARIANTBOOL AllowDuplicates;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostCollectionSchema method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{EF13D885-642C-4709-99EC-B89561C6BC69}":
			[property.IISAMethodName = "IAppHostElementSchema::" + IISAIAppHostElementSchemaMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostElementSchema
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Name
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Name=%s, ReturnValue=%s", Name.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Name;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct DoesAllowUnschematizedProperties
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AllowUnschematized=%s, ReturnValue=%s", AllowUnschematized, ReturnValue.ToString )]
												struct
												{
													VARIANTBOOL AllowUnschematized;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct GetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s", MetadataType.ToString )]
												struct
												{
													BSTR MetadataType;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value( %s ), ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVariant Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct CollectionSchema
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "CollectionSchema=%s, ReturnValue=%s", CollectionSchema.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr CollectionSchema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct ChildElementSchemas
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "CollectionSchema=%s, ReturnValue=%s", ChildSchemas.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr ChildSchemas;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct PropertySchemas
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "PropertySchemas=%s, ReturnValue=%s", PropertySchemas.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr PropertySchemas;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct IsCollectionDefault
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "IsCollectionDefault=%s, ReturnValue=%s", IsCollectionDefault, ReturnValue.ToString )]
												struct
												{
													VARIANTBOOL IsCollectionDefault;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostElementSchema method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{D6C7CD8F-BB8D-4F96-B591-D3A5F1320269}":
			[property.IISAMethodName = "IAppHostMethodCollection::" + IISAIAppHostMethodCollectionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostMethodCollection
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Count=%u, ReturnValue=%s", Count, ReturnValue.ToString )]
												struct
												{
													UINT32 Count;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Method=%s, ReturnValue=%s", Method.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Method;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostMethodCollection method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{518EB37D-1FF4-42DD-86C3-3140BC35B823}":
			[property.IISAMethodName = "IAppHostElementExtension::" + IISAIAppHostElementExtensionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostElementExtension
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct ProvideElement
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "NewElement=%s", NewElement.ToString )]
												struct
												{
													DCOMMInterfacePointer NewElement;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostElementExtension method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{88E220F3-33E8-4534-AFAC-B4A98ECCF9AE}":
			[property.IISAMethodName = "IAppHostPropertyExtension::" + IISAIAppHostPropertyExtensionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostPropertyExtension
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct ProvideGetProperty
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Element=%s, Property=%s", Element.ToString, Property.ToString )]
												struct
												{
													DCOMMInterfacePointer Element;
													DCOMMInterfacePointer Property;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostPropertyExtension method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{08A90F5F-0702-48D6-B45F-02A9885A9768}":
			[property.IISAMethodName = "IAppHostChildElementCollection::" + IISAIAppHostChildElementCollectionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostChildElementCollection
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Count=%u, ReturnValue=%s", Count, ReturnValue.ToString )]
												struct
												{
													UINT32 Count;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Element=%s, ReturnValue=%s", Element.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr Element;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostChildElementCollection method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{4DFA1DF3-8900-4BC7-BBB5-D1A458C52410}":
			[property.IISAMethodName = "IAppHostConfigException::" + IISAIAppHostConfigExceptionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostConfigException
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct LineNumber
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "LineNumber=%u, ReturnValue=%s", LineNumber, ReturnValue.ToString )]
												struct
												{
													UINT32 LineNumber;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct FileName
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "FileName=%s, ReturnValue=%s", FileName.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR FileName;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct ConfigPath
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigPath=%s, ReturnValue=%s", ConfigPath.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR ConfigPath;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct ErrorLine
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ErrorLine=%s, ReturnValue=%s", ErrorLine.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR ErrorLine;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct PreErrorLine
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "PreErrorLine=%s, ReturnValue=%s", PreErrorLine.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR PreErrorLine;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct PostErrorLine
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "PostErrorLine=%s, ReturnValue=%s", PostErrorLine.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR PostErrorLine;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct ErrorString
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ErrorString=%s, ReturnValue=%s", ErrorString.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR ErrorString;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostConfigException method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{0344CDDA-151E-4CBF-82DA-66AE61E97754}":
			[property.IISAMethodName = "IAppHostElementSchemaCollection::" + IISAIAppHostElementSchemaCollectionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostElementSchemaCollection
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Count
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Count=%u, ReturnValue=%s", Count, ReturnValue.ToString )]
												struct
												{
													UINT32 Count;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct Item
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Index( %s )", Index.ToString )]
												struct
												{
													OLEAUTVariant Index;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ElementSchema=%s, ReturnValue=%s", ElementSchema.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr ElementSchema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostElementSchemaCollection method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{C5C04795-321C-4014-8FD6-D44658799393}":
			[property.IISAMethodName = "IAppHostSectionDefinition::" + IISAIAppHostSectionDefinitionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostSectionDefinition
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Name
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Name=%s, ReturnValue=%s", Name.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Name;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct get_Type
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Type=%s, ReturnValue=%s", Type.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Type;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct set_Type
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Type=%s", Type.ToString )]
												struct
												{
													BSTR Type;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct get_OverrideModeDefault
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "OverrideModeDefault=%s, ReturnValue=%s", OverrideModeDefault.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR OverrideModeDefault;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 7:
						_Struct set_OverrideModeDefault
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "OverrideModeDefault=%s", OverrideModeDefault.ToString )]
												struct
												{
													BSTR OverrideModeDefault;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct get_AllowDefinition
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AllowDefinition=%s, ReturnValue=%s", AllowDefinition.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR AllowDefinition;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct set_AllowDefinition
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AllowDefinition=%s", AllowDefinition.ToString )]
												struct
												{
													BSTR AllowDefinition;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 10:
						_Struct get_AllowLocation
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AllowLocation=%s, ReturnValue=%s", AllowLocation.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR AllowLocation;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 11:
						_Struct set_AllowLocation
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "AllowLocation=%s", AllowLocation.ToString )]
												struct
												{
													BSTR AllowLocation;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostSectionDefinition method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{2D9915FB-9D42-4328-B782-1B46819FAB9E}":
			[property.IISAMethodName = "IAppHostMethodSchema::" + IISAIAppHostMethodSchemaMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostMethodSchema
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct Name
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Name=%s, ReturnValue=%s", Name.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Name;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct InputSchema
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "InputSchema=%s, ReturnValue=%s", InputSchema.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr InputSchema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct OutputSchema
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "OutputSchema=%s, ReturnValue=%s", OutputSchema.ToString, ReturnValue.ToString )]
												struct
												{
													DCOMMInterfacePointerPtr OutputSchema;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct GetMetadata
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "MetadataType=%s", MetadataType.ToString )]
												struct
												{
													BSTR MetadataType;
												}
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value( %s ), ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTVariant Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostMethodSchema method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		case "{EAFE4895-A929-41EA-B14D-613E23F62B71}":
			[property.IISAMethodName = "IAppHostPropertyException::" + IISAIAppHostPropertyExceptionMethodNameTable( property.MSRPCOpnum )]
			_Struct IAppHostPropertyException
			{
				switch( property.MSRPCOpnum )
				{
					case 3:
						_Struct LineNumber
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "LineNumber=%u, ReturnValue=%s", LineNumber, ReturnValue.ToString )]
												struct
												{
													UINT32 LineNumber;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 4:
						_Struct FileName
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "FileName=%s, ReturnValue=%s", FileName.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR FileName;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 5:
						_Struct ConfigPath
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ConfigPath=%s, ReturnValue=%s", ConfigPath.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR ConfigPath;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 6:
						_Struct ErrorLine
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ErrorLine=%s, ReturnValue=%s", ErrorLine.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR ErrorLine;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}

					case 7:
						_Struct PreErrorLine
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "PreErrorLine=%s, ReturnValue=%s", PreErrorLine.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR PreErrorLine;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 8:
						_Struct PostErrorLine
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "PostErrorLine=%s, ReturnValue=%s", PostErrorLine.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR PostErrorLine;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 9:
						_Struct ErrorString
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ErrorString=%s, ReturnValue=%s", ErrorString.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR ErrorString;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}

					case 10:
						_Struct InvalidValue
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "Value=%s, ReturnValue=%s", Value.ToString, ReturnValue.ToString )]
												struct
												{
													BSTR Value;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 11:
						_Struct ValidationFailureReason
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ValidationReason=%s, ReturnValue=%s", ValidationReason, ReturnValue.ToString )]
												struct
												{
													BSTR ValidationReason;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					case 12:
						_Struct ValidationFailureParameters
						{
							switch( property.MSRPCPType )
							{
								case 0x00: //REQUEST
									_Struct Request
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
										}
									}
								
								case 0x02: //RESPONSE
									_Struct Response
									{
										switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( property.MSRPCEncrypted );
											default:
												[IISASummary = FormatString( "ParameterArray=%s, ReturnValue=%s", ParameterArray.ToString, ParameterArray.ToString, ReturnValue.ToString )]
												struct
												{
													OLEAUTWireSafeArray ParameterArray;
													Align4 pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					default:
						switch
						{
							case IsValueNone(property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("IISA", "property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "IISA", "Unknown IAppHostPropertyException method, Opnum:" + property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
	}
}

table IISAIAppHostMethodExtensionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "ProvideMethod";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostMappingExtensionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "GetSiteNameFromSiteId";
		case 4: "GetSiteIdFromSiteName";
		case 5: "GetSiteElementFromSiteId";
		case 6: "MapPath";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostPropertyCollectionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Count";
		case 4: "Item";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostAdminManagerMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "GetAdminSection";
		case 4: "GetMetadata";
		case 5: "SetMetadata";
		case 6: "ConfigManager";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostPropertySchemaMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Name";
		case 4: "Type";
		case 5: "DefaultValue";
		case 6: "IsRequired";
		case 7: "IsUniqueKey";
		case 8: "IsCombinedKey";
		case 9: "IsExpanded";
		case 10: "ValidationType";
		case 11: "ValidationParameter";
		case 12: "GetMetadata";
		case 13: "IsCaseSensitive";
		case 14: "PossibleValues";
		case 15: "DoesAllowInfinite";
		case 16: "IsEncrypted";
		case 17: "TimeSpanFormat";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostConfigLocationMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Path";
		case 4: "Count";
		case 5: "Item";
		case 6: "AddConfigSection";
		case 7: "DeleteConfigSection";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostConfigFileMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "ConfigPath";
		case 4: "FilePath";
		case 5: "Locations";
		case 6: "GetAdminSection";
		case 7: "GetMetaData";
		case 8: "SetMetadata";
		case 9: "ClearInvalidSections";
		case 10: "RootSectionGroup";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostPropertySchemaCollectionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Count";
		case 4: "Item";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostConfigLocationCollectionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Count";
		case 4: "Item";
		case 5: "AddLocation";
		case 6: "DeleteLocation";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostPropertyMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Name";
		case 4: "get_Value";
		case 5: "set_Value";
		case 6: "Clear";
		case 7: "StringValue";
		case 8: "Exception";
		case 9: "GetMetadata";
		case 10: "SetMetadata";
		case 11: "Schema";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostWritableAdminManagerMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 7: "CommitChanges";
		case 8: "get_CommitPath";
		case 9: "set_CommitPath";
		default: "IAppHostAdminManager::" + IISAIAppHostAdminManagerMethodNameTable( Opnum );
	}
}

table IISAIAppHostElementMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Name";
		case 4: "Collection";
		case 5: "Properties";
		case 6: "ChildElements";
		case 7: "IAppHostElement_Opnum7DummyMethod";
		case 8: "SetMetadata";
		case 9: "Schema";
		case 10: "GetElementByName";
		case 11: "GetPropertyByName";
		case 12: "Clear";
		case 13: "Methods";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostElementCollectionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Count";
		case 4: "Item";
		case 5: "AddElement";
		case 6: "DeleteElement";
		case 7: "Clear";
		case 8: "CreateNewElement";
		case 9: "Schema";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostChangeHandlerMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "OnSectionChanges";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostMethodInstanceMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Input";
		case 4: "Output";
		case 5: "Execute";
		case 6: "GetMetadata";
		case 7: "SetMetadata";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostPathMapperMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "MapPath";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostPathMapper2MethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "MapPath";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostConfigManagerMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "GetConfigFile";
		case 4: "GetUniqueConfigPath";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostConstantValueMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Name";
		case 4: "Value";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostSectionDefinitionCollectionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Count";
		case 4: "Item";
		case 5: "AddSection";
		case 6: "DeleteSection";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostConstantValueCollectionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Count";
		case 4: "Item";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostSectionGroupMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Count";
		case 4: "Item";
		case 5: "Sections";
		case 6: "AddSectionGroup";
		case 7: "DeleteSectionGroup";
		case 8: "Name";
		case 9: "get_Type";
		case 10: "set_Type";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostMethodMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Name";
		case 4: "Schema";
		case 5: "CreateInstance";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostCollectionSchemaMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "AddElementNames";
		case 4: "GetAddElementSchema";
		case 5: "RemoveElementSchema";
		case 6: "ClearElementSchema";
		case 7: "IsMergeAppend";
		case 8: "GetMetadata";
		case 9: "DoesAllowDuplicates";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostElementSchemaMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Name";
		case 4: "DoesAllowUnschematizedProperties";
		case 5: "GetMetadata";
		case 6: "CollectionSchema";
		case 7: "ChildElementSchemas";
		case 8: "PropertySchemas";
		case 9: "IsCollectionDefault";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostMethodCollectionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Count";
		case 4: "Item";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostElementExtensionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "ProvideElement";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostPropertyExtensionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "ProvideGetProperty";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostChildElementCollectionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Count";
		case 4: "Item";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostConfigExceptionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "LineNumber";
		case 4: "FileName";
		case 5: "ConfigPath";
		case 6: "ErrorLine";
		case 7: "PreErrorLine";
		case 8: "PostErrorLine";
		case 9: "ErrorString";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostElementSchemaCollectionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Count";
		case 4: "Item";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostSectionDefinitionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Name";
		case 4: "get_Type";
		case 5: "set_Type";
		case 6: "get_OverrideModeDefault";
		case 7: "set_OverrideModeDefault";
		case 8: "get_AllowDefinition";
		case 9: "set_AllowDefinition";
		case 10: "get_AllowLocation";
		case 11: "set_AllowLocation";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostMethodSchemaMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 3: "Name";
		case 4: "InputSchema";
		case 5: "OutputSchema";
		case 6: "GetMetadata";
		default: FormatString("Unknown Opnum(%u)", Opnum);
	}
}

table IISAIAppHostPropertyExceptionMethodNameTable( Opnum )
{
	switch( Opnum )
	{
		case 10: "InvalidValue";
		case 11: "ValidationFailureReason";
		case 12: "ValidationFailureParameters";
		default: "IAppHostConfigException::" + IISAIAppHostConfigExceptionMethodNameTable( Opnum );
	}
}

table IISAGetMetadataMetadataTypeTable( Value, Description )
{
	switch( Value )
	{
		case "pathMapper": FormatString("pathMapper%s", Description? "- Returns the IAppHostPathMapper object" : "");
		case "pathMapper2": FormatString("pathMapper2%s", Description? " - Returns the IAppHostPathMapper2 object" : "");
		case "changeHandler": FormatString("changeHandler%s", Description? " - Returns the IAppHostChangeHandler object" : "");
		case "ignoreInvalidAttributes": FormatString("ignoreInvalidAttributes%s", Description? " - Returns the flag that controls whether the administration system ignores certain types of errors when evaluating the IAppHostProperty part of an IAppHostElement" : "");
		case "ignoreInvalidRanges": FormatString("ignoreInvalidRanges%s", Description? " - Returns the flag that controls whether the administration system should ignore certain types of errors when evaluating the IAppHostProperty part of an IAppHostElement" : "");
		case "ignoreInvalidDecryption": FormatString("ignoreInvalidDecryption%s", Description? " - Returns the flag that controls whether the administration system should ignore decryption errors when evaluating the IAppHostProperty part of an IAppHostElement" : "");
		case "expandEnvironmentStrings": FormatString("expandEnvironmentStrings%s", Description? " - Returns the flag that controls whether the administration system should expand environment variables when parsing the configuration system" : "");
		case "disableExtensions": FormatString("disableExtensions%s", Description? " - Returns a flag that determines whether the administration system supports custom server-side extensions that can extend how the system evaluates IAppHostElement objects" : "");
		case "availableSections": FormatString("availableSections%s", Description? " - Returns a comma-separated series of strings that contains all the names of the available administration section names that are supported by the administration system" : "");
		case "mappingExtension": FormatString("mappingExtension%s", Description? " - Returns an object that is used to directly access the hierarchy mapping system of the administration system" : "");
		case "hideExceptionPhysicalPath": FormatString("hideExceptionPhysicalPath%s", Description? " - Returns the flag that controls whether the administration system should give information about the physical path of the configuration file in exception messages"  : "");
		case "lockMetadata": FormatString("lockMetadata%s", Description? " - Returns the flag that controls whether metadata can be modified with the SetMetadata call"  : "");
		default: FormatString("Unknown Metadata Type (%s)", Value);
	}
}

table IISAIAppHostAdminManagerMetadataTypeTable( Value, Description )
{
	switch( Value )
	{	
		case "pathMapper": FormatString("pathMapper%s", Description? " - Sets the IAppHostPathMapper object" : "");
		case "pathMapper2": FormatString("pathMapper2%s", Description? " -  Sets the IAppHostPathMapper2 object" : "");
		case "changeHandler": FormatString("changeHandler%s", Description? " - Sets the IAppHostChangeHandler object" : "");
		case "ignoreInvalidAttributes": FormatString("ignoreInvalidAttributes%s", Description? " - Sets the flag that controls whether the administration system should ignore certain types of errors when evaluating the IAppHostProperty part of an IAppHostElement" : "");
		case "ignoreInvalidRanges": FormatString("ignoreInvalidRanges%s", Description? " - Sets the flag that controls whether the administration system should ignore certain range validation errors when it evaluates the IAppHostProperty part of an IAppHostElement" : "");
		case "ignoreInvalidDecryption": FormatString("ignoreInvalidDecryption%s", Description? " - Sets the flag that controls whether the administration system should ignore decryption errors when evaluating the IAppHostProperty part of an IAppHostElement" : "");
		case "expandEnvironmentStrings": FormatString("expandEnvironmentStrings%s", Description? " - Sets the flag that controls whether the administration system should expand environment variables when parsing the configuration system" : "");
		case "disableExtensions": FormatString("disableExtensions%s", Description? " - Sets a flag that determines whether the administration system supports custom server-side extensions that can extend how the system evaluates IAppHostElement objects" : "");
		case "hideExceptionPhysicalPath": FormatString("hideExceptionPhysicalPath%s", Description? " - Sets the flag that controls whether the administration system should give information about the physical path of the configuration file in exception messages" : "");
		case "lockMetadata": FormatString("lockMetadata%s", Description? " - Sets the flag that controls whether metadata can be modified with the SetMetadata call" : ""); 
		default: FormatString("Unknown Metadata Type (%s)", Value);
	}
}

table IISAIAppHostPropertyMetadataType( Value, Description )
{
	switch( Value )
	{
		case "encryptionProvider": FormatString("encryptionProvider%s", Description? " - A string that represents server-specific data that defines how the property should be encrypted or decrypted on the server" : "" ); 
		case "isPropertyEncrypted": FormatString("isPropertyEncrypted%s", Description? " - A Boolean that determines if the property is encrypted" : "" );
		case "isDefaultValue": FormatString("isDefaultValue%s", Description? " - A Boolean that represents whether the specified property was explicitly set in the administration system or is a system default" : "" );
		case "isInheritedFromDefault": FormatString("isInheritedFromDefault%s", Description? " - A Boolean that represents whether the specified property was explicitly set in the administration system or is a globally defined default" : "" );
		case "isLocked": FormatString("isLocked%s", Description? " - A Boolean that represents whether this property can be set at deeper hierarchy paths" : "" ); 
		default: FormatString("Unknown Metadata Type (%s)", Value);
	}
}

table IISAIAppHostElementMetadataTypeTable( Value, Description )
{
	switch( Value )
	{
		case "overrideMode": FormatString("overrideMode%s", Description? " - A string that represents the explicit override mode of the specified IAppHostElement object" : ""); 
		case "configSource": FormatString("configSource%s", Description? " - A string that represents an optional redirection path from which the specified IAppHostElement object was retrieved" : "");
		case "childSource": FormatString("childSource%s", Description? " - A string that represents an optional redirection path from which the specified IAppHostElement object was retrieved" : "");
		case "lockItem": FormatString("lockItem%s", Description? " - A Boolean that represents whether the specified IAppHostElement object can be set at deeper hierarchy paths" : "");
		case "lockAllElementsExcept": FormatString("lockAllElementsExcept%s", Description? " - A string that represents a comma-delimited list of child element names that are allowed to be set at deeper hierarchy paths" : "");
		case "lockElements": FormatString("lockElements%s", Description? " - A string that represents a comma-delimited list of child element names that are not allowed to be set at deeper hierarchy paths" : ""); 
		case "lockAllAttributesExcept": FormatString("lockAllAttributesExcept%s", Description? " - A string that represents a comma-delimited list of property names that are allowed to be set at deeper hierarchy paths" : "");
		case "lockAttributes": FormatString("lockAttributes%s", Description? " - A string that represents a comma-delimited list of property names that are not allowed to be set at deeper hierarchy paths" : ""); 
		default: FormatString("Unknown Metadata Type (%s)", Value);
	}
}
