//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-QoS
//#
//#  Details:                
//#
//#  Public References:      QoS.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/14/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsQoSPacer, "{914ED502-B70D-4add-B758-95692854F8A3}")]
Protocol QoS_MicrosoftWindowsQoSPacer = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1:
			[property.ETLSummary = this.ToString]
			Switch(property.EventVersion)
			{
				case 0: QoS_QOS_EVENT_PACER_CREATE_FLOW_V0 QOS_EVENT_PACER_CREATE_FLOW_V0;
				case 1: QoS_QOS_EVENT_PACER_CREATE_FLOW QOS_EVENT_PACER_CREATE_FLOW;
			}
		case 2:
			[property.ETLSummary = this.ToString]
			Switch(property.EventVersion)
			{
				case 0: QoS_QOS_EVENT_PACER_UPDATE_FLOW_FAILURE_V0 QOS_EVENT_PACER_UPDATE_FLOW_FAILURE_V0;
				case 1: QoS_QOS_EVENT_PACER_UPDATE_FLOW QOS_EVENT_PACER_UPDATE_FLOW;
			}
		case 3:
			[property.ETLSummary = this.ToString]
			Switch(property.EventVersion)
			{
				case 0: QoS_QOS_EVENT_PACER_START_V0 QOS_EVENT_PACER_START_V0;
				case 1: QoS_QOS_EVENT_PACER_START QOS_EVENT_PACER_START;
			}
		case 4:
			[property.ETLSummary = this.ToString]
			Switch(property.EventVersion)
			{
				case 0: QoS_QOS_EVENT_PACER_STOP_V0 QOS_EVENT_PACER_STOP_V0;
				case 1: QoS_QOS_EVENT_PACER_STOP QOS_EVENT_PACER_STOP;
			}
		case 5: [property.ETLSummary = this.ToString] QoS_QOS_EVENT_PACER_UPDATE_FLOW_SUCCESS_V0 QOS_EVENT_PACER_UPDATE_FLOW_SUCCESS_V0;
		case 6: [property.ETLSummary = this.ToString] QoS_QOS_EVENT_PACER_CLEANUP_FLOW QOS_EVENT_PACER_CLEANUP_FLOW;
		case 7: [property.ETLSummary = this.ToString] QoS_QOS_EVENT_PACER_PACKET_DROP QOS_EVENT_PACER_PACKET_DROP;
		case 8: [property.ETLSummary = this.ToString] QoS_QOS_EVENT_PACER_NONCONF_QTC QOS_EVENT_PACER_NONCONF_QTC;
		case 9: [property.ETLSummary = this.ToString] QoS_QOS_EVENT_PACER_ALLOW_APP_DSCP_MARKING QOS_EVENT_PACER_ALLOW_APP_DSCP_MARKING;
		case 10: [property.ETLSummary = this.ToString] QoS_QOS_EVENT_PACER_TBC_SCHEDULING QOS_EVENT_PACER_TBC_SCHEDULING;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table QoS_valuemap_flowtype(value)
{
	switch(value)
	{
		case 0: "GQoS";
		case 1: "TC";
		case 2: "EQoS";
		case 3: "Full";
		case 4: "IDP";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table QoS_valuemap_servicetype(value)
{
	switch(value)
	{
		case 0: "NOTRAFFIC";
		case 1: "BESTEFFORT";
		case 2: "CONTROLLEDLOAD";
		case 3: "GUARANTEED";
		case 4: "NETWORK_UNAVAILABLE";
		case 5: "GENERAL_INFORMATION";
		case 6: "NOCHANGE";
		case 9: "NONCONFORMING";
		case 10: "NETWORK_CONTROL";
		case 13: "QUALITATIVE";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table QoS_valuemap_dropreason(value)
{
	switch(value)
	{
		case 0: "Non-conformance";
		case 1: "Excessive delay";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct QoS_QOS_EVENT_PACER_CREATE_FLOW_V0 = FormatString("Create %s at %s bytes/sec with status %s", FlowType.ToString, SendSpecTokenRate.ToString, Status.ToString)
{
	WinErrorCode Status;
	UINT32 FlowType = QoS_valuemap_flowtype(this);
	UINT32 SendSpecTokenRate;
	UINT32 SendSpecTokenBucketSize;
	UINT32 SendSpecPeakBandwidth;
	UINT32 SendSpecLatency;
	UINT32 SendSpecDelayVariation;
	UINT32 SendSpecServiceType;
	UINT32 SendSpecMaxSduSize;
	UINT32 SendSpecMinimumPolicedSize;
	UINT32 QoSObjectBufferLen;
	BLOB(QoSObjectBufferLen) QoSObjectBuffer;
}
Struct QoS_QOS_EVENT_PACER_CREATE_FLOW = FormatString("PACER: Flow created with status %s (type=%s, rate=%sBps, service=%s, dscp=%s, 802.1p=%s, system=%s)", Status.ToString, FlowType.ToString, SendSpecTokenRate.ToString, SendSpecServiceType.ToString, DsClass.ToString, TrafficClass.ToString, DefaultSystemFlow.ToString)
{
	WinErrorCode Status;
	UINT32 FlowType = QoS_valuemap_flowtype(this);
	UINT32 SendSpecTokenRate;
	UINT32 SendSpecTokenBucketSize;
	UINT32 SendSpecPeakBandwidth;
	UINT32 SendSpecLatency;
	UINT32 SendSpecDelayVariation;
	UINT32 SendSpecServiceType = QoS_valuemap_servicetype(this);
	UINT32 SendSpecMaxSduSize;
	UINT32 SendSpecMinimumPolicedSize;
	INT16 DsClass;
	INT16 TrafficClass;
	UINT32 QoSObjectBufferLen;
	BLOB(QoSObjectBufferLen) QoSObjectBuffer;
	UINT8 DefaultSystemFlow;
}
Struct QoS_QOS_EVENT_PACER_UPDATE_FLOW_FAILURE_V0 = FormatString("Update %s from %s to %s with status %s", FlowType.ToString, OldSendSpecTokenRate.ToString, NewSendSpecTokenRate.ToString, Status.ToString)
{
	WinErrorCode Status;
	UINT32 FlowType = QoS_valuemap_flowtype(this);
	UINT32 OldSendSpecTokenRate;
	UINT32 OldSendSpecTokenBucketSize;
	UINT32 OldSendSpecPeakBandwidth;
	UINT32 OldSendSpecLatency;
	UINT32 OldSendSpecDelayVariation;
	UINT32 OldSendSpecServiceType;
	UINT32 OldSendSpecMaxSduSize;
	UINT32 OldSendSpecMinimumPolicedSize;
	UINT32 NewSendSpecTokenRate;
	UINT32 NewSendSpecTokenBucketSize;
	UINT32 NewSendSpecPeakBandwidth;
	UINT32 NewSendSpecLatency;
	UINT32 NewSendSpecDelayVariation;
	UINT32 NewSendSpecServiceType;
	UINT32 NewSendSpecMaxSduSize;
	UINT32 NewSendSpecMinimumPolicedSize;
	UINT32 NewQoSObjectBufferLen;
	BLOB(NewQoSObjectBufferLen) NewQoSObjectBuffer;
}
Struct QoS_QOS_EVENT_PACER_UPDATE_FLOW = FormatString("PACER: Flow updated with status %s (rate=%sBps, service=%s, dscp=%s, 802.1p=%s)", Status.ToString, SendSpecTokenRate.ToString, SendSpecServiceType.ToString, DsClass.ToString, TrafficClass.ToString)
{
	WinErrorCode Status;
	UINT32 FlowType = QoS_valuemap_flowtype(this);
	UINT32 SendSpecTokenRate;
	UINT32 SendSpecTokenBucketSize;
	UINT32 SendSpecPeakBandwidth;
	UINT32 SendSpecLatency;
	UINT32 SendSpecDelayVariation;
	UINT32 SendSpecServiceType = QoS_valuemap_servicetype(this);
	UINT32 SendSpecMaxSduSize;
	UINT32 SendSpecMinimumPolicedSize;
	INT16 DsClass;
	INT16 TrafficClass;
	UINT32 NewQoSObjectBufferLen;
	BLOB(NewQoSObjectBufferLen) NewQoSObjectBuffer;
	UINT32 AffectedPackets;
}
Struct QoS_QOS_EVENT_PACER_START_V0 = FormatString("Start Pacer on NetLuid=%s (%s)", NetLuid.ToString, FriendlyName.ToString)
{
	BLOB(8) NetLuid;
	UINT32 NdisMediumType;
	UnicodeString FriendlyName;
	UnicodeString DeviceName;
}
Struct QoS_QOS_EVENT_PACER_START = FormatString("PACER: Starting adapter %s (luid=%s)", FriendlyName.ToString, NetLuid.ToString)
{
	UINT64 NetLuid;
	UINT32 NdisMediumType;
	UINT32 FriendlyNameLen;
	UnicodeString(FriendlyNameLen) FriendlyName;
	UINT32 DeviceNameLen;
	UnicodeString(DeviceNameLen) DeviceName;
	UINT32 Context;
}
Struct QoS_QOS_EVENT_PACER_STOP_V0 = FormatString("Stop Pacer on NetLuid=%s (%s)", NetLuid.ToString, FriendlyName.ToString)
{
	BLOB(8) NetLuid;
	UINT32 NdisMediumType;
	UnicodeString FriendlyName;
	UnicodeString DeviceName;
}
Struct QoS_QOS_EVENT_PACER_STOP = FormatString("PACER: Stopping adapter %s (luid=%s)", FriendlyName.ToString, NetLuid.ToString)
{
	UINT64 NetLuid;
	UINT32 NdisMediumType;
	UINT32 FriendlyNameLen;
	UnicodeString(FriendlyNameLen) FriendlyName;
	UINT32 DeviceNameLen;
	UnicodeString(DeviceNameLen) DeviceName;
	UINT32 Context;
}
Struct QoS_QOS_EVENT_PACER_UPDATE_FLOW_SUCCESS_V0 = FormatString("Update %s from %s to %s", FlowType.ToString, OldSendSpecTokenRate.ToString, NewSendSpecTokenRate.ToString)
{
	UINT32 FlowType = QoS_valuemap_flowtype(this);
	UINT32 OldSendSpecTokenRate;
	UINT32 OldSendSpecTokenBucketSize;
	UINT32 OldSendSpecPeakBandwidth;
	UINT32 OldSendSpecLatency;
	UINT32 OldSendSpecDelayVariation;
	UINT32 OldSendSpecServiceType;
	UINT32 OldSendSpecMaxSduSize;
	UINT32 OldSendSpecMinimumPolicedSize;
	UINT32 NewSendSpecTokenRate;
	UINT32 NewSendSpecTokenBucketSize;
	UINT32 NewSendSpecPeakBandwidth;
	UINT32 NewSendSpecLatency;
	UINT32 NewSendSpecDelayVariation;
	UINT32 NewSendSpecServiceType;
	UINT32 NewSendSpecMaxSduSize;
	UINT32 NewSendSpecMinimumPolicedSize;
	UINT32 NewQoSObjectBufferLen;
	BLOB(NewQoSObjectBufferLen) NewQoSObjectBuffer;
	UINT32 AffectedPackets;
}
Struct QoS_QOS_EVENT_PACER_CLEANUP_FLOW = FormatString("PACER: Flow deleted (dropped=%s, scheduled=%s/%s, transmitted=%s/%s, nbl=%s/%s)", DroppedPackets.ToString, PacketsScheduled.ToString, BytesScheduled.ToString, PacketsTransmitted.ToString, BytesTransmitted.ToString, NblComplete.ToString, NblSent.ToString)
{
	UINT32 DroppedPackets;
	UINT32 PacketsScheduled;
	UINT32 PacketsTransmitted;
	UINT64 BytesScheduled;
	UINT64 BytesTransmitted;
	UINT32 NblSent;
	UINT32 NblComplete;
}
Struct QoS_QOS_EVENT_PACER_PACKET_DROP = FormatString("PACER: Packet dropped, reason=%s", DropReason.ToString)
{
	UINT32 DropReason = QoS_valuemap_dropreason(this);
}
Struct QoS_QOS_EVENT_PACER_NONCONF_QTC = FormatString("PACER: Non-conformance marking, dscp=%s, 802.1p=%s, WMM=%s", DsClass.ToString, TrafficClass.ToString, Wmm.ToString)
{
	INT16 DsClass;
	INT16 TrafficClass;
	INT16 Wmm;
}
Struct QoS_QOS_EVENT_PACER_ALLOW_APP_DSCP_MARKING = FormatString("PACER: Application-based DSCP marking policy state=%s", Allow.ToString)
{
	UINT32 Allow;
}
Struct QoS_QOS_EVENT_PACER_TBC_SCHEDULING = FormatString("PACER: Packet rescheduled (eligible=%s/%s, first-delta=%s, last-delta=%s)", IneligibleCount.ToString, TotalCount.ToString, IneligibleFirstDelta.ToString, IneligibleLastDelta.ToString)
{
	UINT32 IneligibleCount;
	UINT32 TotalCount;
	UINT32 IneligibleFirstDelta;
	UINT32 IneligibleLastDelta;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsQoSPacer_Keyword, "{914ED502-B70D-4add-B758-95692854F8A3}")]
struct QoS_MicrosoftWindowsQoSPacer_Keyword
{
	UINT64 Reserved1:32 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 Reserved2:18 = FormatString("        (%s)", this.ToBitString);
}
