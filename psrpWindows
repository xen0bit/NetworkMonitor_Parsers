//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  PowerShell Remoting Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-PSRP]: PowerShell Remoting Protocol Specification (5.0)
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 8/26/2009
//#                          Minor, 6/4/2010
//#
//####

//
// 2.2.1   PowerShell Remoting Protocol Message
//
[DataTypeByteOrder = LittleEndian]
Struct PSRPMessage = FormatString("%s- %s (%s %sFragment) ", Destination == 1? "Client" : "Server", PSRPMessageTypeTable( MessageType, FALSE ), Property.PSRPIsStartFragment? "Start" : "", Property.PSRPIsEndFragment? "End " : "")
{
	[
		BuildConversationWithParent (Property.PSRPObjectId),
		Conversation.ConversationDescription = FormatString("(ObjectId: %d) ConvID = %d", Property.PSRPObjectId, ConvID)
	]
	UINT32 Destination = PSRPDestinationTable( this );
	[ Property.PSRPMessageType ]
	UINT32 MessageType = PSRPMessageTypeTable( this, TRUE);
	GUID(TRUE) RPID;
	GUID(TRUE) PID;
	UINT24 BOM;
	Switch( MessageType )
	{
		Case 0x00010002: PSRPSessionCapability		SessionCapability;
		Case 0x00010004: PSRPInitRunspacepool		InitRunspacepool;
		Case 0x00010005: PSRPPublicKey				PublicKey;
		Case 0x00010006: PSRPEncryptedSessionKey	EncryptedSessionKey;
		Case 0x00010007: PSRPPublicKeyRequest		PublicKeyRequest;
		Case 0x00021002: PSRPSetMaxRunspaces		SetMaxRunspaces;
		Case 0x00021003: PSRPSetMinRunspaces		SetMinRunspaces;
		Case 0x00021004: PSRPRunspaceAvailability	RunspaceAvailability;
		Case 0x00021005: PSRPRunspacepoolState		RunspacepoolState;
		Case 0x00021006: PSRPCreatePipeline			CreatePipeline;
		Case 0x00021007: PSRPGetAvailableRunspaces	GetAvailableRunspaces;
		Case 0x00021008: PSRPUserEvent				UserEvent;
		Case 0x00021009: PSRPApplicationPrivateData ApplicationPrivateData;
		Case 0x0002100A: PSRPGetCommandMetadata		GetCommandMetadata;
		Case 0x00021100: PSRPHostCall				RunspacepoolHostCall;
		Case 0x00021101: PSRPHostResponse			RunspacepoolHostResponse;
		Case 0x00041002: PSRPPipelineInput			PipelineInput;
		Case 0x00041004: PSRPPipelineOutput			PipelineOutput;
		Case 0x00041005: PSRPErrorRecord			ErrorRecord;
		Case 0x00041006: PSRPPipelineState			PipelineState;
		Case 0x00041007: PSRPDebugRecord			DebugRecord;
		Case 0x00041008: PSRPVerboseRecord			VerboseRecord;
		Case 0x00041009: PSRPWarningRecord			WarningRecord;
		Case 0x00041010: PSRPProgressRecord			ProgressRecord;
		Case 0x00041100: PSRPHostCall				PipelineHostCall;
		Case 0x00041101: PSRPHostResponse			PipelineHostResponse;
		Default:
			Struct
			{
				ReportParserError(ParserErrorProtocolClassWindows, "PSRP", "Unknow Message Type") Unknown;
				BLOB(FrameLength - FrameOffset) UnknowData;
			}
	}
}

//
// 3.1.5.3.1 CreationXml Element 
//
[ RegisterBefore(WSMVShellType.OtherElement, PSRPCreationXml, String(FrameData, FrameOffset, Property.XMLEncoding, 12) == "<creationXml") ]
Struct PSRPCreationXml
{
	[Post.Local.CreationXml_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("creationXml") STag;
	switch
	{
		Case !Local.CreationXml_IsEmpty:
			struct
			{
				PSRP  CreationXml;
				XmlTag("creationXml") ETag;
			}
	}
}

[
  RegisterBefore(WSMVshellReceiveResponseType.Stream.StreamValue, PSRPReceiveStream, Contains(Property.XMLTagAttributes, "stdout") && AsciiString(FrameData, FrameOffset, 2) == "AA"),
  RegisterBefore(WSMVshellCommandLineType.Arguments.Value, PSRPCommandArguments, Property.WSMVshellCommandLineTypeCommand == "" && AsciiString(FrameData, FrameOffset, 2) == "AA"),
  RegisterBefore(WSMVshellSendType.Stream.StreamValue, PSRPSendStream, (Contains(Property.XMLTagAttributes, "stdin") || Contains(Property.XMLTagAttributes, "pr"))&& AsciiString(FrameData, FrameOffset, 2) == "AA")
]
[DataTypeEncoding = 1]
Protocol PSRP = "PowerShell Messages"
{
	[ Local.BeginOffset = FrameOffset ]
	While PSRPFragments[ !IsValueNone(UINT8(FrameData, FrameOffset + 3)) && (UINT8(FrameData, Local.BeginOffset + (FrameOffset - Local.BeginOffset + 2)/3*4 ) != "<" ) ]
	{
		PSRPPacketFragment PacketFragment;
	}
}

//
// 2.2.4 Packet Fragment
//
[DataTypeByteOrder = BigEndian]
Struct PSRPPacketFragment = Property.PSRPPacketFragmentSummary
{
	[ Property.PSRPObjectId ]
	UINT64 ObjectId;
	UINT64 FragmentId;
	UINT8 Reserved:6 = FormatString("(%s)", this.ToBitString);
	[ Property.PSRPIsEndFragment ]
	UINT8 E:1 = FormatString("       (%s) %s", this.ToBitString, this? "End fragment" : "Not an End fragment");
	[ Property.PSRPIsStartFragment ]
	UINT8 S:1 = FormatString("       (%s) %s", this.ToBitString, this? "Start fragment" : "Not an Start fragment");
	UINT32 BlobLength;
	
	[ Property.PSRPPacketFragmentSummary = FormatString("ObjectId = %u, FragmentId = %u ", ObjectId, FragmentId) ]
	Switch
	{
		Case BlobLength > 0 && !Property.PSRPIsStartFragment:
			[ Property.PSRPPacketFragmentSummary  = Property.PSRPPacketFragmentSummary + "RSRP Continuation Data" ]
			BLOB( BlobLength ) RSRPContinuationData;
		Case BlobLength > 0: 
			[ DataFieldFrameLength = BlobLength + FrameOffset]
			[ Property.PSRPPacketFragmentSummary  = Property.PSRPPacketFragmentSummary + this.ToString ]
			PSRPMessage PSRPMessage;
	}
}

Table PSRPDestinationTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "The message is targeted to a PowerShell client.";
		Case 0x00000002: "The message is targeted to a PowerShell server.";
		Default: FormatString("Unknow Value(%u)", Value);
	}
}

Table PSRPMessageTypeTable( Value, Description)
{
	Switch( Value )
	{
		Case 0x00010002: FormatString("SESSION_CAPABILITY %s", Description? "- Session capability.": "");
		Case 0x00010003: FormatString("CLOSE_SESSION %s", Description? "- Close session.": "");
		Case 0x00010004: FormatString("INIT_RUNSPACEPOOL %s", Description? "- Initialize RunspacePool.": "");
		Case 0x00010005: FormatString("PUBLIC_KEY %s", Description? "- Public key.": "");
		Case 0x00010006: FormatString("ENCRYPTED_SESSION_KEY %s", Description? "- Encrypted session key.": "");
		Case 0x00010007: FormatString("PUBLIC_KEY_REQUEST %s", Description? "- Public key request.": "");
		Case 0x00021002: FormatString("SET_MAX_RUNSPACES %s", Description? "- Set maximum runspaces in a RunspacePool.": "");
		Case 0x00021003: FormatString("SET_MIN_RUNSPACES %s", Description? "- Set minimum runspaces in a RunspacePool.": "");
		Case 0x00021004: FormatString("RUNSPACE_AVAILABILITY %s", Description? "- A response to either set maximum runspaces or set minimum runspaces in a RunspacePool or request for available runspaces in a RunspacePool.": "");
		Case 0x00021005: FormatString("RUNSPACEPOOL_STATE %s", Description? "- State information of a RunspacePool.": "");
		Case 0x00021006: FormatString("CREATE_PIPELINE %s", Description? "- Create a PowerShell and invoke it in the specified RunspacePool.": "");
		Case 0x00021007: FormatString("GET_AVAILABLE_RUNSPACES %s", Description? "- Get the number of available runspaces in a RunspacePool.": "");
		Case 0x00021008: FormatString("USER_EVENT %s", Description? "- Report a user-defined event from a remote runspace.": "");
		Case 0x00021009: FormatString("APPLICATION_PRIVATE_DATA %s", Description? "- Application private data: data private to the application using the PowerShell remoting protocol on the server and client.": "");
		Case 0x0002100A: FormatString("GET_COMMAND_METADATA %s", Description? "- Get command metadata for commands available in a RunspacePool.": "");
		Case 0x00021100: FormatString("RUNSPACEPOOL_HOST_CALL %s", Description? "- Method call on the host associated with the RunspacePool on the server.": "");
		Case 0x00021101: FormatString("RUNSPACEPOOL_HOST_RESPONSE %s", Description? "- Response from a host call executed on the PowerShell client RunspacePool's host.": "");
		Case 0x00041002: FormatString("PIPELINE_INPUT %s", Description? "- Input to a PowerShell on the server.": "");
		Case 0x00041003: FormatString("END_OF_PIPELINE_INPUT %s", Description? "- Close the input collection for the PowerShell on the server.": "");
		Case 0x00041004: FormatString("PIPELINE_OUTPUT %s", Description? "- Output of a PowerShell on the server.": "");
		Case 0x00041005: FormatString("ERROR_RECORD %s", Description? "- Error record from a PowerShell on the server.": "");
		Case 0x00041006: FormatString("PIPELINE_STATE %s", Description? "- State information of a PowerShell on the server.": "");
		Case 0x00041007: FormatString("DEBUG_RECORD %s", Description? "- Debug record from a PowerShell on the server.": "");
		Case 0x00041008: FormatString("VERBOSE_RECORD %s", Description? "- Verbose record from a PowerShell on the server.": "");
		Case 0x00041009: FormatString("WARNING_RECORD %s", Description? "- Warning record from a PowerShell on the server.": "");
		Case 0x00041010: FormatString("PROGRESS_RECORD %s", Description? "- Progress record from a PowerShell on the server.": "");
		Case 0x00041100: FormatString("PIPELINE_HOST_CALL %s", Description? "- Method call on the host associated with the pipeline invocation settings on the server.": "");
		Case 0x00041101: FormatString("PIPELINE_HOST_RESPONSE %s", Description? "- Response from a host call executed on the PowerShell client's host.": "");
		Default: FormatString("Unknow Value(%0x8X)", Value);
	}
}

//
// 2.2.2.1 SESSION_CAPABILITY
//
Struct PSRPSessionCapability
{
	String(UTF8, FrameLength - FrameOffset) SessionCapabilityData;
}

//
// 2.2.2.3 INIT_RUNSPACEPOOL
//
Struct PSRPInitRunspacepool
{
	String(UTF8, FrameLength - FrameOffset) InitRunspacepoolData;
}

//
// 2.2.2.4 PUBLIC_KEY
//
Struct PSRPPublicKey
{
	String(UTF8, FrameLength - FrameOffset) PublicKeyData;
}

//
// 2.2.2.5 ENCRYPTED_SESSION_KEY
//
Struct PSRPEncryptedSessionKey
{
	String(UTF8, FrameLength - FrameOffset) EncryptedSessionKeyData;
}

//
// 2.2.2.6 PUBLIC_KEY_REQUEST
//
Struct PSRPPublicKeyRequest
{
	String(UTF8, FrameLength - FrameOffset) PublicKeyRequestData;
}

//
// 2.2.2.7 SET_MAX_RUNSPACES
//
Struct PSRPSetMaxRunspaces
{
	String(UTF8, FrameLength - FrameOffset) SetMaxRunspacesData;
}

//
// 2.2.2.8 SET_MIN_RUNSPACES
//
Struct PSRPSetMinRunspaces
{
	String(UTF8, FrameLength - FrameOffset) SetMinRunspacesData;
}

//
// 2.2.2.9 RUNSPACE_AVAILABILITY
//
Struct PSRPRunspaceAvailability
{
	String(UTF8, FrameLength - FrameOffset) RunspaceAvailabilityData;
}

//
// 2.2.2.10 RUNSPACEPOOL_STATE
//
Struct PSRPRunspacepoolState
{
	String(UTF8, FrameLength - FrameOffset) RunspacepoolStateData;
}

//
// 2.2.2.11 CREATE_PIPELINE
//
Struct PSRPCreatePipeline
{
	String(UTF8, FrameLength - FrameOffset) CreatePipelineData;
}

//
// 2.2.2.12 GET_AVAILABLE_RUNSPACES
//
Struct PSRPGetAvailableRunspaces
{
	String(UTF8, FrameLength - FrameOffset) GetAvailableRunspacesData;
}

//
// 2.2.2.13 USER_EVENT
//
Struct PSRPUserEvent
{
	String(UTF8, FrameLength - FrameOffset) UserEventData;
}

//
// 2.2.2.14 APPLICATION_PRIVATE_DATA
//
Struct PSRPApplicationPrivateData
{
	String(UTF8, FrameLength - FrameOffset) ApplicationPrivateDataData;
}

//
// 2.2.2.15 Get_COMMAND_METADATA
//
Struct PSRPGetCommandMetadata
{
	String(UTF8, FrameLength - FrameOffset) GetCommandMetadataData;
}

//
// 2.2.2.16 RUNSPACEPOOL_HOST_CALL, 2.2.2.27 PIPELINE_HOST_CALL
//
Struct PSRPHostCall
{
	String(UTF8, FrameLength - FrameOffset) HostCallData;
}

//
// 2.2.2.17 RUNSPACEPOOL_HOST_RESPONSE, 2.2.2.28 PIPELINE_HOST_RESPONSE 
//
Struct PSRPHostResponse
{
	String(UTF8, FrameLength - FrameOffset) HostResponseData;
}

//
// 2.2.2.18 PIPELINE_INPUT
//
Struct PSRPPipelineInput
{
	String(UTF8, FrameLength - FrameOffset) PipelineInputData;
}

//
// 2.2.2.20 PIPELINE_OUTPUT
//
Struct PSRPPipelineOutput
{
	String(UTF8, FrameLength - FrameOffset) PipelineOutputData;
}

//
// 2.2.2.21 ERROR_RECORD 
//
Struct PSRPErrorRecord
{
	String(UTF8, FrameLength - FrameOffset) ErrorRecordData;
}

//
// 2.2.2.22 PIPELINE_STATE 
//
Struct PSRPPipelineState
{
	String(UTF8, FrameLength - FrameOffset) PipelineStateData;
}

//
// 2.2.2.23 DEBUG_RECORD 
//
Struct PSRPDebugRecord
{
	String(UTF8, FrameLength - FrameOffset) DebugRecordData;
}

//
// 2.2.2.24 VERBOSE_RECORD 
//
Struct PSRPVerboseRecord
{
	String(UTF8, FrameLength - FrameOffset) VerboseRecordData;
}

//
// 2.2.2.25 WARNING_RECORD
//
Struct PSRPWarningRecord
{
	String(UTF8, FrameLength - FrameOffset) WarningRecordData;
}

//
// 2.2.2.26 PROGRESS_RECORD 
//
Struct PSRPProgressRecord
{
	String(UTF8, FrameLength - FrameOffset) ProgressRecordData;
}
