//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-RemoteAssistance-Exe
//#
//#  Details:                
//#
//#  Public References:      RemoteAssistance-Exe.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsRemoteAssistance, "{5b0a651a-8807-45cc-9656-7579815b6af0}")]
Protocol RemoteAssistanceExe_MicrosoftWindowsRemoteAssistance = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] RemoteAssistanceExe_EnterFunction EnterFunction;
		case 2: [property.ETLSummary = this.ToString] RemoteAssistanceExe_LeaveFunction LeaveFunction;
		case 3: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Critical_Error Critical_Error;
		case 4: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Recoverable_Error Recoverable_Error;
		case 5: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Branch_On Branch_On;
		case 6: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Switch_On Switch_On;
		case 7: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Enter_Conditional_Block Enter_Conditional_Block;
		case 8: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Exit_Conditional_Block Exit_Conditional_Block;
		case 9: [property.ETLSummary = this.ToString] RemoteAssistanceExe_COM_Problem COM_Problem;
		case 10: [property.ETLSummary = this.ToString] RemoteAssistanceExe_SMAPI_Problem SMAPI_Problem;
		case 11: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Bad_Password_Problem Bad_Password_Problem;
		case 12: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Session_Log_Problem Session_Log_Problem;
		case 13: [property.ETLSummary = this.ToString] RemoteAssistanceExe_RA_Starting RA_Starting;
		case 14: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Invitation_Opened Invitation_Opened;
		case 15: [property.ETLSummary = this.ToString] RemoteAssistanceExe_RDP_Connection_Made RDP_Connection_Made;
		case 16: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Password_Verified Password_Verified;
  //	case 17: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Event_17 Event_17;
		case 17: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Password_Rejected Password_Rejected;
		case 18: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Remote_Disconnection Remote_Disconnection;
		case 19: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Local_Disconnection Local_Disconnection;
		case 20: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Invitation_Closed Invitation_Closed;
		case 21: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Control_Established Control_Established;
		case 22: [property.ETLSummary = this.ToString] RemoteAssistanceExe_View_Established View_Established;
		case 23: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Screen_Settings_Restored Screen_Settings_Restored;
		case 24: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Invitation_Timeout Invitation_Timeout;
		case 25: [property.ETLSummary = this.ToString] RemoteAssistanceExe_User_Setting_Changed User_Setting_Changed;
		case 26: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Settings_No_Invite Settings_No_Invite;
		case 27: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Settings_No_Control Settings_No_Control;
		case 28: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Firewall_Blocking Firewall_Blocking;
		case 29: [property.ETLSummary = this.ToString] RemoteAssistanceExe_Error_Message_Displayed Error_Message_Displayed;
		case 30: [property.ETLSummary = this.ToString] RemoteAssistanceExe_RA_Ending RA_Ending;
		case 31: [property.ETLSummary = this.ToString] RemoteAssistanceExe_RA_Server_Starting RA_Server_Starting;
		case 32: [property.ETLSummary = this.ToString] RemoteAssistanceExe_RA_Server_Ending RA_Server_Ending;
		case 33: [property.ETLSummary = this.ToString] RemoteAssistanceExe_IP_Adresses IP_Adresses;
		case 34: [property.ETLSummary = this.ToString] RemoteAssistanceExe_PNRP_Node_Created PNRP_Node_Created;
		case 35: [property.ETLSummary = this.ToString] RemoteAssistanceExe_PNRP_Clouds PNRP_Clouds;
		case 36: [property.ETLSummary = this.ToString] RemoteAssistanceExe_PNRP_Node_Released PNRP_Node_Released;
		case 37: [property.ETLSummary = this.ToString] RemoteAssistanceExe_PNRP_Resolve_Started PNRP_Resolve_Started;
		case 38: [property.ETLSummary = this.ToString] RemoteAssistanceExe_PNRP_Resolve_Stopped PNRP_Resolve_Stopped;
		case 39: [property.ETLSummary = this.ToString] RemoteAssistanceExe_PNRP_Error PNRP_Error;
		case 40: [property.ETLSummary = this.ToString] RemoteAssistanceExe_RADIAG_Repro_Success RADIAG_Repro_Success;
		case 41: [property.ETLSummary = this.ToString] RemoteAssistanceExe_RADIAG_Repro_Failed RADIAG_Repro_Failed;
		case 42: [property.ETLSummary = this.ToString] RemoteAssistanceExe_NTPServer_Current_Time NTPServer_Current_Time;
	}
}
Struct RemoteAssistanceExe_EnterFunction = FormatString("Entering function %s", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_LeaveFunction = FormatString("Leaving function %s", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_Critical_Error = FormatString("Application will terminate, a critical error was detected in %s Line %s Function %s", file.ToString, line.ToString, function.ToString)
{
	UnicodeString file;
	UINT32 line;
	UnicodeString function;
	UINT32 error;
}
Struct RemoteAssistanceExe_Recoverable_Error = FormatString("Hit exception block of code at %s Line %s in function %s", file.ToString, line.ToString, function.ToString)
{
	UnicodeString file;
	UINT32 line;
	UnicodeString function;
	UINT32 error;
}
Struct RemoteAssistanceExe_Branch_On = FormatString("Branching on Line:%s File:%s with the string %s", line.ToString, file.ToString, Condition.ToString)
{
	UnicodeString file;
	UINT32 line;
	UnicodeString Condition;
}
Struct RemoteAssistanceExe_Switch_On = FormatString("Switching on Line:%s File:%s with the value %s", line.ToString, file.ToString, Condition.ToString)
{
	UnicodeString file;
	UINT32 line;
	UINT32 Condition;
}
Struct RemoteAssistanceExe_Enter_Conditional_Block = FormatString("Entering conditional block at Line:%s File:%s", line.ToString, File.ToString)
{
	UINT32 line;
	UnicodeString File;
}
Struct RemoteAssistanceExe_Exit_Conditional_Block = FormatString("Exiting conditional block at Line:%s File:%s", line.ToString, File.ToString)
{
	UINT32 line;
	UnicodeString File;
}
Struct RemoteAssistanceExe_COM_Problem = FormatString("There was a problem interacting with COM object %s.  An outdated version might be installed, or the component might not be installed at all.", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_SMAPI_Problem = FormatString("A user tried to use Remote Assistance and send an invitation for help through their default e-mail client, but Remote Assistance failed to successfully send the invitation.  It is possible the e-mail client configured as the default client does not support SMAPI calls, or that the e-mail client is improperly configured.  It is also possible that the user closed the e-mail client without sending the message.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Bad_Password_Problem = FormatString("A user opened a Remote Assistance invitation, but the invitation was closed due to too many bad password attempts to connect to the machine.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Session_Log_Problem = FormatString("A user tried to use Remote Assistance, group policy requires a session log to be maintained, and a session log couldn't be created.  Remote Assistance was terminated.  Check the disk to see if there are problems with the disk or if it is full.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_RA_Starting = FormatString("Remote Assistance started with:    %s    as the command line parameters.", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_Invitation_Opened = FormatString("A Remote Assistance Invitation was successfully opened.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_RDP_Connection_Made = FormatString("An RDP connection was successfully made.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Password_Verified = FormatString("The Remote Assistance password was verified.  The Remote Assistance session has begun.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Password_Rejected = FormatString("The Remote Assistance password provided was incorrect.  The RDP session was terminated, IP address of the connecting machine is %s", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_Remote_Disconnection = FormatString("The Remote Assistance session was disconnected remotely.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Local_Disconnection = FormatString("The Remote Assistance session was disconnected locally.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Invitation_Closed = FormatString("The Remote Assistance invitation was closed, any information concerning it given out is now invalid.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Control_Established = FormatString("The helper is sharing control.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_View_Established = FormatString("The helper can now view the screen.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Screen_Settings_Restored = FormatString("Remote Assistance detected that it didn't restore the background and screen settings before shutting down.  An attempt was made to restore these settings.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Invitation_Timeout = FormatString("The time limit of offered invitations has been reached.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_User_Setting_Changed = FormatString("User setting value currently applied is %s", Code.ToString)
{
	UINT32 Code;
}
Struct RemoteAssistanceExe_Settings_No_Invite = FormatString("The system or GP settings do not allow an Remote Assistance invitation to be created.  This action has been blocked by the application.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Settings_No_Control = FormatString("The system or GP settings do not allow a helper to share control.  This action has been blocked by the application.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Firewall_Blocking = FormatString("The Windows firewall has been checked and it appears that it is configured so that it will stop Remote Assistance from working.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_Error_Message_Displayed = FormatString("The error message:    %s    has been shown to the user.", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_RA_Ending = FormatString("Remote Assistance has ended.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_RA_Server_Starting = FormatString("Remote Assistance COM server has started.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_RA_Server_Ending = FormatString("Remote Assistance COM server has ended.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_IP_Adresses = FormatString("The Remote Assistance ticket contained the following IP addresses: %s", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_PNRP_Node_Created = FormatString("A PNRP Node was created at the following address: %s", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_PNRP_Clouds = FormatString("The following PNRP clouds were detected: %s", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_PNRP_Node_Released = FormatString("A PNRP Node was released at the following address: %s", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_PNRP_Resolve_Started = FormatString("Started looking for PNRP node with the following address: %s", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_PNRP_Resolve_Stopped = FormatString("Stopped looking for PNRP node, address: %s", FuncName.ToString)
{
	UnicodeString FuncName;
}
Struct RemoteAssistanceExe_PNRP_Error = FormatString("There was a problem interacting with the PNRP service.  This component might not be installed correctly.  The error code received was: %s")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_RADIAG_Repro_Success = FormatString("Diagnosis Repro Attempt resulted in a success.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_RADIAG_Repro_Failed = FormatString("Diagnosis Repro Attempt resulted in a failure.")
{
	_struct Empty{};
}
Struct RemoteAssistanceExe_NTPServer_Current_Time = FormatString("Current time on NTP Server: %s", FuncName.ToString)
{
	UnicodeString FuncName;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsRemoteAssistance_Keyword, "{5b0a651a-8807-45cc-9656-7579815b6af0}")]
struct RemoteAssistanceExe_MicrosoftWindowsRemoteAssistance_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
