//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-NlaSvc
//#
//#  Details:                
//#
//#  Public References:      NlaSvc.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsNlaSvc, "{63B530F8-29C9-4880-A5B4-B8179096E7B8}")]
Protocol NlaSvc_MicrosoftWindowsNlaSvc = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 4001: [property.ETLSummary = this.ToString] NlaSvc_StartWaitForIdentification StartWaitForIdentification;
		case 4002: [property.ETLSummary = this.ToString] NlaSvc_StopWaitForIdentification StopWaitForIdentification;
		case 4101: [property.ETLSummary = this.ToString] NlaSvc_MediaConnect MediaConnect;
		case 4102: [property.ETLSummary = this.ToString] NlaSvc_MediaDisconnect MediaDisconnect;
		case 4103: [property.ETLSummary = this.ToString] NlaSvc_RouteChange RouteChange;
		case 4104: [property.ETLSummary = this.ToString] NlaSvc_AddressChange AddressChange;
		case 4105: [property.ETLSummary = this.ToString] NlaSvc_QuarantineStateChange QuarantineStateChange;
		case 4106: [property.ETLSummary = this.ToString] NlaSvc_DhcpNotification DhcpNotification;
		case 4201: [property.ETLSummary = this.ToString] NlaSvc_StartLinkResolver StartLinkResolver;
		case 4202: [property.ETLSummary = this.ToString] NlaSvc_StopLinkResolver StopLinkResolver;
		case 4203: [property.ETLSummary = this.ToString] NlaSvc_StartIpAddressResolution StartIpAddressResolution;
		case 4204: [property.ETLSummary = this.ToString] NlaSvc_StopIpAddressResolution StopIpAddressResolution;
		case 4205: [property.ETLSummary = this.ToString] NlaSvc_FailedIpAddressResolution FailedIpAddressResolution;
		case 4251: [property.ETLSummary = this.ToString] NlaSvc_PluginDataIndication PluginDataIndication;
		case 4261: [property.ETLSummary = this.ToString] NlaSvc_DhcpStabilized DhcpStabilized;
		case 4301: [property.ETLSummary = this.ToString] NlaSvc_StartIntranetResolver StartIntranetResolver;
		case 4302: [property.ETLSummary = this.ToString] NlaSvc_StopIntranetResolver StopIntranetResolver;
		case 4311: [property.ETLSummary = this.ToString] NlaSvc_StartDsGetDcName_DnsSuffix StartDsGetDcName_DnsSuffix;
		case 4312: [property.ETLSummary = this.ToString] NlaSvc_StopDsGetDcName_DnsSuffix StopDsGetDcName_DnsSuffix;
		case 4313: [property.ETLSummary = this.ToString] NlaSvc_FailedDsGetDcName_DnsSuffix FailedDsGetDcName_DnsSuffix;
		case 4321: [property.ETLSummary = this.ToString] NlaSvc_StartDsGetDcName_Ds StartDsGetDcName_Ds;
		case 4322: [property.ETLSummary = this.ToString] NlaSvc_StopDsGetDcName_Ds StopDsGetDcName_Ds;
		case 4323: [property.ETLSummary = this.ToString] NlaSvc_FailedDsGetDcName_Ds FailedDsGetDcName_Ds;
		case 4331: [property.ETLSummary = this.ToString] NlaSvc_StartDsGetDcName_RootDomainGuid StartDsGetDcName_RootDomainGuid;
		case 4332: [property.ETLSummary = this.ToString] NlaSvc_StopDsGetDcName_RootDomainGuid StopDsGetDcName_RootDomainGuid;
		case 4333: [property.ETLSummary = this.ToString] NlaSvc_FailedDsGetDcName_RootDomainGuid FailedDsGetDcName_RootDomainGuid;
		case 4341: [property.ETLSummary = this.ToString] NlaSvc_StartLdapAuth StartLdapAuth;
		case 4342: [property.ETLSummary = this.ToString] NlaSvc_StopLdapAuth StopLdapAuth;
		case 4343: [property.ETLSummary = this.ToString] NlaSvc_FailedLdapAuth FailedLdapAuth;
		case 4351: [property.ETLSummary = this.ToString] NlaSvc_StartLdapConnect StartLdapConnect;
		case 4352: [property.ETLSummary = this.ToString] NlaSvc_StopLdapConnect StopLdapConnect;
		case 4353: [property.ETLSummary = this.ToString] NlaSvc_FailedLdapConnect FailedLdapConnect;
		case 4354: [property.ETLSummary = this.ToString] NlaSvc_StartLdapBind StartLdapBind;
		case 4355: [property.ETLSummary = this.ToString] NlaSvc_StopLdapBind StopLdapBind;
		case 4356: [property.ETLSummary = this.ToString] NlaSvc_FailedLdapBind FailedLdapBind;
		case 4451: [property.ETLSummary = this.ToString] NlaSvc_AuthCapUnlikely AuthCapUnlikely;
		case 4401: [property.ETLSummary = this.ToString] NlaSvc_InsertIdentifyingSignature InsertIdentifyingSignature;
		case 4402: [property.ETLSummary = this.ToString] NlaSvc_InsertIdentifiedSignature InsertIdentifiedSignature;
		case 4403: [property.ETLSummary = this.ToString] NlaSvc_RemoveIdentifiedSignature RemoveIdentifiedSignature;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table NlaSvc_StateMap(value)
{
	switch(value)
	{
		case 0: "Identifying Network";
		case 1: "Identified Network";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NlaSvc_MibNotificationTypeMap(value)
{
	switch(value)
	{
		case 1: "MibAddInstance";
		case 2: "MibDeleteInstance";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NlaSvc_NlnsState(value)
{
	switch(value)
	{
		case 0: "NlnsUnreachable";
		case 1: "NlnsIncomplete";
		case 2: "NlnsStale";
		case 3: "NlnsDelay";
		case 4: "NlnsProbe";
		case 5: "NlnsReachable";
		case 6: "NlnsPermanent";
		case 7: "NlnsMaximum";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NlaSvc_DhcpStateMap(value)
{
	switch(value)
	{
		case 1: "DHCPCAPI_ADDR_STABLE";
		case 2: "DHCPCAPI_ADDR_NOT_STABLE_ACQ";
		case 3: "DHCPCAPI_ADDR_NOT_STABLE_DONE";
		case 4: "DHCPCAPI_ADDR_NOT_STABLE_ACQ_CONT";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NlaSvc_NlaStableStateMap(value)
{
	switch(value)
	{
		case 0: "NLA_STABLE_UNKNOWN";
		case 1: "NLA_STABLE_STABLE";
		case 2: "NLA_STABLE_GAVE_UP";
		case 3: "NLA_STABLE_TRYING";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NlaSvc_AuthCapUnlikelyReasonMap(value)
{
	switch(value)
	{
		case 0: "LDAP has had no previous successes with the current combination of adapter addresses";
		case 1: "This is the first LDAP attempt ever and a speculative timeout occurred";
		default:
			FormatString("Unknown value: %d", value);
	}
}
struct NlaSvc_DsGetDcNameFlagsMap = Local.BitMapSummary
{
	UINT32 BitfieldDS_FORCE_REDISCOVERY:1 = FormatString("(%s) %s", this.ToBitString, this? "DS_FORCE_REDISCOVERY":"");
	UINT32 Reserved1:15 = FormatString("                   (%s)", this.ToBitString);
	UINT32 BitfieldDS_IS_FLAT_NAME:1 = FormatString("     (%s) %s", this.ToBitString, this? "DS_IS_FLAT_NAME": "");
	UINT32 BitfieldDS_IS_DNS_NAME:1 = FormatString("      (%s) %s", this.ToBitString, this? "DS_IS_DNS_NAME":"");
	UINT32 Reserved2:12 = FormatString("                   (%s)", this.ToBitString);
	UINT32 BitfieldDS_RETURN_DNS_NAME:1 = FormatString("  (%s) %s", this.ToBitString, this? "DS_RETURN_DNS_NAME": "");
	UINT32 BitfieldDS_RETURN_FLAT_NAME:1 = FormatString(" (%s) %s", this.ToBitString, this? "DS_RETURN_FLAT_NAME":"");
	[Local.BitMapSummary =
		(BitfieldDS_FORCE_REDISCOVERY? "DS_FORCE_REDISCOVERY" + " " : "") +
		(BitfieldDS_IS_FLAT_NAME? "DS_IS_FLAT_NAME" + " " : "") +
		(BitfieldDS_IS_DNS_NAME? "DS_IS_DNS_NAME" + " " : "") +
		(BitfieldDS_RETURN_DNS_NAME? "DS_RETURN_DNS_NAME" + " " : "") +
		(BitfieldDS_RETURN_FLAT_NAME? "DS_RETURN_FLAT_NAME" + " " : "") +
		""]
	struct{}
}
struct NlaSvc_SignatureSourceMap = Local.BitMapSummary
{
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_UNIDENTIFIED:1 = FormatString("      (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_UNIDENTIFIED":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_IDENTIFYING:1 = FormatString("       (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_IDENTIFYING":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_RANDOM:1 = FormatString("            (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_RANDOM":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_GATEWAY_MAC:1 = FormatString("       (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_GATEWAY_MAC":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_DOMAIN_GUID:1 = FormatString("       (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_DOMAIN_GUID":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_ROOT_DOMAIN_GUID:1 = FormatString("  (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_ROOT_DOMAIN_GUID":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_DOMAIN_NAME:1 = FormatString("       (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_DOMAIN_NAME":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_FOREST_NAME:1 = FormatString("       (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_FOREST_NAME":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_DNS_SUFFIX:1 = FormatString("        (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_DNS_SUFFIX":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_LOCAL_INTERFACE_ID:1 = FormatString("(%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_LOCAL_INTERFACE_ID":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_WLAN_SSID:1 = FormatString("         (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_WLAN_SSID":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_WLAN_PROFILE:1 = FormatString("      (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_WLAN_PROFILE":"");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_WWAN:1 = FormatString("              (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_WWAN":"");
	UINT32 Reserved1:3 = FormatString("                                      (%s)", this.ToBitString);
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_SECURITY_DOWNGRADE:1 = FormatString("(%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_SECURITY_DOWNGRADE": "");
	UINT32 Reserved2:11 = FormatString("                                      (%s)", this.ToBitString);
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_PRIVATE:1 = FormatString("           (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_PRIVATE": "");
	UINT32 BitfieldNLA_SIGNATURE_SOURCE_SECONDARY:1 = FormatString("         (%s) %s", this.ToBitString, this? "NLA_SIGNATURE_SOURCE_SECONDARY":"");
	UINT32 Reserved3:2 = FormatString("                                      (%s)", this.ToBitString);
	[Local.BitMapSummary =
		(BitfieldNLA_SIGNATURE_SOURCE_UNIDENTIFIED? "NLA_SIGNATURE_SOURCE_UNIDENTIFIED" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_IDENTIFYING? "NLA_SIGNATURE_SOURCE_IDENTIFYING" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_RANDOM? "NLA_SIGNATURE_SOURCE_RANDOM" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_GATEWAY_MAC? "NLA_SIGNATURE_SOURCE_GATEWAY_MAC" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_DOMAIN_GUID? "NLA_SIGNATURE_SOURCE_DOMAIN_GUID" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_ROOT_DOMAIN_GUID? "NLA_SIGNATURE_SOURCE_ROOT_DOMAIN_GUID" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_DOMAIN_NAME? "NLA_SIGNATURE_SOURCE_DOMAIN_NAME" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_FOREST_NAME? "NLA_SIGNATURE_SOURCE_FOREST_NAME" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_DNS_SUFFIX? "NLA_SIGNATURE_SOURCE_DNS_SUFFIX" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_LOCAL_INTERFACE_ID? "NLA_SIGNATURE_SOURCE_LOCAL_INTERFACE_ID" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_WLAN_SSID? "NLA_SIGNATURE_SOURCE_WLAN_SSID" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_WLAN_PROFILE? "NLA_SIGNATURE_SOURCE_WLAN_PROFILE" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_WWAN? "NLA_SIGNATURE_SOURCE_WWAN" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_SECURITY_DOWNGRADE? "NLA_SIGNATURE_SOURCE_SECURITY_DOWNGRADE" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_PRIVATE? "NLA_SIGNATURE_SOURCE_PRIVATE" + " " : "") +
		(BitfieldNLA_SIGNATURE_SOURCE_SECONDARY? "NLA_SIGNATURE_SOURCE_SECONDARY" + " " : "") +
		""]
	struct{}
}
Struct NlaSvc_StartWaitForIdentification = FormatString("Entered State: %s Interface Luid: %s", CurrentOrNextState.ToString, InterfaceGuid.ToString)
{
	UINT8 CurrentOrNextState = NlaSvc_StateMap(this);
	GUID(true) InterfaceGuid;
}
Struct NlaSvc_StopWaitForIdentification = FormatString("Transitioning to State: %s Interface Guid: %s", CurrentOrNextState.ToString, InterfaceGuid.ToString)
{
	UINT8 CurrentOrNextState = NlaSvc_StateMap(this);
	GUID(true) InterfaceGuid;
}
Struct NlaSvc_MediaConnect = FormatString("Received WMI Media Connect Notification for '%s' %s", AdapterName.ToString, InterfaceGuid.ToString)
{
	UnicodeString AdapterName;
	GUID(true) InterfaceGuid;
}
Struct NlaSvc_MediaDisconnect = FormatString("Received WMI Media Disconnect Notification for '%s' %s", AdapterName.ToString, InterfaceGuid.ToString)
{
	UnicodeString AdapterName;
	GUID(true) InterfaceGuid;
}
Struct NlaSvc_RouteChange = FormatString("Route change has occurred for interface %s (%s)", InterfaceGuid.ToString, MibNotificationType.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 MibNotificationType = NlaSvc_MibNotificationTypeMap(this);
}
Struct NlaSvc_AddressChange = FormatString("Address change has occurred for interface %s (%s)", InterfaceGuid.ToString, MibNotificationType.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 MibNotificationType = NlaSvc_MibNotificationTypeMap(this);
}
Struct NlaSvc_QuarantineStateChange = "Quarantine state has changed" {}; // Empty Struct
Struct NlaSvc_DhcpNotification = "Received DHCP notification" {}; // Empty Struct
Struct NlaSvc_StartLinkResolver = "Start link resolver" {}; // Empty Struct
Struct NlaSvc_StopLinkResolver = "Stop link resolver" {}; // Empty Struct
Struct NlaSvc_StartIpAddressResolution = FormatString("Start gateway resolution on interface %s for %s", InterfaceGuid.ToString, GatewayIpAddress.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString GatewayIpAddress;
}
Struct NlaSvc_StopIpAddressResolution = FormatString("Stop gateway resolution on interface %s for %s. Error: %s NlnsState: %s MAC: %s", InterfaceGuid.ToString, GatewayIpAddress.ToString, ErrorCode.ToString, NlnsState.ToString, MacAddr.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString GatewayIpAddress;
	WinErrorCode ErrorCode;
	UINT32 NlnsState = NlaSvc_NlnsState(this);
	UINT16 MacAddrLen;
	BLOB(MacAddrLen) MacAddr;
}
Struct NlaSvc_FailedIpAddressResolution = FormatString("Gateway resolution failed on interface %s for %s with error: %s", InterfaceGuid.ToString, GatewayIpAddress.ToString, ErrorCode.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString GatewayIpAddress;
	WinErrorCode ErrorCode;
}
Struct NlaSvc_PluginDataIndication = FormatString("Plug-in data indicated from %s for entity %s (%s rows) %s", PluginName.ToString, EntityName.ToString, IndicatedRowCount.ToString, RowInterfaceGuid.ToString)
{
	UnicodeString PluginName;
	UnicodeString EntityName;
	UINT16 IndicatedRowCount;
	UINT16 RowsWithInterfacesIndicatedCount;
	GUID(true) RowInterfaceGuid[RowsWithInterfacesIndicatedCount];
}
Struct NlaSvc_DhcpStabilized = FormatString("DHCP has stabilized for %s (%s)", InterfaceGuid.ToString, NlaState.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 NlaState = NlaSvc_NlaStableStateMap(this);
}
Struct NlaSvc_StartIntranetResolver = "Start Intranet resolver" {}; // Empty Struct
Struct NlaSvc_StopIntranetResolver = "Stop Intranet resolver" {}; // Empty Struct
Struct NlaSvc_StartDsGetDcName_DnsSuffix = FormatString("Start DsGetDcName(%s,%s) for DnsSuffix", DnsSuffix.ToString, Flags.ToString)
{
	UnicodeString DnsSuffix;
	NlaSvc_DsGetDcNameFlagsMap Flags;
	WinErrorCode ErrorCode;
	UnicodeString RetrievedDomain;
	UnicodeString RetrievedForest;
}
Struct NlaSvc_StopDsGetDcName_DnsSuffix = FormatString("Stop DsGetDcName(%s,%s) for DnsSuffix returned error %s (domain=%s, forest=%s)", DnsSuffix.ToString, Flags.ToString, ErrorCode.ToString, RetrievedDomain.ToString, RetrievedForest.ToString)
{
	UnicodeString DnsSuffix;
	NlaSvc_DsGetDcNameFlagsMap Flags;
	WinErrorCode ErrorCode;
	UnicodeString RetrievedDomain;
	UnicodeString RetrievedForest;
}
Struct NlaSvc_FailedDsGetDcName_DnsSuffix = FormatString("DsGetDcName(%s,%s) for DnsSuffix failed with error %s", DnsSuffix.ToString, Flags.ToString, ErrorCode.ToString)
{
	UnicodeString DnsSuffix;
	NlaSvc_DsGetDcNameFlagsMap Flags;
	WinErrorCode ErrorCode;
	UnicodeString RetrievedDomain;
	UnicodeString RetrievedForest;
}
Struct NlaSvc_StartDsGetDcName_Ds = FormatString("Start DsGetDcName(%s) for DS info", Flags.ToString)
{
	UnicodeString DnsSuffix;
	NlaSvc_DsGetDcNameFlagsMap Flags;
	WinErrorCode ErrorCode;
	UnicodeString RetrievedDomain;
	UnicodeString RetrievedForest;
}
Struct NlaSvc_StopDsGetDcName_Ds = FormatString("Stop DsGetDcName(%s) for DS info returned error %s (domain=%s, forest=%s)", Flags.ToString, ErrorCode.ToString, RetrievedDomain.ToString, RetrievedForest.ToString)
{
	UnicodeString DnsSuffix;
	NlaSvc_DsGetDcNameFlagsMap Flags;
	WinErrorCode ErrorCode;
	UnicodeString RetrievedDomain;
	UnicodeString RetrievedForest;
}
Struct NlaSvc_FailedDsGetDcName_Ds = FormatString("DsGetDcName(%s) for DS info failed with error %s", Flags.ToString, ErrorCode.ToString)
{
	UnicodeString DnsSuffix;
	NlaSvc_DsGetDcNameFlagsMap Flags;
	WinErrorCode ErrorCode;
	UnicodeString RetrievedDomain;
	UnicodeString RetrievedForest;
}
Struct NlaSvc_StartDsGetDcName_RootDomainGuid = FormatString("Start DsGetDcName(%s) for root domain GUID", Flags.ToString)
{
	UnicodeString DnsSuffix;
	NlaSvc_DsGetDcNameFlagsMap Flags;
	WinErrorCode ErrorCode;
	UnicodeString RetrievedDomain;
	UnicodeString RetrievedForest;
}
Struct NlaSvc_StopDsGetDcName_RootDomainGuid = FormatString("Stop DsGetDcName(%s) for root domain GUID returned error %s (domain=%s, forest=%s)", Flags.ToString, ErrorCode.ToString, RetrievedDomain.ToString, RetrievedForest.ToString)
{
	UnicodeString DnsSuffix;
	NlaSvc_DsGetDcNameFlagsMap Flags;
	WinErrorCode ErrorCode;
	UnicodeString RetrievedDomain;
	UnicodeString RetrievedForest;
}
Struct NlaSvc_FailedDsGetDcName_RootDomainGuid = FormatString("DsGetDcName(%s) for root domain GUID failed with error %s", Flags.ToString, ErrorCode.ToString)
{
	UnicodeString DnsSuffix;
	NlaSvc_DsGetDcNameFlagsMap Flags;
	WinErrorCode ErrorCode;
	UnicodeString RetrievedDomain;
	UnicodeString RetrievedForest;
}
Struct NlaSvc_StartLdapAuth = FormatString("Start LDAP authentication on interface %s (%s) (%s tries)", InterfaceName.ToString, Addresses.ToString, TryCount.ToString)
{
	UnicodeString InterfaceName;
	UnicodeString Addresses;
	UINT32 TryCount;
	WinErrorCode ErrorCode;
}
Struct NlaSvc_StopLdapAuth = FormatString("Stop LDAP authentication on interface %s (%s)", InterfaceName.ToString, Addresses.ToString)
{
	UnicodeString InterfaceName;
	UnicodeString Addresses;
	UINT32 TryCount;
	WinErrorCode ErrorCode;
}
Struct NlaSvc_FailedLdapAuth = FormatString("LDAP authentication on interface %s (%s) failed with error %s", InterfaceName.ToString, Addresses.ToString, ErrorCode.ToString)
{
	UnicodeString InterfaceName;
	UnicodeString Addresses;
	UINT32 TryCount;
	WinErrorCode ErrorCode;
}
Struct NlaSvc_StartLdapConnect = FormatString("Start ldap_connect(%s) for DC=%s (%s of %s tries)", Addresses.ToString, DcName.ToString, TryNumber.ToString, TryCount.ToString)
{
	UnicodeString Addresses;
	UnicodeString DcName;
	UINT32 TryNumber;
	UINT32 TryCount;
	WinErrorCode ErrorCode;
}
Struct NlaSvc_StopLdapConnect = FormatString("Stop ldap_connect(%s) for DC=%s (%s of %s tries)", Addresses.ToString, DcName.ToString, TryNumber.ToString, TryCount.ToString)
{
	UnicodeString Addresses;
	UnicodeString DcName;
	UINT32 TryNumber;
	UINT32 TryCount;
	WinErrorCode ErrorCode;
}
Struct NlaSvc_FailedLdapConnect = FormatString("ldap_connect(%s) for DC=%s (%s of %s tries) failed with %s", Addresses.ToString, DcName.ToString, TryNumber.ToString, TryCount.ToString, ErrorCode.ToString)
{
	UnicodeString Addresses;
	UnicodeString DcName;
	UINT32 TryNumber;
	UINT32 TryCount;
	WinErrorCode ErrorCode;
}
Struct NlaSvc_StartLdapBind = FormatString("Start ldap_bind(%s) for DC=%s (%s of %s tries)", Addresses.ToString, DcName.ToString, TryNumber.ToString, TryCount.ToString)
{
	UnicodeString Addresses;
	UnicodeString DcName;
	UINT32 TryNumber;
	UINT32 TryCount;
	WinErrorCode ErrorCode;
}
Struct NlaSvc_StopLdapBind = FormatString("Stop ldap_bind(%s) for DC=%s (%s of %s tries)", Addresses.ToString, DcName.ToString, TryNumber.ToString, TryCount.ToString)
{
	UnicodeString Addresses;
	UnicodeString DcName;
	UINT32 TryNumber;
	UINT32 TryCount;
	WinErrorCode ErrorCode;
}
Struct NlaSvc_FailedLdapBind = FormatString("ldap_bind(%s) for DC=%s (%s of %s tries) failed with %s", Addresses.ToString, DcName.ToString, TryNumber.ToString, TryCount.ToString, ErrorCode.ToString)
{
	UnicodeString Addresses;
	UnicodeString DcName;
	UINT32 TryNumber;
	UINT32 TryCount;
	WinErrorCode ErrorCode;
}
Struct NlaSvc_AuthCapUnlikely = FormatString("Network on %s is unlikely to be authentication-capable; authentication will continue in the background.  Reason: %s ", InterfaceGuid.ToString, AuthCapUnlikelyReason.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 AuthCapUnlikelyReason = NlaSvc_AuthCapUnlikelyReasonMap(this);
	UINT32 SpeculativeTimeout;
}
Struct NlaSvc_InsertIdentifyingSignature = FormatString("Inserting identifying signature for interface %s  Source=%s Signature=%s", InterfaceGuid.ToString, SignatureSource.ToString, Signature.ToString)
{
	GUID(true) InterfaceGuid;
	UINT16 SignatureLength;
	BLOB(SignatureLength) Signature;
	NlaSvc_SignatureSourceMap SignatureSource;
}
Struct NlaSvc_InsertIdentifiedSignature = FormatString("Inserting identified signature for interface %s  Source=%s Signature=%s", InterfaceGuid.ToString, SignatureSource.ToString, Signature.ToString)
{
	GUID(true) InterfaceGuid;
	UINT16 SignatureLength;
	BLOB(SignatureLength) Signature;
	NlaSvc_SignatureSourceMap SignatureSource;
}
Struct NlaSvc_RemoveIdentifiedSignature = FormatString("Removing identified signature for interface %s  Source=%s Signature=%s", InterfaceGuid.ToString, SignatureSource.ToString, Signature.ToString)
{
	GUID(true) InterfaceGuid;
	UINT16 SignatureLength;
	BLOB(SignatureLength) Signature;
	NlaSvc_SignatureSourceMap SignatureSource;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsNlaSvc_Keyword, "{63B530F8-29C9-4880-A5B4-B8179096E7B8}")]
struct NlaSvc_MicrosoftWindowsNlaSvc_Keyword
{
	UINT64 Reserved1:32 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 Reserved2:18 = FormatString("        (%s)", this.ToBitString);
}
