//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  MSNT-SystemTrace
//#
//#  Details:                
//#
//#  Public References:      MSNT_SystemTrace MOF
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/14/2009
//#
//####

[RegisterBefore(NetEvent.UserData, SystemTrace, "{68fdd900-4a3e-11d1-84f4-0000f80464e3}")]
Protocol SystemTrace
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventOpcode)
	{
		case 0: EventTrace_Header EventTrace_Header;
		case 5: 
		case 32:
			EventTrace_Header_Extension EventTrace_Header_Extension;
		case 8:
			EventTrace_RDComplete EventTrace_RDComplete;
	}
}

Struct EventTrace_Header = FormatString("Event Trace Header (%s)", LogFileNameString)
{
	UINT32 BufferSize;
	UINT32 Version;
	UINT32 ProviderVersion;
	UINT32 NumberOfProcessors;
	UINT64 EndTime;
	UINT32 TimerResolution;
	UINT32 MaxFileSize;
	UINT32 LogFileMode;
	UINT32 BuffersWritten;
	UINT32 StartBuffers;
	UINT32 PointerSize;
	UINT32 EventsLost;
	UINT32 CPUSpeed;
	SystemEtlPtr LoggerName;
	SystemEtlPtr LogFileName;
	BLOB(176) TimeZoneInformation;
	UINT64 BootTime;
	UINT64 PerfFreq;
	UINT64 StartTime;
	UINT32 ReservedFlags;
	UINT32 BuffersLost;
	UnicodeString SessionNameString;
	UnicodeString LogFileNameString;
}	

Struct EventTrace_Header_Extension
{
	UINT32 GroupMask1;
	UINT32 GroupMask2;
	UINT32 GroupMask3;
	UINT32 GroupMask4;
	UINT32 GroupMask5;
	UINT32 GroupMask6;
	UINT32 GroupMask7;
	UINT32 GroupMask8;
	UINT32 KernelEventVersion;
}		

Struct EventTrace_RDComplete
{
}

[RegisterBefore(NetEvent.UserData, Process, "{3d6fa8d0-fe05-11d0-9dda-00c04fd7ba7c}")]
Protocol Process = FormatString("%s", Property.ProcessSummary)
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventVersion)
	{
		case 0:
			switch(property.EventOpcode)
			{
				case 1: 
				case 2: 
				case 3: 
				case 4:
					[Property.ProcessSummary = Process_V0_TypeGroup1.tostring]
					Process_V0_TypeGroup1 Process_V0_TypeGroup1;
			}
		case 1:
			switch(property.EventOpcode)
			{
				case 1: 
				case 2: 
				case 3: 
				case 4:
					[Property.ProcessSummary = Process_V1_TypeGroup1.tostring]
					Process_V1_TypeGroup1 Process_V1_TypeGroup1;
			}
		case 2:
			switch(property.EventOpcode)
			{
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 39:
					[Property.ProcessSummary = Process_V2_TypeGroup1.tostring]
					Process_V2_TypeGroup1 Process_V2_TypeGroup1;
				case 32:
				case 33:
					[Property.ProcessSummary = Process_V2_TypeGroup2.tostring]
					Process_V2_TypeGroup2 Process_V2_TypeGroup2;
				case 35:
					[Property.ProcessSummary = Process_V2_TypeGroup3.tostring]
					Process_V2_TypeGroup3 Process_V2_TypeGroup3;
			}
		case 3:
			switch(property.EventOpcode)
			{
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 39:
					[Property.ProcessSummary = Process_TypeGroup1.tostring]
					Process_TypeGroup1 Process_TypeGroup1;
			}
	}
}

struct Process_V0_TypeGroup1 = FormatString("ProcessId:[%d], ImageFileName:%s", ProcessId, ImageFileName)
{
	SystemEtlPtr ProcessId;
	SystemEtlPtr ParentId;
	SID(false) UserSID;
	[Global.ProcessNameTable$[ProcessId] = this]
	AsciiString ImageFileName;
}

struct Process_V1_TypeGroup1 = FormatString("ProcessId:[%d], ImageFileName:%s", ProcessId, ImageFileName)
{
	SystemEtlPtr PageDirectoryBase;
	UINT32 ProcessId;
	UINT32 ParentId;
	UINT32 SessionId;
	INT32  ExitStatus;
	SID(false)  UserSid;
	[Global.ProcessNameTable$[ProcessId] = this]
	AsciiString ImageFileName;
}

Struct Process_V2_TypeGroup1 = FormatString("ProcessId:[%d], ImageFileName:%s", ProcessId, ImageFileName)
{
	SystemEtlPtr UniqueProcessKey;
	UINT32 ProcessId;
	UINT32 ParentId;
	UINT32 SessionId;
	INT32  ExitStatus;
	BLOB(property.EventIs64Bit ? 16 : 8) Dunno;
	SID(false)  UserSid;
	[Global.ProcessNameTable$[ProcessId] = this]
	AsciiString ImageFileName;
	UnicodeString CommandLine;
}

Struct Process_V2_TypeGroup2 = FormatString("ProcessId:[%d]", ProcessId)
{
	UINT32 ProcessId;
	UINT32 PageFaultCount;
	UINT32 HandleCount;
	UINT32 Reserved;
	UINT32 PeakVirtualSize;
	UINT32 PeakWorkingSetSize;
	UINT32 PeakPagefileUsage;
	UINT32 QuotaPeakPagedPoolUsage;
	UINT32 QuotaPeakNonPagedPoolUsage;
	UINT32 VirtualSize;
	UINT32 WorkingSetSize;
	UINT32 PagefileUsage;
	UINT32 QuotaPagedPoolUsage;
	UINT32 QuotaNonPagedPoolUsage;
	UINT32 PrivatePageCount;
}

Struct Process_V2_TypeGroup3 = FormatString("ProcessId:[%d]", ProcessId)
{
	UINT32 DirectoryTableBase;
	UINT32 ProcessId;
}

Struct Process_TypeGroup1 = FormatString("ProcessId:[%d], ImageFileName:%s", ProcessId, ImageFileName)
{
	SystemEtlPtr UniqueProcessKey;
	UINT32 ProcessId;
	UINT32 ParentId;
	UINT32 SessionId;
	INT32 ExitStatus;
	SystemEtlPtr DirectoryTableBase;
	BLOB(property.EventIs64Bit ? 16 : 8) Dunno;
	SID(false)  UserSid;
	[Global.ProcessNameTable$[ProcessId] = this]
	AsciiString ImageFileName;
	UnicodeString CommandLine;
}

struct SystemConfig_V2_NIC = FormatString("Address: %s", IpAddresses)
{
	UINT64 PhysicalAddr;
	UINT32 PhysicalAddrLen;
	UINT32 Ipv4Index;
	UINT32 Ipv6Index;
	UnicodeString NICDescription;
	UnicodeString IpAddresses;
	UnicodeString DnsServerAddresses;
}

struct SystemConfig_V2_LogDisk = FormatString("Driver: %s, FileSystem: %s", DriveLetterString, FileSystem)
{
	UINT64 StartOffset;
	UINT64 PartitionSize;
	UINT32 DiskNumber;
	UINT32 Size;
	UINT32 DriveType;
	UnicodeString(4) DriveLetterString;
	UINT32 Pad1;
	UINT32 PartitionNumber;
	UINT32 SectorsPerCluster;
	UINT32 BytesPerSector;
	UINT32 Pad2;
	INT64 NumberOfFreeClusters;
	INT64 TotalNumberOfClusters;
	UnicodeString(16) FileSystem;
	UINT32 VolumeExt;
	UINT32 Pad3;
}

struct SystemConfig_V2_PhyDisk = FormatString("Manufacturer: %s, BootDriveLetter: %s", Manufacturer, BootDriveLetter)
{
	UINT32 DiskNumber;
	UINT32 BytesPerSector;
	UINT32 SectorsPerTrack;
	UINT32 TracksPerCylinder;
	UINT64 Cylinders;
	UINT32 SCSIPort;
	UINT32 SCSIPath;
	UINT32 SCSITarget;
	UINT32 SCSILun;
	UnicodeString(256) Manufacturer;
	UINT32 PartitionCount;
	UINT8 WriteCacheEnabled;
	UINT8 Pad;
	UnicodeString(3) BootDriveLetter;
	UnicodeString(2) Spare;
};

struct SystemConfig_V2_CPU = FormatString("Processors: %u, (%u MHz)", NumberOfProcessors, MHz)
{
	UINT32 MHz;
	UINT32 NumberOfProcessors;
	UINT32 MemSize;
	UINT32 PageSize;
	UINT32 AllocationGranularity;
	UnicodeString(256) ComputerName;
	UnicodeString(134) DomainName;
	UINT32 HyperThreadingFlag;
}

struct SystemConfig_V1_PnP = FormatString("ID: %s, Name: %s", DeviceID, FriendlyName)
{
	UINT32 IDLength;
	UINT32 DescriptionLength;
	UINT32 FriendlyNameLength;
	UnicodeString DeviceID;
	UnicodeString DeviceDescription;
	UnicodeString FriendlyName;
}

struct SystemConfig_V1_IRQ = FormatString("IRQ: %u", IRQNum)
{
	UINT64 IRQAffinity;
	UINT32 IRQNum;
	UINT32 DeviceDescriptionLen;
	UnicodeString DeviceDescription;
}

struct SystemConfig_V1_Power
{
	UINT8 S1;
	UINT8 S2;
	UINT8 S3;
	UINT8 S4;
	UINT8 S5;
	UINT8 Pad1;
	UINT8 Pad2;
	UINT8 Pad3;
};

struct SystemConfig_V1_Services = FormatString("Service: %s, Process: %s", ServiceName, ProcessName)
{
	UnicodeString(34) ServiceName;
	UnicodeString(256) DisplayName;
	UnicodeString(34) ProcessName;
	UINT32 ProcessId;
}

struct SystemConfig_V2_Platform = FormatString("Manufacturer: %s, ProductName: %s, BiosDate: %s, BiosVersion: %s", SystemManufacturer, SystemProductName, BiosDate, BiosVersion) 
{
	UnicodeString SystemManufacturer;
	UnicodeString SystemProductName;
	UnicodeString BiosDate;
	UnicodeString BiosVersion;
}

struct SystemConfig_V2_IDEChannel = FormatString("Location: %s", LocationInformation)
{
	UINT32 TargetId;
	UINT32 DeviceType;
	UINT32 DeviceTimingMode;
	UINT32 LocationInformationLen;
	UnicodeString LocationInformation;
}

struct SystemConfig_V2_PnP = FormatString("ID: %s, Name: %s", DeviceID, FriendlyName)
{
	UINT32 IDLength;
	UINT32 DescriptionLength;
	UINT32 FriendlyNameLength;
	UnicodeString DeviceID;
	UnicodeString DeviceDescription;
	UnicodeString FriendlyName;
}

struct SystemConfig_V2_IRQ = FormatString("IRQ: %u", IRQNum)
{
	UINT64 IRQAffinity;
	UINT32 IRQNum;
	UINT32 DeviceDescriptionLen;
	UnicodeString DeviceDescription;
}

struct SystemConfig_V2_Network = FormatString("MaxUserPort: %u", MaxUserPort)
{
	UINT32 TcbTablePartitions;
	UINT32 MaxHashTableSize;
	UINT32 MaxUserPort;
	UINT32 TcpTimedWaitDelay;
}

struct SystemConfig_V2_Power
{
	UINT8 S1;
	UINT8 S2;
	UINT8 S3;
	UINT8 S4;
	UINT8 S5;
	UINT8 Pad1;
	UINT8 Pad2;
	UINT8 Pad3;
}

struct SystemConfig_V2_Services = FormatString("Service: %s, Process: %s", ServiceName, ProcessName)
{
	UINT32 ProcessId;
	UINT32 ServiceState;
	UINT32 SubProcessTag;
	UnicodeString ServiceName;
	UnicodeString DisplayName;
	UnicodeString ProcessName;
}

struct SystemConfig_V2_Video = FormatString("Chip: %s, Adapter: %s, Bios: %s", ChipType, AdapterString, BiosString)
{
	UINT32 MemorySize;
	UINT32 XResolution;
	UINT32 YResolution;
	UINT32 BitsPerPixel;
	UINT32 VRefresh;
	UnicodeString(256) ChipType;
	UnicodeString(256) DACType;
	UnicodeString(256) AdapterString;
	UnicodeString(256) BiosString;
	unicodeString(256) DeviceId;
	UINT32 StateFlags;
}

struct SystemConfig_V1_Video = FormatString("Chip: %s, Adapter: %s, Bios: %s", ChipType, AdapterString, BiosString)
{
	UINT32 MemorySize;
	UINT32 XResolution;
	UINT32 YResolution;
	UINT32 BitsPerPixel;
	UINT32 VRefresh;
	UnicodeString(256) ChipType;
	UnicodeString(256) DACType;
	UnicodeString(256) AdapterString;
	UnicodeString(256) BiosString;
	UnicodeString(256) DeviceId;
	UINT32 StateFlags;
}

struct SystemConfig_V1_NIC = FormatString("NIC: %s, Address: %s", NICName, IpAddress.ToString)
{
	UnicodeString(256) NICName;
	UINT32 Index;
	UINT32 PhysicalAddrLen;
	UnicodeString(8) PhysicalAddr;
	UINT32 Size;
	IPv4Address IpAddress;
	IPv4Address SubnetMask;
	IPv4Address DhcpServer;
	IPv4Address Gateway;
	IPv4Address PrimaryWinsServer;
	IPv4Address SecondaryWinsServer;
	IPv4Address DnsServer1;
	IPv4Address DnsServer2;
	IPv4Address DnsServer3;
	IPv4Address DnsServer4;
	UINT32 Data;
}

struct SystemConfig_V1_LogDisk = FormatString("Drive: %s, FileSystem: %s", DriveLetterString, FileSystem)
{
	UINT64 StartOffset;
	UINT64 PartitionSize;
	UINT32 DiskNumber;
	UINT32 Size;
	UINT32 DriveType;
	UnicodeString(4) DriveLetterString;
	UINT32 Pad1;
	UINT32 PartitionNumber;
	UINT32 SectorsPerCluster;
	UINT32 BytesPerSector;
	UINT32 Pad2;
	INT64 NumberOfFreeClusters;
	INT64 TotalNumberOfClusters;
	UnicodeString(16) FileSystem;
	UINT32 VolumeExt;
};

struct SystemConfig_V1_PhyDisk = FormatString("Manufacturer: %s, BootDriveLetter: %s", Manufacturer, BootDriveLetter)
{
	UINT32 DiskNumber;
	UINT32 BytesPerSector;
	UINT32 SectorsPerTrack;
	UINT32 TracksPerCylinder;
	UINT64 Cylinders;
	UINT32 SCSIPort;
	UINT32 SCSIPath;
	UINT32 SCSITarget;
	UINT32 SCSILun;
	UnicodeString(256) Manufacturer;
	UINT32 PartitionCount;
	UINT8 WriteCacheEnabled;
	UINT8 Pad;
	UnicodeString(3) BootDriveLetter;
	UnicodeString(2) Spare;
}

struct SystemConfig_V1_CPU = FormatString("Processors: %u, (%u MHz)", NumberOfProcessors, MHz)
{
	UINT32 MHz;
	UINT32 NumberOfProcessors;
	UINT32 MemSize;
	UINT32 PageSize;
	UINT32 AllocationGranularity;
	UnicodeString(256) ComputerName;
	UnicodeString(132) DomainName;
	UINT32 HyperThreadingFlag;
};

struct SystemConfig_V0_PnP = FormatString("ID: %s, Name: %s", DeviceID, FriendlyName)
{
	UINT32 IDLength;
	UINT32 DescriptionLength;
	UINT32 FriendlyNameLength;
	UnicodeString DeviceID;
	UnicodeString DeviceDescription;
	UnicodeString FriendlyName;
};

struct SystemConfig_V0_IRQ = FormatString("IRQ: %u", IRQNum)
{
	UINT64 IRQAffinity;
	UINT32 IRQNum;
	UINT32 DeviceDescriptionLen;
	UnicodeString DeviceDescription;
}

struct SystemConfig_V0_Power
{
	UINT8 S1;
	UINT8 S2;
	UINT8 S3;
	UINT8 S4;
	UINT8 S5;
	UINT8 Pad1;
	UINT8 Pad2;
	UINT8 Pad3;
};

struct SystemConfig_V0_Services = FormatString("Service: %s, Process: %s", ServiceName, ProcessName)
{
	UnicodeString(34) ServiceName;
	UnicodeString(256) DisplayName;
	UnicodeString(34) ProcessName;
	UINT32 ProcessId;
}

struct SystemConfig_V0_Video = FormatString("Chip: %s, Adapter: %s, Bios: %s", ChipType, AdapterString, BiosString)
{
	UINT32 MemorySize;
	UINT32 XResolution;
	UINT32 YResolution;
	UINT32 BitsPerPixel;
	UINT32 VRefresh;
	UnicodeString(256) ChipType;
	UnicodeString(256) DACType;
	UnicodeString(256) AdapterString;
	UnicodeString(256) BiosString;
	UnicodeString(256) DeviceId;
	UINT32 StateFlags;
}

struct SystemConfig_V0_NIC = FormatString("NIC: %s, Address: %s", NICName, IpAddress.ToString)
{
	UnicodeString(256) NICName;
	UINT32 Index;
	UINT32 PhysicalAddrLen;
	UnicodeString(8) PhysicalAddr;
	UINT32 Size;
	IPv4Address IpAddress;
	IPv4Address SubnetMask;
	IPv4Address DhcpServer;
	IPv4Address Gateway;
	IPv4Address PrimaryWinsServer;
	IPv4Address SecondaryWinsServer;
	IPv4Address DnsServer1;
	IPv4Address DnsServer2;
	IPv4Address DnsServer3;
	IPv4Address DnsServer4;
	UINT32 Data;
};

struct SystemConfig_V0_LogDisk = FormatString("Drive: %s, FileSystem: %s", DriveLetterString, FileSystem)
{
	UINT64 StartOffset;
	UINT64 PartitionSize;
	UINT32 DiskNumber;
	UINT32 Size;
	UINT32 DriveType;
	UnicodeString(4) DriveLetterString;
	UINT32 Pad1;
	UINT32 PartitionNumber;
	UINT32 SectorsPerCluster;
	UINT32 BytesPerSector;
	UINT32 Pad2;
	INT64 NumberOfFreeClusters;
	INT64 TotalNumberOfClusters;
	UnicodeString(16) FileSystem;
	UINT32 VolumeExt;
}

struct SystemConfig_V0_PhyDisk = FormatString("Manufacturer: %s, BootDriveLetter: %s", Manufacturer, BootDriveLetter)
{
	UINT32 DiskNumber;
	UINT32 BytesPerSector;
	UINT32 SectorsPerTrack;
	UINT32 TracksPerCylinder;
	UINT64 Cylinders;
	UINT32 SCSIPort;
	UINT32 SCSIPath;
	UINT32 SCSITarget;
	UINT32 SCSILun;
	UnicodeString(256) Manufacturer;
	UINT32 PartitionCount;
	UINT8 WriteCacheEnabled;
	UINT8 Pad;
	UnicodeString(3) BootDriveLetter;
	UnicodeString(2) Spare;
};

struct SystemConfig_V0_CPU = FormatString("Processors: %u, (%u MHz)", NumberOfProcessors, MHz)
{
	UINT32 MHz;
	UINT32 NumberOfProcessors;
	UINT32 MemSize;
	UINT32 PageSize;
	UINT32 AllocationGranularity;
	UnicodeString(256) ComputerName;
	UnicodeString(132) DomainName;
	UINT32 HyperThreadingFlag;
}


[RegisterBefore(NetEvent.UserData, SystemConfig, "{01853a65-418f-4f36-aefc-dc0f1d2fd235}")]
Protocol SystemConfig = FormatString("%s", Property.SystemConfigSummary)
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventVersion)
	{
		// SystemConfig_V0
		case 0:
			switch(property.EventOpcode)
			{
				case 10:
					[Property.SystemConfigSummary = V0_CPU.tostring]
					SystemConfig_V0_CPU V0_CPU;
				case 11:
					[Property.SystemConfigSummary = V0_PhyDisk.tostring]
					SystemConfig_V0_PhyDisk V0_PhyDisk;
				case 12:
					[Property.SystemConfigSummary = V0_LogDisk.tostring]
					SystemConfig_V0_LogDisk V0_LogDisk;
				case 13:
					[Property.SystemConfigSummary = V0_NIC.tostring]
					SystemConfig_V0_NIC V0_NIC;
				case 14:
					[Property.SystemConfigSummary = V0_Video.tostring]
					SystemConfig_V0_Video V0_Video;
				case 15:
					[Property.SystemConfigSummary = V0_Services.tostring]
					SystemConfig_V0_Services V0_Services;
				case 16:
					[Property.SystemConfigSummary = V0_Power.tostring]
					SystemConfig_V0_Power V0_Power;
				case 21:
					[Property.SystemConfigSummary = V0_IRQ.tostring]
					SystemConfig_V0_IRQ V0_IRQ;
				case 22:
					[Property.SystemConfigSummary = V0_PnP.tostring]
					SystemConfig_V0_PnP V0_PnP;
				
					
			}
		case 1:
		// SystemConfig_V1
			switch(property.EventOpcode)
			{
				case 10:
					[Property.SystemConfigSummary = V1_CPU.tostring]
					SystemConfig_V1_CPU V1_CPU;
				case 11:
					[Property.SystemConfigSummary = V1_PhyDisk.tostring]
					SystemConfig_V1_PhyDisk V1_PhyDisk;
				case 12:
					[Property.SystemConfigSummary = V1_LogDisk.tostring]
					SystemConfig_V1_LogDisk V1_LogDisk;
				case 13:
					[Property.SystemConfigSummary = V1_NIC.tostring]
					SystemConfig_V1_NIC V1_NIC;
				case 14:
					[Property.SystemConfigSummary = V1_Video.tostring]
					SystemConfig_V1_Video V1_Video;
				case 15:
					[Property.SystemConfigSummary = V1_Services.tostring]
					SystemConfig_V1_Services V1_Services;
				case 16:
					[Property.SystemConfigSummary = V1_Power.tostring]
					SystemConfig_V1_Power V1_Power;
				case 21:
					[Property.SystemConfigSummary = V1_IRQ.tostring]
					SystemConfig_V1_IRQ V1_IRQ;
				case 22:
					[Property.SystemConfigSummary = V1_PnP.tostring]
					SystemConfig_V1_PnP V1_PnP;
			}
		// SystemConfig_V2
		case 2:
			switch(property.EventOpcode)
			{
				case 10:
					[Property.SystemConfigSummary = V2_CPU.tostring]
					SystemConfig_V2_CPU V2_CPU;
				case 11:
					[Property.SystemConfigSummary = V2_PhyDisk.tostring]
					SystemConfig_V2_PhyDisk V2_PhyDisk;
				case 12:
					[Property.SystemConfigSummary = V2_LogDisk.tostring]
					SystemConfig_V2_LogDisk V2_LogDisk;
				case 13:
					[Property.SystemConfigSummary = V2_NIC.tostring]
					SystemConfig_V2_NIC V2_NIC;
				case 14:
					[Property.SystemConfigSummary = V2_Video.tostring]
					SystemConfig_V2_Video V2_Video;
				case 15:
					[Property.SystemConfigSummary = V2_Services.tostring]
					SystemConfig_V2_Services V2_Services;
				case 16:
					[Property.SystemConfigSummary = V2_Power.tostring]
					SystemConfig_V2_Power V2_Power;
				case 17:
					[Property.SystemConfigSummary = V2_Network.tostring]
					SystemConfig_V2_Network V2_Network;
				case 21:
					[Property.SystemConfigSummary = V2_IRQ.tostring]
					SystemConfig_V2_IRQ V2_IRQ;
				case 22:
					[Property.SystemConfigSummary = V2_PnP.tostring]
					SystemConfig_V2_PnP V2_PnP;
				case 23:
					[Property.SystemConfigSummary = V2_IDEChannel.tostring]
					SystemConfig_V2_IDEChannel V2_IDEChannel;
				case 25:
					[Property.SystemConfigSummary = V2_Platform.tostring]
					SystemConfig_V2_Platform V2_Platform;
			}
			
		// SystemConfig
		case 3:			
			switch(property.EventOpcode)
			{
				case 15:
					[Property.SystemConfigSummary = Service.tostring]
		            SystemConfig_Services Service;
		        case 21:
					[Property.SystemConfigSummary = IRQ.tostring]
		        	SystemConfig_IRQ IRQ;
		        case 22:
					[Property.SystemConfigSummary = PnP.tostring]
		        	SystemConfig_PnP PnP;
			}
	}
}

struct SystemConfig_Video = FormatString("Chip: %s, Adapter: %s, Bios: %s", ChipType, AdapterString, BiosString)
{
	UINT32 MemorySize;
	UINT32 XResolution;
	UINT32 YResolution;
	UINT32 BitsPerPixel;
	UINT32 VRefresh;
	UnicodeString(256) ChipType;
	UnicodeString(256) DACType;
	UnicodeString(256) AdapterString;
	UnicodeString(256) BiosString;
	UnicodeString(256) DeviceId;
	UINT32 StateFlags;
}

struct SystemConfig_LogDisk = FormatString("Drive: %s, FileSystem: %s", DriveLetterString, FileSystem)
{
	UINT64 StartOffset;
	UINT64 PartitionSize;
	UINT32 DiskNumber;
	UINT32 Size;
	UINT32 DriveType;
	UnicodeString(4) DriveLetterString;
	UINT32 Pad1;
	UINT32 PartitionNumber;
	UINT32 SectorsPerCluster;
	UINT32 BytesPerSector;
	UINT32 Pad2;
	Int64 NumberOfFreeClusters;
	INT64 TotalNumberOfClusters;
	UnicodeString(16) FileSystem;
	UINT32 VolumeExt;
	UINT32 Pad3;
}

struct SystemConfig_PhyDisk = FormatString("Manufacturer: %s, BootDriveLetter: %s", Manufacturer, BootDriveLetter)
{
	UINT32 DiskNumber;
	UINT32 BytesPerSector;
	UINT32 SectorsPerTrack;
	UINT32 TracksPerCylinder;
	UINT64 Cylinders;
	UINT32 SCSIPort;
	UINT32 SCSIPath;
	UINT32 SCSITarget;
	UINT32 SCSILun;
	UnicodeString(256) Manufacturer;
	UINT32 PartitionCount;
	UINT8 WriteCacheEnabled;
	UINT8 Pad;
	UnicodeString(3) BootDriveLetter;
	UnicodeString(2) Spare;
}

struct SystemConfig_Platform = FormatString("Manufacturer: %s, ProductName: %s", SystemManufacturer, SystemProductName)
{
	UnicodeString(64) SystemManufacturer;
	UnicodeString(64) SystemProductName;
	UnicodeString(64) BiosDate;
	UnicodeString(64) BiosVersion;
}

struct SystemConfig_IDEChannel = FormatString("Location: %s", LocationInformation)
{
	UINT32 TargetId;
	UINT32 DeviceType;
	UINT32 DeviceTimingMode;
	UINT32 LocationInformationLen;
	UnicodeString LocationInformation;
}

struct SystemConfig_PnP = FormatString("ID: %s, Name: %s", DeviceID, FriendlyName)
{
	UINT32 IDLength;
	UINT32 DescriptionLength;
	UINT32 FriendlyNameLength;
	UnicodeString DeviceID;
	UnicodeString DeviceDescription;
	UnicodeString FriendlyName;
	UnicodeString PdoName;
}

struct SystemConfig_IRQ = FormatString("IRQ: %u", IRQNum)
{
	UINT64 IRQAffinity;
	UINT16 IRQGroup;
	UINT16 Reserved;
	UINT32 IRQNum;
	UINT32 DeviceDescriptionLen;
	UnicodeString DeviceDescription;
}

struct SystemConfig_Network = FormatString("MaxUserPort: %u", MaxUserPort)
{
	UINT32 TcbTablePartitions;
	UINT32 MaxHashTableSize;
	UINT32 MaxUserPort;
	UINT32 TcpTimedWaitDelay;
}

struct SystemConfig_Power
{
	UINT8 S1;
	UINT8 S2;
	UINT8 S3;
	UINT8 S4;
	UINT8 S5;
	UINT8 Pad1;
 	UINT8 Pad2;
	UINT8 Pad3;
}

struct SystemConfig_CPU = FormatString("Processors: %u, (%u MHz)", NumberOfProcessors, MHz)
{
	UINT32 MHz;
	UINT32 NumberOfProcessors;
	UINT32 MemSize;
	UINT32 PageSize;
	UINT32 AllocationGranularity;
	Unicodestring(256) ComputerName;
	UnicodeString(134) DomainName;
	UINT32 HyperThreadingFlag;
}

Struct SystemConfig_NIC = FormatString("NICDescription: %s", NICDescription)
{
	UINT64 PhysicalAddress;
	UINT32 PhysicalAddressLen;
	UINT32 Ipv4Index;
	UINT32 Ipv6Index;
	UnicodeString NICDescription;
	UnicodeString IpAddresses;
	UnicodeString DnsServerAddresses;
}

Struct SystemConfig_Services = FormatString("ServiceName: %s (PID=%d)", ServiceName, ProcessId)
{
	UINT32 ProcessId;
	UINT32 ServiceState;
	UINT32 SubProcessTag;
	UnicodeString ServiceName;
	UnicodeString DisplayName;
	UnicodeString ProcessName;
	UnicodeString LoadOrderGroup;
	UnicodeString SvchostGroup;
}

UnsignedNumber SystemEtlPtrField(Size)
{
	Size = Size;
	DisplayFormat = FormatString( "0x%I64X", this );
}
struct SystemEtlPtr = Ptr.ToString
{
	SystemEtlPtrField(property.EventIs64Bit ? 8 : 4) Ptr;
}