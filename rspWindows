//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Remote Shutdown Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-RSP]: Remote Shutdown Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 3/2/2010
//#
//####

Protocol RSP = FormatString("%s,Interface:%s,OpnumOrder:%s",Property.MSRPCPtype?"Response":"Request",RSPMainType,RSPOpnum)
{
	switch (Property.MSRPCIfUuid)
	{
		case "{338CD001-2244-31F1-AAAA-900038001003}":
			[RSPMainType = "WinRegInterface"]
			struct WinRegInterface
			{
				switch (Property.MSRPCOpnum)
				{
					case 24://BaseInitiateSystemShutdown,3.1.4.1
						[RSPOpnum = "BaseInitiateShutdown"]
						struct RSPBaseInitiateShutdown
						{
							switch(Property.MSRPCPtype)
							{
								case 0x00:
									_struct Request
									{
										switch
										{ 
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												_struct
												{
													WCHARPtr ServerName;
													NdrUnicodeStringPtr Message;
													Align4		Pad;
													UINT32 TimeOut;
													BOOLEAN ForceAppsClosed;
													BOOLEAN RebootAfterShutdown;
												}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
										{ 
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												UINT32 ReturnValue = WinErrorCodeTable( this );
										}
									}
							}
						}
					case 25://BaseAbortSystemShutdown,3.1.4.2
						[RSPOpnum = "BaseAbortShutdown"]
						struct RSPBaseAbortShutdown = "(Empty)"
						{
							switch(Property.MSRPCPtype)
							{
								case 0x00:
									_struct Request
									{
										Switch
											{ 
												Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
												Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
												default:
													WCHARPtr ServerName;
											}
									}
								case 0x02:
									_struct Response
									{
										Switch
											{ 
												Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
												Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
												default:
												UINT32 ReturnValue = WinErrorCodeTable( this );
											}
									}
							}
						}
					case 30://BaseInitiateSystemShutdownEx,3.1.4.3
						[RSPOpnum = "BaseInitiateShutdownEx"]
						struct RSPBaseInitiateShutdownEx
						{
							switch(Property.MSRPCPtype)
							{
								case 0x00:
									_struct Request
									{
										switch
										{ 
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												_struct
												{				
													WCHARPtr ServerName;
													NdrUnicodeStringPtr Message;
													Align4		Pad1;
													UINT32 		TimeOut;
													BOOLEAN 	ForceAppsClosed;
													BOOLEAN 	RebootAfterShutdown;
													Align4 		pad2;
													UINT32 		Reason
													{
														UINT32 MinorCode:8 = FormatString(" (%s)%s",this.toBitString,RSPDwreasonMinorCodeTable(this));
														UINT32 Reserved8:8 = FormatString(" (%s)reserved",this.toBitString);
														UINT32 MajorCode:8 = FormatString(" (%s)%s",this.toBitString,RSPDwreasonMajorCodeTable(this));
														UINT32 Reserved24:4 = FormatString("(%s)Reserved",this.toBitString);
														UINT32 OptionFlag:4 = FormatString("(%s)%s",this.toBitString,RSPDwreasonOptionFlag(this));
													};
												}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
											{ 
												Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
												Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
												default:
													UINT32 ReturnValue = WinErrorCodeTable( this );
											}
									}
							}
						}
					case 0:
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
					case 16:
					case 17:
					case 18:
					case 19:
					case 20:
					case 21:
					case 22:
					case 23:
					case 26:
					case 27:
					case 28:
					case 29:
						Struct NotImplemented
						{
							Switch (property.MSRPCPType)
							{
								Case 0x00:// REQUEST
								[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not Implemented"]
								Struct Request 
								{
									ReportParserWarning("Rsp", "Invalid eventlog method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
									Blob(FrameLength - Offset) PayloadData;
								}
								
								Case 0x02:// RESPONSE
								[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not Implemented"]
								Struct Responsehee 
								{
									ReportParserWarning("Rsp", "Invalid eventlog method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
									Blob(FrameLength - Offset) PayloadData;
								}
							}
						};
					default:
						Struct 
						{
							ReportParserError(ParserErrorProtocolClassWindows, "Rsp", "WinRegInterface Unknown Method" ) ProtocolError;
							Blob(FrameLength - Offset) UnknownData;
						}
				}
			}
		case "{894DE0C0-0D55-11D3-A322-00C04FA321A1}":
			[RSPMainType = "InitShutdownInterface"]
			struct RSPInitShutdownInterface
			{
				switch (Property.MSRPCOpnum)
				{
					case 0://BaseInitiateShutdown,3.2.4.1
						[RSPOpnum = "BaseInitiateShutdown"]
						struct RSPBaseInitiateShutdown
						{
							switch(Property.MSRPCPtype)
							{
								case 0x00:
									_struct Request
									{
										switch
										{ 
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												_struct
												{
													WCHARPtr ServerName;
													NdrUnicodeStringPtr Message;
													Align4		Pad2;
													UINT32 DwTimeOut;
													BOOLEAN bForceAppsClosed;
													BOOLEAN bRebootAfterShutdown;
												}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
										{ 
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												UINT32 ReturnValue = WinErrorCodeTable( this );
										}
									}
							}
						}
					case 1://BaseAbortShutdown
						[RSPOpnum = "BaseAbortShutdown"]
						struct RSPBaseAbortShutdown = "(Empty)"
						{
							switch(Property.MSRPCPtype)
							{
								case 0x00:
									_struct Request
									{
										Switch
											{ 
												Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
												Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
												default:
													WCHARPtr ServerName;
											}
									}
								case 0x02:
									_struct Response
									{
										Switch
											{ 
												Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
												Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
												default:
												UINT32 ReturnValue = WinErrorCodeTable( this );
											}
									}
							}
						}
					case 2://BaseInitiateShutdownEx
						[RSPOpnum = "BaseInitiateShutdownEx"]
						struct RSPBaseInitiateShutdownEx
						{
							switch(Property.MSRPCPtype)
							{
								case 0x00:
									_struct Request
									{
										switch
										{ 
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												_struct
												{				
													WCHARPtr ServerName;
													NdrUnicodeStringPtr Message;
													Align4		Pad2;
													UINT32 		DwTimeOut;
													BOOLEAN 	bForceAppsClosed;
													BOOLEAN 	bRebootAfterShutdown;
													Align4 		pad3;
													UINT32 		DwReason
													{
														UINT32 MinorCode:8 = FormatString(" (%s)%s",this.toBitString,RSPDwreasonMinorCodeTable(this));
														UINT32 Reserved8:8 = FormatString(" (%s)reserved",this.toBitString);
														UINT32 MajorCode:8 = FormatString(" (%s)%s",this.toBitString,RSPDwreasonMajorCodeTable(this));
														UINT32 Reserved24:4 = FormatString("(%s)Reserved",this.toBitString);
														UINT32 OptionFlag:4 = FormatString("(%s)%s",this.toBitString,RSPDwreasonOptionFlag(this));
													};
												}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
											{ 
												Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
												Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
												default:
													UINT32 ReturnValue = WinErrorCodeTable( this );
											}
									}
							}
						}
				}
			}
		case "{D95AFE70-A6D5-4259-822E-2C84DA1DDB0D}":
			[RSPMainType = "WindowsShutdownInterface"]
			struct RSPWindowsShutdownInterface
			{
				switch (Property.MSRPCOpnum)													
				{
					case 0://WsdrInitiateShutdown	
						[RSPOpnum = "WsdrInitiateShutdown"]
						struct RSPWsdrInitiateShutdown
						{
							switch(Property.MSRPCPtype)
							{
								case 0x00:
									_struct Request
									{
										switch
										{ 
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												_struct
												{											
													NdrUnicodeStringPtr Message;
													Align4	Pad;
													UINT32 dwGracePeriod;
													UINT32 dwShutdownFlags
													{
														UINT32 A:1 = FormatString("(%s)%s",this.toBitString,this?"SHUTDOWN_FORCE_OTHERS":"");
														UINT32 B:1 = FormatString("(%s)%s",this.toBitString,this?"SHUTDOWN_FORCE_SELF":"");
														UINT32 C:1 = FormatString("(%s)%s",this.toBitString,this?"SHUTDOWN_RESTART":"");
														UINT32 D:1 = FormatString("(%s)%s",this.toBitString,this?"SHUTDOWN_POWEROFF":"");
														
														UINT32 E:1 = FormatString("(%s)%s",this.toBitString,this?"SHUTDOWN_NOREBOOT":"");
														UINT32 F:1 = FormatString("(%s)%s",this.toBitString,this?"SHUTDOWN_GRACE_OVERRIDE":"");
														UINT32 G:1 = FormatString("(%s)%s",this.toBitString,this?"SHUTDOWN_INSTALL_UPDATES":"");
														UINT32 H:1 = FormatString("(%s)%s",this.toBitString,this?"SHUTDOWN_RESTARTAPPS":"");
														
														UINT32 R:24= FormatString("(%s)%s",this.toBitString,"Reserved");
													};
													UINT32 DwReason
													{
														UINT32 MinorCode:8 = FormatString(" (%s)%s",this.toBitString,RSPDwreasonMinorCodeTable(this));
														UINT32 Reserved8:8 = FormatString(" (%s)reserved",this.toBitString);
														UINT32 MajorCode:8 = FormatString(" (%s)%s",this.toBitString,RSPDwreasonMajorCodeTable(this));
														UINT32 Reserved24:4 = FormatString("(%s)Reserved",this.toBitString);
														UINT32 OptionFlag:4 = FormatString("(%s)%s",this.toBitString,RSPDwreasonOptionFlag(this));
													};
													NdrUnicodeStringPtr lpClientHint;
												}
										}
									}
								case 0x02:
									_struct Response
									{
										switch
										{ 
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												UINT32 ReturnValue = WinErrorCodeTable( this );									
										}
									}
							}
						}
					case 1://WsdrAbortShutdown
						[RSPOpnum = "WsdrAbortShutdown"]
						struct RSPWsdrAbortShutdown
						{
							switch(Property.MSRPCPtype)
							{
								case 0x00:
									_struct Request
									{
										switch
										{ 
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												NdrUnicodeStringPtr lpClientHint;
										}
										
									}
								case 0x02:
									_struct Response
									{
										switch
										{ 
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												UINT32 ReturnValue = WinErrorCodeTable( this );			
										}
									}
							}
						}
				}
			}
		default:
			[RSPMainType = "Undefined",RSPOpnum = "Invalid"]
			_struct RSPNosuchInterface{};
	}
}

Table RSPDwreasonMinorCodeTable(value)//bir 1-8
{
	switch(value)
	{
		case 0x00:"SHTDN_REASON_MINOR_OTHER";
		case 0x01:"SHTDN_REASON_MINOR_MAINTENANCE";
		case 0x02:"SHTDN_REASON_MINOR_INSTALLATION";
		case 0x03:"SHTDN_REASON_MINOR_UPGRADE";
		case 0x04:"SHTDN_REASON_MINOR_RECONFIG";
		case 0x05:"SHTDN_REASON_MINOR_HUNG";
		case 0x06:"SHTDN_REASON_MINOR_UNSTABLE";
		case 0x07:"SHTDN_REASON_MINOR_DISK";
		case 0x08:"SHTDN_REASON_MINOR_PROCESSOR";
		case 0x09:"SHTDN_REASON_MINOR_NETWORKCARD";
		case 0x0A:"SHTDN_REASON_MINOR_POWER_SUPPLY";
		case 0x0B:"SHTDN_REASON_MINOR_CORDUNPLUGGED";
		case 0x0C:"SHTDN_REASON_MINOR_ENVIRONMENT";
		case 0x0D:"SHTDN_REASON_MINOR_HARDWARE_DRIVER";
		case 0x0E:"SHTDN_REASON_MINOR_OTHERDRIVER";
		case 0x0F:"SHTDN_REASON_MINOR_BLUESCREEN";
		case 0x10:"SHTDN_REASON_MINOR_SERVICEPACK";
		case 0x11:"SHTDN_REASON_MINOR_HOTFIX";
		case 0x12:"SHTDN_REASON_MINOR_SECURITYFIX";
		case 0x13:"SHTDN_REASON_MINOR_SECURITY";
		case 0x14:"SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY";
		case 0x15:"SHTDN_REASON_MINOR_WMI";
		case 0x16:"SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL";
		case 0x17:"SHTDN_REASON_MINOR_HOTFIX_UNINSTALL";
		case 0x18:"SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL";
		case 0x19:"SHTDN_REASON_MINOR_MMC";
		case 0x20:"SHTDN_REASON_MINOR_TERMSRV";
		default:"Undefined Minor Code";
	}
}

Table RSPDwreasonMajorCodeTable(value)//bit 17~20
{
	switch(value)
	{
		case 0x0:"SHTDN_REASON_MAJOR_OTHER";
		case 0x1:"SHTDN_REASON_MAJOR_HARDWARE";
		case 0x2:"SHTDN_REASON_MAJOR_OPERATINGSYSTEM";
		case 0x3:"SHTDN_REASON_MAJOR_SOFTWARE";
		case 0x4:"SHTDN_REASON_MAJOR_APPLICATION";
		case 0x5:"SHTDN_REASON_MAJOR_SYSTEM";
		case 0x6:"SHTDN_REASON_MAJOR_POWER";
		case 0x7:"SHTDN_REASON_MAJOR_LEGACY_API";
		default: "Undefined Major Code";
	}
}

Table RSPDwreasonOptionFlag(value)//bit from 29~32
{
	switch(value)
	{
		case 0x4:"SHTDN_REASON_FLAG_USER_DEFINED";
		case 0x8:"SHTDN_REASON_FLAG_PLANNED";
		default:"Undefined Optional Flag";
	}
}

struct RSPRegUnicodeString
{
	NdrAlign padding;
	UINT16 Length;
	UINT16 MaximumLength;
	NdrPtr Pointer;
	NdrConformantVarying ConformantVarying;
	switch
	{
		case ConformantVarying.ActualCount:
			UnicodeString(ConformantVarying.ActualCount) String;
	}
}


