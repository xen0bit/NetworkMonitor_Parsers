//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Windows Media Log Format Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-WMLOG]: Windows Media Log Format Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 12/30/2009
//#                          Minor, 3/11/2010
//#
//####
Protocol WMLOG = Property.WMLOGSummary
{
	[Post.Local.XML_IsEmpty = Property.IsXmlEmptyElement]
	[ Property.WMLOGSummary == "" ]
	XmlTag("XML") STag;
	switch
	{
		Case !Local.XML_IsEmpty:
			Struct
			{
				WMLOGSummary Summary;
				
				Switch
				{
					Case Property.SummaryContent != "":
						_Struct
						{
							Struct CIP = This.IP.ToString
							{
								[Post.Local.CIP_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-ip") STag;
								switch
								{
									Case !Local.CIP_IsEmpty:
										Struct
										{
											[ Property.WMLOGCIP ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) IP;
											XmlTag("c-ip") ETag;
										}
								}
							}
							
							
							Struct Date = This.Date.ToString
							{
								[Post.Local.Date_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("date") STag;
								switch
								{
									Case !Local.Date_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Date;
											XmlTag("date") ETag;
										}
								}
							}
							
							Struct Time = This.Time.ToString
							{
								[Post.Local.Time_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("time") STag;
								switch
								{
									Case !Local.Time_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Time;
											XmlTag("time") ETag;
										}
								}
							}
							
							Struct CDNS = This.DNS.ToString
							{
								[Post.Local.CDNS_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-dns") STag;
								switch
								{
									Case !Local.CDNS_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) DNS;
											XmlTag("c-dns") ETag;
										}
								}
							}

							Struct UriStem = This.UriStem.ToString
							{
								[Post.Local.UriStem_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("cs-uri-stem") STag;
								switch
								{
									Case !Local.UriStem_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) UriStem;
											XmlTag("cs-uri-stem") ETag;
										}
								}
							}

							Struct Starttime = This.Starttime.ToString
							{
								[Post.Local.Starttime_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-starttime") STag;
								switch
								{
									Case !Local.Starttime_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Starttime;
											XmlTag("c-starttime") ETag;
										}
								}
							}

							Struct Duration = This.Duration.ToString
							{
								[Post.Local.Duration_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("x-duration") STag;
								switch
								{
									Case !Local.Duration_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Duration;
											XmlTag("x-duration") ETag;
										}
								}
							}

							Struct Rate = This.Rate.ToString
							{
								[Post.Local.Rate_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-rate") STag;
								switch
								{
									Case !Local.Rate_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Rate;
											XmlTag("c-rate") ETag;
										}
								}
							}

							Struct Status = WMLOGStatusValueTable(This.Status)
							{
								[Post.Local.Status_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-status") STag;
								switch
								{
									Case !Local.Status_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Status = WMLOGStatusValueTable(this);
											XmlTag("c-status") ETag;
										}
								}
							}

							Struct Playerid = This.Playerid.ToString
							{
								[Post.Local.Playerid_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-playerid") STag;
								switch
								{
									Case !Local.Playerid_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Playerid;
											XmlTag("c-playerid") ETag;
										}
								}
							}

							Struct Playerversion = This.Playerversion.ToString
							{
								[Post.Local.Playerversion_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-playerversion") STag;
								switch
								{
									Case !Local.Playerversion_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Playerversion;
											XmlTag("c-playerversion") ETag;
										}
								}
							}

							Struct Playerlanguage = This.Playerlanguage.ToString
							{
								[Post.Local.Playerlanguage_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-playerlanguage") STag;
								switch
								{
									Case !Local.Playerlanguage_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Playerlanguage;
											XmlTag("c-playerlanguage") ETag;
										}
								}
							}

							Struct UserAgent = This.UserAgent.ToString
							{
								[Post.Local.UserAgent_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("cs-User-Agent") STag;
								switch
								{
									Case !Local.UserAgent_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) UserAgent;
											XmlTag("cs-User-Agent") ETag;
										}
								}
							}

							Struct Referer = This.Referer.ToString
							{
								[Post.Local.Referer_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("cs-Referer") STag;
								switch
								{
									Case !Local.Referer_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Referer;
											XmlTag("cs-Referer") ETag;
										}
								}
							}

							Struct Hostexe = This.Hostexe.ToString
							{
								[Post.Local.Hostexe_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-hostexe") STag;
								switch
								{
									Case !Local.Hostexe_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Hostexe;
											XmlTag("c-hostexe") ETag;
										}
								}
							}

							Struct Hostexever = This.Hostexever.ToString
							{
								[Post.Local.Hostexever_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-hostexever") STag;
								switch
								{
									Case !Local.Hostexever_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Hostexever;
											XmlTag("c-hostexever") ETag;
										}
								}
							}

							Struct OS = This.OS.ToString
							{
								[Post.Local.OS_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-os") STag;
								switch
								{
									Case !Local.OS_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) OS;
											XmlTag("c-os") ETag;
										}
								}
							}

							Struct OSversion = This.OSversion.ToString
							{
								[Post.Local.OSversion_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-osversion") STag;
								switch
								{
									Case !Local.OSversion_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) OSversion;
											XmlTag("c-osversion") ETag;
										}
								}
							}

							Struct Cpu = This.CPU.ToString
							{
								[Post.Local.Cpu_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-cpu") STag;
								switch
								{
									Case !Local.Cpu_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) CPU;
											XmlTag("c-cpu") ETag;
										}
								}
							}

							Struct Filelength = This.Filelength.ToString
							{
								[Post.Local.Filelength_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("filelength") STag;
								switch
								{
									Case !Local.Filelength_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Filelength;
											XmlTag("filelength") ETag;
										}
								}
							}

							Struct Filesize = This.Filesize.ToString
							{
								[Post.Local.Filesize_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("filesize") STag;
								switch
								{
									Case !Local.Filesize_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Filesize;
											XmlTag("filesize") ETag;
										}
								}
							}

							Struct Avgbandwidth = This.Avgbandwidth.ToString
							{
								[Post.Local.Avgbandwidth_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("Avgbandwidth") STag;
								switch
								{
									Case !Local.Avgbandwidth_IsEmpty:
										Struct
										{
											[ Property.WMLOGAvgbandwidth ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) Avgbandwidth;
											XmlTag("Avgbandwidth") ETag;
										}
								}
							}

							Struct Protocol = This.Protocol.ToString
							{
								[Post.Local.Protocol_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("protocol") STag;
								switch
								{
									Case !Local.Protocol_IsEmpty:
										Struct
										{
											[ Property.WMLOGProtocol ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) Protocol;
											XmlTag("protocol") ETag;
										}
								}
							}

							Struct Transport = This.Transport.ToString
							{
								[Post.Local.Transport_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("transport") STag;
								switch
								{
									Case !Local.Transport_IsEmpty:
										Struct
										{
											[ Property.WMLOGTransport ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) Transport;
											XmlTag("transport") ETag;
										}
								}
							}

							Struct Audiocodec = This.Audiocodec.ToString
							{
								[Post.Local.Audiocodec_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("Audiocodec") STag;
								switch
								{
									Case !Local.Audiocodec_IsEmpty:
										Struct
										{
											[ Property.WMLOGAudiocodec ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) Audiocodec;
											XmlTag("Audiocodec") ETag;
										}
								}
							}

							Struct Videocodec = This.Videocodec.ToString
							{
								[Post.Local.Videocodec_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("videocodec") STag;
								switch
								{
									Case !Local.Videocodec_IsEmpty:
										Struct
										{
											[ Property.WMLOGVideocodec ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) Videocodec;
											XmlTag("videocodec") ETag;
										}
								}
							}

							WMLOGChannelURL LOGChannelURL;

							Struct SCBytes = This.Bytes.ToString
							{
								[Post.Local.SCBytes_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("sc-bytes") STag;
								switch
								{
									Case !Local.SCBytes_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Bytes;
											XmlTag("sc-bytes") ETag;
										}
								}
							}

							Struct CBytes = This.Bytes.ToString
							{
								[Post.Local.CBytes_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-bytes") STag;
								switch
								{
									Case !Local.CBytes_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Bytes;
											XmlTag("c-bytes") ETag;
										}
								}
							}

							Struct PktsSent = This.PktsSent.ToString
							{
								[Post.Local.PktsSent_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("s-pkts-sent") STag;
								switch
								{
									Case !Local.PktsSent_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) PktsSent;
											XmlTag("s-pkts-sent") ETag;
										}
								}
							}

							Struct PktsReceived = This.PktsReceived.ToString
							{
								[Post.Local.PktsReceived_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-pkts-received") STag;
								switch
								{
									Case !Local.PktsReceived_IsEmpty:
										Struct
										{
											[ Property.WMLOGPktsReceived ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) PktsReceived;
											XmlTag("c-pkts-received") ETag;
										}
								}
							}

							Struct Pktslostclient = This.PktsLostClient.ToString
							{
								[Post.Local.Pktslostclient_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-pkts-lost-client") STag;
								switch
								{
									Case !Local.Pktslostclient_IsEmpty:
										Struct
										{
											[ Property.WMLOGPktsLostClient ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) PktsLostClient;
											XmlTag("c-pkts-lost-client") ETag;
										}
								}
							}

							Struct PktsLostNet = This.PktsLostNet.ToString
							{
								[Post.Local.PktsLostNet_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-pkts-lost-net") STag;
								switch
								{
									Case !Local.PktsLostNet_IsEmpty:
										Struct
										{
											[ Property.WMLOGPktsLostNet ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) PktsLostNet;
											XmlTag("c-pkts-lost-net") ETag;
										}
								}
							}

							Struct PktsLostContNet = This.PktsLostContNet.ToString
							{
								[Post.Local.PktsLostContNet_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-pkts-lost-cont-net") STag;
								switch
								{
									Case !Local.PktsLostContNet_IsEmpty:
										Struct
										{
											[ Property.WMLOGPktsLostContNet ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) PktsLostContNet;
											XmlTag("c-pkts-lost-cont-net") ETag;
										}
								}
							}

							Struct Resendreqs = This.Resendreqs.ToString
							{
								[Post.Local.Resendreqs_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-resendreqs") STag;
								switch
								{
									Case !Local.Resendreqs_IsEmpty:
										Struct
										{
											[ Property.WMLOGResendreqs ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) Resendreqs;
											XmlTag("c-resendreqs") ETag;
										}
								}
							}

							Struct PktsRecoveredECC = This.PktsRecoveredECC.ToString
							{
								[Post.Local.PktsRecoveredECC_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-pkts-recovered-ECC") STag;
								switch
								{
									Case !Local.PktsRecoveredECC_IsEmpty:
										Struct
										{
											[ Property.WMLOGPktsRecoveredECC ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) PktsRecoveredECC;
											XmlTag("c-pkts-recovered-ECC") ETag;
										}
								}
							}

							Struct PktsRecoveredResent = This.PktsRecoveredResent.ToString
							{
								[Post.Local.PktsRecoveredResent_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-pkts-recovered-resent") STag;
								switch
								{
									Case !Local.PktsRecoveredResent_IsEmpty:
										Struct
										{
											[ Property.WMLOGPktsRecoveredResent ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) PktsRecoveredResent;
											XmlTag("c-pkts-recovered-resent") ETag;
										}
								}
							}

							Struct Buffercount = This.Buffercount.ToString
							{
								[Post.Local.Buffercount_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-buffercount") STag;
								switch
								{
									Case !Local.Buffercount_IsEmpty:
										Struct
										{
											[ Property.WMLOGBuffercount ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) Buffercount;
											XmlTag("c-buffercount") ETag;
										}
								}
							}

							Struct TotalBufferTime = This.TotalBufferTime.ToString
							{
								[Post.Local.TotalBufferTime_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-totalbuffertime") STag;
								switch
								{
									Case !Local.TotalBufferTime_IsEmpty:
										Struct
										{
											[ Property.WMLOGTotalBufferTime ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) TotalBufferTime;
											XmlTag("c-totalbuffertime") ETag;
										}
								}
							}
											
							Struct Quality = This.Quality.ToString
							{
								[Post.Local.Quality_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("c-quality") STag;
								switch
								{
									Case !Local.Quality_IsEmpty:
										Struct
										{
											[ Property.WMLOGQuality ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) Quality;
											XmlTag("c-quality") ETag;
										}
								}
							}

							Struct SIP = This.IP.ToString
							{
								[Post.Local.SIP_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("s-ip") STag;
								switch
								{
									Case !Local.SIP_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) IP;
											XmlTag("s-ip") ETag;
										}
								}
							}

							Struct SDNS = This.DNS.ToString
							{
								[Post.Local.SDNS_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("s-dns") STag;
								switch
								{
									Case !Local.SDNS_IsEmpty:
										Struct
										{
											[ Property.WMLOGSDNS ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) DNS;
											XmlTag("s-dns") ETag;
										}
								}
							}

							Struct Totalclients = This.Totalclients.ToString
							{
								[Post.Local.Totalclients_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("s-totalclients") STag;
								switch
								{
									Case !Local.Totalclients_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) Totalclients;
											XmlTag("s-totalclients") ETag;
										}
								}
							}

							Struct CPUUtil = This.CPUUtil.ToString
							{
								[Post.Local.CPUUtil_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("s-cpu-util") STag;
								switch
								{
									Case !Local.CPUUtil_IsEmpty:
										Struct
										{
											[ Property.WMLOGSCPUUtil ]
											StringTerm(Property.XMLEncoding, "<", true, false, false) CPUUtil;
											XmlTag("s-cpu-util") ETag;
										}
								}
							}


							Struct URL = This.URL.ToString
							{
								[Post.Local.URL_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("cs-url") STag;
								switch
								{
									Case !Local.URL_IsEmpty:
										Struct
										{
											StringTerm(Property.XMLEncoding, "<", true, false, false) URL;
											XmlTag("cs-url") ETag;
										}
								}
							}
							
							Switch
							{
								Case ContainsBin(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), 0, "ContentDescription"):
									_Struct Contentdescription
									{
										[Post.Local.ContentDescription_IsEmpty = Property.IsXmlEmptyElement]
										XmlTag("ContentDescription") STag;
										switch
										{
											Case !Local.ContentDescription_IsEmpty:
												Struct
												{
													While [ !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</") ]
													{
														XmlElement(true) ContentDescription;
													}
													XmlTag("ContentDescription") ETag;
												}
										}
									}
							}
							While ClientLoggingData[ !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</") ]
							{
								XmlElement(true) ClientLoggingData;
							}
						}
						
						Default:
							[ Property.WMLOGSummary = "Connect-Time Log" ]
							_Struct
							{
								Struct CDNS = This.DNS.ToString
								{
									[Post.Local.CDNS_IsEmpty = Property.IsXmlEmptyElement]
									XmlTag("c-dns") STag;
									switch
									{
										Case !Local.CDNS_IsEmpty:
											Struct
											{
												StringTerm(Property.XMLEncoding, "<", true, false, false) DNS;
												XmlTag("c-dns") ETag;
											}
									}
								}
								
								Struct CIP = This.IP.ToString
								{
									[Post.Local.CIP_IsEmpty = Property.IsXmlEmptyElement]
									XmlTag("c-ip") STag;
									switch
									{
										Case !Local.CIP_IsEmpty:
											Struct
											{
												StringTerm(Property.XMLEncoding, "<", true, false, false) IP;
												XmlTag("c-ip") ETag;
											}
									}
								}
								
								Struct OS = This.OS.ToString
								{
									[Post.Local.OS_IsEmpty = Property.IsXmlEmptyElement]
									XmlTag("c-os") STag;
									switch
									{
										Case !Local.OS_IsEmpty:
											Struct
											{
												StringTerm(Property.XMLEncoding, "<", true, false, false) OS;
												XmlTag("c-os") ETag;
											}
									}
								}
								
								Struct OSversion = This.OSversion.ToString
								{
									[Post.Local.OSversion_IsEmpty = Property.IsXmlEmptyElement]
									XmlTag("c-osversion") STag;
									switch
									{
										Case !Local.OSversion_IsEmpty:
											Struct
											{
												StringTerm(Property.XMLEncoding, "<", true, false, false) OSversion;
												XmlTag("c-osversion") ETag;
											}
									}
								}
								
								Struct Date = This.Date.ToString
								{
									[Post.Local.Date_IsEmpty = Property.IsXmlEmptyElement]
									XmlTag("date") STag;
									switch
									{
										Case !Local.Date_IsEmpty:
											Struct
											{
												StringTerm(Property.XMLEncoding, "<", true, false, false) Date;
												XmlTag("date") ETag;
											}
									}
								}
								
								Struct Time = This.Time.ToString
								{
									[Post.Local.Time_IsEmpty = Property.IsXmlEmptyElement]
									XmlTag("time") STag;
									switch
									{
										Case !Local.Time_IsEmpty:
											Struct
											{
												StringTerm(Property.XMLEncoding, "<", true, false, false) Time;
												XmlTag("time") ETag;
											}
									}
								}
								
								Struct Cpu = This.CPU.ToString
								{
									[Post.Local.Cpu_IsEmpty = Property.IsXmlEmptyElement]
									XmlTag("c-cpu") STag;
									switch
									{
										Case !Local.Cpu_IsEmpty:
											Struct
											{
												StringTerm(Property.XMLEncoding, "<", true, false, false) CPU;
												XmlTag("c-cpu") ETag;
											}
									}
								}
								
								Struct Transport = This.Transport.ToString
								{
									[Post.Local.Transport_IsEmpty = Property.IsXmlEmptyElement]
									XmlTag("transport") STag;
									switch
									{
										Case !Local.Transport_IsEmpty:
											Struct
											{
												StringTerm(Property.XMLEncoding, "<", true, false, false) Transport;
												XmlTag("transport") ETag;
											}
									}
								}
							}
				}
				
				Switch
				{
					Case Property.WMLOGSCPUUtil == "-" &&
						 Property.WMLOGCIP == "0.0.0.0" &&
						 Property.WMLOGSDNS == "-":
						[ Property.WMLOGSummary = "Legacy Log" ]
						_Struct{}
						
					Case Property.WMLOGAudiocodec == "-" &&
						 Property.WMLOGCIP == "0.0.0.0" &&
						 Property.WMLOGSCPUUtil == "-" &&
						 Property.WMLOGSDNS == "-" &&
						 Property.WMLOGVideocodec == "-":
						[ Property.WMLOGSummary = "Streaming Log" ]
						_Struct{}
					
					Case Property.WMLOGAvgbandwidth == "-" &&
						 Property.WMLOGBuffercount == "-" &&
						 Property.WMLOGPktsLostClient == "-" &&
						 Property.WMLOGPktsLostContNet == "-" &&
						 Property.WMLOGPktsLostNet == "-" &&
						 Property.WMLOGPktsReceived == "-" &&
						 Property.WMLOGPktsRecoveredECC == "-" &&
						 Property.WMLOGPktsRecoveredResent == "-" &&
						 Property.WMLOGQuality == "100" &&
						 Property.WMLOGResendreqs == "-" &&
						 Property.WMLOGTotalBufferTime == "-" &&
						 Property.WMLOGProtocol == "Cache" &&
						 Property.WMLOGTransport == "-":
						 [ Property.WMLOGSummary = "Rendering Log" ]
						_Struct{}
				}
				
				XmlTag("XML") ETag;
			}
	}
}

[ Property.WMLOGChannelURLValue = "" ]
Struct WMLOGChannelURL = Formatstring("%s", Property.WMLOGChannelURLValue)
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, "</", true, false, false), "c-channelURL")]
	{
		[Post.Local.ChannelURL_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("c-channelURL") STag;
		switch
		{
			Case !Local.ChannelURL_IsEmpty:
				Struct
				{
					Switch
					{
						Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, "</", true, false, false), "c-channelURL"):
							WMLOGChannelURL ChannelURL;
						Default:
							[ Property.WMLOGChannelURLValue = this.Tostring]
							StringTerm(Property.XMLEncoding, "<", true, false, false) ChannelURLValue;
					}
				}
		}
		XmlTag("c-channelURL") ETag;
	}
}

Struct WMLOGSummary = This.SummaryLog.ToString
{
	[Post.Local.Summary_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Summary") STag;
	switch
	{
		Case !Local.Summary_IsEmpty:
			Struct
			{
				[ Property.SummaryContent = StringTerm(Framedata, Frameoffset, Property.XMLEncoding, "<", true, false, false) ]
				Switch
				{
					Case Property.SummaryContent != "":
						WMLOGLogData SummaryLog;	
				}
				XmlTag("Summary") ETag;
			}
	}
}

Table WMLOGStatusValueTable( value )
{
	Switch( value )
	{
		Case "200": "No Error - The client successfully streamed and submitted the log";
		Case "210": "Client Successfully Reconnected - The client disconnected and then reconnected to the server";
		Default:"Unknown value";
	}
}

[ RegisterBefore(HTTP.Request.HeaderFields.DefaultName, WMLOGWebServerLog, "MX_STATS_LogLine" ) ]
Struct  WMLOGWebServerLog
{
	AsciiStringTerm("\r\n") WebServerLog
	{
		WMLOGLogData WebServerLogData;
	};
}
Struct WMLOGLogData
{
	While[ UINT8(FrameData, FrameOffset) == 0x20 ]
	{
		DynamicSwitch AsciiString(1)
		{
			default: struct{}
		};
	}
	StringTerm( 0, " ", true, false, true) ClientIP;
	StringTerm( 0, " ", true, false, true) Date;
	StringTerm( 0, " ", true, false, true) Time;
	StringTerm( 0, " ", true, false, true) ClientDNS;
	StringTerm( 0, " ", true, false, true) UriStem;
	StringTerm( 0, " ", true, false, true) ClientStarttime;
	StringTerm( 0, " ", true, false, true) Duration;
	StringTerm( 0, " ", true, false, true) ClientRate;
	StringTerm( 0, " ", true, false, true) ClientStatus;
	StringTerm( 0, " ", true, false, true) ClientPlayerid;
	StringTerm( 0, " ", true, false, true) ClientPlayerversion;
	StringTerm( 0, " ", true, false, true) ClientPlayerlanguage;
	StringTerm( 0, " ", true, false, true) UserAgent;
	StringTerm( 0, " ", true, false, true) Referer;
	StringTerm( 0, " ", true, false, true) ClientHostexe;
	StringTerm( 0, " ", true, false, true) ClientHostexever;
	StringTerm( 0, " ", true, false, true) ClientOS;
	StringTerm( 0, " ", true, false, true) ClientOSVersion;
	StringTerm( 0, " ", true, false, true) ClientCPU;
	StringTerm( 0, " ", true, false, true) FileLength;
	StringTerm( 0, " ", true, false, true) FileSize;
	StringTerm( 0, " ", true, false, true) AvgBandWidth;
	StringTerm( 0, " ", true, false, true) Protocol;
	StringTerm( 0, " ", true, false, true) Transport;
	StringTerm( 0, " ", true, false, true) Audiocodec;
	StringTerm( 0, " ", true, false, true) Videocodec;
	StringTerm( 0, " ", true, false, true) ClientChannelURL;
	StringTerm( 0, " ", true, false, true) Bytes;
	StringTerm( 0, " ", true, false, true) ClientBytes;
	StringTerm( 0, " ", true, false, true) ServerPktsSent;
	StringTerm( 0, " ", true, false, true) ClientPktsReceived;
	StringTerm( 0, " ", true, false, true) ClientPktsLostClient;
	StringTerm( 0, " ", true, false, true) ClientPktsLostNet;
	StringTerm( 0, " ", true, false, true) ClientPktsLostContNet;
	StringTerm( 0, " ", true, false, true) ClientResendreqs;
	StringTerm( 0, " ", true, false, true) ClientPktsRecoveredECC;
	StringTerm( 0, " ", true, false, true) ClientPktsRecoveredResent;
	StringTerm( 0, " ", true, false, true) ClientBufferCount;
	StringTerm( 0, " ", true, false, true) ClientTotalBufferTime;
	StringTerm( 0, " ", true, false, true) ClientQuality;
	StringTerm( 0, " ", true, false, true) ServerIP;
	StringTerm( 0, " ", true, false, true) ServerDNS;
	StringTerm( 0, " ", true, false, true) ServerTotalClients;
	Switch
	{
		Case ContainsBin( StringTerm( 0, "<", true, false, false), 0, " " ):
			_Struct
			{
				StringTerm( 0, " ", true, false, true) ServerCPUUtil;
				Switch
				{
					Case ContainsBin( StringTerm( 0, " ", true, false, false), 0, "\\\\" ):
						_Struct
						{
							StringTerm( 0, " ", true, false, true) URL;
							StringTerm( 0, " ", true, false, true) MediaName;
							StringTerm( 0, " ", true, false, true) MediaRole;
						}
					Default:
						_Struct
						{
							StringTerm( 0, " ", true, false, true) UserName;
							StringTerm( 0, " ", true, false, true) ServerSessionID;
							StringTerm( 0, " ", true, false, true) ServerContentPath;
							StringTerm( 0, " ", true, false, true) URL;
							StringTerm( 0, " ", true, false, true) MediaName;
							StringTerm( 0, " ", true, false, true) ClientMaxBandWidth;
							StringTerm( 0, " ", true, false, true) MediaRole;
							StringTerm( 0, "<", true, false, false) ServerProxied;
						}
				}
				
			}
		Default:
			StringTerm( 0, "<", true, false, false) ServerCPUUtil1;
	}
}