//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Routing and Remote Access Server (RRAS) Management Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-RRASM]: Routing and Remote Access Server (RRAS) Management Protocol Specification (4.0)
//#
//#  Comments:               Parser Framework: PAC v2.1.1577.0
//#                          Microsoft implementation is encrypted
//#
//#  Revision Class and Date:Major, 7/17/2009
//#
//####

Protocol RRASM = FormatString( "%s %s%s%s%s%s", 
	Property.RRASMMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.RRASMSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.RRASMSummary : "" )
{
	[Property.RRASMSummary = ""]
	[Property.RRASMMethodName = RRASMMethodNameTable( Property.MSRPCOpnum )]
	Switch( Property.MSRPCOpnum )
	{
		Case 0:
			_Struct RMprAdminServerGetInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 1:
			_Struct RRasAdminConnectionEnum
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 2:
			_Struct RRasAdminConnectionGetInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 3:
			_Struct RRasAdminConnectionClearStats
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 4:
			_Struct RRasAdminPortEnum
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 5:
			_Struct RRasAdminPortGetInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 6:
			_Struct RRasAdminPortClearStats
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 7:
			_Struct RRasAdminPortReset
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 8:
			_Struct RRasAdminPortDisconnect
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 9:
			_Struct RRouterInterfaceTransportSetGlobalInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 10:
			_Struct RRouterInterfaceTransportGetGlobalInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 11:
			_Struct RRouterInterfaceGetHandle
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 12:
			_Struct RRouterInterfaceCreate
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 13:
			_Struct RRouterInterfaceGetInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 14:
			_Struct RRouterInterfaceSetInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 15:
			_Struct RRouterInterfaceDelete
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 16:
			_Struct RRouterInterfaceTransportRemove
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 17:
			_Struct RRouterInterfaceTransportAdd
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 18:
			_Struct RRouterInterfaceTransportGetInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 19:
			_Struct RRouterInterfaceTransportSetInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 20:
			_Struct RRouterInterfaceEnum
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 21:
			_Struct RRouterInterfaceConnect
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 22:
			_Struct RRouterInterfaceDisconnect
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 23:
			_Struct RRouterInterfaceUpdateRoutes
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 24:
			_Struct RRouterInterfaceQueryUpdateResult
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 25:
			_Struct RRouterInterfaceUpdatePhonebookInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 26:
			_Struct RMIBEntryCreate
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 27:
			_Struct RMIBEntryDelete
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 28:
			_Struct RMIBEntrySet
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 29:
			_Struct RMIBEntryGet
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 30:
			_Struct RMIBEntryGetFirst
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 31:
			_Struct RMIBEntryGetNext
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 32:
			_Struct RMIBGetTrapInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 33:
			_Struct RMIBSetTrapInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 34:
			_Struct RRasAdminConnectionNotification
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 35:
			_Struct RRasAdminSendUserMessage
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 36:
			_Struct RRouterDeviceEnum
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 37:
			_Struct RRouterInterfaceTransportCreate
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 38:
			_Struct RRouterInterfaceDeviceGetInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 39:
			_Struct RRouterInterfaceDeviceSetInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 40:
			_Struct RRouterInterfaceSetCredentialsEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 41:
			_Struct RRouterInterfaceGetCredentialsEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 42:
			_Struct RRasAdminConnectionRemoveQuarantine
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 43:
			_Struct RMprAdminServerSetInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 44:
			_Struct RMprAdminServerGetInfoEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 45:
			_Struct RRasAdminConnectionEnumEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 46:
			_Struct RRasAdminConnectionGetInfoEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 47:
			_Struct RMprAdminServerSetInfoEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 48:
			_Struct RRasAdminUpdateConnection
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 49:
			_Struct RRouterInterfaceSetCredentialsLocal
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 50:
			_Struct RRouterInterfaceGetCredentialsLocal
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Default:
			Switch
			{
				case IsValueNone(Property.MSRPCOpnum):
					struct
					{
						Blob( FrameLength - Offset ) data;
						ReportParserWarning("RRASM", "Property MSRPCOpnum is missing") ParserWarning;
					}
				default:
					ReportParserError( ParserErrorProtocolClassWindows, "RRASM", "Unknown dimsvc method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
	}
}

Table RRASMMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "RMprAdminServerGetInfo";
		Case 1: "RRasAdminConnectionEnum";
		Case 2: "RRasAdminConnectionGetInfo";
		Case 3: "RRasAdminConnectionClearStats";
		Case 4: "RRasAdminPortEnum";
		Case 5: "RRasAdminPortGetInfo";
		Case 6: "RRasAdminPortClearStats";
		Case 7: "RRasAdminPortReset";
		Case 8: "RRasAdminPortDisconnect";
		Case 9: "RRouterInterfaceTransportSetGlobalInfo";
		Case 10: "RRouterInterfaceTransportGetGlobalInfo";
		Case 11: "RRouterInterfaceGetHandle";
		Case 12: "RRouterInterfaceCreate";
		Case 13: "RRouterInterfaceGetInfo";
		Case 14: "RRouterInterfaceSetInfo";
		Case 15: "RRouterInterfaceDelete";
		Case 16: "RRouterInterfaceTransportRemove";
		Case 17: "RRouterInterfaceTransportAdd";
		Case 18: "RRouterInterfaceTransportGetInfo";
		Case 19: "RRouterInterfaceTransportSetInfo";
		Case 20: "RRouterInterfaceEnum";
		Case 21: "RRouterInterfaceConnect";
		Case 22: "RRouterInterfaceDisconnect";
		Case 23: "RRouterInterfaceUpdateRoutes";
		Case 24: "RRouterInterfaceQueryUpdateResult";
		Case 25: "RRouterInterfaceUpdatePhonebookInfo";
		Case 26: "RMIBEntryCreate";
		Case 27: "RMIBEntryDelete";
		Case 28: "RMIBEntrySet";
		Case 29: "RMIBEntryGet";
		Case 30: "RMIBEntryGetFirst";
		Case 31: "RMIBEntryGetNext";
		Case 32: "RMIBGetTrapInfo";
		Case 33: "RMIBSetTrapInfo";
		Case 34: "RRasAdminConnectionNotification";
		Case 35: "RRasAdminSendUserMessage";
		Case 36: "RRouterDeviceEnum";
		Case 37: "RRouterInterfaceTransportCreate";
		Case 38: "RRouterInterfaceDeviceGetInfo";
		Case 39: "RRouterInterfaceDeviceSetInfo";
		Case 40: "RRouterInterfaceSetCredentialsEx";
		Case 41: "RRouterInterfaceGetCredentialsEx";
		Case 42: "RRasAdminConnectionRemoveQuarantine";
		Case 43: "RMprAdminServerSetInfo";
		Case 44: "RMprAdminServerGetInfoEx";
		Case 45: "RRasAdminConnectionEnumEx";
		Case 46: "RRasAdminConnectionGetInfoEx";
		Case 47: "RMprAdminServerSetInfoEx";
		Case 48: "RRasAdminUpdateConnection";
		Case 49: "RRouterInterfaceSetCredentialsLocal";
		Case 50: "RRouterInterfaceGetCredentialsLocal";
		Default: "unknown";
	}
}

