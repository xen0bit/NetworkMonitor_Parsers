//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Web Services Dynamic Discovery (WS-Discovery)
//#
//#  Details:                
//#
//#  Public References:      http://schemas.xmlsoap.org/ws/2005/04/discovery/
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 01/14/2010
//#                          Minor, 03/11/2010
//#
//####

[Property.SoapBodySummary = "WS-Discovery Payload"]
[RegisterBefore(SoapBody.DefaultSoapBody, WSDiscovery, WSDiscoverySoapActionTable(Property.ActionURI))]
Protocol WSDiscovery = Property.WSDiscoverySummary
{
	Switch(Property.ActionURI)
	{
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/Hello":
			[Property.WSDiscoverySummary = this.ToString]
			WSDiscoveryHelloOp WSDiscoveryHello;
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/Bye":
			[Property.WSDiscoverySummary = this.ToString]
			WSDiscoveryByeOp WSDiscoveryBye;
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/ProbeMatches":
			[Property.WSDiscoverySummary = this.ToString]
			WSDiscoveryProbeMatchesOp WSDiscoveryProbeMatches;
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/Probe":
			[Property.WSDiscoverySummary = this.ToString]
			WSDiscoveryProbeOp WSDiscoveryProbe;
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/ResolveMatches":
			[Property.WSDiscoverySummary = this.ToString]
			WSDiscoveryResolveMatchesOp WSDiscoveryResolveMatches;
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/Resolve":
			[Property.WSDiscoverySummary = this.ToString]
			WSDiscoveryResolveOp WSDiscoveryResolve;
		Default:
			[Property.WSDiscoverySummary = "The Other Message"]
			While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
			{
				XmlElement(true) AnyNode;
			}
	}
}

table WSDiscoverySoapActionTable(value)
{
	switch(value)
	{
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/Hello":
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/Bye":
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/ProbeMatches":
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/Probe":
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/ResolveMatches":
		Case "http://schemas.xmlsoap.org/ws/2005/04/discovery/Resolve":true;
		default : false;
	}
}

Struct WSDiscoveryHelloOp = FormatString("%s Message", Property.WSDiscoveryHelloSummary)
{
	[Post.Local.WSDiscoveryHello_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	Switch
	{
		Case !Local.WSDiscoveryHello_IsEmpty:
			Struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Hello"):
						[Property.WSDiscoveryHelloSummary = "Hello"]
						WSDiscoveryHelloElement Hello;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSDiscoveryHelloSummary = "Fault Hello"]
						SoapFaultElement FaultHelloOpElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSDiscoveryHelloSummary = "Encrypted Hello Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

Struct WSDiscoveryByeOp = FormatString("%s Message", Property.WSDiscoveryByeSummary)
{
	[Post.Local.WSDiscoveryBye_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	Switch
	{
		Case !Local.WSDiscoveryBye_IsEmpty:
			Struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Bye"):
						[Property.WSDiscoveryByeSummary = "Bye"]
						WSDiscoveryByeElement Bye;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSDiscoveryByeSummary = "Fault Bye"]
						SoapFaultElement FaultByeOpElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSDiscoveryByeSummary = "Encrypted Bye Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

Struct WSDiscoveryProbeMatchesOp = FormatString("%s Message", Property.WSDiscoveryProbeMatchesSummary)
{
	[Post.Local.WSDiscoveryProbeMatches_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	Switch
	{
		Case !Local.WSDiscoveryProbeMatches_IsEmpty:
			Struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ProbeMatches"):
						[Property.WSDiscoveryProbeMatchesSummary = "ProbeMatches"]
						WSDiscoveryProbeMatchesElement ProbeMatches;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSDiscoveryProbeMatchesSummary = "Fault ProbeMatches"]
						SoapFaultElement FaultProbeMatchesOpElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSDiscoveryProbeMatchesSummary = "Encrypted ProbeMatches Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

Struct WSDiscoveryProbeOp = FormatString("%s Message", Property.WSDiscoveryProbeSummary)
{
	[Post.Local.WSDiscoveryProbe_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	Switch
	{
		Case !Local.WSDiscoveryProbe_IsEmpty:
			Struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Probe"):
						[Property.WSDiscoveryProbeSummary = "Probe"]
						WSDiscoveryProbeElement Probe;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSDiscoveryProbeSummary = "Fault Probe"]
						SoapFaultElement FaultProbeOpElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSDiscoveryProbeSummary = "Encrypted Probe Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

Struct WSDiscoveryResolveMatchesOp = FormatString("%s Message", Property.WSDiscoveryResolveMatchesSummary)
{
	[Post.Local.WSDiscoveryResolveMatches_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	Switch
	{
		Case !Local.WSDiscoveryResolveMatches_IsEmpty:
			Struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ResolveMatches"):
						[Property.WSDiscoveryResolveMatchesSummary = "ResolveMatches"]
						WSDiscoveryResolveMatchesElement ResolveMatches;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSDiscoveryResolveMatchesSummary = "Fault ResolveMatches"]
						SoapFaultElement FaultResolveMatchesOpElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSDiscoveryResolveMatchesSummary = "Encrypted ResolveMatches Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

Struct WSDiscoveryResolveOp = FormatString("%s Message", Property.WSDiscoveryResolveSummary)
{
	[Post.Local.WSDiscoveryResolve_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	Switch
	{
		Case !Local.WSDiscoveryResolve_IsEmpty:
			Struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Resolve"):
						[Property.WSDiscoveryResolveSummary = "Resolve"]
						WSDiscoveryResolveElement Resolve;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSDiscoveryResolveSummary = "Fault Resolve"]
						SoapFaultElement FaultResolveOpElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSDiscoveryResolveSummary = "Encrypted Resolve Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

Struct WSDiscoveryHelloElement = this.STag.ToString
{
	[Post.Local.WSDiscoveryHelloElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Hello") STag;
	
	Switch
	{
		Case !Local.WSDiscoveryHelloElement_IsEmpty:
			Struct
			{
				WSDiscoveryHello Hello;
				XmlTag("Hello") ETag;
			}	
	}
}

Struct WSDiscoveryHello
{
	WSADDREndpointReferenceElement EndpointReference;
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Types") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct Types = this.Types.ToString
			{
				[Post.Local.Types_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Types") STag;
				Switch
				{
					Case !Local.Types_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Types;
							XmlTag("Types") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Scopes") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct Scopes = this.Scopes.ToString
			{
				[Post.Local.Scopes_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Scopes") STag;
				Switch
				{
					Case !Local.Scopes_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Scopes;
							XmlTag("Scopes") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "XAddrs") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct XAddrs = this.XAddrs.ToString
			{
				[Post.Local.XAddrs_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("XAddrs") STag;
				Switch
				{
					Case !Local.XAddrs_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) XAddrs;
							XmlTag("XAddrs") ETag;
						}
				}
			}
			
	}
	
	Struct MetadataVersion = this.MetadataVersion.ToString
	{
		[Post.Local.MetadataVersion_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("MetadataVersion") STag;
		Switch
		{
			Case !Local.MetadataVersion_IsEmpty:
				Struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) MetadataVersion;
					XmlTag("MetadataVersion") ETag;
				}
		}
	}

	While [ !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</") ]
	{
		Switch
		{
			Default:
				XmlElement(true) OtherElement;
		}
	}
}

Struct WSDiscoveryByeElement = this.STag.ToString
{
	[Post.Local.WSDiscoveryByeElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Bye") STag;
	
	Switch
	{
		Case !Local.WSDiscoveryByeElement_IsEmpty:
			Struct
			{
				WSDiscoveryBye Bye;
				XmlTag("Bye") ETag;
			}	
	}
}

Struct WSDiscoveryBye
{
	WSADDREndpointReferenceElement EndpointReference;
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Types") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct Types = this.Types.ToString
			{
				[Post.Local.Types_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Types") STag;
				Switch
				{
					Case !Local.Types_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Types;
							XmlTag("Types") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Scopes") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct Scopes = this.Scopes.ToString
			{
				[Post.Local.Scopes_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Scopes") STag;
				Switch
				{
					Case !Local.Scopes_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Scopes;
							XmlTag("Scopes") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "XAddrs") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct XAddrs = this.XAddrs.ToString
			{
				[Post.Local.XAddrs_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("XAddrs") STag;
				Switch
				{
					Case !Local.XAddrs_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) XAddrs;
							XmlTag("XAddrs") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MetadataVersion") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct MetadataVersion = this.MetadataVersion.ToString
			{
				[Post.Local.MetadataVersion_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("MetadataVersion") STag;
				Switch
				{
					Case !Local.MetadataVersion_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) MetadataVersion;
							XmlTag("MetadataVersion") ETag;
						}
				}
			}
			
	}

	While [ !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</") ]
	{
		XmlElement(true) OtherElement;
	}
}

Struct WSDiscoveryProbeMatchesElement = this.STag.Tostring
{
	[Post.Local.WSDiscoveryProbeMatchesElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ProbeMatches") STag;
	
	Switch
	{
		Case !Local.WSDiscoveryProbeMatchesElement_IsEmpty:
			Struct
			{
				While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ProbeMatch") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
				{
					struct ProbeMatch = this.STag.ToString
					{
						[Post.Local.ProbeMatch_IsEmpty = Property.IsXmlEmptyElement]
						XmlTag("ProbeMatch") STag;
						switch
						{
							Case !Local.ProbeMatch_IsEmpty:
								struct
								{
									WSDiscoveryProbeMatchElement ProbeMatch;
									XmlTag("ProbeMatch") ETag;
								}
						}
					}
					
				}
				
				While [ !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</") ]
				{
					XmlElement(true) OtherElement;
				}
				
				XmlTag("ProbeMatches") ETag;
			}
	}
}

Struct WSDiscoveryProbeMatchElement
{
	WSADDREndpointReferenceElement EndpointReference;
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Types") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct Types = this.Types.ToString
			{
				[Post.Local.Types_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Types") STag;
				Switch
				{
					Case !Local.Types_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Types;
							XmlTag("Types") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Scopes") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct Scopes = this.Scopes.ToString
			{
				[Post.Local.Scopes_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Scopes") STag;
				Switch
				{
					Case !Local.Scopes_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Scopes;
							XmlTag("Scopes") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "XAddrs") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct XAddrs = this.XAddrs.ToString
			{
				[Post.Local.XAddrs_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("XAddrs") STag;
				Switch
				{
					Case !Local.XAddrs_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) XAddrs;
							XmlTag("XAddrs") ETag;
						}
				}
			}
			
	}
	
	Struct MetadataVersion = this.MetadataVersion.ToString
	{
		[Post.Local.MetadataVersion_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("MetadataVersion") STag;
		Switch
		{
			Case !Local.MetadataVersion_IsEmpty:
				Struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) MetadataVersion;
					XmlTag("MetadataVersion") ETag;
				}
		}
	}

	While [ !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</") ]
	{
		Switch
		{
			Default:
				XmlElement(true) OtherElement;
		}
	}
}

Struct WSDiscoveryProbeElement = this.STag.ToString
{
	[Post.Local.WSDiscoveryProbeElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Probe") STag;
	
	Switch
	{
		Case !Local.WSDiscoveryProbeElement_IsEmpty:
			Struct
			{
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Types") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						Struct Types = this.Types.ToString
						{
							[Post.Local.Types_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("Types") STag;
							Switch
							{
								Case !Local.Types_IsEmpty:
									Struct
									{
										StringTerm(Property.XMLEncoding, "<", true, false, false) Types;
										XmlTag("Types") ETag;
									}
							}
						}
						
				}
				
				While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Scopes") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
				{
					Struct Scopes = this.Scopes.ToString
					{
						[Post.Local.Scopes_IsEmpty = Property.IsXmlEmptyElement]
						XmlTag("Scopes") STag;
						Switch
						{
							Case !Local.Scopes_IsEmpty:
								Struct
								{
									StringTerm(Property.XMLEncoding, "<", true, false, false) Scopes;
									XmlTag("Scopes") ETag;
								}
						}
					}
				}
				
				Switch
				{
					Case !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						XmlElement(true)	OtherElement;			
				}
				
				XmlTag("Probe") ETag;
			}
	}
}

Struct WSDiscoveryResolveMatchesElement = this.STag.Tostring
{
	[Post.Local.WSDiscoveryResolveMatchesElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ResolveMatches") STag;
	
	Switch
	{
		Case !Local.WSDiscoveryResolveMatchesElement_IsEmpty:
			Struct
			{
				While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ResolveMatch") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
				{
					struct ResolveMatch = this.STag.ToString
					{
						[Post.Local.ResolveMatch_IsEmpty = Property.IsXmlEmptyElement]
						XmlTag("ResolveMatch") STag;
						switch
						{
							Case !Local.ResolveMatch_IsEmpty:
								struct
								{
									WSDiscoveryResolveMatchElement ResolveMatch;
									XmlTag("ResolveMatch") ETag;
								}
						}
					}
					
				}
				
				While [ !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</") ]
				{
					XmlElement(true) OtherElement;
				}
				
				XmlTag("ResolveMatches") ETag;
			}
	}
}

Struct WSDiscoveryResolveMatchElement
{
	WSADDREndpointReferenceElement EndpointReference;
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Types") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct Types = this.Types.ToString
			{
				[Post.Local.Types_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Types") STag;
				Switch
				{
					Case !Local.Types_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Types;
							XmlTag("Types") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Scopes") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			Struct Scopes = this.Scopes.ToString
			{
				[Post.Local.Scopes_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Scopes") STag;
				Switch
				{
					Case !Local.Scopes_IsEmpty:
						Struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Scopes;
							XmlTag("Scopes") ETag;
						}
				}
			}
			
	}
	
	Struct XAddrs = this.XAddrs.ToString
	{
		[Post.Local.XAddrs_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("XAddrs") STag;
		Switch
		{
			Case !Local.XAddrs_IsEmpty:
				Struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) XAddrs;
					XmlTag("XAddrs") ETag;
				}
		}
	}
	
	Struct MetadataVersion = this.MetadataVersion.ToString
	{
		[Post.Local.MetadataVersion_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("MetadataVersion") STag;
		Switch
		{
			Case !Local.MetadataVersion_IsEmpty:
				Struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) MetadataVersion;
					XmlTag("MetadataVersion") ETag;
				}
		}
	}

	While [ !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</") ]
	{
		XmlElement(true) OtherElement;
	}
}

Struct WSDiscoveryResolveElement = this.STag.Tostring
{
	[Post.Local.WSDiscoveryResolveElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Resolve") STag;
	Switch
	{
		Case !Local.WSDiscoveryResolveElement_IsEmpty:
			Struct
			{
				WSADDREndpointReferenceElement EndpointReference;
				
				While [ !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</") ]
				{
					XmlElement(true) OtherElement;
				}
				
				XmlTag("Resolve") ETag;
			}
	}
}