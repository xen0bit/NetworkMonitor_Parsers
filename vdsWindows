//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Virtual Disk Service (VDS) Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-VDS]: Virtual Disk Service (VDS) Protocol Specification (14.0)
//#
//#  Comments:               Parser Framework: PAC v2.1.1577.0
//#                          Microsoft implementation is encrypted
//#
//#  Revision Class and Date:Major, 7/2/2009
//#
//####

Protocol VDS = FormatString( "%s %s%s%s%s%s", 
	Property.VDSMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.VDSSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.VDSSummary : "" )
{
	[Property.VDSSummary = ""]
	Switch( Property.MSRPCIfUuid )
	{
		Case "{3B69D7F5-9D94-4648-91CA-79939BA263BF}":
			[Property.VDSMethodName = "IVdsPack::" + VDSIVdsPackMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsPack
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct GetProvider
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct QueryVolumes
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct QueryDisks
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct CreateVolume
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct AddDisk
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 9:
						_Struct MigrateDisks
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 11:
						_Struct RemoveMissingDisk
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 12:
						_Struct Recover
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 10:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("VDS", "Invalid IVdsPack method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("VDS", "Invalid IVdsPack method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsPack method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{07E5C822-F00C-47A1-8FCE-B244DA56FD06}":
			[Property.VDSMethodName = "IVdsDisk::" + VDSIVdsDiskMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsDisk
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct GetPack
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct GetIdentificationData
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct QueryExtents
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct ConvertStyle
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct SetFlags
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 9:
						_Struct ClearFlags
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsDisk method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{9AA58360-CE33-4F92-B658-ED24B14425B8}":
			[Property.VDSMethodName = "IVdsSwProvider::" + VDSIVdsSwProviderMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsSwProvider
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct QueryPacks
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct CreatePack
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsSwProvider method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{40F73C8B-687D-4A13-8D96-3D7F2E683936}":
			[Property.VDSMethodName = "IVdsDisk2::" + VDSIVdsDisk2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsDisk2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct SetSANMode
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsDisk2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{2ABD757F-2851-4997-9A13-47D2A885D6CA}":
			[Property.VDSMethodName = "IVdsHbaPort::" + VDSIVdsHbaPortMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsHbaPort
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct SetAllPathStatuses
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsHbaPort method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{118610B7-8D94-4030-B5B8-500889788E4E}":
			[Property.VDSMethodName = "IEnumVdsObject::" + VDSIEnumVdsObjectMethodNameTable( Property.MSRPCOpnum )]
			_Struct IEnumVdsObject
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct Next
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct Skip
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct Reset
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct Clone
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IEnumVdsObject method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{EE2D5DED-6236-4169-931D-B9778CE03DC6}":
			[Property.VDSMethodName = "IVdsVolumeMF::" + VDSIVdsVolumeMFMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsVolumeMF
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetFileSystemProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct Format
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct AddAccessPath
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct QueryAccessPaths
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct QueryReparsePoints
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct DeleteAccessPath
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 9:
						_Struct Mount
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 10:
						_Struct Dismount
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 11:
						_Struct SetFileSystemFlags
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 12:
						_Struct ClearFileSystemFlags
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsVolumeMF method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{D68168C9-82A2-4F85-B6E9-74707C49A58F}":
			[Property.VDSMethodName = "IVdsVolumeShrink::" + VDSIVdsVolumeShrinkMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsVolumeShrink
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct QueryMaxReclaimableBytes
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct Shrink
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsVolumeShrink method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{9723F420-9355-42DE-AB66-E31BB15BEEAC}":
			[Property.VDSMethodName = "IVdsAdvancedDisk2::" + VDSIVdsAdvancedDisk2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsAdvancedDisk2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct ChangePartitionType
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsAdvancedDisk2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{B481498C-8354-45F9-84A0-0BDD2832A91F}":
			[Property.VDSMethodName = "IVdsVdProvider::" + VDSIVdsVdProviderMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsVdProvider
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 4:
						_Struct CreateDisk
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct OpenDisk
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct GetDiskFromVDisk
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct GetVDiskFromDisk
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 3:
					Case 6:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("VDS", "Invalid IVdsVdProvider method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("VDS", "Invalid IVdsVdProvider method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsVdProvider method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{6E6F6B40-977C-4069-BDDD-AC710059F8C0}":
			[Property.VDSMethodName = "IVdsAdvancedDisk::" + VDSIVdsAdvancedDiskMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsAdvancedDisk
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetPartitionProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct QueryPartitions
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct CreatePartition
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct DeletePartition
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct ChangeAttributes
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct AssignDriveLetter
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 9:
						_Struct DeleteDriveLetter
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 10:
						_Struct GetDriveLetter
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 11:
						_Struct FormatPartition
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 12:
						_Struct Clean
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsAdvancedDisk method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{4AFC3636-DB01-4052-80C3-03BBCB8D3C69}":
			[Property.VDSMethodName = "IVdsServiceInitialization::" + VDSIVdsServiceInitializationMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsServiceInitialization
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct Initialize
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsServiceInitialization method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{88306BB2-E71F-478C-86A2-79DA200A0F11}":
			[Property.VDSMethodName = "IVdsVolume::" + VDSIVdsVolumeMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsVolume
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct GetPack
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct QueryPlexes
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct Extend
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct Shrink
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct AddPlex
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 9:
						_Struct BreakPlex
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 10:
						_Struct RemovePlex
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 11:
						_Struct Delete
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 12:
						_Struct SetFlags
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 13:
						_Struct ClearFlags
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsVolume method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{0818A8EF-9BA9-40D8-A6F9-E22833CC771E}":
			[Property.VDSMethodName = "IVdsService::" + VDSIVdsServiceMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsService
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct IsServiceReady
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct WaitForServiceReady
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct GetProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct QueryProviders
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct QueryUnallocatedDisks
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 9:
						_Struct GetObject
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 10:
						_Struct QueryDriveLetters
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 11:
						_Struct QueryFileSystemTypes
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 12:
						_Struct Reenumerate
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 13:
						_Struct Refresh
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 14:
						_Struct CleanupObsoleteMountPoints
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 15:
						_Struct Advise
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 16:
						_Struct Unadvise
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 17:
						_Struct Reboot
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 18:
						_Struct SetFlags
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 19:
						_Struct ClearFlags
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("VDS", "Invalid IVdsService method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("VDS", "Invalid IVdsService method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsService method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{538684E0-BA3D-4BC0-ACA9-164AFF85C2A9}":
			[Property.VDSMethodName = "IVdsDiskPartitionMF::" + VDSIVdsDiskPartitionMFMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsDiskPartitionMF
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetPartitionFileSystemProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct GetPartitionFileSystemTypeName
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct QueryPartitionFileSystemFormatSupport
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct FormatPartitionEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsDiskPartitionMF method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{6788FAF9-214E-4B85-BA59-266953616E09}":
			[Property.VDSMethodName = "IVdsVolumeMF3::" + VDSIVdsVolumeMF3MethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsVolumeMF3
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct QueryVolumeGuidPathnames
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct FormatEx2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct OfflineVolume
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsVolumeMF3 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{8326CD1D-CF59-4936-B786-5EFC08798E25}":
			[Property.VDSMethodName = "IVdsAdviseSink::" + VDSIVdsAdviseSinkMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsAdviseSink
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct OnNotify
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsAdviseSink method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{D99BDAAE-B13A-4178-9FDB-E27F16B4603E}":
			[Property.VDSMethodName = "IVdsHwProvider::" + VDSIVdsHwProviderMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsHwProvider
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct QuerySubSystems
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
					Case 5:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("VDS", "Invalid IVdsHwProvider method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("VDS", "Invalid IVdsHwProvider method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsHwProvider method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{90681B1D-6A7F-48E8-9061-31B7AA125322}":
			[Property.VDSMethodName = "IVdsDiskOnline::" + VDSIVdsDiskOnlineMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsDiskOnline
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct Online
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct Offline
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsDiskOnline method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{10C5E575-7984-4E81-A56B-431F5F92AE42}":
			[Property.VDSMethodName = "IVdsProvider::" + VDSIVdsProviderMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsProvider
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsProvider method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{B6B22DA8-F903-4BE7-B492-C09D875AC9DA}":
			[Property.VDSMethodName = "IVdsServiceUninstallDisk::" + VDSIVdsServiceUninstallDiskMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsServiceUninstallDisk
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetDiskIdFromLunInfo
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct UninstallDisks
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsServiceUninstallDisk method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{B07FEDD4-1682-4440-9189-A39B55194DC5}":
			[Property.VDSMethodName = "IVdsIscsiInitiatorAdapter::" + VDSIVdsIscsiInitiatorAdapterMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsIscsiInitiatorAdapter
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct QueryInitiatorPortals
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
					Case 6:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("VDS", "Invalid IVdsIscsiInitiatorAdapter method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("VDS", "Invalid IVdsIscsiInitiatorAdapter method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsIscsiInitiatorAdapter method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{4DAA0135-E1D1-40F1-AAA5-3CC1E53221C3}":
			[Property.VDSMethodName = "IVdsVolumePlex::" + VDSIVdsVolumePlexMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsVolumePlex
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct GetVolume
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct QueryExtents
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct Repair
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsVolumePlex method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{38A0A9AB-7CC8-4693-AC07-1F28BD03C3DA}":
			[Property.VDSMethodName = "IVdsIscsiInitiatorPortal::" + VDSIVdsIscsiInitiatorPortalMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsIscsiInitiatorPortal
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct GetInitiatorAdapter
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
					Case 6:
					Case 7:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("VDS", "Invalid IVdsIscsiInitiatorPortal method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("VDS", "Invalid IVdsIscsiInitiatorPortal method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsIscsiInitiatorPortal method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{D5D23B6D-5A55-4492-9889-397A3C2D2DBC}":
			[Property.VDSMethodName = "IVdsAsync::" + VDSIVdsAsyncMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsAsync
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct Cancel
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct Wait
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct QueryStatus
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsAsync method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{1BE2275A-B315-4F70-9E44-879B3A2A53F2}":
			[Property.VDSMethodName = "IVdsVolumeOnline::" + VDSIVdsVolumeOnlineMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsVolumeOnline
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct Online
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsVolumeOnline method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{FC5D23E8-A88B-41A5-8DE0-2D2F73C5A630}":
			[Property.VDSMethodName = "IVdsServiceSAN::" + VDSIVdsServiceSANMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsServiceSAN
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetSANPolicy
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct SetSANPolicy
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsServiceSAN method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{83BFB87F-43FB-4903-BAA6-127F01029EEC}":
			[Property.VDSMethodName = "IVdsSubSystemImportTarget::" + VDSIVdsSubSystemImportTargetMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsSubSystemImportTarget
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetImportTarget
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct SetImportTarget
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsSubSystemImportTarget method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{0316560B-5DB4-4ED9-BBB5-213436DDC0D9}":
			[Property.VDSMethodName = "IVdsRemovable::" + VDSIVdsRemovableMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsRemovable
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct QueryMedia
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct Eject
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsRemovable method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{4DBCEE9A-6343-4651-B85F-5E75D74D983C}":
			[Property.VDSMethodName = "IVdsVolumeMF2::" + VDSIVdsVolumeMF2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsVolumeMF2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetFileSystemTypeName
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct QueryFileSystemFormatSupport
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct FormatEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsVolumeMF2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{1E062B84-E5E6-4B4B-8A25-67B81E8F13E8}":
			[Property.VDSMethodName = "IVdsVDisk::" + VDSIVdsVDiskMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsVDisk
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct Surface
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct Unsurface
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct UnsurfaceAndDelete
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct Compact
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct Merge
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct Expand
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 9:
						_Struct GetProperties
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 10:
						_Struct GetHostVolume
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 11:
						_Struct GetDeviceName
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsVDisk method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{9CBE50CA-F2D2-4BF4-ACE1-96896B729625}":
			[Property.VDSMethodName = "IVdsDiskPartitionMF2::" + VDSIVdsDiskPartitionMF2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsDiskPartitionMF2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct FormatPartitionEx2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsDiskPartitionMF2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{0AC13689-3134-47C6-A17C-4669216801BE}":
			[Property.VDSMethodName = "IVdsServiceHba::" + VDSIVdsServiceHbaMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsServiceHba
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct QueryHbaPorts
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsServiceHba method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{9882F547-CFC3-420B-9750-00DFBEC50662}":
			[Property.VDSMethodName = "IVdsCreatePartitionEx::" + VDSIVdsCreatePartitionExMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsCreatePartitionEx
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct CreatePartitionEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsCreatePartitionEx method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{14FBE036-3ED7-4E10-90E9-A5FF991AFF01}":
			[Property.VDSMethodName = "IVdsServiceIscsi::" + VDSIVdsServiceIscsiMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsServiceIscsi
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetInitiatorName
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct QueryInitiatorAdapters
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct SetInitiatorSharedSecret
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
					Case 6:
					Case 7:
					Case 9:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("VDS", "Invalid IVdsServiceIscsi method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("VDS", "Invalid IVdsServiceIscsi method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsServiceIscsi method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{8F4B2F5D-EC15-4357-992F-473EF10975B9}":
			[Property.VDSMethodName = "IVdsDisk3::" + VDSIVdsDisk3MethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsDisk3
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetProperties2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("VDS", "Invalid IVdsDisk3 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[VDSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("VDS", "Invalid IVdsDisk3 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsDisk3 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{13B50BFF-290A-47DD-8558-B7C58DB1A71A}":
			[Property.VDSMethodName = "IVdsPack2::" + VDSIVdsPack2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsPack2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct CreateVolume2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsPack2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{72AE6713-DCBB-4A03-B36B-371F6AC6B53D}":
			[Property.VDSMethodName = "IVdsVolume2::" + VDSIVdsVolume2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsVolume2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetProperties2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsVolume2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{E0393303-90D4-4A97-AB71-E9B671EE2729}":
			[Property.VDSMethodName = "IVdsServiceLoader::" + VDSIVdsServiceLoaderMethodNameTable( Property.MSRPCOpnum )]
			_Struct IVdsServiceLoader
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct LoadService
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("VDS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "VDS", "Unknown IVdsServiceLoader method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
	}
}

Table VDSIVdsPackMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetProperties";
		Case 4: "GetProvider";
		Case 5: "QueryVolumes";
		Case 6: "QueryDisks";
		Case 7: "CreateVolume";
		Case 8: "AddDisk";
		Case 9: "MigrateDisks";
		Case 10: "Opnum10NotUsedOnWire";
		Case 11: "RemoveMissingDisk";
		Case 12: "Recover";
		Default: "unknown";
	}
}

Table VDSIVdsDiskMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetProperties";
		Case 4: "GetPack";
		Case 5: "GetIdentificationData";
		Case 6: "QueryExtents";
		Case 7: "ConvertStyle";
		Case 8: "SetFlags";
		Case 9: "ClearFlags";
		Default: "unknown";
	}
}

Table VDSIVdsSwProviderMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "QueryPacks";
		Case 4: "CreatePack";
		Default: "unknown";
	}
}

Table VDSIVdsDisk2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "SetSANMode";
		Default: "unknown";
	}
}

Table VDSIVdsHbaPortMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetProperties";
		Case 4: "SetAllPathStatuses";
		Default: "unknown";
	}
}

Table VDSIEnumVdsObjectMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "Next";
		Case 4: "Skip";
		Case 5: "Reset";
		Case 6: "Clone";
		Default: "unknown";
	}
}

Table VDSIVdsVolumeMFMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetFileSystemProperties";
		Case 4: "Format";
		Case 5: "AddAccessPath";
		Case 6: "QueryAccessPaths";
		Case 7: "QueryReparsePoints";
		Case 8: "DeleteAccessPath";
		Case 9: "Mount";
		Case 10: "Dismount";
		Case 11: "SetFileSystemFlags";
		Case 12: "ClearFileSystemFlags";
		Default: "unknown";
	}
}

Table VDSIVdsVolumeShrinkMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "QueryMaxReclaimableBytes";
		Case 4: "Shrink";
		Default: "unknown";
	}
}

Table VDSIVdsAdvancedDisk2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "ChangePartitionType";
		Default: "unknown";
	}
}

Table VDSIVdsVdProviderMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "IVdsVdProvider_Opnum3DummyMethod";
		Case 4: "CreateDisk";
		Case 5: "OpenDisk";
		Case 6: "IVdsVdProvider_Opnum6DummyMethod";
		Case 7: "GetDiskFromVDisk";
		Case 8: "GetVDiskFromDisk";
		Default: "unknown";
	}
}

Table VDSIVdsAdvancedDiskMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetPartitionProperties";
		Case 4: "QueryPartitions";
		Case 5: "CreatePartition";
		Case 6: "DeletePartition";
		Case 7: "ChangeAttributes";
		Case 8: "AssignDriveLetter";
		Case 9: "DeleteDriveLetter";
		Case 10: "GetDriveLetter";
		Case 11: "FormatPartition";
		Case 12: "Clean";
		Default: "unknown";
	}
}

Table VDSIVdsServiceInitializationMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "Initialize";
		Default: "unknown";
	}
}

Table VDSIVdsVolumeMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetProperties";
		Case 4: "GetPack";
		Case 5: "QueryPlexes";
		Case 6: "Extend";
		Case 7: "Shrink";
		Case 8: "AddPlex";
		Case 9: "BreakPlex";
		Case 10: "RemovePlex";
		Case 11: "Delete";
		Case 12: "SetFlags";
		Case 13: "ClearFlags";
		Default: "unknown";
	}
}

Table VDSIVdsServiceMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "IsServiceReady";
		Case 4: "WaitForServiceReady";
		Case 5: "GetProperties";
		Case 6: "QueryProviders";
		Case 7: "Opnum07NotUsedOnWire";
		Case 8: "QueryUnallocatedDisks";
		Case 9: "GetObject";
		Case 10: "QueryDriveLetters";
		Case 11: "QueryFileSystemTypes";
		Case 12: "Reenumerate";
		Case 13: "Refresh";
		Case 14: "CleanupObsoleteMountPoints";
		Case 15: "Advise";
		Case 16: "Unadvise";
		Case 17: "Reboot";
		Case 18: "SetFlags";
		Case 19: "ClearFlags";
		Default: "unknown";
	}
}

Table VDSIVdsDiskPartitionMFMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetPartitionFileSystemProperties";
		Case 4: "GetPartitionFileSystemTypeName";
		Case 5: "QueryPartitionFileSystemFormatSupport";
		Case 6: "FormatPartitionEx";
		Default: "unknown";
	}
}

Table VDSIVdsVolumeMF3MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "QueryVolumeGuidPathnames";
		Case 4: "FormatEx2";
		Case 5: "OfflineVolume";
		Default: "unknown";
	}
}

Table VDSIVdsAdviseSinkMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "OnNotify";
		Default: "unknown";
	}
}

Table VDSIVdsHwProviderMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "QuerySubSystems";
		Case 4: "Opnum04NotUsedOnWire";
		Case 5: "Opnum05NotUsedOnWire";
		Default: "unknown";
	}
}

Table VDSIVdsDiskOnlineMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "Online";
		Case 4: "Offline";
		Default: "unknown";
	}
}

Table VDSIVdsProviderMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetProperties";
		Default: "unknown";
	}
}

Table VDSIVdsServiceUninstallDiskMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetDiskIdFromLunInfo";
		Case 4: "UninstallDisks";
		Default: "unknown";
	}
}

Table VDSIVdsIscsiInitiatorAdapterMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetProperties";
		Case 4: "QueryInitiatorPortals";
		Case 5: "Opnum05NotUsedOnWire";
		Case 6: "Opnum06NotUsedOnWire";
		Default: "unknown";
	}
}

Table VDSIVdsVolumePlexMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetProperties";
		Case 4: "GetVolume";
		Case 5: "QueryExtents";
		Case 6: "Repair";
		Default: "unknown";
	}
}

Table VDSIVdsIscsiInitiatorPortalMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetProperties";
		Case 4: "GetInitiatorAdapter";
		Case 5: "Opnum05NotUsedOnWire";
		Case 6: "Opnum06NotUsedOnWire";
		Case 7: "Opnum07NotUsedOnWire";
		Default: "unknown";
	}
}

Table VDSIVdsAsyncMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "Cancel";
		Case 4: "Wait";
		Case 5: "QueryStatus";
		Default: "unknown";
	}
}

Table VDSIVdsVolumeOnlineMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "Online";
		Default: "unknown";
	}
}

Table VDSIVdsServiceSANMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetSANPolicy";
		Case 4: "SetSANPolicy";
		Default: "unknown";
	}
}

Table VDSIVdsSubSystemImportTargetMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetImportTarget";
		Case 4: "SetImportTarget";
		Default: "unknown";
	}
}

Table VDSIVdsRemovableMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "QueryMedia";
		Case 4: "Eject";
		Default: "unknown";
	}
}

Table VDSIVdsVolumeMF2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetFileSystemTypeName";
		Case 4: "QueryFileSystemFormatSupport";
		Case 5: "FormatEx";
		Default: "unknown";
	}
}

Table VDSIVdsVDiskMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "Surface";
		Case 4: "Unsurface";
		Case 5: "UnsurfaceAndDelete";
		Case 6: "Compact";
		Case 7: "Merge";
		Case 8: "Expand";
		Case 9: "GetProperties";
		Case 10: "GetHostVolume";
		Case 11: "GetDeviceName";
		Default: "unknown";
	}
}

Table VDSIVdsDiskPartitionMF2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "FormatPartitionEx2";
		Default: "unknown";
	}
}

Table VDSIVdsServiceHbaMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "QueryHbaPorts";
		Default: "unknown";
	}
}

Table VDSIVdsCreatePartitionExMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "CreatePartitionEx";
		Default: "unknown";
	}
}

Table VDSIVdsServiceIscsiMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetInitiatorName";
		Case 4: "QueryInitiatorAdapters";
		Case 5: "Opnum05NotUsedOnWire";
		Case 6: "Opnum06NotUsedOnWire";
		Case 7: "Opnum07NotUsedOnWire";
		Case 8: "SetInitiatorSharedSecret";
		Case 9: "Opnum09NotUsedOnWire";
		Default: "unknown";
	}
}

Table VDSIVdsDisk3MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetProperties2";
		Case 4: "IVdsDisk3_Opnum4DummyMethod";
		Default: "unknown";
	}
}

Table VDSIVdsPack2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "CreateVolume2";
		Default: "unknown";
	}
}

Table VDSIVdsVolume2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetProperties2";
		Default: "unknown";
	}
}

Table VDSIVdsServiceLoaderMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "LoadService";
		Default: "unknown";
	}
}

