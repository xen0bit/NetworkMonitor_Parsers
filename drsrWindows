//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Directory Replication Service (DRS) Remote Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-DRSR]: Directory Replication Service (DRS) Remote Protocol Specification (10.0)
//#
//#  Comments:               Parser Framework: PAC v2.1.1577.0
//#
//#  Revision Class and Date:Major, 5/21/2009
//#
//####

Protocol DRSR = FormatString( "%s %s%s%s%s%s", 
	Property.DRSRMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.DRSRSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.DRSRSummary : "" )
{
	[Property.DRSRSummary = ""]
	Switch( Property.MSRPCIfUuid )
	{
		Case "{E3514235-4B06-11D1-AB04-00C04FC2DCD2}":
			[Property.DRSRMethodName = "drsuapi:" + DRSRdrsuapiMethodNameTable( Property.MSRPCOpnum )]
			_Struct drsuapi
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 0:
						_Struct IdlDRSBind
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 1:
						_Struct IdlDRSUnbind
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 2:
						_Struct IdlDRSReplicaSync
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 3:
						_Struct IdlDRSGetNCChanges
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct IdlDRSUpdateRefs
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct IdlDRSReplicaAdd
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct IdlDRSReplicaDel
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct IdlDRSReplicaModify
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct IdlDRSVerifyNames
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
						
					Case 9:
						_Struct IdlDRSGetMemberships
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 10:
						_Struct IdlDRSInterDomainMove
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
						
					Case 11:
						_Struct IdlDRSGetNT4ChangeLog
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 12:
						_Struct IdlDRSCrackNames
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 13:
						_Struct IdlDRSWriteSPN
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 14:
						_Struct IdlDRSRemoveDsServer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 15:
						_Struct IdlDRSRemoveDsDomain
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 16:
						_Struct IdlDRSDomainControllerInfo
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
									
					Case 17:
						_Struct IdlDRSAddEntry
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 18:
						_Struct IdlDRSExecuteKCC
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 19:
						_Struct IdlDRSGetReplInfo
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 20:
						_Struct IdlDRSAddSidHistory
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 21:
						_Struct IdlDRSGetMemberships2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 22:
						_Struct IdlDRSReplicaVerifyObjects
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 23:
						_Struct IdlDRSGetObjectExistence
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 24:
						_Struct IdlDRSQuerySitesByCost
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 25:
						_Struct IdlDRSInitDemotion
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 26:
						_Struct IdlDRSReplicaDemotion
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 27:
						_Struct IdlDRSFinishDemotion
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
						
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("DRSR", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "DRSR", "Unknown drsuapi method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{7C44D7D4-31D5-424C-BD5E-2B3E1F323D22}":
			[Property.DRSRMethodName = "dsaop:" + DRSRdsaopMethodNameTable( Property.MSRPCOpnum )]
			_Struct dsaop
			{
				Switch( Property.MSRPCOpnum )
				{				
					Case 0:
						_Struct IdlDSAPrepareScript
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
						
					Case 1:
						_Struct IdlDSAExecuteScript
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
							
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("DRSR", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "DRSR", "Unknown dsaop method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
	}
}

Table DRSRdrsuapiMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "IDL_DRSBind";
		Case 1: "IDL_DRSUnbind";
		Case 2: "IDL_DRSReplicaSync";
		Case 3: "IDL_DRSGetNCChanges";
		Case 4: "IDL_DRSUpdateRefs";
		Case 5: "IDL_DRSReplicaAdd";
		Case 6: "IDL_DRSReplicaDel";
		Case 7: "IDL_DRSReplicaModify";
		Case 8: "IDL_DRSVerifyNames";
		Case 9: "IDL_DRSGetMemberships";
		Case 10: "IDL_DRSInterDomainMove";
		Case 11: "IDL_DRSGetNT4ChangeLog";		
		Case 12: "IDL_DRSCrackNames";
		Case 13: "IDL_DRSWriteSPN";
		Case 14: "IDL_DRSRemoveDsServer";
		Case 15: "IDL_DRSRemoveDsDomain";
		Case 16: "IDL_DRSDomainControllerInfo";
		Case 17: "IDL_DRSAddEntry";
		Case 18: "IDL_DRSExecuteKCC";
		Case 19: "IDL_DRSGetReplInfo";
		Case 20: "IDL_DRSAddSidHistory";
		Case 21: "IDL_DRSGetMemberships2";
		Case 22: "IDL_DRSReplicaVerifyObjects";
		Case 23: "IDL_DRSGetObjectExistence";
		Case 24: "IDL_DRSQuerySitesByCost";
		Case 25: "IDL_DRSInitDemotion";
		Case 26: "IDL_DRSReplicaDemotion";
		Case 27: "IDL_DRSFinishDemotion";
		Default: "unknown";
	}
}

Table DRSRdsaopMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "IDL_DSAPrepareScript";
		Case 1: "IDL_DSAExecuteScript";
		Default: "unknown";
	}
}


//
//	[MS-DRSR] DRS_EXTENSIONS_INT
//
Struct DRSRDrsExtensionsInt
{
	UINT32 Cb;
	UINT32 Flags
	{
		UINT32 BAS:1 = FormatString(" (%s) %s", this.ToBitString,"Unused. MUST be 1 and ignored" );
		UINT32 AS:1 = FormatString("  (%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_REPADD_V2 and DRS_MSG_GETCHGREQ_V2." : "the DC doesn't support DRS_MSG_REPADD_V2 and DRS_MSG_GETCHGREQ_V2.");
		UINT32 RM:1 = FormatString("  (%s) %s", this.ToBitString, this ? "the DC supports IDL_DRSRemoveDsServer and IDL_DRSRemoveDsDomain." : "the DC doesn't support IDL_DRSRemoveDsServer and IDL_DRSRemoveDsDomain." );
		UINT32 MV:1 = FormatString("  (%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_MOVEREQ_V2." : "the DC doesn't support DRS_MSG_MOVEREQ_V2.");
		UINT32 DF:1 = FormatString("  (%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_GETCHGREPLY_V2." : "the DC doesn't support DRS_MSG_GETCHGREPLY_V2.");
		UINT32 DC:1 = FormatString("  (%s) %s", this.ToBitString, this ? "the DC supports IDL_DRSDomainControllerInfo." : "the DC doesn't support IDL_DRSDomainControllerInfo.");
		UINT32 UO:1 = FormatString("  (%s) %s", this.ToBitString,"Unused. MUST be 1 and ignored" );
		UINT32 AE:1 = FormatString("  (%s) %s", this.ToBitString, this ? "the DC supports IDL_DRSAddEntry." : "the DC doesn't support IDL_DRSAddEntry.");
		UINT32 KE:1 = FormatString("  (%s) %s", this.ToBitString,this ? "the DC supports IDL_DRSExecuteKCC." : "the DC doesn't support IDL_DRSExecuteKCC.");
		UINT32 AE2:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_ADDENTRYREQ_V2." :"the DC doesn't support DRS_MSG_ADDENTRYREQ_V2.");
		UINT32 LVR:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports link value replication" : "the DC doesn't support link value replication" );
		UINT32 DC2:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_DCINFOREPLY_V2." : "the DC doesn't support DRS_MSG_DCINFOREPLY_V2.");
		UINT32 INR:1 = FormatString(" (%s) %s", this.ToBitString, "Unused. MUST be 1 and ignored" );
		UINT32 CB:1 = FormatString("  (%s) %s", this.ToBitString, this ? "the security provider used for the connection supports session keys through RPC" : "the security doesn't provider used for the connection supports session keys through RPC");
		UINT32 GRI:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports IDL_DRSGetReplInfo." : "the DC doesn't support IDL_DRSGetReplInfo.");
		UINT32 SE:1 = FormatString("  (%s) %s", this.ToBitString, this ? "the DC supports additional 128-bit encryption for passwords over the wire." : "the DC doesn't support additional 128-bit encryption for passwords over the wire.");
		UINT32 DCF:1 = FormatString(" (%s) %s", this.ToBitString,this ? "the DC supports DRS_MSG_DCINFOREPLY_VFFFFFFFF." : "the DC doesn't support DRS_MSG_DCINFOREPLY_VFFFFFFFF..");
		UINT32 TM:1 = FormatString("  (%s) %s", this.ToBitString, this ? "the DC supports IDL_DRSGetMemberships." : "the DC doesn't support IDL_DRSGetMemberships.");
		UINT32 SH:1 = FormatString("  (%s) %s", this.ToBitString, this ? "the DC supports IDL_DRSAddSidHistory." : "the DC doesn't support IDL_DRSAddSidHistory." );
		UINT32 PB3:1 = FormatString(" (%s) %s", this.ToBitString, "Unused. MUST be 1 and ignored" );
		UINT32 GC5:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_GETCHGREQ_V5." : "the DC doesn't support DRS_MSG_GETCHGREQ_V5.");
		UINT32 GM2:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports IDL_DRSGetMemberships2." : "the DC doesn't support IDL_DRSGetMemberships2.");
		UINT32 GC6:1 = FormatString(" (%s) %s", this.ToBitString, "Unused. ");
		UINT32 ANC:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports application NCs." : "the DC doesn't support application NCs.");
		UINT32 GC8:1 = FormatString(" (%s) %s", this.ToBitString,this ? "the DC supports DRS_MSG_GETCHGREQ_V8." : "the DC doesn't support DRS_MSG_GETCHGREQ_V8.");
		UINT32 GR5:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_GETCHGREPLY_V5." : "the DC doesn't support DRS_MSG_GETCHGREPLY_V5.");
		UINT32 GR6:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_GETCHGREPLY_V6." : "the DC doesn't support DRS_MSG_GETCHGREPLY_V6." );
		UINT32 WB3:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_ADDENTRYREPLY_V3, DRS_MSG_REPVERIFYOBJ, and DRS_MSG_GETCHGREPLY_V7." : "the DC doesn't support DRS_MSG_ADDENTRYREPLY_V3, DRS_MSG_REPVERIFYOBJ, and DRS_MSG_GETCHGREPLY_V7.");
		UINT32 DF2:1 = FormatString(" (%s) %s", this.ToBitString, this ? "the DC supports the W2K3 AD deflation library." : "the DC doesn't support the W2K3 AD deflation library.");
		UINT32 GC10:1 = FormatString("(%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_GETCHGREQ_V10" : "the DC doesn't supports DRS_MSG_GETCHGREQ_V10" );
		UINT32 R2:1 = FormatString("  (%s) %s", this.ToBitString, "Unused. MUST be 0 and ignored" );
		UINT32 R3:1 = FormatString("  (%s) %s", this.ToBitString, "Unused. MUST be 0 and ignored" );
	};
	GUID(True) SiteObjGuid;
	INT32 Pid;
	UINT32 ReplEpoch;
	UINT32 FlagsExt
	{
		UINT32 DA:1 = FormatString("      (%s) %s", this.ToBitString, this ? "the DC supports DRS_MSG_REPSYNC_V2, DRS_MSG_UPDREFS_V2, DRS_MSG_INIT_DEMOTIONREQ_V1, DRS_MSG_REPLICA_DEMOTIONREQ_V1, and DRS_MSG_FINISH_DEMOTIONREQ_V1." : "the DC doesn't support DRS_MSG_REPSYNC_V2, DRS_MSG_UPDREFS_V2, DRS_MSG_INIT_DEMOTIONREQ_V1, DRS_MSG_REPLICA_DEMOTIONREQ_V1 , and DRS_MSG_FINISH_DEMOTIONREQ_V1.");
		UINT32 LH:1 = FormatString("      (%s) %s", this.ToBitString, this ? "the DC supports the DRS_SPECIAL_SECRET_PROCESSING and DRS_GET_ALL_GROUP_MEMBERSHIP flags as well as InfoLevel 3 in DRS_MSG_DCINFOREQ_V1." : "the DC doesn't support the DRS_SPECIAL_SECRET_PROCESSING and DRS_GET_ALL_GROUP_MEMBERSHIP flags as well as InfoLevel 3 in DRS_MSG_DCINFOREQ_V1." );
		UINT32 Reserved:30 = FormatString("(%s)", this.ToBitString );
	};
	GUID(True) ConfigObjGUID;
} 