//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-NCSI
//#
//#  Details:                
//#
//#  Public References:      Microsoft-Windows-NCSI.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsNCSI, "{314DE49F-CE63-4779-BA2B-D616F6963A88}")]
Protocol NCSI_MicrosoftWindowsNCSI = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 2001: [property.ETLSummary = this.ToString] NCSI_CorporateCheckDisabled CorporateCheckDisabled;
		case 2002: [property.ETLSummary = this.ToString] NCSI_CorporateCheckEnabled CorporateCheckEnabled;
		case 2003: [property.ETLSummary = this.ToString] NCSI_CorporateLocationCheckDisabled CorporateLocationCheckDisabled;
		case 2004: [property.ETLSummary = this.ToString] NCSI_CorporateLocationCheckEnabled CorporateLocationCheckEnabled;
		case 4001: [property.ETLSummary = this.ToString] NCSI_StartWaitForNetReady StartWaitForNetReady;
		case 4002: [property.ETLSummary = this.ToString] NCSI_StopWaitForNetReady StopWaitForNetReady;
		case 4003: [property.ETLSummary = this.ToString] NCSI_StartWaitForLocal StartWaitForLocal;
		case 4004: [property.ETLSummary = this.ToString] NCSI_StopWaitForLocal StopWaitForLocal;
		case 4005: [property.ETLSummary = this.ToString] NCSI_StartWaitForInternet StartWaitForInternet;
		case 4006: [property.ETLSummary = this.ToString] NCSI_StopWaitForInternet StopWaitForInternet;
		case 4007: [property.ETLSummary = this.ToString] NCSI_StartWaitForCorporate StartWaitForCorporate;
		case 4008: [property.ETLSummary = this.ToString] NCSI_StopWaitForCorporate StopWaitForCorporate;
		case 4009: [property.ETLSummary = this.ToString] NCSI_StartCorporateLocationCheck StartCorporateLocationCheck;
		case 4010: [property.ETLSummary = this.ToString] NCSI_StopCorporateLocationCheck StopCorporateLocationCheck;
		case 4011: [property.ETLSummary = this.ToString] NCSI_WFGroupPolicySuccessEventReceived WFGroupPolicySuccessEventReceived;
		case 4012: [property.ETLSummary = this.ToString] NCSI_InsideOutsideProbeFailed InsideOutsideProbeFailed;
		case 4013: [property.ETLSummary = this.ToString] NCSI_StartActiveInternetProbe StartActiveInternetProbe;
		case 4014: [property.ETLSummary = this.ToString] NCSI_StopActiveInternetProbe StopActiveInternetProbe;
		case 4015: [property.ETLSummary = this.ToString] NCSI_StartActiveInternetDNSProbe StartActiveInternetDNSProbe;
		case 4016: [property.ETLSummary = this.ToString] NCSI_StopActiveInternetDNSProbe StopActiveInternetDNSProbe;
		case 4017: [property.ETLSummary = this.ToString] NCSI_StartActiveInternetHttpProbe StartActiveInternetHttpProbe;
		case 4018: [property.ETLSummary = this.ToString] NCSI_StopActiveInternetHttpProbe StopActiveInternetHttpProbe;
		case 4019: [property.ETLSummary = this.ToString] NCSI_StartActiveCorpProbe StartActiveCorpProbe;
		case 4020: [property.ETLSummary = this.ToString] NCSI_StopActiveCorpProbe StopActiveCorpProbe;
		case 4021: [property.ETLSummary = this.ToString] NCSI_StartActiveCorpDNSProbe StartActiveCorpDNSProbe;
		case 4022: [property.ETLSummary = this.ToString] NCSI_StopActiveCorpDNSProbe StopActiveCorpDNSProbe;
		case 4023: [property.ETLSummary = this.ToString] NCSI_StartActiveCorpHttpProbe StartActiveCorpHttpProbe;
		case 4024: [property.ETLSummary = this.ToString] NCSI_StopActiveCorpHttpProbe StopActiveCorpHttpProbe;
		case 4025: [property.ETLSummary = this.ToString] NCSI_StartProxyDetection StartProxyDetection;
		case 4026: [property.ETLSummary = this.ToString] NCSI_StopProxyDetection StopProxyDetection;
		case 4027: [property.ETLSummary = this.ToString] NCSI_InterfaceMarkedOppInternet InterfaceMarkedOppInternet;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table NCSI_CorpCheckDisabledReasonMap(value)
{
	switch(value)
	{
		case 1: "Corporate configuration is not available";
		case 2: "Corporate configuration is not valid";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NCSI_CorpLocationMap(value)
{
	switch(value)
	{
		case 0: "Corporate Location is Outside";
		case 1: "Corporate Location is Inside";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NCSI_StateMap(value)
{
	switch(value)
	{
		case 0: "Interface Disconnected";
		case 1: "Interface Arrival";
		case 2: "Interface NetReady";
		case 3: "Local Connectivity";
		case 4: "Internet Connectivity";
		case 5: "No Corporate Connectivity";
		case 6: "Corporate Connectivity";
		case 7: "Corporate Location Identifying";
		case 8: "Corporate Location Identified";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NCSI_ProxyInfoSourceMap(value)
{
	switch(value)
	{
		case 0: "Unknown";
		case 1: "Default Config";
		case 2: "WPAD";
		case 3: "Manual";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct NCSI_CorporateCheckDisabled = FormatString("Corporate connectivity check will be skipped. Reason: %s", CorpCheckDisabledReason.ToString)
{
	UINT8 CorpCheckDisabledReason = NCSI_CorpCheckDisabledReasonMap(this);
}
Struct NCSI_CorporateCheckEnabled = "Corporate connectivity check is enabled" {}; // Empty Struct
Struct NCSI_CorporateLocationCheckDisabled = FormatString("Corporate inside/outside location check will be skipped. Reason: %s", CorpCheckDisabledReason.ToString)
{
	UINT8 CorpCheckDisabledReason = NCSI_CorpCheckDisabledReasonMap(this);
}
Struct NCSI_CorporateLocationCheckEnabled = "Corporate inside/outside location check is enabled" {}; // Empty Struct
Struct NCSI_StartWaitForNetReady = FormatString("Entered State: %s Interface Luid: %s", CurrentOrNextState.ToString, IfLuid.ToString)
{
	GUID(true) InterfaceGuid;
	UINT8 CurrentOrNextState = NCSI_StateMap(this);
	UINT64 IfLuid;
}
Struct NCSI_StopWaitForNetReady = FormatString("Transitioning to State: %s Interface Luid: %s", CurrentOrNextState.ToString, IfLuid.ToString)
{
	GUID(true) InterfaceGuid;
	UINT8 CurrentOrNextState = NCSI_StateMap(this);
	UINT64 IfLuid;
}
Struct NCSI_StartWaitForLocal = FormatString("Entered State: %s Interface Luid: %s", CurrentOrNextState.ToString, IfLuid.ToString)
{
	GUID(true) InterfaceGuid;
	UINT8 CurrentOrNextState = NCSI_StateMap(this);
	UINT64 IfLuid;
}
Struct NCSI_StopWaitForLocal = FormatString("Transitioning to State: %s Interface Luid: %s", CurrentOrNextState.ToString, IfLuid.ToString)
{
	GUID(true) InterfaceGuid;
	UINT8 CurrentOrNextState = NCSI_StateMap(this);
	UINT64 IfLuid;
}
Struct NCSI_StartWaitForInternet = FormatString("Entered State: %s Interface Luid: %s", CurrentOrNextState.ToString, IfLuid.ToString)
{
	GUID(true) InterfaceGuid;
	UINT8 CurrentOrNextState = NCSI_StateMap(this);
	UINT64 IfLuid;
}
Struct NCSI_StopWaitForInternet = FormatString("Transitioning to State: %s Interface Luid: %s", CurrentOrNextState.ToString, IfLuid.ToString)
{
	GUID(true) InterfaceGuid;
	UINT8 CurrentOrNextState = NCSI_StateMap(this);
	UINT64 IfLuid;
}
Struct NCSI_StartWaitForCorporate = FormatString("Entered State: %s Interface Luid: %s", CurrentOrNextState.ToString, IfLuid.ToString)
{
	GUID(true) InterfaceGuid;
	UINT8 CurrentOrNextState = NCSI_StateMap(this);
	UINT64 IfLuid;
}
Struct NCSI_StopWaitForCorporate = FormatString("Transitioning to State: %s Interface Luid: %s", CurrentOrNextState.ToString, IfLuid.ToString)
{
	GUID(true) InterfaceGuid;
	UINT8 CurrentOrNextState = NCSI_StateMap(this);
	UINT64 IfLuid;
}
Struct NCSI_StartCorporateLocationCheck = FormatString("Entered State: %s Interface Luid: %s", CurrentOrNextState.ToString, IfLuid.ToString)
{
	GUID(true) InterfaceGuid;
	UINT8 CurrentOrNextState = NCSI_StateMap(this);
	UINT64 IfLuid;
}
Struct NCSI_StopCorporateLocationCheck = FormatString("Transitioning to State: %s Interface Luid: %s Corporate Location: %s", CurrentOrNextState.ToString, IfLuid.ToString, CorporateLocation.ToString)
{
	GUID(true) InterfaceGuid;
	UINT8 CurrentOrNextState = NCSI_StateMap(this);
	UINT64 IfLuid;
	UINT8 CorporateLocation = NCSI_CorpLocationMap(this);
}
Struct NCSI_WFGroupPolicySuccessEventReceived = "Windows Firewall Group Policy settings have been updated. Triggering another inside/outside location detection" {}; // Empty Struct
Struct NCSI_InsideOutsideProbeFailed = FormatString("Inside/Outside probe failed for interface %s: request=%s, response=%s", InterfaceGuid.ToString, RequestCode.ToString, ResponseCode.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 RequestCode;
	UINT32 ResponseCode;
}
Struct NCSI_StartActiveInternetProbe = FormatString("Active Internet Probe started on interface %s", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
	BOOL ForceWeb;
	BOOL UseProxyCache;
}
Struct NCSI_StopActiveInternetProbe = FormatString("Active Internet Probe finished on interface %s (%s)", InterfaceGuid.ToString, Succeeded.ToString)
{
	GUID(true) InterfaceGuid;
	BOOL Succeeded;
	BOOL UsedDnsProbe;
	BOOL UsedProxy;
	BOOL ContentComparison;
	BOOL WebCompleted;
	BOOL WebRedirected;
	BOOL LocalErrorOccured;
}
Struct NCSI_StartActiveInternetDNSProbe = FormatString("Active Internet Probe (DNS) started on interface %s", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
}
Struct NCSI_StopActiveInternetDNSProbe = FormatString("Active Internet Probe (DNS) finished on interface %s", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
}
Struct NCSI_StartActiveInternetHttpProbe = FormatString("Active Internet Probe (HTTP) started on interface %s", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
}
Struct NCSI_StopActiveInternetHttpProbe = FormatString("Active Internet Probe (HTTP) finished on interface %s", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
}
Struct NCSI_StartActiveCorpProbe = FormatString("Active Corp Probe started on interface %s", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
}
Struct NCSI_StopActiveCorpProbe = FormatString("Active Corp Probe finished on interface %s (%s)", InterfaceGuid.ToString, Succeeded.ToString)
{
	GUID(true) InterfaceGuid;
	BOOL Succeeded;
	BOOL LocalErrorOccured;
}
Struct NCSI_StartActiveCorpDNSProbe = FormatString("Active Corp Probe (DNS) started on interface %s", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
}
Struct NCSI_StopActiveCorpDNSProbe = FormatString("Active Corp Probe (DNS) finished on interface %s", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
}
Struct NCSI_StartActiveCorpHttpProbe = FormatString("Active Corp Probe (HTTP) started on interface %s", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
}
Struct NCSI_StopActiveCorpHttpProbe = FormatString("Active Corp Probe (HTTP) finished on interface %s", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
}
Struct NCSI_StartProxyDetection = "Proxy Detection started" {}; // Empty Struct
Struct NCSI_StopProxyDetection = FormatString("Proxy Detection stopped (HasProxy=%s)", ErrorCode.ToString)
{
	UINT32 ErrorCode;
	UINT8 Source = NCSI_ProxyInfoSourceMap(this);
}
Struct NCSI_InterfaceMarkedOppInternet = FormatString("Opportunistic Internet flag on interface %s for family %s marked", InterfaceGuid.ToString, Family.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 Family;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsNCSI_Keyword, "{314DE49F-CE63-4779-BA2B-D616F6963A88}")]
struct NCSI_MicrosoftWindowsNCSI_Keyword
{
	UINT64 Reserved1:32 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 Reserved2:18 = FormatString("        (%s)", this.ToBitString);
}
