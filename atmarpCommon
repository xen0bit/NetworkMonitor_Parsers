//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Asynchronous Transfer Mode Address Resolution Protocol
//#
//#  Details:                
//#
//#  Public References:      RFC 1577, 1626, 2225
//#
//#  Comments:               
//#
//#  Revision Class and Date:
//#
//####

Protocol ATMARP = FormatString("%s",ATMARPOpCodeTable(Operation))
{
	UINT16 HardwareType = HardwareTypeTable(this);
	UINT16 ProtocolType = ProtocolTable(this);
	UINT8 SrcATMNumLen = FormatString("%d bytes", Length)
	{
		UINT8 Reserved:1 = FormatString("(%s)",this.ToBitString);
		UINT8 Type:1	 = FormatString("    (%s) %s",this.ToBitString,this ? "ITU-TS E.164 Address" : "ATM Forum NSAPA Address");
		UINT8 Length:6 	 = FormatString("  (%s) %d bytes",this.ToBitString,this);
	};
	UINT8 SrcATMSubAddrLen = FormatString("%d bytes", Length)
	{
		UINT8 Reserved:1 = FormatString("(%s)",this.ToBitString);
		UINT8 Type:1	 = FormatString("    (%s) %s",this.ToBitString,this ? "ITU-TS E.164 Address" : "ATM Forum NSAPA Address");
		UINT8 Length:6	 = FormatString("  (%s) %d bytes",this.ToBitString,this);
	};
	UINT16 Operation = FormatString("%s, %d(%#x)",ATMARPOpCodeTable(this),this,this);
	UINT8 SrcProtocolAddrLen;
	UINT8 TgtATMNumLen = FormatString("%d bytes", Length)
	{
		UINT8 Reserved:1 = FormatString("(%s)",this.ToBitString);
		UINT8 Type:1	 = FormatString("    (%s) %s",this.ToBitString,this ? "ITU-TS E.164 Address" : "ATM Forum NSAPA Address");
		UINT8 Length:6	 = FormatString("  (%s) %d bytes",this.ToBitString,this);
	};
	UINT8 TgtATMSubAddrLen = FormatString("%d bytes", Length)
	{
		UINT8 Reserved:1 = FormatString("(%s)",this.ToBitString);
		UINT8 Type:1	 = FormatString("    (%s) %s",this.ToBitString,this ? "ITU-TS E.164 Address" : "ATM Forum NSAPA Address");
		UINT8 Length:6	 = FormatString("  (%s) %d bytes",this.ToBitString,this);
	};
	UINT8 TgtProtocolAddrLen;
	switch
	{
		case SrcATMNumLen.Length == 20: ATMAddress SrcATMNumber;
		case SrcATMNumLen.Length != 20 && SrcATMNumLen.Length > 0: AsciiString(SrcATMNumLen.Length) SrcATMNum;
	}
	switch
	{
		case SrcATMSubAddrLen.Length == 8: ATMSubAddress SrcATMSubAddr;
		case SrcATMSubAddrLen.Length != 8 && SrcATMSubAddrLen.Length > 0: AsciiString(SrcATMSubAddrLen.Length) SrcSubAddr;
	}
	switch
	{
		case SrcProtocolAddrLen == 4:IPv4Address SrcIpv4Addr;
		case SrcProtocolAddrLen == 16:IPv6Address SrcIP6Addr;
		case ( SrcProtocolAddrLen > 0 ) && ( SrcProtocolAddrLen != 4 ) && ( SrcProtocolAddrLen  != 16 ):AsciiString(SrcProtocolAddrLen) SrcProtocolAddr;
	}
	switch
	{
		case TgtATMNumLen.Length == 20: ATMAddress TgtATMNumber;
		case TgtATMNumLen.Length != 20 && TgtATMNumLen.Length > 0: AsciiString(TgtATMNumLen.Length) TgtATMNum;
	}
	switch
	{
		case TgtATMSubAddrLen.Length == 8: ATMSubAddress TgtATMSubAddr;
		case TgtATMSubAddrLen.Length != 8 && TgtATMSubAddrLen.Length > 0: AsciiString(TgtATMSubAddrLen.Length) TgtSubAddr;
	}
	switch
	{
		case TgtProtocolAddrLen == 4:IPv4Address TgtIpv4Addr;
		case TgtProtocolAddrLen == 16:IPv6Address TgtIP6Addr;
		case ( TgtProtocolAddrLen > 0 ) && ( TgtProtocolAddrLen != 4 ) && ( TgtProtocolAddrLen  != 16 ):AsciiString(TgtProtocolAddrLen) TgtProtocolAddr;
	}
}
UnsignedNumber ATMAddress
{
	size = 20,
	DisplayFormat = FormatString("%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X",
								 this[19],this[18],this[17],this[16],this[15],
								 this[14],this[13],this[12],this[11],this[10],
								 this[9],this[8],this[7],this[6],this[5],
								 this[4],this[3],this[2],this[1],this[0])
}

UnsignedNumber ATMSubAddress
{
	size = 8,
	DisplayFormat = FormatString("%02X %02X %02X %02X %02X %02X %02X %02X",
								  this[7],this[6],this[5],this[4],this[3],this[2],this[1],this[0])
}

Table ATMARPOpCodeTable(value)
{
	switch(value)
	{
		case 1:     "Request";
		case 2:     "Reply";
		case 8:     "Inverse ARP Request";
		case 9:     "Inverse ARP Reply";
		case 10:    "ARP NAK";
		default:    FormatString("ARMARP Opt %#x",value);
	}
}


