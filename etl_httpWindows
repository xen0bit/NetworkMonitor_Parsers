//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-HTTP
//#
//#  Details:                
//#
//#  Public References:      HTTP.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 1/28/2010
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsHttpService, "{dd5ef90a-6398-47a4-ad34-4dcecdef795f}")]
Protocol MicrosoftWindowsHttpService = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] HTTP_EVENT_RECEIVE_REQUEST HTTP_EVENT_RECEIVE_REQUEST;
		case 2: [property.ETLSummary = this.ToString] HTTP_EVENT_PARSE_REQUEST_LEGACY HTTP_EVENT_PARSE_REQUEST_LEGACY;
		case 3: [property.ETLSummary = this.ToString] HTTP_EVENT_DELIVER_REQUEST_TO_USERMODE HTTP_EVENT_DELIVER_REQUEST_TO_USERMODE;
		case 4: [property.ETLSummary = this.ToString] HTTP_EVENT_RECEIVE_RESPONSE_FROM_USERMODE HTTP_EVENT_RECEIVE_RESPONSE_FROM_USERMODE;
		case 5: [property.ETLSummary = this.ToString] HTTP_EVENT_RECEIVE_RESPONSE_FROM_USERMODE_LEGACY HTTP_EVENT_RECEIVE_RESPONSE_FROM_USERMODE_LEGACY;
		case 6: [property.ETLSummary = this.ToString] HTTP_EVENT_RECEIVE_BODY_FROM_USERMODE HTTP_EVENT_RECEIVE_BODY_FROM_USERMODE;
		case 7: [property.ETLSummary = this.ToString] HTTP_EVENT_RECEIVE_BODY_FROM_USERMODE_LEGACY HTTP_EVENT_RECEIVE_BODY_FROM_USERMODE_LEGACY;
		case 8: [property.ETLSummary = this.ToString] HTTP_EVENT_RECEIVE_FAST_RESPONSE_FROM_USERMODE HTTP_EVENT_RECEIVE_FAST_RESPONSE_FROM_USERMODE;
		case 9: [property.ETLSummary = this.ToString] HTTP_EVENT_RECEIVE_FAST_RESPONSE_FROM_USERMODE_LEGACY HTTP_EVENT_RECEIVE_FAST_RESPONSE_FROM_USERMODE_LEGACY;
		case 10: [property.ETLSummary = this.ToString] HTTP_EVENT_COMPLETE_SEND_LEGACY HTTP_EVENT_COMPLETE_SEND_LEGACY;
		case 11: [property.ETLSummary = this.ToString] HTTP_EVENT_CACHED_AND_SEND_LEGACY HTTP_EVENT_CACHED_AND_SEND_LEGACY;
		case 12: [property.ETLSummary = this.ToString] HTTP_EVENT_FAST_SEND_LEGACY HTTP_EVENT_FAST_SEND_LEGACY;
		case 13: [property.ETLSummary = this.ToString] HTTP_EVENT_COMPLETE_ZERO_SEND_LEGACY HTTP_EVENT_COMPLETE_ZERO_SEND_LEGACY;
		case 14: [property.ETLSummary = this.ToString] HTTP_EVENT_COMPLETE_SEND_ERROR_LEGACY HTTP_EVENT_COMPLETE_SEND_ERROR_LEGACY;
		case 15: [property.ETLSummary = this.ToString] HTTP_EVENT_SEND_ERROR HTTP_EVENT_SEND_ERROR;
		case 16:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]HTTP_EVENT_SERVED_FROM_CACHE_LEGACY HTTP_EVENT_SERVED_FROM_CACHE_LEGACY;
				case 1: [property.ETLSummary = this.ToString]HTTP_EVENT_SERVED_FROM_CACHE_LEGACY_V1 HTTP_EVENT_SERVED_FROM_CACHE_LEGACY_V1;
			}
		case 17:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]HTTP_EVENT_CACHE_NOT_MODIFIED_LEGACY_V0 HTTP_EVENT_CACHE_NOT_MODIFIED_LEGACY_V0;
				case 1: [property.ETLSummary = this.ToString]HTTP_EVENT_CACHE_NOT_MODIFIED_LEGACY HTTP_EVENT_CACHE_NOT_MODIFIED_LEGACY;
			}
		case 18: [property.ETLSummary = this.ToString] HTTP_EVENT_URL_RESERVATION HTTP_EVENT_URL_RESERVATION;
		case 19: [property.ETLSummary = this.ToString] HTTP_EVENT_IP_LISTEN_LIST_ENTRY_READ HTTP_EVENT_IP_LISTEN_LIST_ENTRY_READ;
		case 20: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_CREDENTIAL_CREATED HTTP_EVENT_SSL_CREDENTIAL_CREATED;
		case 21: [property.ETLSummary = this.ToString] HTTP_EVENT_CONNECTION_CONNECT HTTP_EVENT_CONNECTION_CONNECT;
		case 22: [property.ETLSummary = this.ToString] HTTP_EVENT_CONNECTION_ID HTTP_EVENT_CONNECTION_ID;
		case 23: [property.ETLSummary = this.ToString] HTTP_EVENT_CONNECTION_CLOSE HTTP_EVENT_CONNECTION_CLOSE;
		case 24: [property.ETLSummary = this.ToString] HTTP_EVENT_CONNECTION_CLEANUP HTTP_EVENT_CONNECTION_CLEANUP;
		case 25:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]HTTP_EVENT_CACHE_ENTRY_ADDED_V0 HTTP_EVENT_CACHE_ENTRY_ADDED_V0;
				case 1: [property.ETLSummary = this.ToString]HTTP_EVENT_CACHE_ENTRY_ADDED HTTP_EVENT_CACHE_ENTRY_ADDED;
			}
		case 26:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]HTTP_EVENT_CACHE_ENTRY_ADD_FAILED_V0 HTTP_EVENT_CACHE_ENTRY_ADD_FAILED_V0;
				case 1: [property.ETLSummary = this.ToString]HTTP_EVENT_CACHE_ENTRY_ADD_FAILED HTTP_EVENT_CACHE_ENTRY_ADD_FAILED;
			}
		case 27: [property.ETLSummary = this.ToString] HTTP_EVENT_CACHE_ENTRY_FLUSHED HTTP_EVENT_CACHE_ENTRY_FLUSHED;
		case 28: [property.ETLSummary = this.ToString] HTTP_EVENT_SET_URL_GROUP_PROPERTY HTTP_EVENT_SET_URL_GROUP_PROPERTY;
		case 29: [property.ETLSummary = this.ToString] HTTP_EVENT_SET_SERVER_SESSION_PROPERTY HTTP_EVENT_SET_SERVER_SESSION_PROPERTY;
		case 30: [property.ETLSummary = this.ToString] HTTP_EVENT_SET_REQUEST_QUEUE_PROPERTY HTTP_EVENT_SET_REQUEST_QUEUE_PROPERTY;
		case 31: [property.ETLSummary = this.ToString] HTTP_EVENT_ADD_URL HTTP_EVENT_ADD_URL;
		case 32: [property.ETLSummary = this.ToString] HTTP_EVENT_REMOVE_URL HTTP_EVENT_REMOVE_URL;
		case 33: [property.ETLSummary = this.ToString] HTTP_EVENT_REMOVE_ALL_URLS HTTP_EVENT_REMOVE_ALL_URLS;
		case 34: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_CONNECT HTTP_EVENT_SSL_CONNECT;
		case 35: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_HANDSHAKE_INITIATE HTTP_EVENT_SSL_HANDSHAKE_INITIATE;
		case 36: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_HANDSHAKE_COMPLETE HTTP_EVENT_SSL_HANDSHAKE_COMPLETE;
		case 37: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_RECEIVE_CLIENT_CERT_INITIATE HTTP_EVENT_SSL_RECEIVE_CLIENT_CERT_INITIATE;
		case 38: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_RECEIVE_CLIENT_CERT_COMPLETE HTTP_EVENT_SSL_RECEIVE_CLIENT_CERT_COMPLETE;
		case 39: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_RECEIVE_RAW_DATA HTTP_EVENT_SSL_RECEIVE_RAW_DATA;
		case 40: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_DELIVER_STREAM_DATA HTTP_EVENT_SSL_DELIVER_STREAM_DATA;
		case 41: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_ACCEPT_STREAM_DATA HTTP_EVENT_SSL_ACCEPT_STREAM_DATA;
		case 43:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]HTTP_EVENT_AUTH_SSPI_COMPLETION_V0 HTTP_EVENT_AUTH_SSPI_COMPLETION_V0;
				case 1: [property.ETLSummary = this.ToString]HTTP_EVENT_AUTH_SSPI_COMPLETION HTTP_EVENT_AUTH_SSPI_COMPLETION;
			}
		case 44: [property.ETLSummary = this.ToString] HTTP_EVENT_AUTH_CACHE_ENTRY_ADDED HTTP_EVENT_AUTH_CACHE_ENTRY_ADDED;
		case 45: [property.ETLSummary = this.ToString] HTTP_EVENT_AUTH_CACHE_ENTRY_FREED HTTP_EVENT_AUTH_CACHE_ENTRY_FREED;
		case 46: [property.ETLSummary = this.ToString] HTTP_EVENT_QOS_FLOW_SET HTTP_EVENT_QOS_FLOW_SET;
		case 47: [property.ETLSummary = this.ToString] HTTP_EVENT_LOGGING_CONFIG_FAILURE HTTP_EVENT_LOGGING_CONFIG_FAILURE;
		case 48: [property.ETLSummary = this.ToString] HTTP_EVENT_LOGGING_CONFIG HTTP_EVENT_LOGGING_CONFIG;
		case 49: [property.ETLSummary = this.ToString] HTTP_EVENT_LOGGING_CREATE_FAILURE HTTP_EVENT_LOGGING_CREATE_FAILURE;
		case 50: [property.ETLSummary = this.ToString] HTTP_EVENT_LOGGING_CREATE HTTP_EVENT_LOGGING_CREATE;
		case 51: [property.ETLSummary = this.ToString] HTTP_EVENT_LOGGING_WRITE HTTP_EVENT_LOGGING_WRITE;
		case 52: [property.ETLSummary = this.ToString] HTTP_EVENT_PARSE_REQUEST_FAILURE HTTP_EVENT_PARSE_REQUEST_FAILURE;
		case 53: [property.ETLSummary = this.ToString] HTTP_EVENT_TIMEOUT HTTP_EVENT_TIMEOUT;
		case 56: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_ACH_FAILURE HTTP_EVENT_SSL_ACH_FAILURE;
		case 57: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_DISCONNECT HTTP_EVENT_SSL_DISCONNECT;
		case 58: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_DISCONNECT_REQUEST HTTP_EVENT_SSL_DISCONNECT_REQUEST;
		case 59: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_UNSEAL_MESSAGE HTTP_EVENT_SSL_UNSEAL_MESSAGE;
		case 60: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_QUERY_CONN_INFO_FAILURE HTTP_EVENT_SSL_QUERY_CONN_INFO_FAILURE;
		case 61: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_ENDPOINT_CONFIG_NOT_FOUND HTTP_EVENT_SSL_ENDPOINT_CONFIG_NOT_FOUND;
		case 62: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_ASC_RESULT HTTP_EVENT_SSL_ASC_RESULT;
		case 63: [property.ETLSummary = this.ToString] HTTP_EVENT_SSL_SEAL_MESSAGE HTTP_EVENT_SSL_SEAL_MESSAGE;
		case 64: [property.ETLSummary = this.ToString] HTTP_EVENT_REQUEST_REJECTED HTTP_EVENT_REQUEST_REJECTED;
		case 65: [property.ETLSummary = this.ToString] HTTP_EVENT_REQUEST_CANCELLED HTTP_EVENT_REQUEST_CANCELLED;
		case 66: [property.ETLSummary = this.ToString] HTTP_EVENT_HOTADD_PROC_FAILURE HTTP_EVENT_HOTADD_PROC_FAILURE;
		case 67: [property.ETLSummary = this.ToString] HTTP_EVENT_HOTADD_PROC_SUCCESS HTTP_EVENT_HOTADD_PROC_SUCCESS;
		case 68: [property.ETLSummary = this.ToString] HTTP_EVENT_INIT_USER_RESPONSE_FLOW HTTP_EVENT_INIT_USER_RESPONSE_FLOW;
		case 69: [property.ETLSummary = this.ToString] HTTP_EVENT_INIT_CACHED_RESPONSE_FLOW HTTP_EVENT_INIT_CACHED_RESPONSE_FLOW;
		case 70: [property.ETLSummary = this.ToString] HTTP_EVENT_INIT_FLOW_FAILED HTTP_EVENT_INIT_FLOW_FAILED;
		case 71: [property.ETLSummary = this.ToString] HTTP_EVENT_SET_CONNECTION_FLOW HTTP_EVENT_SET_CONNECTION_FLOW;
		case 72: [property.ETLSummary = this.ToString] HTTP_EVENT_REQUEST_ON_CONFIG_FLOW HTTP_EVENT_REQUEST_ON_CONFIG_FLOW;
		case 73: [property.ETLSummary = this.ToString] HTTP_EVENT_CONNECTION_FLOW_FAILURE HTTP_EVENT_CONNECTION_FLOW_FAILURE;
		case 74: [property.ETLSummary = this.ToString] HTTP_EVENT_RESPONSE_RANGE_PROCESSING_OK HTTP_EVENT_RESPONSE_RANGE_PROCESSING_OK;
		case 75: [property.ETLSummary = this.ToString] HTTP_EVENT_BEGIN_BUILDING_SLICES HTTP_EVENT_BEGIN_BUILDING_SLICES;
		case 76: [property.ETLSummary = this.ToString] HTTP_EVENT_SEND_SLICE_CACHE_CONTENT HTTP_EVENT_SEND_SLICE_CACHE_CONTENT;
		case 77: [property.ETLSummary = this.ToString] HTTP_EVENT_CACHED_SLICES_MATCH_RANGES HTTP_EVENT_CACHED_SLICES_MATCH_RANGES;
		case 78: [property.ETLSummary = this.ToString] HTTP_EVENT_MERGE_SLICES_TO_CACHE HTTP_EVENT_MERGE_SLICES_TO_CACHE;
		case 79: [property.ETLSummary = this.ToString] HTTP_EVENT_FLAT_CACHE_RANGE_SEND HTTP_EVENT_FLAT_CACHE_RANGE_SEND;
		case 80: [property.ETLSummary = this.ToString] HTTP_EVENT_CHANNEL_BIND_ASC_PARAMETERS HTTP_EVENT_CHANNEL_BIND_ASC_PARAMETERS;
		case 81: [property.ETLSummary = this.ToString] HTTP_EVENT_SERVICE_BIND_CHECK_COMPLETE HTTP_EVENT_SERVICE_BIND_CHECK_COMPLETE;
		case 82: [property.ETLSummary = this.ToString] HTTP_EVENT_CHANNEL_BIND_CONFIG_CAPTURE HTTP_EVENT_CHANNEL_BIND_CONFIG_CAPTURE;
		case 83: [property.ETLSummary = this.ToString] HTTP_EVENT_CHANNEL_BIND_RESPONSE_CONFIG HTTP_EVENT_CHANNEL_BIND_RESPONSE_CONFIG;
		case 84: [property.ETLSummary = this.ToString] HTTP_EVENT_POLICY_FLOW HTTP_EVENT_POLICY_FLOW;
		case 85: [property.ETLSummary = this.ToString] HTTP_EVENT_THREADPOOL_EXTENSION HTTP_EVENT_THREADPOOL_EXTENSION;
		case 86: [property.ETLSummary = this.ToString] HTTP_EVENT_THREAD_READY HTTP_EVENT_THREAD_READY;
		case 87: [property.ETLSummary = this.ToString] HTTP_EVENT_THREADPOOL_TRIM HTTP_EVENT_THREADPOOL_TRIM;
		case 88: [property.ETLSummary = this.ToString] HTTP_EVENT_THREAD_GONE HTTP_EVENT_THREAD_GONE;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table HTTP_TEMPLATE_LOGGING_LogFormat_ValueMap(value)
{
	switch(value)
	{
		case 0: "W3C";
		case 1: "IIS";
		case 2: "NCSA";
		case 3: "Binary";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table HTTP_TEMPLATE_LOGGING_LogGroup_ValueMap(value)
{
	switch(value)
	{
		case 0: "Site";
		case 1: "Centralized";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table HTTP_TEMPLATE_LOGGING_LogType_ValueMap(value)
{
	switch(value)
	{
		case 0: "ResponseLogging";
		case 1: "ErrorLogging";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct HTTP_EVENT_RECEIVE_REQUEST = FormatString("Request received (request ID %s) on connection (connection ID %s) from remote address %s.", RequestId.ToString, ConnectionId.ToString, IsValueNone(RemoteAddr) ? "Null" : RemoteAddr.ToString)
{
	UINT64 RequestId;
	UINT64 ConnectionId;
	UINT32 RemoteAddrLength;
	switch
	{
		case RemoteAddrLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddr;
	}
}
Struct HTTP_EVENT_PARSE_REQUEST_LEGACY = FormatString("Parsed request (request pointer %s, method %s) with URI %s.", RequestObj.ToString, HttpVerb.ToString, Url.ToString)
{
	EtlPtr RequestObj;
	UINT32 HttpVerb;
	UnicodeString Url;
}
Struct HTTP_EVENT_DELIVER_REQUEST_TO_USERMODE = FormatString("Delivered request to server application (request pointer %s, request ID %s, site ID %s) from request queue %s for URI %s with status %s.", RequestObj.ToString, RequestId.ToString, SiteId.ToString, RequestQueueName.ToString, Url.ToString, Status.ToString)
{
	EtlPtr RequestObj;
	UINT64 RequestId;
	UINT32 SiteId;
	UnicodeString RequestQueueName;
	UnicodeString Url;
	UINT32 Status;
}
Struct HTTP_EVENT_RECEIVE_RESPONSE_FROM_USERMODE = FormatString("Server application passed response (request ID %s, connection ID %s, method %s, header length %s, number of entity chunks %s, cache policy %s) with status code %s.", RequestId.ToString, ConnectionId.ToString, Verb.ToString, HeaderLength.ToString, EntityChunkCount.ToString, CachePolicy.ToString, StatusCode.ToString)
{
	UINT64 RequestId;
	UINT64 ConnectionId;
	UINT16 StatusCode;
	AsciiString Verb;
	UINT32 HeaderLength;
	UINT16 EntityChunkCount;
	UINT32 CachePolicy;
}
Struct HTTP_EVENT_RECEIVE_RESPONSE_FROM_USERMODE_LEGACY = FormatString("Server application passed the last response (corresponding to request ID %s).", RequestId.ToString)
{
	UINT64 RequestId;
}
Struct HTTP_EVENT_RECEIVE_BODY_FROM_USERMODE = FormatString("Server application passed entity body for request ID %s (connection ID %s).", RequestId.ToString, ConnectionId.ToString)
{
	UINT64 RequestId;
	UINT64 ConnectionId;
}
Struct HTTP_EVENT_RECEIVE_BODY_FROM_USERMODE_LEGACY = FormatString("Server application passed the last entity body for request ID %s.", RequestId.ToString)
{
	UINT64 RequestId;
}
Struct HTTP_EVENT_RECEIVE_FAST_RESPONSE_FROM_USERMODE = FormatString("Server application passed response (request ID %s, connection ID %s, method %s, header length %s, number of entity chunks %s, cache policy %s) with status code %s.", RequestId.ToString, ConnectionId.ToString, Verb.ToString, HeaderLength.ToString, EntityChunkCount.ToString, CachePolicy.ToString, StatusCode.ToString)
{
	UINT64 RequestId;
	UINT64 ConnectionId;
	UINT16 StatusCode;
	AsciiString Verb;
	UINT32 HeaderLength;
	UINT16 EntityChunkCount;
	UINT32 CachePolicy;
}
Struct HTTP_EVENT_RECEIVE_FAST_RESPONSE_FROM_USERMODE_LEGACY = FormatString("Server application passed the last response (corresponding to request ID %s).", RequestId.ToString)
{
	UINT64 RequestId;
}
Struct HTTP_EVENT_COMPLETE_SEND_LEGACY = FormatString("Response ready for send (corresponding to request ID %s) with status code %s.", RequestId.ToString, HttpStatus.ToString)
{
	UINT64 RequestId;
	UINT16 HttpStatus;
}
Struct HTTP_EVENT_CACHED_AND_SEND_LEGACY = FormatString("Cached the response (corresponding to request ID %s) with status code %s. Response to be sent.", RequestId.ToString, HttpStatus.ToString)
{
	UINT64 RequestId;
	UINT16 HttpStatus;
}
Struct HTTP_EVENT_FAST_SEND_LEGACY = FormatString("Queued last response (corresponding to request ID %s) for sending. Status code is %s.", RequestId.ToString, HttpStatus.ToString)
{
	UINT64 RequestId;
	UINT16 HttpStatus;
}
Struct HTTP_EVENT_COMPLETE_ZERO_SEND_LEGACY = FormatString("Response sent (corresponding to request ID %s) with status code %s. If disconnect is required, a TCP FIN has been sent.", RequestId.ToString, HttpStatus.ToString)
{
	UINT64 RequestId;
	UINT16 HttpStatus;
}
Struct HTTP_EVENT_COMPLETE_SEND_ERROR_LEGACY = FormatString("Error occurred while sending the last response (corresponding to request ID %s) with status code %s. A TCP Reset has been sent.", RequestId.ToString, HttpStatus.ToString)
{
	UINT64 RequestId;
	UINT16 HttpStatus;
}
Struct HTTP_EVENT_SEND_ERROR = FormatString("Error %s occurred while sending (corresponding to request ID %s). A TCP Reset will be sent.", Status.ToString, RequestId.ToString)
{
	UINT64 RequestId;
	AsciiString Reason;
	UINT32 Status;
}
Struct HTTP_EVENT_SERVED_FROM_CACHE_LEGACY = FormatString("Response (request pointer %s, site ID %s, number of bytes %s) queued for sending from the cache.", RequestObj.ToString, SiteId.ToString, BytesSent.ToString)
{
	EtlPtr RequestObj;
	UINT32 SiteId;
	UINT32 BytesSent;
}
Struct HTTP_EVENT_SERVED_FROM_CACHE_LEGACY_V1 = FormatString("Response (request pointer %s, corresponding to request ID %s, site ID %s, number of bytes %s, endoding %s) queued for sending from the cache.", RequestObj.ToString, RequestId.ToString, SiteId.ToString, BytesSent.ToString, Encoding.ToString)
{
	EtlPtr RequestObj;
	UINT32 SiteId;
	UINT32 BytesSent;
	UINT64 RequestId;
	AsciiString Encoding;
}
Struct HTTP_EVENT_CACHE_NOT_MODIFIED_LEGACY_V0 = FormatString("Response (request pointer %s, site ID %s, number of bytes %s) queued for sending with status code 304 (cache not modified).", RequestObj.ToString, SiteId.ToString, BytesSent.ToString)
{
	EtlPtr RequestObj;
	UINT32 SiteId;
	UINT32 BytesSent;
}
Struct HTTP_EVENT_CACHE_NOT_MODIFIED_LEGACY = FormatString("Response (request pointer %s, site ID %s, number of bytes %s, encoding %s) queued for sending with status code 304 (cache not modified).", RequestObj.ToString, SiteId.ToString, BytesSent.ToString, Encoding.ToString)
{
	EtlPtr RequestObj;
	UINT32 SiteId;
	UINT32 BytesSent;
	UINT64 RequestId;
	AsciiString Encoding;
}
Struct HTTP_EVENT_URL_RESERVATION = FormatString("Attempted to reserve URL (%s). Status %s.", Url.ToString, ReserveStatus.ToString)
{
	UnicodeString Url;
	UINT32 ReserveStatus;
}
Struct HTTP_EVENT_IP_LISTEN_LIST_ENTRY_READ = FormatString("Successfully read the IP listen list for IP address %s.", IpAddrLength.ToString)
{
	UINT32 IpAddrLength;
	switch
	{
		case IpAddrLength > 0 :
			ETL_SOCKADDR_STORAGE IpAddress;
	}
}
Struct HTTP_EVENT_SSL_CREDENTIAL_CREATED = FormatString("SSL credentials for IP address and port %s successfully created.", IsValueNone(Address) ? "Null" : Address.ToString)
{
	EtlPtr EndpointConfigObj;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
	UINT32 CertHashLength;
	BLOB(CertHashLength) CertHash;
	UnicodeString CertStoreName;
	UINT32 CertCheckMode;
	UINT32 RevokeFreshnessTime;
	UINT32 RevokeRetrievalTime;
	UINT32 Flags;
	UnicodeString CtlId;
	UnicodeString CtlStoreName;
}
Struct HTTP_EVENT_CONNECTION_CONNECT = FormatString("New connection created (local IP address %s and remote address %s).", IsValueNone(LocalAddr) ? "Null" : LocalAddr.ToString, IsValueNone(RemoteAddr) ? "Null" : RemoteAddr.ToString)
{
	EtlPtr ConnectionObj;
	UINT32 LocalAddrLength;
	switch
	{
		case LocalAddrLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddr;
	}
	UINT32 RemoteAddrLength;
	switch
	{
		case RemoteAddrLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddr;
	}
}
Struct HTTP_EVENT_CONNECTION_ID = FormatString("Connection ID (%s) assigned to connection and request (request ID %s) will be parsed.", ConnectionId.ToString, RequestId.ToString)
{
	UINT64 RequestId;
	UINT64 ConnectionId;
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_CONNECTION_CLOSE = FormatString("Client closed the connection (connection pointer %s). Status of whether closed by TCP Reset: %s.", ConnectionObj.ToString, Abortive.ToString)
{
	EtlPtr ConnectionObj;
	UINT32 Abortive;
}
Struct HTTP_EVENT_CONNECTION_CLEANUP = FormatString("Connection (connection pointer %s) cleanup started due to either the sending of a TCP Reset, receiving of a TCP Reset, or after the mutual exchange of TCP Fins.", ConnectionObj.ToString)
{
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_CACHE_ENTRY_ADDED_V0 = FormatString("Successfully added entry (URI %s) to cache.", Uri.ToString)
{
	UnicodeString Uri;
	UINT16 StatusCode;
	AsciiString Verb;
	UINT32 HeaderLength;
	UINT32 ContentLength;
	UINT64 ExpirationTime;
}
Struct HTTP_EVENT_CACHE_ENTRY_ADDED = FormatString("Successfully added entry (URI %s) to cache (Encoding %s).", Uri.ToString, Encoding.ToString)
{
	UnicodeString Uri;
	UINT16 StatusCode;
	AsciiString Verb;
	UINT32 HeaderLength;
	UINT32 ContentLength;
	UINT64 ExpirationTime;
	AsciiString Encoding;
}
Struct HTTP_EVENT_CACHE_ENTRY_ADD_FAILED_V0 = FormatString("Failed to add an entry (URI %s) to the cache. Status: %s.", UrlBuffer.ToString, ErrorStatus.ToString)
{
	UnicodeString UrlBuffer;
	UINT32 ErrorStatus;
}
Struct HTTP_EVENT_CACHE_ENTRY_ADD_FAILED = FormatString("Failed to add an entry (URI %s) to the cache. Status: %s. Encoding: %s.", UrlBuffer.ToString, ErrorStatus.ToString, Encoding.ToString)
{
	UnicodeString UrlBuffer;
	UINT32 ErrorStatus;
	AsciiString Encoding;
}
Struct HTTP_EVENT_CACHE_ENTRY_FLUSHED = FormatString("Flushed entry (URI %s) from the cache.", Uri.ToString)
{
	UnicodeString Uri;
	UINT16 StatusCode;
	AsciiString Verb;
	UINT32 HeaderLength;
	UINT32 ContentLength;
	UINT64 ExpirationTime;
}
Struct HTTP_EVENT_SET_URL_GROUP_PROPERTY = FormatString("Attempted to set URL group property: %s. Status: %s.", Property.ToString, Status.ToString)
{
	UINT32 Property;
	UINT32 Status;
}
Struct HTTP_EVENT_SET_SERVER_SESSION_PROPERTY = FormatString("Attempted to set server session property: %s. Status: %s.", Property.ToString, Status.ToString)
{
	UINT32 Property;
	UINT32 Status;
}
Struct HTTP_EVENT_SET_REQUEST_QUEUE_PROPERTY = FormatString("Attempted to set request queue property: %s. Status: %s.", Property.ToString, Status.ToString)
{
	UINT32 Property;
	UINT32 Status;
}
Struct HTTP_EVENT_ADD_URL = FormatString("Attempted to add URL (%s) to URL group (%s). Status: %s.", Url.ToString, UrlGroupId.ToString, Status.ToString)
{
	UINT64 UrlGroupId;
	UnicodeString Url;
	UINT32 Status;
}
Struct HTTP_EVENT_REMOVE_URL = FormatString("Removed URL (%s) from URL group (%s).", Url.ToString, UrlGroupId.ToString)
{
	UINT64 UrlGroupId;
	UnicodeString Url;
}
Struct HTTP_EVENT_REMOVE_ALL_URLS = FormatString("Removed all URLs from URL group %s.", UrlGroupId.ToString)
{
	UINT64 UrlGroupId;
}
Struct HTTP_EVENT_SSL_CONNECT = FormatString("Initiating SSL connection.")
{
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_SSL_HANDSHAKE_INITIATE = FormatString("Initiating SSL handshake.")
{
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_SSL_HANDSHAKE_COMPLETE = FormatString("SSL handshake completed with status: %s.", Status.ToString)
{
	UINT32 Status;
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_SSL_RECEIVE_CLIENT_CERT_INITIATE = FormatString("Server application is attempting to receive the SSL client certificate, which will be provided if available. If the client certificate is not available, a renegotiation will be initiated.")
{
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_SSL_RECEIVE_CLIENT_CERT_COMPLETE = FormatString("Attempt by server application to receive client certificate failed with status: %s.", Status.ToString)
{
	UINT32 Status;
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_SSL_RECEIVE_RAW_DATA = FormatString("Raw SSL data is available for processing.")
{
	UINT32 DataLength;
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_SSL_DELIVER_STREAM_DATA = FormatString("Decrypted SSL data is available for processing.")
{
	UINT32 DataLength;
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_SSL_ACCEPT_STREAM_DATA = FormatString("Passed plaintext data for encryption.")
{
	UINT32 DataLength;
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_AUTH_SSPI_COMPLETION_V0 = FormatString("Attempt (on connection ID %s) to authenticate client completed. Authentication type %s. Security status: %s.", ConnectionId.ToString, AuthType.ToString, SecStatus.ToString)
{
	UINT64 ConnectionId;
	AsciiString AuthType;
	UINT32 SecStatus;
	UINT32 AuthStatus;
}
Struct HTTP_EVENT_AUTH_SSPI_COMPLETION = FormatString("Attempt (on connection ID %s) to authenticate client completed. Authentication type %s. Security status: %s.", ConnectionId.ToString, AuthType.ToString, SecStatus.ToString)
{
	UINT64 ConnectionId;
	AsciiString AuthType;
	UINT32 SecStatus;
	UINT32 AuthStatus;
	UINT32 ContextAttributes;
}
Struct HTTP_EVENT_AUTH_CACHE_ENTRY_ADDED = FormatString("Attempted to add entry to the %s authentication cache. Status: %s.", AuthCacheType.ToString, Status.ToString)
{
	UINT64 ConnectionId;
	AsciiString AuthCacheType;
	EtlPtr AccessTokenOrHandle;
	UINT32 Status;
}
Struct HTTP_EVENT_AUTH_CACHE_ENTRY_FREED = FormatString("Entry successfully removed from the authentication cache.")
{
	EtlPtr AccessTokenOrHandle;
	UINT32 Status;
}
Struct HTTP_EVENT_QOS_FLOW_SET = FormatString("Successfully associated QoS flow with connection (connection ID %s). Bandwidth throttled to: %s Bytes per second.", ConnectionId.ToString, Bandwidth.ToString)
{
	UINT64 ConnectionId;
	UINT32 Bandwidth;
	UINT32 Status;
}
Struct HTTP_EVENT_LOGGING_CONFIG_FAILURE = FormatString("Failed to configure the %s logging (directory %s), Status: %s.", Type.ToString, Directory.ToString, Status.ToString)
{
	UINT32 Status;
	UINT32 Type = HTTP_TEMPLATE_LOGGING_LogType_ValueMap(this);
	UINT32 Group = HTTP_TEMPLATE_LOGGING_LogGroup_ValueMap(this);
	UnicodeString Directory;
	UnicodeString Software;
	UINT32 SiteId;
}
Struct HTTP_EVENT_LOGGING_CONFIG = FormatString("Successfully configured %s logging (directory %s).", Type.ToString, Directory.ToString)
{
	UINT32 Present;
	UINT32 Type = HTTP_TEMPLATE_LOGGING_LogType_ValueMap(this);
	UINT32 Group = HTTP_TEMPLATE_LOGGING_LogGroup_ValueMap(this);
	UINT32 Format = HTTP_TEMPLATE_LOGGING_LogFormat_ValueMap(this);
	UnicodeString Directory;
	UnicodeString Software;
	UINT32 SiteId;
}
Struct HTTP_EVENT_LOGGING_CREATE_FAILURE = FormatString("Failed to create %s log file %s. Status: %s.", Type.ToString, Filename.ToString, Status.ToString)
{
	UINT32 Status;
	UINT32 Type = HTTP_TEMPLATE_LOGGING_LogType_ValueMap(this);
	UINT32 Group = HTTP_TEMPLATE_LOGGING_LogGroup_ValueMap(this);
	UINT32 Format = HTTP_TEMPLATE_LOGGING_LogFormat_ValueMap(this);
	UnicodeString Filename;
	UINT32 SiteId;
}
Struct HTTP_EVENT_LOGGING_CREATE = FormatString("Successfully created new %s log file %s.", Type.ToString, Filename.ToString)
{
	EtlPtr Handle;
	UINT32 Type = HTTP_TEMPLATE_LOGGING_LogType_ValueMap(this);
	UINT32 Group = HTTP_TEMPLATE_LOGGING_LogGroup_ValueMap(this);
	UINT32 Format = HTTP_TEMPLATE_LOGGING_LogFormat_ValueMap(this);
	UnicodeString Filename;
	UINT32 SiteId;
}
Struct HTTP_EVENT_LOGGING_WRITE = FormatString("Entry has been written to %s log file.", Type.ToString)
{
	UINT32 Status;
	EtlPtr Handle;
	UINT32 Type = HTTP_TEMPLATE_LOGGING_LogType_ValueMap(this);
	UINT32 Group = HTTP_TEMPLATE_LOGGING_LogGroup_ValueMap(this);
	UINT32 Format = HTTP_TEMPLATE_LOGGING_LogFormat_ValueMap(this);
	AsciiString ResType;
	UINT32 SiteId;
}
Struct HTTP_EVENT_PARSE_REQUEST_FAILURE = FormatString("Parsing of request (request ID %s) failed due to reason: %s. Request may not be compliant with HTTP/1.1.", RequestId.ToString, Reason.ToString)
{
	UINT32 Status;
	UINT64 RequestId;
	AsciiString Reason;
	UINT32 ErrorCode;
	UINT32 HintLength;
	BLOB(HintLength) HintData;
}
Struct HTTP_EVENT_TIMEOUT = FormatString("HTTP timer %s expired. The connection will be reset.", Timer.ToString)
{
	UINT64 ConnectionId;
	EtlPtr ConnectionObj;
	AsciiString Timer;
}
Struct HTTP_EVENT_SSL_ACH_FAILURE = FormatString("Failed to acquire handle for SSL credentials. Failure will be event logged. Security status: %s.", SecStatus.ToString)
{
	EtlPtr EndpointConfigObj;
	UINT32 SecStatus;
	AsciiString Detail;
}
Struct HTTP_EVENT_SSL_DISCONNECT = FormatString("SSL connection will be disconnected as initiated by the client.")
{
	EtlPtr ConnectionObj;
}
Struct HTTP_EVENT_SSL_DISCONNECT_REQUEST = FormatString("SSL connection will be disconnected as initiated by the server application. Status: %s.", Status.ToString)
{
	EtlPtr ConnectionObj;
	UINT32 Status;
}
Struct HTTP_EVENT_SSL_UNSEAL_MESSAGE = FormatString("Attempt to decrypt SSL data failed. Security status: %s.", SecStatus.ToString)
{
	EtlPtr ConnectionObj;
	UINT32 SecStatus;
}
Struct HTTP_EVENT_SSL_QUERY_CONN_INFO_FAILURE = FormatString("Query for SSL connection parameters failed. Security status: %s. Connection will be reset.", SecStatus.ToString)
{
	EtlPtr ConnectionObj;
	UINT32 SecStatus;
	AsciiString Detail;
}
Struct HTTP_EVENT_SSL_ENDPOINT_CONFIG_NOT_FOUND = FormatString("Cannot find SSL endpoint for inbound connection for local IP address and port %s.", IsValueNone(Address) ? "Null" : Address.ToString)
{
	EtlPtr ConnectionObj;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct HTTP_EVENT_SSL_ASC_RESULT = FormatString("Attempt to perform SSL handshake failed. Security status: %s.", SecStatus.ToString)
{
	EtlPtr ConnectionObj;
	UINT32 SecStatus;
}
Struct HTTP_EVENT_SSL_SEAL_MESSAGE = FormatString("Attempt to encrypt SSL data failed. Security status: %s.", SecStatus.ToString)
{
	EtlPtr ConnectionObj;
	UINT32 SecStatus;
}
Struct HTTP_EVENT_REQUEST_REJECTED = FormatString("Request (request ID %s) rejected due to reason: %s.", RequestId.ToString, Reason.ToString)
{
	UINT64 RequestId;
	AsciiString Reason;
	UnicodeString RequestQueueName;
}
Struct HTTP_EVENT_REQUEST_CANCELLED = FormatString("Server application canceled the processing of its request (request ID %s).", RequestId.ToString)
{
	UINT64 RequestId;
	AsciiString Reason;
	UnicodeString RequestQueueName;
}
Struct HTTP_EVENT_HOTADD_PROC_FAILURE = FormatString("Http.sys failed to process CPU hot-add. Processor number: %s, reason: %s, status: %s.", NewProcNumber.ToString, ReasonString.ToString, Status.ToString)
{
	UINT8 NewProcNumber;
	AsciiString ReasonString;
	UINT32 Status;
}
Struct HTTP_EVENT_HOTADD_PROC_SUCCESS = FormatString("Hot-add information: Current UxNumberOfProcessors: %s, comment: %s.", NewProcNumber.ToString, Comment.ToString)
{
	UINT8 NewProcNumber;
	AsciiString Comment;
}
Struct HTTP_EVENT_INIT_USER_RESPONSE_FLOW = FormatString("Initialized QoS flow: FlowHandle %s, bandwidth %s, peak bandwidth %s, burst size %s", FlowHandle.ToString, Bandwidth.ToString, PeakBandwidth.ToString, BurstSize.ToString)
{
	EtlPtr FlowHandle;
	UINT32 Bandwidth;
	UINT32 PeakBandwidth;
	UINT32 BurstSize;
}
Struct HTTP_EVENT_INIT_CACHED_RESPONSE_FLOW = FormatString("Initialized QoS flow: FlowHandle %s, bandwidth %s, peak bandwidth %s, burst size %s", FlowHandle.ToString, Bandwidth.ToString, PeakBandwidth.ToString, BurstSize.ToString)
{
	EtlPtr FlowHandle;
	UINT32 Bandwidth;
	UINT32 PeakBandwidth;
	UINT32 BurstSize;
}
Struct HTTP_EVENT_INIT_FLOW_FAILED = FormatString("QoS flow initialization failed: bandwidth %s, peak bandwidth %s, burst size %s, status %s", Bandwidth.ToString, PeakBandwidth.ToString, BurstSize.ToString, Status.ToString)
{
	UINT32 Bandwidth;
	UINT32 PeakBandwidth;
	UINT32 BurstSize;
	UINT32 Status;
}
Struct HTTP_EVENT_SET_CONNECTION_FLOW = FormatString("Setting flow: Connection %s, FlowHandle %s", Connection.ToString, FlowHandle.ToString)
{
	EtlPtr Connection;
	EtlPtr FlowHandle;
}
Struct HTTP_EVENT_REQUEST_ON_CONFIG_FLOW = FormatString("Assign to Configuration QoS Flow: FlowHandle %s", FlowHandle.ToString)
{
	EtlPtr FlowHandle;
}
Struct HTTP_EVENT_CONNECTION_FLOW_FAILURE = FormatString("[re]Setting QoS Flow failed: Connection %s, FlowHandle %s, status %s", Connection.ToString, FlowHandle.ToString, Status.ToString)
{
	EtlPtr Connection;
	EtlPtr FlowHandle;
	UINT32 Status;
}
Struct HTTP_EVENT_RESPONSE_RANGE_PROCESSING_OK = FormatString("Response range processing done. Req. %s, response content size %s, ranges %s (%s-%s, %s-%s,...)", RequestId.ToString, ContentBytes.ToString, NumberOfRanges.ToString, Range1Start.ToString, Range1End.ToString, Range2Start.ToString, Range2End.ToString)
{
	UINT64 RequestId;
	UINT64 ContentBytes;
	UINT32 NumberOfRanges;
	UINT64 Range1Start;
	UINT64 Range1End;
	UINT64 Range2Start;
	UINT64 Range2End;
}
Struct HTTP_EVENT_BEGIN_BUILDING_SLICES = FormatString("Begin building slices. Req. %s, slices %s (%s,%s,...), ranges %s (%s-%s, %s-%s,...)", RequestId.ToString, NumberOfSlices.ToString, SliceIndex1.ToString, SliceIndex2.ToString, NumberOfRanges.ToString, Range1Start.ToString, Range1End.ToString, Range2Start.ToString, Range2End.ToString)
{
	UINT64 RequestId;
	UINT32 NumberOfSlices;
	UINT32 SliceIndex1;
	UINT32 SliceIndex2;
	UINT32 NumberOfRanges;
	UINT64 Range1Start;
	UINT64 Range1End;
	UINT64 Range2Start;
	UINT64 Range2End;
}
Struct HTTP_EVENT_SEND_SLICE_CACHE_CONTENT = FormatString("Send cached slices. Req. %s, CacheEntry %s, slices %s (%s,%s,...), ranges %s (%s-%s, %s-%s,...)", RequestId.ToString, CacheEntryPtr.ToString, NumberOfSlices.ToString, SliceIndex1.ToString, SliceIndex2.ToString, NumberOfRanges.ToString, Range1Start.ToString, Range1End.ToString, Range2Start.ToString, Range2End.ToString)
{
	UINT64 RequestId;
	EtlPtr CacheEntryPtr;
	UINT32 NumberOfSlices;
	UINT32 SliceIndex1;
	UINT32 SliceIndex2;
	UINT32 NumberOfRanges;
	UINT64 Range1Start;
	UINT64 Range1End;
	UINT64 Range2Start;
	UINT64 Range2End;
}
Struct HTTP_EVENT_CACHED_SLICES_MATCH_RANGES = FormatString("Cached slices match content. Req. %s, CacheEntry %s, slices %s (%s,%s,...), ranges %s (%s-%s, %s-%s,...)", RequestId.ToString, CacheEntryPtr.ToString, NumberOfSlices.ToString, SliceIndex1.ToString, SliceIndex2.ToString, NumberOfRanges.ToString, Range1Start.ToString, Range1End.ToString, Range2Start.ToString, Range2End.ToString)
{
	UINT64 RequestId;
	EtlPtr CacheEntryPtr;
	UINT32 NumberOfSlices;
	UINT32 SliceIndex1;
	UINT32 SliceIndex2;
	UINT32 NumberOfRanges;
	UINT64 Range1Start;
	UINT64 Range1End;
	UINT64 Range2Start;
	UINT64 Range2End;
}
Struct HTTP_EVENT_MERGE_SLICES_TO_CACHE = FormatString("Merge slices to cache. CacheEntry %s, slices to merge %s, slices to cache %s", CacheEntryPtr.ToString, NofSlicesToMerge.ToString, NofSlicesInCache.ToString)
{
	EtlPtr CacheEntryPtr;
	UINT32 NofSlicesToMerge;
	UINT32 NofSlicesInCache;
}
Struct HTTP_EVENT_FLAT_CACHE_RANGE_SEND = FormatString("Sending range from flat cache entry. CacheEntry %s, range %s-%s", CacheEntryPtr.ToString, Range1Start.ToString, Range1End.ToString)
{
	EtlPtr CacheEntryPtr;
	UINT64 Range1Start;
	UINT64 Range1End;
}
Struct HTTP_EVENT_CHANNEL_BIND_ASC_PARAMETERS = FormatString("Channel bind ASC parameters: connection %s, buffers %s, flags %s", ConnectionId.ToString, NoBindBuffers.ToString, SecFlags.ToString)
{
	UINT64 ConnectionId;
	UINT32 NoBindBuffers;
	UINT32 SecFlags;
}
Struct HTTP_EVENT_SERVICE_BIND_CHECK_COMPLETE = FormatString("Service bind check done. Connection %s, Context %s-%s, status %s, target %s", ConnectionId.ToString, SecContextL.ToString, SecContextH.ToString, SecStatus.ToString, Target.ToString)
{
	UINT64 ConnectionId;
	EtlPtr SecContextL;
	EtlPtr SecContextH;
	UINT32 SecStatus;
	UnicodeString Target;
}
Struct HTTP_EVENT_CHANNEL_BIND_CONFIG_CAPTURE = FormatString("Captured channel bind config. Hardening %s, flags %s, service count %s", Hardening.ToString, Flags.ToString, ServiceNameCount.ToString)
{
	UINT8 Hardening;
	UINT32 Flags;
	UINT32 ServiceNameCount;
}
Struct HTTP_EVENT_CHANNEL_BIND_RESPONSE_CONFIG = FormatString("Channel bind response config overwrites %s", ReplaceConfigOf.ToString)
{
	AsciiString ReplaceConfigOf;
}
Struct HTTP_EVENT_POLICY_FLOW = FormatString("Policy-Based QoS: Connection %s, FlowHandle %s", Connection.ToString, FlowHandle.ToString)
{
	EtlPtr Connection;
	EtlPtr FlowHandle;
}
Struct HTTP_EVENT_THREADPOOL_EXTENSION = FormatString("Thread pool extension. Pool type: %s, active pools: %s.", PoolType.ToString, ActivePools.ToString)
{
	AsciiString PoolType;
	UINT16 ActivePools;
}
Struct HTTP_EVENT_THREAD_READY = FormatString("Thread ready. Pool type: %s, active pools: %s, thread count: %s", PoolType.ToString, ActivePools.ToString, ThreadCount.ToString)
{
	AsciiString PoolType;
	UINT16 ActivePools;
	UINT8 ThreadCount;
}
Struct HTTP_EVENT_THREADPOOL_TRIM = FormatString("Thread pool trim. Pool type: %s, active pools: %s.", PoolType.ToString, ActivePools.ToString)
{
	AsciiString PoolType;
	UINT16 ActivePools;
}
Struct HTTP_EVENT_THREAD_GONE = FormatString("Thread gone. Pool type: %s, active pools: %s, thread count: %s", PoolType.ToString, ActivePools.ToString, ThreadCount.ToString)
{
	AsciiString PoolType;
	UINT16 ActivePools;
	UINT8 ThreadCount;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsHttpEvent, "{7b6bc78c-898b-4170-bbf8-1a469ea43fc5}")]
Protocol MicrosoftWindowsHttpEvent = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 0xC0003A98: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_CREATE_FILE_FAILED EVENT_HTTP_LOGGING_CREATE_FILE_FAILED;
		case 0xC0003A99: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_CREATE_FILE_FAILED_FOR_SITE EVENT_HTTP_LOGGING_CREATE_FILE_FAILED_FOR_SITE;
		case 0xC0003A9A: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_FILE_WRITE_FAILED EVENT_HTTP_LOGGING_FILE_WRITE_FAILED;
		case 0xC0003A9B: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_CREATE_BINARY_FILE_FAILED EVENT_HTTP_LOGGING_CREATE_BINARY_FILE_FAILED;
		case 0xC0003A9C: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_BINARY_FILE_WRITE_FAILED EVENT_HTTP_LOGGING_BINARY_FILE_WRITE_FAILED;
		case 0xC0003A9D: [property.ETLSummary = this.ToString] EVENT_HTTP_CREATE_ENDPOINT_FAILED EVENT_HTTP_CREATE_ENDPOINT_FAILED;
		case 0xC0003A9E: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_INVALID_FILE_OWNER EVENT_HTTP_LOGGING_INVALID_FILE_OWNER;
		case 0x40003A9F: [property.ETLSummary = this.ToString] EVENT_HTTP_NAMESPACE_RESERVED EVENT_HTTP_NAMESPACE_RESERVED;
		case 0x40003AA0: [property.ETLSummary = this.ToString] EVENT_HTTP_NAMESPACE_DERESERVED EVENT_HTTP_NAMESPACE_DERESERVED;
		case 0xC0003AA1: [property.ETLSummary = this.ToString] EVENT_HTTP_NAMESPACE_INIT_FAILED EVENT_HTTP_NAMESPACE_INIT_FAILED;
		case 0xC0003AA2: [property.ETLSummary = this.ToString] EVENT_HTTP_NAMESPACE_INIT2_FAILED EVENT_HTTP_NAMESPACE_INIT2_FAILED;
		case 0xC0003AA3: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_CREATE_ERROR_FILE_FAILED EVENT_HTTP_LOGGING_CREATE_ERROR_FILE_FAILED;
		case 0xC0003AA4: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_ERROR_FILE_WRITE_FAILED EVENT_HTTP_LOGGING_ERROR_FILE_WRITE_FAILED;
		case 0xC0003AA5: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_ERROR_FILE_CONFIG_FAILED EVENT_HTTP_LOGGING_ERROR_FILE_CONFIG_FAILED;
		case 0xC0003AA6: [property.ETLSummary = this.ToString] EVENT_HTTP_LISTEN_ONLY_CONVERT_FAILED EVENT_HTTP_LISTEN_ONLY_CONVERT_FAILED;
		case 0x40003AA7: [property.ETLSummary = this.ToString] EVENT_HTTP_LISTEN_ONLY_ALL_CONVERT_FAILED EVENT_HTTP_LISTEN_ONLY_ALL_CONVERT_FAILED;
		case 0xC0003AA8: [property.ETLSummary = this.ToString] EVENT_HTTP_AUTH_SCHEME_INIT_FAILED EVENT_HTTP_AUTH_SCHEME_INIT_FAILED;
		case 0xC0003AA9: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_CREATE_CENTRALIZED_FILE_FAILED EVENT_HTTP_LOGGING_CREATE_CENTRALIZED_FILE_FAILED;
		case 0xC0003AAA: [property.ETLSummary = this.ToString] EVENT_HTTP_LOGGING_CENTRALIZED_FILE_WRITE_FAILED EVENT_HTTP_LOGGING_CENTRALIZED_FILE_WRITE_FAILED;
		case 0x80003AAB: [property.ETLSummary = this.ToString] EVENT_HTTP_HOST_STATUS_UP EVENT_HTTP_HOST_STATUS_UP;
		case 0x80003AAC: [property.ETLSummary = this.ToString] EVENT_HTTP_HOST_STATUS_DOWN EVENT_HTTP_HOST_STATUS_DOWN;
		case 0xC0003AAD: [property.ETLSummary = this.ToString] EVENT_HTTP_INVALID_SSL_CONFIG EVENT_HTTP_INVALID_SSL_CONFIG;
		case 0x80003BC4: [property.ETLSummary = this.ToString] EVENT_HTTP_SSL_CERT_SETTINGS_DELETED EVENT_HTTP_SSL_CERT_SETTINGS_DELETED;
		case 0x80003BC5: [property.ETLSummary = this.ToString] EVENT_HTTP_SSL_CERT_SETTINGS_CREATED EVENT_HTTP_SSL_CERT_SETTINGS_CREATED;
		case 0xC0003AAE: [property.ETLSummary = this.ToString] EVENT_HTTP_HOTADD_PROC_START_NOTIFY_FAILED EVENT_HTTP_HOTADD_PROC_START_NOTIFY_FAILED;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct EVENT_HTTP_LOGGING_CREATE_FILE_FAILED = FormatString("Unable to create log file %s. Make sure that the logging directory is correct and this computer has write access to that directory.", LogFile.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString LogFile;
}
Struct EVENT_HTTP_LOGGING_CREATE_FILE_FAILED_FOR_SITE = FormatString("Unable to create the log file for site W3SVC%s. Make sure that the logging directory for the site is correct and this computer has write access to that directory.", SiteId.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString SiteId;
}
Struct EVENT_HTTP_LOGGING_FILE_WRITE_FAILED = FormatString("Unable to write to the log file %s for site W3SVC%s. Disk may be full. If this is a network path, make sure that network connectivity is not broken.", LogFile.ToString, SiteId.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString LogFile;
	UnicodeString SiteId;
}
Struct EVENT_HTTP_LOGGING_CREATE_BINARY_FILE_FAILED = FormatString("Unable to create the centralized binary log file. Make sure that the logging directory is correct and this computer has write access to that directory.")
{
	_struct Empty{};
}
Struct EVENT_HTTP_LOGGING_BINARY_FILE_WRITE_FAILED = FormatString("Unable to write to the centralized binary log file %s. Disk may be full. If this is a network path, make sure that network connectivity is not broken.", LogFile.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString LogFile;
}
Struct EVENT_HTTP_CREATE_ENDPOINT_FAILED = FormatString("Unable to bind to the underlying transport for %s. The IP Listen-Only list may contain a reference to an interface which may not exist on this machine.  The data field contains the error number.", Address.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString Address;
}
Struct EVENT_HTTP_LOGGING_INVALID_FILE_OWNER = FormatString("Owner of the log file or directory %s is invalid. This could be because another user has already created the log file or the directory.", Directory.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString Directory;
}
Struct EVENT_HTTP_NAMESPACE_RESERVED = FormatString("Reservation for namespace identified by URL prefix %s was successfully added.", Url.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString Url;
}
Struct EVENT_HTTP_NAMESPACE_DERESERVED = FormatString("Reservation for namespace identified by URL prefix %s was successfully deleted.", Url.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString Url;
}
Struct EVENT_HTTP_NAMESPACE_INIT_FAILED = FormatString("An error occured while initializing namespace reservations.  The error status code is contained within the returned data.")
{
	_struct Empty{};
}
Struct EVENT_HTTP_NAMESPACE_INIT2_FAILED = FormatString("An error occured while initializing namespace reservation identified by URL prefix %s.  The error status code is contained within the returned data.", Url.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString Url;
}
Struct EVENT_HTTP_LOGGING_CREATE_ERROR_FILE_FAILED = FormatString("Unable to create the error log file. Make sure that the error logging directory is correct.")
{
	_struct Empty{};
}
Struct EVENT_HTTP_LOGGING_ERROR_FILE_WRITE_FAILED = FormatString("Unable to write to the error log file. Disk may be full. The data field contains the error number.")
{
	_struct Empty{};
}
Struct EVENT_HTTP_LOGGING_ERROR_FILE_CONFIG_FAILED = FormatString("Error logging configuration failed. The data field contains the error number.")
{
	_struct Empty{};
}
Struct EVENT_HTTP_LISTEN_ONLY_CONVERT_FAILED = FormatString("Unable to convert IP Listen-Only list entry %s.  The data field contains the error number.", Address.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString Address;
}
Struct EVENT_HTTP_LISTEN_ONLY_ALL_CONVERT_FAILED = FormatString("Unable to convert all entries on IP Listen-Only list.  Driver will listen on all available interfaces.")
{
	_struct Empty{};
}
Struct EVENT_HTTP_AUTH_SCHEME_INIT_FAILED = FormatString("Unable to initialize the security package %s for server side authentication.  The data field contains the error number.", SecurityPackage.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString SecurityPackage;
}
Struct EVENT_HTTP_LOGGING_CREATE_CENTRALIZED_FILE_FAILED = FormatString("Unable to create the centralized W3C log file. Make sure that the logging directory is correct and this computer has write access to that directory.")
{
	_struct Empty{};
}
Struct EVENT_HTTP_LOGGING_CENTRALIZED_FILE_WRITE_FAILED = FormatString("Unable to write to the centralized W3C log file %s. Disk may be full. If this is a network path, make sure that network connectivity is not broken.", LogFile.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString LogFile;
}
Struct EVENT_HTTP_HOST_STATUS_UP = FormatString("The host %s has gone down as a result of the change in the IP Listen-Only list.", Host.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString Host;
}
Struct EVENT_HTTP_HOST_STATUS_DOWN = FormatString("The host %s has come up as a result of the change in the IP Listen-Only list.", Host.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString Host;
}
Struct EVENT_HTTP_INVALID_SSL_CONFIG = FormatString("An error occured while using SSL configuration for socket address %s.  The error status code is contained within the returned data.", SocketAddress.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString SocketAddress;
}
Struct EVENT_HTTP_SSL_CERT_SETTINGS_DELETED = FormatString("SSL Certificate Settings deleted for Port : %s .", SocketAddress.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString SocketAddress;
}
Struct EVENT_HTTP_SSL_CERT_SETTINGS_CREATED = FormatString("SSL Certificate Settings created by an admin process for Port : %s .", SocketAddress.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString SocketAddress;
}
Struct EVENT_HTTP_HOTADD_PROC_START_NOTIFY_FAILED = FormatString("Http.sys failed to process a CPU hot-add event. Status: %s .", Status.ToString)
{
	UnicodeString DeviceObject;
	UnicodeString Status;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsHttpSQMProvider, "{F5344219-87A4-4399-B14A-E59CD118ABB8}")]
Protocol MicrosoftWindowsHttpSQMProvider = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 3: [property.ETLSummary = this.ToString] SQM_START_SESSION SQM_START_SESSION;
		case 4: [property.ETLSummary = this.ToString] SQM_END_SESSION SQM_END_SESSION;
		case 5: [property.ETLSummary = this.ToString] SQM_SET_DWORD SQM_SET_DWORD;
		case 6: [property.ETLSummary = this.ToString] SQM_INCREMENT_DWORD SQM_INCREMENT_DWORD;
		case 7: [property.ETLSummary = this.ToString] SQM_ADDTOAVERAGE_DWORD SQM_ADDTOAVERAGE_DWORD;
		case 8: [property.ETLSummary = this.ToString] SQM_SETIFMAX_DWORD SQM_SETIFMAX_DWORD;
		case 9: [property.ETLSummary = this.ToString] SQM_SETIFMIN_DWORD SQM_SETIFMIN_DWORD;
		case 10: [property.ETLSummary = this.ToString] SQM_SET_STRING SQM_SET_STRING;
		case 11: [property.ETLSummary = this.ToString] SQM_ADD_STREAMROW SQM_ADD_STREAMROW;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct SQM_START_SESSION = FormatString("SQM_START_SESSION - SqmType : %s, SqmSessionGuid : %s, SqmSid : %s, SqmWindowsSessionId : %s, SqmSessionFlags : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmSid.ToString, SqmWindowsSessionId.ToString, SqmSessionFlags.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	SID(false) SqmSid;
	UINT32 SqmWindowsSessionId;
	UINT32 SqmSessionFlags;
}
Struct SQM_END_SESSION = FormatString("SQM_END_SESSION - SqmType : %s, SqmSessionGuid : %s", SqmType.ToString, SqmSessionGuid.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
}
Struct SQM_SET_DWORD = FormatString("SQM_SET_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct SQM_INCREMENT_DWORD = FormatString("SQM_INCREMENT_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct SQM_ADDTOAVERAGE_DWORD = FormatString("SQM_ADDTOAVERAGE_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct SQM_SETIFMAX_DWORD = FormatString("SQM_SETIFMAX_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct SQM_SETIFMIN_DWORD = FormatString("SQM_SETIFMIN_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct SQM_SET_STRING = FormatString("SQM_SET_STRING - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmStringDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmStringDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UnicodeString SqmStringDatapointValue;
}
Struct SQM_ADD_STREAMROW = FormatString("SQM_ADD_STREAMROW - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmStreamRowLength : %s, SqmStreamRow : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmStreamRowLength.ToString, SqmStreamRow.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmStreamRowLength;
	SqmStreamRow SqmStreamRow[SqmStreamRowLength]; // Struct Array
}
struct SqmStreamRow //Array Struct
{
	UINT32 SqmTypeEntry;
	UINT32 SqmDWORDEntry;
	UnicodeString SqmStringEntry;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsHttpService_Keyword, "{dd5ef90a-6398-47a4-ad34-4dcecdef795f}")]
struct MicrosoftWindowsHttpService_Keyword
{
	UINT64 HTTP_KEYWORD_SETUP:1 = FormatString("         (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_SETUP":"");
	UINT64 Reserved1:3 = FormatString("                  (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_CONNECTION:1 = FormatString("    (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_CONNECTION": "");
	UINT64 Reserved2:3 = FormatString("                  (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_REQUEST_QUEUE:1 = FormatString(" (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_REQUEST_QUEUE": "");
	UINT64 Reserved3:3 = FormatString("                  (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_TIMEOUT:1 = FormatString("       (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_TIMEOUT": "");
	UINT64 Reserved4:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_REQUEST:1 = FormatString("       (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_REQUEST": "");
	UINT64 Reserved5:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_CACHE:1 = FormatString("         (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_CACHE": "");
	UINT64 Reserved6:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_SSL:1 = FormatString("           (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_SSL": "");
	UINT64 Reserved7:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_DRIVER_SETTING:1 = FormatString("(%s) %s", this.ToBitString, this? "HTTP_KEYWORD_DRIVER_SETTING": "");
	UINT64 Reserved8:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_RESPONSE:1 = FormatString("      (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_RESPONSE": "");
	UINT64 Reserved9:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_URL_GROUP:1 = FormatString("     (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_URL_GROUP": "");
	UINT64 Reserved10:1 = FormatString("                 (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_AUTHENTICATION:1 = FormatString("(%s) %s", this.ToBitString, this? "HTTP_KEYWORD_AUTHENTICATION": "");
	UINT64 Reserved11:1 = FormatString("                 (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_THREAD_POOL:1 = FormatString("   (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_THREAD_POOL": "");
	UINT64 Reserved12:1 = FormatString("                 (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_ENDPOINT:1 = FormatString("      (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_ENDPOINT": "");
	UINT64 Reserved13:1 = FormatString("                 (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_SERVER_SESSION:1 = FormatString("(%s) %s", this.ToBitString, this? "HTTP_KEYWORD_SERVER_SESSION": "");
	UINT64 Reserved14:1 = FormatString("                 (%s)", this.ToBitString);
	UINT64 HTTP_KEYWORD_LOGGING:1 = FormatString("       (%s) %s", this.ToBitString, this? "HTTP_KEYWORD_LOGGING": "");
	UINT64 Reserved15:29 = FormatString("                 (%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsHttpEvent_Keyword, "{7b6bc78c-898b-4170-bbf8-1a469ea43fc5}")]
struct MicrosoftWindowsHttpEvent_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsHttpSQMProvider_Keyword, "{F5344219-87A4-4399-B14A-E59CD118ABB8}")]
struct MicrosoftWindowsHttpSQMProvider_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
