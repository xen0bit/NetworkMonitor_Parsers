//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-DNS-Client
//#
//#  Details:                
//#
//#  Public References:      DNS-Client.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 1/28/2010
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsDNSClient, "{1c95126e-7eea-49a9-a3fe-a378b03ddb4d}")]
Protocol DNSClient_MicrosoftWindowsDNSClient = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 60001: [property.ETLSummary = this.ToString] DNSClient_NetError NetError;
		case 60002: [property.ETLSummary = this.ToString] DNSClient_NetWarning NetWarning;
		case 60003: [property.ETLSummary = this.ToString] DNSClient_StateTransition StateTransition;
		case 60004: [property.ETLSummary = this.ToString] DNSClient_ContextUpdate ContextUpdate;
		case 60005: [property.ETLSummary = this.ToString] DNSClient_PolicyReadError PolicyReadError;
		case 60101: [property.ETLSummary = this.ToString] DNSClient_V4Tuple V4Tuple;
		case 60102: [property.ETLSummary = this.ToString] DNSClient_V6Tuple V6Tuple;
		case 60103: [property.ETLSummary = this.ToString] DNSClient_InterfaceInfo InterfaceInfo;
		case 1000: [property.ETLSummary = this.ToString] DNSClient_DNS_NO_SERVER_CONFIG_V4 DNS_NO_SERVER_CONFIG_V4;
		case 1001: [property.ETLSummary = this.ToString] DNSClient_DNS_SERVER_FOR_INTERFACE DNS_SERVER_FOR_INTERFACE;
		case 1002: [property.ETLSummary = this.ToString] DNSClient_DNS_SERVER_QUERY_CHANGE DNS_SERVER_QUERY_CHANGE;
		case 1003: [property.ETLSummary = this.ToString] DNSClient_DNS_SERVER_VALIDATION_SUCCESS DNS_SERVER_VALIDATION_SUCCESS;
		case 1004: [property.ETLSummary = this.ToString] DNSClient_DNS_SERVER_VALIDATION_SUCCESS_SYSTEM DNS_SERVER_VALIDATION_SUCCESS_SYSTEM;
		case 1005: [property.ETLSummary = this.ToString] DNSClient_DNS_SERVER_VALIDATION_FAILURE DNS_SERVER_VALIDATION_FAILURE;
		case 1006: [property.ETLSummary = this.ToString] DNSClient_DNS_SERVER_VALIDATION_FAILURE_SYSTEM DNS_SERVER_VALIDATION_FAILURE_SYSTEM;
		case 1007: [property.ETLSummary = this.ToString] DNSClient_DNS_MISSING_PRIMARY_SUFFIX DNS_MISSING_PRIMARY_SUFFIX;
		case 1008: [property.ETLSummary = this.ToString] DNSClient_DNS_MISSING_PRIMARY_SUFFIX_SYSTEM DNS_MISSING_PRIMARY_SUFFIX_SYSTEM;
		case 1009: [property.ETLSummary = this.ToString] DNSClient_DNS_NON_MATCHING_SUFFIX DNS_NON_MATCHING_SUFFIX;
		case 1010: [property.ETLSummary = this.ToString] DNSClient_DNS_NON_MATCHING_SUFFIX_SYSTEM DNS_NON_MATCHING_SUFFIX_SYSTEM;
		case 1011: [property.ETLSummary = this.ToString] DNSClient_DNS_HOST_FILE_ERROR DNS_HOST_FILE_ERROR;
		case 1012: [property.ETLSummary = this.ToString] DNSClient_DNS_HOST_FILE_ERROR_SYSTEM DNS_HOST_FILE_ERROR_SYSTEM;
		case 1013: [property.ETLSummary = this.ToString] DNSClient_DNS_ALL_SERVERS_TIMEOUT DNS_ALL_SERVERS_TIMEOUT;
		case 1014: [property.ETLSummary = this.ToString] DNSClient_DNS_ALL_SERVERS_TIMEOUT_SYSTEM DNS_ALL_SERVERS_TIMEOUT_SYSTEM;
		case 1015: [property.ETLSummary = this.ToString] DNSClient_DNS_SERVER_TIMEOUT DNS_SERVER_TIMEOUT;
		case 1016: [property.ETLSummary = this.ToString] DNSClient_DNS_NAME_ERROR DNS_NAME_ERROR;
		case 1017: [property.ETLSummary = this.ToString] DNSClient_DNS_AUTHORITATIVE_RESPONSE DNS_AUTHORITATIVE_RESPONSE;
		case 1018: [property.ETLSummary = this.ToString] DNSClient_DNS_LINK_LOCAL DNS_LINK_LOCAL;
		case 1019: [property.ETLSummary = this.ToString] DNSClient_DNS_NO_SERVER_CONFIG_V6 DNS_NO_SERVER_CONFIG_V6;
		case 1020: [property.ETLSummary = this.ToString] DNSClient_DNS_READ_POLICY_TABLE DNS_READ_POLICY_TABLE;
		case 1021: [property.ETLSummary = this.ToString] DNSClient_DNS_MATCH_POLICY_INFO DNS_MATCH_POLICY_INFO;
		case 1022: [property.ETLSummary = this.ToString] DNSClient_DNS_SECURE_NO_FALLBACK DNS_SECURE_NO_FALLBACK;
		case 1023: [property.ETLSummary = this.ToString] DNSClient_PolicySystemReadError PolicySystemReadError;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table DNSClient_utOpcodeMap(value)
{
	switch(value)
	{
		case 180: "Start State";
		case 181: "End State";
		case 182: "Closed State";
		case 183: "Open State";
		case 184: "Connect State";
		case 185: "Listen State";
		case 186: "Association State";
		case 187: "Authentication State";
		case 188: "Established State";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table DNSClient_DnsIpTypeMap(value)
{
	switch(value)
	{
		case 0: "static";
		case 1: "dynamic";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct DNSClient_NetError = FormatString("Error: %s Location: %s Context: %s", ErrorCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct DNSClient_NetWarning = FormatString("Warning: %s Location: %s Context: %s", WarningCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode WarningCode;
	UINT32 Location;
	UINT32 Context;
}
Struct DNSClient_StateTransition = FormatString("Transitioned to State: %s Context: %s", NextState.ToString, Context.ToString)
{
	UINT8 NextState = DNSClient_utOpcodeMap(this);
	UINT32 Context;
}
Struct DNSClient_ContextUpdate = FormatString("Updated Context: %s Update Reason: %s", Context.ToString, UpdateReasonCode.ToString)
{
	UINT32 Context;
	UINT32 UpdateReasonCode;
}
Struct DNSClient_PolicyReadError = FormatString("Read Policy Table for rule %s failed with error %s", RuleName.ToString, ErrorCode.ToString)
{
	UnicodeString RuleName;
	WinErrorCode ErrorCode;
}
Struct DNSClient_V4Tuple = FormatString("SourceAddress: %s SourcePort: %s DestinationAddress: %s DestinationPort: %s Protocol: %s ReferenceContext: %s", SourceAddress.ToString, SourcePort.ToString, DestinationAddress.ToString, DestinationPort.ToString, Protocol.ToString, ReferenceContext.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address SourceAddress;
	UINT32 SourcePort;
	[DataFieldByteOrder = BigEndian]IPv4Address DestinationAddress;
	UINT32 DestinationPort;
	UINT32 Protocol;
	UINT32 ReferenceContext;
}
Struct DNSClient_V6Tuple = FormatString("SourceAddress: %s SourcePort: %s DestinationAddress: %s DestinationPort: %s Protocol: %s ReferenceContext: %s", SourceAddress.ToString, SourcePort.ToString, DestinationAddress.ToString, DestinationPort.ToString, Protocol.ToString, ReferenceContext.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv6Address SourceAddress;
	UINT32 SourcePort;
	[DataFieldByteOrder = BigEndian]IPv6Address DestinationAddress;
	UINT32 DestinationPort;
	UINT32 Protocol;
	UINT32 ReferenceContext;
}
Struct DNSClient_InterfaceInfo = FormatString("Interface Guid: %s IfIndex: %s Interface Luid: %s ReferenceContext: %s", IfGuid.ToString, IfIndex.ToString, IfLuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct DNSClient_DNS_NO_SERVER_CONFIG_V4 = FormatString("There are currently no IPv4 DNS servers configured for any interface on this host. Please configure DNS server settings, or renew your dynamic IP settings.")
{
	UINT32 Location;
	UINT32 Context;
}
Struct DNSClient_DNS_SERVER_FOR_INTERFACE = FormatString("Interface: %s Total DNS Server Count: %s Index: %s Address: %s (%s)", Interface.ToString, TotalServerCount.ToString, Index.ToString, IsValueNone(Address) ? "Null" : Address.ToString, DynamicAddress.ToString)
{
	UnicodeString Interface;
	UINT32 TotalServerCount;
	UINT32 Index;
	UINT8 DynamicAddress = DNSClient_DnsIpTypeMap(this);
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_SERVER_QUERY_CHANGE = FormatString("The DNS server being queried for interface %s has changed to %s", Interface.ToString, IsValueNone(Address) ? "Null" : Address.ToString)
{
	UnicodeString Interface;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_SERVER_VALIDATION_SUCCESS = FormatString("The following DNS server(s) were successfully validated as active servers that can service this client. %s", IsValueNone(Address) ? "Null" : Address.ToString)
{
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_SERVER_VALIDATION_SUCCESS_SYSTEM = FormatString("The following DNS server(s) were successfully validated as active servers that can service this client. %s", IsValueNone(Address) ? "Null" : Address.ToString)
{
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_SERVER_VALIDATION_FAILURE = FormatString("The client was unable to validate the following as active DNS server(s) that can service this client. The server(s) may be temporarily unavailable, or may be incorrectly configured. %s", IsValueNone(Address) ? "Null" : Address.ToString)
{
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_SERVER_VALIDATION_FAILURE_SYSTEM = FormatString("The client was unable to validate the following as active DNS server(s) that can service this client. The server(s) may be temporarily unavailable, or may be incorrectly configured. %s", IsValueNone(Address) ? "Null" : Address.ToString)
{
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_MISSING_PRIMARY_SUFFIX = FormatString("The primary DNS suffix for this machine is missing. In the absence of a primary DNS suffix, short unqualified names may not resolve through DNS")
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct DNSClient_DNS_MISSING_PRIMARY_SUFFIX_SYSTEM = FormatString("The primary DNS suffix for this machine is missing. In the absence of a primary DNS suffix, short unqualified names may not resolve through DNS")
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct DNSClient_DNS_NON_MATCHING_SUFFIX = FormatString("The primary DNS suffix for this machine (%s) does not match the Active Directory domain (%s) that it is currently joined to.", DnsSuffix.ToString, AdSuffix.ToString)
{
	UnicodeString DnsSuffix;
	UnicodeString AdSuffix;
}
Struct DNSClient_DNS_NON_MATCHING_SUFFIX_SYSTEM = FormatString("The primary DNS suffix for this machine (%s) does not match the Active Directory domain (%s) that it is currently joined to.", DnsSuffix.ToString, AdSuffix.ToString)
{
	UnicodeString DnsSuffix;
	UnicodeString AdSuffix;
}
Struct DNSClient_DNS_HOST_FILE_ERROR = FormatString("There was an error while attempting to read the local hosts file.")
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct DNSClient_DNS_HOST_FILE_ERROR_SYSTEM = FormatString("There was an error while attempting to read the local hosts file.")
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct DNSClient_DNS_ALL_SERVERS_TIMEOUT = FormatString("Name resolution for the name %s timed out after none of the configured DNS servers responded.", QueryName.ToString)
{
	UnicodeString QueryName;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_ALL_SERVERS_TIMEOUT_SYSTEM = FormatString("Name resolution for the name %s timed out after none of the configured DNS servers responded.", QueryName.ToString)
{
	UnicodeString QueryName;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_SERVER_TIMEOUT = FormatString("Name resolution for the name %s timed out after the DNS server %s did not respond.", QueryName.ToString, IsValueNone(Address) ? "Null" : Address.ToString)
{
	UnicodeString QueryName;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_NAME_ERROR = FormatString("A name not found error was returned for the name %s. Check to ensure that the name is correct. The response was sent by the server at %s.", QueryName.ToString, IsValueNone(Address) ? "Null" : Address.ToString)
{
	UnicodeString QueryName;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_AUTHORITATIVE_RESPONSE = FormatString("The DNS server's response to a query for name %s indicates that no records of the type queried are available, but could indicate that other records for the same name are present.", QueryName.ToString)
{
	UnicodeString QueryName;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct DNSClient_DNS_LINK_LOCAL = FormatString("The response for the query %s was a Link Local IP address %s. The response was sent by the server at %s.", QueryName.ToString, IsValueNone(Address) ? "Null" : Address.ToString, IsValueNone(DnsAddress) ? "Null" : DnsAddress.ToString)
{
	UnicodeString QueryName;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
	UINT32 DnsAddressLength;
	switch
	{
		case DnsAddressLength > 0 :
			ETL_SOCKADDR_STORAGE DnsAddress;
	}
}
Struct DNSClient_DNS_NO_SERVER_CONFIG_V6 = FormatString("There are currently no IPv6 DNS servers configured for any interface on this host. Please configure DNS server settings, or renew your dynamic IP settings.")
{
	UINT32 Location;
	UINT32 Context;
}
Struct DNSClient_DNS_READ_POLICY_TABLE = FormatString("Read DNS Name Resolution Policy Table: Key Name %s: DNSSEC Settings: DnsSecValidationRequired %s, DnsQueryOverIPSec %s, DnsEncryption %s Direct Access Settings: DirectAccessServerList %s, EnableRemoteIPSEC %s  RemoteEncryption %s ProxyType %s ProxyName %s", KeyName.ToString, DnsSecValidationRequired.ToString, DnsQueryOverIPSec.ToString, DnsEncryption.ToString, DirectAccessServerList.ToString, RemoteIPSEC.ToString, RemoteEncryption.ToString, ProxyType.ToString, ProxyName.ToString)
{
	UnicodeString KeyName;
	UINT32 DnsSecValidationRequired;
	UINT32 DnsQueryOverIPSec;
	UINT32 DnsEncryption;
	UnicodeString DirectAccessServerList;
	UINT32 RemoteIPSEC;
	UINT32 RemoteEncryption;
	UINT32 ProxyType;
	UnicodeString ProxyName;
}
Struct DNSClient_DNS_MATCH_POLICY_INFO = FormatString("Matched Effective policy for query name %s: Key Name %s: DnsSecValidationRequired %s, DnsQueryOverIPSec %s, DnsEncryption %s DirectAccessServerList %s, ProxyType %s ProxyName %s", QueryName.ToString, KeyName.ToString, DnsSecValidationRequired.ToString, DnsQueryOverIPSec.ToString, DnsEncryption.ToString, DirectAccessServerList.ToString, ProxyType.ToString, ProxyName.ToString)
{
	UnicodeString QueryName;
	UnicodeString KeyName;
	UINT32 DnsSecValidationRequired;
	UINT32 DnsQueryOverIPSec;
	UINT32 DnsEncryption;
	UnicodeString DirectAccessServerList;
	UINT32 ProxyType;
	UnicodeString ProxyName;
}
Struct DNSClient_DNS_SECURE_NO_FALLBACK = FormatString("Name resolution for the name %s will not fallback to LLMNR or NETBIOS", QueryName.ToString)
{
	UnicodeString QueryName;
}
Struct DNSClient_PolicySystemReadError = FormatString("Read Policy Table for rule %s failed with error %s", RuleName.ToString, ErrorCode.ToString)
{
	UnicodeString RuleName;
	WinErrorCode ErrorCode;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsDNSClient_Keyword, "{1c95126e-7eea-49a9-a3fe-a378b03ddb4d}")]
struct DNSClient_MicrosoftWindowsDNSClient_Keyword
{
	UINT64 Reserved1:32 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utPolicyTable:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_DNS_POLICY":"");
	UINT64 Reserved2:18 = FormatString("        (%s)", this.ToBitString);
}
