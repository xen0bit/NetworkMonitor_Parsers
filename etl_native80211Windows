//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-native80211
//#
//#  Details:                
//#
//#  Public References:      native80211.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsNWiFi, "{0BD3506A-9030-4f76-9B88-3E8FE1F7CFB6}")]
Protocol N802_MicrosoftWindowsNWiFi = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 60001: [property.ETLSummary = this.ToString] N802_NetError NetError;
		case 60002: [property.ETLSummary = this.ToString] N802_NetWarning NetWarning;
		case 60003: [property.ETLSummary = this.ToString] N802_StateTransition StateTransition;
		case 60004: [property.ETLSummary = this.ToString] N802_ContextUpdate ContextUpdate;
		case 60101: [property.ETLSummary = this.ToString] N802_V4Tuple V4Tuple;
		case 60102: [property.ETLSummary = this.ToString] N802_V6Tuple V6Tuple;
		case 60103: [property.ETLSummary = this.ToString] N802_InterfaceInfo InterfaceInfo;
		case 10000: [property.ETLSummary = this.ToString] N802_ResetRequestComplete ResetRequestComplete;
		case 10001: [property.ETLSummary = this.ToString] N802_IOCTLStatus IOCTLStatus;
		case 10002: [property.ETLSummary = this.ToString] N802_RejectScanRequest RejectScanRequest;
		case 10003: [property.ETLSummary = this.ToString] N802_NoAssociation NoAssociation;
		case 10004: [property.ETLSummary = this.ToString] N802_UnsupportedAlgorithm UnsupportedAlgorithm;
		case 10005: [property.ETLSummary = this.ToString] N802_DesiredSSIDList DesiredSSIDList;
		case 10006: [property.ETLSummary = this.ToString] N802_SetDesiredSSIDListError SetDesiredSSIDListError;
		case 10007: [property.ETLSummary = this.ToString] N802_SetDesiredBSSType SetDesiredBSSType;
		case 10008: [property.ETLSummary = this.ToString] N802_DesiredBSSIDList DesiredBSSIDList;
		case 10009: [property.ETLSummary = this.ToString] N802_AuthList AuthList;
		case 10010: [property.ETLSummary = this.ToString] N802_SetExcludeUnencrypted SetExcludeUnencrypted;
		case 10011: [property.ETLSummary = this.ToString] N802_SetHiddenNetworks SetHiddenNetworks;
		case 10012: [property.ETLSummary = this.ToString] N802_DropCachedM1Packet DropCachedM1Packet;
		case 10013: [property.ETLSummary = this.ToString] N802_ReplayDetected ReplayDetected;
		case 10014: [property.ETLSummary = this.ToString] N802_VersionNotSupported VersionNotSupported;
		case 10015: [property.ETLSummary = this.ToString] N802_ReceiveG1Packet ReceiveG1Packet;
		case 10016: [property.ETLSummary = this.ToString] N802_ReceiveSecureM1Packet ReceiveSecureM1Packet;
		case 10017: [property.ETLSummary = this.ToString] N802_ReceiveM1Packet ReceiveM1Packet;
		case 10018: [property.ETLSummary = this.ToString] N802_ReceiveM3Packet ReceiveM3Packet;
		case 10019: [property.ETLSummary = this.ToString] N802_SendG2Packet SendG2Packet;
		case 10020: [property.ETLSummary = this.ToString] N802_AbortReceiveM1Packet AbortReceiveM1Packet;
		case 10021: [property.ETLSummary = this.ToString] N802_SendM2Packet SendM2Packet;
		case 10022: [property.ETLSummary = this.ToString] N802_ReceiveM1PacketError ReceiveM1PacketError;
		case 10023: [property.ETLSummary = this.ToString] N802_ReceiveM3PacketError ReceiveM3PacketError;
		case 10024: [property.ETLSummary = this.ToString] N802_AbortReceiveM3Packet AbortReceiveM3Packet;
		case 10025: [property.ETLSummary = this.ToString] N802_SendM4Packet SendM4Packet;
		case 10026: [property.ETLSummary = this.ToString] N802_RejectSetPMK RejectSetPMK;
		case 10027: [property.ETLSummary = this.ToString] N802_Receive1XPacket Receive1XPacket;
		case 10028: [property.ETLSummary = this.ToString] N802_Send1XPacket Send1XPacket;
		case 10029: [property.ETLSummary = this.ToString] N802_AbortOIDRequest AbortOIDRequest;
		case 10030: [property.ETLSummary = this.ToString] N802_QueryAdapterSync QueryAdapterSync;
		case 10031: [property.ETLSummary = this.ToString] N802_RequestAdapterSync RequestAdapterSync;
		case 10032: [property.ETLSummary = this.ToString] N802_CallAdapterSync CallAdapterSync;
		case 10033: [property.ETLSummary = this.ToString] N802_MicFailureReportsSent MicFailureReportsSent;
		case 10034: [property.ETLSummary = this.ToString] N802_SetSecurityEndPoint SetSecurityEndPoint;
		case 10035: [property.ETLSummary = this.ToString] N802_IHVSerializationStatus IHVSerializationStatus;
		case 10036: [property.ETLSummary = this.ToString] N802_SetSafeMode SetSafeMode;
		case 10037: [property.ETLSummary = this.ToString] N802_AdapterResetNewMAC AdapterResetNewMAC;
		case 10038: [property.ETLSummary = this.ToString] N802_AdapterReset AdapterReset;
		case 10039: [property.ETLSummary = this.ToString] N802_RejectResetRequest RejectResetRequest;
		case 10040: [property.ETLSummary = this.ToString] N802_AssocStart AssocStart;
		case 10041: [property.ETLSummary = this.ToString] N802_AssocComplete AssocComplete;
		case 10042: [property.ETLSummary = this.ToString] N802_DisassocReason DisassocReason;
		case 10043: [property.ETLSummary = this.ToString] N802_DeferRoaming DeferRoaming;
		case 10044: [property.ETLSummary = this.ToString] N802_MismatchedSessionId MismatchedSessionId;
		case 10045: [property.ETLSummary = this.ToString] N802_AuthFailed AuthFailed;
		case 10046: [property.ETLSummary = this.ToString] N802_SetPortStateResult SetPortStateResult;
		case 10047: [property.ETLSummary = this.ToString] N802_VirtualPortDown VirtualPortDown;
		case 10048: [property.ETLSummary = this.ToString] N802_SetPrivacyExemptionListError SetPrivacyExemptionListError;
		case 10049: [property.ETLSummary = this.ToString] N802_CancelConnect CancelConnect;
		case 10050: [property.ETLSummary = this.ToString] N802_ConnectComplete ConnectComplete;
		case 10051: [property.ETLSummary = this.ToString] N802_ConnectRadioOff ConnectRadioOff;
		case 10052: [property.ETLSummary = this.ToString] N802_ConnectRadioLowPower ConnectRadioLowPower;
		case 10053: [property.ETLSummary = this.ToString] N802_StartConnect StartConnect;
		case 10054: [property.ETLSummary = this.ToString] N802_Disconnect Disconnect;
		case 10055: [property.ETLSummary = this.ToString] N802_DisconnectRequest DisconnectRequest;
		case 10056: [property.ETLSummary = this.ToString] N802_PowerStateResult PowerStateResult;
		case 10057: [property.ETLSummary = this.ToString] N802_PowerStateChange PowerStateChange;
		case 10058: [property.ETLSummary = this.ToString] N802_OpModeChangeFailed OpModeChangeFailed;
		case 10059: [property.ETLSummary = this.ToString] N802_TerminatingConnectionTKIP TerminatingConnectionTKIP;
		case 10060: [property.ETLSummary = this.ToString] N802_NwifiPairwiseKeySet NwifiPairwiseKeySet;
		case 10061: [property.ETLSummary = this.ToString] N802_NwifiDefaultKeySet NwifiDefaultKeySet;
		case 20000: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResume1 PerftrackNwifiResume1;
		case 20001: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResume2 PerftrackNwifiResume2;
		case 20002: [property.ETLSummary = this.ToString] N802_PerftrackNwifiPortOpen1 PerftrackNwifiPortOpen1;
		case 20003: [property.ETLSummary = this.ToString] N802_PerftrackNwifiPortOpen2 PerftrackNwifiPortOpen2;
		case 20004: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResumeEnd1 PerftrackNwifiResumeEnd1;
		case 20005: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResumeEnd2 PerftrackNwifiResumeEnd2;
		case 20006: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResume3 PerftrackNwifiResume3;
		case 20007: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResume4 PerftrackNwifiResume4;
		case 20008: [property.ETLSummary = this.ToString] N802_PerftrackNwifiPortOpen3 PerftrackNwifiPortOpen3;
		case 20009: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResumeEnd3 PerftrackNwifiResumeEnd3;
		case 20010: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResumeEnd4 PerftrackNwifiResumeEnd4;
		case 20011: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResume5 PerftrackNwifiResume5;
		case 20012: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResume6 PerftrackNwifiResume6;
		case 20013: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResumeEnd5 PerftrackNwifiResumeEnd5;
		case 20014: [property.ETLSummary = this.ToString] N802_PerftrackNwifiResumeEnd6 PerftrackNwifiResumeEnd6;
		case 20015: [property.ETLSummary = this.ToString] N802_PerftrackNwifiPortOpen4 PerftrackNwifiPortOpen4;
		case 10066: [property.ETLSummary = this.ToString] N802_SoftAPIMStartBegin SoftAPIMStartBegin;
		case 10067: [property.ETLSummary = this.ToString] N802_SoftAPIMStartEnd SoftAPIMStartEnd;
		case 10068: [property.ETLSummary = this.ToString] N802_SoftAPIMStartFailed SoftAPIMStartFailed;
		case 10069: [property.ETLSummary = this.ToString] N802_SoftAPIMStopBegin SoftAPIMStopBegin;
		case 10070: [property.ETLSummary = this.ToString] N802_SoftAPIMStopEnd SoftAPIMStopEnd;
		case 10071: [property.ETLSummary = this.ToString] N802_SoftAPIMStopFailed SoftAPIMStopFailed;
		case 10072: [property.ETLSummary = this.ToString] N802_PowerMgmtSupported PowerMgmtSupported;
		case 10073: [property.ETLSummary = this.ToString] N802_EnterLowPowerState EnterLowPowerState;
		case 10074: [property.ETLSummary = this.ToString] N802_LeaveLowPowerState LeaveLowPowerState;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table N802_utOpcodeMap(value)
{
	switch(value)
	{
		case 180: "Start State";
		case 181: "End State";
		case 182: "Closed State";
		case 183: "Open State";
		case 184: "Connect State";
		case 185: "Listen State";
		case 186: "Association State";
		case 187: "Authentication State";
		case 188: "Established State";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table N802_ResetTypeMap(value)
{
	switch(value)
	{
		case 1: "PHY";
		case 2: "PHY";
		case 3: "PHY/MAC";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table N802_BSSTypeMap(value)
{
	switch(value)
	{
		case 1: "infrastructure";
		case 2: "independent";
		case 3: "any";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table N802_EndPointTypeMap(value)
{
	switch(value)
	{
		case 0: "No Security";
		case 1: "Standard Security";
		case 2: "IHV Security Endpoint";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table N802_Dot11AuthAlgorithmMap(value)
{
	switch(value)
	{
		case 1: "Open";
		case 2: "Shared Key";
		case 3: "WPA";
		case 4: "WPA PSK";
		case 5: "WPA None";
		case 6: "RSNA";
		case 7: "RSNA PSK";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table N802_Dot11CipherAlgorithmMap(value)
{
	switch(value)
	{
		case 0x00: "NONE";
		case 0x01: "WEP40";
		case 0x02: "TKIP";
		case 0x04: "CCMP";
		case 0x05: "WEP104";
		case 0x100: "USE_GROUP";
		case 0x101: "WEP";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table N802_Dot11DirectionMap(value)
{
	switch(value)
	{
		case 1: "Inbound";
		case 2: "Outbound";
		case 3: "Both";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct N802_NetError = FormatString("Error: %s Location: %s Context: %s", ErrorCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct N802_NetWarning = FormatString("Warning: %s Location: %s Context: %s", WarningCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode WarningCode;
	UINT32 Location;
	UINT32 Context;
}
Struct N802_StateTransition = FormatString("Transitioned to State: %s Context: %s", NextState.ToString, Context.ToString)
{
	UINT8 NextState = N802_utOpcodeMap(this);
	UINT32 Context;
}
Struct N802_ContextUpdate = FormatString("Updated Context: %s Update Reason: %s", Context.ToString, UpdateReasonCode.ToString)
{
	UINT32 Context;
	UINT32 UpdateReasonCode;
}
Struct N802_V4Tuple = FormatString("SourceAddress: %s SourcePort: %s DestinationAddress: %s DestinationPort: %s Protocol: %s ReferenceContext: %s", SourceAddress.ToString, SourcePort.ToString, DestinationAddress.ToString, DestinationPort.ToString, Protocol.ToString, ReferenceContext.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address SourceAddress;
	UINT32 SourcePort;
	[DataFieldByteOrder = BigEndian]IPv4Address DestinationAddress;
	UINT32 DestinationPort;
	UINT32 Protocol;
	UINT32 ReferenceContext;
}
Struct N802_V6Tuple = FormatString("SourceAddress: %s SourcePort: %s DestinationAddress: %s DestinationPort: %s Protocol: %s ReferenceContext: %s", SourceAddress.ToString, SourcePort.ToString, DestinationAddress.ToString, DestinationPort.ToString, Protocol.ToString, ReferenceContext.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv6Address SourceAddress;
	UINT32 SourcePort;
	[DataFieldByteOrder = BigEndian]IPv6Address DestinationAddress;
	UINT32 DestinationPort;
	UINT32 Protocol;
	UINT32 ReferenceContext;
}
Struct N802_InterfaceInfo = FormatString("Interface Guid: %s IfIndex: %s Interface Luid: %s ReferenceContext: %s", IfGuid.ToString, IfIndex.ToString, IfLuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct N802_ResetRequestComplete = FormatString("OID_DOT11_RESET_REQUEST Complete %s ResetConfirmStatus=%s", Status.ToString, ResetStatus.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
	UINT32 ResetStatus;
}
Struct N802_IOCTLStatus = FormatString("IOCTL function=%s Status=%s Length=%s bytes", Function.ToString, Status.ToString, Length.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Function;
	UINT32 Status;
	UINT32 Length;
}
Struct N802_RejectScanRequest = FormatString("Reject Scan Request: %s", Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_NoAssociation = FormatString("IOCTL_DOT11_WEP_DEFAULT_KEY_VALUE: There is no association")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_UnsupportedAlgorithm = FormatString("Unsupported Mcast cipher algorithm %s", AlgorithmId.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 AlgorithmId;
}
Struct N802_DesiredSSIDList = FormatString("Desired SSID List %s entries", SSIDCount.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 SSIDCount;
	N802_SSIDList SSIDList[SSIDCount]; // Struct Array
}
Struct N802_SetDesiredSSIDListError = FormatString("SetDesiredSSIDList failed, status = %s", Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_SetDesiredBSSType = FormatString("Set DesiredBSSType: %s", BSSType.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 BSSType = N802_BSSTypeMap(this);
}
Struct N802_DesiredBSSIDList = FormatString("Desired BSSID List %s entries", BSSIDCount.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 BSSIDCount;
	BLOB(6) BSSIDList[BSSIDCount];
}
Struct N802_AuthList = FormatString("Enabled AuthList %s entries", AuthCount.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 AuthCount;
	UINT32 AuthAlgorithm[AuthCount] = N802_Dot11AuthAlgorithmMap(this);
}
Struct N802_SetExcludeUnencrypted = FormatString("Set ExcludeUnencrypted (%s): %s", Value.ToString, Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BOOL Value;
	UINT32 Status;
}
Struct N802_SetHiddenNetworks = FormatString("Set HiddenNetworkEnabled (%s): %s", Value.ToString, Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BOOL Value;
	UINT32 Status;
}
Struct N802_DropCachedM1Packet = FormatString("Drop cached M1: there is a pending 802.1x exchange")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
}
Struct N802_ReplayDetected = FormatString("Replay detected (our counter %s, received %s), dropping the packet", ExpectedCounter.ToString, ReceivedCounter.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT64 ExpectedCounter;
	UINT64 ReceivedCounter;
}
Struct N802_VersionNotSupported = FormatString("Version number %s not supported, Expecting %s", ExpectedVer.ToString, ReceivedVer.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 ExpectedVer;
	UINT32 ReceivedVer;
}
Struct N802_ReceiveG1Packet = FormatString("Receive 1X packet G1: FrameSeq# %s: %s ==> %s", FrameSequence.ToString, SrcMAC.ToString, DestMAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 FrameSequence;
	BLOB(6) SrcMAC;
	BLOB(6) DestMAC;
}
Struct N802_ReceiveSecureM1Packet = FormatString("Receive 1X packet M1 (4 way handshake rekey - secure bit set): FrameSeq# %s: %s ==> %s", FrameSequence.ToString, SrcMAC.ToString, DestMAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 FrameSequence;
	BLOB(6) SrcMAC;
	BLOB(6) DestMAC;
}
Struct N802_ReceiveM1Packet = FormatString("Receive 1X packet M1: FrameSeq# %s: %s ==> %s", FrameSequence.ToString, SrcMAC.ToString, DestMAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 FrameSequence;
	BLOB(6) SrcMAC;
	BLOB(6) DestMAC;
}
Struct N802_ReceiveM3Packet = FormatString("Receive 1X packet M3: FrameSeq# %s: %s ==> %s", FrameSequence.ToString, SrcMAC.ToString, DestMAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 FrameSequence;
	BLOB(6) SrcMAC;
	BLOB(6) DestMAC;
}
Struct N802_SendG2Packet = FormatString("Send 1X packet G2: %s ==> %s", SrcMAC.ToString, DestMAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BLOB(6) SrcMAC;
	BLOB(6) DestMAC;
}
Struct N802_AbortReceiveM1Packet = FormatString("Dot11ReceiveM1: aborted since the connection has changed")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
}
Struct N802_SendM2Packet = FormatString("Send 1X packet M2: %s ==> %s", SrcMAC.ToString, DestMAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BLOB(6) SrcMAC;
	BLOB(6) DestMAC;
}
Struct N802_ReceiveM1PacketError = FormatString("Dot11ReceiveM1 failed with status %s", Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_ReceiveM3PacketError = FormatString("Dot11ReceiveM3 failed with status %s", Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_AbortReceiveM3Packet = FormatString("Dot11ReceiveM3: aborted since the connection has changed")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
}
Struct N802_SendM4Packet = FormatString("Send 1X packet M4: %s ==> %s", SrcMAC.ToString, DestMAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BLOB(6) SrcMAC;
	BLOB(6) DestMAC;
}
Struct N802_RejectSetPMK = FormatString("Reject request of setting PMK since the caller is not current security endpoint")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_Receive1XPacket = FormatString("Receive 1X packet: FrameSeq#%s: %s ==> %s, Status %s", FrameSequence.ToString, SrcMAC.ToString, DestMAC.ToString, Status.ToString)
{
	UINT32 FrameSequence;
	BLOB(6) SrcMAC;
	BLOB(6) DestMAC;
	UINT32 Status;
}
Struct N802_Send1XPacket = FormatString("Send 1X packet: %s ==> %s", SrcMAC.ToString, DestMAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BLOB(6) SrcMAC;
	BLOB(6) DestMAC;
}
Struct N802_AbortOIDRequest = FormatString("Abort OID request %s (low power state): PowerState=%s", OID.ToString, PowerState.ToString)
{
	EtlPtr Adapter;
	UINT32 OID;
	UINT32 PowerState;
}
Struct N802_QueryAdapterSync = FormatString("QueryAdapterSync Error: %s OID %s", Status.ToString, OID.ToString)
{
	EtlPtr Adapter;
	UINT32 OID;
	UINT32 Status;
}
Struct N802_RequestAdapterSync = FormatString("RequestAdapterSync Error: %s OID %s", Status.ToString, OID.ToString)
{
	EtlPtr Adapter;
	UINT32 OID;
	UINT32 Status;
}
Struct N802_CallAdapterSync = FormatString("CallAdapterSync Error: %s OID %s", Status.ToString, OID.ToString)
{
	EtlPtr Adapter;
	UINT32 OID;
	UINT32 Status;
}
Struct N802_MicFailureReportsSent = FormatString("All MIC failure reports are sent. Notify miniport to disassociate from %s", MAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BLOB(6) MAC;
}
Struct N802_SetSecurityEndPoint = FormatString("Security endpoint type = %s", EndPointType.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT8 EndPointType = N802_EndPointTypeMap(this);
}
Struct N802_IHVSerializationStatus = FormatString("IHV Serialization Enabled: %s", Enabled.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BOOL Enabled;
}
Struct N802_SetSafeMode = FormatString("Safe mode = %s", Enabled.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BOOL Enabled;
}
Struct N802_AdapterResetNewMAC = FormatString("Reset %s New MAC address %s SetDefaultMIB=%s", ResetType.ToString, MAC.ToString, DefaultMIB.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT8 ResetType = N802_ResetTypeMap(this);
	BLOB(6) MAC;
	BOOL DefaultMIB;
}
Struct N802_AdapterReset = FormatString("Reset %s SetDefaultMIB=%s", ResetType.ToString, DefaultMIB.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT8 ResetType = N802_ResetTypeMap(this);
	BLOB(6) MAC;
	BOOL DefaultMIB;
}
Struct N802_RejectResetRequest = FormatString("Reject Reset Request: %s", Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_AssocStart = FormatString("Association Start: %s", MAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BLOB(6) MAC;
}
Struct N802_AssocComplete = FormatString("Association Completion: %s AssocStatus=%s", MAC.ToString, Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BLOB(6) MAC;
	UINT32 Status;
}
Struct N802_DisassocReason = FormatString("DisAssoc: %s Reason: %s", MAC.ToString, Reason.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	BLOB(6) MAC;
	UINT32 Reason;
}
Struct N802_DeferRoaming = FormatString("Defer roaming timer until system wakeup")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
}
Struct N802_MismatchedSessionId = FormatString("Mismatched session ID")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 SessionId;
}
Struct N802_AuthFailed = FormatString("PortState: Auth Failed: %s", MAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 SessionId;
	BLOB(6) MAC;
}
Struct N802_SetPortStateResult = FormatString("SetPortState: %s: Controlled=%s Authorized=%s", MAC.ToString, Controlled.ToString, Authorized.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 SessionId;
	BLOB(6) MAC;
	BOOL Controlled;
	BOOL Authorized;
}
Struct N802_VirtualPortDown = FormatString("Post Virtual PortDown Notification (MAC=%s) to Security Module", MAC.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 SessionId;
	BLOB(6) MAC;
}
Struct N802_SetPrivacyExemptionListError = FormatString("Unable to set OID_DOT11_PRIVACY_EXEMPTION_LIST Status = %s", Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_CancelConnect = FormatString("Cancel IOCTL_DOT11_CONNECT")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	EtlPtr Irp;
}
Struct N802_ConnectComplete = FormatString("OID_DOT11_CONNECT_REQUEST completes %s", Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_ConnectRadioOff = FormatString("Fail Connect Request: Radio is off")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 PowerState;
}
Struct N802_ConnectRadioLowPower = FormatString("Fail Connect Request in low power state: %s", PowerState.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 PowerState;
}
Struct N802_StartConnect = FormatString("IOCTL_DOT11_CONNECT")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	EtlPtr Irp;
}
Struct N802_Disconnect = FormatString("IOCTL_DOT11_DISCONNECT")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
}
Struct N802_DisconnectRequest = FormatString("OID_DOT11_DISCONNECT_REQUEST Status = %s", Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_PowerStateResult = FormatString("OID_DOT11_NIC_POWER_STATE Status = %s", Status.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 Status;
}
Struct N802_PowerStateChange = FormatString("Old PowerState=%s, New PowerState=%s", OldPowerState.ToString, NewPowerState.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 OldPowerState;
	UINT32 NewPowerState;
	BOOL Halting;
}
Struct N802_OpModeChangeFailed = FormatString("Change OpMode Failed: Capability is not supported (Configured = %s, IM supported = %s, MiniPort supported = %s)", ConfiguredOpMode.ToString, IMSupportedOpModes.ToString, MiniPortSupportedOpModes.ToString)
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
	UINT32 ConfiguredOpMode;
	UINT32 IMSupportedOpModes;
	UINT32 MiniPortSupportedOpModes;
}
Struct N802_TerminatingConnectionTKIP = FormatString("Terminate the connection: too many TKIP-MIC countermeasures.")
{
	EtlPtr ContextHandle;
	GUID(true) AdapterGuid;
}
Struct N802_NwifiPairwiseKeySet = FormatString("Pairwise Key (%s): Algo %s, Direction= %s, Len %s", Addr.ToString, CipherAlgoId.ToString, Direction.ToString, Len.ToString)
{
	BLOB(6) Addr;
	UINT32 CipherAlgoId = N802_Dot11CipherAlgorithmMap(this);
	UINT8 Direction = N802_Dot11DirectionMap(this);
	UINT32 Len;
}
Struct N802_NwifiDefaultKeySet = FormatString("Default Key: Idx %s, Algo %s, Direction= %s, Len %s", Index.ToString, CipherAlgoId.ToString, Direction.ToString, Len.ToString)
{
	UINT32 Index;
	UINT32 CipherAlgoId = N802_Dot11CipherAlgorithmMap(this);
	UINT8 Direction = N802_Dot11DirectionMap(this);
	UINT32 Len;
}
Struct N802_PerftrackNwifiResume1 = FormatString("Resume from low power 1")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResume2 = FormatString("Resume from low power 2")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiPortOpen1 = FormatString("Port authorized 1")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiPortOpen2 = FormatString("Port authorized 2")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResumeEnd1 = FormatString("Resume from low power (End trailing scenario) 1")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResumeEnd2 = FormatString("Resume from low power (End trailing scenario) 2")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResume3 = FormatString("Resume from low power 3")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResume4 = FormatString("Resume from low power 4")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiPortOpen3 = FormatString("Port authorized 3")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResumeEnd3 = FormatString("Resume from low power (End trailing scenario) 3")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResumeEnd4 = FormatString("Resume from low power (End trailing scenario) 4")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResume5 = FormatString("Resume from low power 5")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResume6 = FormatString("Resume from low power 6")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResumeEnd5 = FormatString("Resume from low power (End trailing scenario) 5")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiResumeEnd6 = FormatString("Resume from low power (End trailing scenario) 6")
{
	GUID(true) InterfaceGuid;
}
Struct N802_PerftrackNwifiPortOpen4 = FormatString("Port authorized 4")
{
	GUID(true) InterfaceGuid;
}
Struct N802_SoftAPIMStartBegin = FormatString("802.11 IM driver has begun to start the device network, adapter guid = %s, Local MAC addr = %s, SSID = %s", InterfaceGuid.ToString, MAC.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	EtlPtr ContextHandle;
	AsciiString MAC;
	AsciiString SSID;
}
Struct N802_SoftAPIMStartEnd = FormatString("802.11 IM driver has finished starting the device network, adapter guid = %s, Local MAC addr = %s, SSID = %s", InterfaceGuid.ToString, MAC.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	EtlPtr ContextHandle;
	AsciiString MAC;
	AsciiString SSID;
}
Struct N802_SoftAPIMStartFailed = FormatString("802.11 IM driver has failed to start the device network, error code = %s, adapter guid = %s, Local MAC addr = %s, SSID = %s", ErrorCode.ToString, InterfaceGuid.ToString, MAC.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	WinErrorCode ErrorCode;
	EtlPtr ContextHandle;
	AsciiString MAC;
	AsciiString SSID;
}
Struct N802_SoftAPIMStopBegin = FormatString("802.11 IM driver has begun to stop the device network, adapter guid = %s, Local MAC addr = %s, SSID = %s", InterfaceGuid.ToString, MAC.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	EtlPtr ContextHandle;
	AsciiString MAC;
	AsciiString SSID;
}
Struct N802_SoftAPIMStopEnd = FormatString("802.11 IM driver has finished stopping the device network, adapter guid = %s, Local MAC addr = %s, SSID = %s", InterfaceGuid.ToString, MAC.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	EtlPtr ContextHandle;
	AsciiString MAC;
	AsciiString SSID;
}
Struct N802_SoftAPIMStopFailed = FormatString("802.11 IM driver has failed to stop the device network, error code = %s, adapter guid = %s, local MAC addr = %s, SSID = %s", ErrorCode.ToString, InterfaceGuid.ToString, MAC.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	WinErrorCode ErrorCode;
	EtlPtr ContextHandle;
	AsciiString MAC;
	AsciiString SSID;
}
Struct N802_PowerMgmtSupported = FormatString("Results of querying power management mode: current power management mode = %s, power management mode supported by AP = %s, adapter guid = %s, AP MAC addr = %s, AP SSID = %s", PowerMgmtMode.ToString, PowerMgmtModeSupported.ToString, AdapterGuid.ToString, MAC.ToString, SSID.ToString)
{
	UINT32 PowerMgmtMode;
	BOOL PowerMgmtModeSupported;
	GUID(true) AdapterGuid;
	BLOB(6) MAC;
	AsciiString SSID;
}
Struct N802_EnterLowPowerState = FormatString("Adapter going to sleep, adapter guid = %s, halted = %s", AdapterGuid.ToString, Halted.ToString)
{
	GUID(true) AdapterGuid;
	BOOL Halted;
}
Struct N802_LeaveLowPowerState = FormatString("Adapter resumed from sleep, adapter guid = %s", AdapterGuid.ToString)
{
	GUID(true) AdapterGuid;
}
struct N802_SSIDList //Array Struct
{
	UINT8 SSIDLen;
	AsciiString(SSIDLen) SSID;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsNWiFi_Keyword, "{0BD3506A-9030-4f76-9B88-3E8FE1F7CFB6}")]
struct N802_MicrosoftWindowsNWiFi_Keyword
{
	UINT64 Init:1 = FormatString("             (%s) %s", this.ToBitString, this? "KW_INIT":"");
	UINT64 Ioctls:1 = FormatString("           (%s) %s", this.ToBitString, this? "KW_IOCTLS":"");
	UINT64 RSNA:1 = FormatString("             (%s) %s", this.ToBitString, this? "KW_RSNA":"");
	UINT64 AuthUpcall:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_AUTHUPCALL":"");
	UINT64 IODisp:1 = FormatString("           (%s) %s", this.ToBitString, this? "KW_IODISP":"");
	UINT64 NDISReq:1 = FormatString("          (%s) %s", this.ToBitString, this? "KW_NDISREQ":"");
	UINT64 TKIPSec:1 = FormatString("          (%s) %s", this.ToBitString, this? "KW_TKIPSEC":"");
	UINT64 Reset:1 = FormatString("            (%s) %s", this.ToBitString, this? "KW_RESET":"");
	UINT64 AssocMgr:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_ASSOCMGR":"");
	UINT64 LWF:1 = FormatString("              (%s) %s", this.ToBitString, this? "KW_LWF":"");
	UINT64 SOFTAP:1 = FormatString("           (%s) %s", this.ToBitString, this? "KW_SOFTAP":"");
	UINT64 PowerMgmt:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_POWERMGMT":"");
	UINT64 SleepResume:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_SLEEPRESUME":"");
	UINT64 Reserved1:19 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 Reserved2:18 = FormatString("        (%s)", this.ToBitString);
}
