//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Federation Service Web Agent Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-ADFWAP]: Federation Service Web Agent Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 12/10/2009
//#                          Minor, 11/6/2009
//#
//####

[Property.SoapBodySummary = "ADFWAP Payload"]
[RegisterBefore(SoapBody.DefaultSoapBody, ADFWAP, ADFWAPSoapActionTable(Property.SOAPAction))]
Protocol ADFWAP = Property.ADFWAPSummary
{
	Switch(Property.SOAPAction)
	{
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/GetFsTrustInformation":
			[Property.ADFWAPSummary = this.ToString]
			ADFWAPGetFsTrustInformation ADFWAPGetFsTrustInformation;
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/GetTrustedRealmUri":
			[Property.ADFWAPSummary = this.ToString]
			ADFWAPGetTrustedRealmUri ADFWAPGetTrustedRealmUri;
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/GetClaims":
			[Property.ADFWAPSummary = this.ToString]
			ADFWAPGetClaims ADFWAPGetClaims;
		Default:
			While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
			{
				XmlElement(true) AnyNode;
			}
	}
	
}


struct ADFWAPGetFsTrustInformation = FormatString("%s Message", Property.ADFWAPGetFsTrustInformationSummary)
{
	[Post.Local.ADFWAPGetFsTrustInformation_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADFWAPGetFsTrustInformation_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetFsTrustInformationResponse"):
						[Property.ADFWAPGetFsTrustInformationSummary = "GetFsTrustInformation Response"]
						ADFWAPfsGetFsTrustInformationResponseElement GetFsTrustInformationResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetFsTrustInformation"):
						[Property.ADFWAPGetFsTrustInformationSummary = "GetFsTrustInformation Request"]
						ADFWAPfsGetFsTrustInformationElement GetFsTrustInformation;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADFWAPGetFsTrustInformationSummary = "Fault GetFsTrustInformation Response"]
						SoapFaultElement FaultGetFsTrustInformationElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADFWAPGetFsTrustInformationSummary = "Encrypted GetFsTrustInformation Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADFWAPGetTrustedRealmUri = FormatString("%s Message", Property.ADFWAPGetTrustedRealmUriSummary)
{
	[Post.Local.ADFWAPGetTrustedRealmUri_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADFWAPGetTrustedRealmUri_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetTrustedRealmUriResponse"):
						[Property.ADFWAPGetTrustedRealmUriSummary = "GetTrustedRealmUri Response"]
						ADFWAPfsGetTrustedRealmUriResponseElement GetTrustedRealmUriResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetTrustedRealmUri"):
						[Property.ADFWAPGetTrustedRealmUriSummary = "GetTrustedRealmUri Request"]
						ADFWAPfsGetTrustedRealmUriElement GetTrustedRealmUri;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADFWAPGetTrustedRealmUriSummary = "Fault GetTrustedRealmUri Response"]
						SoapFaultElement FaultGetTrustedRealmUriElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADFWAPGetTrustedRealmUriSummary = "Encrypted GetTrustedRealmUri Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct ADFWAPGetClaims = FormatString("%s Message", Property.ADFWAPGetClaimsSummary)
{
	[Post.Local.ADFWAPGetClaims_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.ADFWAPGetClaims_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetClaimsResponse"):
						[Property.ADFWAPGetClaimsSummary = "GetClaims Response"]
						ADFWAPfsGetClaimsResponseElement GetClaimsResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetClaims"):
						[Property.ADFWAPGetClaimsSummary = "GetClaims Request"]
						ADFWAPfsGetClaimsElement GetClaims;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.ADFWAPGetClaimsSummary = "Fault GetClaims Response"]
						SoapFaultElement FaultGetClaimsElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.ADFWAPGetClaimsSummary = "Encrypted GetClaims Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

[Property.ADFWAPContent = "GetFsTrustInformation request"]
struct ADFWAPfsGetFsTrustInformationElement = "GetFsTrustInformation request"
{
	[ Post.Local.Request_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("GetFsTrustInformation") GetFsTrustInformationOpenTag;
	
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "wsVersion"):
			ADFWAPVersionInformation VersionInformation;
	}
	
	switch 
	{
		case !Local.Request_IsEmpty :
			XmlTag("GetFsTrustInformation") GetFsTrustInformationCloseTag;
	}
}

struct ADFWAPVersionInformation
{
	[ Post.Local.VersionInformation_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("VersionInformation") VersionInformationOpenTag;
	
	struct
	{
		[ Post.Local.SoftwareVersion_IsEmpty = Property.IsXmlEmptyElement ]
		XmlTag("SoftwareVersion") SoftwareVersionOpenTag;
		
		switch 
		{
			case !Local.SoftwareVersion_IsEmpty :
				struct
				{
					[ Property.SoftwareVersionValue]
					StringTerm(Ascii, "<", true, false, false) SoftwareVersion;
					XmlTag("SoftwareVersion") SoftwareVersionCloseTag;
				}
		}
	}
	
	struct
	{
		[ Post.Local.Guid_IsEmpty = Property.IsXmlEmptyElement ]
		XmlTag("Guid") GuidOpenTag;
		
		switch 
		{
			case !Local.Guid_IsEmpty :
				struct
				{
					StringTerm(Ascii, "<", true, false, false) Guid;
					XmlTag("Guid") GuidCloseTag;
				}
		}
	}
	
	struct
	{
		[ Post.Local.Version_IsEmpty = Property.IsXmlEmptyElement ]
		XmlTag("Version") VersionOpenTag;
		
		switch 
		{
			case !Local.Version_IsEmpty :
				struct
				{
					StringTerm(Ascii, "<", true, false, false) Version;
					XmlTag("Version") VersionCloseTag;
				}
		}
	}
	
	switch 
	{
		case !Local.VersionInformation_IsEmpty :
			XmlTag("VersionInformation") VersionInformationCloseTag;
	}
}

[Property.ADFWAPContent = "GetFsTrustInformation response"]
struct ADFWAPfsGetFsTrustInformationResponseElement = "GetFsTrustInformation response"
{
	[ Post.Local.Response_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("GetFsTrustInformationResponse") GetFsTrustInformationResponseOpenTag;
	
	struct
	{	
		[ Post.Local.GetFsTrustInformationResult_IsEmpty = Property.IsXmlEmptyElement ]
		XmlTag("GetFsTrustInformationResult") GetFsTrustInformationResultOpenTag;
		
		switch 
		{
			case !Local.GetFsTrustInformationResult_IsEmpty :
				struct
				{
					StringTerm(Ascii, "<", true, false, false) GetFsTrustInformationResult;
					XmlTag("GetFsTrustInformationResult") GetFsTrustInformationResultCloseTag;
				}
		}
	}
	
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "fsVersion"):
			ADFWAPVersionInformation VersionInformation;
	}
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "trustInfo"):
			ADFWAPFsInformationData FsInformationData;
	}
	
	switch 
	{
		case !Local.Response_IsEmpty :
			XmlTag("GetFsTrustInformationResponse") GetFsTrustInformationResponseCloseTag;
	}
}

struct ADFWAPFsInformationData
{
	[ Post.Local.trustInfo_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("trustInfo") trustInfoOpenTag;
	
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "verificationMethod"):
			ADFWAPX509VerificationMethod X509VerificationMethod;
	}
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "certificates"):
			ADFWAPFederationCertificates FederationCertificates;
	}
	
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "fsDomainAccount"):
			struct
			{
				[ Post.Local.fsDomainAccount_IsEmpty = Property.IsXmlEmptyElement ]
				XmlTag("fsDomainAccount") fsDomainAccountOpenTag;
				
				switch 
				{
					case !Local.fsDomainAccount_IsEmpty :
						struct
						{
							StringTerm(Ascii, "<", true, false, false) fsDomainAccount;
							XmlTag("fsDomainAccount") fsDomainAccountCloseTag;
						}
				}
			}
	}
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "hostedRealmUri"):
			struct
			{
				[ Post.Local.hostedRealmUri_IsEmpty = Property.IsXmlEmptyElement ]
				XmlTag("hostedRealmUri") hostedRealmUriOpenTag;
				
				switch 
				{
					case !Local.hostedRealmUri_IsEmpty :
						struct
						{
							StringTerm(Ascii, "<", true, false, false) hostedRealmUri;
							XmlTag("hostedRealmUri") hostedRealmUriCloseTag;
						}
				}
			}
	}
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "lsUrl"):
			struct
			{
				[ Post.Local.lsUrl_IsEmpty = Property.IsXmlEmptyElement ]
				XmlTag("lsUrl") lsUrlOpenTag;
				
				switch 
				{
					case !Local.lsUrl_IsEmpty :
						struct
						{
							StringTerm(Ascii, "<", true, false, false) lsUrl;
							XmlTag("lsUrl") lsUrlCloseTag;
						}
				}
			}
	}
	
	switch 
	{
		case !Local.trustInfo_IsEmpty :
			XmlTag("trustInfo") trustInfoCloseTag;
	}
}

struct ADFWAPX509VerificationMethod
{
	[ Post.Local.verificationMethod_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("verificationMethod") verificationMethodOpenTag;
	
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "TrustedCertificates"):
			ADFWAPArrayOfCertInfo ArrayOfCertInfo;
	}
	ADFWAPRevocationFlags RevocationFlags;
	
	switch 
	{
		case !Local.verificationMethod_IsEmpty :
			XmlTag("verificationMethod") verificationMethodCloseTag;
	}
}

struct ADFWAPArrayOfCertInfo
{
	[ Post.Local.TrustedCertificates_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("TrustedCertificates") TrustedCertificatesOpenTag;
	
	while [contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "CertInfo")]
	{	
		ADFWAPCertInfo CertInfo;
	}
	
	switch 
	{
		case !Local.TrustedCertificates_IsEmpty :
			XmlTag("TrustedCertificates") TrustedCertificatesCloseTag;
	}
}

struct ADFWAPCertInfo
{
	[ Post.Local.CertInfo_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("CertInfo") CertInfoOpenTag;
		
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "X509Thumbprint"):
			struct
			{
				[ Post.Local.X509Thumbprint_IsEmpty = Property.IsXmlEmptyElement ]
				XmlTag("X509Thumbprint") X509ThumbprintOpenTag;
				
				switch 
				{
					case !Local.X509Thumbprint_IsEmpty :
						struct
						{
							StringTerm(Ascii, "<", true, false, false) X509Thumbprint;
							XmlTag("X509Thumbprint") X509ThumbprintCloseTag;
						}
				}
			}
	}
	
	switch 
	{
		case !Local.CertInfo_IsEmpty:
			XmlTag("CertInfo") CertInfoCloseTag;
	}
}

struct ADFWAPRevocationFlags
{
	[ Post.Local.RevocationCheckFlags_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("RevocationCheckFlags") RevocationCheckFlagsOpenTag;
		
	switch 
	{
		case !Local.RevocationCheckFlags_IsEmpty :
			struct
			{
				StringTerm(Ascii, "<", true, false, false) RevocationCheckFlags;
				XmlTag("RevocationCheckFlags") RevocationCheckFlagsCloseTag;
			}
	}
}

struct ADFWAPFederationCertificates
{
	[ Post.Local.certificates_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("certificates") certificatesOpenTag;
	
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "SerializedStore"):
			struct
			{
				[ Post.Local.SerializedStore_IsEmpty = Property.IsXmlEmptyElement ]
				XmlTag("SerializedStore") SerializedStoreOpenTag;
				
				switch 
				{
					case !Local.SerializedStore_IsEmpty :
						struct
						{
							StringTerm(Ascii, "<", true, false, false) SerializedStore;
							XmlTag("SerializedStore") SerializedStoreCloseTag;
						}
				}
			}
	}

	switch 
	{
		case !Local.certificates_IsEmpty :
			XmlTag("certificates") certificatesCloseTag;
	}
}

[Property.ADFWAPContent = "GetTrustedRealmUri request"]
struct ADFWAPfsGetTrustedRealmUriElement = "GetTrustedRealmUri request"
{
	[ Post.Local.GetTrustedRealmUri_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("GetTrustedRealmUri") GetTrustedRealmUriOpenTag;
	
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "email"):
			struct
			{
				[ Post.Local.email_IsEmpty = Property.IsXmlEmptyElement ]
				XmlTag("email") emailOpenTag;
				
				switch 
				{
					case !Local.email_IsEmpty :
						struct
						{
							StringTerm(Ascii, "<", true, false, false) email;
							XmlTag("email") emailCloseTag;
						}
				}
			}
	}
	
	switch 
	{
		case !Local.GetTrustedRealmUri_IsEmpty :
			XmlTag("GetTrustedRealmUri") GetTrustedRealmUriCloseTag;
	}
}

[Property.ADFWAPContent = "GetTrustedRealmUri response"]
struct ADFWAPfsGetTrustedRealmUriResponseElement = "GetTrustedRealmUri response"
{
	[ Post.Local.GetTrustedRealmUriResponse_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("GetTrustedRealmUriResponse") GetTrustedRealmUriResponseOpenTag;
	
	struct
	{
		[ Post.Local.GetTrustedRealmUriResult_IsEmpty = Property.IsXmlEmptyElement ]
		XmlTag("GetTrustedRealmUriResult") GetTrustedRealmUriResultOpenTag;
		
		switch 
		{
			case !Local.GetTrustedRealmUriResult_IsEmpty :
				struct
				{
					StringTerm(Ascii, "<", true, false, false) GetTrustedRealmUriResult;
					XmlTag("GetTrustedRealmUriResult") GetTrustedRealmUriResultCloseTag;
				}
		}
	}
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "trustedRealmUri"):
			struct
			{
				[ Post.Local.trustedRealmUri_IsEmpty = Property.IsXmlEmptyElement ]
				XmlTag("trustedRealmUri") trustedRealmUriOpenTag;
				
				switch 
				{
					case !Local.trustedRealmUri_IsEmpty :
						struct
						{
							StringTerm(Ascii, "<", true, false, false) trustedRealmUri;
							XmlTag("trustedRealmUri") trustedRealmUriCloseTag;
						}
				}
			}
	}
		
	switch 
	{
		case !Local.GetTrustedRealmUriResponse_IsEmpty :
			XmlTag("GetTrustedRealmUriResponse") GetTrustedRealmUriResponseCloseTag;
	}
}

[Property.ADFWAPContent = "GetClaims request"]
struct ADFWAPfsGetClaimsElement = "GetClaims request"
{
	[ Post.Local.GetClaims_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("GetClaims") GetClaimsOpenTag;
	
	ADFWAPClaimType ClaimType;
	
	switch 
	{
		case !Local.GetClaims_IsEmpty :
			XmlTag("GetClaims") GetClaimsCloseTag;
	}
}

struct ADFWAPClaimType
{
	[ Post.Local.ClaimType_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("ClaimType") ClaimTypeOpenTag;
	
	switch 
	{
		case !Local.ClaimType_IsEmpty :
			struct
			{
				StringTerm(Ascii, "<", true, false, false) ClaimType;
				XmlTag("ClaimType") ClaimTypeCloseTag;
			}
	}
}

[Property.ADFWAPContent = "GetClaims response"]
struct ADFWAPfsGetClaimsResponseElement = "GetClaims response"
{
	[ Post.Local.GetClaimsResponse_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("GetClaimsResponse") GetClaimsResponseOpenTag;
	
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "groupClaimCollection"):
			ADFWAPArrayOfGroupClaim ArrayOfGroupClaim;
	}
	
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "customClaimCollection"):
			ADFWAPArrayOfCustomClaim ArrayOfCustomClaim;
	}
	
	switch 
	{
		case !Local.GetClaimsResponse_IsEmpty :
			XmlTag("GetClaimsResponse") GetClaimsResponseCloseTag;
	}
}

struct ADFWAPArrayOfGroupClaim
{
	[ Post.Local.groupClaimCollection_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("groupClaimCollection") groupClaimCollectionOpenTag;
	
	while [contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GroupClaim") 
	&& !contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "groupClaimCollection")]
	{
		ADFWAPGroupClaim GroupClaim;
	}
		
	switch 
	{
		case !Local.groupClaimCollection_IsEmpty :
			XmlTag("groupClaimCollection") groupClaimCollectionCloseTag;
	}
}

struct ADFWAPGroupClaim
{
	[ Post.Local.GroupClaim_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("GroupClaim") GroupClaimOpenTag;
	
	switch 
	{
		case !Local.GroupClaim_IsEmpty :
			struct
			{
				StringTerm(Ascii, "<", true, false, false) GroupClaim;
				XmlTag("GroupClaim") GroupClaimCloseTag;
			}
	}
}

struct ADFWAPArrayOfCustomClaim
{
	[ Post.Local.customClaimCollection_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("customClaimCollection") customClaimCollectionOpenTag;
	
	while [contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "CustomClaim") 
	&& !contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "customClaimCollection")]
	{
		ADFWAPCustomClaim CustomClaim;
	}
		
	switch 
	{
		case !Local.customClaimCollection_IsEmpty :
			XmlTag("customClaimCollection") customClaimCollectionCloseTag;
	}
}

struct ADFWAPCustomClaim
{
	struct
	{
		[ Post.Local.CustomClaimName_IsEmpty = Property.IsXmlEmptyElement ]
		XmlTag("CustomClaimName") CustomClaimNameOpenTag;
		
		switch 
		{
			case !Local.CustomClaimName_IsEmpty :
				struct
				{
					StringTerm(Ascii, "<", true, false, false) CustomClaimName;
					XmlTag("CustomClaimName") CustomClaimNameCloseTag;
				}
		}
	}
}

Table ADFWAPSoapActionTable(value)
{
	Switch(value)
	{
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/GetFsTrustInformation": 
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/GetTrustedRealmUri": 
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/GetClaims": true;
		Default:false;
	}
}

