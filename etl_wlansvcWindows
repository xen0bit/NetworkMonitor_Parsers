//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-wlansvc
//#
//#  Details:                
//#
//#  Public References:      wlansvc.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWLANAutoConfig, "{9580d7dd-0379-4658-9870-d5be7d52d6de}")]
Protocol WLAN_MicrosoftWindowsWLANAutoConfig = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 60001: [property.ETLSummary = this.ToString] WLAN_NetError NetError;
		case 60002: [property.ETLSummary = this.ToString] WLAN_NetWarning NetWarning;
		case 60003: [property.ETLSummary = this.ToString] WLAN_StateTransition StateTransition;
		case 60004: [property.ETLSummary = this.ToString] WLAN_ContextUpdate ContextUpdate;
		case 60101: [property.ETLSummary = this.ToString] WLAN_V4Tuple V4Tuple;
		case 60102: [property.ETLSummary = this.ToString] WLAN_V6Tuple V6Tuple;
		case 60103: [property.ETLSummary = this.ToString] WLAN_InterfaceInfo InterfaceInfo;
		case 8000: [property.ETLSummary = this.ToString] WLAN_WlansvcConnectionStartEvtDesc WlansvcConnectionStartEvtDesc;
		case 8001: [property.ETLSummary = this.ToString] WLAN_WlansvcConnectionSucceedEvtDesc WlansvcConnectionSucceedEvtDesc;
		case 8002: [property.ETLSummary = this.ToString] WLAN_WlansvcConnectionFailEvtDesc WlansvcConnectionFailEvtDesc;
		case 8003: [property.ETLSummary = this.ToString] WLAN_WlansvcDisconnectedEvtDesc WlansvcDisconnectedEvtDesc;
		case 8004: [property.ETLSummary = this.ToString] WLAN_WlansvcConnectionBlockEvtDesc WlansvcConnectionBlockEvtDesc;
		case 8005: [property.ETLSummary = this.ToString] WLAN_WlansvcSoftAPStartBeginEvtDesc WlansvcSoftAPStartBeginEvtDesc;
		case 8006: [property.ETLSummary = this.ToString] WLAN_WlansvcSoftAPStartEndEvtDesc WlansvcSoftAPStartEndEvtDesc;
		case 8007: [property.ETLSummary = this.ToString] WLAN_WlansvcSoftAPStartFailedEvtDesc WlansvcSoftAPStartFailedEvtDesc;
		case 8008: [property.ETLSummary = this.ToString] WLAN_WlansvcSoftAPStopBeginEvtDesc WlansvcSoftAPStopBeginEvtDesc;
		case 8009: [property.ETLSummary = this.ToString] WLAN_WlansvcSoftAPStopEndEvtDesc WlansvcSoftAPStopEndEvtDesc;
		case 8010: [property.ETLSummary = this.ToString] WLAN_WlansvcSoftAPStopFailedEvtDesc WlansvcSoftAPStopFailedEvtDesc;
		case 4000: [property.ETLSummary = this.ToString] WLAN_WlansvcStartEvtDesc WlansvcStartEvtDesc;
		case 4001: [property.ETLSummary = this.ToString] WLAN_WlansvcStopEvtDesc WlansvcStopEvtDesc;
		case 4002: [property.ETLSummary = this.ToString] WLAN_WlansvcFailureEvtDesc WlansvcFailureEvtDesc;
		case 10000: [property.ETLSummary = this.ToString] WLAN_ExtHostStartFailureEvtDesc ExtHostStartFailureEvtDesc;
		case 10001: [property.ETLSummary = this.ToString] WLAN_ExtHostStartSuccessEvtDesc ExtHostStartSuccessEvtDesc;
		case 10002: [property.ETLSummary = this.ToString] WLAN_ExtHostStoppedEvtDesc ExtHostStoppedEvtDesc;
		case 10003: [property.ETLSummary = this.ToString] WLAN_ExtHostStoppedUnexpectedlyEvtDesc ExtHostStoppedUnexpectedlyEvtDesc;
		case 10004: [property.ETLSummary = this.ToString] WLAN_ExtHostTimedOutEvtDesc ExtHostTimedOutEvtDesc;
		case 11000: [property.ETLSummary = this.ToString] WLAN_MsmAssociationStartEvtDesc MsmAssociationStartEvtDesc;
		case 11001: [property.ETLSummary = this.ToString] WLAN_MsmAssociationSuccessEvtDesc MsmAssociationSuccessEvtDesc;
		case 11002: [property.ETLSummary = this.ToString] WLAN_MsmAssociationFailureEvtDesc MsmAssociationFailureEvtDesc;
		case 11003: [property.ETLSummary = this.ToString] WLAN_MsmSecurityStartEvtDesc MsmSecurityStartEvtDesc;
		case 11004: [property.ETLSummary = this.ToString] WLAN_MsmSecurityStopEvtDesc MsmSecurityStopEvtDesc;
		case 11005: [property.ETLSummary = this.ToString] WLAN_MsmSecuritySuccessEvtDesc MsmSecuritySuccessEvtDesc;
		case 11006: [property.ETLSummary = this.ToString] WLAN_MsmSecurityFailureEvtDesc MsmSecurityFailureEvtDesc;
		case 11007: [property.ETLSummary = this.ToString] WLAN_MsmIhvSecurityStartEvtDesc MsmIhvSecurityStartEvtDesc;
		case 11008: [property.ETLSummary = this.ToString] WLAN_MsmIhvSecuritySuccessEvtDesc MsmIhvSecuritySuccessEvtDesc;
		case 11009: [property.ETLSummary = this.ToString] WLAN_MsmIhvSecurityFailureEvtDesc MsmIhvSecurityFailureEvtDesc;
		case 11010: [property.ETLSummary = this.ToString] WLAN_MsmSecurityStartEvtDescSp1 MsmSecurityStartEvtDescSp1;
		case 12011: [property.ETLSummary = this.ToString] WLAN_WlansecOneXStartEvtDesc WlansecOneXStartEvtDesc;
		case 12012: [property.ETLSummary = this.ToString] WLAN_WlansecOneXSuccessEvtDesc WlansecOneXSuccessEvtDesc;
		case 12013: [property.ETLSummary = this.ToString] WLAN_WlansecOneXFailureEvtDesc WlansecOneXFailureEvtDesc;
		case 12014: [property.ETLSummary = this.ToString] WLAN_WlansecOneXRestartEvtDesc WlansecOneXRestartEvtDesc;
		case 13002: [property.ETLSummary = this.ToString] WLAN_WlansvcPrelogonBegin WlansvcPrelogonBegin;
		case 13001: [property.ETLSummary = this.ToString] WLAN_WlansvcPrelogonSkip WlansvcPrelogonSkip;
		case 13012: [property.ETLSummary = this.ToString] WLAN_WlansvcPostlogonBegin WlansvcPostlogonBegin;
		case 13013: [property.ETLSummary = this.ToString] WLAN_WlansvcPostlogonConnection WlansvcPostlogonConnection;
		case 13011: [property.ETLSummary = this.ToString] WLAN_WlansvcPostlogonSkip WlansvcPostlogonSkip;
		case 13014: [property.ETLSummary = this.ToString] WLAN_WlansvcPostlogonBeginSp1 WlansvcPostlogonBeginSp1;
		case 14000: [property.ETLSummary = this.ToString] WLAN_WlanSvcMediaNotificationReceived WlanSvcMediaNotificationReceived;
		case 14001: [property.ETLSummary = this.ToString] WLAN_WlanSvcPeerNotificationReceived WlanSvcPeerNotificationReceived;
		case 14002: [property.ETLSummary = this.ToString] WLAN_WlanSvcEnableAutoConfig WlanSvcEnableAutoConfig;
		case 14003: [property.ETLSummary = this.ToString] WLAN_WlanSvcSetStreamingMode WlanSvcSetStreamingMode;
		case 14004: [property.ETLSummary = this.ToString] WLAN_WlanSvcSetBSSType WlanSvcSetBSSType;
		case 14005: [property.ETLSummary = this.ToString] WLAN_WlanSvcSetRadioState WlanSvcSetRadioState;
		case 14006: [property.ETLSummary = this.ToString] WLAN_WlanSvcStartAutoConfig WlanSvcStartAutoConfig;
		case 14007: [property.ETLSummary = this.ToString] WLAN_WlanSvcStopAutoConfig WlanSvcStopAutoConfig;
		case 14008: [property.ETLSummary = this.ToString] WLAN_WlanSvcPowerSetting WlanSvcPowerSetting;
		case 14009: [property.ETLSummary = this.ToString] WLAN_WlanSvcChangeSession WlanSvcChangeSession;
		case 14010: [property.ETLSummary = this.ToString] WLAN_WlanSvcRadioOff WlanSvcRadioOff;
		case 14011: [property.ETLSummary = this.ToString] WLAN_WlanSvcChangeRadioState WlanSvcChangeRadioState;
		case 14012: [property.ETLSummary = this.ToString] WLAN_WlanSvcProfileUpdateIgnored WlanSvcProfileUpdateIgnored;
		case 14013: [property.ETLSummary = this.ToString] WLAN_WlanSvcProfileUpdated WlanSvcProfileUpdated;
		case 14014: [property.ETLSummary = this.ToString] WLAN_WlanSvcInvalidConnectionReset WlanSvcInvalidConnectionReset;
		case 14015: [property.ETLSummary = this.ToString] WLAN_WlanSvcSetOpMode WlanSvcSetOpMode;
		case 14016: [property.ETLSummary = this.ToString] WLAN_WlanSvcConnectionRequest WlanSvcConnectionRequest;
		case 14017: [property.ETLSummary = this.ToString] WLAN_WlanSvcConnectionCancelled WlanSvcConnectionCancelled;
		case 14018: [property.ETLSummary = this.ToString] WLAN_WlanSvcConnectionFailed WlanSvcConnectionFailed;
		case 14019: [property.ETLSummary = this.ToString] WLAN_WlanSvcStopConnectionAttempts WlanSvcStopConnectionAttempts;
		case 14020: [property.ETLSummary = this.ToString] WLAN_WlanSvcConnectionSucceeded WlanSvcConnectionSucceeded;
		case 14021: [property.ETLSummary = this.ToString] WLAN_WlanSvcConnectionComplete WlanSvcConnectionComplete;
		case 14022: [property.ETLSummary = this.ToString] WLAN_WlanSvcDisconnectRequest WlanSvcDisconnectRequest;
		case 14023: [property.ETLSummary = this.ToString] WLAN_WlanSvcSetManualProfile WlanSvcSetManualProfile;
		case 14024: [property.ETLSummary = this.ToString] WLAN_WlanSvcDisconnecting WlanSvcDisconnecting;
		case 14025: [property.ETLSummary = this.ToString] WLAN_WlanSvcSetInterfaceState WlanSvcSetInterfaceState;
		case 14026: [property.ETLSummary = this.ToString] WLAN_WlanSvcUIRequestResult WlanSvcUIRequestResult;
		case 14027: [property.ETLSummary = this.ToString] WLAN_WlanSvcProfileUpdateStatus WlanSvcProfileUpdateStatus;
		case 14028: [property.ETLSummary = this.ToString] WLAN_WlanSvcProfileNameChange WlanSvcProfileNameChange;
		case 14029: [property.ETLSummary = this.ToString] WLAN_WlanSvcInterfaceInitialized WlanSvcInterfaceInitialized;
		case 14030: [property.ETLSummary = this.ToString] WLAN_WlanSvcCurrentOpMode WlanSvcCurrentOpMode;
		case 14031: [property.ETLSummary = this.ToString] WLAN_WlanSvcInterfaceType WlanSvcInterfaceType;
		case 14032: [property.ETLSummary = this.ToString] WLAN_WlanSvcInterfaceQueryFail WlanSvcInterfaceQueryFail;
		case 14033: [property.ETLSummary = this.ToString] WLAN_WlanSvcInterfaceQueryRetry WlanSvcInterfaceQueryRetry;
		case 14034: [property.ETLSummary = this.ToString] WLAN_WlanSvcInterfaceName WlanSvcInterfaceName;
		case 14035: [property.ETLSummary = this.ToString] WLAN_WlanSvcNetworkNotPermitted WlanSvcNetworkNotPermitted;
		case 14036: [property.ETLSummary = this.ToString] WLAN_WlanSvcChangePowerSetting WlanSvcChangePowerSetting;
		case 14037: [property.ETLSummary = this.ToString] WLAN_WlanSvcDisconnectTemporaryConnection WlanSvcDisconnectTemporaryConnection;
		case 14038: [property.ETLSummary = this.ToString] WLAN_WlanSvcClearRuntimeState WlanSvcClearRuntimeState;
		case 14039: [property.ETLSummary = this.ToString] WLAN_WlanSvcSessionChange WlanSvcSessionChange;
		case 14040: [property.ETLSummary = this.ToString] WLAN_WlanSvcScanInitiated WlanSvcScanInitiated;
		case 14041: [property.ETLSummary = this.ToString] WLAN_WlanSvcScanRequestIgnored WlanSvcScanRequestIgnored;
		case 14042: [property.ETLSummary = this.ToString] WLAN_WlanSvcScanResultsUnqueried WlanSvcScanResultsUnqueried;
		case 14043: [property.ETLSummary = this.ToString] WLAN_WlanSvcScanStopped WlanSvcScanStopped;
		case 14044: [property.ETLSummary = this.ToString] WLAN_WlanSvcNoAutoSwitch WlanSvcNoAutoSwitch;
		case 14045: [property.ETLSummary = this.ToString] WLAN_WlanSvcConnectSSID WlanSvcConnectSSID;
		case 14046: [property.ETLSummary = this.ToString] WLAN_WlanSvcSessionAdded WlanSvcSessionAdded;
		case 14047: [property.ETLSummary = this.ToString] WLAN_WlanSvcSessionRefreshed WlanSvcSessionRefreshed;
		case 14048: [property.ETLSummary = this.ToString] WLAN_WlanSvcServiceConsoleState WlanSvcServiceConsoleState;
		case 14049: [property.ETLSummary = this.ToString] WLAN_WlanSvcSessionRemoved WlanSvcSessionRemoved;
		case 14050: [property.ETLSummary = this.ToString] WLAN_WlanSvcUIRequestHandledByDiscovery WlanSvcUIRequestHandledByDiscovery;
		case 14051: [property.ETLSummary = this.ToString] WLAN_WlanSvcUIRequestNotSent WlanSvcUIRequestNotSent;
		case 14052: [property.ETLSummary = this.ToString] WLAN_WlanSvcUIRequestTimelyFailure WlanSvcUIRequestTimelyFailure;
		case 14053: [property.ETLSummary = this.ToString] WLAN_WlanSvcNetworkSuppressedStatus WlanSvcNetworkSuppressedStatus;
		case 14054: [property.ETLSummary = this.ToString] WLAN_WlanSvcEnableBackgroundScan WlanSvcEnableBackgroundScan;
		case 14055: [property.ETLSummary = this.ToString] WLAN_WlanSvcDiscardBackgroundScan WlanSvcDiscardBackgroundScan;
		case 14056: [property.ETLSummary = this.ToString] WLAN_WlanSvcDiscardBackgroundScan2 WlanSvcDiscardBackgroundScan2;
		case 14057: [property.ETLSummary = this.ToString] WLAN_WlanSvcDiscardBackgroundScan3 WlanSvcDiscardBackgroundScan3;
		case 14058: [property.ETLSummary = this.ToString] WLAN_WlanSvcConnectionActivityContext WlanSvcConnectionActivityContext;
		case 20000: [property.ETLSummary = this.ToString] WLAN_MSMBeginConnect MSMBeginConnect;
		case 20001: [property.ETLSummary = this.ToString] WLAN_MSMBeginDisconnect MSMBeginDisconnect;
		case 20002: [property.ETLSummary = this.ToString] WLAN_MSMCallPreAssociateSecurity MSMCallPreAssociateSecurity;
		case 20003: [property.ETLSummary = this.ToString] WLAN_MSMCallStopSecurity MSMCallStopSecurity;
		case 20004: [property.ETLSummary = this.ToString] WLAN_MSMConnectComplete MSMConnectComplete;
		case 20005: [property.ETLSummary = this.ToString] WLAN_MSMConnectCompletePacketReceived MSMConnectCompletePacketReceived;
		case 20006: [property.ETLSummary = this.ToString] WLAN_MSMFSMTraceEvent MSMFSMTraceEvent;
		case 20007: [property.ETLSummary = this.ToString] WLAN_MSMFSMStateTransition MSMFSMStateTransition;
		case 20008: [property.ETLSummary = this.ToString] WLAN_MSMIncompatiblePHY MSMIncompatiblePHY;
		case 20009: [property.ETLSummary = this.ToString] WLAN_MSMLinkQualityUpdateReceived MSMLinkQualityUpdateReceived;
		case 20010: [property.ETLSummary = this.ToString] WLAN_MSMPortDownNotification MSMPortDownNotification;
		case 20011: [property.ETLSummary = this.ToString] WLAN_MSMPortUpNotification MSMPortUpNotification;
		case 20012: [property.ETLSummary = this.ToString] WLAN_MSMPostConnectSecurityComplete MSMPostConnectSecurityComplete;
		case 20013: [property.ETLSummary = this.ToString] WLAN_MSMPostConnectSecurityFailed MSMPostConnectSecurityFailed;
		case 20014: [property.ETLSummary = this.ToString] WLAN_MSMSecurityPacketReceived MSMSecurityPacketReceived;
		case 20015: [property.ETLSummary = this.ToString] WLAN_MSMSecurityPreconnectComplete MSMSecurityPreconnectComplete;
		case 20016: [property.ETLSummary = this.ToString] WLAN_MSMSendMSMSecurityPacket MSMSendMSMSecurityPacket;
		case 20017: [property.ETLSummary = this.ToString] WLAN_MSMSendOneXSecurityPacket MSMSendOneXSecurityPacket;
		case 20018: [property.ETLSummary = this.ToString] WLAN_MSMSetConnectSetting MSMSetConnectSetting;
		case 20019: [property.ETLSummary = this.ToString] WLAN_MSAMReceivePortUp MSAMReceivePortUp;
		case 20020: [property.ETLSummary = this.ToString] WLAN_MSAMPostSecuritySuccess MSAMPostSecuritySuccess;
		case 20021: [property.ETLSummary = this.ToString] WLAN_MSAMPostSecurityFailure MSAMPostSecurityFailure;
		case 21001: [property.ETLSummary = this.ToString] WLAN_MsmSecSecMgrNewAdapter MsmSecSecMgrNewAdapter;
		case 21002: [property.ETLSummary = this.ToString] WLAN_MsmSecSecMgrIntfStateChange MsmSecSecMgrIntfStateChange;
		case 21003: [property.ETLSummary = this.ToString] WLAN_MsmSecSecMgrStopSecurity MsmSecSecMgrStopSecurity;
		case 21004: [property.ETLSummary = this.ToString] WLAN_MsmSecSecMgrInvalidUIResponse MsmSecSecMgrInvalidUIResponse;
		case 21005: [property.ETLSummary = this.ToString] WLAN_MsmSecSecMgrAlreadyHaveKey MsmSecSecMgrAlreadyHaveKey;
		case 21006: [property.ETLSummary = this.ToString] WLAN_MsmSecSecMgrReceivedUIResponse MsmSecSecMgrReceivedUIResponse;
		case 21007: [property.ETLSummary = this.ToString] WLAN_MsmSecAuthTimeout MsmSecAuthTimeout;
		case 21008: [property.ETLSummary = this.ToString] WLAN_MsmSecAuthNotTimeout MsmSecAuthNotTimeout;
		case 21009: [property.ETLSummary = this.ToString] WLAN_MsmSecFastRoamVeto MsmSecFastRoamVeto;
		case 21010: [property.ETLSummary = this.ToString] WLAN_MsmSecAuthMgrStateChange MsmSecAuthMgrStateChange;
		case 21011: [property.ETLSummary = this.ToString] WLAN_MsmSecSendUIResponse MsmSecSendUIResponse;
		case 21012: [property.ETLSummary = this.ToString] WLAN_MsmSecKeyExtStateChange MsmSecKeyExtStateChange;
		case 21013: [property.ETLSummary = this.ToString] WLAN_MsmSecKeyExtOneXFailure MsmSecKeyExtOneXFailure;
		case 21014: [property.ETLSummary = this.ToString] WLAN_MsmSecKeyExtOneXSuccess MsmSecKeyExtOneXSuccess;
		case 21015: [property.ETLSummary = this.ToString] WLAN_MsmSecKeyMgrStateChange MsmSecKeyMgrStateChange;
		case 21016: [property.ETLSummary = this.ToString] WLAN_MsmSecAuthSendM1 MsmSecAuthSendM1;
		case 21017: [property.ETLSummary = this.ToString] WLAN_MsmSecAuthSendM3 MsmSecAuthSendM3;
		case 21018: [property.ETLSummary = this.ToString] WLAN_MsmSecAuthSendG1 MsmSecAuthSendG1;
		case 21019: [property.ETLSummary = this.ToString] WLAN_MsmSecKeyMgrAuthStateChange MsmSecKeyMgrAuthStateChange;
		case 21020: [property.ETLSummary = this.ToString] WLAN_MsmSecConnectionSecuredOffloaded MsmSecConnectionSecuredOffloaded;
		case 21021: [property.ETLSummary = this.ToString] WLAN_MsmSecKeyExchangeStatusChange MsmSecKeyExchangeStatusChange;
		case 21022: [property.ETLSummary = this.ToString] WLAN_MsmSecDefaultKeySet MsmSecDefaultKeySet;
		case 21023: [property.ETLSummary = this.ToString] WLAN_MsmSecPairwiseKeySet MsmSecPairwiseKeySet;
		case 21024: [property.ETLSummary = this.ToString] WLAN_MsmSecConnectCompletion MsmSecConnectCompletion;
		case 21025: [property.ETLSummary = this.ToString] WLAN_MsmSecIndicateSecurityResult MsmSecIndicateSecurityResult;
		case 21026: [property.ETLSummary = this.ToString] WLAN_MsmSecTxPacket MsmSecTxPacket;
		case 21027: [property.ETLSummary = this.ToString] WLAN_MsmSecSendUIRequest MsmSecSendUIRequest;
		case 21028: [property.ETLSummary = this.ToString] WLAN_MsmSecConnectNotification MsmSecConnectNotification;
		case 21029: [property.ETLSummary = this.ToString] WLAN_MsmSecDisconnectNotification MsmSecDisconnectNotification;
		case 21030: [property.ETLSummary = this.ToString] WLAN_MsmSecPortUp MsmSecPortUp;
		case 21031: [property.ETLSummary = this.ToString] WLAN_MsmSecPortDown MsmSecPortDown;
		case 21032: [property.ETLSummary = this.ToString] WLAN_MsmSecRxPacket MsmSecRxPacket;
		case 21033: [property.ETLSummary = this.ToString] WLAN_MsmSecUIResponse MsmSecUIResponse;
		case 21034: [property.ETLSummary = this.ToString] WLAN_MsmSecCreateDiscoveryProfiles MsmSecCreateDiscoveryProfiles;
		case 21035: [property.ETLSummary = this.ToString] WLAN_MsmSecTxComplete MsmSecTxComplete;
		case 21036: [property.ETLSummary = this.ToString] WLAN_MsmSecRedoSecurity MsmSecRedoSecurity;
		case 21037: [property.ETLSummary = this.ToString] WLAN_MsmSecConnectionHealth MsmSecConnectionHealth;
		case 21038: [property.ETLSummary = this.ToString] WLAN_MsmSecTransitionNetworkSuspected MsmSecTransitionNetworkSuspected;
		case 21039: [property.ETLSummary = this.ToString] WLAN_MsmSecUIResponseValid MsmSecUIResponseValid;
		case 21040: [property.ETLSummary = this.ToString] WLAN_MsmSecSendPacketFailed MsmSecSendPacketFailed;
		case 21041: [property.ETLSummary = this.ToString] WLAN_MsmSecPMKCacheInvalid MsmSecPMKCacheInvalid;
		case 21042: [property.ETLSummary = this.ToString] WLAN_MsmSecPreAuthMgrStateChange MsmSecPreAuthMgrStateChange;
		case 21043: [property.ETLSummary = this.ToString] WLAN_MsmSecPreAuthSuccess MsmSecPreAuthSuccess;
		case 21044: [property.ETLSummary = this.ToString] WLAN_MsmSecPreAuthOneXFailure MsmSecPreAuthOneXFailure;
		case 21045: [property.ETLSummary = this.ToString] WLAN_MsmSecPreAuthOneXSuccess MsmSecPreAuthOneXSuccess;
		case 21046: [property.ETLSummary = this.ToString] WLAN_MsmSecEAPOLKeyContainsUnicastKey MsmSecEAPOLKeyContainsUnicastKey;
		case 21047: [property.ETLSummary = this.ToString] WLAN_MsmSecConnectionSecuredRC4 MsmSecConnectionSecuredRC4;
		case 21048: [property.ETLSummary = this.ToString] WLAN_MsmSecConnectionSecuredRSN MsmSecConnectionSecuredRSN;
		case 21049: [property.ETLSummary = this.ToString] WLAN_MsmSecRSNMessageM1 MsmSecRSNMessageM1;
		case 21050: [property.ETLSummary = this.ToString] WLAN_MsmSecRSNMessageM3 MsmSecRSNMessageM3;
		case 21051: [property.ETLSummary = this.ToString] WLAN_MsmSecRSNMessageM2 MsmSecRSNMessageM2;
		case 21052: [property.ETLSummary = this.ToString] WLAN_MsmSecRSNMessageM4 MsmSecRSNMessageM4;
		case 21053: [property.ETLSummary = this.ToString] WLAN_MsmSecRSNMessageG1 MsmSecRSNMessageG1;
		case 21054: [property.ETLSummary = this.ToString] WLAN_MsmSecRSNMessageG2 MsmSecRSNMessageG2;
		case 21055: [property.ETLSummary = this.ToString] WLAN_MsmSecFastRoamEnabled MsmSecFastRoamEnabled;
		case 21056: [property.ETLSummary = this.ToString] WLAN_MsmSecUnknownFailureTransition MsmSecUnknownFailureTransition;
		case 21057: [property.ETLSummary = this.ToString] WLAN_MsmSecSecMgrStateChange MsmSecSecMgrStateChange;
		case 21058: [property.ETLSummary = this.ToString] WLAN_MsmSecConnectionSecuredWPA MsmSecConnectionSecuredWPA;
		case 21059: [property.ETLSummary = this.ToString] WLAN_MsmSecWPAMessageM1 MsmSecWPAMessageM1;
		case 21060: [property.ETLSummary = this.ToString] WLAN_MsmSecWPAMessageM3 MsmSecWPAMessageM3;
		case 21061: [property.ETLSummary = this.ToString] WLAN_MsmSecWPAMessageG1 MsmSecWPAMessageG1;
		case 21062: [property.ETLSummary = this.ToString] WLAN_MsmSecEAPOLPacketCacheOverflow MsmSecEAPOLPacketCacheOverflow;
		case 21063: [property.ETLSummary = this.ToString] WLAN_MsmSecPMKCacheOverflow MsmSecPMKCacheOverflow;
		case 21064: [property.ETLSummary = this.ToString] WLAN_MsmSecProfile MsmSecProfile;
		case 21065: [property.ETLSummary = this.ToString] WLAN_MsmSecEAPOLKeyContainsMulticastKey MsmSecEAPOLKeyContainsMulticastKey;
		case 21066: [property.ETLSummary = this.ToString] WLAN_MsmSecDefaultKeyId MsmSecDefaultKeyId;
		case 30000: [property.ETLSummary = this.ToString] WLAN_PerftrackACMConnect1 PerftrackACMConnect1;
		case 30001: [property.ETLSummary = this.ToString] WLAN_PerftrackACMConnectTimeout1 PerftrackACMConnectTimeout1;
		case 30002: [property.ETLSummary = this.ToString] WLAN_PerftrackACMConnectSuccess PerftrackACMConnectSuccess;
		case 30003: [property.ETLSummary = this.ToString] WLAN_PerftrackACMConnect2 PerftrackACMConnect2;
		case 30004: [property.ETLSummary = this.ToString] WLAN_PerftrackACMConnectTimeout2 PerftrackACMConnectTimeout2;
		case 30005: [property.ETLSummary = this.ToString] WLAN_PerftrackACMConnect3 PerftrackACMConnect3;
		case 30006: [property.ETLSummary = this.ToString] WLAN_PerftrackACMConnectTimeout3 PerftrackACMConnectTimeout3;
		case 30007: [property.ETLSummary = this.ToString] WLAN_PerftrackACMManualConnect1 PerftrackACMManualConnect1;
		case 30008: [property.ETLSummary = this.ToString] WLAN_PerftrackACMManualConnect2 PerftrackACMManualConnect2;
		case 30009: [property.ETLSummary = this.ToString] WLAN_PerftrackACMManualConnect3 PerftrackACMManualConnect3;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table WLAN_tid_WlansvcPrelogonResult(value)
{
	switch(value)
	{
		case 0: "Success";
		case 1: "Failure";
		case 2: "The operational criteria were not met.";
		case 3: "The operational criteria were met.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_tid_WlansvcPrelogonSkipReason(value)
{
	switch(value)
	{
		case 1: "The machine was not joined to a domain.";
		case 2: "There are no pre-logon networks within visible range.";
		case 3: "The pre-logon profile is marked for manual connection only.";
		case 4: "The pre-logon profile does not use user credentials for authentication.";
		case 5: "The configured EAP Method does not support  single sign on operations.";
		case 6: "The configured EAP method has identified the profile as incapable of pre-logon.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_tid_WlansvcPostlogonResult(value)
{
	switch(value)
	{
		case 0: "Success";
		case 1: "Failure";
		case 2: "The operational criteria were not met.";
		case 3: "The operational criteria were met.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_tid_WlansvcPostlogonReason(value)
{
	switch(value)
	{
		case 0: "Success.";
		case 1: "Failed to establish a network connection within the allotted time.";
		case 2: "Failed to establish a network connection.";
		case 3: "Failed to contact a domain controller within the allotted time.";
		case 4: "Failed to contact a domain controller and obtain a TCP/IP address within the allotted time.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_tid_WlansvcPostlogonSkipReason(value)
{
	switch(value)
	{
		case 1: "The machine was not joined to a domain.";
		case 2: "There are no post-logon networks within visible range.";
		case 3: "The post-logon profile is marked for manual connection only.";
		case 4: "The post-logon profile does not use user credentials for authentication.";
		case 5: "The configured EAP Method does not support  single sign on operations.";
		case 6: "The configured EAP method has identified the profile as incapable of post-logon.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_tid_BoolValues(value)
{
	switch(value)
	{
		case 0: "No";
		case 1: "Yes";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_tid_WlansvcPrelogonSkipSp1Reason(value)
{
	switch(value)
	{
		case 1: "The machine was not joined to a domain.";
		case 2: "There are no pre-logon networks within visible range.";
		case 3: "The configured EAP Method does not support  single sign on operations.";
		case 4: "The configured EAP method has identified the profile as incapable of pre-logon.";
		case 5: "An unspecified EAP error has occurred.";
		case 6: "Smart card Reader not present";
		case 7: "No Smard card present";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_tid_EnabledValues(value)
{
	switch(value)
	{
		case 0: "Disabled";
		case 1: "Enabled";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_BSSTypeMap(value)
{
	switch(value)
	{
		case 1: "infrastructure";
		case 2: "independent";
		case 3: "any";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_RadioStateMap(value)
{
	switch(value)
	{
		case 0: "unknown";
		case 1: "on";
		case 2: "off";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_PowerSettingMap(value)
{
	switch(value)
	{
		case 0: "no_saving";
		case 1: "low_saving";
		case 2: "medium_saving";
		case 3: "maximum_saving";
		case 4: "invalid";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_ConnectionResetReasonMap(value)
{
	switch(value)
	{
		case 0: "GP-only is enforced on the current connection";
		case 1: "The auto connection flag is cleared for the current connection";
		case 2: "The connection setting of the current profile has changed";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_Dot11OpModeMap(value)
{
	switch(value)
	{
		case 0x00000000: "Unknown";
		case 0x00000001: "Station";
		case 0x00000002: "AP";
		case 0x00000004: "Extensible Station";
		case 0x80000000: "Network Monitor";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_WLANConnectionModeMap(value)
{
	switch(value)
	{
		case 0: "profile";
		case 1: "temporary profile";
		case 2: "discovery (secure)";
		case 3: "discovery (unsecure)";
		case 4: "auto";
		case 5: "invalid";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_WLANInterfaceStateMap(value)
{
	switch(value)
	{
		case 0: "not ready";
		case 1: "connected";
		case 2: "ad hoc network formed";
		case 3: "disconnecting";
		case 4: "disconnected";
		case 5: "associating";
		case 6: "discovering";
		case 7: "authenticating";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_HealthCheckResultMap(value)
{
	switch(value)
	{
		case 0: "is updated";
		case 1: "will be updated after health check";
		case 2: "not updated because the connection is not healthy";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_DisconnectTemporaryReasonMap(value)
{
	switch(value)
	{
		case 0: "The active console session who initiated the connection becomes non active console session.";
		case 1: "The user who initiated the connection logged off";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_AuthUpcallTypeMap(value)
{
	switch(value)
	{
		case 0: "PORT_UP";
		case 1: "PORT_DOWN";
		case 2: "PACKET";
		case 3: "DISCONNECT";
		case 4: "IHV";
		case 5: "TKIPMIC_FAILURE";
		case 6: "PMKID_CANDIDATE_LIST";
		case 7: "PHY_STATE_CHANGE";
		case 8: "LINK_QUALITY";
		case 9: "CONNECT_COMPLETION";
		case 20: "4_WAY_START";
		case 11: "4_WAY_COMPLETION";
		case 12: "PSK_MISMATCH";
		case 13: "PHY_FREQUENCY_ADOPTED";
		case 14: "EXTAP_PORT_UP";
		case 15: "EXTAP_PORT_DOWN";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_MSMFSMStateMap(value)
{
	switch(value)
	{
		case 0: "Disconnected";
		case 1: "Configuring";
		case 2: "Associating";
		case 3: "Wait_For_Portup";
		case 4: "Authenticating";
		case 5: "Roaming";
		case 6: "Connected";
		case 7: "Wait_For_Disconnected";
		case 8: "Ihv_Configuring";
		case 9: "Reset";
		case 20: "AP_Disconnected";
		case 11: "AP_Reset_For_Connect";
		case 12: "AP_Configuring";
		case 13: "AP_Started";
		case 14: "AP_Stopping";
		case 15: "AP_Reset_For_Disconnect";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_MSMFSMEventMap(value)
{
	switch(value)
	{
		case 0: "Cmd_Connect";
		case 1: "Cmd_Disconnect";
		case 2: "Upcall_Association_Success";
		case 3: "Upcall_Association_Failure";
		case 4: "Upcall_Port_Up";
		case 5: "IHV_Port_Up";
		case 6: "Upcall_Port_Down";
		case 7: "IHV_Port_Down";
		case 8: "Upcall_Disconnect";
		case 9: "IHV_Disconnect";
		case 10: "Pre_Security_Success";
		case 11: "IHV_Pre_Security_Success";
		case 12: "Pre_Security_Failure";
		case 13: "IHV_Pre_Security_Failure";
		case 14: "Post_Security_Success";
		case 15: "IHV_Post_Security_Success";
		case 16: "Post_Security_Failure";
		case 17: "IHV_Post_Security_Failure";
		case 18: "Timeout";
		case 19: "Force_Disconnect";
		case 20: "Reset_Success";
		case 21: "Reset_Failure";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_IntfSecStateMap(value)
{
	switch(value)
	{
		case 1: "INITIALIZED";
		case 2: "PROCESSING_PREASSOCIATE";
		case 3: "PREASSOCIATE_DONE";
		case 4: "STOPPING_SECURITY";
		case 5: "PROCESSING_POSTASSOCIATE";
		case 6: "PROCESSING_STOP_POSTASSOCIATE";
		case 7: "WAIT_FOR_UI_RESPONSE";
		case 8: "FAILURE";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_Dot11AuthAlgorithmMap(value)
{
	switch(value)
	{
		case 1: "Open";
		case 2: "Shared Key";
		case 3: "WPA";
		case 4: "WPA PSK";
		case 5: "WPA None";
		case 6: "RSNA";
		case 7: "RSNA PSK";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_Dot11CipherAlgorithmMap(value)
{
	switch(value)
	{
		case 0x00: "NONE";
		case 0x01: "WEP40";
		case 0x02: "TKIP";
		case 0x04: "CCMP";
		case 0x05: "WEP104";
		case 0x100: "USE_GROUP";
		case 0x101: "WEP";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_UIResponseTypeMap(value)
{
	switch(value)
	{
		case 0: "key";
		case 1: "passphrase";
		case 2: "psk";
		case 3: "onex";
		case 4: "any";
		case 5: "invalid";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_UIRequestTypeMap(value)
{
	switch(value)
	{
		case 0: "autoconfig";
		case 1: "msm";
		case 2: "security";
		case 3: "ihv";
		case 4: "verifynet";
		case 5: "cancelled";
		case 6: "invalid";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_AuthMgrStateMap(value)
{
	switch(value)
	{
		case 1: "DISABLED";
		case 2: "FAKE_AUTH";
		case 3: "ENABLED";
		case 4: "DEACTIVATE";
		case 5: "FORCE_AUTHENTICATED";
		case 6: "START_AUTH";
		case 7: "AUTHENTICATING";
		case 8: "AUTHENTICATIONSUCCESS";
		case 9: "AUTHENTICATED";
		case 10: "AUTH_FAILED";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_KeyExtStateMap(value)
{
	switch(value)
	{
		case 1: "ENABLED";
		case 2: "STOP_AUTH";
		case 3: "START_AUTH";
		case 4: "AUTHENTICATING";
		case 5: "AUTHENTICATED";
		case 6: "AUTH_FAILED";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_KeyExchangeStateMap(value)
{
	switch(value)
	{
		case 0: "INACTIVE";
		case 1: "UNDERWAY";
		case 2: "SUCCESS";
		case 3: "FAILURE";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_KeyMgrAuthStateMap(value)
{
	switch(value)
	{
		case 1: "INACTIVE";
		case 2: "PHS1";
		case 3: "PHS2";
		case 4: "SUCCESS";
		case 5: "GHS";
		case 6: "FAILURE";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_Dot11DirectionMap(value)
{
	switch(value)
	{
		case 1: "Inbound";
		case 2: "Outbound";
		case 3: "Both";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_PreAuthMgrStateMap(value)
{
	switch(value)
	{
		case 1: "DISABLED";
		case 2: "INITIALIZE_PROFILE";
		case 3: "ENABLED";
		case 4: "ACTIVATED";
		case 5: "PREAUTH_STARTED";
		case 6: "PREAUTH_IN_PROGRESS";
		case 7: "PROCESS_ONEX_RESULT";
		case 8: "PROCESS_TIMEOUT";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_PortSecStateMap(value)
{
	switch(value)
	{
		case 1: "INACTIVE";
		case 2: "ACTIVE";
		case 3: "START_AUTH";
		case 4: "WAIT_FOR_AUTH_SUCCESS";
		case 5: "REVIVE_CACHE";
		case 6: "KEY_ACTIVATE";
		case 7: "WAIT_FOR_KEY_SUCCESS";
		case 8: "SUCCESS";
		case 9: "FAILURE";
		case 10: "KEY_DEACTIVATE";
		case 11: "DEACTIVATE";
		case 12: "FORCE_AUTHENTICATED";
		case 13: "WAIT_FOR_KEY_START";
		case 14: "ROAM_AUTHENTICATE";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WLAN_utOpcodeMap(value)
{
	switch(value)
	{
		case 180: "Start State";
		case 181: "End State";
		case 182: "Closed State";
		case 183: "Open State";
		case 184: "Connect State";
		case 185: "Listen State";
		case 186: "Association State";
		case 187: "Authentication State";
		case 188: "Established State";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct WLAN_NetError = FormatString("Error: %s Location: %s Context: %s", ErrorCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct WLAN_NetWarning = FormatString("Warning: %s Location: %s Context: %s", WarningCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode WarningCode;
	UINT32 Location;
	UINT32 Context;
}
Struct WLAN_StateTransition = FormatString("Transitioned to State: %s Context: %s", NextState.ToString, Context.ToString)
{
	UINT8 NextState = WLAN_utOpcodeMap(this);
	UINT32 Context;
}
Struct WLAN_ContextUpdate = FormatString("Updated Context: %s Update Reason: %s", Context.ToString, UpdateReasonCode.ToString)
{
	UINT32 Context;
	UINT32 UpdateReasonCode;
}
Struct WLAN_V4Tuple = FormatString("SourceAddress: %s SourcePort: %s DestinationAddress: %s DestinationPort: %s Protocol: %s ReferenceContext: %s", SourceAddress.ToString, SourcePort.ToString, DestinationAddress.ToString, DestinationPort.ToString, Protocol.ToString, ReferenceContext.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address SourceAddress;
	UINT32 SourcePort;
	[DataFieldByteOrder = BigEndian]IPv4Address DestinationAddress;
	UINT32 DestinationPort;
	UINT32 Protocol;
	UINT32 ReferenceContext;
}
Struct WLAN_V6Tuple = FormatString("SourceAddress: %s SourcePort: %s DestinationAddress: %s DestinationPort: %s Protocol: %s ReferenceContext: %s", SourceAddress.ToString, SourcePort.ToString, DestinationAddress.ToString, DestinationPort.ToString, Protocol.ToString, ReferenceContext.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv6Address SourceAddress;
	UINT32 SourcePort;
	[DataFieldByteOrder = BigEndian]IPv6Address DestinationAddress;
	UINT32 DestinationPort;
	UINT32 Protocol;
	UINT32 ReferenceContext;
}
Struct WLAN_InterfaceInfo = FormatString("Interface Guid: %s IfIndex: %s Interface Luid: %s ReferenceContext: %s", IfGuid.ToString, IfIndex.ToString, IfLuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct WLAN_WlansvcConnectionStartEvtDesc = FormatString("WLAN AutoConfig service started a connection to a wireless network.  Network Adapter: %s Interface GUID: %s Connection Mode: %s Profile Name: %s SSID: %s BSS Type: %s ", InterfaceDescription.ToString, InterfaceGuid.ToString, ConnectionMode.ToString, ProfileName.ToString, SSID.ToString, BSSType.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString ConnectionMode;
	UnicodeString ProfileName;
	UnicodeString SSID;
	UnicodeString BSSType;
	EtlPtr ConnectionId;
}
Struct WLAN_WlansvcConnectionSucceedEvtDesc = FormatString("WLAN AutoConfig service has successfully connected to a wireless network.  Network Adapter: %s Interface GUID: %s Connection Mode: %s Profile Name: %s SSID: %s BSS Type: %s BSSID: %s PHY Type: %s Authentication: %s Encryption: %s 802.1x Enabled: %s ", InterfaceDescription.ToString, InterfaceGuid.ToString, ConnectionMode.ToString, ProfileName.ToString, SSID.ToString, BSSType.ToString, BSSID.ToString, PHYType.ToString, AuthenticationAlgorithm.ToString, CipherAlgorithm.ToString, OnexEnabled.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString ConnectionMode;
	UnicodeString ProfileName;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString BSSID;
	UnicodeString PHYType;
	UnicodeString AuthenticationAlgorithm;
	UnicodeString CipherAlgorithm;
	UINT32 OnexEnabled = WLAN_tid_BoolValues(this);
	EtlPtr ConnectionId;
}
Struct WLAN_WlansvcConnectionFailEvtDesc = FormatString("WLAN AutoConfig service failed to connect to a wireless network.  Network Adapter: %s Interface GUID: %s Connection Mode: %s Profile Name: %s SSID: %s BSS Type: %s Failure Reason:%s ", InterfaceDescription.ToString, InterfaceGuid.ToString, ConnectionMode.ToString, ProfileName.ToString, SSID.ToString, BSSType.ToString, FailureReason.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString ConnectionMode;
	UnicodeString ProfileName;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString FailureReason;
	UINT32 ReasonCode;
	EtlPtr ConnectionId;
}
Struct WLAN_WlansvcDisconnectedEvtDesc = FormatString("WLAN AutoConfig service has successfully disconnected from a wireless network.  Network Adapter: %s Interface GUID: %s Connection Mode: %s Profile Name: %s SSID: %s BSS Type: %s Reason: %s ", InterfaceDescription.ToString, InterfaceGuid.ToString, ConnectionMode.ToString, ProfileName.ToString, SSID.ToString, BSSType.ToString, Reason.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString ConnectionMode;
	UnicodeString ProfileName;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString Reason;
	EtlPtr ConnectionId;
}
Struct WLAN_WlansvcConnectionBlockEvtDesc = FormatString("Wireless network is blocked due to connection failure.  Network Adapter: %s Interface GUID: %s Connection Mode: %s Profile Name: %s SSID(s): %s BSS Type: %s Failure Reason:%s Length of block timer (minutes): %s ", InterfaceDescription.ToString, InterfaceGuid.ToString, ConnectionMode.ToString, ProfileName.ToString, SSIDs.ToString, BSSType.ToString, FailureReason.ToString, BlockTime.ToString)
{
	UnicodeString InterfaceDescription;
	GUID(true) InterfaceGuid;
	UnicodeString SSIDs;
	UnicodeString ProfileName;
	UnicodeString ConnectionMode;
	UnicodeString BSSType;
	UnicodeString FailureReason;
	UINT32 BlockTime;
	UINT32 ReasonCode;
	EtlPtr ConnectionId;
}
Struct WLAN_WlansvcSoftAPStartBeginEvtDesc = FormatString("WLAN AutoConfig service has begun starting the hosted network.  Interface GUID: %s SSID: %s ", InterfaceGuid.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	AsciiString SSID;
}
Struct WLAN_WlansvcSoftAPStartEndEvtDesc = FormatString("WLAN AutoConfig service has finished starting the hosted network.  Interface GUID: %s SSID: %s ", InterfaceGuid.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	AsciiString SSID;
}
Struct WLAN_WlansvcSoftAPStartFailedEvtDesc = FormatString("WLAN AutoConfig service has failed to start the hosted network.  Error Code: %s Error Message: %s Interface GUID: %s SSID: %s ", ErrorCode.ToString, ErrorMsg.ToString, InterfaceGuid.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 ErrorCode;
	UnicodeString ErrorMsg;
	AsciiString SSID;
}
Struct WLAN_WlansvcSoftAPStopBeginEvtDesc = FormatString("AutoConfig service has begun to stop the hosted network.  Interface GUID: %s SSID: %s ", InterfaceGuid.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	AsciiString SSID;
}
Struct WLAN_WlansvcSoftAPStopEndEvtDesc = FormatString("WLAN AutoConfig service has finished stopping the hosted network.  Interface GUID: %s SSID: %s ", InterfaceGuid.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	AsciiString SSID;
}
Struct WLAN_WlansvcSoftAPStopFailedEvtDesc = FormatString("WLAN AutoConfig service has failed to stop the hosted network.  Error Code: %s Error Message: %s Interface GUID: %s SSID: %s ", ErrorCode.ToString, ErrorMsg.ToString, InterfaceGuid.ToString, SSID.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 ErrorCode;
	UnicodeString ErrorMsg;
	AsciiString SSID;
}
Struct WLAN_WlansvcStartEvtDesc = FormatString("WLAN AutoConfig service has successfully started. ")
{
	_struct Empty{};
}
Struct WLAN_WlansvcStopEvtDesc = FormatString("WLAN AutoConfig service has successfully stopped. ")
{
	_struct Empty{};
}
Struct WLAN_WlansvcFailureEvtDesc = FormatString("WLAN AutoConfig service has failed to start.  Error Code: %s ", ErrorCode.ToString)
{
	UINT32 ErrorCode;
}
Struct WLAN_ExtHostStartFailureEvtDesc = FormatString("WLAN Extensibility Module has failed to start.  Module Path: %s Error Code: %s ", ExtensibleModulePath.ToString, ErrorCode.ToString)
{
	UnicodeString ExtensibleModulePath;
	UINT32 ErrorCode;
}
Struct WLAN_ExtHostStartSuccessEvtDesc = FormatString("WLAN Extensibility Module has successfully started.  Module Path: %s ", ExtensibleModulePath.ToString)
{
	UnicodeString ExtensibleModulePath;
}
Struct WLAN_ExtHostStoppedEvtDesc = FormatString("WLAN Extensibility Module has stopped.  Module Path: %s ", ExtensibleModulePath.ToString)
{
	UnicodeString ExtensibleModulePath;
}
Struct WLAN_ExtHostStoppedUnexpectedlyEvtDesc = FormatString("WLAN Extensibility Module has stopped unexpectedly.  Module Path: %s ", ExtensibleModulePath.ToString)
{
	UnicodeString ExtensibleModulePath;
}
Struct WLAN_ExtHostTimedOutEvtDesc = FormatString("WLAN Extensibility Module has timed out.  Module Path: %s ", ExtensibleModulePath.ToString)
{
	UnicodeString ExtensibleModulePath;
}
Struct WLAN_MsmAssociationStartEvtDesc = FormatString("Wireless network association started.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Authentication: %s Encryption: %s 802.1X Enabled: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, Auth.ToString, Cipher.ToString, OnexEnabled.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString Auth;
	UnicodeString Cipher;
	UINT32 OnexEnabled = WLAN_tid_BoolValues(this);
	UnicodeString IhvConnectivitySetting;
	EtlPtr ConnectionId;
}
Struct WLAN_MsmAssociationSuccessEvtDesc = FormatString("Wireless network association succeeded.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	EtlPtr ConnectionId;
}
Struct WLAN_MsmAssociationFailureEvtDesc = FormatString("Wireless network association failed.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Failure Reason: %s Dot11 Status Code: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, FailureReason.ToString, Dot11StatusCode.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString FailureReason;
	UINT32 ReasonCode;
	UINT32 Dot11StatusCode;
	EtlPtr ConnectionId;
}
Struct WLAN_MsmSecurityStartEvtDesc = FormatString("Wireless security started.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s Authentication: %s Encryption: %s 802.1x Enabled: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString, Auth.ToString, Cipher.ToString, FIPSMode.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	UnicodeString Auth;
	UINT32 AuthVal;
	UnicodeString Cipher;
	UINT32 CipherVal;
	UINT32 FIPSMode = WLAN_tid_EnabledValues(this);
	UINT32 OnexEnabled = WLAN_tid_BoolValues(this);
	EtlPtr ConnectionId;
}
Struct WLAN_MsmSecurityStopEvtDesc = FormatString("Wireless security stopped.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s Security Hint: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString, SecurityHint.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	UnicodeString SecurityHint;
	UINT32 SecurityHintCode;
	EtlPtr ConnectionId;
}
Struct WLAN_MsmSecuritySuccessEvtDesc = FormatString("Wireless security succeeded.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	EtlPtr ConnectionId;
}
Struct WLAN_MsmSecurityFailureEvtDesc = FormatString("Wireless security failed.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s Reason: %s Error: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString, ReasonText.ToString, ErrorCode.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	UnicodeString ReasonText;
	UINT32 ReasonCode;
	UINT32 ErrorCode;
	EtlPtr ConnectionId;
}
Struct WLAN_MsmIhvSecurityStartEvtDesc = FormatString("Wireless IHV security started.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	UnicodeString IhvSecuritySetting;
	EtlPtr ConnectionId;
}
Struct WLAN_MsmIhvSecuritySuccessEvtDesc = FormatString("Wireless IHV security succeeded.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	EtlPtr ConnectionId;
}
Struct WLAN_MsmIhvSecurityFailureEvtDesc = FormatString("Wireless IHV security failed.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s Reason: %s Additional Data Length: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString, IhvReasonCode.ToString, IhvDataLength.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	UINT32 IhvReasonCode;
	UINT32 IhvDataLength;
	BLOB(256) IhvData;
	EtlPtr ConnectionId;
}
Struct WLAN_MsmSecurityStartEvtDescSp1 = FormatString("Wireless security started.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s Authentication: %s Encryption: %s FIPS Mode: %s 802.1x Enabled: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString, Auth.ToString, Cipher.ToString, FIPSMode.ToString, OnexEnabled.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	UnicodeString Auth;
	UINT32 AuthVal;
	UnicodeString Cipher;
	UINT32 CipherVal;
	UINT32 FIPSMode = WLAN_tid_EnabledValues(this);
	UINT32 OnexEnabled = WLAN_tid_BoolValues(this);
	EtlPtr ConnectionId;
}
Struct WLAN_WlansecOneXStartEvtDesc = FormatString("Wireless 802.1x authentication started.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s Eap Information: Type %s, Vendor ID %s, Vendor Type %s, Author ID %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString, EapType.ToString, VendorID.ToString, VendorType.ToString, AuthorID.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	UINT32 EapType;
	UINT32 VendorID;
	UINT32 VendorType;
	UINT32 AuthorID;
	EtlPtr ConnectionId;
}
Struct WLAN_WlansecOneXSuccessEvtDesc = FormatString("Wireless 802.1x authentication succeeded.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s Identity: %s User: %s Domain: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString, Identity.ToString, User.ToString, Domain.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	UnicodeString Identity;
	UnicodeString User;
	UnicodeString Domain;
	EtlPtr ConnectionId;
	BOOL ExplicitCredentials;
}
Struct WLAN_WlansecOneXFailureEvtDesc = FormatString("Wireless 802.1x authentication failed.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s Identity: %s User: %s Domain: %s Reason: %s Error: %s EAP Reason: %s EAP Root cause String: %s EAP Error: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString, Identity.ToString, User.ToString, Domain.ToString, ReasonText.ToString, ErrorCode.ToString, EAPReasonCode.ToString, EAPRootCauseString.ToString, EAPErrorCode.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	UnicodeString Identity;
	UnicodeString User;
	UnicodeString Domain;
	UnicodeString ReasonText;
	UINT32 ReasonCode;
	UINT32 ErrorCode;
	UINT32 EAPReasonCode;
	UnicodeString EAPRootCauseString;
	UINT32 EAPErrorCode;
	EtlPtr ConnectionId;
	BOOL ExplicitCredentials;
}
Struct WLAN_WlansecOneXRestartEvtDesc = FormatString("Wireless 802.1x authentication was restarted.  Network Adapter: %s Interface GUID: %s Local MAC Address: %s Network SSID: %s BSS Type: %s Peer MAC Address: %s Eap Information: Type %s, Vendor ID %s, Vendor Type %s, Author ID %s Restart Reason: %s ", Adapter.ToString, DeviceGuid.ToString, LocalMac.ToString, SSID.ToString, BSSType.ToString, PeerMac.ToString, EapType.ToString, VendorID.ToString, VendorType.ToString, AuthorID.ToString, RestartReason.ToString)
{
	UnicodeString Adapter;
	GUID(true) DeviceGuid;
	UnicodeString LocalMac;
	UnicodeString SSID;
	UnicodeString BSSType;
	UnicodeString PeerMac;
	UINT32 EapType;
	UINT32 VendorID;
	UINT32 VendorType;
	UINT32 AuthorID;
	UnicodeString RestartReason;
	EtlPtr ConnectionId;
}
Struct WLAN_WlansvcPrelogonBegin = FormatString("A pre-logon connection was attempted.  Result: %s Interface GUID: %s Profile Name: %s Requested Fields: %s ", Result.ToString, InterfaceGuid.ToString, ProfileName.ToString, RequestedFields.ToString)
{
	UINT32 Result = WLAN_tid_WlansvcPrelogonResult(this);
	GUID(true) InterfaceGuid;
	UnicodeString ProfileName;
	UnicodeString RequestedFields;
}
Struct WLAN_WlansvcPrelogonSkip = FormatString("A pre-logon connection was not attempted.  Result: %s Reason: %s ", Result.ToString, Reason.ToString)
{
	UINT32 Result = WLAN_tid_WlansvcPrelogonResult(this);
	UINT32 Reason = WLAN_tid_WlansvcPrelogonSkipSp1Reason(this);
}
Struct WLAN_WlansvcPostlogonBegin = FormatString("A post-logon connection was attempted.  Result: %s Interface GUID: %s Profile Name: %s ", Result.ToString, InterfaceGuid.ToString, ProfileName.ToString)
{
	UINT32 Result = WLAN_tid_WlansvcPostlogonResult(this);
	GUID(true) InterfaceGuid;
	UnicodeString ProfileName;
}
Struct WLAN_WlansvcPostlogonConnection = FormatString("The post-logon connection attempt is complete.  Network connection attempt result: %s Reason: %s Interface GUID: %s Profile Name: %s ", Result.ToString, Reason.ToString, InterfaceGuid.ToString, ProfileName.ToString)
{
	UINT32 Result = WLAN_tid_WlansvcPostlogonResult(this);
	UINT32 Reason = WLAN_tid_WlansvcPostlogonReason(this);
	GUID(true) InterfaceGuid;
	UnicodeString ProfileName;
}
Struct WLAN_WlansvcPostlogonSkip = FormatString("A post-logon connection was not attempted.  Result: %s Reason: %s ", Result.ToString, Reason.ToString)
{
	UINT32 Result = WLAN_tid_WlansvcPostlogonResult(this);
	UINT32 Reason = WLAN_tid_WlansvcPostlogonSkipReason(this);
}
Struct WLAN_WlansvcPostlogonBeginSp1 = FormatString("A post-logon connection was attempted.  Result: %s Interface GUID: %s Profile Name: %s ", Result.ToString, InterfaceGuid.ToString, ProfileName.ToString)
{
	UINT32 Result = WLAN_tid_WlansvcPostlogonResult(this);
	GUID(true) InterfaceGuid;
	UnicodeString ProfileName;
}
Struct WLAN_WlanSvcMediaNotificationReceived = FormatString("Media notification received. Interface = %s, Connected = %s.", InterfaceDescription.ToString, Connected)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	BOOL Connected;
}
Struct WLAN_WlanSvcPeerNotificationReceived = FormatString("Peer notification received. Interface = %s, Joined = %s.", InterfaceDescription.ToString, Joined.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	BOOL Joined;
}
Struct WLAN_WlanSvcEnableAutoConfig = FormatString("Enable AutoConfig. Interface = %s, Enabled = %s.", InterfaceDescription.ToString, Enabled.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	BOOL Enabled;
}
Struct WLAN_WlanSvcSetStreamingMode = FormatString("Set media streaming mode. Interface = %s, Enable = %s, Result = %s.", InterfaceDescription.ToString, Enabled.ToString, Result.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	BOOL Enabled;
	WinErrorCode Result;
}
Struct WLAN_WlanSvcSetBSSType = FormatString("Set BSS type. Interface = %s, BSS type = %s.", InterfaceDescription.ToString, BSSType.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 BSSType = WLAN_BSSTypeMap(this);
}
Struct WLAN_WlanSvcSetRadioState = FormatString("Set radio state. Interface = %s, PHY = %s, State = %s, Result = %s.", InterfaceDescription.ToString, PHY.ToString, RadioState.ToString, Result.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 PHY;
	UINT32 RadioState = WLAN_RadioStateMap(this);
	WinErrorCode Result;
}
Struct WLAN_WlanSvcStartAutoConfig = FormatString("Start auto config. Interface = %s.", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcStopAutoConfig = FormatString("Stop auto config. Interface = %s.", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcPowerSetting = FormatString("Power setting = %s. Interface = %s.", PowerSetting.ToString, InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 PowerSetting = WLAN_PowerSettingMap(this);
}
Struct WLAN_WlanSvcChangeSession = FormatString("Change session to %s. Interface = %s.", ConnectionId.ToString, InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	EtlPtr ConnectionId;
}
Struct WLAN_WlanSvcRadioOff = FormatString("Radio is off. Interface = %s.", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcChangeRadioState = FormatString("Change radio state for interface = %s :  PHY = %s, software state = %s, hardware state = %s)", InterfaceDescription.ToString, PHY.ToString, OldState.ToString, NewState.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 PHY;
	UINT32 OldState = WLAN_RadioStateMap(this);
	UINT32 NewState = WLAN_RadioStateMap(this);
}
Struct WLAN_WlanSvcProfileUpdateIgnored = FormatString("The connection is not healthy. Pending profile update is ignored. Interface = %s", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcProfileUpdated = FormatString("Profile %s is updated. Interface = %s", Profile.ToString, InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString Profile;
}
Struct WLAN_WlanSvcInvalidConnectionReset = FormatString("%s, need to disconnect. Interface = %s", ConnectionResetReason.ToString, InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 ConnectionResetReason = WLAN_ConnectionResetReasonMap(this);
}
Struct WLAN_WlanSvcSetOpMode = FormatString("Set current operation mode. Interface = %s, OpMode = %s, Result = %s.", InterfaceDescription.ToString, OpMode.ToString, Result.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 OpMode = WLAN_Dot11OpModeMap(this);
	WinErrorCode Result;
}
Struct WLAN_WlanSvcConnectionRequest = FormatString("Got connection request, mode = %s, flags = %s, profile name = %s, session = %s. Interface = %s", ConnectionMode.ToString, Flags.ToString, Profile.ToString, ConnectionId.ToString, InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 ConnectionMode = WLAN_WLANConnectionModeMap(this);
	UINT32 Flags;
	UnicodeString Profile;
	EtlPtr ConnectionId;
}
Struct WLAN_WlanSvcConnectionCancelled = FormatString("Connection cancelled by user. Interface = %s.", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcConnectionFailed = FormatString("Connection failed. Interface = %s, Reason code = %s.", InterfaceDescription.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcStopConnectionAttempts = FormatString("Stop all connection attempts for interface %s.", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcConnectionSucceeded = FormatString("Connection succeeded on interface %s.", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcConnectionComplete = FormatString("Connection complete on interface %s, session = %s, status = %s, ad hoc network formed = %s", InterfaceDescription.ToString, ConnectionId.ToString, Status.ToString, Adhoc.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	EtlPtr ConnectionId;
	WinErrorCode Status;
	BOOL Adhoc;
}
Struct WLAN_WlanSvcDisconnectRequest = FormatString("Got disconnect request. Interface = %s.", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcSetManualProfile = FormatString("Set profile %s to manual temporarily.", Profile.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString Profile;
}
Struct WLAN_WlanSvcDisconnecting = FormatString("Disconnecting. Interface = %s.", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcSetInterfaceState = FormatString("Interface %s state is set to %s.", InterfaceDescription.ToString, State.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 State = WLAN_WLANInterfaceStateMap(this);
}
Struct WLAN_WlanSvcUIRequestResult = FormatString("UI request for interface %s result = %s.", InterfaceDescription.ToString, Result.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	BOOL Result;
}
Struct WLAN_WlanSvcProfileUpdateStatus = FormatString("Profile %s %s.", Profile.ToString, HealthCheckResult.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString Profile;
	UINT32 HealthCheckResult = WLAN_HealthCheckResultMap(this);
}
Struct WLAN_WlanSvcProfileNameChange = FormatString("Profile name change. Interface = %s, old profile name = %s, new profile name = %s", InterfaceDescription.ToString, OldProfileName.ToString, NewProfileName.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString OldProfileName;
	UnicodeString NewProfileName;
}
Struct WLAN_WlanSvcInterfaceInitialized = FormatString("Interface %s (%s) is successfully initialized.", InterfaceGuid.ToString, InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcCurrentOpMode = FormatString("The current operation mode for interface %s is %s.", InterfaceDescription.ToString, OpMode.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 OpMode = WLAN_Dot11OpModeMap(this);
}
Struct WLAN_WlanSvcInterfaceType = FormatString("Interface %s type = %s.", InterfaceGuid.ToString, Type.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 Type;
}
Struct WLAN_WlanSvcInterfaceQueryFail = FormatString("Interface %s cannot be queried, error %s.", InterfaceGuid.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcInterfaceQueryRetry = FormatString("Failed to query physical medium for interface %s, because the device is not ready. Need to retry.", InterfaceGuid.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcInterfaceName = FormatString("Found name %s for interface %s", FriendlyName.ToString, DeviceGuid.ToString)
{
	UnicodeString DeviceGuid;
	UnicodeString FriendlyName;
}
Struct WLAN_WlanSvcNetworkNotPermitted = FormatString("Network %s is not permitted.", SSID.ToString)
{
	UnicodeString SSID;
}
Struct WLAN_WlanSvcChangePowerSetting = FormatString("Power setting = %s.", Setting.ToString)
{
	UINT8 Setting = WLAN_PowerSettingMap(this);
}
Struct WLAN_WlanSvcDisconnectTemporaryConnection = FormatString("Disconnect the temporary connection %s for interface %s, Reason = %s.", Profile.ToString, InterfaceDescription.ToString, Reason.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString Profile;
	UINT8 Reason = WLAN_DisconnectTemporaryReasonMap(this);
}
Struct WLAN_WlanSvcClearRuntimeState = FormatString("Clear runtime state because the user who initiated the manual connection logged off.")
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcSessionChange = FormatString("WTS session change. Type = %s, session id = %s.", Type.ToString, ConnectionId.ToString)
{
	UINT32 Type;
	EtlPtr ConnectionId;
}
Struct WLAN_WlanSvcScanInitiated = FormatString("Scan for networks. Interface = %s, scan type = %s, flush BSS list = %s", InterfaceDescription.ToString, ScanType.ToString, FlushBSSList.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 ScanType;
	BOOL FlushBSSList;
}
Struct WLAN_WlanSvcScanRequestIgnored = FormatString("Scan request is ignored because radio is off. Interface = %s.", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcScanResultsUnqueried = FormatString("Scan results are not queried because raido is off. Interface = %s.", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcScanStopped = FormatString("The scan state machine is stopped.")
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcNoAutoSwitch = FormatString("No auto switch for the current connection (%s).", Profile.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString Profile;
}
Struct WLAN_WlanSvcConnectSSID = FormatString("Connection (auto = %s) to %s (multiple=%s) using profile %s.", Auto.ToString, SSID.ToString, Multiple.ToString, ProfileName.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString ProfileName;
	BOOL Auto;
	UnicodeString SSID;
	BOOL Multiple;
	UINT16 SSIDListSize;
	BLOB(SSIDListSize) SSIDList;
}
Struct WLAN_WlanSvcSessionAdded = FormatString("The session id=%s, active=%s, console=%s is added.", ConnectionId.ToString, Active.ToString, Console.ToString)
{
	EtlPtr ConnectionId;
	BOOL Active;
	BOOL Console;
}
Struct WLAN_WlanSvcSessionRefreshed = FormatString("The the state of session id=%s is refreshed to active=%s, console=%s.", ConnectionId.ToString, Active.ToString, Console.ToString)
{
	EtlPtr ConnectionId;
	BOOL Active;
	BOOL Console;
}
Struct WLAN_WlanSvcServiceConsoleState = FormatString("Active Console User state = %s", ActiveConsole.ToString)
{
	BOOL ActiveConsole;
}
Struct WLAN_WlanSvcSessionRemoved = FormatString("The session id=%s is removed.", ConnectionId.ToString)
{
	EtlPtr ConnectionId;
}
Struct WLAN_WlanSvcUIRequestHandledByDiscovery = FormatString("Discovery module has taken care of the UI request.")
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcUIRequestNotSent = FormatString("UI request not sent because the network is suppressed and the UI request is notification type.")
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcUIRequestTimelyFailure = FormatString("IntfCompleteTimely failed, error %s", ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcNetworkSuppressedStatus = FormatString("Session %s, Network suppressed status for %s is %s.", ConnectionId.ToString, Network.ToString, Suppressed.ToString)
{
	EtlPtr ConnectionId;
	GUID(true) Network;
	BOOL Suppressed;
}
Struct WLAN_WlanSvcEnableBackgroundScan = FormatString("Enable AutoConfig background scan. Interface = %s, Enabled = %s.", InterfaceDescription.ToString, Enabled.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	BOOL Enabled;
}
Struct WLAN_WlanSvcDiscardBackgroundScan = FormatString("Discard this round of background scan because a connection process is in progress. Interface = %s", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcDiscardBackgroundScan2 = FormatString("Discard this round of background scan because the current connection does not allow auto switch. Interface = %s", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_WlanSvcDiscardBackgroundScan3 = FormatString("Discard this round of background scan because the current connection is the most preferred auto connection. Interface = %s", InterfaceDescription.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
[post.Global.ETLContext$[property.UTActivityId] = IsValueNone(Global.ETLContext$[property.UTActivityId]) ? FormatString("Connect to %s with profile %s", SSID.ToString, ProfileName.ToString) : Global.ETLContext$[property.UTActivityId]]
Struct WLAN_WlanSvcConnectionActivityContext = FormatString("Connect to %s with profile %s", SSID.ToString, ProfileName.ToString)
{
	UnicodeString ProfileName;
	UnicodeString SSID;
}
Struct WLAN_MSMBeginConnect = FormatString("Begin Connect API")
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	EtlPtr Session;
}
Struct WLAN_MSMBeginDisconnect = FormatString("Begin Disconnect API")
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_MSMCallPreAssociateSecurity = FormatString("Calling MSMSecPerformPreAssociateSecurity")
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_MSMCallStopSecurity = FormatString("Calling MSMSecStopSecurity")
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_MSMConnectComplete = FormatString("Connect completion reason %s, session %s, adhoc formed %s", Reason.ToString, Session.ToString, AdHocFormed.ToString)
{
	UINT32 Reason;
	EtlPtr Session;
	BOOL AdHocFormed;
}
Struct WLAN_MSMConnectCompletePacketReceived = FormatString("Received CONNECT COMPLETION, status %s, assocStatus %s", Status.ToString, AssocStatus.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 Status;
	UINT32 AssocStatus;
}
Struct WLAN_MSMFSMTraceEvent = FormatString("FSM Current state %s, event %s", CurrState.ToString, EventId.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 CurrState = WLAN_MSMFSMStateMap(this);
	UINT32 EventId = WLAN_MSMFSMEventMap(this);
}
Struct WLAN_MSMFSMStateTransition = FormatString("FSM Transition from State: %s to State: %s", CurrState.ToString, NewState.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 CurrState = WLAN_MSMFSMStateMap(this);
	UINT32 NewState = WLAN_MSMFSMStateMap(this);
}
Struct WLAN_MSMIncompatiblePHY = FormatString("Phy Type not compatible")
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_MSMLinkQualityUpdateReceived = FormatString("Link Quality: %s", Quality.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 Quality;
}
Struct WLAN_MSMPortDownNotification = FormatString("Received IHV PORT DOWN, peer %s", BSSID.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	BLOB(6) BSSID;
}
Struct WLAN_MSMPortUpNotification = FormatString("Received IHV PORT UP, peer %s", BSSID.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	BLOB(6) BSSID;
}
Struct WLAN_MSMPostConnectSecurityComplete = FormatString("Post Connect Security has Completed Successfully")
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_MSMPostConnectSecurityFailed = FormatString("Post Connect Security has FAILED with reason code: %s", ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
}
Struct WLAN_MSMSecurityPacketReceived = FormatString("Received Security Packet: %s", PacketType.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 PacketType = WLAN_AuthUpcallTypeMap(this);
}
Struct WLAN_MSMSecurityPreconnectComplete = FormatString("Security PreConnect Completion, security reason: %s, error %s", Reason.ToString, Error.ToString)
{
	UINT32 Reason;
	UINT32 Error;
}
Struct WLAN_MSMSendMSMSecurityPacket = FormatString("Send Security Packet Length = %s and Completion Handle = %s", Length.ToString, Handle.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 Length;
	EtlPtr Handle;
}
Struct WLAN_MSMSendOneXSecurityPacket = FormatString("Send Security Packet Length = %s and Completion Handle = %s", Length.ToString, Handle.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UINT32 Length;
	EtlPtr Handle;
}
Struct WLAN_MSMSetConnectSetting = FormatString("SSID = %s BSSIDCount = %s", SSID.ToString, BSSIDCount.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString SSID;
	UINT32 BSSIDCount;
	BLOB(6) BSSIDList[BSSIDCount];
}
Struct WLAN_MSAMReceivePortUp = FormatString("A client has associated with the hosted network.   Interface GUID: %s Interface description:%s Network SSID: %s Local MAC address: %s Peer MAC address: %s ", InterfaceGuid.ToString, InterfaceDescription.ToString, SSID.ToString, LocalMAC.ToString, PeerMAC.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString SSID;
	UnicodeString LocalMAC;
	UnicodeString PeerMAC;
}
Struct WLAN_MSAMPostSecuritySuccess = FormatString("A client has successfully authenticated with the hosted network.   Interface GUID: %s Interface description:%s Network SSID: %s Local MAC address: %s Peer MAC address: %s ", InterfaceGuid.ToString, InterfaceDescription.ToString, SSID.ToString, LocalMAC.ToString, PeerMAC.ToString)
{
	GUID(true) InterfaceGuid;
	UnicodeString InterfaceDescription;
	UnicodeString SSID;
	UnicodeString LocalMAC;
	UnicodeString PeerMAC;
}
Struct WLAN_MSAMPostSecurityFailure = FormatString("A client has failed to authenticate with the hosted network.   Error code: %s Error Message: %s Interface GUID: %s Interface description:%s Network SSID: %s Local MAC address: %s ", ErrorCode.ToString, ErrorMsg.ToString, InterfaceGuid.ToString, InterfaceDescription.ToString, SSID.ToString, LocalMAC.ToString)
{
	GUID(true) InterfaceGuid;
	WinErrorCode ErrorCode;
	UnicodeString ErrorMsg;
	UnicodeString InterfaceDescription;
	UnicodeString SSID;
	UnicodeString LocalMAC;
}
Struct WLAN_MsmSecSecMgrNewAdapter = FormatString("Adapter(%s) New Adapter %s (%s)", InterfaceGuid.ToString, FriendlyName.ToString, PKMIDs.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	BLOB(6) LocalAddr;
	UnicodeString FriendlyName;
	UINT32 PKMIDs;
	BOOL FourWayOffloadSupported;
	BOOL SafeModeSupported;
	BOOL SafeModeCertified;
}
Struct WLAN_MsmSecSecMgrIntfStateChange = FormatString("Adapter(%s) IntfSecState Transition %s --> %s", InterfaceGuid.ToString, OldState.ToString, NewState.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 OldState = WLAN_IntfSecStateMap(this);
	UINT32 NewState = WLAN_IntfSecStateMap(this);
}
Struct WLAN_MsmSecSecMgrStopSecurity = FormatString("Adapter(%s) Received StopSecurity", InterfaceGuid.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
}
Struct WLAN_MsmSecSecMgrInvalidUIResponse = FormatString("Pre-Associate Failure Auth %s, Cipher %s, OneX Enabled(%s), UICancelled(%s)", AuthAlgoId.ToString, CipherAlgoId.ToString, OneXEnabled.ToString, UICancelled.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 AuthAlgoId = WLAN_Dot11AuthAlgorithmMap(this);
	UINT32 CipherAlgoId = WLAN_Dot11CipherAlgorithmMap(this);
	BOOL OneXEnabled;
	BOOL UICancelled;
}
Struct WLAN_MsmSecSecMgrAlreadyHaveKey = FormatString("Received MSMSec UI Response, but already have key material!")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
}
Struct WLAN_MsmSecSecMgrReceivedUIResponse = FormatString("Received UI response %s", ResponseType.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 ResponseType = WLAN_UIResponseTypeMap(this);
}
Struct WLAN_MsmSecAuthTimeout = FormatString("TIMING OUT 802.1x Authentication")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) PeerAddr;
	UINT32 Context;
}
Struct WLAN_MsmSecAuthNotTimeout = FormatString("NOT TIMING OUT 802.1x authentication, next timer in %s msec", Context.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) PeerAddr;
	UINT32 Context;
}
Struct WLAN_MsmSecFastRoamVeto = FormatString("802.1x veto-ed FAST ROAMING (Error %s), performing full authentication", ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct WLAN_MsmSecAuthMgrStateChange = FormatString("Port (%s) Peer %s AuthMgr Transition %s --> %s", PortId.ToString, PeerAddr.ToString, OldState.ToString, NewState.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 OldState = WLAN_AuthMgrStateMap(this);
	UINT32 NewState = WLAN_AuthMgrStateMap(this);
}
Struct WLAN_MsmSecSendUIResponse = FormatString("Sending UI response to 802.1x")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) PeerAddr;
	UINT32 Context;
}
Struct WLAN_MsmSecKeyExtStateChange = FormatString("KeyExt Transition %s --> %s", OldState.ToString, NewState.ToString)
{
	UINT32 SessionId;
	UINT32 OldState = WLAN_KeyExtStateMap(this);
	UINT32 NewState = WLAN_KeyExtStateMap(this);
}
Struct WLAN_MsmSecKeyExtOneXFailure = FormatString("Explicit failure from 802.1x, (Reason %s, Error %s)", Reason.ToString, Error.ToString)
{
	UINT32 SessionId;
	UINT32 Reason;
	UINT32 Error;
}
Struct WLAN_MsmSecKeyExtOneXSuccess = FormatString("802.1x success")
{
	UINT32 SessionId;
}
Struct WLAN_MsmSecKeyMgrStateChange = FormatString("Port(%s) Peer %s KeyMgr transition %s --> %s", PortId.ToString, PeerAddr.ToString, OldState.ToString, NewState.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 OldState = WLAN_KeyExchangeStateMap(this);
	UINT32 NewState = WLAN_KeyExchangeStateMap(this);
}
Struct WLAN_MsmSecAuthSendM1 = FormatString("Auth sent M1(%s), self %s, peer %s", PortId.ToString, LocalAddr.ToString, PeerAddr.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecAuthSendM3 = FormatString("Auth sent M3(%s), self %s, peer %s", PortId.ToString, LocalAddr.ToString, PeerAddr.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecAuthSendG1 = FormatString("Auth sent G1(%s), self %s, peer %s", PortId.ToString, LocalAddr.ToString, PeerAddr.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecKeyMgrAuthStateChange = FormatString("Port(%s) Peer %s KeyMgrAuth Transition %s --> %s", PortId.ToString, PeerAddr.ToString, OldState.ToString, NewState.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 OldState = WLAN_KeyMgrAuthStateMap(this);
	UINT32 NewState = WLAN_KeyMgrAuthStateMap(this);
}
Struct WLAN_MsmSecConnectionSecuredOffloaded = FormatString("CONNECTION SECURED by OFFLOADED key exchange")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecKeyExchangeStatusChange = FormatString("Port(%s) Notify Key Exchange Status: Authenticator(%s) reason %s , self %s, peer %s", PortId.ToString, Authenticator.ToString, Reason.ToString, LocalAddr.ToString, PeerAddr.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	BOOL Authenticator;
	UINT32 Reason;
}
Struct WLAN_MsmSecDefaultKeySet = FormatString("Default Key: Idx %s, Algo %s, Direction= %s, Len %s", Index.ToString, CipherAlgoId.ToString, Direction.ToString, Len.ToString)
{
	UINT32 Index;
	UINT32 CipherAlgoId = WLAN_Dot11CipherAlgorithmMap(this);
	UINT8 Direction = WLAN_Dot11DirectionMap(this);
	UINT32 Len;
}
Struct WLAN_MsmSecPairwiseKeySet = FormatString("Pairwise Key (%s): Algo %s, Direction= %s, Len %s", Addr.ToString, CipherAlgoId.ToString, Direction.ToString, Len.ToString)
{
	BLOB(6) Addr;
	UINT32 CipherAlgoId = WLAN_Dot11CipherAlgorithmMap(this);
	UINT8 Direction = WLAN_Dot11DirectionMap(this);
	UINT32 Len;
}
Struct WLAN_MsmSecConnectCompletion = FormatString("Adapter(%s) Connect Completion, Reason %s, Error %s", AdapterId.ToString, Reason.ToString, Error.ToString)
{
	UINT32 AdapterId;
	UINT32 Reason;
	UINT32 Error;
}
Struct WLAN_MsmSecIndicateSecurityResult = FormatString("Port(%s) Indicate Security Result, Peer %s, Reason %s Error %s", PortId.ToString, PeerAddr.ToString, Reason.ToString, Error.ToString)
{
	UINT32 PortId;
	BLOB(6) PeerAddr;
	UINT32 Reason;
	UINT32 Error;
}
Struct WLAN_MsmSecTxPacket = FormatString("Adapter(%s) Tx to %s, Ethertype %s, size %s", Context.ToString, PeerAddr.ToString, EtherType.ToString, Size.ToString)
{
	BLOB(6) PeerAddr;
	UINT32 EtherType;
	UINT32 Size;
	UINT32 Context;
}
Struct WLAN_MsmSecSendUIRequest = FormatString("Sending UI request to MSM (%s)", SessionId.ToString)
{
	UINT32 SessionId;
	GUID(true) PageClsId;
	UINT32 RequestType = WLAN_UIRequestTypeMap(this);
}
Struct WLAN_MsmSecConnectNotification = FormatString("Adapter(%s) MSM Connect notification, Network '%s'", InterfaceGuid.ToString, SSID.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	BLOB(6) LocalAddr;
	UnicodeString SSID;
}
Struct WLAN_MsmSecDisconnectNotification = FormatString("Adapter(%s) MSM Disconnect notification", InterfaceGuid.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
}
Struct WLAN_MsmSecPortUp = FormatString("Adapter(%s) Port up for peer %s", InterfaceGuid.ToString, PeerAddr.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	BLOB(6) PeerAddr;
}
Struct WLAN_MsmSecPortDown = FormatString("Adapter(%s) Port down for peer %s", InterfaceGuid.ToString, PeerAddr.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	BLOB(6) PeerAddr;
}
Struct WLAN_MsmSecRxPacket = FormatString("Adapter(%s) Rx from %s, Ethertype %s, size %s", InterfaceGuid.ToString, PeerAddr.ToString, EtherType.ToString, Size.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	BLOB(6) PeerAddr;
	UINT32 EtherType;
	UINT32 Size;
	UINT32 Context;
}
Struct WLAN_MsmSecUIResponse = FormatString("Adapter(%s) UI Response, request type %s, response type %s, cancelled = %s", InterfaceGuid.ToString, RequestType.ToString, ResponseType.ToString, Cancelled.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 RequestType = WLAN_UIRequestTypeMap(this);
	UINT32 ResponseType = WLAN_UIResponseTypeMap(this);
	BOOL Cancelled;
}
Struct WLAN_MsmSecCreateDiscoveryProfiles = FormatString("Adapter(%s) Create discovery profiles", InterfaceGuid.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
}
Struct WLAN_MsmSecTxComplete = FormatString("Tx pkt completion, pkt %s", Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct WLAN_MsmSecRedoSecurity = FormatString("Adapter(%s) MSM Redo security request", InterfaceGuid.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
}
Struct WLAN_MsmSecConnectionHealth = FormatString("Connection health status is %s (%s), HealthyHint %s", AdapterId.ToString, InterfaceGuid.ToString, Healthy.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	BOOL Healthy;
	UINT32 HealthStatus;
	BOOL Hint;
}
Struct WLAN_MsmSecTransitionNetworkSuspected = FormatString("Transition network suspected")
{
	BLOB(6) BSSID;
}
Struct WLAN_MsmSecUIResponseValid = FormatString("UI Response - Valid = %s, Cancelled = %s", Valid.ToString, Cancelled.ToString)
{
	BOOL Valid;
	BOOL Cancelled;
}
Struct WLAN_MsmSecSendPacketFailed = FormatString("Port(%s) MSMSendPacket failed, Error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct WLAN_MsmSecPMKCacheInvalid = "Can't do fast roaming when PMK Cache is not valid" {}; // Empty Struct
Struct WLAN_MsmSecPreAuthMgrStateChange = FormatString("PreAuthMgr Transition %s --> %s", OldState.ToString, NewState.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 OldState = WLAN_PreAuthMgrStateMap(this);
	UINT32 NewState = WLAN_PreAuthMgrStateMap(this);
}
Struct WLAN_MsmSecPreAuthSuccess = FormatString("PreAuth: 802.1X Success, Received keys by Pre-Authentication for %s", PeerAddr.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecPreAuthOneXFailure = FormatString("PreAuth: Explicit failure from 802.1x, (Reason %s, Error %s)", Reason.ToString, Error.ToString)
{
	UINT32 SessionId;
	UINT32 Reason;
	UINT32 Error;
}
Struct WLAN_MsmSecPreAuthOneXSuccess = FormatString("PreAuth: 802.1x success")
{
	UINT32 SessionId;
}
Struct WLAN_MsmSecEAPOLKeyContainsUnicastKey = FormatString("Received unicast key material in EAPOL-Key (Rapid rekey %s)", RapidRekey.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	BOOL RapidRekey;
}
Struct WLAN_MsmSecConnectionSecuredRC4 = FormatString("CONNECTION SECURED by RC4 key exchange")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecConnectionSecuredRSN = FormatString("CONNECTION SECURED by RSN key exchange")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecRSNMessageM1 = FormatString("RSN Key Receive: Key Message M1")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecRSNMessageM3 = FormatString("RSN Key Receive: Key Message M3")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecRSNMessageM2 = FormatString("RSN Key Receive: Key Message M2")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecRSNMessageM4 = FormatString("RSN Key Receive: Key Message M4")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecRSNMessageG1 = FormatString("RSN Key Receive: Key Message G1")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecRSNMessageG2 = FormatString("RSN Key Receive: Key Message G2")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecFastRoamEnabled = FormatString("FAST ROAMING is %s", AdapterId.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	BOOL FastRoam;
}
Struct WLAN_MsmSecUnknownFailureTransition = FormatString("Unknown transition into Failure, EventType %s", Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct WLAN_MsmSecSecMgrStateChange = FormatString("Port(%s) Peer %s SecMgr Transition %s --> %s", PortId.ToString, PeerAddr.ToString, OldState.ToString, NewState.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 OldState = WLAN_PortSecStateMap(this);
	UINT32 NewState = WLAN_PortSecStateMap(this);
}
Struct WLAN_MsmSecConnectionSecuredWPA = FormatString("CONNECTION SECURED by WPA key exchange")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecWPAMessageM1 = FormatString("WPA Key Receive: Key Message M1")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecWPAMessageM3 = FormatString("WPA Key Receive: Key Message M3")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecWPAMessageG1 = FormatString("WPA Key Receive: Key Message G1")
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	UINT32 Timeout;
}
Struct WLAN_MsmSecEAPOLPacketCacheOverflow = FormatString("Eapol Key packet cache OVERFLOW")
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct WLAN_MsmSecPMKCacheOverflow = FormatString("PMK Cache overflowed, current %s, limit %s", Current.ToString, Max.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
	UINT32 Current;
	UINT32 Max;
}
Struct WLAN_MsmSecProfile = FormatString("WLAN Security Settings: BSS Type %s, Authentication %s, Encryption %s, OneX Enabled %s, Eap Information - Type %s, Vendor ID %s, Vendor Type %s, Author ID %s", BSSType.ToString, AuthAlgoId.ToString, CipherAlgoId.ToString, OnexEnabled.ToString, EapType.ToString, VendorID.ToString, VendorType.ToString, AuthorID.ToString)
{
	UINT32 BSSType = WLAN_BSSTypeMap(this);
	UINT32 AuthAlgoId = WLAN_Dot11AuthAlgorithmMap(this);
	UINT32 CipherAlgoId = WLAN_Dot11CipherAlgorithmMap(this);
	UINT32 OnexEnabled = WLAN_tid_BoolValues(this);
	UINT32 EapType;
	UINT32 VendorID;
	UINT32 VendorType;
	UINT32 AuthorID;
}
Struct WLAN_MsmSecEAPOLKeyContainsMulticastKey = FormatString("Received multicast key material in EAPOL-Key (Rapid rekey %s)", RapidRekey.ToString)
{
	UINT32 AdapterId;
	GUID(true) InterfaceGuid;
	UINT32 SessionId;
	UINT32 PortId;
	BLOB(6) LocalAddr;
	BLOB(6) PeerAddr;
	BOOL RapidRekey;
}
Struct WLAN_MsmSecDefaultKeyId = FormatString("Default Key ID set to Index %s", Index.ToString)
{
	UINT32 Index;
}
Struct WLAN_PerftrackACMConnect1 = FormatString("Connection started 1")
{
	GUID(true) InterfaceGuid;
}
Struct WLAN_PerftrackACMConnectTimeout1 = FormatString("Connection timeout threshold reached 1")
{
	GUID(true) InterfaceGuid;
}
Struct WLAN_PerftrackACMConnectSuccess = FormatString("Connection succeeded")
{
	GUID(true) InterfaceGuid;
}
Struct WLAN_PerftrackACMConnect2 = FormatString("Connection started 2")
{
	GUID(true) InterfaceGuid;
}
Struct WLAN_PerftrackACMConnectTimeout2 = FormatString("Connection timeout threshold reached 2")
{
	GUID(true) InterfaceGuid;
}
Struct WLAN_PerftrackACMConnect3 = FormatString("Connection started 3")
{
	GUID(true) InterfaceGuid;
}
Struct WLAN_PerftrackACMConnectTimeout3 = FormatString("Connection timeout threshold reached 3")
{
	GUID(true) InterfaceGuid;
}
Struct WLAN_PerftrackACMManualConnect1 = FormatString("Manual connect initiated, end running reconnect scenarios")
{
	GUID(true) InterfaceGuid;
}
Struct WLAN_PerftrackACMManualConnect2 = FormatString("Manual connect initiated, end running reconnect scenarios")
{
	GUID(true) InterfaceGuid;
}
Struct WLAN_PerftrackACMManualConnect3 = FormatString("Manual connect initiated, end running reconnect scenarios")
{
	GUID(true) InterfaceGuid;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWLANAutoConfig_Keyword, "{9580d7dd-0379-4658-9870-d5be7d52d6de}")]
struct WLAN_MicrosoftWindowsWLANAutoConfig_Keyword
{
	UINT64 IntfContext:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_INTFCONTEXT":"");
	UINT64 IntfMgr:1 = FormatString("          (%s) %s", this.ToBitString, this? "KW_INTFMGR":"");
	UINT64 State:1 = FormatString("            (%s) %s", this.ToBitString, this? "KW_STATE":"");
	UINT64 Session:1 = FormatString("          (%s) %s", this.ToBitString, this? "KW_SESSION":"");
	UINT64 API:1 = FormatString("              (%s) %s", this.ToBitString, this? "KW_API":"");
	UINT64 MSM:1 = FormatString("              (%s) %s", this.ToBitString, this? "KW_MSM":"");
	UINT64 MSMSEC:1 = FormatString("           (%s) %s", this.ToBitString, this? "KW_MSMSEC":"");
	UINT64 SOFTAP:1 = FormatString("           (%s) %s", this.ToBitString, this? "KW_SOFTAP":"");
	UINT64 MSAM:1 = FormatString("             (%s) %s", this.ToBitString, this? "KW_MSAM":"");
	UINT64 WlanConnect:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_WLANCONNECT":"");
	UINT64 Reserved1:22 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 Reserved2:18 = FormatString("        (%s)", this.ToBitString);
}
