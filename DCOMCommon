//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Distributed Component Object Model (DCOM) Remote Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-DCOM]: Distributed Component Object Model (DCOM) Remote Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/20/2010
//#
//####

//===== PROTOCOL ===========================================================================================================
[Property.DCOMInterfaceName="",Property.DCOMMethodName="", Property.DCOMSummary=""]
PROTOCOL DCOM = FormatString( "%s%s%s%s%s",
								Property.DCOMInterfaceName,
								Property.DCOMMethodName,
								Property.MSRPCptype ? " Response" : " Request",
								Property.DCOMSummary != "" ? ", " + DCOMSummary : "",
								Property.ParserError ? ", " + Property.ParserErrorMessage : Property.ParserErrorMessage
							)
{
	switch( Property.MSRPCIfUuid )
	{
		case "{99FCFEC4-5260-101B-BBCB-00AA0021347A}": // INTERFACE IObjectExporter native RPC interface
			_struct IObjectExporter
			{
				switch( Property.MSRPCopnum )
				{
				case 0x00:
					_struct DCOMResolveOxid
					{
						switch( Property.MSRPCptype )
						{
						case 0x00:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Request
							{
								switch {
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT64				ObjectExporterId;
											UINT16				RequestedProtocolSequencesCount;
											NdrConformant		Size;
											switch
											{
												case Size.MaxCount > 0:
													UINT16 RequestedProtocolSequences[ Size.MaxCount ];
											}
										}
								}
							}
						case 0x02:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Response
							{
								switch {
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrPtr				Ptr;
											switch
											{
												case Ptr.ReferentID > 0:
													DCOMConformantDualStringArray	ObjectExporterBindings;
											}
											Align4								pad;
											GUID(TRUE)							RemUnknown;
											UINT32								AuthenticationHint = DCOMRpccAuthenticationTable( this );
											UINT32								ReturnValue = WinErrorCodeTable( this );
										}
									}
								}
						}
					}
				case 0x01:
					_struct DCOMSimplePing
					{
						switch( Property.MSRPCptype )
						{
						case 0x00:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Request
							{
								switch {
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT64		SetId;
										}
								}
							}
						case 0x02:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Response
							{
								switch {
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32		ReturnValue = WinErrorCodeTable( this );
										}
								}
							}
						}
					}
				case 0x02:
					_struct DCOMComplexPing
					{
						switch( Property.MSRPCptype )
						{
						case 0x00:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Request
							{
								switch {
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT64							SetId;
											UINT16							SequenceNumber;
											UINT16							AddToSetCount;
											UINT16							DelFromSetCount;
											NdrPtr							Ptr;
											switch
											{
											case Ptr.ReferentID > 0:
												struct
												{	
													NdrConformant		Size;
													ALIGN8				Pad;
													UINT64				AddToSetOIDs[ Size.MaxCount ];
												}
											}
											NdrPtr							Ptr1;
											switch
											{
											case Ptr1.ReferentID > 0:
												struct
												{	
													NdrConformant		Size;
													ALIGN8				Pad;
													UINT64				DelFromSetOIDs[ Size.MaxCount ];
												}
											}
										}
								}
							}
						case 0x02:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Response
							{
								switch {
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT64					SetId;
											UINT16					PingBackoffFactor = FormatString( "%u (%u Ping delay)", this, 1 << this );
											Align4					pad;
											UINT32					ReturnValue = WinErrorCodeTable( this );
										}
								}
							}
						}
					}
				case 0x03:
					_struct DCOMServerAlive
					{
						switch( Property.MSRPCptype )
						{
						case 0x00:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Request = "No Parameters"
							{
							}
						case 0x02:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Response
							{
								switch {
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32		ReturnValue = WinErrorCodeTable( this );
										}
								}
							}
						}
					}
				case 0x04:
					_struct DCOMResolveOxid2
					{
						switch( Property.MSRPCptype )
						{
						case 0x00:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Request
							{
								switch {
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT64							ObjectExporterId;
											UINT16							RequestedProtocolSequencesCount;
											NdrConformant					Size;
											switch
											{
												case Size.MaxCount > 0:
													UINT16 RequestedProtocolSequences[ Size.MaxCount ];
											}
										}
								}
							}
						case 0x02:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Response
							{
								switch {
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrPtr								Ptr;
											switch
											{
												case Ptr.ReferentID > 0:
													DCOMConformantDualStringArray	ObjectExporterBindings;
											}
											Align4								pad1;
											GUID(TRUE)							RemUnknown;
											UINT32								AuthenticationHint = DCOMRpccAuthenticationTable( this );
											DCOMComVersion						ComVersion;
											UINT32								ReturnValue = WinErrorCodeTable( this );
										}
								}
							}
						}
					}
	
				case 0x05:
					_struct DCOMServerAlive2
					{
						switch( Property.MSRPCptype )
						{
						case 0x00:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Request = "No Parameters"
							{
							}
						case 0x02:
							[Property.DCOMMethodName = DCOMIObjectExporterMethodNameTable( Property.MSRPCopnum )]
							_struct Response
							{
								switch {
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											DCOMComVersion						ComVersion;
											NdrPtr								Ptr;
											switch
											{
												case Ptr.ReferentID > 0:
													DCOMConformantDualStringArray	Bindings;
											}
											Align4								pad;
											UINT32								Reserved;
											UINT32								ReturnValue = WinErrorCodeTable( this );
										}
								}
							}
						}
					}

				default:
					ReportParserError(ParserErrorProtocolClassWindows, "DCOM", FormatString( "Unknown IObjectExporter Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
				}
			}		
		default:
			struct
			{
				switch
				{
					case Property.MSRPCEncrypted == ConstEncTypeClearData:
					switch( Property.MSRPCPType )
					{
						case 0x00:
							[Property.DComSummary=FormatString( "%s", HeaderReq.ToString )]
							DCOMOrpcThis		HeaderReq;
						case 0x02:
							[Property.DComSummary=FormatString( "%s", HeaderResp.ToString )]
							DCOMOrpcThat		HeaderResp;
					}
				}	
				switch( Property.MSRPCIfUuid )
				{
				// COMPES interfaces ----------------------------------------------------------
			    Case "{4E14FB9F-2E22-11D1-9964-00C04FBBB345}" : //COMPES-IEventSystem
			    Case "{FB2B72A0-7A68-11D1-88F9-0080C7D771BF}" : //COMPES-IEventClass
			    Case "{FB2B72A1-7A68-11D1-88F9-0080C7D771BF}" : //COMPES-IEventClass2
			    Case "{4A6B0E15-2E38-11D1-9965-00C04FBBB345}" : //COMPES-IEventSubscription
			    Case "{F4A07D63-2E25-11D1-9964-00C04FBBB345}" : //COMPES-IEnumEventObject
			    Case "{F89AC270-D4EB-11D1-B682-00805FC79216}" : //COMPES-IEventObjectCollection
			    Case "{7FB7EA43-2D76-4EA8-8CD9-3DECC270295E}" : //COMPES-IEventClass3
			    Case "{4A6B0E16-2E38-11D1-9965-00C04FBBB345}" : //COMPES-IEventSubscription2
			    Case "{FBC1D17D-C498-43A0-81AF-423DDD530AF6}" : //COMPES-IEventSubscription3
			    Case "{99CC098F-A48A-4E9C-8E58-965C0AFC19D5}" : //COMPES-IEventSystem2
			    Case "{A0E8F27A-888C-11D1-B763-00C04FB926AF}" : //COMPES-IEventSystemInitialize
						[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/COMPES encrypted/fragmented payload" : "COMPES protocol"]
						COMPES		COMPES;
				// COMA interfaces ----------------------------------------------------------
			    Case "{C2BE6970-DF9E-11D1-8B87-00C04FD7A924}" : //COMA-iimport
			    Case "{0E3D6630-B46B-11D1-9D2D-006008B0E5CA}" : //COMA-icatalogtableread
			    Case "{971668DC-C3FE-4EA1-9643-0C7230F494A1}" : //COMA-iregister2
			    Case "{A8927A41-D3CE-11D1-8472-006008B0E5CA}" : //COMA-icatalogtableinfo
			    Case "{182C40FA-32E4-11D0-818B-00A0C9231C29}" : //COMA-icatalogsession
			    Case "{CFADAC84-E12C-11D1-B34C-00C04F990D54}" : //COMA-iexport
			    Case "{1F7B1697-ECB2-4CBB-8A0E-75C427F4A6F0}" : //COMA-iimport2
			    Case "{47CDE9A1-0BF6-11D2-8016-00C04FB9988E}" : //COMA-icapabilitysupport
			    Case "{6C935649-30A6-4211-8687-C4C83E5FE1C7}" : //COMA-icontainercontrol2
			    Case "{F131EA3E-B7BE-480E-A60D-51CB2785779E}" : //COMA-iexport2
			    Case "{C726744E-5735-4F08-8286-C510EE638FB6}" : //COMA-ICatalogUtils2
			    Case "{456129E2-1078-11D2-B0F9-00805FC73204}" : //COMA-icatalogutils
			    Case "{3F3B1B86-DBBE-11D1-9DA6-00805F85CFE3}" : //COMA-icontainercontrol
			    Case "{7F43B400-1A0E-4D57-BBC9-6B0C65F7A889}" : //COMA-ialternatelaunch
			    Case "{8DB2180E-BD29-11D1-8B7E-00C04FD7A924}" : //COMA-iregister
			    Case "{0E3D6631-B46B-11D1-9D2D-006008B0E5CA}" : //COMA-icatalogtablewrite
			    Case "{1D118904-94B3-4A64-9FA6-ED432666A7B9}" : //COMA-icatalog64bitsupport
			    Case "{98315903-7BE5-11D2-ADC1-00A02463D6E7}" : //COMA-IReplicationUtil
						[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/COMA encrypted/fragmented payload" : "COMA protocol"]
						COMA		COMA;
				// COMPTS interfaces ----------------------------------------------------------
			    Case "{4E6CDCC9-FB25-4FD5-9CC5-C9F4B6559CEC}" : //COMPTS-icomtrackinginfoevents
			    Case "{B60040E0-BCF3-11D1-861D-0080C729264D}" : //COMPTS-igettrackingdata
						[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/COMPTS encrypted/fragmented payload" : "COMPTS protocol"]
						COMPTS		COMPTS;
				// CertAdmin interfaces ----------------------------------------------------------
				Case "{D99E6E71-FC88-11D0-B498-00A0C90312F3}" : //ICertAdminD
				Case "{7FE0D935-DDA6-443F-85D0-1CFB58FE41DD}" : //ICertAdminD2
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/CertAdmin encrypted/fragmented payload" : "CertAdmin protocol"]
						CSRA		CSRA;
				// DMR interfaces ----------------------------------------------------------------
				Case "{D2D79DF7-3400-11D0-B40B-00AA005FF586}": // Disk Management Remote - IDMNotify Interface 
				Case "{3A410F21-553F-11D1-8E5E-00A0C92C9D5D}": // Disk Management Remote - IDMRemoteServer Interface 
				Case "{D2D79DF5-3400-11D0-B40B-00AA005FF586}": // Disk Management Remote - IVolumeClient Interface 
				Case "{4BDAFC52-FE6A-11D2-93F8-00105A11164A}": // Disk Management Remote - IVolumeClient2 Interface 
				Case "{135698D2-3A37-4D26-99DF-E2BB6AE3AC61}": // Disk Management Remote - IVolumeClient3 Interface 
				Case "{DEB01010-3A37-4D26-99DF-E2BB6AE3AC61}": // Disk Management Remote - IVolumeClient4 Interface 
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/DMRP encrypted/fragmented payload" : "DMRP protocol"]
					DMRP		DMRP;
				// VDS interfaces ----------------------------------------------------------------
				Case "{118610B7-8D94-4030-B5B8-500889788E4E}": // Disk Management Remote - IEnumVdsObject Interface 
				Case "{6E6F6B40-977C-4069-BDDD-AC710059F8C0}": // Disk Management Remote - IVdsAdvanceDisk Interface
				Case "{8326CD1D-CF59-4936-B786-5EFC08798E25}": // Disk Management Remote - IVdsAdviseSink Interface 
				Case "{D5D23B6D-5A55-4492-9889-397A3C2D2DBC}": // Disk Management Remote - IVdsAsync Interface 
				Case "{07E5C822-F00C-47A1-8FCE-B244DA56FD06}": // Disk Management Remote - IVdsDisk Interface 
				Case "{2ABD757F-2851-4997-9A13-47D2A885D6CA}": // Disk Management Remote - IVdsHbaPort Interface 
				Case "{B07FEDD4-1682-4440-9189-A39B55194DC5}": // Disk Management Remote - IVdsIscsiInitiatorAdapter Interface 
				Case "{38A0A9AB-7CC8-4693-AC07-1F28BD03C3DA}": // Disk Management Remote - IVdsIscsiInitiatorPortal Interface 
				Case "{3B69D7F5-9D94-4648-91CA-79939BA263BF}": // Disk Management Remote - IVdsPack Interface 
				Case "{10C5E575-7984-4E81-A56B-431F5F92AE42}": // Disk Management Remote - IVdsProvider Interface 
				Case "{0316560B-5DB4-4ED9-BBB5-213436DDC0D9}": // Disk Management Remote - IVdsRemovable Interface 
				Case "{0818A8EF-9BA9-40D8-A6F9-E22833CC771E}": // Disk Management Remote - IVdsService Interface 
				Case "{0AC13689-3134-47C6-A17C-4669216801BE}": // Disk Management Remote - IVdsServiceHba Interface 
				Case "{14FBE036-3ED7-4E10-90E9-A5FF991AFF01}": // Disk Management Remote - IVdsServiceIscsi Interface 
				Case "{E0393303-90D4-4A97-AB71-E9B671EE2729}": // Disk Management Remote - IVdsServiceLoader Interface 
				Case "{B6B22DA8-F903-4BE7-B492-C09D875AC9DA}": // Disk Management Remote - IVdsServiceUninstallDisk Interface 
				Case "{83BFB87F-43FB-4903-BAA6-127F01029EEC}": // Disk Management Remote - IVdsSubSystemImportTarget Interface 
				Case "{9AA58360-CE33-4F92-B658-ED24B14425B8}": // Disk Management Remote - IVdsSwProvider Interface 
				Case "{88306BB2-E71F-478C-86A2-79DA200A0F11}": // Disk Management Remote - IVdsVolume Interface 
				Case "{EE2D5DED-6236-4169-931D-B9778CE03DC6}": // Disk Management Remote - IVdsVolumeMF Interface 
				Case "{4DAA0135-E1D1-40F1-AAA5-3CC1E53221C3}": // Disk Management Remote - IVdsVolumePlex Interface 
				Case "{13B50BFF-290A-47DD-8558-B7C58DB1A71A}": // Disk Management Remote - IVdsPack2 Interface 
				Case "{40F73C8B-687D-4A13-8D96-3D7F2E683936}": // Disk Management Remote - IVdsDisk2 Interface 
				Case "{9723F420-9355-42DE-AB66-E31BB15BEEAC}": // Disk Management Remote - IVdsAdvancedDisk2 Interface 
				Case "{4DBCEE9A-6343-4651-B85F-5E75D74D983C}": // Disk Management Remote - IVdsVolumeMF2 Interface 
				Case "{538684E0-BA3D-4BC0-ACA9-164AFF85C2A9}": // Disk Management Remote - IVdsDiskPartitionMF Interface 
				Case "{D68168C9-82A2-4F85-B6E9-74707C49A58F}": // Disk Management Remote - IVdsVolumeShrink Interface 
				Case "{1BE2275A-B315-4F70-9E44-879B3A2A53F2}": // Disk Management Remote - IVdsVolumeOnline Interface 
				Case "{B481498C-8354-45F9-84A0-0BDD2832A91F}": // Disk Management Remote - IVdsVdProvider Interface
				Case "{4AFC3636-DB01-4052-80C3-03BBCB8D3C69}": // Disk Management Remote - IVdsServiceInitialization Interface
				Case "{6788FAF9-214E-4B85-BA59-266953616E09}": // Disk Management Remote - IVdsVolumeMF3 Interface
				Case "{D99BDAAE-B13A-4178-9FDB-E27F16B4603E}": // Disk Management Remote - IVdsHwProvider Interface
				Case "{90681B1D-6A7F-48E8-9061-31B7AA125322}": // Disk Management Remote - IVdsDiskOnline Interface
				Case "{FC5D23E8-A88B-41A5-8DE0-2D2F73C5A630}": // Disk Management Remote - IVdsServiceSAN Interface
				Case "{1E062B84-E5E6-4B4B-8A25-67B81E8F13E8}": // Disk Management Remote - IVdsVDisk Interface
				Case "{9CBE50CA-F2D2-4BF4-ACE1-96896B729625}": // Disk Management Remote - IVdsDiskPartitionMF2 Interface
				Case "{9882F547-CFC3-420B-9750-00DFBEC50662}": // Disk Management Remote - IVdsCreatePartitionEx Interface
				Case "{8F4B2F5D-EC15-4357-992F-473EF10975B9}": // Disk Management Remote - IVdsDisk3 Interface
				Case "{72AE6713-DCBB-4A03-B36B-371F6AC6B53D}": // Disk Management Remote - IVdsVolume2 Interface
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/VDS encrypted/fragmented payload" : "VDS protocol"]
					VDS		VDS;
				// FSRM interfaces ----------------------------------------------------------------
				Case "{F76FBF3B-8DDD-4B42-B05A-CB1C3FF1FEE8}": //FSRM - IFsrmCollection
				Case "{1BB617B8-3886-49DC-AF82-A6C90FA35DDA}": //FSRM - IFsrmMutableCollection
				Case "{96DEB3B5-8B91-4A2A-9D93-80A35D8AA847}": //FSRM - IFsrmCommittableCollection
				Case "{6CD6408A-AE60-463B-9EF1-E117534D69DC}": //FSRM - IFsrmAction
				Case "{D646567D-26AE-4CAA-9F84-4E0AAD207FCA}": //FSRM - IFsrmActionEmail
				Case "{8276702F-2532-4839-89BF-4872609A2EA4}": //FSRM - IFsrmActionEmail2
				Case "{2DBE63C4-B340-48A0-A5B0-158E07FC567E}": //FSRM - IFsrmActionReport
				Case "{4C8F96C3-5D94-4F37-A4F4-F56AB463546F}": //FSRM - IFsrmActionEventLog
				Case "{12937789-E247-4917-9C20-F3EE9C7EE783}": //FSRM - IFsrmActionCommand
				Case "{22BCEF93-4A3F-4183-89F9-2F8B8A628AEE}": //FSRM - IFsrmObject
				Case "{F411D4FD-14BE-4260-8C40-03B7C95E608A}": //FSRM - IFsrmSetting
				Case "{6F4DBFFF-6920-4821-A6C3-B7E94C1FD60C}": //FSRM - IFsrmPathMapper
				Case "{EFCB0AB1-16C4-4A79-812C-725614C3306B}": //FSRM - IFsrmExportImport
				Case "{39322A2D-38EE-4D0D-8095-421A80849A82}": //FSRM - IFsrmDerivedObjectsResult
				Case "{1568A795-3924-4118-B74B-68D8F0FA5DAF}": //FSRM - IFsrmQuotaBase
				Case "{42DC3511-61D5-48AE-B6DC-59FC00C0A8D6}": //FSRM - IFsrmQuotaObject
				Case "{377F739D-9647-4B8E-97D2-5FFCE6D759CD}": //FSRM - IFsrmQuota
				Case "{F82E5729-6ABA-4740-BFC7-C7F58F75FB7B}": //FSRM - IFsrmAutoApplyQuota
				Case "{8BB68C7D-19D8-4FFB-809E-BE4FC1734014}": //FSRM - IFsrmQuotaMaagern
				Case "{A2EFAB31-295E-46BB-B976-E86D58B52E8B}": //FSRM - IFsrmQuotaTemplate
				Case "{9A2BF113-A329-44CC-809A-5C00FCE8DA40}": //FSRM - IFsrmQuotaTemplateImported
				Case "{4173AC41-172D-4D52-963C-FDC7E415F717}": //FSRM - IFsrmQuotaTemplateManager
				Case "{8DD04909-0E34-4D55-AFAA-89E1F1A1BBB9}": //FSRM - IFsrmFileGroup
				Case "{AD55F10B-5F11-4BE7-94EF-D9EE2E470DED}": //FSRM - IFsrmFileGroupImported
				Case "{426677D5-018C-485C-8A51-20B86D00BDC4}": //FSRM - IFsrmFileGroupManager
				Case "{F3637E80-5B22-4A2B-A637-BBB642B41CFC}": //FSRM - IFsrmFileScreenBase
				Case "{5F6325D3-CE88-4733-84C1-2D6AEFC5EA07}": //FSRM - IFsrmFileScreen
				Case "{BEE7CE02-DF77-4515-9389-78F01C5AFC1A}": //FSRM - IFsrmFileScreenException
				Case "{FF4FA04E-5A94-4BDA-A3A0-D5B4D3C52EBA}": //FSRM - IFsrmFileScreenManager
				Case "{205BEBF8-DD93-452A-95A6-32B566B35828}": //FSRM - IFsrmFileScreenTemplate
				Case "{E1010359-3E5D-4ECD-9FE4-EF48622FDF30}": //FSRM - IFsrmFileScreenTemplateImported
				Case "{CFE36CBA-1949-4E74-A14F-F1D580CEAF13}": //FSRM - IFsrmFileScreenTemplateManager
				Case "{27B899FE-6FFA-4481-A184-D3DAADE8A02B}": //FSRM - IFsrmReportManager
				Case "{38E87280-715C-4C7D-A280-EA1651A19FEF}": //FSRM - IFsrmReportJob
				Case "{D8CC81D9-46B8-4FA4-BFA5-4AA9DEC9B638}": //FSRM - IFsrmReport
				Case "{6879CAF9-6617-4484-8719-71C3D8645F94}": //FSRM - IFsrmReportScheduler
				Case "{EE321ECB-D95E-48E9-907C-C7685A013235}": //FSRM - IFsrmFileManagementJobManager
				Case "{0770687E-9F36-4D6F-8778-599D188461C9}": //FSRM - IFsrmFileManagementJob
				Case "{326AF66F-2AC0-4F68-BF8C-4759F054FA29}": //FSRM - IFsrmPropertyCondition
				Case "{EDE0150F-E9A3-419C-877C-01FE5D24C5D3}": //FSRM - IFsrmPropertyDefinition
				Case "{4A73FEE4-4102-4FCC-9FFB-38614F9EE768}": //FSRM - IFsrmProperty
				Case "{CB0DF960-16F5-4495-9079-3F9360D831DF}": //FSRM - IFsrmRule
				Case "{AFC052C2-5315-45AB-841B-C6DB0E120148}": //FSRM - IFsrmClassificationRule
				Case "{515C1277-2C81-440E-8FCF-367921ED4F59}": //FSRM - IFsrmPipelineModuleDefinition
				Case "{BB36EA26-6318-4B8C-8592-F72DD602E7A5}": //FSRM - IFsrmClassifierModuleDefinition
				Case "{B15C0E47-C391-45B9-95C8-EB596C853F3A}": //FSRM - IFsrmClassificationManager
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/FSRM encrypted/fragmented payload" : "FSRM protocol"]
					FSRM		FSRM;
				// IISSvcCtl interface ----------------------------------------------------------------
				Case "{E8FB8620-588F-11D2-9D61-00C04F79C5FE}": // IISSvcCtl Interface
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/IISS encrypted/fragmented payload" : "IISS protocol"]
					IISS		IISS;			
				// IMngdObj interfaces ----------------------------------------------------------------		
				Case "{8165B19E-8D3A-4D0B-80C8-97DE310DB583}": // IMngdObj - IServicedComponentInfo Interface
				Case "{C3FCC19E-A970-11D2-8B5A-00A0C9B7C9C4}": // IMngdObj - IManagedObject Interface
				Case "{6619A740-8154-43BE-A186-0319578E02DB}": // IMngdObj - IRemoteDispatch Interface
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/IMngdObj encrypted/fragmented payload" : "IMngdObj protocol"]
					IMngdObj		IMngdObj;
				// IMSAdminBaseW interfaces ----------------------------------------------------------------
				Case "{70B51430-B6CA-11D0-B9B9-00A0C922E750}": // IMSAdminBaseW - IMSAdminBaseW Interface 
				Case "{8298D101-F992-43B7-8ECA-5052D885B995}": // IMSAdminBaseW - IMSAdminBase2W Interface 
				Case "{F612954D-3B0B-4C56-9563-227B7BE624B4}": // IMSAdminBaseW - IMSAdminBase3W Interface 
				Case "{29822AB8-F302-11D0-9953-00C04FD919C1}": //IWamAdmin2
				Case "{29822AB7-F302-11D0-9953-00C04FD919C1}": //IWamAdmin
				Case "{7C4E1804-E342-483D-A43E-A850CFCC8D18}": //IIISApplicationAdmin
				Case "{BD0C73BC-805B-4043-9C30-9A28D64DD7D2}": //IIISCertObj
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/IMSAdminBaseW encrypted/fragmented payload" : "IMSAdminBaseW protocol"]
					IMSAdminBaseW		IMSAdminBaseW;
				// OCSPA Interfaces --------------------------------------------------------------
				Case "{784B693D-95F3-420B-8126-365C098659F2}":
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/Ocspa encrypted/fragmented payload" : "Ocspa protocol"]
					OCSPA		Ocspa;
				// OleAut Interfaces --------------------------------------------------------------
				Case "{00020404-0000-0000-C000-000000000046}" : // OleAutomation - IEnumVARIANT
				Case "{00020400-0000-0000-C000-000000000046}" : // OleAutomation - IDispatch
				Case "{0000002F-0000-0000-C000-000000000046}" : // IID_IRecordInfo
				Case "{00020403-0000-0000-C000-000000000046}" : // IID_ITypeComp
				Case "{00020401-0000-0000-C000-000000000046}" : // IID_ITypeInfo
				Case "{00020412-0000-0000-C000-000000000046}" : // IID_ITypeInfo2
				Case "{00020402-0000-0000-C000-000000000046}" : // IID_ITypeLib
				Case "{00020411-0000-0000-C000-000000000046}" : // IID_ITypeLib2
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/OleAut encrypted/fragmented payload" : "OleAut protocol"]
					OleAut		OleAut;
				// PLA Interfaces ----------------------------------------------------------------
				Case "{038374FF-098B-11D8-9414-505054503030}" : //PLA IDataCollector
				Case "{03837506-098B-11D8-9414-505054503030}" : //PLA IPerformanceCounterDataCollector
				Case "{03837514-098B-11D8-9414-505054503030}" : //PLA IConfigurationDataCollector
				Case "{03837516-098B-11D8-9414-505054503030}" : //PLA IAlertDataCollector
				Case "{0383750B-098B-11D8-9414-505054503030}" : //PLA ITraceDataCollector
				Case "{0383751A-098B-11D8-9414-505054503030}" : //PLA IApiTracingDataCollector
				Case "{03837512-098B-11D8-9414-505054503030}" : //PLA ITraceDataProvider
				Case "{0383753A-098B-11D8-9414-505054503030}" : //PLA ISchedule
				Case "{03837510-098B-11D8-9414-505054503030}" : //PLA ITraceDataProviderCollection
				Case "{0383753D-098B-11D8-9414-505054503030}" : //PLA IScheduleCollection
				Case "{03837502-098B-11D8-9414-505054503030}" : //PLA IDataCollectorCollection
				Case "{03837524-098B-11D8-9414-505054503030}" : //PLA IDataCollectorSetCollection
				Case "{03837533-098B-11D8-9414-505054503030}" : //PLA IValueMapItem
				Case "{03837534-098B-11D8-9414-505054503030}" : //PLA IValueMap
				Case "{03837520-098b-11d8-9414-505054503030}" : //PLA IDataCollectorSet
				Case "{03837541-098b-11d8-9414-505054503030}" : //PLA IDataManager
				Case "{03837543-098b-11d8-9414-505054503030}" : //PLA IFolderAction
				Case "{03837544-098b-11d8-9414-505054503030}" : //PLA IFolderActionCollection
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/PLA encrypted/fragmented payload" : "PLA protocol"]
					PLA PLA;
				// RAPR Interfaces ----------------------------------------------------------------
				Case "{833E4100-AFF7-4AC3-AAC2-9F24C1457BCE}" : // Remote Assistance Remote - IPCHCollection
				Case "{833E4200-AFF7-4AC3-AAC2-9F24C1457BCE}" : // Remote Assistance Remote - IPCHService
				Case "{833E41AA-AFF7-4AC3-AAC2-9F24C1457BCE}" : // Remote Assistance Remote - ISAFSession
				Case "{F120A684-B926-447F-9DF4-C966CB785648}" : // Remote Assistance Remote - IRASrv
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/RAPRBIN encrypted/fragmented payload" : "RAPRBIN protocol"]
					RAPRBIN		RAPRBIN;
				// RSM interfaces ----------------------------------------------------------------
				Case "{4E934F30-341A-11D1-8FB1-00A024CB6019}": // Removable Storage Manager - INtmsLibraryControl1 Interface 
				Case "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}": // Removable Storage Manager - INtmsMediaServices1 Interface 
				Case "{BB39332C-BFEE-4380-AD8A-BADC8AFF5BB6}": // Removable Storage Manager - INtmsNotifySink Interface 
				Case "{69AB7050-3059-11D1-8FAF-00A024CB6019}": // Removable Storage Manager - INtmsObjectInfo1 Interface
				Case "{B057DC50-3059-11D1-8FAF-00A024CB6019}": // Removable Storage Manager - INtmsObjectManagement1 Interface 
				Case "{8DA03F40-3419-11D1-8FB1-00A024CB6019}": // Removable Storage Manager - INtmsSession1 Interface 
				Case "{879C8BBE-41B0-11d1-BE11-00C04FB6BF70}": // Removable Storage Manager - IClientSink Interface 
				Case "{DB90832F-6910-4D46-9F5E-9FD6BFA73903}": // Removable Storage Manager - INtmsLibraryControl2 Interface 
				Case "{895A2C86-270D-489D-A6C0-DC2A9B35280E}": // Removable Storage Manager - INtmsObjectManagement2 Interface 
				Case "{3BBED8D9-2C9A-4B21-8936-ACB2F995BE6C}": // Removable Storage Manager - INtmsObjectManagement3 Interface 
				Case "{7D07F313-A53F-459A-BB12-012C15B1846E}": // Removable Storage Manager - IRobustNtmsMediaServices1 Interface 
				Case "{081E7188-C080-4FF3-9238-29F66D6CABFD}": // Removable Storage Manager - IMessenger Interface 
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/RSM encrypted/fragmented payload" : "RSM protocol"]
					RSM		RSM;
				// SCMP interfaces ----------------------------------------------------------------
				Case "{FA7DF749-66E7-4986-A27F-E2F04AE53772}": //SCMP - IVssSnapshotMgmt
				Case "{AE1C7110-2F60-11d3-8A39-00C04F72D8E3}": //SCMP - IVssEnumObject
				Case "{214A0F28-B737-4026-B847-4F9E37D79529}": //SCMP - IVssDifferentialSoftwareSnapshotMgmt
				Case "{01954E6B-9254-4e6e-808C-C9E05D007696}": //SCMP - IVssEnumMgmtObject
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/SCMP encrypted/fragmented payload" : "SCMP protocol"]
					SCMP	SCMP;
				// WCCE interfaces ----------------------------------------------------------------
				Case "{D99E6E70-FC88-11D0-B498-00A0C90312F3}": // Windows Client Certificate Services - ICertRequestD Interface
				Case "{5422FD3A-D4B8-4CEF-A12E-E87D4CA22E90}": // Windows Client Certificate Services - ICertRequestD2 Interface
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/WCCS encrypted/fragmented payload" : "WCCS protocol"]
					WCCE		WCCE;
				// WMI interfaces ----------------------------------------------------------------
				Case "{027947E1-D731-11CE-A357-000000000001}": // Windows Management Instrumentation - IEnumWbemClassObject Interface
				Case "{1CFABA8C-1523-11D1-AD79-00C04FD8FDFF}": // Windows Management Instrumentation - IUnsecuredApartment Interface
				Case "{C49E32C7-BC8B-11D2-85D4-00105A1F8304}": // Windows Management Instrumentation - IWbemBackupRestore Interface
				Case "{A359DEC5-E813-4834-8A2A-BA7F1D777D76}": // Windows Management Instrumentation - IWbemBackupRestoreEx Interface
				Case "{44ACA675-E8FC-11D0-A07C-00C04FB68820}": // Windows Management Instrumentation - IWbemCallResult Interface
				Case "{7C857801-7381-11CF-884D-00AA004B2E24}": // Windows Management Instrumentation - IWbemObjectSink Interface
				Case "{9556DC99-828C-11CF-A37E-00AA003240C7}": // Windows Management Instrumentation - IWbemServices Interface
				Case "{B7B31DF9-D515-11D3-A11C-00105A1F515A}": // Windows Management Instrumentation - IWbemShutdown Interface
				Case "{E246107A-B06E-11D0-AD61-00C04FD8FDFF}": // Windows Management Instrumentation - IWbemEventConsumerProvider Interface
				Case "{17CF534A-D8A3-4AD0-AC92-5E3D01717151}": // Windows Management Instrumentation - IWbemEventConsumerProviderEx Interface
				Case "{E245105B-B06E-11D0-AD61-00C04FD8FDFF}": // Windows Management Instrumentation - IWbemEventProvider Interface
				Case "{580ACAF8-FA1C-11D0-AD72-00C04FD8FDFF}": // Windows Management Instrumentation - IWbemEventProviderQuerySink Interface
				Case "{631F7D96-D993-11D2-B339-00105A1F4AAF}": // Windows Management Instrumentation - IWbemEventProviderSecurity Interface
				Case "{3AE0080A-7E3A-4366-BF89-0FEEDC931659}": // Windows Management Instrumentation - IWbemEventSink Interface
				Case "{CE61E841-65BC-11D0-B6BD-00AA003240C7}": // Windows Management Instrumentation - IWbemPropertyProvider Interface
				Case "{631F7D97-D993-11D2-B339-00105A1F4AAF}": // Windows Management Instrumentation - IWbemProviderIdentity Interface
				Case "{1BE41572-91DD-11D1-AEB2-00C04FB68820}": // Windows Management Instrumentation - IWbemProviderInit Interface
				Case "{1BE41571-91DD-11D1-AEB2-00C04FB68820}": // Windows Management Instrumentation - IWbemProviderInitSink Interface
				Case "{E246107B-B06E-11D0-AD61-00C04FD8FDFF}": // Windows Management Instrumentation - IWbemUnboundObjectSink Interface
				Case "{D8EC9CB1-B135-4F10-8B1B-C7188BB0D186}": // Windows Management Instrumentation - IWbemConnectorLogin Interface
				Case "{F309AD18-D86A-11D0-A075-00C04FB68820}": // Windows Management Instrumentation - IWbemLevel1Login Interface
				Case "{25411283-46FC-4326-8DF2-FF5D34B2DFEF}": // Windows Management Instrumentation - _IWbemConfigureRefreshingSvcs Interface
				Case "{6963B029-B969-40AA-9180-2B2F84075973}": // Windows Management Instrumentation - _IWbemFetchRefresherMgr Interface
				Case "{B60EF4F1-A411-462B-B51E-477CBDBB90B4}": // Windows Management Instrumentation - _IWbemRefresherMgr Interface
				Case "{BAC6B661-167E-4957-AD77-286AB256585E}": // Windows Management Instrumentation - _IWmiDynamicPropertyResolver Interface
				Case "{48FF3109-A366-4B56-B340-01FAE758BA64}": // Windows Management Instrumentation - _IWmiProviderAbnormalShutdown Interface
				Case "{F0E4EDDE-475A-498A-93D7-D4347F68A8F3}": // Windows Management Instrumentation - _IWmiProviderCache Interface
				Case "{6B3FC272-BF37-4968-933A-6DF9222A2607}": // Windows Management Instrumentation - _IWmiProviderConfiguration Interface
				Case "{21CD80A2-B305-4F37-9D4C-4534A8D9B568}": // Windows Management Instrumentation - _IWmiProviderFactory Interface
				Case "{06413D98-405C-4A5A-8D6F-19B8B7C6ACF7}": // Windows Management Instrumentation - _IWmiProviderFactoryInitialize Interface
				Case "{07435309-D440-41B7-83F3-EB82DB6C622F}": // Windows Management Instrumentation - _IWmiProviderHost Interface
				Case "{5FBA5051-3124-4112-B723-46BFBAF1D622}": // Windows Management Instrumentation - _IWmiProviderInitialize Interface
				Case "{484E3ECE-1F81-4591-B9D4-943BA13B609D}": // Windows Management Instrumentation - _IWmiProviderLoad Interface
				Case "{EB658B8A-7A64-4DDC-9B8D-A92610DB0206}": // Windows Management Instrumentation - _IWmiProviderQuota Interface
				Case "{FEC1B0AC-5808-4033-A915-C0185934581E}": // Windows Management Instrumentation - _IWmiProviderSite Interface
				Case "{B1B55910-8BA0-47A5-A16E-2B733B1D987C}": // Windows Management Instrumentation - _IWmiProviderStack Interface
				Case "{41AA40E6-2FBA-4E80-ADE9-34306567206D}": // Windows Management Instrumentation - _IWmiProviderSubsystemRegistrar Interface
				Case "{E8107BDF-BAAF-4C7C-BB5F-9D732E8D8F07}": // Windows Management Instrumentation - _IWmiProvSS Interface
				Case "{2A504CA2-CA90-4731-87BC-6E99CA2019AF}": // Windows Management Instrumentation - _IWmiProvSSSink Interface
				Case "{AC9EA02A-2C8A-4ACD-B562-D7E8EBEE8E8E}": // Windows Management Instrumentation - Internal_IEnumWbemClassObject Interface
				Case "{854D745C-6742-42C0-8BB9-01EC466B6E87}": // Windows Management Instrumentation - Internal_IWbemEventConsumerProvider Interface
				Case "{88F3781C-6902-4647-9A6B-A74F450AF861}": // Windows Management Instrumentation - Internal_IWbemEventConsumerProviderEx Interface
				Case "{FD450835-CF1B-4C87-9FD2-5E0D42FDE081}": // Windows Management Instrumentation - Internal_IWbemEventProvider Interface
				Case "{8A0DC377-A9D3-41CB-BD69-AE1FDAF2DC68}": // Windows Management Instrumentation - Internal_IWbemEventProviderQuerySink Interface
				Case "{DF2373F5-EFB2-475C-AD58-3102D61967D4}": // Windows Management Instrumentation - Internal_IWbemEventProviderSecurity Interface
				Case "{2DB9FA90-9973-46CF-B310-9865B644699D}": // Windows Management Instrumentation - Internal_IWbemObjectSink Interface
				Case "{11CAA957-4E80-474E-A819-7FD72148ADA9}": // Windows Management Instrumentation - Internal_IWbemPropertyProvider Interface
				Case "{2B322B6E-A9DF-44E3-97BF-259E3583FDA4}": // Windows Management Instrumentation - Internal_IWbemProviderIdentity Interface
				Case "{6919DD07-1637-4611-A8A7-C16FAC5B2D53}": // Windows Management Instrumentation - Internal_IWbemProviderInit Interface
				Case "{F50A28CF-5C9C-4F7E-9D80-E25E16E18C59}": // Windows Management Instrumentation - Internal_IWbemServices Interface
				Case "{A210BFE9-C9F7-4919-B114-0D98B3D5341E}": // Windows Management Instrumentation - Internal_IWbemUnboundObjectSink Interface
				Case "{0FC8C622-1728-4149-A57F-AD19D0970710}": // Windows Management Instrumentation - Internal_IWmiProviderConfiguration Interface
				Case "{6468FE15-412D-11D3-B350-00104BCC4B4A}": // Windows Management Instrumentation - IWbemCreateSecondaryStub Interface
				Case "{755F9DA7-7508-11D1-AD94-00C04FD8FDFF}": // Windows Management Instrumentation - IWbemEventProviderRequirements Interface
				Case "{1C1C45EE-4395-11D2-B60B-00104B703EFD}": // Windows Management Instrumentation - IWbemFetchSmartEnum Interface
				Case "{37196B39-CCCF-11D2-B35C-00105A1F8177}": // Windows Management Instrumentation - IWbemFetchSmartMultiTarget Interface
				Case "{60E512D4-C47B-11D2-B338-00105A1F4AAF}": // Windows Management Instrumentation - IWbemFilterProxy Interface
				Case "{6C19BE34-7500-11D1-AD94-00C04FD8FDFF}": // Windows Management Instrumentation - IWbemFilterStub Interface
				Case "{D4781CD6-E5D3-44DF-AD94-930EFE48A887}": // Windows Management Instrumentation - IWbemLoginClientID Interface
				Case "{541679AB-2E5F-11D3-B34E-00104BCC4B4A}": // Windows Management Instrumentation - IWbemLoginHelper Interface
				Case "{6C19BE32-7500-11D1-AD94-00C04FD8FDFF}": // Windows Management Instrumentation - IWbemMetaData Interface
				Case "{755F9DA6-7508-11D1-AD94-00C04FD8FDFF}": // Windows Management Instrumentation - IWbemMultiTarget Interface
				Case "{2C9273E0-1DC3-11D3-B364-00105A1F8177}": // Windows Management Instrumentation - IWbemRefreshingServices Interface
				Case "{F1E9C5B2-F59B-11D2-B362-00105A1F8177}": // Windows Management Instrumentation - IWbemRemoteRefresher Interface
				Case "{37196B38-CCCF-11D2-B35C-00105A1F8177}": // Windows Management Instrumentation - IWbemSmartMultiTarget Interface
				Case "{423EC01E-2E35-11D2-B604-00104B703EFD}": // Windows Management Instrumentation - IWbemWCOSmartEnum Interface
				Case "{C10B4772-4DA0-11D2-A2F5-00C04F86FB7D}": // Windows Management Instrumentation - IWinmgmtMofCompiler Interface
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/WMI encrypted/fragmented payload" : "WMI protocol"]
					WMI		WMI;
				// WSRM interfaces ----------------------------------------------------------------
				Case "{BC681469-9DD9-4BF4-9B3D-709F69EFE431}": //WSRM - iwrmresourcegroup
				Case "{59602EB6-57B0-4FD8-AA4B-EBF06971FE15}": //WSRM - iwrmpolicy
				Case "{C5CEBEE2-9DF5-4CDD-A08C-C2471BC144B4}": //WSRM - iresourcemanager
				Case "{4F7CA01C-A9E5-45B6-B142-2332A1339C1D}": //WSRM - iwrmaccounting
				Case "{F31931A9-832D-481C-9503-887A0E6A79F0}": //WSRM - iwrmprotocol
				Case "{21546AE8-4DA5-445E-987F-627FEA39C5E8}": //WSRM - iwrmconfig
				Case "{481E06CF-AB04-4498-8FFE-124A0A34296D}": //WSRM - iwrmcalendar
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/WMI encrypted/fragmented payload" : "WMI protocol"]
					WSRM		WSRM;
				// IISA interfaces ----------------------------------------------------------------
				Case "{70184AC9-7673-4770-96B1-445CE035CF70}": //IISA - IAppHostMethodExtension
				Case "{31A83EA0-C0E4-4A2C-8A01-353CC2A4C60A}": //IISA - IAppHostMappingExtension
				Case "{0191775E-BCFF-445A-B4F4-3BDDA54E2816}": //IISA - IAppHostPropertyCollection
				Case "{9BE77978-73ED-4A9A-87FD-13F09FEC1B13}": //IISA - IAppHostAdminManager
				Case "{450386DB-7409-4667-935E-384DBBEE2A9E}": //IISA - IISAIAppHostPropertySchema
				Case "{370AF178-7758-4DAD-8146-7391F6E18585}": //IISA - IAppHostConfigLocation
				Case "{ADA4E6FB-E025-401E-A5D0-C3134A281F07}": //IISA - IAppHostConfigFile
				Case "{8BED2C68-A5FB-4B28-8581-A0DC5267419F}": //IISA - IAppHostPropertySchemaCollection
				Case "{832A32F7-B3EA-4B8C-B260-9A2923001184}": //IISA - IAppHostConfigLocationCollection
				Case "{ED35F7A1-5024-4E7B-A44D-07DDAF4B524D}": //IISA - IAppHostProperty
				Case "{FA7660F6-7B3F-4237-A8BF-ED0AD0DCBBD9}": //IISA - IAppHostWritableAdminManager
				Case "{64FF8CCC-B287-4DAE-B08A-A72CBF45F453}": //IISA - IAppHostElement
				Case "{C8550BFF-5281-4B1E-AC34-99B6FA38464D}": //IISA -	IAppHostElementCollection	
				Case "{09829352-87C2-418D-8D79-4133969A489D}": //IISA - IAppHostChangeHandler
				Case "{B80F3C42-60E0-4AE0-9007-F52852D3DBED}": //IISA - IAppHostMethodInstance
				Case "{E7927575-5CC3-403B-822E-328A6B904BEE}": //IISA - IAppHostPathMapper
				Case "{0F80E901-8F4C-449A-BF90-13D5D082F187}": //IISA - IAppHostPathMapper2
				Case "{8F6D760F-F0CB-4D69-B5F6-848B33E9BDC6}": //IISA - IAppHostConfigManager
				Case "{0716CAF8-7D05-4A46-8099-77594BE91394}": //IISA - IAppHostConstantValue
				Case "{B7D381EE-8860-47A1-8AF4-1F33B2B1F325}": //IISA - IAppHostSectionDefinitionCollection
				Case "{5B5A68E6-8B9F-45E1-8199-A95FFCCDFFFF}": //IISA - IAppHostConstantValueCollection
				Case "{0DD8A158-EBE6-4008-A1D9-B7ECC8F1104B}": //IISA - IAppHostSectionGroup
				Case "{7883CA1C-1112-4447-84C3-52FBEB38069D}": //IISA - IAppHostMethod
				Case "{DE095DB1-5368-4D11-81F6-EFEF619B7BCF}": //IISA - IAppHostCollectionSchema
				Case "{EF13D885-642C-4709-99EC-B89561C6BC69}": //IISA - IAppHostElementSchema
				Case "{D6C7CD8F-BB8D-4F96-B591-D3A5F1320269}": //IISA - IAppHostMethodCollection
				Case "{518EB37D-1FF4-42DD-86C3-3140BC35B823}": //IISA - IAppHostElementExtension
				Case "{88E220F3-33E8-4534-AFAC-B4A98ECCF9AE}": //IISA - IAppHostPropertyExtension
				Case "{08A90F5F-0702-48D6-B45F-02A9885A9768}": //IISA - IAppHostChildElementCollection
				Case "{4DFA1DF3-8900-4BC7-BBB5-D1A458C52410}": //IISA - IAppHostConfigException
				Case "{0344CDDA-151E-4CBF-82DA-66AE61E97754}": //IISA - IAppHostElementSchemaCollection
				Case "{C5C04795-321C-4014-8FD6-D44658799393}": //IISA - IAppHostSectionDefinition
				Case "{2D9915FB-9D42-4328-B782-1B46819FAB9E}": //IISA - IAppHostMethodSchema
				Case "{EAFE4895-A929-41EA-B14D-613E23F62B71}": //IISA - IAppHostPropertyException
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/IISA encrypted/fragmented payload" : "IISA protocol"]
					IISA		IISA;
				// DCOM interfaces ----------------------------------------------------------------
				Case "{00000131-0000-0000-C000-000000000046}": // INTERFACE IRemUnknown
					_struct IRemUnknown // Original interface.
					{
						switch( Property.MSRPCopnum )
						{
						Case 0x03:
							_struct DCOMRemQueryInterface
							{
								switch( Property.MSRPCptype )
								{
								Case 0x00:
									[Property.DCOMMethodName = DCOMIRemUnknownMethodNameTable( Property.MSRPCopnum )]
									_struct Request
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													GUID(TRUE)					QueriedObjectIpId;
													UINT32						PublicObjectReferenceCount;
													UINT16						NumRequestedIIds;
													NdrConformant				Size;
													switch
													{
														Case Size.MaxCount > 0:
															GUID(TRUE)			InterfaceIds[ Size.MaxCount ];
													}
												}
										}
									}
								Case 0x02:
									[Property.DCOMMethodName = DCOMIRemUnknownMethodNameTable( Property.MSRPCopnum )]
									_struct Response
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													NdrPtr						RemqiresultPtr;
													switch
													{
														Case RemqiresultPtr.ReferentID > 0:
															_struct
															{
																NdrConformant				Size;
																switch
																{
																	Case Size.MaxCount > 0:
																		DCOMRemQIResult		QueryInterfaceResults[ Size.MaxCount ];
																}
															}
													}
													HResult						ReturnValue;
												}
										}
									}
								}
							}
						Case 0x04:
							_struct DCOMRemAddRef
							{
								switch( Property.MSRPCptype )
								{
								Case 0x00:
									[Property.DCOMMethodName = DCOMIRemUnknownMethodNameTable( Property.MSRPCopnum )]
									_struct Request
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													UINT16						ObjectReferenceCount;
													NdrConformant				Size;
													switch
													{
														Case Size.MaxCount > 0:
															DCOMRemInterfaceRef			InterfaceReferences[ Size.MaxCount ];
													}
												}
										}
									}
								Case 0x02:
									[Property.DCOMMethodName = DCOMIRemUnknownMethodNameTable( Property.MSRPCopnum )]
									_struct Response
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													NdrConformant				Size;
													switch
													{
														Case Size.MaxCount > 0:
															HResult					HResults[ Size.MaxCount ];
													}
													HResult					ReturnValue;
												}
										}
									}
								}
							}
						Case 0x05:
							_struct DCOMRemRelease
							{
								switch( Property.MSRPCptype )
								{
								Case 0x00:
									[Property.DCOMMethodName = DCOMIRemUnknownMethodNameTable( Property.MSRPCopnum )]
									_struct Request
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													UINT16						ObjectReferenceCount;
													NdrConformant				Size;
													switch
													{
														Case Size.MaxCount > 0:
															DCOMRemInterfaceRef			InterfaceReferences[ Size.MaxCount ];
													}
												}
										}
									}
								Case 0x02:
									[Property.DCOMMethodName = DCOMIRemUnknownMethodNameTable( Property.MSRPCopnum )]
									_struct Response
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													HResult							ReturnValue;
												}
										}
									}
								}
							}
						default:
							ReportParserError(ParserErrorProtocolClassWindows, "DCOM", FormatString( "Unknown IRemUnknown Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
						}
					}
				Case "{00000143-0000-0000-C000-000000000046}": // INTERFACE IRemUnknown2
					_struct IRemUnknown2 // Interface2 INCLUDES Interface1 methods (duplicated).
					{
						switch( Property.MSRPCopnum )
						{
						Case 0x03:
							_struct DCOMRemQueryInterface
							{
								switch( Property.MSRPCptype )
								{
								Case 0x00:
									[Property.DCOMMethodName = DCOMIRemUnknown2MethodNameTable( Property.MSRPCopnum )]
									_struct Request
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													GUID(TRUE)					QueriedObjectIpId;
													UINT32						PublicObjectReferenceCount;
													UINT16						NumRequestedIIds;
													NdrConformant				Size;
													switch
													{
														Case Size.MaxCount > 0:
															GUID(TRUE)			InterfaceIds[ Size.MaxCount ];
													}
												}
										}
									}
								Case 0x02:
									[Property.DCOMMethodName = DCOMIRemUnknown2MethodNameTable( Property.MSRPCopnum )]
									_struct Response
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													NdrPtr						RemqiresultPtr;
													switch
													{
														Case RemqiresultPtr.ReferentID > 0:
															_struct
															{
																NdrConformant				Size;
																switch
																{
																	Case Size.MaxCount > 0:
																		DCOMRemQIResult		QueryInterfaceResults[ Size.MaxCount ];
																}
															}
													}
													HResult						ReturnValue;
												}
										}
									}
								}
							}
						Case 0x04:
							_struct DCOMRemAddRef
							{
								switch( Property.MSRPCptype )
								{
								Case 0x00:
									[Property.DCOMMethodName = DCOMIRemUnknown2MethodNameTable( Property.MSRPCopnum )]
									_struct Request
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													UINT16						ObjectReferenceCount;
													NdrConformant				Size;
													switch
													{
														Case Size.MaxCount > 0:
															DCOMRemInterfaceRef			InterfaceReferences[ Size.MaxCount ];
													}
												}
										}
									}
								Case 0x02:
									[Property.DCOMMethodName = DCOMIRemUnknown2MethodNameTable( Property.MSRPCopnum )]
									_struct Response
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													NdrConformant				Size;
													switch
													{
														Case Size.MaxCount > 0:
															HResult					HResults[ Size.MaxCount ];
													}
													HResult					ReturnValue;
												}
										}
									}
								}
							}
						Case 0x05:
							_struct DCOMRemRelease
							{
								switch( Property.MSRPCptype )
								{
								Case 0x00:
									[Property.DCOMMethodName = DCOMIRemUnknown2MethodNameTable( Property.MSRPCopnum )]
									_struct Request
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													UINT16						ObjectReferenceCount;
													NdrConformant				Size;
													switch
													{
														Case Size.MaxCount > 0:
															DCOMRemInterfaceRef			InterfaceReferences[ Size.MaxCount ];
													}
												}
										}
									}
								Case 0x02:
									[Property.DCOMMethodName = DCOMIRemUnknown2MethodNameTable( Property.MSRPCopnum )]
									_struct Response
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													HResult							ReturnValue;
												}
										}
									}
								}
							}
						Case 0x06:
							_struct DCOMRemQueryInterface2
							{
								switch( Property.MSRPCptype )
								{
								Case 0x00:
									[Property.DCOMMethodName = DCOMIRemUnknown2MethodNameTable( Property.MSRPCopnum )]
									_struct Request
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													GUID(TRUE)					QueriedObjectIpId;
													UINT16						NumRequestedIIds;
													NdrConformant				Size;
													switch
													{
														Case Size.MaxCount > 0:
															GUID(TRUE)					InterfaceIds[ Size.MaxCount ];
													}
												}
										}
									}
								Case 0x02:
									[Property.DCOMMethodName = DCOMIRemUnknown2MethodNameTable( Property.MSRPCopnum )]
									_struct Response
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													NdrConformant				Size;
													switch
													{
														Case Size.MaxCount > 0:
															HResult								HResults[ Size.MaxCount ];
													}
													DCOMConformantPMInterfacePointerArray		MarshaledInterfacePtrs;
													Align4										Pad;
													HResult										ReturnValue;
												}
										}
									}
								}
							}
						default:
							ReportParserError(ParserErrorProtocolClassWindows, "DCOM", FormatString( "Unknown IRemUnknown2 Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
						}		
					}
				Case "{4D9F4AB8-7D1C-11CF-861E-0020AF6E7C57}": // INTERFACE IActivation
					_struct IActivation
					{
						switch( Property.MSRPCopnum )
						{
						Case 0x00:
							_struct DCOMRemoteActivation
							{
								switch( Property.MSRPCptype )
								{
								Case 0x00:
									[Property.DCOMMethodName = DCOMIActivationMethodNameTable( Property.MSRPCopnum )]
									_struct Request
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													Align4							Pad1;
													GUID(TRUE)						ClassID;
													NdrWIDESTRINGPtr				ObjectName;
													DCOMMInterfacePointerPtr		ObjectStorage;
													Align4							Pad2;
													UINT32							ClientImpersonationLevel;
													UINT32							Mode;
													UINT32							InterfacesCount;
													DCOMPConformantIidArray			InterfaceIds;
													UINT16							RequestedProtocolSequencesCount;
													NdrConformant					Size;
													switch
													{
														Case Size.MaxCount > 0:
															UINT16 RequestedProtocolSequences[ Size.MaxCount ];
													}
												}
										}
									}
								Case 0x02:
									[Property.DCOMMethodName = DCOMIActivationMethodNameTable( Property.MSRPCopnum )]
									_struct Response
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													Align8										Pad;
													UINT64										ObjectExporter;
													NdrPtr										Ptr;
													switch
													{
														Case Ptr.ReferentID > 0:
															DCOMConformantDualStringArray						ObjectExporterBindings;
													}
													Align4										Pad1;
													GUID(TRUE)									RemoteUnknownID;
													UINT32										AuthenticationHint;
													DCOMComVersion								ServerVersion;
													HResult										HResultGenerated;
													DCOMConformantPMInterfacePointerArray		InterfaceData;
													NdrConformant								Size;
													switch
													{
														Case Size.MaxCount > 0:
															HResult								HResults[ Size.MaxCount ];
													}
													UINT32										ReturnValue = WinErrorCodeTable( this );
												}
										}
									}
								}
							}
						default:
							ReportParserError(ParserErrorProtocolClassWindows, "DCOM", FormatString( "Unknown IActivation Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
						}
					}
				Case "{000001A0-0000-0000-C000-000000000046}": // INTERFACE IRemoteSCMActivator
					_struct IRemoteSCMActivator
					{
						switch( Property.MSRPCopnum )
						{
						Case 0x03:
							_struct DCOMRemoteGetClassObject
							{
								switch( Property.MSRPCptype )
								{
								Case 0x00:
									[Property.DCOMMethodName = DCOMIRemoteSCMActivatorMethodNameTable( Property.MSRPCopnum )]
									_struct Request
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													DCOMMInterfacePointerPtr		ActivationProperties;
												}
										}
									}
								Case 0x02:
									[Property.DCOMMethodName = DCOMIRemoteSCMActivatorMethodNameTable( Property.MSRPCopnum )]
									_struct Response
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													DCOMMInterfacePointerPtr		ActivationProperties;
													Align4							Pad;
													HResult							ReturnValue;
												}
										}
									}
								}
							}
						Case 0x04:
							_struct DCOMRemoteCreateInstance
							{
								switch( Property.MSRPCptype )
								{
								Case 0x00:
									[Property.DCOMMethodName = DCOMIRemoteSCMActivatorMethodNameTable( Property.MSRPCopnum )]
									_struct Request
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													DCOMMInterfacePointerPtr		AggregationInterface;
													DCOMMInterfacePointerPtr		ActivationProperties;
												}
										}
									}
								Case 0x02:
									[Property.DCOMMethodName = DCOMIRemoteSCMActivatorMethodNameTable( Property.MSRPCopnum )]
									_struct Response
									{
										switch {
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													DCOMMInterfacePointerPtr		ActivationProperties;
													Align4							Pad;
													HResult							ReturnValue;
												}
										}
									}
								}
							}
						Case 0x00:
						Case 0x01:
						Case 0x02:
							struct NotUsedOnWire
							{
								switch (property.MSRPCPType)
								{
									Case 0x00:// REQUEST
									[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									struct Request 
									{
										ReportParserWarning("DCOM", "Invalid dcom method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
									
									Case 0x02:// RESPONSE
									[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									struct Response
									{
										ReportParserWarning("DCOM", "Invalid dcom method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								}
							}
						default:
							ReportParserError(ParserErrorProtocolClassWindows, "DCOM", FormatString( "Unknown IRemoteSCMActivator Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
						}
					}
				// DFSRH interfaces ----------------------------------------------------------------
				Case "{4BB8AB1D-9EF9-4100-8EB6-DD4B4E418B72}": // DFS Replication Helper Protocol Specification - IADProxy Interface
				Case "{C4B0C7D9-ABE0-4733-A1E1-9FDEDF260C7A}": // DFS Replication Helper Protocol Specification - IADProxy2 Interface
				Case "{E65E8028-83E8-491b-9AF7-AAF6BD51A0CE}": // DFS Replication Helper Protocol Specification - IServerHealthReport Interface
				Case "{20D15747-6C48-4254-A358-65039FD8C63C}": // DFS Replication Helper Protocol Specification - IServerHealthReport Interface2
					[Property.DCOMInterfaceName= Property.MSRPCEncrypted != ConstEncTypeClearData ? "DCOM/DFSRH encrypted payload" : "DFSRH protocol"]
					dfsrh DFSRH;
				// COM------------------------------------------------------------------------------
				Case "{97199110-DB2E-11D1-A251-0000F805CA53}": COM COM;				
				}			
			}
	}
}

//========= TABLES ==========================================================================================
table DCOMIRemUnknownMethodNameTable( value )
{
	switch( value )
	{
		Case 0: "IRemUnknown_Opnum0DummyMethod";
		Case 1: "IRemUnknown_Opnum1DummyMethod";
		Case 2: "IRemUnknown_Opnum2DummyMethod";
		Case 3: "RemQueryInterface";
		Case 4: "RemAddRef";
		Case 5: "RemRelease";
		Default: "unknown";
	}
}

table DCOMIRemUnknown2MethodNameTable( value )
{
	switch( value )
	{
		case 3: "IRemUnknown2:RemQueryInterface";
		case 4: "IRemUnknown2:RemAddRef";
		case 5: "IRemUnknown2:RemRelease";
		case 6: "IRemUnknown2:RemQueryInterface2";
		Default: "unknown";
	}
}

table DCOMIActivationMethodNameTable( value )
{
	switch( value )
	{
		Case 0: "RemoteActivation";
		Default: "unknown";
	}
}

table DCOMIObjectExporterMethodNameTable( value )
{
	switch( value )
	{
		case 0: "IObjectExporter:ResolveOxid";
		case 1: "IObjectExporter:SimplePing";
		case 2: "IObjectExporter:ComplexPing";
		case 3: "IObjectExporter:ServerAlive";
		case 4: "IObjectExporter:ResolveOxid2";
		case 5: "IObjectExporter:ServerAlive2";
		Default: "unknown";
	}
}

table DCOMIRemoteSCMActivatorMethodNameTable( value )
{
	switch( value )
	{
		Case 0: "DummyQueryInterfaceIRemoteSCMActivator";
		Case 1: "DummyAddRefIRemoteSCMActivator";
		Case 2: "DummyReleaseIRemoteSCMActivator";
		Case 3: "RemoteGetClassObject";
		Case 4: "RemoteCreateInstance";
		Default: "unknown";
	}
}

table DCOMRpccAuthenticationTable( value )
{
	switch( value )
	{
	case 0x00000000: "RPCCAUTHNLEVELDEFAULT - default security authentication";
	case 0x00000001: "RPCCAUTHNLEVELNONE - No authentication";
	case 0x00000002: "RPCCAUTHNLEVELCONNECT - Authentication only when the client creates a relationship with the server";
	case 0x00000003: "RPCCAUTHNLEVELCALL - Authentication each time the server receives a remote procedure call";
	case 0x00000004: "RPCCAUTHNLEVELPKT - Authentication each time the server receives data from a client";
	case 0x00000005: "RPCCAUTHNLEVELPKTINTEGRITY - Authentication that no data from the packet has been modified";
	case 0x00000006: "RPCCAUTHNLEVELPKTPRIVACY - Includes all other authentication levels and encrypts the value of each RPC call";
	}
}

table DCOMObjRefFlagsShortNameTable( value )
{
	switch( value )
	{
	case 0x00000001: "OBJREFSTANDARD";
	case 0x00000002: "OBJREFHANDLER";
	case 0x00000004: "OBJREFCUSTOM";
	case 0x00000008: "OBJREFEXTENDED";
	}
}

table DCOMObjRefFlagsTable( value )
{
	switch( value )
	{
	case 0x00000001: "OBJREFSTANDARD - Represents a standard marshaled object reference";
	case 0x00000002: "OBJREFHANDLER - Represents a handler-type marshaled object reference";
	case 0x00000004: "OBJREFCUSTOM - Represents a custom marshaled object reference";
	case 0x00000008: "OBJREFEXTENDED - Represents an extended marshaled object reference";
	}
}

table DCOMStandardObjRefFlagsTable( value )
{
	switch( value )
	{
	case 0x00000000: "Initialization value";
	case 0x00000001: "Reserved for the object exporter";
	case 0x00000020: "Reserved for the object exporter";
	case 0x00000040: "Reserved for the object exporter";
	case 0x00000080: "Reserved for the object exporter";
	case 0x00000100: "Reserved for the object exporter";
	case 0x00000200: "Reserved for the object exporter";
	case 0x00000400: "Reserved for the object exporter";
	case 0x00000800: "Reserved for the object exporter";
	case 0x00001000: "This object reference does not need to be pinged";
	}
}

table DCOMAuthenticationServiceTable( value )
{
	switch( value )
	{
	case 0x00000001: "DCE private key authentication";
	case 0x00000002: "DCE public key authentication (reserved for future use)";
	case 0x00000004: "DCE public key authentication (reserved for future use)";
	case 0x00000009: "Negotiates between the use of the NTLM and the Kerberos protocol SSP";
	case 0x0000000A: "Uses the NTLM and SSL protocols";
	case 0x0000000E: "Uses the SChannel SSP which supports SSL, PCT, and TLS protocols";
	case 0x00000010: "Uses the Kerberos protocol SSP";
	case 0x00000011: "Authentication protocol SSP used for the Microsoft Network";
	case 0x00000012: "Distributed password authentication";
	case 0x00000064: "This SSP provides an SSPI-compatible wrapper for the MSMQ TLS protocol";
	case 0x0000FFFF: "default authentication service";
	}
}

table DCOMAuthorizationServiceTable( value )
{
	switch( value )
	{
	case 0x00000001: "Server performs authorization based on the client's principal name";
	case 0x00000002: "Server performs authorization checking using the client's DCE PAC information";
	case 0x0000FFFF: "Server uses the default authorization service for the current SSP";
	}
}

table DCOMOrpcThatFlagsTable( value )
{
	switch( value )
	{
	case 0x00000000: "ORPCFNULL - No additional information in this packet";
	case 0x00000001: "ORPCFLOCAL - Local call to this computer";
	}
}

table DCOMOrpcThisFlagsTable( value )
{
	switch( value )
	{
	case 0x00000000: "ORPCFNULL - No additional information in this packet";
	case 0x00000001: "ORPCFLOCAL - Local call to this computer";
	}
}

table DCOMComVersionMinorVersionTable( value )
{
	switch( value )
	{
	case 0x00000001: "Windows NT 4.0, 4.0 SP1, 4.0 SP2, DCOM95(up to build 1120)";
	case 0x00000002: "Windows NT 4.0 SP3";
	case 0x00000003: "DCOM95 builds 1120 to 2328";
	case 0x00000004: "Windows NT 4.0 SP4, Windows 2000 build 1779, DCOM95 build 2328 and later";
	case 0x00000005: "Not used";
	case 0x00000006: "Windows 2000(all versions), XP, XP SP1";
	case 0x00000007: "Windows XP SP2, Server 2003 SP1";		
	}
}

table DCOMClientImpersonationLevelTable( value )
{
	switch( value )
	{
	case 0x00000001: "Anonymous";
	case 0x00000002: "Identify";
	case 0x00000003: "Impersonate";
	case 0x00000004: "Delegate";
	}
}

table DCOMCtxPropertyContextTable( value )
{
	switch( value )
	{
	case 0x00000001: "Propogate - Context property is part of a prototype context";
	case 0x00000002: "Expose - Context property is part of a client context";
	case 0x00000004: "Envoy - Context property is part of an envoy context";
	}
}

//===== DCOM struct TYPES ==============================================================================================
//
//	COMVERSION
//	Alignment : 2
//
struct DCOMComVersion = FormatString( "DCOM Version=%u.%u", MajorVersion, MinorVersion )
{
	UINT16				MajorVersion;
	UINT16				MinorVersion = DCOMComVersionMinorVersionTable( this );
}

//
//	ORPCTHIS
//	Alignment : NdrAlign
//
struct DCOMOrpcThis = FormatString( "%s  Causality Id=%s", Version.ToString, CausalityId.ToString ) 
{
	DCOMComVersion				Version;
	UINT32						Flags = DCOMOrpcThisFlagsTable( this );
	UINT32						Reserved;
	GUID(TRUE)					CausalityId;
	UINT32						Ptr;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
	switch
	{
		case Ptr > 0:
			struct
			{
				DCOMOrpcExtentArray		Extensions;
			}
	}
}

//
//	ORPCTHAT
//	Alignment : NdrAlign
//
struct DCOMOrpcThat = FormatString( "%s", Flags.ToString )
{
	UINT32						Flags = DCOMOrpcThatFlagsTable( this );
	UINT32						Ptr;
	switch
	{
		case Ptr > 0:
			struct
			{
				DCOMOrpcExtentArray		Extensions;
			}
	}
}

//
//	ORPC_EXTENT_ARRAY
//	Alignment : NdrAlign
//
struct DCOMOrpcExtentArray
{//These pointers are always marshaled 32-bit.
	UINT32								Size;
	UINT32								Reserved = DCOMOrpcExtentArrayReservedTable(this);
	NdrPtrToConformant					ExtentArrayPtr;
	[property.ExtentArrayPtrMaxCount = ExtentArrayPtr.MaxCount]
	switch
	{
		case ExtentArrayPtr.ReferentID > 0:
			DCOMConformantOrpcExtentArray	Array;
	}
}

Table DCOMOrpcExtentArrayReservedTable( Value )
{
	Switch( Value )
	{
		Case 0: "V1 - Possible value.";
		Default: "Unknown";
	}
}

//
//	ORPC_EXTENT Array
//	Alignment : NdrAlign
//
struct DCOMConformantOrpcExtentArray
{//These pointers are always marshaled 32-bit.
	[Property.DCOMOrpcExtentCnt = 0]
	while[ Property.DCOMOrpcExtentCnt < property.ExtentArrayPtrMaxCount ]
	{
		[post.Property.DCOMOrpcExtArrayPtrCnt = Property.DCOMOrpcExtArrayPtrCnt + ((ExtentPtr.ReferentId != 0)?1:0), Property.DCOMOrpcExtentCnt = Property.DCOMOrpcExtentCnt + 1]
		NdrPtr							ExtentPtr;
	}

	[Property.DCOMOrpcExtentCnt = 0]
	while[ Property.DCOMOrpcExtentCnt < Property.DCOMOrpcExtArrayPtrCnt ]
	{
		[Property.DCOMOrpcExtentCnt = Property.DCOMOrpcExtentCnt + 1]
		DCOMConformantOrpcExtent		Extent;
	}
}

//
//	ORPC_EXTENT
//	Alignment : NdrAlign
//
struct DCOMConformantOrpcExtent
{
	NdrConformant			ConfSize;
	GUID(TRUE)				ExtensionID;
	UINT32					DataSize;
	[Property.DCOMConfOrpcExtDataBegin = FrameOffset]
	switch( ExtensionID.ToString )
	{
	case "{00000334-0000-0000-C000-000000000046}":	DCOMContextOrpcExtension		Policies;
	case "{0000031C-0000-0000-C000-000000000046}":	DCOMObjRef						ErrorObject;
	default:										BLOB( ConfSize.MaxCount )		UnknownExtension;
	}
	switch
	{
	case FrameOffset < (Property.DCOMConfOrpcExtDataBegin + ConfSize.MaxCount):
			BLOB( Property.DCOMConfOrpcExtDataBegin + ConfSize.MaxCount - FrameOffset )		Pad;
	}
}

//
//	Context ORPC Extension
//
struct DCOMContextOrpcExtension
{
	UINT32					Signature;
	UINT32					Version;
	UINT32					NumPolicies; // Num in EntryHeader array, and num in PolicyData array.
	UINT32					Buffer;
	UINT32					EnclosureSize; // Size (bytes) from Signature to last EntryHeader.
	UINT32					HResult;
	UINT32					HResultServer;
	UINT32					Reserved;
	[Property.DCOMCtxOrpcExtPolicyCnt = 0]
	while[ Property.DCOMCtxOrpcExtPolicyCnt < NumPolicies ]
	{
		[Property.DCOMCtxOrpcExtPolicyCnt = Property.DCOMCtxOrpcExtPolicyCnt + 1]
		DCOMPolicyHeader	PolicyHeader;
	}
	[Property.DCOMCtxOrpcExtPolicyCnt = 0]
	while[ Property.DCOMCtxOrpcExtPolicyCnt < NumPolicies ]
	{
		[Property.DCOMCtxOrpcExtPolicyCnt = Property.DCOMCtxOrpcExtPolicyCnt + 1]
		DCOMPolicyData		PolicyData;
	}
}

//
//	EntryHeader
//
struct DCOMPolicyHeader
{
	UINT32			Signature;
	UINT32			EntryHeaderBufferSize;
	UINT32			EnclosureSize; // Size (bytes) from outer-signature to EntryHeader start.
	UINT32			Reserved;
	[Property.DCOMPlcyHdrPlcyIDGUID$[ Property.DCOMCtxOrpcExtPolicyCnt ] = PolicyID.ToString]
	GUID(TRUE)		PolicyID;
}

struct DCOMPolicyData
{
	switch( Property.DCOMPlcyHdrPlcyIDGUID$[ Property.DCOMCtxOrpcExtPolicyCnt ] )
	{
	case "{ECABAEB8-7F19-11D2-978E-0000F8757E2A}":
		COMPlusSecurityOrpcExtension							SecurityPolicy;
	case "{ECABAEB1-7F19-11D2-978E-0000F8757E2A}":
		switch( Property.MSRPCPtype )
		{
			case 0x00: // Request
				COMPlusTransactionPropCallOrpcExtension		TransactionCallPolicy;
			case 0x02: // Response
				COMPlusTransactionPropRetOrpcExtension			TransactionReturnPolicy;
		}
	}
}

struct DCOMConformantMInterfacePointer
{ //??? This type is suspect due to its limited use by rapr-bin.npl ???
	NdrConformant			Size;
	UINT32					InterfaceSize;
	DCOMConformantObjRef	Interface;
}

//
//	PMInterfacePointerInternal
//	Alignment : NdrAlign
//
struct DCOMMInterfacePointerPtr = MInterfacePointerPtr.ReferentID > 0 ? Interface.ToString : "NULL"
{
	NdrPtr							MInterfacePointerPtr;
	switch
	{
	case MInterfacePointerPtr.ReferentID > 0:
		DCOMMInterfacePointer		Interface;
	}
}

struct DCOMMInterfacePointerPtrPtr = MInterfacePointerPtr.ReferentID > 0 ? Interface.ToString : "NULL"
{
	NdrPtr							MInterfacePointerPtr;
	switch
	{
	case MInterfacePointerPtr.ReferentID > 0:
		DCOMMInterfacePointerPtr		Interface;
	}
}

struct DCOMConformantPMInterfacePointerArray
{
	NdrConformant					Size;
	[Property.DCOMConfPMIntPACounter = 0, Property.DCOMConfPMIntPATargetCount = 0]
	while[ Property.DCOMConfPMIntPACounter < Size.MaxCount ]
	{
		[Property.DCOMConfPMIntPACounter = Property.DCOMConfPMIntPACounter + 1, Property.DCOMConfPMIntPATargetCount = Property.DCOMConfPMIntPATargetCount + ((InterfacePointerPtr.ReferentID > 0)?1:0)]
		NdrPtr						InterfacePointerPtr;
	}
	[Property.DCOMConfPMIntPACounter = 0]
	while[ Property.DCOMConfPMIntPACounter < Property.DCOMConfPMIntPATargetCount ]
	{
		[Property.DCOMConfPMIntPACounter = Property.DCOMConfPMIntPACounter + 1]
		DCOMMInterfacePointer		InterfacePointer;
	}
}

//
//	MInterfacePointer
//	Alignment : NdrAlign
//
struct DCOMMInterfacePointer = Interface.ToString
{
	NdrConformant				Size;
	UINT32						InterfaceSize;	
	[DataFieldFrameLength = FrameOffset + InterfaceSize]	
	DCOMObjRef					Interface;
}

//
//	DUALSTRINGARRAY(Packet Version)
//	Alignment : 2
//
struct DCOMDualStringArray
{
	UINT16						WNumEntries;
	UINT16						WSecurityOffsets;
	while[!(UINT8( Framedata, Offset ) == 0)]
	{
		DCOMStringBinding		StringBindings;
	}

	UINT16						Terminator1;

	while[!(UINT8( Framedata, Offset ) == 0)]
	{
		DCOMSecurityBinding		SecurityBindings;
	}

	UINT16						Terminator2;
}

//
//	DUALSTRINGARRAY(IDL Version)
//	Alignment : NdrAlign
//
struct DCOMConformantDualStringArray
{
	NdrConformant			Size;
	DCOMDualStringArray		Bindings;
}

//
//	STRINGBINDING
//
struct DCOMStringBinding
{
	UINT16				TowerId;
	UnicodeString		NetworkAddress;
}

//
//	SECURITYBINDING
//
struct DCOMSecurityBinding
{
	UINT16				AuthenticationServiceProvider = DCOMAuthenticationServiceTable( this );
	UINT16				AuthorizationService = DCOMAuthorizationServiceTable( this );
	UnicodeString		SecurityPrincipal;
}

struct DCOMConformantObjRef
{
	NdrConformant		Size;
	switch
	{
		case FrameLength - FrameOffset < Size.MaxCount: BLOB(FrameLength - FrameOffset) PartialData;
		default: DCOMObjRef			ObjectReference;
	}
}

//
//	OBJREF
//
struct DCOMObjRef = FormatString("%s - %s", DCOMObjRefFlagsShortNameTable(Flags), MarshaledInterfaceIID.ToString)
{
	UINT32					Signature;
	UINT32					Flags = DCOMObjRefFlagsTable( this );
	GUID(TRUE)				MarshaledInterfaceIID;
	switch( Flags )
	{
		case 0x00000001:DCOMObjRefStandard		Standard;
		case 0x00000002:DCOMObjRefHandler		Handler;
		case 0x00000004: DCOMObjRefCustom		Custom;
		case 0x00000008: DCOMObjRefExtended		Extended;
	}
}

//
//	STDOBJREF
//
struct DCOMStdObjRef
{
	UINT32				Flags = DCOMStandardObjRefFlagsTable( this );
	UINT32				CPublicRefs;
	UINT64				Oxid;
	UINT64				Oid;
	GUID(TRUE)			Ipid;
	switch
	{
		case Property.MSRPCNdr64: Align8 pad;
	}
}

//
//	OBJREF_STANDARD
//
struct DCOMObjRefStandard
{
	DCOMStdobjref			ObjectReference;
	DCOMDualStringArray		ResolverAddress;
}

//
//	OBJREF_HANDLER
//
struct DCOMObjRefHandler
{
	DCOMStdObjRef			ObjectReference;
	GUID(TRUE)				ClsId;
	DCOMDualStringArray		ResolverAddress;
}

//
//	OBJREF_CUSTOM
//
struct DCOMObjRefCustom
{
	GUID(TRUE)				ClassId;
	UINT32					ExtensionSize;
	UINT32					ObjectReferenceSize;
	switch( ClassId.ToString )
	{
		case "{00000338-0000-0000-C000-000000000046}": // IRemoteSCMActivator Request
		case "{00000339-0000-0000-C000-000000000046}": // IRemoteSCMActivator Response
														DCOMActivationProperties					ActivationProperties;
		case "{0000033B-0000-0000-C000-000000000046}":	DCOMContext									Context;
		case "{0000031B-0000-0000-C000-000000000046}":	DCOMErrorObjectData							ErrorInfo;
		case "{ECABAFAA-7F19-11D2-978E-0000F8757E2A}":	COMPlusActivityContextProperty				Activity;
		case "{ECABAFAC-7F19-11D2-978E-0000F8757E2A}":	COMPLusTransactionContextPropertyHeader	Transaction;
		case "{ECABAFB3-7F19-11D2-978E-0000F8757E2A}":	COMPlusUserDefinedContextProperty			UserContextProperty;
		case "{ECABAFC0-7F19-11D2-978E-0000F8757E2A}":	COMPlusClassFactory							ClassFactory;
		case "{0000002F-0000-0000-C000-000000000046}":	OLEAUTRecordInfo							RecordInfo;
		case "{674B6698-EE92-11D0-AD71-00C04FD8FDFF}":	WMIIWbemContextBuffer				IWbemContextBuffer;
		case "{4590F812-1D3A-11D0-891F-00AA004B2E24}":	WMIOEncodingUnit							EncodingUnit;
		default:										BLOB( ObjectReferenceSize )					UnknownCustomMarshaledData;
	}
}

//
//	OBJREF_EXTENDED
//
struct DCOMObjRefExtended
{ // An ENVOY CONTEXT.
	DCOMStdObjRef					ObjectReference;
	UINT32							Signature1;
	DCOMDualStringArray				ResolverAddress;
	UINT32							ElementCount;
	UINT32							Signature2;
	DCOMObjExtendedDataElement		DataArray[ ElementCount + 1 - (ElementCount & 1) ];
}

//
//	DATAELEMENT
//
struct DCOMObjExtendedDataElement
{
	GUID(TRUE)		DataId;
	UINT32			DataSize;
	UINT32			DataSizeRounded;
	DCOMContext		EnvoyContext;
}

//
//	Context
//
struct DCOMContext
{
	UINT16					MajorVersion;
	UINT16					MinVersion;
	GUID(TRUE)				ContextID;
	switch( Property.MSRPCByteOrder )
	{
	case LittleEndian:
		struct
		{
			UINT32 Flags
			{
				UINT32 Unused1:1        = FormatString("       (%s)", this.ToBitString);
				UINT32 MarshalByValue:1 = FormatString("(%s) %s", this.ToBitString, this ? "Context is marshalled by value" : "Context is NOT marshalled by value");
				UINT32 Unused2:30       = FormatString("       (%s)", this.ToBitString);
			}
		}
	default:
		struct
		{
			UINT32 Flags
			{
				UINT32 Unused2:30       = FormatString("       (%s)", this.ToBitString);
				UINT32 MarshalByValue:1 = FormatString("(%s) %s", this.ToBitString, this ? "Context is marshalled by value" : "Context is NOT marshalled by value");
				UINT32 Unused1:1        = FormatString("       (%s)", this.ToBitString);
			}
		}
	}
	UINT32					Reserved;
	UINT32					NumExtents;
	UINT32					ExtentCount;
	UINT32					MarshalFlags;
	UINT32					ContextPropertyCount;
	BOOL					Frozen;
	DCOMContextProperty		Property[ ContextPropertyCount ];
}

//
//	PROPMARSHALHEADER
//
struct DCOMContextProperty
{
	GUID(TRUE)			ClassID;
	GUID(TRUE)			PolicyID;
	UINT32				Flags = DCOMCtxPropertyContextTable( this );
	UINT32				Count;
	[Property.DCOMCtxPropClassBegin = FrameOffset]
	switch( ClassID.ToString )
	{
	case "{00000000-0000-0000-0000-000000000000}":	DCOMObjRef							ObjectReference;
	case "{ECABAFAD-7F19-11D2-978E-0000F8757E2A}":	COMPlusTransactionEnvoyProperty		TransactionEnvoy;
	case "{ECABAFAB-7F19-11D2-978E-0000F8757E2A}":	COMPlusSecurityEnvoyProperty		SecurityEnvoy;
	default:										BLOB( Count )						UnknownEnvoy;
	}
	switch
	{
	case FrameOffset < (Property.DCOMCtxPropClassBegin + Count):
		BLOB( Property.DCOMCtxPropClassBegin + Count - FrameOffset )		Pad;
	}
}

//
//	Custom-Marshaled Error Information Format
//
struct DCOMErrorObjectData
{
	UINT32					Version;
	UINT32					HelpContext;
	GUID(TRUE)				InterfaceID;
	NdrWIDESTRINGPtr	Source;
	NdrWIDESTRINGPtr	Description;
	NdrWIDESTRINGPtr	HelpFile;
}
 

// Start of ACTIVATION PROPERTIES BLOB Structs --------------
//
//	Activation Properties BLOB
//
struct DCOMActivationProperties
{
	UINT32								TotalSize;
	UINT32								Reserved;
	DCOMCustomHeader					CustomHeader;
	DCOMActivationPropertiesData		Properties;
}

//
//	CustomHeader
//
struct DCOMCustomHeader
{
	[Property.DCOMActPropsCustHdrBegin = FrameOffset]
	DCOMMsftTypeSerialHeader		Header;
	UINT32							TotalSize;
	UINT32							CustomHeaderSize;
	UINT32							NumOpaqueDataElements;
	UINT32							DestinationContext;
	[Property.DCOMNumActivationPropertyStructs]
	UINT32							NumActivationPropertyStructs;
	GUID(TRUE)						ClassInfoClsid;
	NDRPTR							ClsIdPtr;
	NDRPTR							SizesPtr;
	NDRPTR							OpaqueDataPtr; // Always NULL.
	switch
	{
	case ClsIdPtr > 0:
		DCOMCustomDataPsgArray			PropertyGuids;
	}
	switch
	{
	case SizesPtr > 0:
		DCOMCustomDataPsgArraySizes		PropertyDataSizes;
	}
	switch
	{
	case FrameOffset < (Property.DCOMActPropsCustHdrBegin + CustomHeaderSize):
		BLOB( Property.DCOMActPropsCustHdrBegin + CustomHeaderSize - FrameOffset )		UnusedBuffer;
	}
}

//
//	Activation Properties
//	Alignment : 8
//
struct DCOMActivationPropertiesData = FormatString( "%d Property Structures", Property.DCOMNumActivationPropertyStructs )
{
	[Property.DCOMActPropCounter = 0]
	while[ Property.DCOMActPropCounter < Property.DCOMNumActivationPropertyStructs ]
	{
		[post.Property.DCOMActPropCounter = Property.DCOMActPropCounter + 1]
		switch( Property.DCOMActPropsGuidArray$[ Property.DCOMActPropCounter ] )
		{
		case "{000001AB-0000-0000-C000-000000000046}":
			DCOMInstantiationInfoData( Property.DCOMActPropsSizeArray$[ Property.DCOMActPropCounter ] )			Instantiation;
		case "{000001A4-0000-0000-C000-000000000046}":
			DCOMLocationInfoData( Property.DCOMActPropsSizeArray$[ Property.DCOMActPropCounter ] )				Location;
		case "{000001A6-0000-0000-C000-000000000046}":
			DCOMSecurityInfoData( Property.DCOMActPropsSizeArray$[ Property.DCOMActPropCounter ] )				Security;
		case "{000001AA-0000-0000-C000-000000000046}":
			DCOMScmRequestInfoData( Property.DCOMActPropsSizeArray$[ Property.DCOMActPropCounter ] )			ScmRequest;
		case "{000001B6-0000-0000-C000-000000000046}":
			DCOMScmReplyInfoData( Property.DCOMActPropsSizeArray$[ Property.DCOMActPropCounter ] )				ScmReply;
		case "{000001A5-0000-0000-C000-000000000046}":
			DCOMActivationContextInfoData( Property.DCOMActPropsSizeArray$[ Property.DCOMActPropCounter ] )		ActivationContext;
		case "{000001AD-0000-0000-C000-000000000046}":
			DCOMInstanceInfoData( Property.DCOMActPropsSizeArray$[ Property.DCOMActPropCounter ] )				Instance;
		case "{000001B9-0000-0000-C000-000000000046}":
			DCOMSpecialPropertiesData( Property.DCOMActPropsSizeArray$[ Property.DCOMActPropCounter ] )			Special;
		case "{00000339-0000-0000-C000-000000000046}":
			DCOMPropsOutInfo( Property.DCOMActPropsSizeArray$[ Property.DCOMActPropCounter ] )					PropertiesOutput;
		}
	}
}

struct DCOMMsftTypeSerialHeader
{
	RPCECommonTypeHeader		CommonHeader;
	RPCEPrivateTypeHeader		PrivateHeader;
}

struct DCOMCustomDataPsgArray
{
	NdrConformant						ElementCount;
	[Property.DCOMCustDataPSGCounter = 0]
	while[ Property.DCOMCustDataPSGCounter < Property.DCOMNumActivationPropertyStructs ]
	{
		[Property.DCOMActPropsGuidArray$[ Property.DCOMCustDataPSGCounter ] = PropertyStructGuid.ToString, post.Property.DCOMCustDataPSGCounter = Property.DCOMCustDataPSGCounter + 1]
		GUID(TRUE)				PropertyStructGuid;
	}
}

struct DCOMCustomDataPsgArraySizes
{
	NdrConformant						ElementCount;
	[Property.DCOMCustDataPSGArrayCounter = 0]
	while[ Property.DCOMCustDataPSGArrayCounter < Property.DCOMNumActivationPropertyStructs ]
	{
		[Property.DCOMActPropsSizeArray$[ Property.DCOMCustDataPSGArrayCounter ] = Size, post.Property.DCOMCustDataPSGArrayCounter = Property.DCOMCustDataPSGArrayCounter + 1]
		UINT32						Size;
	}
}

//
//	InstantiationInfoData
//  Alignment : None
//
struct DCOMInstantiationInfoData( inputTotalSize )
{
	[Property.DCOMInsttInfoDataBegin = FrameOffset]
	switch
	{
		case Property.MSRPCNdr64 == false && CurrentProtocolOffset % 4 > 0: ALIGN4 padding4;
		case Property.MSRPCNdr64 == TRUE && CurrentProtocolOffset % 8 > 0: ALIGN8 padding8;
	}
	DCOMMsftTypeSerialHeader		Header;
	GUID(TRUE)						InstantiatedObjectClsId;
	UINT32							ClassContext;
	UINT32							ActivationFlags;
	INT32							FlagsSurrogate;
	UINT32							InterfaceIdCount;
	UINT32							InstantiationFlag;
	NDRPTR							InterfaceIdsPtr;
	UINT32							EntirePropertySize;
	DCOMComVersion					Version;
	UINT32							ConfInterfaceIdCount;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
	switch
	{
	case InterfaceIdsPtr.ReferentID > 0:
		GUID(TRUE)				InterfaceIds[ ConfInterfaceIdCount ];
	}
	switch
	{
	case FrameOffset < (Property.DCOMInsttInfoDataBegin + inputTotalSize):
		BLOB( Property.DCOMInsttInfoDataBegin + inputTotalSize - FrameOffset )		UnusedBuffer;
	}
}

//
//	SpecialPropertiesData
//  Alignment : None
//
struct DCOMSpecialPropertiesData( inputTotalSize )
{
	[Property.DCOMSpecPropDataBegin = FrameOffset]
	switch
	{
		Case CurrentProtocolOffset % 8 > 0: Align8 padding; 
	}
	DCOMMsftTypeSerialHeader		Header;
	UINT32							SessionID;
	INT32							RemoteThisSessionID;
	INT32							ClientImpersonating;
	INT32							PartitionIDPresent;
	UINT32							DefaultAuthLevel;
	GUID(TRUE)						PartitionGuid;
	UINT32							ProcessRequestFlags;
	UINT32							OriginalClassContext;
	UINT32							Flags;
	Switch
	{
		case Property.RPCEObjectBufferLength == 80: UINT32 Reserved[8];
		case Property.RPCEObjectBufferLength == 88: 
			Struct
			{
				UINT32							ProcessID;
				Align8							paddinghWnd;
				UINT64							hWnd;
				UINT32							Reserved[ 5 ];
			}
	}
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
	switch
	{
		case FrameOffset < (Property.DCOMSpecPropDataBegin + inputTotalSize):
			BLOB( Property.DCOMSpecPropDataBegin + inputTotalSize - FrameOffset )		UnusedBuffer;
	}
}

//
//	InstanceInfoData
//  Alignment : None
//
struct DCOMInstanceInfoData( inputTotalSize )
{
	[Property.DCOMInstcInfoDataBegin = FrameOffset]
	switch
	{
		case Property.MSRPCNdr64 == false && CurrentProtocolOffset % 4 > 0: ALIGN4 padding4;
		case Property.MSRPCNdr64 == TRUE && CurrentProtocolOffset % 8 > 0: ALIGN8 padding8;
	}	
	DCOMMsftTypeSerialHeader		Header;
	[Property.DCOMInstcInfoDataFileNameRefId = FileNamePtr.ReferentID]
	NdrPtr							FileNamePtr;
	UINT32							Mode;
	[Property.DCOMInstcInfoDataRunObjRefId = RunningObjectPtr.ReferentID]
	NdrPtr							RunningObjectPtr;
	[Property.DCOMInstcInfoDataStorIntrRefId = StorageInterfacePtr.ReferentID]
	NdrPtr							StorageInterfacePtr;
	switch
	{
	case Property.DCOMInstcInfoDataFileNameRefId > 0:
		NdrWideString	Filename;
	}
	switch
	{
	case Property.DCOMInstcInfoDataRunObjRefId > 0:
		DCOMMInterfacePointer			RunningObject;
	}
	switch
	{
	case Property.DCOMInstcInfoDataStorIntrRefId > 0:
		DCOMMInterfacePointer			IStorageInterface;
	}
	switch
	{
	case FrameOffset < (Property.DCOMInstcInfoDataBegin + inputTotalSize):
		BLOB( Property.DCOMInstcInfoDataBegin + inputTotalSize - FrameOffset )		UnusedBuffer;
	}
}

//
//	ScmRequestInfoData
//  Alignment : None
//
struct DCOMScmRequestInfoData( inputTotalSize )
{
	[Property.DCOMScmReqInfoDataBegin = FrameOffset]
	switch
	{
		case Property.MSRPCNdr64 == false && CurrentProtocolOffset % 4 > 0: ALIGN4 padding4;
		case Property.MSRPCNdr64 == TRUE && CurrentProtocolOffset % 8 > 0: ALIGN8 padding8;
	}
	DCOMMsftTypeSerialHeader		Header;
	NdrPtr							Ptr; // Null Pointer.
	NdrPtr							RemoteRequestPtr;
	switch
	{
	case RemoteRequestPtr.ReferentID > 0:
		DCOMCustomRemoteRequestScmInfo		RemoteRequest;			
	}
	switch
	{
	case FrameOffset < (Property.DCOMScmReqInfoDataBegin + inputTotalSize):
		BLOB( Property.DCOMScmReqInfoDataBegin + inputTotalSize - FrameOffset )		UnusedBuffer;
	}
}

//
//	customREMOTE_REQUEST_SCM_INFO
//	Alignment : NdrAlign
//
struct DCOMCustomRemoteRequestScmInfo
{
	UINT32					ClientImpersonationLevel = DCOMClientImpersonationLevelTable( this );
	UINT16					NumProtocolSequences;
	NdrPtrToConformant		ProtocolSeqsArrayPtr;
	switch
	{
		case ProtocolSeqsArrayPtr.ReferentID > 0:
			UINT16		ProtocolSeqs[ ProtocolSeqsArrayPtr.MaxCount ];
	}
}

//
//	ActivationContextInfoData
//  Alignment : None
//
struct DCOMActivationContextInfoData( inputTotalSize )
{
	[Property.DCOMActCtxInfoDataBegin = FrameOffset]
	switch
	{
		case Property.MSRPCNdr64 == false && CurrentProtocolOffset % 4 > 0: ALIGN4 padding4;
		case Property.MSRPCNdr64 == TRUE && CurrentProtocolOffset % 8 > 0: ALIGN8 padding8;
	}	
	DCOMMsftTypeSerialHeader		Header;
	INT32							ClientOk;
	INT32							Reserved1;
	UINT32							Reserved2;
	UINT32							Reserved3;
	[Property.DCOMActCtxInfoDataClientPtrRefID = ClientPtr.ReferentID]
	NdrPtr							ClientPtr;
	[Property.DCOMActCtxInfoDataPrototypePtrRefID = PrototypePtr.ReferentID]
	NdrPtr							PrototypePtr;
	switch
	{
	case Property.DCOMActCtxInfoDataClientPtrRefID > 0:
		DCOMMInterfacePointer		ClientContext;
	}
	switch
	{
	case Property.DCOMActCtxInfoDataPrototypePtrRefID > 0:
		DCOMMInterfacePointer		PrototypeContext;
	}
	switch
	{
	case FrameOffset < (Property.DCOMActCtxInfoDataBegin + inputTotalSize):
		BLOB( Property.DCOMActCtxInfoDataBegin + inputTotalSize - FrameOffset )		UnusedBuffer;
	}
}

//
//	LocationInfoData
//  Alignment : None
//
struct DCOMLocationInfoData( inputTotalSize )
{
	[Property.DCOMLocInfoDataBegin = FrameOffset]
	switch
	{
		case Property.MSRPCNdr64 == false && CurrentProtocolOffset % 4 > 0: ALIGN4 padding4;
		case Property.MSRPCNdr64 == TRUE && CurrentProtocolOffset % 8 > 0: ALIGN8 padding8;
	}
	DCOMMsftTypeSerialHeader		Header;
	NdrPtr							MachineNamePtr;
	UINT32							ProcessId;
	UINT32							ApartmentId;
	UINT32							ContextId;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
	switch
	{
	case MachineNamePtr.ReferentID > 0:
		NdrWideString	MachineName;
	}
	switch
	{
	case FrameOffset < (Property.DCOMLocInfoDataBegin + inputTotalSize):
		BLOB( Property.DCOMLocInfoDataBegin + inputTotalSize - FrameOffset )		UnusedBuffer;
	}
}

//
//	SecurityInfoData
//  Alignment : None
//
struct DCOMSecurityInfoData( inputTotalSize )
{
	[Property.DCOMSecInfoDataBegin = FrameOffset]
	switch
	{
		case Property.MSRPCNdr64 == false && CurrentProtocolOffset % 4 > 0: ALIGN4 padding4;
		case Property.MSRPCNdr64 == TRUE && CurrentProtocolOffset % 8 > 0: ALIGN8 padding8;
	}	
	DCOMMsftTypeSerialHeader		Header;
	UINT32							AuthenticationFlags;
	NDRPTR							ServerInfoPtr;
	UINT32							Reserved;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
	switch
	{
	case ServerInfoPtr.ReferentID > 0:
		DCOMCoServerInfo			ServerInfo;
	}
	switch
	{
	case FrameOffset < (Property.DCOMSecInfoDataBegin + inputTotalSize):
		BLOB( Property.DCOMSecInfoDataBegin + inputTotalSize - FrameOffset )		UnusedBuffer;
	}
}

//
//	COSERVERINFO
//	Alignment : NdrAlign
//
struct DCOMCoServerInfo
{
	UINT32				Reserved1;
	[Property.DCOMCoSrvInfoNamePtr = NamePtr.ReferentID]
	NdrPtr				NamePtr;
	NdrPtr				AuthInfoPtr; // Always NULL.
	UINT32				Reserved2;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
	switch
	{
	case Property.DCOMCoSrvInfoNamePtr > 0:
		NdrWideString	Name;
	}
}

//
//	ScmReplyInfoData
//  Alignment : None
//
struct DCOMScmReplyInfoData( inputTotalSize )
{
	[Property.DCOMScmReplyInfoDataBegin = FrameOffset]
	switch
	{
		case Property.MSRPCNdr64 == false && CurrentProtocolOffset % 4 > 0: ALIGN4 padding4;
		case Property.MSRPCNdr64 == TRUE && CurrentProtocolOffset % 8 > 0: ALIGN8 padding8;
	}	
	DCOMMsftTypeSerialHeader		Header;
	NdrPtr							Ptr; // Null Pointer.
	NdrPtr							RemoteReplyPtr;
	switch
	{
	case RemoteReplyPtr.ReferentID > 0:
		struct
		{
			DCOMCustomRemoteReplyScmInfo		RemoteReply;
		}		
	}
	switch
	{
	case FrameOffset < (Property.DCOMScmReplyInfoDataBegin + inputTotalSize):
		BLOB( Property.DCOMScmReplyInfoDataBegin + inputTotalSize - FrameOffset )		UnusedBuffer;
	}
}

//
//	customREMOTE_REPLY_SCM_INFO
//	Alignment : 8
//
struct DCOMCustomRemoteReplyScmInfo
{
	UINT64				ObjectExporterId;
	NdrPtr				OxidBindingsPtr;
	GUID(TRUE)			IRemUnknownInterfacePointerId;
	UINT32				AuthenticationHint;
	DCOMComVersion		Version;
	switch
	{
	case OxidBindingsPtr.ReferentID > 0:
		DCOMConformantDualStringArray		OxidBindings;
	}
}

//
//	PropsOutInfo
//  Alignment : None
//
struct DCOMPropsOutInfo( inputTotalSize )
{
	[Property.DCOMPropsOutInfoBegin = FrameOffset]
	switch
	{
		case Property.MSRPCNdr64 == false && CurrentProtocolOffset % 4 > 0: ALIGN4 padding4;
		case Property.MSRPCNdr64 == TRUE && CurrentProtocolOffset % 8 > 0: ALIGN8 padding8;
	}
	DCOMMsftTypeSerialHeader		Header;
	UINT32							NumInterfaces;
	[Property.DCOMPropsOutInfoInterfaceIdsPtrRefId = InterfaceIdsPtr.ReferentID]
	NdrPtr							InterfaceIdsPtr;
	[Property.DCOMPropsOutInfoReturnValuesPtrRefId = ReturnValuesPtr.ReferentID]
	NdrPtr							ReturnValuesPtr;
	[Property.DCOMPropsOutInfoInterfacePtrsPtrRefId = InterfacePtrsPtr.ReferentID]
	NdrPtr							InterfacePtrsPtr;
	switch
	{
	case Property.DCOMPropsOutInfoInterfaceIdsPtrRefId > 0:
		DCOMConformantGuidArray						InterfaceIds;		
	}
	switch
	{
	case Property.DCOMPropsOutInfoReturnValuesPtrRefId > 0:
		DCOMConformantUInt32Array					ReturnValues;
	}
	switch
	{
	case Property.DCOMPropsOutInfoInterfacePtrsPtrRefId > 0:
		DCOMConformantPMInterfacePointerArray		InterfacePtrs;
	}
	switch
	{
	case FrameOffset < (Property.DCOMPropsOutInfoBegin + inputTotalSize):
		BLOB( Property.DCOMPropsOutInfoBegin + inputTotalSize - FrameOffset )		UnusedBuffer;
	}
}
// End of ACTIVATION PROPERTIES BLOB Structs --------------
//
//	REMINTERFACEREF
//	Alignment : 4
//
struct DCOMRemInterfaceRef
{
	GUID(TRUE)		Ipid;
	UINT32			CPublicRefs;
	UINT32			CPrivateRefs;
}

//
//	REMQIRESULT
//	Alignment : 4
//
struct DCOMRemQIResult
{
	HRESULT				ReturnValue;
	Align8				Padding;
	DCOMStdObjRef		ObjectReferenceIds;
}

struct DCOMPConformantIidArray
{
	NdrPtr						Ptr;
	switch
	{
	case Ptr.ReferentID > 0:
		_struct
		{
			NdrConformant		Size;
			switch
			{
				case Size.MaxCount > 0:			
					GUID(TRUE)			Array[ Size.MaxCount ];
			}
		}
	}
}

struct DCOMConformantUInt32Array
{
	NdrConformant		Size;
	switch
	{
	case Size.MaxCount > 0:
		UINT32			Array[ Size.MaxCount ];
	}
}

struct DCOMConformantGuidArray
{
	NdrConformant		Size;
	switch
	{
	case Size.MaxCount > 0:
		GUID(TRUE)		Array[ Size.MaxCount ];
	}
}

//===== DCOM-PAYLOAD struct TYPES ==============================================================================================
struct DCOMPMInterfacePointerArray
{
	NdrConformantVarying Size;
	switch
	{
		case Size.ActualCount:
			_struct
			{
				[local.InterfaceCount = 0, local.PtrCount = Size.ActualCount]
				while [local.PtrCount > 0]
				{
					[local.PtrCount = local.PtrCount - 1]
					NdrPtr ReferentId;
					switch
					{
						case ReferentId.ReferentID:
							[local.InterfaceCount = local.InterfaceCount + 1]
							_struct{}
					}
				}
				DCOMMInterfacePointer interface[local.InterfaceCount];
			}
	}
}
