//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-WfpUnifiedTracing
//#
//#  Details:                
//#
//#  Public References:      WfpUnifiedTracing.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 1/28/2010
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWFP, "{0c478c5b-0351-41b1-8c58-4a6737da32e3}")]
Protocol WFP = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1001: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_CLASSIFY_DROP_EVENT WFP_CLASSIFY_DROP_EVENT;
		case 1003: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_IPSEC_KERNEL_DROP_EVENT WFP_IPSEC_KERNEL_DROP_EVENT;
		case 1005: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_IKEEXT_MM_FAILURE_EVENT WFP_IKEEXT_MM_FAILURE_EVENT;
		case 1007: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_IKEEXT_QM_FAILURE_EVENT WFP_IKEEXT_QM_FAILURE_EVENT;
		case 1009: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_IKEEXT_EM_FAILURE_EVENT WFP_IKEEXT_EM_FAILURE_EVENT;
		case 1011: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_IPSEC_DOSP_DROP_EVENT WFP_IPSEC_DOSP_DROP_EVENT;
		case 1013: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_MM_TERMINATION_SUCCESS WFP_MM_TERMINATION_SUCCESS;
		case 1014: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_ESTABLISHED_MMNOCERT_NOUM WFP_ESTABLISHED_MMNOCERT_NOUM;
		case 1015: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_ESTABLISHED_MMCERT_NOUM WFP_ESTABLISHED_MMCERT_NOUM;
		case 1016: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_ESTABLISHED_MMCERT_UMCERT WFP_ESTABLISHED_MMCERT_UMCERT;
		case 1017: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_ESTABLISHED_MMCERT_UMNOCERT WFP_ESTABLISHED_MMCERT_UMNOCERT;
		case 1018: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_ESTABLISHED_MMNOCERT_UMCERT WFP_ESTABLISHED_MMNOCERT_UMCERT;
		case 1019: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_ESTABLISHED_MMNOCERT_UMNOCERT WFP_ESTABLISHED_MMNOCERT_UMNOCERT;
		case 1020: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_IPSEC_DOSP_ENABLE_EVENT WFP_IPSEC_DOSP_ENABLE_EVENT;
		case 1021: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_IPSEC_DOSP_DISABLE_EVENT WFP_IPSEC_DOSP_DISABLE_EVENT;
		case 1022: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_IPSEC_DOSP_MAX_ENTRIES_EVENT WFP_IPSEC_DOSP_MAX_ENTRIES_EVENT;
		case 1023: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_IKE_ACQUIRE WFP_IKE_ACQUIRE;
		case 1024: [property.ETLSummary = this.ToString] WfpUnifiedTracing_IKE_PACKET_SEND IKE_PACKET_SEND;
		case 1025: [property.ETLSummary = this.ToString] WfpUnifiedTracing_IKE_PACKET_RECV IKE_PACKET_RECV;
		case 1026: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_USERMODE_ERROR WFP_USERMODE_ERROR;
		case 1027: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_QM_TERMINATION_SUCCESS WFP_QM_TERMINATION_SUCCESS;
		case 1028: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_QM_ESTABLISHED WFP_QM_ESTABLISHED;
		case 1029: [property.ETLSummary = this.ToString] WfpUnifiedTracing_WFP_CLASSIFY_DROP_MAC_EVENT WFP_CLASSIFY_DROP_MAC_EVENT;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table WfpUnifiedTracing_KeyModMap(value)
{
	switch(value)
	{
		case 0: "NONE";
		case 1: "IKEv1";
		case 2: "IKEv2";
		case 3: "AuthIP";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WfpUnifiedTracing_AuthTypeMap(value)
{
	switch(value)
	{
		case 0: "NONE";
		case 1: "MD5";
		case 2: "SHA-1";
		case 3: "SHA-256";
		case 4: "AES-GCM-128";
		case 5: "AES-GCM-192";
		case 6: "AES-GCM-256";
		case 7: "AES-GMAC-128";
		case 8: "AES-GMAC-192";
		case 9: "AES-GMAC-256";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WfpUnifiedTracing_CipherTypeMap(value)
{
	switch(value)
	{
		case 0: "NONE";
		case 1: "DES";
		case 2: "3DES";
		case 3: "AES-CBC-128";
		case 4: "AES-CBC-192";
		case 5: "AES-CBC-256";
		case 6: "AES-GCM-128";
		case 7: "AES-GCM-192";
		case 8: "AES-GCM-256";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WfpUnifiedTracing_ModeMap(value)
{
	switch(value)
	{
		case 1: "Transport Mode";
		case 2: "Tunnel Mode";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WfpUnifiedTracing_RoleMap(value)
{
	switch(value)
	{
		case 1: "Initiator";
		case 2: "Responder";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WfpUnifiedTracing_DirectionMap(value)
{
	switch(value)
	{
		case 0x00003900: "Inbound";
		case 0x00003901: "Outbound";
		case 0x00003902: "Forward";
		case 0x00003903: "Bidirectional";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct WfpUnifiedTracing_WFP_CLASSIFY_DROP_EVENT = FormatString("Packet Dropped - Filter Run-Time ID: %s, Layer Run-Time ID: %s", FilterId.ToString, LayerId.ToString)
{
	FILETIME Timestamp;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 ScopeId;
	UnicodeString AppId;
	SID(false) UserSID;
	UINT32 ReauthReason;
	UINT32 OriginalProfile;
	UINT32 CurrentProfile;
	UINT32 PacketDirection = WfpUnifiedTracing_DirectionMap(this);
	BOOL Loopback;
	UINT64 FilterId;
	UINT16 LayerId;
}
Struct WfpUnifiedTracing_WFP_IPSEC_KERNEL_DROP_EVENT = FormatString("IPsec: Packet Dropped - Error Code: %s, Filter Run-Time ID: %s, Layer Run-Time ID: %s", FailureStatus.ToString, FilterId.ToString, LayerId.ToString)
{
	FILETIME Timestamp;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 ScopeId;
	UnicodeString AppId;
	SID(false) UserSID;
	NTSTATUS FailureStatus;
	UINT32 Direction;
	UINT32 SPI;
	UINT64 FilterId;
	UINT16 LayerId;
}
Struct WfpUnifiedTracing_WFP_IKEEXT_MM_FAILURE_EVENT = FormatString("IPsec: Main Mode Failure - Error: %s", FailureErrorCode.ToString)
{
	FILETIME Timestamp;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 ScopeId;
	UnicodeString AppId;
	SID(false) UserSID;
	UnicodeString LocalSpn;
	UnicodeString PeerSpn;
	UINT32 LocalGroupSidCount;
	UnicodeString LocalGroupSids[LocalGroupSidCount];
	UINT32 RemoteGroupSidCount;
	UnicodeString RemoteGroupSids[RemoteGroupSidCount];
	WinErrorCode FailureErrorCode;
	UINT32 FailurePoint;
	UINT32 Flags;
	UINT32 KeyingModuleType;
	UINT32 MmState;
	UINT32 SaRole;
	UINT32 MMAuthMethod;
	BLOB(20) EndCertHash;
	UINT64 MMId;
	UINT64 MMFilterId;
}
Struct WfpUnifiedTracing_WFP_IKEEXT_QM_FAILURE_EVENT = FormatString("IPsec: Quick Mode Failure - Error: %s", FailureErrorCode.ToString)
{
	FILETIME Timestamp;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 ScopeId;
	UnicodeString AppId;
	SID(false) UserSID;
	WinErrorCode FailureErrorCode;
	UINT32 FailurePoint;
	UINT32 KeyingModuleType;
	UINT32 QMState;
	UINT32 SaRole;
	UINT32 SaTrafficType;
	UINT64 QMFilterId;
}
Struct WfpUnifiedTracing_WFP_IKEEXT_EM_FAILURE_EVENT = FormatString("IPsec: Extended Mode Failure - Error: %s", FailureErrorCode.ToString)
{
	FILETIME Timestamp;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 ScopeId;
	UnicodeString AppId;
	SID(false) UserSID;
	UnicodeString LocalSpn;
	UnicodeString PeerSpn;
	UINT32 LocalGroupSidCount;
	UnicodeString LocalGroupSids[LocalGroupSidCount];
	UINT32 RemoteGroupSidCount;
	UnicodeString RemoteGroupSids[RemoteGroupSidCount];
	WinErrorCode FailureErrorCode;
	UINT32 FailurePoint;
	UINT32 Flags;
	UINT32 EMState;
	UINT32 SaRole;
	UINT32 EMAuthMethod;
	BLOB(20) EndCertHash;
	UINT64 MMId;
	UINT64 QMFilterId;
}
Struct WfpUnifiedTracing_WFP_IPSEC_DOSP_DROP_EVENT = FormatString("IPsec DoS Protection: Packet Dropped")
{
	FILETIME Timestamp;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 ScopeId;
	UnicodeString AppId;
	SID(false) UserSID;
	[DataFieldByteOrder = BigEndian]IPv4Address InternetHostAddress;
	[DataFieldByteOrder = BigEndian]IPv4Address CorpnetHostAddress;
	NTSTATUS FailureStatus;
	UINT32 Direction;
}
Struct WfpUnifiedTracing_WFP_MM_TERMINATION_SUCCESS = FormatString("IPsec: Main Mode SA Terminated")
{
	UINT32 MainModeLocalAddressLength;
	switch
	{
		case MainModeLocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModeLocalAddress;
	}
	UINT32 MainModePeerAddressLength;
	switch
	{
		case MainModePeerAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModePeerAddress;
	}
	UINT32 KeyingModule;
	UINT64 SaLuid;
}
Struct WfpUnifiedTracing_WFP_ESTABLISHED_MMNOCERT_NOUM = FormatString("IPsec: Main Mode SA Established")
{
	UnicodeString LocalSpn;
	UnicodeString PeerSpn;
	UINT32 MainModeLocalAddressLength;
	switch
	{
		case MainModeLocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModeLocalAddress;
	}
	UINT32 MainModePeerAddressLength;
	switch
	{
		case MainModePeerAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModePeerAddress;
	}
	UINT32 KeyingModule;
	UINT32 AuthenticationMethodType;
	UINT32 EncryptionAlgorithm;
	UINT32 AuthenticationAlgorithm;
	UINT32 DiffieHellmanGroup;
	UINT32 LifetimeMinutes;
	UINT32 QMLimit;
	UINT32 Role;
	UINT32 Impersonation;
	UINT64 MMFilterId;
	UINT64 SaLuid;
}
Struct WfpUnifiedTracing_WFP_ESTABLISHED_MMCERT_NOUM = FormatString("IPsec: Main Mode SA Established")
{
	UnicodeString LocalCertDnSubject;
	UINT32 LocalCertShaThumbprintLength;
	BLOB(LocalCertShaThumbprintLength) LocalCertShaThumbprint;
	UnicodeString LocalCertDnIssuer;
	UnicodeString LocalCertDnRoot;
	UnicodeString PeerCertDnSubject;
	UINT32 PeerCertShaThumbprintLength;
	BLOB(PeerCertShaThumbprintLength) PeerCertShaThumbprint;
	UnicodeString PeerCertDnIssuer;
	UnicodeString PeerCertDnRoot;
	UINT32 MainModeLocalAddressLength;
	switch
	{
		case MainModeLocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModeLocalAddress;
	}
	UINT32 MainModePeerAddressLength;
	switch
	{
		case MainModePeerAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModePeerAddress;
	}
	UINT32 KeyingModule;
	UINT32 AuthenticationMethodType;
	UINT32 EncryptionAlgorithm;
	UINT32 AuthenticationAlgorithm;
	UINT32 DiffieHellmanGroup;
	UINT32 LifetimeMinutes;
	UINT32 QMLimit;
	UINT32 Role;
	UINT32 Impersonation;
	UINT64 MMFilterId;
	UINT64 SaLuid;
}
Struct WfpUnifiedTracing_WFP_ESTABLISHED_MMCERT_UMCERT = FormatString("IPsec: Extended Mode and Main Mode SAs Established")
{
	UnicodeString LocalCertDnSubject;
	UINT32 LocalCertShaThumbprintLength;
	BLOB(LocalCertShaThumbprintLength) LocalCertShaThumbprint;
	UnicodeString LocalCertDnIssuer;
	UnicodeString LocalCertDnRoot;
	UnicodeString PeerCertDnSubject;
	UINT32 PeerCertShaThumbprintLength;
	BLOB(PeerCertShaThumbprintLength) PeerCertShaThumbprint;
	UnicodeString PeerCertDnIssuer;
	UnicodeString PeerCertDnRoot;
	UINT32 MainModeLocalAddressLength;
	switch
	{
		case MainModeLocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModeLocalAddress;
	}
	UINT32 MainModePeerAddressLength;
	switch
	{
		case MainModePeerAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModePeerAddress;
	}
	UINT32 EncryptionAlgorithm;
	UINT32 AuthenticationAlgorithm;
	UINT32 DiffieHellmanGroup;
	UINT32 LifetimeMinutes;
	UINT32 QMLimit;
	UINT32 Role;
	UINT32 Impersonation;
	UINT64 MMFilterId;
	UINT64 SaLuid;
	UnicodeString LocalUmCertDnSubject;
	UINT32 LocalUmCertShaThumbprintLength;
	BLOB(LocalUmCertShaThumbprintLength) LocalUmCertShaThumbprint;
	UnicodeString LocalUmCertDnIssuer;
	UnicodeString LocalUmCertDnRoot;
	UnicodeString PeerUmCertDnSubject;
	UINT32 PeerUmCertShaThumbprintLength;
	BLOB(PeerUmCertShaThumbprintLength) PeerUmCertShaThumbprint;
	UnicodeString PeerUmCertDnIssuer;
	UnicodeString PeerUmCertDnRoot;
	UINT32 UMImpersonation;
	UINT64 QMFilterId;
}
Struct WfpUnifiedTracing_WFP_ESTABLISHED_MMCERT_UMNOCERT = FormatString("IPsec: Extended Mode and Main Mode SAs Established")
{
	UnicodeString LocalCertDnSubject;
	UINT32 LocalCertShaThumbprintLength;
	BLOB(LocalCertShaThumbprintLength) LocalCertShaThumbprint;
	UnicodeString LocalCertDnIssuer;
	UnicodeString LocalCertDnRoot;
	UnicodeString PeerCertDnSubject;
	UINT32 PeerCertShaThumbprintLength;
	BLOB(PeerCertShaThumbprintLength) PeerCertShaThumbprint;
	UnicodeString PeerCertDnIssuer;
	UnicodeString PeerCertDnRoot;
	UINT32 MainModeLocalAddressLength;
	switch
	{
		case MainModeLocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModeLocalAddress;
	}
	UINT32 MainModePeerAddressLength;
	switch
	{
		case MainModePeerAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModePeerAddress;
	}
	UINT32 EncryptionAlgorithm;
	UINT32 AuthenticationAlgorithm;
	UINT32 DiffieHellmanGroup;
	UINT32 LifetimeMinutes;
	UINT32 QMLimit;
	UINT32 Role;
	UINT32 Impersonation;
	UINT64 MMFilterId;
	UINT64 SaLuid;
	UnicodeString UMLocalSPN;
	UnicodeString UMPeerSPN;
	UINT32 UMAuthenticationMethodType;
	UINT32 UMImpersonation;
	UINT64 QMFilterId;
}
Struct WfpUnifiedTracing_WFP_ESTABLISHED_MMNOCERT_UMCERT = FormatString("IPsec: Extended Mode and Main Mode SAs Established")
{
	UnicodeString LocalSPN;
	UnicodeString PeerSPN;
	UINT32 MainModeLocalAddressLength;
	switch
	{
		case MainModeLocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModeLocalAddress;
	}
	UINT32 MainModePeerAddressLength;
	switch
	{
		case MainModePeerAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModePeerAddress;
	}
	UINT32 AuthenticationMethodType;
	UINT32 EncryptionAlgorithm;
	UINT32 AuthenticationAlgorithm;
	UINT32 DiffieHellmanGroup;
	UINT32 LifetimeMinutes;
	UINT32 QMLimit;
	UINT32 Role;
	UINT32 Impersonation;
	UINT64 MMFilterId;
	UINT64 SaLuid;
	UnicodeString LocalUmCertDnSubject;
	UINT32 LocalUmCertShaThumbprintLength;
	BLOB(LocalUmCertShaThumbprintLength) LocalUmCertShaThumbprint;
	UnicodeString LocalUmCertDnIssuer;
	UnicodeString LocalUmCertDnRoot;
	UnicodeString PeerUmCertDnSubject;
	UINT32 PeerUmCertShaThumbprintLength;
	BLOB(PeerUmCertShaThumbprintLength) PeerUmCertShaThumbprint;
	UnicodeString PeerUmCertDnIssuer;
	UnicodeString PeerUmCertDnRoot;
	UINT32 UMImpersonation;
	UINT64 QMFilterId;
}
Struct WfpUnifiedTracing_WFP_ESTABLISHED_MMNOCERT_UMNOCERT = FormatString("IPsec: Extended Mode and Main Mode SAs Established")
{
	UnicodeString LocalSpn;
	UnicodeString PeerSpn;
	UINT32 MainModeLocalAddressLength;
	switch
	{
		case MainModeLocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModeLocalAddress;
	}
	UINT32 MainModePeerAddressLength;
	switch
	{
		case MainModePeerAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE MainModePeerAddress;
	}
	UINT32 AuthenticationMethodType;
	UINT32 EncryptionAlgorithm;
	UINT32 AuthenticationAlgorithm;
	UINT32 DiffieHellmanGroup;
	UINT32 LifetimeMinutes;
	UINT32 QMLimit;
	UINT32 Role;
	UINT32 Impersonation;
	UINT64 MMFilterId;
	UINT64 SaLuid;
	UnicodeString UMLocalSPN;
	UnicodeString UMPeerSPN;
	UINT32 UMAuthenticationMethodType;
	UINT32 UMImpersonation;
	UINT64 QMFilterId;
}
Struct WfpUnifiedTracing_WFP_IPSEC_DOSP_ENABLE_EVENT = FormatString("IPsec DoS Protection Enabled")
{
	_struct Empty{};
}
Struct WfpUnifiedTracing_WFP_IPSEC_DOSP_DISABLE_EVENT = FormatString("IPsec DoS Protection Disabled")
{
	_struct Empty{};
}
Struct WfpUnifiedTracing_WFP_IPSEC_DOSP_MAX_ENTRIES_EVENT = FormatString("IPsec DoS Protection failed to create state because the maximum number of entries allowed by policy has been reached")
{
	_struct Empty{};
}
Struct WfpUnifiedTracing_WFP_IKE_ACQUIRE = FormatString("IPsec: Negotiation Request Initiated")
{
	AsciiString KeyingModule;
	UINT64 AcquireContext;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UnicodeString Mode;
	UINT64 FilterId;
	UINT32 IPProtocol;
	UINT64 InterfaceLuid;
	UINT32 ProfileId;
	UINT16 LocalUdpEncapPort;
	UINT16 RemoteUdpEncapPort;
	UnicodeString MMTargetName;
	UnicodeString EMTargetName;
	UINT32 NumTokens;
	UnicodeString Token1Type;
	UnicodeString Token1Principal;
	UnicodeString Token1Mode;
	UINT64 Token1;
	UnicodeString Token2Type;
	UnicodeString Token2Principal;
	UnicodeString Token2Mode;
	UINT64 Token2;
	UnicodeString Token3Type;
	UnicodeString Token3Principal;
	UnicodeString Token3Mode;
	UINT64 Token3;
	UnicodeString Token4Type;
	UnicodeString Token4Principal;
	UnicodeString Token4Mode;
	UINT64 Token4;
	UINT64 VirtualIfTunnelId;
	UINT64 TrafficSelectorId;
	UINT32 Flags;
	UINT32 RekeySPI;
	UINT64 OrigVirtualIfTunnelId;
	UINT32 PacketLocalAddressLength;
	switch
	{
		case PacketLocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE PacketLocalAddress;
	}
	UINT32 PacketRemoteAddressLength;
	switch
	{
		case PacketRemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE PacketRemoteAddress;
	}
	UINT32 PacketIPProtocol;
	UINT64 PacketInterfaceLuid;
	UINT32 PacketProfileId;
}
Struct WfpUnifiedTracing_IKE_PACKET_SEND = FormatString("IPsec: Send ISAKMP Packet")
{
	AsciiString ICookie;
	AsciiString RCookie;
	AsciiString ExchangeType;
	UINT32 Length;
	AsciiString NextPayload;
	UINT8 Flags;
	UINT32 MessageID;
	[post.Property.Source = this]
	UnicodeString LocalAddress;
	UINT32 LocalPort;
	UINT32 LocalProtocol;
	[post.Property.Destination = this]
	UnicodeString RemoteAddress;
	UINT32 RemotePort;
	UINT32 RemoteProtocol;
	UINT64 InterfaceLuid;
}
Struct WfpUnifiedTracing_IKE_PACKET_RECV = FormatString("IPsec: Receive ISAKMP Packet")
{
	AsciiString ICookie;
	AsciiString RCookie;
	AsciiString ExchangeType;
	UINT32 Length;
	AsciiString NextPayload;
	UINT8 Flags;
	UINT32 MessageID;
	[post.Property.Source = this]
	UnicodeString LocalAddress;
	UINT32 LocalPort;
	UINT32 LocalProtocol;
	[post.Property.Destination = this]
	UnicodeString RemoteAddress;
	UINT32 RemotePort;
	UINT32 RemoteProtocol;
	UINT64 InterfaceLuid;
	UINT32 ProfileId;
}
Struct WfpUnifiedTracing_WFP_USERMODE_ERROR = FormatString("User Mode Error")
{
	AsciiString Function;
	WinErrorCode ErrorCode;
}
Struct WfpUnifiedTracing_WFP_QM_TERMINATION_SUCCESS = FormatString("An IPsec quick mode security association ended.")
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UnicodeString LocalAddressMask;
	UINT32 LocalTunnelEndpointLength;
	switch
	{
		case LocalTunnelEndpointLength > 0 :
			ETL_SOCKADDR_STORAGE LocalTunnelEndpoint;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UnicodeString RemoteAddressMask;
	UINT32 RemoteTunnelEndpointLength;
	switch
	{
		case RemoteTunnelEndpointLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteTunnelEndpoint;
	}
	UINT32 IPProtocol;
	UINT64 QMSaLuid;
	UINT64 VirtualIFTunnelId;
	UINT64 VirtualIFTrafficSelectorId;
}
Struct WfpUnifiedTracing_WFP_QM_ESTABLISHED = FormatString("An IPsec quick mode security association was established.")
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UnicodeString LocalAddressMask;
	UINT32 LocalTunnelEndpointLength;
	switch
	{
		case LocalTunnelEndpointLength > 0 :
			ETL_SOCKADDR_STORAGE LocalTunnelEndpoint;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UnicodeString RemoteAddressMask;
	UINT32 RemoteTunnelEndpointLength;
	switch
	{
		case RemoteTunnelEndpointLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteTunnelEndpoint;
	}
	UINT32 IPProtocol;
	UINT8 KeyingModuleName = WfpUnifiedTracing_KeyModMap(this);
	UINT8 AHAuthType = WfpUnifiedTracing_AuthTypeMap(this);
	UINT8 ESPAuthType = WfpUnifiedTracing_AuthTypeMap(this);
	UINT8 ESPCipherType = WfpUnifiedTracing_CipherTypeMap(this);
	UINT32 LifetimeSeconds;
	UINT32 LifetimeKilobytes;
	UINT32 LifetimePackets;
	UINT8 Mode = WfpUnifiedTracing_ModeMap(this);
	UINT8 Role = WfpUnifiedTracing_RoleMap(this);
	UINT64 TransportFilterId;
	UINT64 MMSaLuid;
	UINT64 QMSaLuid;
	UINT32 InboundSPI;
	UINT32 OutboundSPI;
	UINT64 VirtualIFTunnelId;
	UINT64 VirtualIFTrafficSelectorId;
}
Struct WfpUnifiedTracing_WFP_CLASSIFY_DROP_MAC_EVENT = FormatString("Packet Dropped - Filter Run-Time ID: %s, Layer Run-Time ID: %s", FilterId.ToString, LayerId.ToString)
{
	FILETIME Timestamp;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT16 EtherType;
	UINT32 SnapControl;
	UINT32 SnapOui;
	UINT16 VlanTag;
	UINT64 FilterId;
	UINT16 LayerId;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsBfeTriggerProvider, "{54732ee5-61ca-4727-9da1-10be5a4f773d}")]
Protocol WfpUnifiedTracing_MicrosoftWindowsBfeTriggerProvider = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] WfpUnifiedTracing_Symbol_FirewallPortOpenEvent Symbol_FirewallPortOpenEvent;
		case 2: [property.ETLSummary = this.ToString] WfpUnifiedTracing_Symbol_FirewallPortCloseEvent Symbol_FirewallPortCloseEvent;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct WfpUnifiedTracing_Symbol_FirewallPortOpenEvent = FormatString("Symbol_FirewallPortOpenEvent - FirewallPortStatusChangeGuid : %s", FirewallPortStatusChangeGuid.ToString)
{
	GUID(true) FirewallPortStatusChangeGuid;
}
Struct WfpUnifiedTracing_Symbol_FirewallPortCloseEvent = FormatString("Symbol_FirewallPortCloseEvent - FirewallPortStatusChangeGuid : %s", FirewallPortStatusChangeGuid.ToString)
{
	GUID(true) FirewallPortStatusChangeGuid;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWFP_Keyword, "{0c478c5b-0351-41b1-8c58-4a6737da32e3}")]
struct WfpUnifiedTracing_MicrosoftWindowsWFP_Keyword
{
	UINT64 utTransfer:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_TRANSFER":"");
	UINT64 Reserved1:31 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 Reserved2:18 = FormatString("        (%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsBfeTriggerProvider_Keyword, "{54732ee5-61ca-4727-9da1-10be5a4f773d}")]
struct WfpUnifiedTracing_MicrosoftWindowsBfeTriggerProvider_Keyword
{
	UINT64 Keyword_FirewallPortOpenEvent:1 = FormatString(" (%s) %s", this.ToBitString, this? "Symbol_FirewallPortOpenKeyword":"");
	UINT64 Keyword_FirewallPortCloseEvent:1 = FormatString("(%s) %s", this.ToBitString, this? "Symbol_FirewallPortCloseKeyword":"");
	UINT64 Reserved1:62 = FormatString("                     (%s)", this.ToBitString);
}
