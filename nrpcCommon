//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Netlogon Remote Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-NRPC]: Netlogon Remote Protocol Specification (13.0)
//#
//#  Comments:               Parser Framework: PAC v2.1.1577.0
//#
//#  Revision Class and Date:Major, 7/29/2009
//#                          Minor, 4/16/2010
//#
//####

Protocol NRPC = FormatString( "%s %s%s%s%s%s", 
	Property.NRPCMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.NRPCSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.NRPCSummary : "" )
{
	[Property.NRPCSummary = ""]
	[Property.NRPCMethodName = NRPCMethodNameTable( Property.MSRPCOpnum )]
	Switch( Property.MSRPCOpnum )
	{
		Case 0:
			_Struct NetrLogonUasLogon
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, UserName = %s, Workstation = %s", ServerName.ToString, UserName.ToString, Workstation.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
										NdrWideString UserName;
										NdrWideString Workstation;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrPtr pValidationInformation;
										Switch
										{
											Case pValidationInformation.ReferentID != 0:
												NRPCNetlogonValidationUasInfo ValidationInformation;
										}
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 1:
			_Struct NetrLogonUasLogoff
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, UserName = %s, Workstation = %s", ServerName.ToString, UserName.ToString, Workstation.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
										NdrWideString UserName;
										NdrWideString Workstation;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonLogoffUasInfo LogoffInformation;
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}

		Case 2:
			_Struct NetrLogonSamLogon
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "LogonServer = %s, ComputerName = %s, %s, %s", LogonServer.ToString, ComputerName.ToString, LogonLevel.ToString, ValidationLevel.ToString )]
									Struct
									{
										NdrWideStringPtr LogonServer;
										NdrWideStringPtr ComputerName;
										NRPCNetlogonAuthenticatorPtr Authenticator;
										NRPCNetlogonAuthenticatorPtr ReturnAuthenticator;
										NRPCNetlogonLogonInfoClass LogonLevel;
										Switch( Property.MSRPCNdr64 )
										{
											Case TRUE: Align8 NDR64Pad;
										}
										NRPCNetlogonLevel LogonInformation;
										NRPCNetlogonValidationInfoClass ValidationLevel;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "Authoritative = %s, ReturnValue = %s", Authoritative? "TRUE" : "FALSE", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticatorPtr ReturnAuthenticator;
										Switch( Property.MSRPCNdr64 )
										{
											Case TRUE: Align8 NDR64Pad;
										}
										NRPCNetlogonValidation ValidationInformation;
										BOOLEAN Authoritative = this? "The validation information is final" : "The validation information is NOT final";
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 3:
			_Struct NetrLogonSamLogoff
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "LogonServer = %s, ComputerName = %s, %s", LogonServer.ToString, ComputerName.ToString, LogonLevel.ToString )]
									Struct
									{
										NdrWideStringPtr LogonServer;
										NdrWideStringPtr ComputerName;
										NRPCNetlogonAuthenticatorPtr Authenticator;
										NRPCNetlogonAuthenticatorPtr ReturnAuthenticator;
										NRPCNetlogonLogonInfoClass LogonLevel;
										Switch( Property.MSRPCNdr64 )
										{
											Case TRUE: Align8 NDR64Pad;
										}
										NRPCNetlogonLevel LogonInformation;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticatorPtr ReturnAuthenticator;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 4:
			_Struct NetrServerReqChallenge
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, ComputerName = %s", PrimaryName.ToString, ComputerName.ToString )]
									Struct
									{
										NdrWideStringPtr PrimaryName;
										NdrWideString ComputerName;
										NRPCNetlogonCredential ClientChallenge;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonCredential ServerChallenge;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 5:
			_Struct NetrServerAuthenticate
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, AccountName = %s, ComputerName = %s, SecureChannelType = %s", PrimaryName.ToString, AccountName.ToString, ComputerName.ToString, SecureChannelType.ToString )]
									Struct
									{
										NdrWideStringPtr PrimaryName;
										NdrWideString AccountName;
										NRPCNetlogonSecureChannelType SecureChannelType;
										NdrWideString ComputerName;
										NRPCNetlogonCredential ClientCredential;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonCredential ServerCredential;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 6:
			_Struct NetrServerPasswordSet
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, AccountName = %s, ComputerName = %s, SecureChannelType = %s", PrimaryName.ToString, AccountName.ToString, ComputerName.ToString, SecureChannelType.ToString )]
									Struct
									{
										NdrWideStringPtr PrimaryName;
										NdrWideString AccountName;
										NRPCNetlogonSecureChannelType SecureChannelType;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCLmOwfPassword UasNewPassword;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 7:// From WSPP
			_Struct NetrDatabaseDeltas
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, ComputerName = %s, DatabaseID = %s", PrimaryName.ToString, ComputerName.ToString, DatabaseID.ToString )]
									Struct
									{
										NdrWideString PrimaryName;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										UINT32 DatabaseID = FormatString( "%s", NRPCDatabaseIDTable(this) );
										NRPCNlprModifiedCount DomainModifiedCount;
										UINT32 PreferredMaximumLength;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "DomainModifiedCount = %u, ReturnValue = %s", DomainModifiedCount, ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NRPCNlprModifiedCount DomainModifiedCount;
										NdrPtr pDeltaArray;
										Switch
										{
											Case pDeltaArray.ReferentID != 0:
												NRPCNetlogonDeltaEnumArray DeltaArray;
										}
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 8:// From WSPP
			_Struct NetrDatabaseSync
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, ComputerName = %s, DatabaseID = %s, %s, SyncContext = %u", PrimaryName.ToString, ComputerName.ToString, DatabaseID.ToString, RestartState.ToString, SyncContext )]
									Struct
									{
										NdrWideString PrimaryName;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										UINT32 DatabaseID = FormatString( "%s", NRPCDatabaseIDTable(this) );
										NRPCSyncState RestartState;
										UINT32 SyncContext;
										UINT32 PreferredMaximumLength;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "SyncContext = %u, ReturnValue = %s", SyncContext, ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										UINT32 SyncContext;
										NdrPtr pDeltaArray;
										Switch
										{
											Case pDeltaArray.ReferentID != 0:
												NRPCNetlogonDeltaEnumArray DeltaArray;
										}
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 9:
			_Struct NetrAccountDeltas
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, ComputerName = %s, Count = %u, Level = %u, BufferSize = %u", PrimaryName.ToString, ComputerName.ToString, Count, Level, BufferSize )]
									Struct
									{
										NdrWideStringPtr PrimaryName;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NRPCUasInfo0 RecordID;
										UINT32 Count;
										UINT32 Level;
										UINT32 BufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "CountReturned = %u, TotalEntries = %u, ReturnValue = %s", CountReturned, TotalEntries, ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NdrConformantArray(FALSE, TRUE) Buffer;
										Align4 Pad;
										UINT32 CountReturned;
										UINT32 TotalEntries;
										NRPCUasInfo0 NextRecordId;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 10:
			_Struct NetrAccountSync
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, ComputerName = %s, Reference = %u, Level = %u, BufferSize = %u", PrimaryName.ToString, ComputerName.ToString, Reference, Level, BufferSize )]
									Struct
									{
										NdrWideStringPtr PrimaryName;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										UINT32 Reference;
										UINT32 Level;
										UINT32 BufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "CountReturned = %u, TotalEntries = %u, NextReference = %u, ReturnValue = %s", CountReturned, TotalEntries, NextReference, ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NdrConformantArray(FALSE, TRUE) Buffer;
										Align4 Pad;
										UINT32 CountReturned;
										UINT32 TotalEntries;
										UINT32 NextReference;
										NRPCUasInfo0 LastRecordId;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}

		Case 11:
			_Struct NetrGetDCName
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, DomainName = %s", ServerName.ToString, DomainName.ToString )]
									Struct
									{
										NdrWideString ServerName;
										NdrWideStringPtr DomainName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "Buffer = %s, ReturnValue = %s", Buffer.ToString, WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrWideStringPtr Buffer;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 12:
			_Struct NetrLogonControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, FunctionCode = %s, QueryLevel = %s", ServerName.ToString, NRPCFunctionCodeTable( FunctionCode, FALSE ), NRPCQueryLevelTable( QueryLevel ) )]
									Struct
									{
										NdrWideStringPtr ServerName;
										Align4 Pad;
										UINT32 FunctionCode = NRPCFunctionCodeTable( this, TRUE );
										UINT32 QueryLevel = NRPCQueryLevelTable( this );
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NRPCNetlogonControlQueryInformation Buffer;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 13:
			_Struct NetrGetAnyDCName
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, DomainName = %s", ServerName.ToString, DomainName.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
										NdrWideStringPtr DomainName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "Buffer = %s, ReturnValue = %s", Buffer.ToString, WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrWideStringPtr Buffer;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 14:
			_Struct NetrLogonControl2
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, FunctionCode = %s, QueryLevel = %s", ServerName.ToString, NRPCFunctionCodeTable( FunctionCode, FALSE ), NRPCQueryLevelTable( QueryLevel ) )]
									Struct
									{
										NdrWideStringPtr ServerName;
										Align4 Pad;
										UINT32 FunctionCode = NRPCFunctionCodeTable( this, TRUE );
										UINT32 QueryLevel = NRPCQueryLevelTable( this );
										Switch( Property.MSRPCNdr64 )
										{
											Case TRUE: Align8 Pad;
										}
										NRPCNetlogonControlDataInformation Data;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NRPCNetlogonControlQueryInformation Buffer;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 15:
			_Struct NetrServerAuthenticate2
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, AccountName = %s, ComputerName = %s, SecureChannelType = %s, NegotiateFlags = %s", PrimaryName.ToString, AccountName.ToString, ComputerName.ToString, SecureChannelType.ToString, NegotiateFlags.ToString )]
									Struct
									{
										NdrWideStringPtr PrimaryName;
										NdrWideString AccountName;
										NRPCNetlogonSecureChannelType SecureChannelType;
										NdrWideString ComputerName;
										NRPCNetlogonCredential ClientCredential;
										Align4 Pad;
										NRPCNegotiateFlags NegotiateFlags;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "NegotiateFlags = %s, ReturnValue = %s", NegotiateFlags.ToString, ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonCredential ServerCredential;
										NRPCNegotiateFlags NegotiateFlags;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 16:
			_Struct NetrDatabaseSync2
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, ComputerName = %s, DatabaseID = %s, %s, SyncContext = %u", PrimaryName.ToString, ComputerName.ToString, NRPCDatabaseIDTable( DatabaseID ), RestartState.ToString, SyncContext )]
									Struct
									{
										NdrWideString PrimaryName;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										UINT32 DatabaseID = NRPCDatabaseIDTable( this );
										NRPCSyncState RestartState;
										UINT32 SyncContext;
										UINT32 PreferredMaximumLength;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "SyncContext = %u, ReturnValue = %s", SyncContext, ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										UINT32 SyncContext;
										NdrPtr pDeltaArray;
										Switch
										{
											Case pDeltaArray.ReferentID != 0:
												NRPCNetlogonDeltaEnumArray DeltaArray;
										}
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 17:
			_Struct NetrDatabaseRedo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, ComputerName = %s, ChangeLogEntrySize = %u", PrimaryName.ToString, ComputerName.ToString, ChangeLogEntrySize )]
									Struct
									{
										NdrWideString PrimaryName;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NdrConformant Size;
										Switch
										{
											Case Size.MaxCount > 0:
												[ DataFieldFrameLength = FrameOffset + Size.MaxCount ]
												NRPCChangelogEntry ChangeLogEntry;
										}
										UINT32 ChangeLogEntrySize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString ) ]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NdrPtr pDeltaArray;
										Switch
										{
											Case pDeltaArray.ReferentID != 0:
												NRPCNetlogonDeltaEnumArray DeltaArray;
										}
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 18:
			_Struct NetrLogonControl2Ex
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, FunctionCode = %s, QueryLevel = %s", ServerName.ToString, NRPCFunctionCodeTable(FunctionCode, FALSE), NRPCQueryLevelTable( QueryLevel ) )]
									Struct
									{
										NdrWideStringPtr ServerName;
										Align4 Pad;
										UINT32 FunctionCode = NRPCFunctionCodeTable(this, TRUE);
										UINT32 QueryLevel = NRPCQueryLevelTable(this);
										Switch(Property.MSRPCNdr64)
										{
											Case TRUE: Align8 Pad;
										}
										NRPCNetlogonControlDataInformation Data;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "%s, ReturnValue = %s", Buffer.ToString, WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NRPCNetlogonControlQueryInformation Buffer;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 19:
			_Struct NetrEnumerateTrustedDomains
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s", ServerName.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCDomainNameBuffer DomainNameBuffer;
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 20:
			_Struct DsrGetDcName
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ComputerName = %s, DomainName = %s, Flags = %s", ComputerName.ToString, DomainName.ToString, Flags.ToString )]
									Struct
									{
										NdrWideStringPtr ComputerName;
										NdrWideStringPtr DomainName;
										NdrPtr pDomainGuid;
										Switch
										{
											Case pDomainGuid.ReferentID != 0:
												MSRPCGuid DomainGuid;
										}
										NdrPtr pSiteGuid;
										Switch
										{
											Case pSiteGuid.ReferentID != 0:
												MSRPCGuid SiteGuid;
										}
										NRPCDsrGetDcNameEx2Flags Flags;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrPtr pDomainControllerInfo;
										Switch
										{
											Case pDomainControllerInfo.ReferentID != 0:
												NRPCDomainControllerInfow DomainControllerInfo;
										}
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 21:
			_Struct NetrLogonGetCapabilities 
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, ComputerName = %s, QueryLevel = %s", ServerName.ToString, ComputerName.ToString, NRPCQueryLevelTable( QueryLevel ) )]
									Struct
									{
										NdrWideString ServerName;
										NdrWideStringPtr ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										UINT32 QueryLevel = NRPCQueryLevelTable( this );
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NRPCLogonGetCapabilities ServerCapabilities;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}

		Case 22:
			_Struct NetrLogonSetServiceBits
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, ServiceBitsOfInterest = %s, ServiceBitsOfInterest = %s, ServiceBits = %s", ServerName.ToString, ServiceBitsOfInterest.ToString, ServiceBits.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
										Align4 Pad;
										UINT32 ServiceBitsOfInterest = FormatString("0x%08X", this)
										{
											Switch( Property.MSRPCByteOrder )
											{
												Case LittleEndian:
													Struct
													{
														UINT32 unused0:6 = FormatString( "(%s)", this.ToBitString );
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The state of the time service is being set." : "The state of the time service is NOT being set.");
														UINT32 unused1:2 = FormatString( "(%s)", this.ToBitString );
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The state of the time service with clock hardware is being set." : "The state of the time service with clock hardware is NOT being set.");
														UINT32 unused2:3 = FormatString( "(%s)", this.ToBitString );
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The state of the Active Directory web service is being set." : "The state of the Active Directory web service is NOT being set.");
														UINT32 unused3:18 = FormatString( "(%s)", this.ToBitString );
													}
												Default:
													Struct
													{
														UINT32 unused0:18 = FormatString( "(%s)", this.ToBitString );								
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The state of the Active Directory web service is being set." : "The state of the Active Directory web service is NOT being set.");								
														UINT32 unused1:3 = FormatString( "(%s)", this.ToBitString );								
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The state of the time service with clock hardware is being set." : "The state of the time service with clock hardware is NOT being set.");								
														UINT32 unused2:2 = FormatString( "(%s)", this.ToBitString );								
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The state of the time service is being set." : "The state of the time service is NOT being set.");								
														UINT32 unused3:6 = FormatString( "(%s)", this.ToBitString );								
													}
											}
										}
										UINT32 ServiceBits = FormatString("0x%08X", this)
										{
											Switch( Property.MSRPCByteOrder )
											{
												Case LittleEndian:
													Struct
													{
														UINT32 unused0:6 = FormatString( "(%s)", this.ToBitString );
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Time service is running." : "Time service is NOT running.");
														UINT32 unused1:2 = FormatString( "(%s)", this.ToBitString );
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Time service with clock hardware is running." : "Time service with clock hardware is NOT running.");
														UINT32 unused2:3 = FormatString( "(%s)", this.ToBitString );
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Active Directory Web service is running." : "Active Directory Web service is NOT running.");
														UINT32 unused3:18 = FormatString( "(%s)", this.ToBitString );
													}
												Default:
													Struct
													{
														UINT32 unused0:18 = FormatString( "(%s)", this.ToBitString );								
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Time service is running." : "Time service is NOT running.");								
														UINT32 unused1:3 = FormatString( "(%s)", this.ToBitString );								
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Time service with clock hardware is running." : "Time service with clock hardware is NOT running.");								
														UINT32 unused2:2 = FormatString( "(%s)", this.ToBitString );								
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The state of the time service is being set." : "The state of the time service is NOT being set.");								
														UINT32 unused3:6 = FormatString( "(%s)", this.ToBitString );
													}
											}
										}
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 23:
			_Struct NetrLogonGetTrustRid
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, DomainName = %s", ServerName.ToString, DomainName.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
										NdrWideStringPtr DomainName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "Rid = %u, ReturnValue = %s", Rid, WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										UINT32 Rid;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 24:
			_Struct NetrLogonComputeServerDigest
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, Rid = %u, MessageSize = %u", ServerName.ToString, Rid, MessageSize )]
									Struct
									{
										NdrWideStringPtr ServerName;
										Align4 Pad1;
										UINT32 Rid;
										NdrConformant Size;
										AsciiString( Size.MaxCount/2 ) Message;
										Align4 Pad2;
										UINT32 MessageSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										AsciiString(16) NewMessageDigest;
										AsciiString(16) OldMessageDigest;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 25:
			_Struct NetrLogonComputeClientDigest
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s DomainName = %s MessageSize = %u", ServerName.ToString, DomainName.ToString, MessageSize )]
									Struct
									{
										NdrWideStringPtr ServerName;
										NdrWideStringPtr DomainName;
										NdrConformant Size;
										AsciiString( Size.MaxCount ) Message;
										Align4 Pad;
										UINT32 MessageSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										BLOB(16) NewMessageDigest;
										BLOB(16) OldMessageDigest;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 26:
			_Struct NetrServerAuthenticate3
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, AccountName = %s, ComputerName = %s, SecureChannelType = %s, NegotiateFlags = %s", PrimaryName.ToString, AccountName.ToString, ComputerName.ToString, SecureChannelType.ToString, NegotiateFlags.ToString )]
									Struct
									{
										NdrWideStringPtr PrimaryName;
										NdrWideString AccountName;
										NRPCNetlogonSecureChannelType SecureChannelType;
										NdrWideString ComputerName;
										NRPCNetlogonCredential ClientCredential;
										Align4 Pad;
										NRPCNegotiateFlags NegotiateFlags;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "NegotiateFlags = %s, AccountRid = %u, ReturnValue = %s", NegotiateFlags.ToString, AccountRid, ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonCredential ServerCredential;
										NRPCNegotiateFlags NegotiateFlags;
										UINT32 AccountRid;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 27:
			_Struct DsrGetDcNameEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ComputerName = %s, DomainName = %s, SiteName = %s, Flags = %s", ComputerName.ToString, DomainName.ToString, SiteName.ToString, Flags.ToString )]
									Struct
									{
										NdrWideStringPtr ComputerName;
										NdrWideStringPtr DomainName;
										NdrPtr pDomainGuid;
										Switch
										{
											Case pDomainGuid.ReferentID != 0:
												MSRPCGuid DomainGuid;
										}
										NdrWideStringPtr SiteName;
										Align4 Pad;
										NRPCDsrGetDcNameEx2Flags Flags;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrPtr pDomainControllerInfo;
										Switch
										{
											Case pDomainControllerInfo.ReferentID != 0:
												NRPCDomainControllerInfow DomainControllerInfo;
										}
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 28:
			_Struct DsrGetSiteName
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ComputerName = %s", ComputerName.ToString )]
									Struct
									{
										NdrWideStringPtr ComputerName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "SiteName = %s, ReturnValue = %s", SiteName.ToString, WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrWideStringPtr SiteName;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 29:
			_Struct NetrLogonGetDomainInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, ComputerName = %s, Level = %s", ServerName.ToString, ComputerName.ToString, NRPCNetrLogonGetDomainInfoLevelTable( Level ) )]
									Struct
									{
										NdrWideString ServerName;
										NdrWideStringPtr ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										UINT32 Level = NRPCNetrLogonGetDomainInfoLevelTable(this);
										Switch( Property.MSRPCNdr64 )
										{
											Case TRUE: Align8 NDR64Pad;
										}
										NRPCNetlogonWorkstationInformation WkstaBuffer;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										Switch( Property.MSRPCNdr64 )
										{
											Case TRUE: Align8 NDR64Pad;
										}
										NRPCNetlogonDomainInformation DomBuffer;
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 30:
			_Struct NetrServerPasswordSet2
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, AccountName = %s, ComputerName = %s, SecureChannelType = %s", PrimaryName.ToString, AccountName.ToString, ComputerName.ToString, SecureChannelType.ToString )]
									Struct
									{
										NdrWideStringPtr PrimaryName;
										NdrWideString AccountName;
										NRPCNetlogonSecureChannelType SecureChannelType;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCNlTrustPassword ClearNewPassword;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 31:
			_Struct NetrServerPasswordGet
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, AccountName = %s, ComputerName = %s, AccountType = %s", PrimaryName.ToString, AccountName.ToString, ComputerName.ToString, NetrServerPasswordGet.ToString )]
									Struct
									{
										NdrWideStringPtr PrimaryName;
										NdrWideString AccountName;
										NRPCNetlogonSecureChannelType AccountType;
										NdrWideString ComputerName;
										Align4 Pad;						
										NRPCNetlogonAuthenticator Authenticator;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NRPCNtOwfPassword EncryptedNtOwfPassword;
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 32:
			_Struct NetrLogonSendToSam
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s ComputerName = %s OpaqueBufferSize = %u", PrimaryName.ToString, ComputerName.ToString, OpaqueBufferSize )]
									Struct
									{
										NdrWideStringPtr PrimaryName;
										NdrWideString ComputerName;
										Align4 Pad1;
										NRPCNetlogonAuthenticator Authenticator;
										NdrConformantArray( FALSE, TRUE ) OpaqueBuffer = this.Pointer? "Encrypted Data" : "NULL";
										Align4 Pad2;
										UINT32 OpaqueBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 33:
			_Struct DsrAddressToSiteNamesW
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ComputerName = %s, EntryCount = %u", ComputerName.ToString, EntryCount )]
									Struct
									{
										NdrWideStringPtr ComputerName;
										Align4 Pad;
										UINT32 EntryCount;
										Struct SocketAddresses = Size.ToString
										{
											NdrConformant Size;
											[ MaxLoopCount = Size.MaxCount, Property.NRPCNlSocketAddressCount = 0 ]
											While[ TRUE ]
											{
												NRPCNlSocketAddress SocketAddresse;
											}
											
											[ MaxLoopCount = Property.NRPCNlSocketAddressCount ]
											While[ TRUE ]
											{
												NRPCNlSocketAddressRef SocketAddresseRef;
											}
										}
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrPtr pSiteNames;
										Switch
										{
											Case pSiteNames.ReferentID != 0:
												NRPCNlSiteNameArray SiteNames;
										}
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 34:
			_Struct DsrGetDcNameEx2
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ComputerName = %s, AccountName = %s, DomainName = %s, SiteName = %s, Flags = %s", ComputerName.ToString, AccountName.ToString, DomainName.ToString, SiteName.ToString, Flags.ToString )]
									Struct
									{
										NdrWideStringPtr ComputerName;
										NdrWideStringPtr AccountName;
										Align4 Pad1;
										UINT32 AllowableAccountControlBits = FormatString("0x%08X", this )
										{
											Switch( Property.MSRPCNdr64 )
											{
												Case LittleEndian:
													Struct
													{
														UINT32 unused0:8 = FormatString( "(%s)", this.ToBitString );
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Account for users whose primary account is in another domain." : "Account for users whose primary account is in same domain.");
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Normal domain user account." : "Sepecial domain user account.");
														UINT32 unused1:1 = FormatString( "(%s)", this.ToBitString );
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Interdomain trust account." : "NOT interdomain trust account.");
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Computer account for a domain member." : "NOT Computer account for a domain member.");
														UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Computer account for a BDC." : "NOT Computer account for a BDC.");
														UINT32 unused2:11 = FormatString( "(%s)", this.ToBitString );
														UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Computer account for an RODC." : "NOT computer account for an RODC.");
														UINT32 unused3:6 = FormatString( "(%s)", this.ToBitString );
													}
												Default:
													Struct
													{
														UINT32 unused0:6 = FormatString( "(%s)", this.ToBitString );
														UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Computer account for an RODC." : "NOT computer account for an RODC.");
														UINT32 unused1:11 = FormatString( "(%s)", this.ToBitString );
														UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Computer account for a BDC." : "NOT Computer account for a BDC.");
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Computer account for a domain member." : "NOT Computer account for a domain member.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Interdomain trust account." : "NOT interdomain trust account.");
														UINT32 unused2:1 = FormatString( "(%s)", this.ToBitString );
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Normal domain user account." : "Sepecial domain user account.");
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Account for users whose primary account is in another domain." : "Account for users whose primary account is in same domain.");
														UINT32 unused3:8 = FormatString( "(%s)", this.ToBitString );
													}
											}
										}
										NdrWideStringPtr DomainName;
										NdrPtr pDomainGuid;
										Switch
										{
											Case pDomainGuid.ReferentID != 0:
												MSRPCGuid DomainGuid;
										}
										NdrWideStringPtr SiteName;
										Align2 Pad2;
										NRPCDsrGetDcNameEx2Flags Flags;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrPtr pDomainControllerInfo;
										Switch
										{
											Case pDomainControllerInfo.ReferentID != 0:
												NRPCDomainControllerInfow DomainControllerInfo;
										}
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 35:
			_Struct NetrLogonGetTimeServiceParentDomain
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s", ServerName.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "DomainName = %s, PdcSameSite = %s, ReturnValue = %s", DomainName.ToString, PdcSameSite? "TRUE" : "FALSE", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrWideStringPtr DomainName;
										Align4 Pad;
										INT32 PdcSameSite = this? "The PDC is in the same site as the server specified by ServerName." : "The PDC is not in the same site as the server specified by ServerName.";
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 36:
			_Struct NetrEnumerateTrustedDomainsEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s", ServerName.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "%s, ReturnValue = %s", Domains.ToString, WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NRPCNetlogonTrustedDomainArray Domains;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 37:
			_Struct DsrAddressToSiteNamesExW
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ComputerName = %s, EntryCount = %u", ComputerName.ToString, EntryCount )]
									Struct
									{
										NdrWideStringPtr ComputerName;
										Align4 Padding;
										UINT32 EntryCount;
										Struct SocketAddresses = Size.ToString
										{
											NdrConformant Size;
											[ MaxLoopCount = Size.MaxCount, Property.NRPCNlSocketAddressCount = 0 ]
											While[ TRUE ]
											{
												NRPCNlSocketAddress SocketAddresse;
											}
											
											[ MaxLoopCount = Property.NRPCNlSocketAddressCount ]
											While[ TRUE ]
											{
												NRPCNlSocketAddressRef SocketAddresseRef;
											}
										}
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrPtr pSiteNames;
										Switch
										{
											Case pSiteNames.ReferentID != 0:
												NRPCNlSiteNameExArray SiteNames;
										}
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 38:
			_Struct DsrGetDcSiteCoverageW
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s", ServerName.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrPtr pSiteNames;
										Switch
										{
											Case pSiteNames.ReferentID != 0:
												NRPCNlSiteNameArray SiteNames;
										}
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 39:
			_Struct NetrLogonSamLogonEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "LogonServer = %s, ComputerName = %s, %s, ExtraFlags = %s,", LogonServer.ToString, ComputerName.ToString, LogonLevel.ToString, ExtraFlags.ToString )]
									Struct
									{
										NdrWideStringPtr LogonServer;
										NdrWideStringPtr ComputerName;
										NRPCNetlogonLogonInfoClass LogonLevel;
										Switch( Property.MSRPCNdr64 )
										{
											Case TRUE: Align8 NDR64Pad;
										}
										NRPCNetlogonLevel LogonInformation;
										NRPCNetlogonValidationInfoClass ValidationLevel;
										UINT32 ExtraFlags = FormatString("0x%08X", this )
										{
											Switch( Property.MSRPCByteOrder )
											{
												Case LittleEndian:
													Struct
													{
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request MUST be passed to the domain controller at the root of the forest." : "Request MUST NOT be passed to the domain controller at the root of the forest." );
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request MUST be passed to the DC at the end of the first hop over a cross-foresttrust." : "Request MUST NOT be passed to the DC at the end of the first hop over a cross-foresttrust.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request was passed by an RODC to a DC in a different domain." : "Request was NOT passed by an RODC to a DC in a different domain.");
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request is an NTLM authentication package request passed by an RODC." : "Request is NOT an NTLM authentication package request passed by an RODC.");
														UINT32 unused0:28 = FormatString( "(%s)", this.ToBitString );
													}
												Default:
													Struct
													{
														UINT32 unused0:28 = FormatString( "(%s)", this.ToBitString );
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request is an NTLM authentication package request passed by an RODC." : "Request is NOT an NTLM authentication package request passed by an RODC.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request was passed by an RODC to a DC in a different domain." : "Request was NOT passed by an RODC to a DC in a different domain.");
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request MUST be passed to the DC at the end of the first hop over a cross-foresttrust." : "Request MUST NOT be passed to the DC at the end of the first hop over a cross-foresttrust.");
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request MUST be passed to the domain controller at the root of the forest." : "Request MUST NOT be passed to the domain controller at the root of the forest." );
													}
											}
										}
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "Authoritative = %s, ExtraFlags = %s, ReturnValue = %s", Authoritative? "TRUE" : "FALSE", ExtraFlags.ToString, ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonValidation ValidationInformation;
										BOOLEAN Authoritative = this? "The validation information is final and MUST remain unchanged." : "The validation information is NOT final.";
										Align4 pad;
										UINT32 ExtraFlags = FormatString("0x%08X", this )
										{
											Switch( Property.MSRPCByteOrder )
											{
												Case LittleEndian:
													Struct
													{
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request MUST be passed to the domain controller at the root of the forest." : "Request MUST NOT be passed to the domain controller at the root of the forest." );
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request MUST be passed to the DC at the end of the first hop over a cross-foresttrust." : "Request MUST NOT be passed to the DC at the end of the first hop over a cross-foresttrust.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request was passed by an RODC to a DC in a different domain." : "Request was NOT passed by an RODC to a DC in a different domain.");
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request is an NTLM authentication package request passed by an RODC." : "Request is NOT an NTLM authentication package request passed by an RODC.");
														UINT32 unused0:28 = FormatString( "(%s)", this.ToBitString );
													}
												Default:
													Struct
													{
														UINT32 unused0:28 = FormatString( "(%s)", this.ToBitString );
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request is an NTLM authentication package request passed by an RODC." : "Request is NOT an NTLM authentication package request passed by an RODC.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request was passed by an RODC to a DC in a different domain." : "Request was NOT passed by an RODC to a DC in a different domain.");
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request MUST be passed to the DC at the end of the first hop over a cross-foresttrust." : "Request MUST NOT be passed to the DC at the end of the first hop over a cross-foresttrust.");
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Request MUST be passed to the domain controller at the root of the forest." : "Request MUST NOT be passed to the domain controller at the root of the forest." );
													}
											}
										}
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 40:
			_Struct DsrEnumerateDomainTrusts
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, Flags = %s", ServerName.ToString, Flags.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
										Align4 Pad;
										UINT32 Flags = FormatString( "0x%08X", this )
										{
											Switch( Property.MSRPCByteOrder )
											{
												Case LittleEndian:
													Struct
													{
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is a member of the forest." : "Domain is NOT a member of the forest.");
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is directly trusted by this domain." : "Domain is NOT directly trusted by this domain.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is the root of a tree in the forest." : "Domain is NOT the root of a tree in the forest.");
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is the primary domain of the queried server." : "Domain is NOT the primary domain of the queried server.");
														UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Primary domain is running in native mode." : "Primary domain is NOT running in native mode.");
														UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is directly trusting this domain." : "Domain is NOT directly trusting this domain.");
														UINT32 unused0:1 = FormatString( "(%s)", this.ToBitString );
														UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is MIT Kerberos realm, trusted with RC4 encryption." : "Domain is NOT MIT Kerberos realm, trusted with RC4 encryption.");
														UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Kerberos uses AES keys to encrypt Kerberos TGTs." : "Kerberos does NOT use AES keys to encrypt Kerberos TGTs.");
														UINT32 unused1:23 = FormatString( "(%s)", this.ToBitString );
													}
												Default:
													Struct
													{	
														UINT32 unused1:23 = FormatString( "(%s)", this.ToBitString );
														UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Kerberos uses AES keys to encrypt Kerberos TGTs." : "Kerberos does NOT use AES keys to encrypt Kerberos TGTs.");
														UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is MIT Kerberos realm, trusted with RC4 encryption." : "Domain is NOT MIT Kerberos realm, trusted with RC4 encryption.");
														UINT32 unused0:1 = FormatString( "(%s)", this.ToBitString );
														UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is directly trusting this domain." : "Domain is NOT directly trusting this domain.");
														UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Primary domain is running in native mode." : "Primary domain is NOT running in native mode.");
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is the primary domain of the queried server." : "Domain is NOT the primary domain of the queried server.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is the root of a tree in the forest." : "Domain is NOT the root of a tree in the forest.");
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is directly trusted by this domain." : "Domain is NOT directly trusted by this domain.");
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is a member of the forest." : "Domain is NOT a member of the forest.");
													}
											}
										}
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "%s, ReturnValue = %s", Domains.ToString, WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NRPCNetlogonTrustedDomainArray Domains;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 41:
			_Struct DsrDeregisterDnsHostRecords
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, DnsDomainName = %s, DnsHostName = %s", ServerName.ToString, DnsDomainName.ToString, DnsHostName.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
										NdrWideStringPtr DnsDomainName;
										NdrPtr pDomainGuid;
										Switch
										{
											Case pDomainGuid.ReferentID != 0:
												MSRPCGuid DomainGuid;
										}
										NdrPtr pDsaGuid;
										Switch
										{
											Case pDsaGuid.ReferentID != 0:
												MSRPCGuid DsaGuid;
										}
										NdrWideString DnsHostName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 42:
			_Struct NetrServerTrustPasswordsGet
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "TrustedDcName = %s, AccountName = %s, ComputerName = %s, SecureChannelType = %s", TrustedDcName.ToString, AccountName.ToString, ComputerName.ToString )]
									Struct
									{
										NdrWideStringPtr TrustedDcName;
										NdrWideString AccountName;
										NRPCNetlogonSecureChannelType SecureChannelType;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NRPCNtOwfPassword EncryptedNewOwfPassword;
										NRPCNtOwfPassword EncryptedOldOwfPassword;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 43:
			_Struct DsrGetForestTrustInformation
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, TrustedDomainName = %s, Flags = %s", ServerName.ToString, TrustedDomainName.ToString, Flags.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
										NdrWideStringPtr TrustedDomainName;
										Align4 Pad;
										UINT32 Flags = FormatString("0x%08X", this )
										{
											Switch( Property.MSRPCByteOrder )
											{
												Case LittleEndian:
													Struct
													{
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Update a trusted domain object (TDO) with the information returned in ForestTrustInfo." : "NOT update a trusted domain object (TDO) with the information returned in ForestTrustInfo.");
														UINT32 unused0:31 = FormatString( "(%s)", this.ToBitString );
													}
												Default:
													Struct
													{
														UINT32 unused0:31 = FormatString( "(%s)", this.ToBitString );
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Update a trusted domain object (TDO) with the information returned in ForestTrustInfo." : "NOT update a trusted domain object (TDO) with the information returned in ForestTrustInfo.");
													}
											}
										}
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", WinErrorCodeNameTable( ReturnValue ) )]
									Struct
									{
										NdrPtr pForestTrustInfo;
										Switch
										{	
											Case pForestTrustInfo.ReferentID != 0:
												LSADLsaForestTrustInformation ForestTrustInfo;
										}
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 44:
			_Struct NetrGetForestTrustInformation
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, ComputerName = %s", ServerName.ToString, ComputerName.ToString)]
									Struct
									{
										NdrWideStringPtr ServerName;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
										UINT32 Flags = MUSTBeSetToTable( this, "0" );
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NdrPtr pForestTrustInfo;
										Switch
										{
											Case pForestTrustInfo.ReferentID != 0:
												LSADLsaForestTrustInformation ForestTrustInfo;
										}
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 45:
			_Struct NetrLogonSamLogonWithFlags
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "LogonServer = %s, ComputerName = %s, %s, %s", LogonServer.ToString, ComputerName.ToString, LogonLevel.ToString, ValidationLevel.ToString )]
									Struct
									{
										NdrWideStringPtr LogonServer;
										NdrWideStringPtr ComputerName;
										NRPCNetlogonAuthenticatorPtr Authenticator;
										NRPCNetlogonAuthenticatorPtr ReturnAuthenticator;
										NRPCNetlogonLogonInfoClass LogonLevel;
										Switch( Property.MSRPCNdr64 )
										{
											Case TRUE: Align8 NDR64Pad;
										}
										NRPCNetlogonLevel LogonInformation;
										NRPCNetlogonValidationInfoClass ValidationLevel;
										Align4 Pad;
										UINT32 ExtraFlags = FormatString( "0x%08X", this )
										{
											Switch( Property.MSRPCByteOrder )
											{
												Case LittleEndian:
													Struct
													{
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed to the domain controller at the root of the forest.");
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed to the DC at the end of the first hop over a cross-foresttrust.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed by an RODC to a DC in a different domain.");
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is an NTLM authentication package request passed by an RODC.");
														UINT32 unused0:28 = FormatString( "(%s)", this.ToBitString );
													}
												Default:
													Struct
													{
														UINT32 unused0:28 = FormatString( "(%s)", this.ToBitString );
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is an NTLM authentication package request passed by an RODC.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed by an RODC to a DC in a different domain.");
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed to the DC at the end of the first hop over a cross-foresttrust.");
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed to the domain controller at the root of the forest.");
													}
											}
										}
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "Authoritative = %s, ExtraFlags = %s, ReturnValue = %s", Authoritative? "TRUE": "FALSE", ExtraFlags.ToString, ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticatorPtr ReturnAuthenticator;
										Switch( Property.MSRPCNdr64 )
										{
											Case TRUE: Align8 NDR64Pad;
										}
										NRPCNetlogonValidation ValidationInformation;
										BOOLEAN Authoritative = this? "The validation information is final" : "The validation information is NOT final";
										Align4 Pad;
										UINT32 ExtraFlags = FormatString( "0x%08X", this )
										{
											Switch( Property.MSRPCByteOrder )
											{
												Case LittleEndian:
													Struct
													{
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed to the domain controller at the root of the forest.");
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed to the DC at the end of the first hop over a cross-foresttrust.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed by an RODC to a DC in a different domain.");
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is an NTLM authentication package request passed by an RODC.");
														UINT32 unused0:28 = FormatString( "(%s)", this.ToBitString );
													}
												Default:
													Struct
													{
														UINT32 unused0:28 = FormatString( "(%s)", this.ToBitString );
														UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is an NTLM authentication package request passed by an RODC.");
														UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed by an RODC to a DC in a different domain.");
														UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed to the DC at the end of the first hop over a cross-foresttrust.");
														UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, "Request is passed to the domain controller at the root of the forest.");
													}
											}
										}
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 46:
			_Struct NetrServerGetTrustInfo
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "TrustedDcName = %s, AccountName = %s, ComputerName = %s, SecureChannelType = %s", TrustedDcName.ToString, AccountName.ToString, ComputerName.ToString, SecureChannelType.ToString )]
									Struct
									{
										NdrWideStringPtr TrustedDcName;
										NdrWideString AccountName;
										NRPCNetlogonSecureChannelType SecureChannelType;
										NdrWideString ComputerName;
										Align4 Pad;
										NRPCNetlogonAuthenticator Authenticator;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NRPCNtOwfPassword EncryptedNewOwfPassword;
										NRPCNtOwfPassword EncryptedOldOwfPassword;
										NdrPtr pTrustInfo;
										Switch
										{
											Case pTrustInfo.ReferentID != 0:
												NRPCNlGenericRpcData TrustInfo;
										}
										Align4 Pad;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 48:// From WSPP
			_Struct DsrUpdateReadOnlyServerDnsRecords
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ServerName = %s, ComputerName = %s, SiteName = %s, DnsTtl = %s", ServerName.ToString, ComputerName.ToString, SiteName.ToString, DnsTtl.ToString )]
									Struct
									{
										NdrWideStringPtr ServerName;
										NdrWideString ComputerName;
										Align4 Pad1;
										NRPCNetlogonAuthenticator Authenticator;
										NdrWideStringPtr SiteName;
										Align4 Pad2;
										UINT32 DnsTtl = FormatString("Time To Live = %u seconds", this );
										NdrAlign Pad3;
										NRPCNlDnsNameInfoArray DnsNames;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "ReturnValue = %s", ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										NdrAlign Pad1;
										NRPCNlDnsNameInfoArray DnsNames;
										Align4 Pad2;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 49:// From WSPP
			_Struct NetrChainSetClientAttributes
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "PrimaryName = %s, ChainedFromServerName = %s, ChainedForClientName = %s, InVersion = %u, OutVersion = %u", PrimaryName.ToString, ChainedFromServerName.ToString, ChainedForClientName.ToString, InVersion, OutVersion )]
									Struct
									{
										NdrWideString PrimaryName;
										NdrWideString ChainedFromServerName;
										NdrWideString ChainedForClientName;
										Align4 Pad1;
										NRPCNetlogonAuthenticator Authenticator;
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										UINT32 InVersion = MustBeSetToTable(this, "1");
										Switch( Property.MSRPCNdr64 )
										{
											Case TRUE: Align8 NDR64Pad;
										}
										NRPCNlInChainSetClientAttributes PmsgIn;
										Align4 Pad2;
										UINT32 OutVersion = MustBeSetToTable(this, "1");
										NdrAlign Pad3;
										NRPCNlOutChainSetClientAttributes PmsgOut;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[NRPCSummary = FormatString( "OutVersion = %u, ReturnValue = %s", OutVersion, ReturnValue.ToString )]
									Struct
									{
										NRPCNetlogonAuthenticator ReturnAuthenticator;
										UINT32 OutVersion = MustBeSetToTable(this, "1");
										NRPCNlOutChainSetClientAttributes PmsgOut;
										Align4 Pad1;
										NTSTATUS ReturnValue;
									}
							}
						}
				}
			}
		
		Case 47:
			struct NotUsedOnWire
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						[NRPCSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						_Struct Request
						{
							ReportParserWarning("NRPC", "Invalid logon method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
					
					Case 0x02: //RESPONSE
						[NRPCSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						_Struct Response
						{
							ReportParserWarning("NRPC", "Invalid logon method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
				}
			}
		
		Default:
			Switch
			{
				case IsValueNone(Property.MSRPCOpnum):
					struct
					{
						Blob( FrameLength - Offset ) data;
						ReportParserWarning("NRPC", "Property MSRPCOpnum is missing") ParserWarning;
					}
				default:
					ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown logon method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
	}
}

Table NRPCMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "NetrLogonUasLogon";
		Case 1: "NetrLogonUasLogoff";
		Case 2: "NetrLogonSamLogon";
		Case 3: "NetrLogonSamLogoff";
		Case 4: "NetrServerReqChallenge";
		Case 5: "NetrServerAuthenticate";
		Case 6: "NetrServerPasswordSet";
		Case 7: "NetrDatabaseDeltas";
		Case 8: "NetrDatabaseSync";
		Case 9: "NetrAccountDeltas";
		Case 10: "NetrAccountSync";
		Case 11: "NetrGetDCName";
		Case 12: "NetrLogonControl";
		Case 13: "NetrGetAnyDCName";
		Case 14: "NetrLogonControl2";
		Case 15: "NetrServerAuthenticate2";
		Case 16: "NetrDatabaseSync2";
		Case 17: "NetrDatabaseRedo";
		Case 18: "NetrLogonControl2Ex";
		Case 19: "NetrEnumerateTrustedDomains";
		Case 20: "DsrGetDcName";
		Case 21: "NetrLogonGetCapabilities";
		Case 22: "NetrLogonSetServiceBits";
		Case 23: "NetrLogonGetTrustRid";
		Case 24: "NetrLogonComputeServerDigest";
		Case 25: "NetrLogonComputeClientDigest";
		Case 26: "NetrServerAuthenticate3";
		Case 27: "DsrGetDcNameEx";
		Case 28: "DsrGetSiteName";
		Case 29: "NetrLogonGetDomainInfo";
		Case 30: "NetrServerPasswordSet2";
		Case 31: "NetrServerPasswordGet";
		Case 32: "NetrLogonSendToSam";
		Case 33: "DsrAddressToSiteNamesW";
		Case 34: "DsrGetDcNameEx2";
		Case 35: "NetrLogonGetTimeServiceParentDomain";
		Case 36: "NetrEnumerateTrustedDomainsEx";
		Case 37: "DsrAddressToSiteNamesExW";
		Case 38: "DsrGetDcSiteCoverageW";
		Case 39: "NetrLogonSamLogonEx";
		Case 40: "DsrEnumerateDomainTrusts";
		Case 41: "DsrDeregisterDnsHostRecords";
		Case 42: "NetrServerTrustPasswordsGet";
		Case 43: "DsrGetForestTrustInformation";
		Case 44: "NetrGetForestTrustInformation";
		Case 45: "NetrLogonSamLogonWithFlags";
		Case 46: "NetrServerGetTrustInfo";
		Case 47: "OpnumUnused47";
		Case 48: "DsrUpdateReadOnlyServerDnsRecords";
		Case 49: "NetrChainSetClientAttributes";
		Default: FormatString("Unknow Opnum (%u)", Opnum);
	}
}

Table NRPCDatabaseIDTable( Value )
{
	Switch( Value )
	{
		Case 0: "SAM database.";
		Case 1: "SAM built-in database.";
		Case 2: "LSA database.";
		Default: FormatString("Unknow Value (%u)", Value);
	}
}

Table NRPCFunctionCodeTable( Value, Description )
{
	Switch( Value )
	{
		Case 0x00000001: FormatString("NETLOGON_CONTROL_QUERY %s", Description? "- No operation; only the requested information is returned." : "" );
		Case 0x00000002: FormatString("NETLOGON_CONTROL_REPLICATE %s", Description? "- Forces a BDC to perform an immediate partial synchronization of all databasesas detailed in section ." : "" );
		Case 0x00000003: FormatString("NETLOGON_CONTROL_SYNCHRONIZE %s", Description? "- Forces a BDC to perform an immediate full synchronization of all databases." : "" );
		Case 0x00000004: FormatString("NETLOGON_CONTROL_PDC_REPLICATE %s", Description? "- Forces a PDC to immediately send announcement messages to ask each BDC to replicate the databases" : "" );
		Case 0x00000005: FormatString("NETLOGON_CONTROL_REDISCOVER %s", Description? "- Forces the server to rediscover a domain controller in the specified domain and to set up a secure channel to the discovered DC." : "" );
		Case 0x00000006: FormatString("NETLOGON_CONTROL_TC_QUERY %s", Description? "- Queries the status of the secure channel to the DC in the specified domain, stored in the ConnectionStatus field of the ServerSessionInfo table, requesting the status about the last usage of the secure channel." : "" );
		Case 0x00000007: FormatString("NETLOGON_CONTROL_TRANSPORT_NOTIFY %s", Description? "- Notifies the Netlogon server that a new network transport has been added." : "" );
		Case 0x00000008: FormatString("NETLOGON_CONTROL_FIND_USER %s", Description? "- Queries the name of a trusted domain that contains an account for a user with the specified name." : "" );
		Case 0x00000009: FormatString("NETLOGON_CONTROL_CHANGE_PASSWORD %s", Description? "- Causes the server to generate a new secret key (password) and to set it on the account used by the DC in the specified domain for setting up the secure channel from the server." : "" );
		Case 0x0000000A: FormatString("NETLOGON_CONTROL_TC_VERIFY %s", Description? "- Verifies the current status of the server's secure channel to a DC in the specified domain." : "" );
		Case 0x0000000B: FormatString("NETLOGON_CONTROL_FORCE_DNS_REG %s", Description? "- Forces the DC to reregister all of its DNS records." : "" );
		Case 0x0000000C: FormatString("NETLOGON_CONTROL_QUERY_DNS_REG %s", Description? "- Queries the status of DNS updates performed by the Netlogon server." : "" );
		Case 0x0000FFFC: FormatString("NETLOGON_CONTROL_BACKUP_CHANGE_LOG %s", Description? "- Copies to a backup file the contents of a file that contains a cache of database changes." : "" );
		Case 0x0000FFFD: FormatString("NETLOGON_CONTROL_TRUNCATE_LOG %s", Description? "- Truncates the contents of a debug file that contains debugging information about the Netlogon service operations." : "" );
		Case 0x0000FFFE: FormatString("NETLOGON_CONTROL_SET_DBFLAG %s", Description? "- Sets the level of verbosity of output into the debug file that contains debugging information about the Netlogon service operations." : "" );
		Case 0x0000FFFF: FormatString("NETLOGON_CONTROL_BREAKPOINT %s", Description? "- If the operating system is not a checked build, the method returns ERROR_NOT_SUPPORTED." : "" );
		Default: FormatString("Unknow Value (0x%08X)", Value);
	}
}

Table NRPCQueryLevelTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "NETLOGON_INFO_1";
		Case 0x00000002: "NETLOGON_INFO_2";
		Case 0x00000003: "NETLOGON_INFO_3";
		Case 0x00000004: "NETLOGON_INFO_4";
		Default: FormatString("Unknow Value (0x%08X)", Value);
	}
}

Table NRPCNetrLogonGetDomainInfoLevelTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "NETLOGON_DOMAIN_INFO";
		Case 0x00000002: "NETLOGON_LSA_POLICY_INFO";
		Default: FormatString("Unknow Value (0x%08X)", Value);
	}
}

// 3.5.4.3.2 NegotiateFlags
[ DataTypeByteOrder = LittleEndian ]
Struct NRPCNegotiateFlags = FormatString( "0x%08X", Flags )
{
	UINT32 Flags
	{
		UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports account lockout." : "Not supports account lockout." );
		UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports this behavior: Windows NT 3.5 BDCs persistently try to update their database to the PDC version after they receive a notification indicating that their database is out-of-date." : "Not supports this behavior: Windows NT 3.5 BDCs persistently try to update their database to the PDC version after they receive a notification indicating that their database is out-of-date." );
		UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports RC4 encryption." : "NOT supports RC4 encryption." );
		UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports promotion count." : "NOT supports promotion count" );
		UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports BDCs handling CHANGELOGs." : "NOT supports BDCs handling CHANGELOGs." );
		UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports restarting of full synchronization between domain controllers." : "NOT supports restarting of full synchronization between domain controllers." );
		UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports handling of multiple SIDs." : "NOT supports handling of multiple SIDs." );
		UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports the REDO functionality." : "NOT s" );
		UINT32 I:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports refusal of password changes." : "NOT supports refusal of password changes." );
		UINT32 J:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports sending password information to the PDC." : "NOT supports sending password information to the PDC." );
		UINT32 K:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports generic pass-through authentication." : "NOT supports generic pass-through authentication." );
		UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports concurrent RPC calls." : "NOT supports concurrent RPC calls." );
		UINT32 M:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports avoiding of account database replication." : "NOT supports avoiding of account database replication." );
		UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports avoiding of Security Authority database replication." : "NOT supports avoiding of Security Authority database replication." );
		UINT32 O:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports strong keys." : "NOT supports strong keys." );
		UINT32 P:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports transitive trusts." : "NOT supports transitive trusts." );
		UINT32 Q:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports DNS domain trusts." : "NOT supports DNS domain trusts." );
		UINT32 R:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports the NetrServerPasswordSet2 functionality." : "NOT supports the NetrServerPasswordSet2 functionality." );
		UINT32 S:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports the NetrLogonGetDomainInfo functionality." : "NOT supports the NetrLogonGetDomainInfo functionality." );
		UINT32 T:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports cross-forest trusts." : "NOT supports cross-forest trusts." );
		UINT32 U:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports neutralizing Windows NT 4.0 emulation." : "NOT supports neutralizing Windows NT 4.0 emulation." );
		UINT32 V:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports RODC pass-through to different domains." : "NOT supports RODC pass-through to different domains." );
		UINT32 W:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports AES [FIPS197] encryption and SHA2 hashing." : "NOT supports AES [FIPS197] encryption and SHA2 hashing." );
		UINT32 unused0:6 = FormatString( "(%s)", this.ToBitString );
		UINT32 X:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports authenticated RPC calls to \\pipe\\lsass." : "NOT supports authenticated RPC calls to \\pipe\\lsass." );
		UINT32 Y:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Supports authenticated RPC." : "NOT supports authenticated RPC." );
		UINT32 unused1:1 = FormatString( "(%s)", this.ToBitString );
	}
}

//3.5.4.5.4 CHANGELOG_ENTRY (custom-mashalled structure)
Struct NRPCChangelogEntry = FormatString("DBIndex = %s, DeltaType = %s", NRPCDatabaseIDTable( DBIndex ), NRPCNetlogonDeltaTypeTable( DeltaType, FALSE ) )
{
	UINT64 SerialNumber;
	UINT32 ObjectRid;
	UINT16 Flags = FormatString("0x%08X", this)
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The object requires immediate replication at the moment that the object is changed." : "The object does NOT require immediate replication at the moment that the object is changed." );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The object is an account with a changed password." : "The object is NOT an account with a changed password." );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The optional ObjectSid field is included in the message." : "The optional ObjectSid field is NOT included in the message." );
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The optional ObjectName field is included in the message." : "The optional ObjectName field is NOT included in the message." );
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The object is the first object changed after a promotion of a BDC to a new PDC." : "The object is NOT the first object changed after a promotion of a BDC to a new PDC." );
					UINT32 unused0:11 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:11 = FormatString( "(%s)", this.ToBitString );
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The object is the first object changed after a promotion of a BDC to a new PDC." : "The object is NOT the first object changed after a promotion of a BDC to a new PDC." );
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The optional ObjectName field is included in the message." : "The optional ObjectName field is NOT included in the message." );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The optional ObjectSid field is included in the message." : "The optional ObjectSid field is NOT included in the message." );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The object is an account with a changed password." : "The object is NOT an account with a changed password." );
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The object requires immediate replication at the moment that the object is changed." : "The object does NOT require immediate replication at the moment that the object is changed." );
				}
		}
	}
	UINT8 DBIndex = NRPCDatabaseIDTable( this );
	UINT8 DeltaType = NRPCNetlogonDeltaTypeTable( this, TRUE );
	Switch
	{
		Case Flags.C == TRUE:
			SID(TRUE) ObjectSid;
	}
	Switch
	{
		Case Flags.D == TRUE:
			UnicodeString ObjectName;
	}
	BLOB(FrameLength - FrameOffset) Pad;
}

// 3.5.4.2.1 Flags
Struct NRPCDsrGetDcNameEx2Flags = FormatString( "0x%08X", Flags )
{
	UINT32 Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Forces cached DC data to be ignored." : "NOT Forces cached DC data to be ignored.");
					UINT32 unused0:3 = FormatString( "(%s)", this.ToBitString );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC support specific operating system versions." : "NOT requires that the returned DC support specific operating system versions.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The method MUST first attempt to find a DC that supports directory service functions." : "The first attempt of the method is NOT specified.");
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be a global catalog server for the forest of domains." : "NOT requires that the returned DC be a global catalog server for the forest of domains.");
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be the PDC for the domain." : "NOT requires that the returned DC be the PDC for the domain.");
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "If the A flag is not specified, this method uses cached DC data if available, rather than attempting a DC locator call." : "NOT uses uses cached DC data.");
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The returned DC MUST have an IP (either IPv4 or IPv6) address." : "The returned DC is NOT required to have an IP (either IPv4 or IPv6) address.");
					UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be currently running the Kerberos Key Distribution Center service." : "NOT requires that the returned DC be currently running the Kerberos Key Distribution Center service.");
					UINT32 I:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be currently running the Windows Time Service." : "NOT requires that the returned DC be currently running the Windows Time Service.");
					UINT32 J:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be writable." : "NOT requires that the returned DC be writable.");
					UINT32 K:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The method MUST first attempt to find a DC that is a reliable time server." : "The first attempt of the method is NOT specified.");
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The receiving server MUST return a different server in the domain, if one exists and ignored if not running as a DC." : "The return of the receiving server is NOT specified.");
					UINT32 M:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The server returned is an LDAP server." : "The return of the server is NOT specified.");
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DomainName parameter is a NetBIOS name." : "DomainName parameter is NOT a NetBIOS name.");
					UINT32 O:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DomainName parameter is a DNS name." : "The DomainName parameter is NOT a DNS name.");
					UINT32 P:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Attempts to find a DC in the next closest site, if a DC in the closest site is not available." : "NOT attempts to find a DC in the next closest site, if a DC in the closest site is not available.");
					UINT32 Q:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be running a specific operating system." : "NOT requires that the returned DC be running a specific operating system.");
					UINT32 unused1:10 = FormatString( "(%s)", this.ToBitString );
					UINT32 R:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The names returned in the DomainControllerName and DomainName fields of DomainControllerInfo MUST be DNS names." : "The names returned in the DomainControllerName and DomainName fields of DomainControllerInfo is NOT required to be DNS names.");
					UINT32 S:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The names returned in the DomainControllerName and DomainName fields of DomainControllerInfo MUST be NetBIOS names." : "The names returned in the DomainControllerName and DomainName fields of DomainControllerInfo is NOT required to be NetBIOS names.");
						
				}
			Default:
				Struct
				{
					UINT32 S:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The names returned in the DomainControllerName and DomainName fields of DomainControllerInfo MUST be NetBIOS names." : "The names returned in the DomainControllerName and DomainName fields of DomainControllerInfo is NOT required to be NetBIOS names.");
					UINT32 R:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The names returned in the DomainControllerName and DomainName fields of DomainControllerInfo MUST be DNS names." : "The names returned in the DomainControllerName and DomainName fields of DomainControllerInfo is NOT required to be DNS names.");
					UINT32 unused0:10 = FormatString( "(%s)", this.ToBitString );
					UINT32 Q:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be running a specific operating system." : "NOT requires that the returned DC be running a specific operating system.");
					UINT32 P:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Attempts to find a DC in the next closest site, if a DC in the closest site is not available." : "NOT attempts to find a DC in the next closest site, if a DC in the closest site is not available.");
					UINT32 O:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DomainName parameter is a DNS name." : "The DomainName parameter is NOT a DNS name.");
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DomainName parameter is a NetBIOS name." : "DomainName parameter is NOT a NetBIOS name.");
					UINT32 M:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The server returned is an LDAP server." : "The return of the server is NOT specified.");
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The receiving server MUST return a different server in the domain, if one exists and ignored if not running as a DC." : "The return of the receiving server is NOT specified.");
					UINT32 K:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The method MUST first attempt to find a DC that is a reliable time server." : "The first attempt of the method is NOT specified.");
					UINT32 J:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be writable." : "NOT requires that the returned DC be writable.");
					UINT32 I:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be currently running the Windows Time Service." : "NOT requires that the returned DC be currently running the Windows Time Service.");
					UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be currently running the Kerberos Key Distribution Center service." : "NOT requires that the returned DC be currently running the Kerberos Key Distribution Center service.");
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The returned DC MUST have an IP (either IPv4 or IPv6) address." : "The returned DC is NOT required to have an IP (either IPv4 or IPv6) address.");
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "If the A flag is not specified, this method uses cached DC data if available, rather than attempting a DC locator call." : "NOT uses uses cached DC data.");
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be the PDC for the domain." : "NOT requires that the returned DC be the PDC for the domain.");
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC be a global catalog server for the forest of domains." : "NOT requires that the returned DC be a global catalog server for the forest of domains.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The method MUST first attempt to find a DC that supports directory service functions." : "The first attempt of the method is NOT specified.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Requires that the returned DC support specific operating system versions." : "NOT requires that the returned DC support specific operating system versions.");
					UINT32 unused1:3 = FormatString( "(%s)", this.ToBitString );
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Forces cached DC data to be ignored." : "NOT Forces cached DC data to be ignored.");
				}
		}
	}
}


//*********************************************************************
//	2.2.1.1	Basic Structures
//*********************************************************************

//
//	_CYPHER_BLOCK
//	Alignment: None
//
Struct NRPCCypherBlock
{
	BLOB(8) Data;
}

//
//	_STRING
//	Alignment: None
//
Struct NRPCString
{
	NdrAlign Pad;
	UINT16 Length;
	UINT16 MaximumLength;
	NdrPtr pBuffer;
}

//
//	_LM_OWF_PASSWORD
//	Alignment: None
//
Struct NRPCLmOwfPassword
{
	NRPCCypherBlock Data[2];
}

//
//	_NT_OWF_PASSWORD
//	Alignment: None
//
Struct NRPCNtOwfPassword
{
	NRPCCypherBlock Data[2];
}

//
//	_NETLOGON_AUTHENTICATOR
//	Alignment: 4
//
Struct NRPCNetlogonAuthenticator = FormatString( "Timestamp = %s", Timestamp.ToString )
{
	NRPCNetlogonCredential Credential;
	TIMESTAMP Timestamp;
}

Struct NRPCNetlogonAuthenticatorPtr
{
	NdrPtr pNetlogonAuthenticator;
	Switch
	{
		Case pNetlogonAuthenticator.ReferentID != 0:
			NRPCNetlogonAuthenticator NetlogonAuthenticator;
	}
}


//*********************************************************************
//	2.2.1.2	DC Location Structures
//*********************************************************************

Table NRPCDomainControllerInfowDomainControllerAddressTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "The address is a string that contains an IP address in dotted-decimal notation.";
		Case 0x00000002: "The address is a NetBIOS name.";
		Default: FormatString("Unknow Value(0x%X)", Value);
	}
}

//
//	_DOMAIN_CONTROLLER_INFOW
//	Alignment: None
//
Struct NRPCDomainControllerInfow = FormatString("DomainControllerName = %s", DomainControllerName? DomainControllerName.ToString : "NULL" )
{
	NdrPtr pDomainControllerName;
	NdrPtr pDomainControllerAddress;
	UINT32 DomainControllerAddressType = NRPCDomainControllerInfowDomainControllerAddressTypeTable(this);
	MSRPCGuid DomainGuid;
	NdrPtr pDomainName;
	NdrPtr pDnsForestName;
	UINT32 Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC is the domain'sprimary domain controller (PDC)." : "The DC is NOT the domain'sprimary domain controller (PDC).");
					UINT32 unused0:1 = FormatString( "(%s)", this.ToBitString );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC contains the global catalog (GC) for the forestActive Directory." : "The DC does not contain the global catalog (GC) for the forestActive Directory.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC supports the Lightweight Directory Access Protocol (LDAP)." : "The DC does NOT support the Lightweight Directory Access Protocol (LDAP).");
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC supports a directory service." : "The DC does NOT support a directory service.");
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC is a Kerberos Key Distribution Center (KDC)." : "The DC is NOT a Kerberos Key Distribution Center (KDC).");
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC has a network time service available." : "The DC does NOT have a network time service available.");
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC is in the closest site to the client." : "The DC is NOT in the closest site to the client.");
					
					UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC has a writable directory service available." : "The DC does NOT have a writable directory service available.");
					UINT32 I:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC has clock hardware and a network time service available." : "The DC does NOT have clock hardware and a network time service available.");
					UINT32 J:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC is an LDAP server servicing an Application NC." : "The DC is NOT an LDAP server servicing an Application NC.");
					UINT32 K:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC is a read-only DC." : "The DC is NOT a read-only DC.");
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The server is a writable DC." : "The server is NOT a writable DC.");
					UINT32 unused1:15 = FormatString( "(%s)", this.ToBitString );
					UINT32 P:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC has an Active Directory Web Service available." : "The DC does NOT have an Active Directory Web Service available.");
					UINT32 M:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC's name is a DNS name." : "The DC's name is NOT a DNS name.");
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC'sdomain name is a DNS name." : "The DC'sdomain name is NOT a DNS name.");
					UINT32 O:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC'sforest name is a DNS name." : "The DC'sforest name is NOT a DNS name.");
				}
			Default:
				Struct
				{
					UINT32 O:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC'sforest name is a DNS name." : "The DC'sforest name is NOT a DNS name.");
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC'sdomain name is a DNS name." : "The DC'sdomain name is NOT a DNS name.");
					UINT32 M:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC's name is a DNS name." : "The DC's name is NOT a DNS name.");
					UINT32 P:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC has an Active Directory Web Service available." : "The DC does NOT have an Active Directory Web Service available.");
					UINT32 unused1:0 = FormatString( "(%s)", this.ToBitString );
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The server is a writable DC." : "The server is NOT a writable DC.");
					UINT32 K:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC is a read-only DC." : "The DC is NOT a read-only DC.");
					UINT32 J:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC is an LDAP server servicing an Application NC." : "The DC is NOT an LDAP server servicing an Application NC.");
					UINT32 I:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC has clock hardware and a network time service available." : "The DC does NOT have clock hardware and a network time service available.");
					UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC has a writable directory service available." : "The DC does NOT have a writable directory service available.");
					
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC is in the closest site to the client." : "The DC is NOT in the closest site to the client.");
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC has a network time service available." : "The DC does NOT have a network time service available.");
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC is a Kerberos Key Distribution Center (KDC)." : "The DC is NOT a Kerberos Key Distribution Center (KDC).");
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC supports a directory service." : "The DC does NOT support a directory service.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC supports the Lightweight Directory Access Protocol (LDAP)." : "The DC does NOT support the Lightweight Directory Access Protocol (LDAP).");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC contains the global catalog (GC) for the forestActive Directory." : "The DC does not contain the global catalog (GC) for the forestActive Directory.");
					UINT32 unused0:15 = FormatString( "(%s)", this.ToBitString );
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC is the domain'sprimary domain controller (PDC)." : "The DC is NOT the domain'sprimary domain controller (PDC).");
				}
		}
	}
	NdrPtr pDcSiteName;
	NdrPtr pClientSiteName;
	Switch
	{
		Case pDomainControllerName.ReferentID != 0:
			NdrWideString DomainControllerName;
	}
	Switch
	{
		Case pDomainControllerAddress.ReferentID != 0:
			NdrWideString DomainControllerAddress;
	}
	Switch
	{
		Case pDomainName.ReferentID != 0:
			NdrWideString DomainName;
	}
	Switch
	{
		Case pDnsForestName.ReferentID != 0:
			NdrWideString DnsForestName;
	}
	Switch
	{
		Case pDcSiteName.ReferentID != 0:
			NdrWideString DcSiteName;
	}
	Switch
	{
		Case pClientSiteName.ReferentID != 0:
			NdrWideString ClientSiteName;
	}
}

//
//	_NL_SITE_NAME_ARRAY
//	Alignment: NdrAlign
//
Struct NRPCNlSiteNameArray = FormatString("EntryCount = %u", EntryCount)
{
	UINT32 EntryCount;
	NDrPtr pSiteNames;
	Switch
	{
		Case pSiteNames.ReferentID != 0:
			Struct SiteNames = Size.ToString
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NdrUnicodeStringHeaderPtrCount = 0 ]
				While[ TRUE ]
				{
					NdrUnicodeStringHeader SiteName;
				}
				[ MaxLoopCount = Property.NdrUnicodeStringHeaderPtrCount ]
				While[ TRUE ]
				{
					NdrWideString SiteNameRef;
				}
			}
	}
}

//
//	_NL_SOCKET_ADDRESS
//	Alignment: NdrAlign
//
Struct NRPCNlSocketAddress
{
	[ Property.NRPCNlSocketAddressCount = Property.NRPCNlSocketAddressCount + (this.ReferentID ? 1 : 0) ]
	NdrPtr pSockaddr;
	UINT32 ISockaddrLength;
	Switch( Property.MSRPCNdr64 )
	{
		Case TRUE: Align8 NDR64TrailingPad;
	}
}


Struct NRPCNlSocketAddressRef = FormatString("AddressFamily = %s, Port = %u", AddressFamily == 2? "IPv4" : "IPv6", Port)
{
	NdrConformant Size;
	Switch( UINT16( FrameData, FrameOffset ) )
	{
		Case 0x0002:
			Struct
			{
				UINT16 AddressFamily = "IPv4(0x0002)";
				UINT16 Port;
				IPv4Address Address;
				BLOB(8) Padding;
			}
		Case 0x0017:
			Struct
			{
				UINT16 AddressFamily = "IPv6(0x0017)";
				UINT16 Port;
				UINT32 FlowInfo = MustBeSetToTable( this, "0" );  
				IPv6Address Address;
				UINT32 ScopeID;
			}
		Default:
			Struct
			{
				BLOB( Size.MaxCount ) UnknowData;
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Address Family Value" ) Unknown;
			}
	}
}

//
//	_NL_SITE_NAME_EX_ARRAY
//	Alignment: NdrAlign
//
Struct NRPCNlSiteNameExArray = FormatString( "EntryCount = %u", EntryCount )
{
	UINT32 EntryCount;
	NdrPtr pSiteNames;
	NdrPtr pSubnetNames;
	Switch
	{
		Case pSiteNames.ReferentID != 0:
			Struct SiteNames = Size.ToString
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NdrUnicodeStringHeaderPtrCount = 0 ]
				While[ TRUE ]
				{
					NdrUnicodeStringHeader SiteName;
				}
				[ MaxLoopCount = Property.NdrUnicodeStringHeaderPtrCount ]
				While[ TRUE ]
				{
					NdrWideString SiteNameRef;
				}
			}
	}
	Switch
	{
		Case pSubnetNames.ReferentID != 0:
			Struct SubnetNames = Size.ToString
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NdrUnicodeStringHeaderPtrCount = 0 ]
				While[ TRUE ]
				{
					NdrUnicodeStringHeader SubnetName;
				}
				[ MaxLoopCount = Property.NdrUnicodeStringHeaderPtrCount ]
				While[ TRUE ]
				{
					NdrWideString SubnetNameRef;
				}
			}
	}
}

Table NRPCNlDnsNameInfoDnsDomainInfoTypeTable( Value )
{
	Switch( Value )
	{
		Case 1: "NlDnsDomainName - The DnsDomainInfo member is a DNSdomain name.";
		Case 2: "NlDnsDomainNameAlias - The DnsDomainInfo member is a DNSdomain name alias.";
		Case 3: "NlDnsForestName - The DnsDomainInfo member is a DNS forest name.";
		Case 4: "NlDnsForestNameAlias - The DnsDomainInfo member is a DNS forest name alias.";
		Case 5: "NlDnsNdncDomainName - The DnsDomainInfo member is a non-domain NC (application NC) name.";
		Case 6: "NlDnsRecordName - The DnsDomainInfo member is a DNS record name that is required to be deregistered. This is valid only for deregistration in which the Register value is set to FALSE.";
		Default: FormatString("Unknown Value(%u)", Value);
	}
}

Table NRPCNlDnsNameInfoTypeTable( Value )
{
	Switch( Value )
	{
		Case 22: "NlDnsLdapAtSite - _ldap._tcp.<SiteName>._sites.<DnsDomainName>. Allows a client to find an LDAP server in the domain named by <DnsDomainName>, and is in the site named by <SiteName>.";
		Case 25: "NlDnsGcAtSite - _ldap._tcp.<SiteName>._sites.gc._msdcs.<DnsForestName>. Allows a client to find a DC serving a Global Catalog (GC) in the forest named by <DnsForestName>, and is in the site named by <SiteName>.";
		Case 28: "NlDnsDsaCname - <DsaGuid>._msdcs.<DnsForestName>. Allows a client to find a DC in the forest named by <DnsForestName> based on the DSA GUID.";
		Case 30: "NlDnsKdcAtSite - _kerberos._tcp.<SiteName>._sites.dc._msdcs.<DnsDomainName>. Allows a client to find a DC running a Kerberos KDC in the domain named by <DnsDomainName>, and is in the site named by <SiteName>.";
		Case 32: "NlDnsDcAtSite - _ldap._tcp.<SiteName>._sites.dc._msdcs.<DnsDomainName>. Allows a client to find a DC in the domain named by <DnsDomainName>, and is in the site named by <SiteName>.";
		Case 34: "NlDnsRfc1510KdcAtSite - _kerberos._tcp.<SiteName>._sites.<DnsDomainName>. Allows a client to find a RFC-1510 compliant Kerberos KDC in the domain named by <DnsDomainName>, and is in the site named by <SiteName>.";
		Case 36: "NlDnsGenericGcAtSite - _gc._tcp.<SiteName>._sites.<DnsForestName>. Allows a client to find a Global Catalog (GC) server in the forest named by <DnsForestName>, and is in the site named by <SiteName>.";
		Default: FormatString("Unknown Value(%u)", Value);
	}
}

//
//	_NL_DNS_NAME_INFO
//	Alignment: NdrAlign
//
Struct NRPCNlDnsNameInfo = Register.ToString
{
	UINT32 Type = NRPCNlDnsNameInfoTypeTable(this);
	[ Property.NRPCDnsDomainInfoPtrCount = Property.NRPCDnsDomainInfoPtrCount + ( this? 1 : 0 ) ]
	NdrPtr pDnsDomainInfo;
	UINT32 DnsDomainInfoType = NRPCNlDnsNameInfoDnsDomainInfoTypeTable(this);
	UINT32 Priority;
	UINT32 Weight;
	UINT32 Port;
	BOOLEAN Register = this? "Register the DNS name." : "Deregister the DNS name.";
	Align4 Pad;
	UINT32 Status = MUSTBeSetToTable( this, "0" );
}

//
//	_NL_DNS_NAME_INFO_ARRAY
//	Alignment: NdrAlign
//
Struct NRPCNlDnsNameInfoArray = FormatString( "EntryCount = %u", EntryCount )
{
	UINT32 EntryCount;
	NdrPtr pDnsNamesInfo;
	Switch
	{
		Case pDnsNamesInfo.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NRPCDnsDomainInfoPtrCount = 0 ]
				While[ TRUE ]
				{
					NRPCNlDnsNameInfo DnsNamesInfo;
				}
				[ MaxLoopCount = Property.NRPCDnsDomainInfoPtrCount ]
				While[ TRUE ]
				{
					NdrWideString DnsNamesInfoRef;
				}
			}
	}
}

//*********************************************************************
//	2.2.1.3	Secure Channel Establishment and Maintenance Structures
//*********************************************************************

//
//	_NETLOGON_CREDENTIAL
//	Alignment: None
//
Struct NRPCNetlogonCredential
{
	BLOB(8) Data;
}

//
//	_NETLOGON_LSA_POLICY_INFO
//	Alignment: NdrAlign
//
Struct NRPCNetlogonLsaPolicyInfo = FormatString("LsaPolicySize = %u",LsaPolicySize)
{
	UINT32 LsaPolicySize;
	[ Property.NRPCNetlogonLsaPolicyInfoLsaPolicyPtr = this.ReferentID ]
	NdrPtr pLsaPolicy;
}

//
//	_NETLOGON_WORKSTATION_INFO
//	Alignment: NdrAlign
//
Struct NRPCNetlogonWorkstationInfo = FormatString("DnsHostName = %s, SiteName = %s, OsName = %s", DnsHostNameRef? DnsHostNameRef.ToString : "NULL", SiteNameRef? SiteNameRef.ToString : "NULL", OsNameRef? OsNameRef.ToString : "NULL" )
{
	NRPCNetlogonLsaPolicyInfo LsaPolicy;
	NdrPtr pDnsHostName;
	NdrPtr pSiteName;
	
	//Dummy1...Dummy4: MUST be set to NULL and MUST be ignored on receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrPtr pDummy;
		Switch
		{
			Case pDummy.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	NdrUnicodeStringHeader OsVersion;	
	NdrUnicodeStringHeader OsName;
	
	//DummyString3,DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 2 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 WorkstationFlags = FormatString("0x%08X", this)
	{
		Switch( Property.MSRpCNdr64 )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Client will receive inbound trusts." : "Client will NOT receive inbound trusts.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Client handles the update of the service principal name (SPN)." : "Client does NOT handles the update of the service principal name (SPN).");
					UINT32 unused0:30 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:30 = FormatString( "(%s)", this.ToBitString );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Client handles the update of the service principal name (SPN)." : "Client does NOT handles the update of the service principal name (SPN).");
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Client will receive inbound trusts." : "Client will NOT receive inbound trusts.");
				}
		}
	}
	UINT32 DummyLong2 = MUSTBeSetToTable( this, "0");
	UINT32 DummyLong3 = MUSTBeSetToTable( this, "0");
	UINT32 DummyLong4 = MUSTBeSetToTable( this, "0");
	
	Switch
	{
		Case Property.NRPCNetlogonLsaPolicyInfoLsaPolicyPtr != 0:
			Struct LsaPolicyRef = LsaPolicy.ToString
			{
				NdrConformant Size;
				UnicodeString( Size.MaxCount/2 ) LsaPolicy;
			}
	}
	Switch
	{
		Case pDnsHostName.ReferentID != 0:
			NdrWideString DnsHostNameRef;
	}
	Switch
	{
		Case pSiteName.ReferentID != 0:
			NdrWideString SiteNameRef;
	}
	Switch
	{
		Case OsVersion.BufferPtr.ReferentID != 0:
			NdrWideString OsVersionRef;
	}
	Switch
	{
		Case OsName.BufferPtr.ReferentID != 0:
			NdrWideString OsNameRef;
	}
}

//
//	_NL_TRUST_PASSWORD
//	Alignment: 4
//
Struct NRPCNlTrustPassword
{
	BLOB(512) Buffer;
	UINT32 Length;
}

//
//	_NETLOGON_WORKSTATION_INFORMATION
//	Alignment: NdrAlign
//
Struct NRPCNetlogonWorkstationInformation =  FormatString("WorkstationInfo = %s", NRPCNetrLogonGetDomainInfoLevelTable( SwitchValue ) )
{
	UINT32 SwitchValue = NRPCNetrLogonGetDomainInfoLevelTable(this);
	Switch( SwitchValue )
	{
		Case 1:
			Struct
			{
				NdrPtr pWorkstationInfo;
				Switch
				{	
					Case pWorkstationInfo.ReferentID != 0:
						NRPCNetlogonWorkstationInfo WorkstationInfo;
				}
			}
		Case 2:
			Struct
			{
				NdrPtr pLsaPolicyInfo;
				Switch
				{	
					Case pLsaPolicyInfo.ReferentID != 0:
						NRPCNetlogonWorkstationInfo LsaPolicyInfo;		
				}
			}
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	_NETLOGON_ONE_DOMAIN_INFO
//	Alignment: NdrAlign
//
Struct NRPCNetlogonOneDomainInfo = FormatString("DomainGuid = %s", DomainGuid.ToString )
{
	[ Property.NRPCDomainNamePtr$[ Property.NRPCNetlogonOneDomainInfoCount ]  = this.BufferPtr.ReferentID ]
	NdrUnicodeStringHeader DomainName;
	[ Property.NRPCDnsDomainNamePtr$[ Property.NRPCNetlogonOneDomainInfoCount ] = this.BufferPtr.ReferentID ]
	NdrUnicodeStringHeader DnsDomainName;
	[ Property.NRPCDnsForestNamePtr$[ Property.NRPCNetlogonOneDomainInfoCount ] = this.BufferPtr.ReferentID ]
	NdrUnicodeStringHeader DnsForestName;
	MSRPCGuid DomainGuid;
	[ Property.NRPCDomainSidPtr$[ Property.NRPCNetlogonOneDomainInfoCount ] = this.ReferentID ]
	NdrPtr pDomainSid;
	[ Property.NRPCTrustExtensionPtr$[ Property.NRPCNetlogonOneDomainInfoCount ] = this.BufferPtr.ReferentID ]
	NdrUnicodeStringHeader TrustExtension;
	//DummyString2...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 3 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MUSTBeSetToTable( this, "0");
	UINT32 DummyLong2 = MUSTBeSetToTable( this, "0");
	UINT32 DummyLong3 = MUSTBeSetToTable( this, "0");
	UINT32 DummyLong4 = MUSTBeSetToTable( this, "0");
}

Struct NRPCNetlogonOneDomainInfoRef = FormatString("DomainName = %s, DnsDomainName = %s, DnsForestName = %s, TrustExtension = %s", DomainNameRef? DomainNameRef.ToString : "NULL", 
																																   DnsDomainNameRef? DnsDomainNameRef.ToString : "NULL",
																																   DnsForestNameRef? DnsForestNameRef.ToString : "NULL",
																																   TrustExtensionRef? TrustExtensionRef.ToString : "NULL")
{
	Switch
	{
		Case Property.NRPCDomainNamePtr$[ Property.NRPCNetlogonOneDomainInfoRefCount ] != 0:
			NdrWideString DomainNameRef;
	}
	Switch
	{
		Case Property.NRPCDnsDomainNamePtr$[ Property.NRPCNetlogonOneDomainInfoRefCount ] != 0:
			NdrWideString DnsDomainNameRef;
	}
	Switch
	{
		Case Property.NRPCDnsForestNamePtr$[ Property.NRPCNetlogonOneDomainInfoRefCount ] != 0:
			NdrWideString DnsForestNameRef;
	}
	Switch
	{
		Case Property.NRPCDomainSidPtr$[ Property.NRPCNetlogonOneDomainInfoRefCount ] != 0:
			SID(TRUE) DomainSid;
	}
	Switch
	{
		Case Property.NRPCTrustExtensionPtr$[ Property.NRPCNetlogonOneDomainInfoRefCount ] != 0:
			NdrWideString TrustExtensionRef;
	}
}

//
//	_NETLOGON_DOMAIN_INFO
//	Alignment: NdrAlign
//
Struct NRPCNetlogonDomainInfo = FormatString( "TrustedDomainCount = %u", TrustedDomainCount )
{
	[ Property.NRPCNetlogonOneDomainInfoCount = 0 ]
	NRPCNetlogonOneDomainInfo PrimaryDomain;
	UINT32 TrustedDomainCount;
	NdrPtr TrustedDomainsPtr;
	NRPCNetlogonLsaPolicyInfo LsaPolicy;
	NdrUnicodeStringHeader DnsHostNameInDs;
	//DummyString2...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 3 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 WorkstationFlags = FormatString("0x%08X", this)
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Client receives inbound trusts." : "Client does NOT receive inbound trusts.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Client handles the update of the service principal name(SPN)." : "Client does NOT handle the update of the service principal name(SPN).");
					UINT32 unused0:30 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:30 = FormatString( "(%s)", this.ToBitString );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Client handles the update of the service principal name(SPN)." : "Client does NOT handle the update of the service principal name(SPN).");
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Client receives inbound trusts." : "Client does NOT receive inbound trusts.");
				}
		}
	}
	LSADTrustedDomainSupportedEncryptionTypes SupportedEncTypes;
	UINT32 DummyLong3 = MustBeSetToTable(this, "0");
	UINT32 DummyLong4 = MustBeSetToTable(this, "0");
	// referent part
	[ Property.NRPCNetlogonOneDomainInfoRefCount = 0 ]
	NRPCNetlogonOneDomainInfoRef PrimaryDomainRef;
	Switch
	{
		Case TrustedDomainsPtr.ReferentID != 0:
			Struct TrustedDomainsRef = Size.ToString
			{
				NdrConformant Size;
			   [ MaxLoopCount = Size.MaxCount ]
			   
			   While[ Property.NRPCNetlogonOneDomainInfoCount < Size.MaxCount]
			   {
					[ Property.NRPCNetlogonOneDomainInfoCount = Property.NRPCNetlogonOneDomainInfoCount + 1 ]
					NRPCNetlogonOneDomainInfo TrustedDomain;			   
			   }
			   
			   [ MaxLoopCount = Size.MaxCount ]
			   While [ Property.NRPCNetlogonOneDomainInfoRefCount < Size.MaxCount]
			   {
					[ Property.NRPCNetlogonOneDomainInfoRefCount = Property.NRPCNetlogonOneDomainInfoRefCount + 1 ]
					NRPCNetlogonOneDomainInfoRef TrustedDomainRef;
			   }
			}
	}
	Switch
	{
		Case Property.NRPCNetlogonLsaPolicyInfoLsaPolicyPtr != 0:
			Struct LsaPolicyRef = LsaPolicy.ToString
			{
				NdrConformant Size;
				UnicodeString( Size.MaxCount/2 ) LsaPolicy;
			}
	}
	Switch
	{
		Case DnsHostNameInDs.BufferPtr.ReferentID != 0:
			NdrWideString DnsHostNameInDsRef;
	}
}


//
//	_NETLOGON_DOMAIN_INFORMATION
//	Alignment: NdrAlign
//
Struct NRPCNetlogonDomainInformation = FormatString("DomainInfo = %u", NRPCNetrLogonGetDomainInfoLevelTable( SwitchValue ) )
{
	UINT32 SwitchValue = NRPCNetrLogonGetDomainInfoLevelTable( this );
	Switch( SwitchValue )
	{
		Case 1:
			Struct
			{
				NdrPtr pDomainInfo;
				Switch
				{	
					Case pDomainInfo.ReferentID != 0:
						NRPCNetlogonDomainInfo DomainInfo;
				}
			}
		Case 2:
			Struct
			{
				NdrPtr pLsaPolicyInfo;
				Switch
				{	
					Case pLsaPolicyInfo.ReferentID != 0:
						NRPCNetlogonLsaPolicyInfo LsaPolicyInfo;
				}
			}
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	_NETLOGON_SECURE_CHANNEL_TYPE
//	Alignment: None
//
Struct NRPCNetlogonSecureChannelType = FormatString("%s", NRPCNetlogonSecureChannelTypeTable( Value.Value, FALSE) )
{
	NdrEnum Value = NRPCNetlogonSecureChannelTypeTable(this.Value, TRUE);
}

Table NRPCNetlogonSecureChannelTypeTable( Value, Description )
{
	Switch( Value )
	{
		Case 0: FormatString("NullSecureChannel %s", Description? "- An unauthenticated channel type." : "" );
		Case 1: FormatString("MsvApSecureChannel %s", Description? "- A secure channel between the local Windows NT LAN Manager (NTLM) security provider and the Netlogon server." : "" );
		Case 2: FormatString("WorkstationSecureChannel %s", Description? "- A secure channel from a domain member to a domain controller (DC)." : "" );
		Case 3: FormatString("TrustedDnsDomainSecureChannel %s", Description? "- A secure channel between two DCs, connected through a trust relationship created between two windows 2000 server or windows server 2003 domains." : "" );
		Case 4: FormatString("TrustedDomainSecureChannel %s", Description? "- A secure channel between two DCs, connected through a trust relationship created between two domains, one or both of which is a windows_nt_4_0domain." : "" );
		Case 5: FormatString("UasServerSecureChannel %s", Description? "- Secure channel from a LAN Manager server to a domain controller (this value is no longer supported)." : "" );
		Case 6: FormatString("ServerSecureChannel %s", Description? "- A secure channel from a backup domain controller to a primary domain controller." : "" );
		Case 7: FormatString("CdcServerSecureChannel %s", Description? "- Secure channel from a read-only domain controller (RODC) to a domain controller." : "" );
		Default: FormatString("Unknow Value(%u)", Value);
	}
}

//MajorVersion and MinorVersion table
Table NRPCNlOsversioninfoV1VersionTable( Value )
{
	Switch( Value )
	{
		Case 0: "Windows NT 4.0, Windows 2000, Windows Vista, or Windows Server 2008.";
		Case 1: "Windows XP.";
		Case 2: "Windows XP Professional x64 Edition, Windows Server 2003, or Windows Server 2003 R2.";
		Case 4: "Windows NT 4.0.";
		Case 5: "Windows 2000, Windows XP, Windows Server 2003, or Windows Server 2003 R2.";
		Case 6: "Windows Vista or Windows Server 2008.";
		Default: FormatString("Unknow Value(%u)", Value);
	}
}

Table NRPCNlOsversioninfoV1WProductTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x0000001: "VER_NT_WORKSTATION - The operating system is Windows NT Workstation 4.0, Windows 2000 Professional,, Windows XP Home Edition, Windows XP Professional, or Windows Vista.";
		Case 0x0000002: "VER_NT_DOMAIN_CONTROLLER - The system is a domain controller.";
		Case 0x0000003: "VER_NT_SERVER - The system is a server.";
		Default: FormatString("Unknow Value(%u)", Value);
	}
}

//
//	_NL_OSVERSIONINFO_V1
//	Alignment: 4
//
Struct NRPCNlOsversioninfoV1 = FormatString( "BuildNumber = %u, WSuiteMask = %s", BuildNumber, WSuiteMask.ToString )
{
	UINT32 OSVersionInfoSize;
	UINT32 MajorVersion = NRPCNlOsversioninfoV1VersionTable(this);
	UINT32 MinorVersion = NRPCNlOsversioninfoV1VersionTable(this);
	UINT32 BuildNumber;
	UINT32 PlatformId = MustBeSetToTable( this, "0x00000002" );
	UnicodeString(128) CSDVersion;
	UINT16 WServicePackMajor;
	UINT16 WServicePackMinor;
	UINT16 WSuiteMask = FormatString( "0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					 UINT32 SmallBusiness:1 = FormatString( "(%s) %s", this.ToBitString, this? "Microsoft Small Business Server was once installed on the system, but may have been upgraded to another version of windows." : "Microsoft Small Business Server was NOT once installed on the system." );
					 UINT32 Enterprise:1 = FormatString( "   (%s) %s", this.ToBitString, this? "Windows NT Server 4.0 Enterprise Edition, Windows 2000 Advanced Server, Windows Server 2003 Enterprise Edition or Windows Server 2008 Enterpriseis installed." : "Windows NT Server 4.0 Enterprise Edition, Windows 2000 Advanced Server, Windows Server 2003 Enterprise Edition or Windows Server 2008 Enterpriseis is NOT installed." );
					 UINT32 BackOffice:1 = FormatString( "   (%s) %s", this.ToBitString, this? "Microsoft BackOffice components are installed." : "Microsoft BackOffice components are NOT installed." );
					 UINT32 unused0:1 = FormatString( "      (%s)", this.ToBitString );
					 UINT32 Terminal:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Terminal Services is installed." : "Terminal Services is NOT installed." );
					 UINT32 SmallBusinessRestricted:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Microsoft Small Business Server is installed with the restrictive client license in force." : "Microsoft Small Business Server is NOT installed with the restrictive client license in force." );
					 UINT32 Embeddednt:1 = FormatString( "   (%s) %s", this.ToBitString, this? "Windows XP Embedded is installed." : "Windows XP Embedded is NOT installed." );
					 UINT32 Datacenter:1 = FormatString( "   (%s) %s", this.ToBitString, this? "Windows 2000 Datacenter Server, Windows Server 2003 Datacenter Edition, or Windows Server 2008 Datacenteris installed." : "Windows 2000 Datacenter Server, Windows Server 2003 Datacenter Edition, or Windows Server 2008 Datacenteris is NOT installed." );
					 
					 UINT32 SingleUserts:1 = FormatString( " (%s) %s", this.ToBitString, this? "Remote Desktop is supported, but only one interactive session is supported." : "Remote Desktop is NOT supported." );
					 UINT32 Personal:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Windows XP Home Edition, Windows Vista Home Basic, or Windows Vista Home Premium is installed." : "Windows XP Home Edition, Windows Vista Home Basic, or Windows Vista Home Premium is NOT installed." );
					 UINT32 Blade:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Windows Server 2003 Web Edition is installed." : "Windows Server 2003 Web Edition is installed.Windows Server 2003 Web Edition is NOT installed." );
					 UINT32 unused1:2 = FormatString( "      (%s)", this.ToBitString );
					 UINT32 StorageServer:1 = FormatString( "(%s) %s", this.ToBitString, this? "Windows Storage Server 2003 or Windows Storage Server 2003 R2, Standard Edition is installed." : "Windows Storage Server 2003 or Windows Storage Server 2003 R2, Standard Edition is NOT installed." );
					 UINT32 ComputeServer:1 = FormatString( "(%s) %s", this.ToBitString, this? "Windows Server 2003 Compute Cluster Edition is installed." : "Windows Server 2003 Compute Cluster Edition is NOT installed." );
					 UINT32 unused2:17 = FormatString( "     (%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					 UINT32 unused0:17 = FormatString( "     (%s)", this.ToBitString );
					 UINT32 ComputeServer:1 = FormatString( "(%s) %s", this.ToBitString, this? "Windows Server 2003 Compute Cluster Edition is installed." : "Windows Server 2003 Compute Cluster Edition is NOT installed." );
					 UINT32 StorageServer:1 = FormatString( "(%s) %s", this.ToBitString, this? "Windows Storage Server 2003 or Windows Storage Server 2003 R2, Standard Edition is installed." : "Windows Storage Server 2003 or Windows Storage Server 2003 R2, Standard Edition is NOT installed." );
					 UINT32 unused1:2 = FormatString( "      (%s)", this.ToBitString );
					 UINT32 Blade:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Windows Server 2003 Web Edition is installed." : "Windows Server 2003 Web Edition is installed.Windows Server 2003 Web Edition is NOT installed." );
					 UINT32 Personal:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Windows XP Home Edition, Windows Vista Home Basic, or Windows Vista Home Premium is installed." : "Windows XP Home Edition, Windows Vista Home Basic, or Windows Vista Home Premium is NOT installed." );
					 UINT32 SingleUserts:1 = FormatString( " (%s) %s", this.ToBitString, this? "Remote Desktop is supported, but only one interactive session is supported." : "Remote Desktop is NOT supported." );
					 
					 UINT32 Datacenter:1 = FormatString( "   (%s) %s", this.ToBitString, this? "Windows 2000 Datacenter Server, Windows Server 2003 Datacenter Edition, or Windows Server 2008 Datacenteris installed." : "Windows 2000 Datacenter Server, Windows Server 2003 Datacenter Edition, or Windows Server 2008 Datacenteris is NOT installed." );
					 UINT32 Embeddednt:1 = FormatString( "   (%s) %s", this.ToBitString, this? "Windows XP Embedded is installed." : "Windows XP Embedded is NOT installed." );
					 UINT32 SmallBusinessRestricted:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Microsoft Small Business Server is installed with the restrictive client license in force." : "Microsoft Small Business Server is NOT installed with the restrictive client license in force." );
					 UINT32 Terminal:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Terminal Services is installed." : "Terminal Services is NOT installed." );
					 UINT32 unused2:1 = FormatString( "      (%s)", this.ToBitString );
					 UINT32 BackOffice:1 = FormatString( "   (%s) %s", this.ToBitString, this? "Microsoft BackOffice components are installed." : "Microsoft BackOffice components are NOT installed." );
					 UINT32 Enterprise:1 = FormatString( "   (%s) %s", this.ToBitString, this? "Windows NT Server 4.0 Enterprise Edition, Windows 2000 Advanced Server, Windows Server 2003 Enterprise Edition or Windows Server 2008 Enterpriseis installed." : "Windows NT Server 4.0 Enterprise Edition, Windows 2000 Advanced Server, Windows Server 2003 Enterprise Edition or Windows Server 2008 Enterpriseis is NOT installed." );
					 UINT32 SmallBusiness:1 = FormatString( "(%s) %s", this.ToBitString, this? "Microsoft Small Business Server was once installed on the system, but may have been upgraded to another version of windows." : "Microsoft Small Business Server was NOT once installed on the system." );
				}
		}
	}
	UINT8 WProductType = NRPCNlOsversioninfoV1WProductTypeTable(this);
	UINT8 WReserved;
}

//
//	_NL_IN_CHAIN_SET_CLIENT_ATTRIBUTES_V1
//	Alignment: None
//
Struct NRPCNlInChainSetClientAttributesV1 = FormatString( "ClientDnsHostName = %s, OsName = %s", ClientDnsHostName? ClientDnsHostName.ToString : "NULL", OsName? OsName.ToString : "NULL" )
{
	NdrPtr pClientDnsHostName;
	NdrPtr pOsVersionInfo;
	NdrPtr pOsName;
	Switch
	{	
		Case pClientDnsHostName.ReferentID != 0:
			NdrWidestring ClientDnsHostName;
	}
	Switch
	{	
		Case pOsVersionInfo.ReferentID != 0:
			NRPCNlOsversioninfoV1 OsVersionInfo;
	}
	Switch
	{	
		Case pOsName.ReferentID != 0:
			NdrWidestring OsName;
	}
}

//
//	NL_IN_CHAIN_SET_CLIENT_ATTRIBUTES
//	Alignment: NdrAlign
//
Struct NRPCNlInChainSetClientAttributes
{
	UINT32 SwitchValue;
	Switch( SwitchValue )
	{
		Case 1:
			NRPCNlInChainSetClientAttributesV1 V1;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	_NL_OUT_CHAIN_SET_CLIENT_ATTRIBUTES_V1
//	Alignment: None
//
Struct NRPCNlOutChainSetClientAttributesV1 = FormatString( "HubName = %s, OldDnsHostName = %s", HubName? HubName.ToString : "NULL", OldDnsHostName? OldDnsHostName.ToString : "NULL" )
{
	NdrPtr pHubName;
	NdrPtr ppOldDnsHostName;
	NdrPtr pSupportedEncTypes;
	Switch
	{
		Case pHubName.ReferentID != 0:
			NdrWideString HubName;
	}
	Switch
	{
		Case ppOldDnsHostName.ReferentID != 0:
			Struct
			{
				NdrPtr pOldDnsHostName;
				Switch
				{
					Case pOldDnsHostName.ReferentID != 0:
						NdrUnicodeString OldDnsHostName;
				}
			}
	}
	Switch
	{
		Case pSupportedEncTypes.ReferentID != 0:
			LSADTrustedDomainSupportedEncryptionTypes SupportedEncTypes;
	}
}

//
//	NL_OUT_CHAIN_SET_CLIENT_ATTRIBUTES
//	Alignment: NdrAlign
//
Struct NRPCNlOutChainSetClientAttributes
{
	UINT32 SwitchValue;
	Switch( SwitchValue )
	{
		Case 1:
			NRPCNlOutChainSetClientAttributesV1 V1;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
	}
}


//*********************************************************************
//	2.2.1.4	Pass-Through Authentication Structures
//*********************************************************************

//
//	LM_CHALLENGE
//	Alignment: None
//
Struct NRPCLmChallenge
{
	ArrayAsHex(8) Data;
}

//
//	_NETLOGON_GENERIC_INFO
//	Alignment: None
//
Struct NRPCNetlogonGenericInfo = FormatString("%s, PackageName = %s", IdentityRef.ToString, PackageNameRef ? PackageNameRef.ToString : "NULL" )													
{
	NRPCNetlogonLogonIdentityInfo Identity;
	NdrUnicodeStringHeader PackageName;
	UINT32 DataLength;
	NdrPtr pLogonData;
	
	NRPCNetlogonLogonIdentityInfoRef IdentityRef;
	Switch
	{
		Case PackageName.BufferPtr.ReferentID != 0:
			NdrWideString PackageNameRef;
	}
	Switch
	{
		Case pLogonData.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				Switch
				{	
					//register APDS here
					Default: BLOB(Size.MaxCount) LogonData;
				}
			}
	}	
}

//
//	_NETLOGON_INTERACTIVE_INFO
//	Alignment: None
//
Struct NRPCNetlogonInteractiveInfo = IdentityRef.ToString
{
	NRPCNetlogonLogonIdentityInfo Identity;
	NRPCLmOwfPassword LmOwfPassword;
	NRPCNtOwfPassword NtOwfPassword;
	Switch( Property.MSRPCNdr64 )
	{
		Case TRUE: Align8 NDR64TrailingPad;
	}
	NRPCNetlogonLogonIdentityInfoRef IdentityRef;
}


//
//	_NETLOGON_SERVICE_INFO
//	Alignment: None
//
Struct NRPCNetlogonServiceInfo = IdentityRef.ToString
{
	NRPCNetlogonLogonIdentityInfo Identity;
	NRPCLmOwfPassword LmOwfPassword;
	NRPCNtOwfPassword NtOwfPassword;
	Switch( Property.MSRPCNdr64 )
	{
		Case TRUE: Align8 NDR64TrailingPad;
	}
	NRPCNetlogonLogonIdentityInfoRef IdentityRef;
}

//
//	_NETLOGON_NETWORK_INFO
//	Alignment: None
//
Struct NRPCNetlogonNetworkInfo = IdentityRef.ToString
{
	NRPCNetlogonLogonIdentityInfo Identity;
	NRPCLmChallenge LmChallenge;
	NRPCString NtChallengeResponse;
	NRPCString LmChallengeResponse;
	
	NRPCNetlogonLogonIdentityInfoRef IdentityRef;
	Switch
	{
		Case NtChallengeResponse.pBuffer.ReferentID != 0:
			Struct NtChallengeResponseRef
			{
				NdrConformantVarying Length;
				Switch
				{
					Case Length.ActualCount > 24:
						[DataFieldFrameLength = FrameOffset + Length.ActualCount]
						NLMPV2Response NTLMV2ChallengeResponse;
					Case Length.ActualCount > 0:
						ArrayAsHex( Length.ActualCount ) NTLMV1ChallengeResponse;
				}
			}
	}
	Switch
	{
		Case LmChallengeResponse.pBuffer.ReferentID != 0:
			Struct LmChallengeResponseRef
			{
				NdrConformantVarying Length;
				Switch
				{
					Case Property.NRPCNTLMv1Authentication && Length.ActualCount == 24:
						ArrayAsHex( Length.ActualCount ) LmChallengeResponseString;
					Case Length.ActualCount > 0:
						NLMPLmv2Response LmChallengeResponseStruct;	
				}
			}
	}
}
					
//
//	_NETLOGON_LEVEL
//	Alignment: NdrAlign
//
Struct NRPCNetlogonLevel = SwitchValue.ToString
{
	NRPCNetlogonLogonInfoClass SwitchValue;
	Switch( Property.NdrEnumValue )
	{
		Case 1:
			Struct
			{
				NdrPtr pLogonInteractive;
				Switch
				{
					Case pLogonInteractive.ReferentID != 0:
						NRPCNetlogonInteractiveInfo LogonInteractive;
				}
			}
		Case 2:
			Struct
			{
				NdrPtr pLogonNetwork;
				Switch
				{	
					Case pLogonNetwork.ReferentID != 0:			
						NRPCNetlogonNetworkInfo LogonNetwork;
				}
			}
		Case 3:
			Struct
			{
				NdrPtr pLogonService;
				Switch
				{	
					Case pLogonService.ReferentID != 0:
						NRPCNetlogonServiceInfo LogonService;
				}
			}
		Case 4:
			Struct
			{
				NdrPtr pLogonGeneric;
				Switch
				{	
					Case pLogonGeneric.ReferentID != 0:
						NRPCNetlogonGenericInfo LogonGeneric;	
				}
			}
		Case 5:
			Struct
			{
				NdrPtr pLogonInteractiveTransitive;
				Switch
				{	
					Case pLogonInteractiveTransitive.ReferentID != 0:
						NRPCNetlogonInteractiveInfo LogonInteractiveTransitive;
				}
			}
		Case 6:
			Struct
			{
				NdrPtr pLogonNetworkTransitive;
				Switch
				{	
					Case pLogonNetworkTransitive.ReferentID != 0:
						NRPCNetlogonNetworkInfo LogonNetworkTransitive;								
				}
			}
		Case 7:
			Struct
			{
				NdrPtr pLogonServiceTransitive;
				Switch
				{	
					Case pLogonServiceTransitive.ReferentID != 0:
						NRPCNetlogonServiceInfo LogonServiceTransitive;								
				}
			}
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	_NETLOGON_SID_AND_ATTRIBUTES
//	Alignment: None
//
Struct NRPCNetlogonSidAndAttributes = FormatString(" Attributes = %s", Attributes.ToString )
{
	[ Property.NRPCNetlogonSidAndAttributesSidPtrCount = Property.NRPCNetlogonSidAndAttributesSidPtrCount + ( this.ReferentID? 1 : 0 ) ]
	NDRPtr pSid;
	UINT32 Attributes = FormatString( "0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID can NOT have the SE_GROUP_ENABLED attribute removed." : "The SID can have the SE_GROUP_ENABLED attribute removed.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled by default." : "The SID is added by an application");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled for access checks." : "The SID is disabled for access checks.");
					UINT32 unused0:26 = FormatString( "(%s)", this.ToBitString );
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "This group is a domain local group." : "This group is NOT a domain local group.");
					UINT32 unused1:2 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:2 = FormatString( "(%s)", this.ToBitString );
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "This group is a domain local group." : "This group is NOT a domain local group.");
					UINT32 unused1:26 = FormatString( "(%s)", this.ToBitString );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled for access checks." : "The SID is disabled for access checks.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled by default." : "The SID is added by an application");
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID can NOT have the SE_GROUP_ENABLED attribute removed." : "The SID can have the SE_GROUP_ENABLED attribute removed.");
				}
		}
	}	
}

//
//	_NETLOGON_VALIDATION_GENERIC_INFO2
//	Alignment: NdrAlign
//
Struct NRPCNetlogonValidationGenericInfo2 = FormatString( "DataLength = %u", DataLength )
{
	UINT32 DataLength;
	NdrPtr pValidationData;
	Switch
	{
		Case pValidationData.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				Switch
				{
					//register APDS here
					Default:
						BLOB(Size.MaxCount) ValidationData;
				}
			}
	}
}

//
//	_USER_SESSION_KEY
//	Alignment: None
//
Struct NRPCUserSessionKey
{
	NRPCCypherBlock Data[2];
}

//
//	_GROUP_MEMBERSHIP
//	Alignment: 4
//
Struct NRPCGroupMembership = Attributes
{
	UINT32 RelativeId;
	UINT32 Attributes = FormatString( "0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID can NOT have the SE_GROUP_ENABLED attribute removed." : "The SID can have the SE_GROUP_ENABLED attribute removed.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled by default." : "The SID is added by an application");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled for access checks." : "The SID is disabled for access checks.");
					UINT32 unused0:29 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:29 = FormatString( "(%s)", this.ToBitString );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled for access checks." : "The SID is disabled for access checks.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled by default." : "The SID is added by an application");
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID can NOT have the SE_GROUP_ENABLED attribute removed." : "The SID can have the SE_GROUP_ENABLED attribute removed.");
				}
		}
	}
}

//
//	_NETLOGON_VALIDATION_SAM_INFO
//	Alignment: NdrAlign
//
Struct NRPCNetlogonValidationSamInfo = FormatString( "LogonCount = %u, BadPasswordCount = %u, GroupCount = %u", LogonCount, BadPasswordCount, GroupCount )
{
	FILETIME LogonTime;
	FILETIME LogoffTime;
	FILETIME KickOffTime;
	FILETIME PasswordLastSet;
	FILETIME PasswordCanChange;
	FILETIME PasswordMustChange;
	NdrUnicodeStringHeader EffectiveName;
	NdrUnicodeStringHeader FullName;
	NdrUnicodeStringHeader LogonScript;
	NdrUnicodeStringHeader ProfilePath;
	NdrUnicodeStringHeader HomeDirectory;
	NdrUnicodeStringHeader HomeDirectoryDrive;
	UINT16 LogonCount;
	UINT16 BadPasswordCount;
	UINT32 UserId;
	UINT32 PrimaryGroupId;
	UINT32 GroupCount;
	NdrPtr pGroupIds;
	UINT32 UserFlags = FormatString( "0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Authentication was done via the GUEST account; no password was used." : "Authentication was NOT done via the GUEST account; password was used.");
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "No encryption is available." : "Encryption is available.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Cached account used for logon; no domain controller was contacted." : "Cached account is NOT used for logon; domain controller was contacted");
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "LAN Manager key was used for authentication." : "LAN Manager key was NOT used for authentication.");
					UINT32 unused0:1 = FormatString( "(%s)", this.ToBitString );
					UINT32 X:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ExtraSids field is populated and contains additional SIDs." : "The ExtraSids field is NOT populated.");
					UINT32 S:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Sub-authentication used; session key came from the sub-authentication package." : "Sub-authentication is NOT used; session key did NOT come from the sub-authentication package.");
					UINT32 T:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The account is a machine account." : "The account is NOT a machine account.");
					
					UINT32 V:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The domain controller understands NTLMv2." : "The domain controller does NOT understand NTLMv2.");
					UINT32 R:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ResourceGroupIds field is populated." : "The ResourceGroupIds field is NOT populated.");
					UINT32 unsued1:22 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unsued0:22 = FormatString( "(%s)", this.ToBitString );							
					UINT32 R:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ResourceGroupIds field is populated." : "The ResourceGroupIds field is NOT populated.");							
					UINT32 V:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The domain controller understands NTLMv2." : "The domain controller does NOT understand NTLMv2.");							
												
					UINT32 T:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The account is a machine account." : "The account is NOT a machine account.");							
					UINT32 S:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Sub-authentication used; session key came from the sub-authentication package." : "Sub-authentication is NOT used; session key did NOT come from the sub-authentication package.");							
					UINT32 X:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ExtraSids field is populated and contains additional SIDs." : "The ExtraSids field is NOT populated.");							
					UINT32 unused1:1 = FormatString( "(%s)", this.ToBitString );							
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "LAN Manager key was used for authentication." : "LAN Manager key was NOT used for authentication.");							
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Cached account used for logon; no domain controller was contacted." : "Cached account is NOT used for logon; domain controller was contacted");							
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "No encryption is available." : "Encryption is available.");							
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Authentication was done via the GUEST account; no password was used." : "Authentication was NOT done via the GUEST account; password was used.");							
				}
		}
	}				
	NRPCUserSessionKey UserSessionKey;
	NdrUnicodeStringHeader LogonServer;
	NdrUnicodeStringHeader LogonDomainName;
	NdrPtr pLogonDomainId;
	UINT32 ExpansionRoom[10];
	Switch
	{
		Case EffectiveName.BufferPtr.ReferentID != 0:
			NdrWideString EffectiveNameRef;
	}
	Switch
	{
		Case FullName.BufferPtr.ReferentID != 0:
			NdrWideString FullNameRef;
	}
	Switch
	{
		Case LogonScript.BufferPtr.ReferentID != 0:
			NdrWideString LogonScriptRef;
	}
	Switch
	{
		Case ProfilePath.BufferPtr.ReferentID != 0:
			NdrWideString ProfilePathRef;
	}
	Switch
	{
		Case HomeDirectory.BufferPtr.ReferentID != 0:
			NdrWideString HomeDirectoryRef;
	}	
	Switch
	{
		Case HomeDirectoryDrive.BufferPtr.ReferentID != 0:
			NdrWideString HomeDirectoryDriveRef;
	}	
	Switch
	{
		Case pGroupIds.ReferentID != 0:
			Struct GroupIds
			{
				NdrConformant Size;
				NRPCGroupMembership GroupId[ Size.MaxCount ];
			}
	}	
	Switch
	{
		Case LogonServer.BufferPtr.ReferentID != 0:
			NdrWideString LogonServerRef;
	}	
	Switch
	{
		Case LogonDomainName.BufferPtr.ReferentID != 0:
			NdrWideString LogonDomainNameRef;
	}
	Switch
	{
		Case pLogonDomainId.ReferentID != 0:
			SID( TRUE ) LogonDomainId;
	}
}

//
//	_NETLOGON_VALIDATION_SAM_INFO2
//
Struct NRPCNetlogonValidationSamInfo2 = FormatString( "LogonCount = %u, BadPasswordCount = %u, GroupCount = %u", LogonCount, BadPasswordCount, GroupCount )
{
	FILETIME LogonTime;
	FILETIME LogoffTime;
	FILETIME KickOffTime;
	FILETIME PasswordLastSet;
	FILETIME PasswordCanChange;
	FILETIME PasswordMustChange;
	NdrUnicodeStringHeader EffectiveName;
	NdrUnicodeStringHeader FullName;
	NdrUnicodeStringHeader LogonScript;
	NdrUnicodeStringHeader ProfilePath;
	NdrUnicodeStringHeader HomeDirectory;
	NdrUnicodeStringHeader HomeDirectoryDrive;
	UINT16 LogonCount;
	UINT16 BadPasswordCount;
	UINT32 UserId;
	UINT32 PrimaryGroupId;
	UINT32 GroupCount;
	NdrPtr pGroupIds;
	UINT32 UserFlags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Authentication was done via the GUEST account; no password was used." : "Authentication was NOT done via the GUEST account; password was used.");
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "No encryption is available." : "Encryption is available.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Cached account used for logon; no domain controller was contacted." : "Cached account is NOT used for logon; domain controller was contacted");
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "LAN Manager key was used for authentication." : "LAN Manager key was NOT used for authentication.");
					UINT32 unused0:1 = FormatString( "(%s)", this.ToBitString );
					UINT32 X:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ExtraSids field is populated and contains additional SIDs." : "The ExtraSids field is NOT populated.");
					UINT32 S:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Sub-authentication used; session key came from the sub-authentication package." : "Sub-authentication is NOT used; session key did NOT come from the sub-authentication package.");
					UINT32 T:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The account is a machine account." : "The account is NOT a machine account.");
					
					UINT32 V:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The domain controller understands NTLMv2." : "The domain controller does NOT understand NTLMv2.");
					UINT32 R:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ResourceGroupIds field is populated." : "The ResourceGroupIds field is NOT populated.");
					UINT32 unsued1:22 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unsued0:22 = FormatString( "(%s)", this.ToBitString );							
					UINT32 R:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ResourceGroupIds field is populated." : "The ResourceGroupIds field is NOT populated.");							
					UINT32 V:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The domain controller understands NTLMv2." : "The domain controller does NOT understand NTLMv2.");							
												
					UINT32 T:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The account is a machine account." : "The account is NOT a machine account.");							
					UINT32 S:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Sub-authentication used; session key came from the sub-authentication package." : "Sub-authentication is NOT used; session key did NOT come from the sub-authentication package.");							
					UINT32 X:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ExtraSids field is populated and contains additional SIDs." : "The ExtraSids field is NOT populated.");							
					UINT32 unused1:1 = FormatString( "(%s)", this.ToBitString );							
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "LAN Manager key was used for authentication." : "LAN Manager key was NOT used for authentication.");							
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Cached account used for logon; no domain controller was contacted." : "Cached account is NOT used for logon; domain controller was contacted");							
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "No encryption is available." : "Encryption is available.");							
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Authentication was done via the GUEST account; no password was used." : "Authentication was NOT done via the GUEST account; password was used.");							
				}
		}
	}	
	NRPCUserSessionKey UserSessionKey;
	NdrUnicodeStringHeader LogonServer;
	NdrUnicodeStringHeader LogonDomainName;
	NdrPtr pLogonDomainId;
	UINT32 ExpansionRoom[10];
	UINT32 SidCount;
	NdrPtr pExtraSids;
	Switch
	{
		Case EffectiveName.BufferPtr.ReferentID != 0:
			NdrWideString EffectiveNameRef;
	}
	Switch
	{
		Case FullName.BufferPtr.ReferentID != 0:
			NdrWideString FullNameRef;
	}
	Switch
	{
		Case LogonScript.BufferPtr.ReferentID != 0:
			NdrWideString LogonScriptRef;
	}
	Switch
	{
		Case ProfilePath.BufferPtr.ReferentID != 0:
			NdrWideString ProfilePathRef;
	}
	Switch
	{
		Case HomeDirectory.BufferPtr.ReferentID != 0:
			NdrWideString HomeDirectoryRef;
	}	
	Switch
	{
		Case HomeDirectoryDrive.BufferPtr.ReferentID != 0:
			NdrWideString HomeDirectoryDriveRef;
	}	
	Switch
	{
		Case pGroupIds.ReferentID != 0:
			Struct GroupIds
			{
				NdrConformant Size;
				NRPCGroupMembership GroupId[ Size.MaxCount ];
			}
	}	
	Switch
	{
		Case LogonServer.BufferPtr.ReferentID != 0:
			NdrWideString LogonServerRef;
	}	
	Switch
	{
		Case LogonDomainName.BufferPtr.ReferentID != 0:
			NdrWideString LogonDomainNameRef;
	}
	Switch
	{
		Case pLogonDomainId.ReferentID != 0:
			SID( TRUE ) LogonDomainId;
	}
	Switch
	{
		Case pExtraSids.ReferentID != 0:
			Struct ExtraSids
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NRPCNetlogonSidAndAttributesSidPtrCount = 0 ]
				While[ TRUE ]
				{
					NRPCNetlogonSidAndAttributes ExtraSid[ Size.MaxCount ];
				}
				[ MaxLoopCount = Property.NRPCNetlogonSidAndAttributesSidPtrCount ]
				While[ TRUE ]
				{
					SID(TRUE) Sid;
				}
			}
	}
}

//
//	_NETLOGON_VALIDATION_SAM_INFO4
//	Alignment: NdrAlign
//
Struct NRPCNetlogonValidationSamInfo4 = FormatString( "LogonCount = %u, BadPasswordCount = %u, GroupCount = %u", LogonCount, BadPasswordCount, GroupCount )
{
	FILETIME LogonTime;
	FILETIME LogoffTime;
	FILETIME KickOffTime;
	FILETIME PasswordLastSet;
	FILETIME PasswordCanChange;
	FILETIME PasswordMustChange;
	NdrUnicodeStringHeader EffectiveName;
	NdrUnicodeStringHeader FullName;
	NdrUnicodeStringHeader LogonScript;
	NdrUnicodeStringHeader ProfilePath;
	NdrUnicodeStringHeader HomeDirectory;
	NdrUnicodeStringHeader HomeDirectoryDrive;
	UINT16 LogonCount;
	UINT16 BadPasswordCount;
	UINT32 UserId;
	UINT32 PrimaryGroupId;
	UINT32 GroupCount;
	NdrPtr pGroupIds;
	UINT32 UserFlags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Authentication was done via the GUEST account; no password was used." : "Authentication was NOT done via the GUEST account; password was used.");
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "No encryption is available." : "Encryption is available.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Cached account used for logon; no domain controller was contacted." : "Cached account is NOT used for logon; domain controller was contacted");
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "LAN Manager key was used for authentication." : "LAN Manager key was NOT used for authentication.");
					UINT32 unused0:1 = FormatString( "(%s)", this.ToBitString );
					UINT32 X:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ExtraSids field is populated and contains additional SIDs." : "The ExtraSids field is NOT populated.");
					UINT32 S:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Sub-authentication used; session key came from the sub-authentication package." : "Sub-authentication is NOT used; session key did NOT come from the sub-authentication package.");
					UINT32 T:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The account is a machine account." : "The account is NOT a machine account.");
					
					UINT32 V:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The domain controller understands NTLMv2." : "The domain controller does NOT understand NTLMv2.");
					UINT32 R:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ResourceGroupIds field is populated." : "The ResourceGroupIds field is NOT populated.");
					UINT32 unsued1:22 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unsued0:22 = FormatString( "(%s)", this.ToBitString );							
					UINT32 R:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ResourceGroupIds field is populated." : "The ResourceGroupIds field is NOT populated.");							
					UINT32 V:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The domain controller understands NTLMv2." : "The domain controller does NOT understand NTLMv2.");							
												
					UINT32 T:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The account is a machine account." : "The account is NOT a machine account.");							
					UINT32 S:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Sub-authentication used; session key came from the sub-authentication package." : "Sub-authentication is NOT used; session key did NOT come from the sub-authentication package.");							
					UINT32 X:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The ExtraSids field is populated and contains additional SIDs." : "The ExtraSids field is NOT populated.");							
					UINT32 unused1:1 = FormatString( "(%s)", this.ToBitString );							
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "LAN Manager key was used for authentication." : "LAN Manager key was NOT used for authentication.");							
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Cached account used for logon; no domain controller was contacted." : "Cached account is NOT used for logon; domain controller was contacted");							
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "No encryption is available." : "Encryption is available.");							
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Authentication was done via the GUEST account; no password was used." : "Authentication was NOT done via the GUEST account; password was used.");							
				}
		}
	}	
	NRPCUserSessionKey UserSessionKey;
	NdrUnicodeStringHeader LogonServer;
	NdrUnicodeStringHeader LogonDomainName;
	NdrPtr pLogonDomainId;
	UINT8 LMKey[8];	
	UINT32 UserAccountControl;
	UINT32 SubAuthStatus;
	SAMROldLargeInteger LastSuccessfulILogon;
	SAMROldLargeInteger LastFailedILogon;
	UINT32 FailedILogonCount;
	UINT32 Reserved4[1];
	UINT32 SidCount;
	NdrPtr pExtraSids;
	NdrUnicodeStringHeader DnsLogonDomainName;
	NdrUnicodeStringHeader Upn;
	
	//ExpansionString1...ExpansionString10:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 10 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader ExpansionString;
		Switch
		{
			Case ExpansionString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	
	Switch
	{
		Case EffectiveName.BufferPtr.ReferentID != 0:
			NdrWideString EffectiveNameRef;
	}
	Switch
	{
		Case FullName.BufferPtr.ReferentID != 0:
			NdrWideString FullNameRef;
	}
	Switch
	{
		Case LogonScript.BufferPtr.ReferentID != 0:
			NdrWideString LogonScriptRef;
	}
	Switch
	{
		Case ProfilePath.BufferPtr.ReferentID != 0:
			NdrWideString ProfilePathRef;
	}
	Switch
	{
		Case HomeDirectory.BufferPtr.ReferentID != 0:
			NdrWideString HomeDirectoryRef;
	}	
	Switch
	{
		Case HomeDirectoryDrive.BufferPtr.ReferentID != 0:
			NdrWideString HomeDirectoryDriveRef;
	}	
	Switch
	{
		Case pGroupIds.ReferentID != 0:
			Struct GroupIds
			{
				NdrConformant Size;
				NRPCGroupMembership GroupId[ Size.MaxCount ];
			}
	}	
	Switch
	{
		Case LogonServer.BufferPtr.ReferentID != 0:
			NdrWideString LogonServerRef;
	}	
	Switch
	{
		Case LogonDomainName.BufferPtr.ReferentID != 0:
			NdrWideString LogonDomainNameRef;
	}
	Switch
	{
		Case pLogonDomainId.ReferentID != 0:
			SID( TRUE ) LogonDomainId;
	}
	Switch
	{
		Case pExtraSids.ReferentID != 0:
			Struct ExtraSids
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NRPCNetlogonSidAndAttributesSidPtrCount = 0 ]
				While[ TRUE ]
				{
					NRPCNetlogonSidAndAttributes ExtraSid[ Size.MaxCount ];
				}
				[ MaxLoopCount = Property.NRPCNetlogonSidAndAttributesSidPtrCount ]
				While[ TRUE ]
				{
					SID(TRUE) Sid;
				};
			}
	}
	Switch
	{
		Case DnsLogonDomainName.BufferPtr.ReferentID != 0:
			NdrWideString DnsLogonDomainNameRef;
	}
	Switch
	{
		Case Upn.BufferPtr.ReferentID != 0:
			NdrWideString UpnRef;
	}
}

//
//	_NETLOGON_VALIDATION
//	Alignment: NdrAlign
//
Struct NRPCNetlogonValidation = SwitchValue.ToString
{
	NRPCNetlogonValidationInfoClass SwitchValue;
	Switch( Property.NdrEnumValue )
	{
		Case 1:
			Struct
			{
				NdrPtr pValidationUas;
				Switch
				{
					Case pValidationUas.ReferentID != 0:
						NRPCNetlogonValidationUasInfo ValidationUas;
				}
			}
		Case 2:
			Struct
			{
				NdrPtr pValidationSam;
				Switch
				{	
					Case pValidationSam.ReferentID != 0:
						NRPCNetlogonValidationSamInfo ValidationSam;
				}
			}
		Case 3:
			Struct
			{
				NdrPtr pValidationSam2;
				Switch
				{	
					Case pValidationSam2.ReferentID != 0:
						NRPCNetlogonValidationSamInfo2 ValidationSam2;
				}
			}
		Case 4:
		Case 5:
			Struct
			{
				NdrPtr pValidationGeneric2;
				Switch
				{	
					Case pValidationGeneric2.ReferentID != 0:
						NRPCNetlogonValidationGenericInfo2 ValidationGeneric2;
				}
			}
		Case 6:
			Struct
			{
				NdrPtr pValidationSam4;
				Switch
				{	
					Case pValidationSam4.ReferentID != 0:
						NRPCNetlogonValidationSamInfo4 ValidationSam4;
				}
			}
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	_NETLOGON_LOGON_IDENTITY_INFO
//	Alignment: None
//
Struct NRPCNetlogonLogonIdentityInfo = FormatString( "ParameterControl = %s", ParameterControl.ToString )
{
	[ Property.NRPCNetlogonLogonIdentityInfoLogonDomainNamePtr = this.BufferPtr.ReferentID ]
	NdrUnicodeStringHeader LogonDomainName;
	UINT32 ParameterControl = FormatString( "0x%08X", this )
	{
		Switch ( Property.MSRPCByteOrder)
		{
			Case LittleEndian:
				Struct
				{
					UINT32 unused0:1 = FormatString( "(%s)", this.ToBitString );
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Clear text passwords can be transmitted for this logon identity." : "Clear text passwords can NOT be transmitted for this logon identity." );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Update the logon statistics for this account upon successful logon." : "Do NOT update the logon statistics for this account upon successful logon." );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Return the user parameter list for this account upon successful logon." : "Do NOT return the user parameter list for this account upon successful logon." );
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Do NOT attempt to log this account on as a guest upon logon failure." : "Attempt to log this account on as a guest upon logon failure." );
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Allow this account to log on with the domain controller account." : "Do NOT allow this account to log on with the domain controller account." );
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Return the password expiration date and time upon successful logon." : "Do NOT return the password expiration date and time upon successful logon." );
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Send a client challenge upon logon request." : "Do NOT send a client challenge upon logon request." );

					UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Attempt logon as a guest for this account only." : "Do NOT attempt logon as a guest for this account only." );
					UINT32 I:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Return the profile path upon successful logon." : "Do NOT return the profile path upon successful logon." );
					UINT32 J:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Attempt logon to the specified domain only." : "Do NOT attempt logon to the specified domain only." );
					UINT32 K:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Allow this account to log on with the computer account." : "Do NOT allow this account to log on with the computer account." );
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Disable allowing fallback to guest account for this account." : "Allow fallback to guest account for this account." );
					UINT32 M:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Force the logon of this account as a guest if the password is incorrect." : "Do NOT force the logon of this account as a guest if the password is incorrect." );
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "This account has supplied a clear text password." : "This account has NOT supplied a clear text password." );
					UINT32 unused1:1 = FormatString( "(%s)", this.ToBitString );
					[ Property.NRPCNTLMv1Authentication ]
					UINT32 O:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Allow NTLMv1 authentication ([MS-NLMP]) when only NTLMv2 ([NTLM]) is allowed." : "Do NOT allow NTLMv1 authentication ([MS-NLMP]) when only NTLMv2 ([NTLM]) is allowed." );
					UINT32 unused2:3 = FormatString( "(%s)", this.ToBitString );
					UINT32 P:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Use subauthentication." : "Do NOT Use subauthentication." );
					UINT32 unused3:3 = FormatString( "(%s)", this.ToBitString );
					UINT32 QX:8 = FormatString( "      (%s) %s", this.ToBitString, "Encode the subauthentication package identifier." );
				}
			Default:
				Struct
				{	
					[ DataFieldByteOrder = LittleEndian ]
					UINT32 QX:8 = FormatString( "      (%s) %s", this.ToBitString, "Encode the subauthentication package identifier." );
					
					UINT32 unused1:3 = FormatString( "(%s)", this.ToBitString );
					UINT32 P:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Use subauthentication." : "Do NOT Use subauthentication." );
					UINT32 unused2:3 = FormatString( "(%s)", this.ToBitString );
					[ Property.NRPCNTLMv1Authentication ]
					UINT32 O:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Allow NTLMv1 authentication ([MS-NLMP]) when only NTLMv2 ([NTLM]) is allowed." : "Do NOT allow NTLMv1 authentication ([MS-NLMP]) when only NTLMv2 ([NTLM]) is allowed." );
					
					UINT32 unused3:1 = FormatString( "(%s)", this.ToBitString );
					UINT32 N:1 = FormatString( "      (%s) %s", this.ToBitString, this? "This account has supplied a clear text password." : "This account has NOT supplied a clear text password." );
					UINT32 M:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Force the logon of this account as a guest if the password is incorrect." : "Do NOT force the logon of this account as a guest if the password is incorrect." );
					UINT32 L:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Disable allowing fallback to guest account for this account." : "Allow fallback to guest account for this account." );
					UINT32 K:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Allow this account to log on with the computer account." : "Do NOT allow this account to log on with the computer account." );
					UINT32 J:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Attempt logon to the specified domain only." : "Do NOT attempt logon to the specified domain only." );
					UINT32 I:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Return the profile path upon successful logon." : "Do NOT return the profile path upon successful logon." );
					UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Attempt logon as a guest for this account only." : "Do NOT attempt logon as a guest for this account only." );
					
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Send a client challenge upon logon request." : "Do NOT send a client challenge upon logon request." );
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Return the password expiration date and time upon successful logon." : "Do NOT return the password expiration date and time upon successful logon." );
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Allow this account to log on with the domain controller account." : "Do NOT allow this account to log on with the domain controller account." );
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Do NOT attempt to log this account on as a guest upon logon failure." : "Attempt to log this account on as a guest upon logon failure." );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Return the user parameter list for this account upon successful logon." : "Do NOT return the user parameter list for this account upon successful logon." );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Update the logon statistics for this account upon successful logon." : "Do NOT update the logon statistics for this account upon successful logon." );
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Clear text passwords can be transmitted for this logon identity." : "Clear text passwords can NOT be transmitted for this logon identity." );
					UINT32 unused0:1 = FormatString( "(%s)", this.ToBitString );
				}
		}
	}
	SAMROldLargeInteger Reserved;
	[ Property.NRPCNetlogonLogonIdentityInfoLogonUserNamePtr = this.BufferPtr.ReferentID ]
	NdrUnicodeStringHeader UserName;
	[ Property.NRPCNetlogonLogonIdentityInfoLogonWorkstationPtr = this.BufferPtr.ReferentID ]
	NdrUnicodeStringHeader Workstation;
}

Struct NRPCNetlogonLogonIdentityInfoRef = FormatString("%s%s%s", LogonDomainName? FormatString("LogonDomainName = %s ", LogonDomainName.ToString): "",
																 UserName? FormatString("UserName = %s ", UserName.ToString): "",
																 Workstation? FormatString("Workstation = %s ", Workstation.ToString): "" )
{
	Switch
	{
		Case Property.NRPCNetlogonLogonIdentityInfoLogonDomainNamePtr != 0:
			NdrWideString LogonDomainName;
	}
	Switch
	{
		Case Property.NRPCNetlogonLogonIdentityInfoLogonUserNamePtr != 0:
			NdrWideString UserName;
	}
	Switch
	{
		Case Property.NRPCNetlogonLogonIdentityInfoLogonWorkstationPtr != 0:
			NdrWideString Workstation;
	}
}

//
//	_NETLOGON_LOGON_INFO_CLASS
//	Alignment: None
//
Struct NRPCNetlogonLogonInfoClass = FormatString("LogonLevel = %s", NRPCNetlogonLogonInfoClassTable( Value.Value, FALSE) )
{
	NdrEnum Value = NRPCNetlogonLogonInfoClassTable(this.Value, TRUE);
}

Table NRPCNetlogonLogonInfoClassTable( Value, Description )
{
	Switch( Value )
	{
		Case 1: FormatString("NetlogonInteractiveInformation %s", Description? "- Logon information provided pertains to an interactive account logon." : "" );
		Case 2: FormatString("NetlogonNetworkInformation %s", Description? "- Logon information provided pertains to a network account logon." : "" );
		Case 3: FormatString("NetlogonServiceInformation %s", Description? "- Logon information provided pertains to a service account logon." : "" );
		Case 4: FormatString("NetlogonGenericInformation %s", Description? "- Logon information provided pertains to a generic account logon." : "" );
		Case 5: FormatString("NetlogonInteractiveTransitiveInformation %s", Description? "- Logon information provided pertains to a transitive interactive account logon and can be passed through transitive trust links." : "" );
		Case 6: FormatString("NetlogonNetworkTransitiveInformation %s", Description? "- Logon information provided pertains to a transitive network account logon and can be passed through transitive trust links." : "" );
		Case 7: FormatString("NetlogonServiceTransitiveInformation %s", Description? "- Logon information provided pertains to a transitive service account logon and can be passed through transitive trust links." : "" );
		Default: FormatString("Unknow Value(%u)", Value);
	}
}

//
//	_NETLOGON_VALIDATION_INFO_CLASS
//
Struct NRPCNetlogonValidationInfoClass = FormatString("ValidationLevel = %s", NRPCNetlogonValidationInfoClassTable( Value.Value, FALSE ))
{
	NdrEnum Value = NRPCNetlogonValidationInfoClassTable( this.Value, TRUE );
}

Table NRPCNetlogonValidationInfoClassTable( Value, Description )
{
	Switch( Value )
	{
		Case 1: FormatString("NetlogonValidationUasInfo %s", Description? "- Associated structure is NETLOGON_VALIDATION_UAS_INFO." : "" );
		Case 2: FormatString("NetlogonValidationSamInfo %s", Description? "- Associated structure is NETLOGON_VALIDATION_SAM_INFO." : "" );
		Case 3: FormatString("NetlogonValidationSamInfo2 %s", Description? "- Associated structure is NETLOGON_VALIDATION_SAM_INFO2." : "" );
		Case 4: FormatString("NetlogonValidationGenericInfo %s", Description? "- Associated structure is NETLOGON_VALIDATION_GENERIC_INFO2." : "" );
		Case 5: FormatString("NetlogonValidationGenericInfo2 %s", Description? "- Associated structure is NETLOGON_VALIDATION_GENERIC_INFO2." : "" );
		Case 6: FormatString("NetlogonValidationSamInfo4 %s", Description? "- Associated structure is NETLOGON_VALIDATION_SAM_INFO4." : "" );
	}
}


//*********************************************************************
//	2.2.1.5	Account Database Replication Structures
//*********************************************************************

//
//	_NLPR_QUOTA_LIMITS
//	Alignment: 4
//
Struct NRPCNlprQuotaLimits
{
	UINT32 PagedPoolLimit;
	UINT32 NonPagedPoolLimit;
	UINT32 MinimumWorkingSetSize;
	UINT32 MaximumWorkingSetSize;
	UINT32 PagefileLimit;
	SAMROldLargeInteger Reserved;
}

//
//	_NETLOGON_DELTA_ACCOUNTS
//	Alignment: NdrAlign
//
Struct NRPCNetlogonDeltaAccounts
{
	NdrAlign Pad;
	UINT32 PrivilegeEntries;
	UINT32 PrivilegeControl = FormatString("0x%08X", UINT32( FrameData, FrameOffset))
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian: 
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "All of the specified privileges MUST be held by the process that is requesting access." : "All of the specified privileges MUST NOT be held by the process that is requesting access.");
					UINT32 unused0:31 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:31 = FormatString( "(%s)", this.ToBitString );
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "All of the specified privileges MUST be held by the process that is requesting access." : "All of the specified privileges MUST NOT be held by the process that is requesting access.");
				}
		}
	}		
	NdrPtr pPrivilegeAttributes;
	NdrPtr pPrivilegeNames;
	NRPCNlprQuotaLimits QuotaLimits;
	LSADPolicyObjectAccessMask  SystemAccessFlags;
	SecurityInformation SecurityInformation;
	UINT32 SecuritySize;
	NdrPtr pSecurityDescriptor;
	//DummyString1...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	
	Switch
	{
		Case pPrivilegeAttributes.ReferentID != 0:
			Struct PrivilegeAttributes = Size.ToString
			{
				NdrConformant Size;
				NRPCNetlogonDeltaAccountsPrivilegeAttributesFlags PrivilegeAttribute[ Size.MaxCount ];
			}
	}
	Switch
	{	
		Case pPrivilegeNames.ReferentID != 0:
			Struct PrivilegeNames = Size.ToString
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NdrUnicodeStringHeaderPtrCount ]
				While[  TRUE ]
				{
					NdrUnicodeStringHeader PrivilegeName;
				}
				
				[ MaxLoopCount = Property.NdrUnicodeStringHeaderPtrCount ]
				While[ TRUE ]
				{
					NdrWideString PrivilegeNameRef;
				}
			}
	}
	Switch
	{
		Case pSecurityDescriptor.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				Switch
				{
					Case Size.MaxCount > 0:
						NdrSecurityDescriptor SecurityDescriptor;
				}
			}
	}
}

Struct NRPCNetlogonDeltaAccountsPrivilegeAttributesFlags = FormatString("0x%08X", Flags)
{
	UINT32 Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Privilege is enabled by default." : "Privilege is disnabled by default." );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Privilege is enabled." : "Privilege is diaabled." );	
					UINT32 unused0:30 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:30 = FormatString( "(%s)", this.ToBitString );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Privilege is enabled." : "Privilege is diaabled." );	
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Privilege is enabled by default." : "Privilege is disnabled by default." );
				}
		}
	}
}

//
//	_NETLOGON_DELTA_ALIAS
//	Alignment: None
//
Struct NRPCNetlogonDeltaAlias = FormatString("Name = %s, Comment = %s", NameRef? NameRef.ToString : "NULL", CommentRef? CommentRef.ToString : "NULL" )
{
	NdrUnicodeStringHeader  Name;
	UINT32 RelativeId;
	SecurityInformation SecurityInformation;
	UINT32 SecuritySize;
	NdrPtr pSecurityDescriptor;
	NdrUnicodeStringHeader  Comment;
	//DummyString2...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 3 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	Switch
	{
		Case Name.BufferPtr.ReferentID != 0:
			NdrWideString NameRef;
	}
	Switch
	{
		Case pSecurityDescriptor.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				Switch
				{
					Case Size.MaxCount > 0:
						NdrSecurityDescriptor SecurityDescriptor;
				}
			}
	}
	Switch
	{
		Case Comment.BufferPtr.ReferentID != 0:
			NdrWideString CommentRef;
	}
}

//
//	_NLPR_SID_INFORMATION
//	Alignment: None
//
Struct NRPCNlprSidInformation
{
	[ Property.NRPCSidPointerPtrCount = Property.NRPCSidPointerPtrCount + ( this.ReferentID ? 1 : 0 ) ]
	NdrPtr SidPointerPtr;
}

//
//	_NLPR_SID_ARRAY
//	Alignment: NdrAlign
//
Struct NRPCNlprSidArray = FormatString("Count = %u", Count )
{
	UINT32 Count;
	[ Property.NRPCNlprSidArraySidsPtr = this.ReferentID ]
	NdrPtr pSids;
}

//
//	_NETLOGON_DELTA_ALIAS_MEMBER
//	Alignment: None
//
Struct NRPCNetlogonDeltaAliasMember
{
	NdrAlign Pad;
	NRPCNlprSidArray Members;
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	Switch
	{
		Case Property.NRPCNlprSidArraySidsPtr != 0:
			Struct MembersRef
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NRPCSidPointerPtrCount = 0 ]
				While[ TRUE ]
				{
					NRPCNlprSidInformation Member;
				}

				[ MaxLoopCount = Property.NRPCSidPointerPtrCount ]
				While[ TRUE ]
				{
					SID( TRUE ) Sid;
				}
			}
	}			
}

//
//	_NETLOGON_DELTA_DELETE_GROUP
//	Alignment: None
//
Struct NRPCNetlogonDeltaDeleteGroup = FormatString("AccountName = %s", AccountName? AccountName: "NULL" )
{
	NdrPtr pAccountName;
	//DummyString1...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	Switch
	{
		Case pAccountName.ReferentID != 0:
			NdrWideString AccountName;
	}
}

//
//	_NETLOGON_DELTA_DELETE_USER
//	Alignment: None
//
Struct NRPCNetlogonDeltaDeleteUser = FormatString("AccountName = %s", AccountName? AccountName: "NULL" )
{
	NdrPtr pAccountName;
	//DummyString1...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	Switch
	{
		Case pAccountName.ReferentID != 0:
			NdrWideString AccountName;
	}
}

//
//	_NETLOGON_DELTA_DOMAIN
//	Alignment: None
//
Struct NRPCNetlogonDeltaDomain = FormatString( "DomainName = %s, OemInfo = %s, DomainLockoutInfo = %s", DomainNameRef? DomainNameRef.ToString : "NULL", OemInformationRef? OemInformationRef.ToString : "NULL", DomainLockoutInformation? DomainLockoutInformation.ToString : "NULL" )
{
	NdrUnicodeStringHeader DomainName;
	NdrUnicodeStringHeader OemInformation;
	FILETIME ForceLogoff;
	UINT16 MinPasswordLength;
	UINT16 PasswordHistoryLength;
	FILETIME MaxPasswordAge;
	FILETIME MinPasswordAge;
	INT64 DomainModifiedCount;
	FILETIME DomainCreationTime;
	SecurityInformation SecurityInformation;
	UINT32 SecuritySize;
	NdrPtr pSecurityDescriptor;
	NdrUnicodeStringHeader DomainLockoutInformation;
	//DummyString2...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 3 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	SAMRPasswordProperties PasswordProperties;
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	Switch
	{
		Case DomainName.BufferPtr.ReferentID != 0:
			NdrWideString DomainNameRef;
	}
	Switch
	{
		Case OemInformation.BufferPtr.ReferentID != 0:
			NdrWideString OemInformationRef;
	}
	Switch
	{
		Case pSecurityDescriptor.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				Switch
				{
					Case Size.MaxCount > 0:
						NdrSecurityDescriptor SecurityDescriptor;
				}
			}
	}
	Switch
	{
		Case DomainLockoutInformation.BufferPtr.ReferentID != 0:
			NdrWideString DomainLockoutInformation;
	}
}

//
//	_NETLOGON_DELTA_ENUM
//	Alignment: NdrAlign
//
Struct NRPCNetlogonDeltaEnum = DeltaType.ToString
{
	NRPCNetlogonDeltaType DeltaType;
	Switch( Property.MSRPCNdr64 )
	{
		Case TRUE: Align8 NDR64Pad1;
	}
	NRPCNetlogonDeltaIdUnion DeltaID;
	Switch( Property.MSRPCNdr64 )
	{
		Case TRUE: Align8 NDR64Pad2;
	}
	NRPCNetlogonDeltaUnion DeltaUnion;
}

Struct NRPCNetlogonDeltaEnumRef
{
	//NRPCNetlogonDeltaIdUnion - referent part
	Switch
	{
		Case Property.NRPCSidPtr$[ Property.NRPCNetlogonDeltaEnumRefCount ] != 0:
			SID( TRUE ) Sid;
		Case Property.NRPCNamePtr$[ Property.NRPCNetlogonDeltaEnumRefCount ] != 0:
			NdrWideString Name;
	}

	//NRPCNetlogonDeltaIdUnion - referent part
	Switch
	{
		Case Property.NRPCSelectedMemberPtr$[ Property.NRPCNetlogonDeltaEnumCount ] != 0:
			Switch( Property.NRPCSwitchValue$[ Property.NRPCNetlogonDeltaEnumRefCount ] )
			{
				Case 1:  //AddOrChangeDomain
					NRPCNetlogonDeltaDomain DeltaDomain;
				Case 2:  //AddOrChangeGroup
					NRPCNetlogonDeltaGroup DeltaGroup;
				Case 4:  //RenameGroup
					NRPCNetlogonDeltaRenameGroup DeltaRenameGroup;
				Case 5:  //AddOrChangeUser
					NRPCNetlogonDeltaUser DeltaUser;
				Case 7:  //RenameUser
					NRPCNetlogonDeltaRenameUser DeltaRenameUser;
				Case 8:  //ChangeGroupMembership
					NRPCNetlogonDeltaGroupMember DeltaGroupMember;
				Case 9:  //AddOrChangeAlias
					NRPCNetlogonDeltaAlias DeltaAlias;
				Case 11: //RenameAlias
					NRPCNetlogonDeltaRenameAlias DeltaRenameAlias;
				Case 12: //ChangeAliasMembership
					NRPCNetlogonDeltaAliasMember DeltaAliasMember;
				Case 13: //AddOrChangeLsaPolicy
					NRPCNetlogonDeltaPolicy DeltaPolicy;
				Case 14: //AddOrChangeLsaTDomain
					NRPCNetlogonDeltaTrustedDomains DeltaTDomains;
				Case 16: //AddOrChangeLsaAccount
					NRPCNetlogonDeltaAccounts DeltaAccounts;
				Case 18: //AddOrChangeLsaSecret
					NRPCNetlogonDeltaSecret DeltaSecret;
				Case 20: //DeleteGroupByName
					NRPCNetlogonDeltaDeleteGroup DeltaDeleteGroup;
				Case 21: //DeleteUserByName
					NRPCNetlogonDeltaDeleteUser DeltaDeleteUser;
				Case 22: //SerialNumberSkip
					Struct
					{
						Align4 Pad;
						NRPCNlprModifiedCount DeltaSerialNumberSkip;
					}
				Default:
					ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
			}
	}
}

//
//	_NETLOGON_DELTA_ENUM_ARRAY
//	Alignment: NdrAlign
//
Struct NRPCNetlogonDeltaEnumArray = FormatString("CountReturned = %u", CountReturned)
{
	UINT32 CountReturned;
	NdrPtr pDeltas;
	Switch
	{
		Case pDeltas.ReferentID != 0:
			Struct Deltas
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NRPCNetlogonDeltaEnumCount = 0]
				While[ Property.NRPCNetlogonDeltaEnumCount < Size.MaxCount ]
				{
					[ Property.NRPCNetlogonDeltaEnumCount = Property.NRPCNetlogonDeltaEnumCount + 1 ]
					NRPCNetlogonDeltaEnum Delta;
				}
				
				[ MaxLoopCount = Size.MaxCount, Property.NRPCNetlogonDeltaEnumRefCount = 0]
				While[ Property.NRPCNetlogonDeltaEnumRefCount < Size.MaxCount ]
				{
					[ Property.NRPCNetlogonDeltaEnumRefCount = Property.NRPCNetlogonDeltaEnumRefCount + 1 ]
					NRPCNetlogonDeltaEnumRef DeltaRef;
				}
			}
	}
}

//
//	_NETLOGON_DELTA_GROUP
//
Struct NRPCNetlogonDeltaGroup = FormatString("RelativeId = %u, Attributes = %s", RelativeId, Attributes.ToString)
{
	NdrUnicodeStringHeader Name;
	UINT32 RelativeId;
	UINT32 Attributes = FormatString("0x%08X", this)
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID can NOT have the SE_GROUP_ENABLED attribute removed." : "The SID can have the SE_GROUP_ENABLED attribute removed.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled by default." : "The SID is added by an application.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled for access checks." : "The SID is disabled for access checks.");
					UINT32 unused0:29 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:29 = FormatString( "(%s)", this.ToBitString );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled for access checks." : "The SID is disabled for access checks.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID is enabled by default." : "The SID is added by an application.");
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The SID can NOT have the SE_GROUP_ENABLED attribute removed." : "The SID can have the SE_GROUP_ENABLED attribute removed.");
				}
		}
	}
	NdrUnicodeStringHeader AdminComment;
	SecurityInformation SecurityInformation;
	UINT32 SecuritySize;
	NdrPtr pSecurityDescriptor;
	//DummyString1...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	Switch
	{
		Case Name.BufferPtr.ReferentID != 0:
			NdrWideString NameRef;
	}
	Switch
	{
		Case AdminComment.BufferPtr.ReferentID != 0:
			NdrWideString AdminCommentRef;
	}
	Switch
	{
		Case pSecurityDescriptor.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				Switch
				{
					Case Size.MaxCount > 0:
						NdrSecurityDescriptor SecurityDescriptor;
				}
			}
	}
}

//
//	_NLPR_CR_CIPHER_VALUE
//	Alignment: NdrAlign
//
Struct NRPCNlprCrCipherValue
{
	UINT32 Length;
	UINT32 MaximumLength;
	NdrPtr pBuffer;
}

//
//	_NETLOGON_DELTA_SECRET
//	Alignment: None
//
Struct NRPCNetlogonDeltaSecret
{
	NdrAlign Pad;
	NRPCNlprCrCipherValue CurrentValue;
	FILETIME CurrentValueSetTime;
	NRPCNlprCrCipherValue OldValue;
	FILETIME OldValueSetTime;
	SecurityInformation SecurityInformation;
	UINT32 SecuritySize;
	NdrPtr pSecurityDescriptor;
	//DummyString1...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	Switch
	{
		Case CurrentValue.pBuffer.ReferentID != 0:
			Struct CurrentValueRef
			{
				NdrConformantVarying NdrVarying;
				BLOB( NdrVarying.ActualCount ) Buffer;
			}
	}
	Switch
	{
		Case OldValue.pBuffer.ReferentID != 0:
			Struct OldValueValueRef
			{
				NdrConformantVarying NdrVarying;
				BLOB( NdrVarying.ActualCount ) Buffer;
			}
	}
	Switch
	{
		Case pSecurityDescriptor.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				Switch
				{
					Case Size.MaxCount > 0:
						NdrSecurityDescriptor SecurityDescriptor;
				}
			}
	}
}

//
//	_NETLOGON_DELTA_TRUSTED_DOMAINS
//	Alignment: None
//
Struct NRPCNetlogonDeltaTrustedDomains = FormatString("DomainName = %s, NumControllerEntries = %u", DomainNameRef? DomainNameRef.ToString : "NULL", NumControllerEntries )
{
	NdrUnicodeStringHeader  DomainName;
	UINT32 NumControllerEntries;
	NdrPtr pControllerNames;
	UINT32 SecurityInformation;
	UINT32 SecuritySize;
	NdrPtr pSecurityDescriptor;
	//DummyString1...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 TrustedPosixOffset;
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );

	Switch
	{
		Case DomainName.BufferPtr.ReferentID != 0:
			NdrWideString DomainNameRef;
	}
	Switch
	{
		Case pControllerNames.ReferentID != 0:
			Struct ControllerNames = Size.ToString
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NdrUnicodeStringHeaderPtrCount = 0 ]
				While[ TRUE ]
				{
					NdrUnicodeStringHeader ControllerName;
				}
				[ MaxLoopCount = Property.NdrUnicodeStringHeaderPtrCount ]
				While[ TRUE ]
				{
					NdrWideString ControllerName;
				}
			}
	}
	Switch
	{
		Case pSecurityDescriptor.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				Switch
				{
					Case Size.MaxCount > 0:
						NdrSecurityDescriptor SecurityDescriptor;
				}
			}
	}		
}

//
//	_NETLOGON_DELTA_RENAME_ALIAS
//	Alignment: None
//
Struct NRPCNetlogonDeltaRenameAlias = FormatString( "OldName = %s, NewName", OldNameRef? OldNameRef.ToString : "NULL", NewNameRef? NewNameRef.ToString : "NULL" )
{
	NdrUnicodeStringHeader OldName;
	NdrUnicodeStringHeader NewName;
	//DummyString1...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	Switch
	{
		Case OldName.BufferPtr.ReferentID != 0:
			NdrWideString OldNameRef;
	}
	Switch
	{
		Case NewName.BufferPtr.ReferentID != 0:
			NdrWideString NewNameRef;
	}
}

//
//	_NETLOGON_DELTA_RENAME_USER
//	Alignment: None
//
Struct NRPCNetlogonDeltaRenameUser = FormatString( "OldName = %s, NewName", OldNameRef? OldNameRef.ToString : "NULL", NewNameRef? NewNameRef.ToString : "NULL" )
{
	NdrUnicodeStringHeader OldName;
	NdrUnicodeStringHeader NewName;
	//DummyString1...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	Switch
	{
		Case OldName.BufferPtr.ReferentID != 0:
			NdrWideString OldNameRef;
	}
	Switch
	{
		Case NewName.BufferPtr.ReferentID != 0:
			NdrWideString NewNameRef;
	}
}

Table NRPCNlprLogonHoursUnitsPerWeekTable( Value )
{
	Switch( Value )
	{
		Case 7: "Day";
		Case 24*7: "Hour";
		Case 60*24*7: "Minute";
		Default: FormatString("Unknow Value(%u", Value);
	}
}

//
//	_NLPR_LOGON_HOURS
//	Alignment: NdrAlgin
//
Struct NRPCNlprLogonHours = FormatString("UnitsPerWeek = %u", NRPCNlprLogonHoursUnitsPerWeekTable( UnitsPerWeek ) )
{
	UINT16 UnitsPerWeek = NRPCNlprLogonHoursUnitsPerWeekTable( this );
	[ Property.NRPCNlprLogonHoursLogonHoursPtr = this.ReferentID ]
	NdrPtr pLogonHours;
}

//
//	_NLPR_USER_PRIVATE_INFO
//	Alignment: NdrAlign
//
Struct NRPCNlprUserPrivateInfo = SensitiveData.ToString
{
	[ Property.NRPCNlprUserPrivateInfoSensitiveData ]
	BOOLEAN SensitiveData = this? "The data is encrypted" : "The data is NOT encrypted";
	Align4 Pad;
	UINT32 DataLength;
	[ Property.NRPCNlprUserPrivateInfoDataPtr = this.ReferentID ]
	NdrPtr pData;			
}

//
//	_NETLOGON_DELTA_USER
//	Alignment: None
//
Struct NRPCNetlogonDeltaUser = FormatString( "UserId = %u, PrimaryGroupId = %u, BadPasswordCount = %u, LogonCount = %u", UserId, PrimaryGroupId, BadPasswordCount, LogonCount )
{
	NdrUnicodeStringHeader UserName;
	NdrUnicodeStringHeader FullName;
	UINT32 UserId;
	UINT32 PrimaryGroupId;
	NdrUnicodeStringHeader HomeDirectory;
	NdrUnicodeStringHeader HomeDirectoryDrive;
	NdrUnicodeStringHeader ScriptPath;
	NdrUnicodeStringHeader AdminComment;
	NdrUnicodeStringHeader WorkStations;
	FILETIME LastLogon;
	FILETIME LastLogoff;
	NRPCNlprLogonHours LogonHours;
	UINT16 BadPasswordCount;
	UINT16 LogonCount;
	FILETIME PasswordLastSet;
	FILETIME AccountExpires;
	SAMRUserAccountControl UserAccountControl;
	NRPCNtOwfPassword EncryptedNtOwfPassword;
	NRPCLmOwfPassword EncryptedLmOwfPassword;
	BOOLEAN NtPasswordPresent = this? "NtOwfPassword MUST be processed" : "NtOwfPassword MUST be ignored";
	BOOLEAN LmPasswordPresent = this? "LmOwfPassword MUST be processed" : "LmOwfPassword MUST be ignored";
	BOOLEAN PasswordExpired = this? "The password MUST be expired immediately or has expired" : "The password has not expired";
	Align4 Pad1;
	NdrUnicodeStringHeader UserComment;
	NdrUnicodeStringHeader Parameters;
	UINT16 CountryCode;
	UINT16 CodePage;
	NdrAlign Pad2;
	NRPCNlprUserPrivateInfo PrivateData;
	SecurityInformation SecurityInformation;
	UINT32 SecuritySize;
	NdrPtr pSecurityDescriptor;
	NdrUnicodeStringHeader ProfilePath;
	
	//DummyString2...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 3 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	
	UINT32 DummyLong1;
	UINT32 DummyLong2;
	UINT32 DummyLong3;
	UINT32 DummyLong4;
	
	Switch
	{
		Case UserName.BufferPtr.ReferentID != 0:
			NdrWideString UserNameRef;
	}
	Switch
	{
		Case FullName.BufferPtr.ReferentID != 0:
			NdrWideString FullNameRef;
	}
	Switch
	{
		Case HomeDirectory.BufferPtr.ReferentID != 0:
			NdrWideString HomeDirectoryRef;
	}
	Switch
	{
		Case HomeDirectoryDrive.BufferPtr.ReferentID != 0:
			NdrWideString HomeDirectoryDriveRef;
	}
	Switch
	{
		Case ScriptPath.BufferPtr.ReferentID != 0:
			NdrWideString ScriptPathRef;
	}
	Switch
	{
		Case AdminComment.BufferPtr.ReferentID != 0:
			NdrWideString AdminCommentRef;
	}
	Switch
	{
		Case WorkStations.BufferPtr.ReferentID != 0:
			NdrWideString WorkStationsRef;
	}
	//referent of NLPR_LOGON_HOURS
	Switch
	{
		Case Property.NRPCNlprLogonHoursLogonHoursPtr != 0:
			Struct LogonHoursRef
			{
				NdrConformantVarying NdrVarying;
				UINT8 LogonHours[ NdrConformantVarying.ActualCount ];
			}
	}
	Switch
	{
		Case UserComment.BufferPtr.ReferentID != 0:
			NdrWideString UserCommentRef;
	}
	Switch
	{
		Case Parameters.BufferPtr.ReferentID != 0:
			NdrWideString ParametersRef;
	}
	//referent of NLPR_USER_PRIVATE_INFO
	Switch
	{
		Case Property.NRPCNlprUserPrivateInfoDataPtr != 0:
			Struct PrivateDataRef
			{
				NdrConformant Size;
				Switch
				{
					Case Property.NRPCNlprUserPrivateInfoSensitiveData == TRUE:
						BLOB( Size.MaxCount ) EncryptedData;
					Default:
						[ DatafieldFrameLength = Size.MaxCount + FrameOffset ]
						Struct PrivateData
						{
							UINT32 DataType = MUSTBeSetToTable( this, "0x00000002" );
							UINT16 LmLength;
							UINT16 LmMaximumLength;
							UINT32 Unused1 = MUSTBeSetToTable( this, "0");
							BLOB(16) LmHash;
							UINT16 NtLength;
							UINT16 NtMaximumLength;
							UINT32 Unused2;
							BLOB(16) NtHash;
							UINT16 LmHistoryLength;
							UINT16 LmHistoryMaximumLength;
							UINT32 Unused3;
							UINT16 NtHistoryLength;
							UINT16 NtHistoryMaximumLength;
							UINT32 Unused4;
							BLOB( NtHistoryLength/16 ) NtHistoryArray;
							BLOB( LmHistoryLength/16 ) LmHistoryArray;
							BLOB( FrameLength - FrameOffset ) Padding;
						}
				}
			}
	}
	Switch
	{
		Case pSecurityDescriptor.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				Switch
				{
					Case Size.MaxCount > 0:
						NdrSecurityDescriptor SecurityDescriptor;
				}
			}
	}
	Switch
	{
		Case ProfilePath.BufferPtr.ReferentID != 0:
			NdrWideString ProfilePathRef;
	}
}

//
//	_NETLOGON_DELTA_GROUP_MEMBER
//	Alignment: None
//
Struct NRPCNetlogonDeltaGroupMember = FormatString( "MemberCount = %u", MemberCount )
{
	NdrPtr pMembers;
	NdrPtr pAttributes;
	UINT32 MemberCount;
	UINT32 DummyLong1;
	UINT32 DummyLong2;
	UINT32 DummyLong3;
	UINT32 DummyLong4;
	Switch
	{
		Case pMembers.ReferentID != 0:
			Struct Members = Size.ToString
			{
				NdrConformant Size;
				UINT32 Member[ Size.MaxCount ];
			}
	}
	Switch
	{
		Case pAttributes.ReferentID != 0:
			Struct Attributes = Size.ToString
			{
				NdrConformant Size;
				SAMRUserAllValues Attribute[ Size.MaxCount ];
			}
	}
}

//
//	_NETLOGON_DELTA_ID_UNION
//	Alignment: NdrAlign
//
Struct NRPCNetlogonDeltaIdUnion = SwitchValue.ToString
{
	NRPCNetlogonDeltaType SwitchValue;
	NdrAlign Pad;
	Switch( Property.NdrEnumValue )
	{
		Case 1:  //AddOrChangeDomain
		Case 2:  //AddOrChangeGroup
		Case 3:  //DeleteGroup
		Case 4:  //RenameGroup
		Case 5:  //AddOrChangeUser
		Case 6:  //DeleteUser
		Case 7:  //RenameUser
		Case 8:  //ChangeGroupMembership
		Case 9:  //AddOrChangeAlias
		Case 10: //DeleteAlias
		Case 11: //RenameAlias
		Case 12: //ChangeAliasMembership
		Case 20: //DeleteGroupByName
		Case 21: //DeleteUserByName
			UINT32 Rid;
		Case 13: //AddOrChangeLsaPolicy
		Case 14: //AddOrChangeLsaTDomain
		Case 15: //DeleteLsaTDomain
		Case 16: //AddOrChangeLsaAccount
		Case 17: //DeleteLsaAccount
			[ Property.NRPCSidPtr$[ Property.NRPCNetlogonDeltaEnumCount ] = this.ReferentID ]
			NdrPtr pSid;
		Case 18: //AddOrChangeLsaSecret
		Case 19: //DeleteLsaSecret
			[ Property.NRPCNamePtr$[ Property.NRPCNetlogonDeltaEnumCount ] = this.ReferentID ]
			NdrPtr pName;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	_NETLOGON_DELTA_POLICY
//	Alignment: None
//
Struct NRPCNetlogonDeltaPolicy = FormatString( "AuditingMode = %s", AuditingMode.ToString )
{
	NdrAlign Pad1;
	UINT32 MaximumLogSize;
	FILETIME AuditRetentionPeriod;
	BOOLEAN AuditingMode = this? "Auditing is enabled" : "Auditing is disabled";
	Align4 Pad2;
	UINT32 MaximumAuditEventCount;
	NdrPtr pEventAuditingOptions;
	NdrUnicodeStringHeader  PrimaryDomainName;
	NdrPtr pPrimaryDomainSid;
	NRPCNlprQuotaLimits QuotaLimits;
	SAMROldLargeInteger ModifiedId;
	FILETIME DatabaseCreationTime;
	SecurityInformation SecurityInformation;
	UINT32 SecuritySize;
	NdrPtr pSecurityDescriptor;
	//DummyString1...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	
	Switch
	{
		Case pEventAuditingOptions.ReferentID != 0:
			Struct EventAuditingOptions = Size.ToString
			{
				NdrConformant Size;
				Switch
				{
					Case Size.MaxCOunt > 0:
						[ Local.ArrayCount = 0 ]
						Struct
						{
							While[ Local.ArrayCount < Size.MaxCount ]
							{
								[ Local.ArrayCount = Local.ArrayCount + 1 ]
								UINT32 EventAuditingOption = LSADLsaprPolicyAuditEventsInfoEventAuditingOptionsTable(this);
							}
						}
				}
			}
	}
	Switch
	{
		Case PrimaryDomainName.BufferPtr.ReferentID != 0:
			NdrWideString PrimaryDomainNameRef;
	}
	Switch
	{
		Case pPrimaryDomainSid.ReferentID != 0:
			SID( TRUE ) PrimaryDomainSid;
	}
	Switch
	{
		Case pSecurityDescriptor.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				Switch
				{
					Case Size.MaxCount > 0:
						NdrSecurityDescriptor SecurityDescriptor;
				}
			}
	}
}

//
//	_NETLOGON_DELTA_RENAME_GROUP
//	Alignment: None
//
Struct NRPCNetlogonDeltaRenameGroup  = FormatString( "OldName = %s, NewName", OldNameRef? OldNameRef.ToString : "NULL", NewNameRef? NewNameRef.ToString : "NULL" )
{
	NdrUnicodeStringHeader OldName;
	NdrUnicodeStringHeader NewName;
	//DummyString1...DummyString4:  MUST contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field. They are ignored upon receipt.
	[ MaxLoopCount = 4 ]
	While[ TRUE ]
	{
		NdrUnicodeStringHeader DummyString;
		Switch
		{
			Case DummyString.BufferPtr.ReferentID != 0:
				ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Must be NULL for the Buffer field" ) InvalidField;
		}
	}
	UINT32 DummyLong1 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong2 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong3 = MustBeSetToTable( this, "0" );
	UINT32 DummyLong4 = MustBeSetToTable( this, "0" );
	Switch
	{
		Case OldName.BufferPtr.ReferentID != 0:
			NdrWideString OldNameRef;
	}
	Switch
	{
		Case NewName.BufferPtr.ReferentID != 0:
			NdrWideString NewNameRef;
	}
}

//
//	_NLPR_MODIFIED_COUNT
//	Alignment: 4
//
Struct NRPCNlprModifiedCount
{
	SAMROldLargeInteger ModifiedCount;
}

//
//	_NETLOGON_DELTA_UNION
//	Alignment: NdrAlgin
//
Struct NRPCNetlogonDeltaUnion = SwitchValue.ToString
{
	[ Property.NRPCSwitchValue$[ Property.NRPCNetlogonDeltaEnumCount ] = this.Value.Value ]
	NRPCNetlogonDeltaType SwitchValue;
	Switch
	{
		Case ( Property.NdrEnumValue > 0 ) && ( Property.NdrEnumValue < 22 ):
			[ Property.NRPCSelectedMemberPtr$[ Property.NRPCNetlogonDeltaEnumCount ] = this.ReferentID ]
			NdrPtr pSelectedMember;
	}
}

//
//	_NETLOGON_DELTA_TYPE
//	Alignment: None
//
Struct NRPCNetlogonDeltaType = FormatString("DeltaType = %s", NRPCNetlogonDeltaTypeTable(Value.Value, FALSE))
{
	NdrEnum Value = NRPCNetlogonDeltaTypeTable(this.Value, TRUE);
}

Table NRPCNetlogonDeltaTypeTable( Value, Description )
{
	Switch( Value )
	{
		Case 1: FormatString("AddOrChangeDomain %s", Description? "- Adds or changes a domain Security Account Manager (SAM) account." : "" );
		Case 2: FormatString("AddOrChangeGroup %s", Description? "- Adds or changes a group SAM account." : "" );
		Case 3: FormatString("DeleteGroup %s", Description? "- Deletes a group SAM account." : "" );
		Case 4: FormatString("RenameGroup %s", Description? "- Renames a group SAM account." : "" );
		Case 5: FormatString("AddOrChangeUser %s", Description? "- Adds or changes a user SAM account." : "" );
		Case 6: FormatString("DeleteUser %s", Description? "- Deletes a user SAM account." : "" );
		Case 7: FormatString("RenameUser %s", Description? "- Renames a user SAM account." : "" );
		Case 8: FormatString("ChangeGroupMembership %s", Description? "- Changes a group membership record." : "" );
		Case 9: FormatString("AddOrChangeAlias %s", Description? "- Adds or changes an alias." : "" );
		Case 10: FormatString("DeleteAlias %s", Description? "- Deletes an alias." : "" );
		Case 11: FormatString("RenameAlias %s", Description? "- Renames an alias." : "" );
		Case 12: FormatString("ChangeAliasMembership %s", Description? "- Changes the membership record for an alias." : "" );
		Case 13: FormatString("AddOrChangeLsaPolicy %s", Description? "- Adds or changes an LSA policy." : "" );
		Case 14: FormatString("AddOrChangeLsaTDomain %s", Description? "- Adds or changes a trusted domain account." : "" );
		Case 15: FormatString("DeleteLsaTDomain %s", Description? "- Deletes a trusted domain account." : "" );
		Case 16: FormatString("AddOrChangeLsaAccount %s", Description? "- Adds or changes an LSA user or machine account." : "" );
		Case 17: FormatString("DeleteLsaAccount %s", Description? "- Deletes an LSA user or machine account." : "" );
		Case 18: FormatString("AddOrChangeLsaSecret %s", Description? "- Adds or changes an LSA encrypted data block." : "" );
		Case 19: FormatString("DeleteLsaSecret %s", Description? "- Deletes an LSA encrypted data block." : "" );
		Case 20: FormatString("DeleteGroupByName %s", Description? "- Deletes a group account based on a string name." : "" );
		Case 21: FormatString("DeleteUserByName %s", Description? "- Deletes a user account based on a string name." : "" );
		Case 22: FormatString("SerialNumberSkip %s", Description? "- Updates the database serial number." : "" ); 
		Default: FormatString("Unknow Value(%u)", Value);
	}
}

//
//	_SYNC_STATE
//	Alignment: None
//
Struct NRPCSyncState = FormatString("SyncState = %s", NRPCSyncStateTable(Value.value, FALSE))
{
	NdrEnum Value = NRPCSyncStateTable(this.Value, TRUE);
}

Table NRPCSyncStateTable( Value, Description )
{
	Switch( Value )
	{
		Case 0: FormatString("NormalState %s", Description? "- A state that MUST be used unless the current synchronization is the restart of a full synchronization." : "" );
		Case 1: FormatString("DomainState %s", Description? "- The SyncContext parameter is the domainRID with which to continue." : "" );
		Case 2: FormatString("GroupState %s", Description? "- The SyncContext parameter is the global groupRID with which to continue." : "" );
		Case 3: FormatString("UasBuiltInGroupState %s", Description? "- Not used." : "" );
		Case 4: FormatString("UserState %s", Description? "- The SyncContext parameter is the user RID with which to continue." : "" );
		Case 5: FormatString("GroupMemberState %s", Description? "- The SyncContext parameter is the global groupRID with which to continue." : "" );
		Case 6: FormatString("AliasState %s", Description? "- The SyncContext parameter MUST have a value of 0, indicating synchronization restarts at the first databasealias and that AddOrChangeAlias was the last account change being performed prior to the restart." : "" );
		Case 7: FormatString("AliasMemberState %s", Description? "- The SyncContext parameter MUST have a value of 0, indicating synchronization restarts at the first databasealias and that ChangeAliasMembership was the last account change being performed prior to the restart." : "" );
		Case 8: FormatString("SamDoneState %s", Description? "- The database has finished synchronization." : "");
		Default: FormatString("Unknow Value(%u)", Value);
	}
}

//*********************************************************************
//	2.2.1.6	Domain Trust Structures
//*********************************************************************

//
//	_DOMAIN_NAME_BUFFER
//	Alignment: NdrAlign
//
Struct NRPCDomainNameBuffer = Formatstring( "DomainNameByteCount = %u", DomainNameByteCount )
{
	UINT32 DomainNameByteCount;
	NdrPtr pDomainNames;
	Switch
	{
		Case pDomainNames.ReferentID != 0:
			Struct DomainNames
			{
				NdrConformant Size;
				Switch
				{
					Case Size.MaxCount > 0:
						Struct
						{
							[ Local.DomainNamesOffsetEnd = FrameOffset + Size.MaxCount ]
							While[ ( FrameOffset <= Local.DomainNamesOffsetEnd ) && !(UINT16(FrameData, FrameOffset) == 0) ]
							{
								UnicodeString DomainName;
							}
							UINT16 Terminator;
						}
				}
			}
	}
}

//
//	_DS_DOMAIN_TRUSTSW
//	Alingment: NdrAlign
//
Struct NRPCDsDomainTrustsw = FormatString("DomainGuid = %s", DomainGuid.ToString)
{
	[ Property.NetbiosDomainNamePtr$[ Property.NRPCDsDomainTrustswCount ] = this.ReferentID ]
	NdrPtr pNetbiosDomainName;
	[ Property.DnsDomainNamePtr$[ Property.NRPCDsDomainTrustswCount ] = this.ReferentID ]
	NdrPtr pDnsDomainName;
	UINT32 Flags = FormatString("0x%08X", this)
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case  LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is a member of a forest." : "Domain is NOT a member of a forest.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is directly trusted by the current domain." : "Domain is NOT directly trusted by the current domain.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is the root of a forest." : "Domain is NOT the root of a forest.");
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is the primary domain of the queried server." : "Domain is NOT the primary domain of the queried server.");
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Primary domain is running in native mode." : "Primary domain is NOT running in native mode.");
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain directly trusts the current domain." : "Domain does NOT directly trust the current domain.");
					UINT32 unused0:1 = FormatString( "(%s)", this.ToBitString );
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is MIT Kerberos realm, trusted with RC4 encryption." : "Domain is NOT MIT Kerberos realm.");
					UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Kerberos uses Advanced Encryption Standard (AES) keys to encrypt Kerberos TGTs." : "Kerberos does NOT use Advanced Encryption Standard (AES) keys to encrypt Kerberos TGTs.");
					UINT32 unused1:23 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused1:23 = FormatString( "(%s)", this.ToBitString );									
					UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Kerberos uses Advanced Encryption Standard (AES) keys to encrypt Kerberos TGTs." : "Kerberos does NOT use Advanced Encryption Standard (AES) keys to encrypt Kerberos TGTs.");									
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is MIT Kerberos realm, trusted with RC4 encryption." : "Domain is NOT MIT Kerberos realm.");									
					UINT32 unused0:1 = FormatString( "(%s)", this.ToBitString );									
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain directly trusts the current domain." : "Domain does NOT directly trust the current domain.");									
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Primary domain is running in native mode." : "Primary domain is NOT running in native mode.");									
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is the primary domain of the queried server." : "Domain is NOT the primary domain of the queried server.");									
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is the root of a forest." : "Domain is NOT the root of a forest.");									
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is directly trusted by the current domain." : "Domain is NOT directly trusted by the current domain.");									
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is a member of a forest." : "Domain is NOT a member of a forest.");									
				}
		}
	}
	UINT32 ParentIndex;
	UINT32 TrustType = FormatString("0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case  LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is Windows NT 4.0, or compatible, or earlier." : "Domain is NOT Windows NT 4.0, or compatible, or earlier.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is Windows 2000, or compatible, or Windows XP, Windows Server 2003, Windows Vista, and Windows Server 2008." : "Domain is NOT Windows 2000, or compatible, or Windows XP, Windows Server 2003, Windows Vista, and Windows Server 2008.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is an MIT Kerberos realm." : "Domain is NOT an MIT Kerberos realm.");
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is a Distributed Computing Environment (DCE) realm." : "Domain is NOT a Distributed Computing Environment (DCE) realm.");
					UINT32 unused0:28 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:28 = FormatString( "(%s)", this.ToBitString );									
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is a Distributed Computing Environment (DCE) realm." : "Domain is NOT a Distributed Computing Environment (DCE) realm.");									
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is an MIT Kerberos realm." : "Domain is NOT an MIT Kerberos realm.");									
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is Windows 2000, or compatible, or Windows XP, Windows Server 2003, Windows Vista, and Windows Server 2008." : "Domain is NOT Windows 2000, or compatible, or Windows XP, Windows Server 2003, Windows Vista, and Windows Server 2008.");									
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is Windows NT 4.0, or compatible, or earlier." : "Domain is NOT Windows NT 4.0, or compatible, or earlier.");									
				}
		}
	}
	UINT32 TrustAttributes = FormatString("0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case  LittleEndian:
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link MUST not allow transitivity." : "Trust link allows transitivity.");
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link is valid only for Windows 2000, Windows XP, Windows Server 2003, Windows Vista, and Windows Server 2008 domains." : "Trust link is NOT valid only for Windows 2000, Windows XP, Windows Server 2003, Windows Vista, and Windows Server 2008 domains.");
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link MUST be set for SID filtering of the client domain. For details about SID filtering, see [MS-PAC]." : "");
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link can contain foresttrust information." : "Trust link can NOT contain foresttrust information.");
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link is to either a domain or a forest that is not part of the enterprise network." : "Trust link is to neither a domain nor a forest that is not part of the enterprise network.");
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link is internal to the forest." : "Trust link is NOT internal to the forest.");
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust is to be treated as external for trust boundary purposes." : "Trust is NOT to be treated as external for trust boundary purposes.");
					UINT32 unused0:15 = FormatString( "(%s)", this.ToBitString );
					UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is parent domain." : "Domain is NOT parent domain.");
					UINT32 I:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is root of another forest." : "Domain is root of same forest.");
					UINT32 unused1:8 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:8 = FormatString( "(%s)", this.ToBitString );									
					UINT32 I:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is root of another forest." : "Domain is root of same forest.");									
					UINT32 H:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Domain is parent domain." : "Domain is NOT parent domain.");									
					UINT32 unused1:15 = FormatString( "(%s)", this.ToBitString );									
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust is to be treated as external for trust boundary purposes." : "Trust is NOT to be treated as external for trust boundary purposes.");									
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link is internal to the forest." : "Trust link is NOT internal to the forest.");									
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link is to either a domain or a forest that is not part of the enterprise network." : "Trust link is to neither a domain nor a forest that is not part of the enterprise network.");									
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link can contain foresttrust information." : "Trust link can NOT contain foresttrust information.");									
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link MUST be set for SID filtering of the client domain. For details about SID filtering, see [MS-PAC]." : "");									
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link is valid only for Windows 2000, Windows XP, Windows Server 2003, Windows Vista, and Windows Server 2008 domains." : "Trust link is NOT valid only for Windows 2000, Windows XP, Windows Server 2003, Windows Vista, and Windows Server 2008 domains.");									
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Trust link MUST not allow transitivity." : "Trust link allows transitivity.");
				}
		}					
	}
	[ Property.DomainSidPtr$[ Property.NRPCDsDomainTrustswCount ] = this.ReferentID ]
	NdrPtr pDomainSid;
	MSRPCGuid DomainGuid;
}

Struct NRPCDsDomainTrustswRef = FormatString("NetbiosDomainName = %s, DnsDomainName = %s", NetbiosDomainName? NetbiosDomainName.ToString : "NULL", DnsDomainName? DnsDomainName.ToString : "NULL")
{
	Switch
	{
		Case Property.NetbiosDomainNamePtr$[ Property.NRPCDsDomainTrustswRefCount ] != 0:
			NdrWideString NetbiosDomainName;
	}
	Switch
	{
		Case Property.DnsDomainNamePtr$[ Property.NRPCDsDomainTrustswRefCount ] != 0:
			NdrWideString DnsDomainName;
	}
	Switch
	{
		Case Property.DomainSidPtr$[ Property.NRPCDsDomainTrustswRefCount ] != 0:
			SID( TRUE ) DomainSid;
	}
}

//
//	_NETLOGON_TRUSTED_DOMAIN_ARRAY
//	Alignment: NdrAlign
//
Struct NRPCNetlogonTrustedDomainArray = FormatString("DomainCount = %u", DomainCount)
{
	UINT32 DomainCount;
	NdrPtr pDomains;
	Switch
	{
		Case pDomains.ReferentID != 0:
			Struct Domains = Size.ToString
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NRPCDsDomainTrustswCount = 0 ]
				While [ Property.NRPCDsDomainTrustswCount < Size.MaxCount ]
				{
					[ Property.NRPCDsDomainTrustswCount = Property.NRPCDsDomainTrustswCount + 1 ]
					NRPCDsDomainTrustsw Domain;
				}
				
				[ MaxLoopCount = Size.MaxCount, Property.NRPCDsDomainTrustswRefCount = 0 ]
				While [ Property.NRPCDsDomainTrustswRefCount < Size.MaxCount ]
				{
					[ Property.NRPCDsDomainTrustswRefCount = Property.NRPCDsDomainTrustswRefCount + 1 ]
					NRPCDsDomainTrustswRef DomainRef;
				}
			}
	}
}

//
//	_NL_GENERIC_RPC_DATA
//	Alignment: NdrAlign
//
Struct NRPCNlGenericRpcData = FormatString( "UlongEntryCount = %u, UnicodeStringEntryCount = %u", UlongEntryCount )
{
	UINT32 UlongEntryCount;
	NdrPtr pUlongData;
	UINT32 UnicodeStringEntryCount;
	NdrPtr pUnicodeStringData;
	Switch
	{
		Case pUlongData.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				UINT32 UlongData[ Size.MaxCount ];
			}
	}
	Switch
	{
		Case pUnicodeStringData.ReferentID != 0:
			Struct
			{
				NdrConformant Size;
				[ MaxLoopCount = Size.MaxCount, Property.NdrUnicodeStringHeaderPtrCount = 0 ]
				While[ TRUE ]
				{
					NdrUnicodeStringHeader UnicodeStringData;
				}
				[ MaxLoopCount = Property.NdrUnicodeStringHeaderPtrCount ]
				While[ TRUE ]
				{
					NdrWideString UnicodeStringDataRef;
				}
			}
	}
}

//*********************************************************************
//	2.2.1.7	Administrative Services Structures
//*********************************************************************

//
//	_NETLOGON_CONTROL_DATA_INFORMATION
//	Alignment: NdrAlign
//
Struct NRPCNetlogonControlDataInformation = FormatString("SwitchValue = %u", SwitchValue)
{
	UINT32 SwitchValue;
	NdrAlign Pad;
	Switch( SwitchValue )
	{
		Case 1:
		Case 2:
		Case 3:
		Case 4:
		Case 7:
		Case 11:
		Case 12:
		Case 65532:
		Case 65533:
		Case 65535:
			Struct {};
		Case 5:
		Case 6:
		Case 9:
		Case 10:
			NdrWideStringPtr TrustedDomainNamePtr;
		Case 65534:
			UINT32 DebugFlag;
		Case 8:
			NdrWideStringPtr UserNamePtr;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	_NETLOGON_CONTROL_QUERY_INFORMATION
//	Alignment: NdrAlign
//
Struct NRPCNetlogonControlQueryInformation = FormatString("QueryLevel = %s", NRPCQueryLevelTable( SwitchValue ) )
{
	UINT32 SwitchValue = NRPCQueryLevelTable( this );
	Switch( SwitchValue )
	{
		Case 1:
			Struct
			{
				NdrPtr pNetlogonInfo1;
				Switch
				{	
					Case pNetlogonInfo1.ReferentID != 0:
						NRPCNetlogonInfo1 NetlogonInfo1;
				}
			}
		Case 2:
			Struct
			{
				NdrPtr pNetlogonInfo2;
				Switch
				{	
					Case pNetlogonInfo2.ReferentID != 0:
						NRPCNetlogonInfo2 NetlogonInfo2;
				}
			}
		Case 3:
			Struct
			{
				NdrPtr pNetlogonInfo3;
				Switch
				{	
					Case pNetlogonInfo3.ReferentID != 0:
						NRPCNetlogonInfo3 NetlogonInfo3;
				}
			}
		Case 4:
			Struct
			{
				NdrPtr pNetlogonInfo4;
				Switch
				{	
					Case pNetlogonInfo4.ReferentID != 0:
						NRPCNetlogonInfo4 NetlogonInfo4;
				}
			}
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	_NETLOGON_INFO_1
//	Alignment: 4
//
Struct NRPCNetlogonInfo1 = FormatString( "Netlog1Flags = %s, ConnectionStatus = %s", Netlog1Flags.ToString, WinErrorCodeNameTable( Netlog1PdcConnectionStatus ) )
{
	UINT32 Netlog1Flags = FormatString("0x%0X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian: 
				Struct
				{
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "One of the databases is out-of-date, and replication is needed." : "No databases is out-of-date." );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "At least one of the databases is currently being replicated." : "No databases is currently being replicated." );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "At least one of the databases requires a full synchronization update." : "No databases is currently being replicated." );
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "At least one database record requires an update." : "No database record requires an update." );
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC used on the secure channel is reachable over TCP/IP." : "The DC does not have a known IP address." );
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC used on the secure channel runs the Windows Time Service." : "The DC NOT used on the secure channel runs the Windows Time Service.." );
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The last update of one of the DNS records on the DC failed." : "The last update of one of the DNS records on the DC succeed." );
					UINT32 unused0:25 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:25 = FormatString( "(%s)", this.ToBitString );
					UINT32 G:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The last update of one of the DNS records on the DC failed." : "The last update of one of the DNS records on the DC succeed." );
					UINT32 F:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC used on the secure channel runs the Windows Time Service." : "The DC used on the secure channel does NOT run the Windows Time Service.." );
					UINT32 E:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC used on the secure channel is reachable over TCP/IP." : "The DC does not have a known IP address." );
					UINT32 D:1 = FormatString( "      (%s) %s", this.ToBitString, this? "At least one database record requires an update." : "No database record requires an update." );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "At least one of the databases requires a full synchronization update." : "No databases is currently being replicated." );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "At least one of the databases is currently being replicated." : "No databases is currently being replicated." );
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "One of the databases is out-of-date, and replication is needed." : "No databases is out-of-date." );
				}
		}
	}
	UINT32 Netlog1PdcConnectionStatus = WinErrorCodeTable( this );
}

//
//	_NETLOGON_INFO_2
//	Alignment: NdrAlign
//
Struct NRPCNetlogonInfo2 = FormatString( "Netlog1Flags = %s, ConnectionStatus = %s", Netlog2Flags.ToString, WinErrorCodeNameTable( Netlog2PdcConnectionStatus ) )
{
	UINT32 Netlog2Flags = FormatString( "0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian: 
				Struct
				{
					UINT32 unused0:4 = FormatString( "(%s)", this.ToBitString );
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC used on the secure channel has an IP address (either IPv4 or IPv6)." : "The DC used on the secure channel does NOT have an IP address (either IPv4 or IPv6)." );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC used on the secure channel runs the Windows Time Service." : "The DC used on the secure channel does NOT run the Windows Time Service." );
					UINT32 unused1:1 = FormatString( "(%s)", this.ToBitString );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The trust verification status was returned in the Netlog2PdcConnectionStatus field." : "No trust verification status was returned." );
					UINT32 unused2:24 = FormatString( "(%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 unused0:24 = FormatString( "(%s)", this.ToBitString );
					UINT32 C:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The trust verification status was returned in the Netlog2PdcConnectionStatus field." : "No trust verification status was returned." );
					UINT32 unused1:1 = FormatString( "(%s)", this.ToBitString );
					UINT32 B:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC used on the secure channel runs the Windows Time Service." : "The DC used on the secure channel does NOT run the Windows Time Service." );
					UINT32 A:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The DC used on the secure channel has an IP address (either IPv4 or IPv6)." : "The DC used on the secure channel does NOT have an IP address (either IPv4 or IPv6)." );
					UINT32 unused2:4 = FormatString( "(%s)", this.ToBitString );
				}
		}
	}
	UINT32 Netlog2PdcConnectionStatus = WinErrorCodeTable( this );
	NdrPtr pNetlog2TrustedDcName;
	UINT32 Netlog2TcConnection = WinErrorCodeTable( this );
	Switch( Property.MSRPCNdr64 )
	{
		Case TRUE: Align8 NDR64TrailingPad;
	}
	Switch
	{
		Case pNetlog2TrustedDcName.ReferentID != 0:
			NdrWideString Netlog2TrustedDcName;
	}
}

//
//	_NETLOGON_INFO_3
//	Alignment: 4
//
Struct NRPCNetlogonInfo3 = FormatString("LogonAttempts = %u", Netlog3LogonAttempts)
{
	UINT32 Netlog3Flags = MUSTBeSetToTable(this, "0");
	UINT32 Netlog3LogonAttempts;
	UINT32 Netlog3Reserved1 = MUSTBeSetToTable(this, "0");
	UINT32 Netlog3Reserved2 = MUSTBeSetToTable(this, "0");
	UINT32 Netlog3Reserved3 = MUSTBeSetToTable(this, "0");
	UINT32 Netlog3Reserved4 = MUSTBeSetToTable(this, "0");
	UINT32 Netlog3Reserved5 = MUSTBeSetToTable(this, "0");
}

//
//	_NETLOGON_INFO_4
//	Alignment: NdrAlign
//
Struct NRPCNetlogonInfo4 = FormatString( "TrustedDcName = %s, TrustedDomainName = %s", Netlog4TrustedDcName? Netlog4TrustedDcName.ToString : "NULL", Netlog4TrustedDomainName? Netlog4TrustedDomainName.ToString : "NULL" )
{
	NdrPtr pNetlog4TrustedDcName;
	NdrPtr pNetlog4TrustedDomainName;
	Switch
	{
		Case pNetlog4TrustedDcName.ReferentID != 0:
			NdrWideString Netlog4TrustedDcName;
	}
	Switch
	
	{
		Case pNetlog4TrustedDomainName.ReferentID != 0:
			NdrWideString Netlog4TrustedDomainName;
	}
}

//*********************************************************************
//	2.2.1.8	Obsolete Structures
//*********************************************************************

//
//	_NETLOGON_VALIDATION_UAS_INFO
//	Alignment: None
//
Struct NRPCNetlogonValidationUasInfo = FormatString("%s%s%s%s", Usrlog1EffName? FormatString("EffName = %s ", Usrlog1EffName.ToString): "",
																Usrlog1Computer? FormatString("Computer = %s ", Usrlog1Computer.ToString): "",
																Usrlog1Domain? FormatString("Domain = %s ", Usrlog1Domain.ToString): "",
																Usrlog1ScriptPath? FormatString("ScriptPath = %s ", Usrlog1ScriptPath.ToString): "" )
{
	NdrPtr Usrlog1EffNamePtr;
	UINT32 Usrlog1Priv;
	UINT32 Usrlog1AuthFlags;
	UINT32 Usrlog1NumLogons;
	UINT32 Usrlog1BadPwCount;
	UINT32 Usrlog1LastLogon;
	UINT32 Usrlog1LastLogoff;
	UINT32 Usrlog1LogoffTime;
	UINT32 Usrlog1KickoffTime;
	UINT32 Usrlog1PasswordAge;
	UINT32 Usrlog1PwCanChange;
	UINT32 Usrlog1PwMustChange;
	NdrPtr Usrlog1ComputerPtr;
	NdrPtr Usrlog1DomainPtr;
	NdrPtr Usrlog1ScriptPathPtr;
	UINT32 Usrlog1Reserved1;
	Switch( Property.MSRPCNdr64 )
	{
		Case TRUE: Align8 NDR64TrailingPad;
	}
	Switch
	{
		Case Usrlog1EffNamePtr.ReferentID != 0:
			NdrWideString Usrlog1EffName;
	}
	Switch
	{
		Case Usrlog1ScriptPathPtr.ReferentID != 0:
			NdrWideString Usrlog1Computer;
	}
	Switch
	{
		Case Usrlog1ComputerPtr.ReferentID != 0:
			NdrWideString Usrlog1Domain;
	}
	Switch
	{
		Case Usrlog1DomainPtr.ReferentID != 0:
			NdrWideString Usrlog1ScriptPath;
	}
}

//
//	_NETLOGON_LOGOFF_UAS_INFO
//	Alignment: 4
//
Struct NRPCNetlogonLogoffUasInfo = FormatString( "Duration = %u, LogonCount = %u", Duration, LogonCount )
{
	UINT32 Duration;
	UINT16 LogonCount;
	Switch( Property.MSRPCNdr64 )
	{
		Case TRUE: Align4 NDR64TrailingPad;
	}
}

//
//	_UAS_INFO_0
//	Alignmen: 4
//
Struct NRPCUasInfo0 = FormatString( "ComputerName = %s", ComputerName )
{
	AsciiString(16) ComputerName;
	UINT32 TimeCreated;
	UINT32 SerialNumber;
}

//
//	LOGONGetCapabilities
//	Alignmen: 4
//
struct NRPCLogonGetCapabilities
{
	UINT32 SwitchValue;
	Switch( SwitchValue )
	{
		Case 1:
			NRPCNegotiateFlags ServerCapabilities;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "NRPC", "Unknown Union Switch Value" ) Unknown;
	}
}


