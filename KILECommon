//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Kerberos Network Authentication Service v5
//#
//#  Details:                
//#
//#  Public References:      RFC 4120 (1510) Kerberos v5
//#                          RFC 3961 Encryption & Checksums
//#                          RFC 4556 Public Key Cryptography for Initial Authentication in Kerberos (PKINIT)
//#  Microsoft References:   [MS-KILE]: Kerberos Protocol Extensions (15.0)
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 3/9/2009
//#                          Minor, 6/4/2010
//#
//####

//
// 2.2.1 KERB-ERROR-DATA
//
[RegisterBefore( KrbError.EData.EData, KILEKerbPaPacRequest, 37 )]
Struct KILEKerbPaPacRequest
{
	AsnBerInfo SequenceHeader;
	[DataFieldFrameLength = FrameOffset + LengthValue]
	AsnBerInfo Tag1;
	AsnBerInteger DataType;
	switch 
	{
		case (FrameLength > FrameOffset) && ( UINT8( FrameData, Offset ) == 0xA2):
		struct 
		{
			AsnBerInfo Tag2;
			AsnBerOctetString DataValue;
		}
	}
}

Table KILEFlagsTable (Type) {
	switch(Type) {
		case 0x0: "Full token";
		case 0x1: "UAC restricted token";
		default : FormatString("Unknown Flags Type (%d)", Type);
	}
}

Table KILETokenILTable (Type) {
	switch(Type) {
		case 0x00000000: "Untrusted";
		case 0x00001000: "Low";
		case 0x00002000: "Medium";
		case 0x00003000: "High";
		case 0x00004000: "System";
		case 0x00005000: "Protected process";
		default : FormatString("Unknown TokenIL Type (%d)", Type);
	}
}


//
// 2.2.2 KERB-PA-PAC-REQUEST
//
Struct KILEKrbPaPacRequest
{
	AsnBerInfo SequenceHeader;
	AsnBerInfo Tag0;
	AsnBerBoolean IncludePac;
}

//
// 2.2.3 LSAP_TOKEN_INFO_INTEGRITY
//
Struct KILELsapTokenInfoIntegrity
{
	UINT32 Flags=KILEFlagsTable(this);
	UINT32 TokenIL=KILETokenILTable(this);
	AsciiString(32) MachineID;
}

//
// 2.2.4 KERB-AD-RESTRICTION-ENTRY
//
Struct KILEKrbAdRestrictionEntry
{
	AsnBerInfo SequenceHeader;
	AsnBerInfo Tag0;
	AsnBerInteger RestrictionType;
	AsnBerInfo Tag1;
	AsnBerInfo OctetStringHeader;
	KILELsapTokenInfoIntegrity Restriction;
}

//
// 2.2.5 Supported Encryption Types Bit Flags
//
[DataTypeByteOrder=LittleEndian]
Struct KILESupportedEncryptionTypesBitFlags
{
	UINT32 SupportedEncryptionTypesBitFlags
	{
		UINT32 DesCbcCrc:1 = FormatString("          (%s) %s", this.ToBitString, this? "DES-CBC-CRC is supported": "DES-CBC-CRC is not supported");
		UINT32 DesCbcMd5:1 = FormatString("          (%s) %s", this.ToBitString, this? "DES-CBC-MD5 is supported": "DES-CBC-MD5 is not supported");
		UINT32 Rc4Hmac:1 = FormatString("            (%s) %s", this.ToBitString, this? "RC4-HMAC is supported": "RC4-HMAC is not supported");
		UINT32 Aes128CtsHmacSha196:1 = FormatString("(%s) %s", this.ToBitString, this? "AES128-CTS-HMAC-SHA1-96 is supported": "AES128-CTS-HMAC-SHA1-96 is not supported");
		UINT32 Aes256CtsHmacSha196:1 = FormatString("(%s) %s", this.ToBitString, this? "AES256-CTS-HMAC-SHA1-96 is supported": "AES256-CTS-HMAC-SHA1-96 is not supported");
		UINT32 Reserved:27 = FormatString("           (%s)", this.ToBitString);
	}
}