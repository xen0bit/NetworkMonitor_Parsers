//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  File Replication Service
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-FRS1]: File Replication Service Protocol Specification (5.0)
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 3/2/2010
//#
//####

//******************************************************************************************
//FRS1 PROTOCOL
//******************************************************************************************
[Frs1Summary = "", ReturnValue = 0]
Protocol FRS1 = FormatString( "%s%s%s%s%s", Frs1MethodTable( Property.MSRPCIfUuid, Property.MSRPCOpnum ), Property.MSRPCPType ? " Response" : " Request", Frs1Summary != "" ? ", " + Frs1Summary : "", Property.MSRPCPType ? ", " + "Status = " + NtStatusTable( ReturnValue ) : "", Property.ParserError ? ", " + Property.ParserErrorMessage : Property.ParserErrorMessage )
{
	Switch ( Property.MSRPCIfUuid )
	{
		Case "{D049B186-814F-11D1-9A3C-00C04FC9B232}"://FRS1API
		_struct Frs1API
		{
			Switch( Property.MSRPCOpnum )
			{		
				//	not used on wire, Reserved for local use. 
				/*           
				Case 0x0002:
				_Struct Frs1ApiRpcStartDemotionW {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										NdrWIDESTRINGPtr ReplicaSetName;
									}
							}

						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}

				}

				Case 0x0003:
				_Struct Frs1ApiRpcCommitDemotionW {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}

				}
				*/

				Case 0x0004:
				_Struct Frs1ApiRpcSetDsPollingIntervalW {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = Frs1UseShortIntervalTable(UseShortInterval) +", " + Frs1ShortIntervalTable(ShortInterval) ]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										UINT32 UseShortInterval = Frs1UseShortIntervalTable(this);
										UINT32 LongInterval;
										UINT32 ShortInterval = Frs1ShortIntervalTable(this);
									}
							}

						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}

				}

				Case 0x0005:
				_Struct Frs1ApiRpcGetDsPollingIntervalW {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
								Struct
								{
									UINT32 Interval;
									UINT32 LongInterval;
									UINT32 ShortInterval;
									[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
								}
							}
						}
					}

				}

				Case 0x0007:
				_Struct Frs1ApiRpcInfoW {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										UINT32 BlobSize;
										NdrPtr Pointer;
										Switch {
											Case Pointer.ReferentID > 0: 
											_struct
											{
												NdrConformant ConformantArray;
												switch
												{
													case ConformantArray.maxcount>0:	BLOB( ConformantArray.maxcount ) Blob;
												}
											}
										}                            
									}
							}

						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										NdrPtr Pointer;
										Switch {
											Case Pointer.ReferentID > 0: 
											_struct
											{
												NdrConformant ConformantArray;
												switch
												{
													case ConformantArray.maxcount>0:	BLOB( ConformantArray.maxcount ) Blob;
												}
											}
										}
										Align4	Pad;
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}

				}

				Case 0x0008:
				_Struct Frs1ApiRpcIsPathReplicated {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = Frs1ReplicaSetTypeOfInterest(ReplicaSetTypeOfInterest)]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										NdrWIDESTRINGPtr Path;
										Align4 Pad;
										UINT32 ReplicaSetTypeOfInterest = Frs1ReplicaSetTypeOfInterest(This);
									}
							}

						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										UINT32 Replicated = Frs1ReplicatedTable(this);
										UINT32 Primary = Frs1PrimaryTable(this);
										UINT32 Root = Frs1RootTable(this);
										GUID( TRUE ) ReplicaSetGuid;
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}

				}

				Case 0x0009:
				_Struct Frs1ApiRpcWriterCommand {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = Frs1WriteCommandTable(Command)]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										UINT32	Command = Frs1WriteCommandTable(This);
									}
							}

						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}

				}

				Case 0x000A:
				_Struct Frs1ApiRpcForceReplication {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										NdrPtr ReplicaSetGuidPtr;
										Switch {
											Case ReplicaSetGuidPtr.ReferentID > 0: GUID( TRUE ) ReplicaSetGuid;
										}
										NdrPtr CxtionGuidPtr;
										Switch {
											Case CxtionGuidPtr.ReferentID > 0: GUID( TRUE ) CxtionGuid;
										}
										NdrWIDESTRINGPtr ReplicaSetName;
										NdrWIDESTRINGPtr PartnerDnsName;
									}
							}
						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}

				}

				Case 0x0000:
				Case 0x0001:
				Case 0x0002:
				Case 0x0003:
				Case 0x0006:
				Struct NotUsedOnWire
				{
					Switch (property.MSRPCPType)
					{
						Case 0x00:// REQUEST
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						Struct Request 
						{
							ReportParserWarning("FRS1", "Invalid frs1 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}

						Case 0x02:// RESPONSE
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						Struct Response
						{
							ReportParserWarning("FRS1", "Invalid frs1 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
					}
				}

				Default:
					ReportParserError(ParserErrorProtocolClassWindows, "FRS1", FormatString( "Unknown FRS1API Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
			}
		}

		Case "{F5CC59B4-4264-101A-8C59-08002B2F8426}"://FRS1RPC
		_Struct Frs1RPC
		{
			Switch( Property.MSRPCOpnum )
			{
				Case 0x0000:
				_Struct Frs1RpcSendCommPkt {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										CommPacket CommPkt;
									}
							}

						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}

				Case 0x0001:
				_Struct Frs1RpcVerifyPromotionParent {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										NdrWIDESTRINGPtr ParentAccount;
										NdrWIDESTRINGPtr ParentPassword;
										NdrWIDESTRINGPtr ReplicaSetName;
										NdrWIDESTRINGPtr ReplicaSetType;
										Align4 Pad;
										UINT32 PartnerAuthLevel;
										UINT32 GuidSize;
										
									}
							}

						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}

				Case 0x0002:
				_Struct Frs1RpcStartPromotionParent {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										NdrWIDESTRINGPtr ParentAccount;
										NdrWIDESTRINGPtr ParentPassword;
										NdrWIDESTRINGPtr ReplicaSetName;
										NdrWIDESTRINGPtr ReplicaSetType;
										NdrWIDESTRINGPtr CxtionName;
										NdrWIDESTRINGPtr PartnerName;
										NdrWIDESTRINGPtr PartnerPrincName;
										Align4 Pad;
										UINT32 PartnerAuthLevel = Frs1RpcStartPromotionParentPartnerAuthLevelTable(this);
										UINT32 GuidSize;
										NdrPtr CxtionGuidPtr;
										Switch {
											Case CxtionGuidPtr.ReferentID > 0: 
											_struct
											{
												NdrConformant	Size;
												switch
												{
													case Size.maxcount>0:	Blob(Size.maxcount) CxtionGuid;
												}
											}
										}
										NdrPtr PartnerGuidPtr;
										Switch {
											Case PartnerGuidPtr.ReferentID > 0: 
											_struct
											{
												NdrConformant	Size;
												switch
												{
													case Size.maxcount>0:	Blob(Size.maxcount) PartnerGuid;
												}
											}
										}
										NdrPtr ParentGuidPtr;
										Switch {
											Case ParentGuidPtr.ReferentID > 0: 
											_struct
											{
												NdrConformant	Size;
												switch
												{
													case Size.maxcount>0:	Blob(Size.maxcount) ParentGuid;
												}
											}
										}
									}
							}

						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										NdrPtr ParentGuidPtr;
										Switch {
											Case ParentGuidPtr.ReferentID > 0: 
											_struct
											{
												NdrConformant	Size;
												switch
												{
													case Size.maxcount>0:	Blob(Size.maxcount) ParentGuid;
												}
											}
										}
										Align4	Pad;
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}

				Case 0x0003:
				_Struct Frs1NOP {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}

				//	not used on wire, Reserved for local use. 
				/*
				Case 0x0004:
				_Struct Frs1EnumerateReplicaPathnames {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}

				Case 0x0005:
				_Struct Frs1FreeReplicaPathnames {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}

				Case 0x0006:
				_Struct Frs1PrepareForBackup {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}

				Case 0x0007:
				_Struct Frs1BackupComplete {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}


				Case 0x0008:
				_Struct Frs1PrepareForRestore {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}


				Case 0x0009:
				_Struct Frs1RestoreComplete {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}

				Case 0x000A:
				_Struct Frs1RpcVerifyPromotionParentEx {
					Switch( Property.MSRPCPType )
					{
						Case 0x00:
						[Frs1Summary = ""]
						_Struct Request
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										NdrWIDESTRINGPtr ParentAccount;
										NdrWIDESTRINGPtr ParentPassword;
										NdrWIDESTRINGPtr ReplicaSetName;
										NdrWIDESTRINGPtr ReplicaSetType;
										NdrWIDESTRINGPtr CxtionName;
										NdrWIDESTRINGPtr PartnerName;
										NdrWIDESTRINGPtr PartnerPrincName;
										NdrWIDESTRINGPtr ParentPrincName;
										Align4 Pad;
										UINT32 PartnerAuthLevel;
										UINT32 GuidSize;
									}
							}

						}

						Case 0x02:
						[Frs1Summary = ""]
						_Struct Response
						{
							Switch {
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( Property.MSRPCStubDataLen ) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									struct
									{
										[ReturnValue = ReturnValue] UINT32 ReturnValue = NtStatusTable( this );
									}
							}

						}
					}
				}
				*/
				
				Case 0x0004:
				Case 0x0005:
				Case 0x0006:
				Case 0x0007:
				Case 0x0008:
				Case 0x0009:
				Case 0x000A:
				Struct NotUsedOnWire
				{
					Switch (property.MSRPCPType)
					{
						Case 0x00:// REQUEST
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						Struct Request 
						{
							ReportParserWarning("FRS1", "Invalid frs1 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
						
						Case 0x02:// RESPONSE
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						Struct Response
						{
							ReportParserWarning("FRS1", "Invalid frs1 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
					}
				}

				Default:
					ReportParserError(ParserErrorProtocolClassWindows, "FRS1", FormatString( "Unknown FRS1RPC Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
			}
		}
	}
}

//******************************************************************************************
//FRS1 TABLES
//******************************************************************************************
Table Frs1MethodTable( UUID, Opnum )
{
	Switch
	{
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x0000: "Opnum0NotUsedOnWire";
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x0001: "Opnum1NotUsedOnWire";
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x0002: "Opnum2NotUsedOnWire";
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x0003: "Opnum3NotUsedOnWire";
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x0004: "Frs1ApiRpcSetDsPollingIntervalW";
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x0005: "Frs1ApiRpcGetDsPollingIntervalW";
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x0006: "Opnum6NotUsedOnWire";
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x0007: "Frs1ApiRpcInfoW";
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x0008: "Frs1ApiRpcIsPathReplicated";
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x0009: "Frs1ApiRpcWriterCommand";
		Case UUID == "{D049B186-814F-11D1-9A3C-00C04FC9B232}" && Opnum == 0x000A: "Frs1ApiRpcForceReplication";

		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x0000: "Frs1RpcSendCommPkt";
		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x0001: "Frs1RpcVerifyPromotionParent";
		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x0002: "Frs1RpcStartPromotionParent";
		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x0003: "Frs1NOP";
		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x0004: "Opnum4NotUsedOnWire";
		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x0005: "Opnum5NotUsedOnWire";
		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x0006: "Opnum6NotUsedOnWire";
		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x0007: "Opnum7NotUsedOnWire";
		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x0008: "Opnum8NotUsedOnWire";
		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x0009: "Opnum9NotUsedOnWire";
		Case UUID == "{F5CC59B4-4264-101A-8C59-08002B2F8426}" && Opnum == 0x000A: "Opnum10NotUsedOnWire";
	}
}

Table Frs1WriteCommandTable( Command )
{
	switch( Command )
	{
		case 0x00000001: "Prevent the FRS1 from installing new files";
		case 0x00000002: "Allow the FRS1 to install new files";
		default: "Unknown Command";
	}
}


Table Frs1UseShortIntervalTable( UserShortInterval )
{
	switch( UserShortInterval )
	{
		case 0x00000000: "Value in LongInterval is used";
		default: "Value in ShortInterval is used";
	}
}

Table Frs1ShortIntervalTable( ShortInterval )
{
	switch( ShortInterval )
	{
		case 0x000004DC: "The user has not been authenticated";
		case 0x0000001F: "The required access check registry value not present";
		case 0x00000057: "The parameter is incorrect";
		default: "Unknown vaule";
	}
}

Table Frs1ReplicaSetTypeOfInterest( ReplicaSetTypeOfInterest )
{
	switch(ReplicaSetTypeOfInterest)
	{
		case 0x00000000: "Indicates any replica set";
		case 0x00000001: "Indicates the replica set for the enterprise system volume";
		case 0x00000002: "Indicates the replica set for the domain SYSVOL";
		case 0x00000003: "Indicates the replica set for the distributed file system";
		case 0x00000004: "Indicates none of the previous types";
		default: "Unknown replica set type";
	}
}

Table Frs1ReplicatedTable( Replicated )
{
	switch(Replicated)
	{
		case 0x00000000: "The replica set is not replicated by the domain controller";
		case 0x00000001: "The replica set is replicated by the domain controller";
		default: "Unknown value";
	}
}

Table Frs1PrimaryTable( Primary )
{
	switch(Primary)
	{
		case 0x00000000: "Current computer is not the primary computer";
		case 0x00000001: "Current computer is the primary computer";
		case 0x00000002: "Matching replica set does not have a primary computer";
		default: "Unknown value";
	}
}

Table Frs1RootTable( Root )
{
	switch(Root)
	{
		case 0x00000000: "The Path parameter is not the replica tree root for the matching replica set";
		case 0x00000001: "The Path parameter is the replica tree root for the matching replica set";
		default: "Unknown value";
	}
}

Table Frs1RpcStartPromotionParentPartnerAuthLevelTable(value)
{
	switch(value)
	{
		case 0x00000000: "Encrypted Kerberos";
		case 0x00000001: "No authentication";
		default: "Unknown value";
	}
}

Table Frs1CommPacketMinorTable(value)
{
	switch(value)
	{
		case 0x00000000: "This is the first version";
		case 0x00000001: "Supports MD5";
		case 0x00000002: "Supports trigger schedule";
		case 0x00000003: "Supports change order record extension";
		case 0x00000004: "Forces the replica number fields in a change order to be an unsigned long instead of an unsigned long PTR for 3264 bit interoperation";
		case 0x00000005: "Supports change order extension COMM_CO_EXTENSION_2 when replication partner is running FRS1 minor version 4 or later";
		case 0x00000006: "No new capabilities";
		case 0x00000007: "No new capabilities";
		case 0x00000008: "No new capabilities";
		case 0x00000009: "No new capabilities";
		default: "Unknown value";
	}
}

Table Frs1ChangeOrderCommandStatusTable(value)
{
	switch(value)
	{
		case 0x00000000: "This change order is entered in the log";
		case 0x00000001: "Allocating staging file space for a local change order";
		case 0x00000002: "This local change orderstaging file copy has started";
		case 0x00000003: "This local change orderstaging file is complete";
		case 0x00000004: "Waiting to retry local change orderstaging file generation";
		case 0x00000005: "Allocated staging file space for a remote change order";
		case 0x00000006: "This remote change orderstaging file fetch has started";
		case 0x00000007: "This remote change orderstaging file fetch is complete";
		case 0x00000008: "Waiting to retry the fetch of the staging file for the remote change order";
		case 0x00000009: "File install requested";
		case 0x0000000A: "File install has started";
		case 0x0000000B: "File install is complete";
		case 0x0000000C: "File install is waiting to try again";
		case 0x0000000D: "File install is retrying";
		case 0x0000000E: "File install rename is retrying";
		case 0x0000000F: "File install delete is retrying";
		case 0x00000013: "This change order is being recycled to perform a folder enumeration";
		case 0x00000014: "Request outbound propagation";
		case 0x00000015: "Request was accepted and is now in the outbound log";
		case 0x00000016: "Database state update has started";
		case 0x00000017: "Database state update has completed, and FRS1 is now freeing the change order";
		case 0x00000018: "This change order is being aborted";
		default: "Unknown value";
	}
}

Table Frs1ChangeOrderCommandLocationCmdFileLocationCommandTable(value)
{
	switch(value)
	{
		case 0x0: "Create a file or folder";
		case 0x1: "Delete a file or folder";
		case 0x2: "Rename a file or folder from a path outside the replica tree to a path inside the replica tree on the same volume";
		case 0x3: "Rename a file or folder into the replica set after a CO_LOCATION_MOVEOUT";
		case 0x4: "Rename a file or folder from a path inside the replica tree to a path outside the replica tree on the same volume";
		case 0x5: "Rename a file or folder from one replica tree to another replica tree on the same volume";
		case 0x6: "Rename a file or folder from one folder to another folder in the same replica tree";
		case 0x7: "No command";
		default: "Unknown value";
	}
}

Table Frs1DataExtensionPrefixTypeTable(value)
{
	switch(value)
	{
		case 0x00000000: "Terminates a data extension record. MUST NOT be used";
		case 0x00000001: "Data checksum record using an MD5 hash";
		case 0x00000002: "Data retry time-out record";
		default: "Unknown value";
	}
}

Table Frs1ChangeOrderRecordExtensionMajorTable(value)
{
	switch(value)
	{
		case 0x0000: "CO_RECORD_EXTENSION_VERSION_WIN2K - Version 0 of CHANGE_ORDER_RECORD_EXTENSION";
		case 0x0001: "CO_RECORD_EXTENSION_VERSION_1 - Version 1 of CHANGE_ORDER_RECORD_EXTENSION";
		default: "Unknown value";
	}
}

Table Frs1StageHeaderStructMinorTable(value)
{
	switch(value)
	{
		case 0x00000000: "NTFRS_STAGE_MINOR_0 - Minor version is 0.This value MUST NOT be used.";
		case 0x00000001: "NTFRS_STAGE_MINOR_1 - Minor version is 1.ChangeOrder Record extension added to stage file.";
		case 0x00000002: "NTFRS_STAGE_MINOR_2 - Minor version is 2.Compression GUID added to stage file.";
		case 0x00000003: "NTFRS_STAGE_MINOR_3 - Minor version is 3.Reparse Point data added to stage file.";
	}
}

Table Frs1CommCommandDataTable(value)
{
	switch(value)
	{
		case 0x00000218: "To send a remote change order to a downstream partner";
		case 0x00000238: "To transmit a staging file to a downstream partner";
		case 0x00000250: "To inform the upstream partner that processing the remote change order is complete. ";
		case 0x00000246: "To inform the downstream partner that the staging file data cannot be sent";
		case 0x00000244: "To inform the downstream partner that the request for the staging file data cannot be fulfilled at this time and that the request should be retried at a later time";
		case 0x00000121: "To inform the upstream partner that a Join operation is needed";
		case 0x00000122: "To inform the downstream partner that a Join operation is starting";
		case 0x00000130: "To send a version vector to an upstream partner";
		case 0x00000128: "To inform the downstream partner that the Join is successful";
		case 0x00000148: "To inform an upstream partner on completion of a version vector join (vvjoin) over a volatile connection. ";
		case 0x00000136: "To inform the downstream partner that all change orders were sent out during initial sync";
		case 0x00000228: "To request staging data from an upstream partner";
		default: "Unknown value";
	}
}

//
//	COMM_PACKET
//	Align:	4
//
Struct CommPacket
{
	UINT32 Major;
	UINT32 Minor = Frs1CommPacketMinorTable(this);
	UINT32 CsId;
	UINT32 MemLen;
	UINT32 PktLen;
	UINT32 UpkLen;
	NdrPtr Point;
	Switch{
		Case Point.ReferentID > 0:
			_Struct SetofCommPacketElements 
			{
				NdrConformant ConformantArray;
				Switch {
					Case ConformantArray.maxcount > 0:
						Struct CommPackets
						{
							Frs1CommBopStruct			CommBop;
							Frs1CommCommandStruct		CommCommand;
							Frs1CommToStruct				CommTo;
							Frs1CommFromStruct			CommFrom;
							Frs1CommReplicaStruct		CommReplica;
							Frs1CommCxtionStruct			CommCxtion;
							Frs1CommJoinGuidStruct		CommJoinGuid;
							Frs1CommLastJoinTimeStruct	CommLastJoinTime;
							While[!(UINT16(FrameData, Offset) == 0x13)]
							{
								switch(UINT16(FrameData, Offset))
								{
									case 0x0007: Frs1CommVvectorStruct				CommVvector;
									case 0x0011: Frs1CommJoinTimeStruct				CommJoinTime;
									case 0x0014: Frs1CommReplicaVersionGuidStruct	CommReplicaVersionGuid;
									case 0x0018: Frs1CommCompressionGuidStruct		CommCompressionGuid;
									case 0x0009: Frs1CommBlockStruct				CommBlock;
									case 0x000A: Frs1CommBlockSizeStruct			CommBlockSize;
									case 0x000B: Frs1CommFileSizeStruct				CommFileSize;
									case 0x000C: Frs1CommFileOffsetStruct			CommFileOffset;
									case 0x000E: Frs1CommGvsnStruct					CommGvsn;
									case 0x000F: Frs1CommCoGuidStruct				CommCoGuid;
									case 0x0010: Frs1CommCoSequenceNumberStruct		CommCoSequenceNumber;
									case 0x000D: Frs1CommRemoteCoStruct				CommRemoteCo;
									case 0x0016: Frs1CommCoExtWin2kStruct			CommCoExtWin2k;
									case 0x0017: Frs1CommCoExtension2Struct			CommCoExtension2;
								}
							}
							Frs1CommEopStruct			CommEop;
						}
				}
			}
		}
}

Struct GVSN
{
	UINT64 VSN;
	GUID(true) GUID;
}

//
//CHANGE_ORDER_COMMAND
//
Struct Frs1ChangeOrderCommandStruct
{
	UINT32 SequenceNumber;
	UINT32 Flags
	{
		UINT32 CoFlagAbortCo:1 = FormatString("          (%s) %s", this.ToBitString,this ? "The change order is being aborted" : " ");
		UINT32 CoFlagVvActivated:1 = FormatString("      (%s) %s", this.ToBitString,this ? "CA version vector activate request has been made " : " ");
		UINT32 CoFlagContentCmd:1 = FormatString("       (%s) %s", this.ToBitString,this ? "A valid content command" : " ");
		UINT32 CoFlagLocationCmd:1 = FormatString("      (%s) %s", this.ToBitString,this ? "A valid content command" : " ");
		UINT32 CoFlagOnlist:1 = FormatString("           (%s) %s", this.ToBitString,this ? "This change order is on a change order process list" : " ");
		UINT32 CoFlagLocalco:1 = FormatString("          (%s) %s", this.ToBitString,this ? "This change order is locally generated" : " ");
		UINT32 CoFlagRetry:1 = FormatString("            (%s) %s", this.ToBitString,this ? "This change order MUST be retried" : " ");
		UINT32 CoFlagInstallIncomplete:1 = FormatString("(%s) %s", this.ToBitString,this ? "The local install is not completed" : " ");
		UINT32 CoFlagRefresh:1 = FormatString("          (%s) %s", this.ToBitString,this ? "This change order is an upstream partner-originated file refresh request" : " ");
		UINT32 CoFlagOutOfOrder:1 = FormatString("       (%s) %s", this.ToBitString,this ? "Do not check/update version vector" : " ");
		UINT32 CoFlagNewFile:1 = FormatString("          (%s) %s", this.ToBitString,this ? "The file or folder inside the change order is new" : " ");
		UINT32 CoFlagFileUsnValid:1 = FormatString("     (%s) %s", this.ToBitString,this ? "This change order file update sequence number (USN) is valid" : " ");
		UINT32 CoFlagControl:1 = FormatString("          (%s) %s", this.ToBitString,this ? "This is a control change order" : " ");
		UINT32 CoFlagDirectedCo:1 = FormatString("       (%s) %s", this.ToBitString,this ? "This change order is directed to a single connection" : " ");
		UINT32 Unused1:3 = FormatString("                 (%s)", this.ToBitString);
		UINT32 CoFlagDemandRefresh:1 = FormatString("    (%s) %s", this.ToBitString,this ? "This change order is a downstream partner demand for refresh" : " ");
		UINT32 CoFlagVvjoinToOrig:1 = FormatString("     (%s) %s", this.ToBitString,this ? "This change order is from a replica member identified by the originator GUID" : " ");
		UINT32 CoFlagMorphGen:1 = FormatString("         (%s) %s", this.ToBitString,this ? "This change order was generated as part of a name morph resolution" : " ");
		UINT32 CoFlagSkipOrigRecChk:1 = FormatString("   (%s) %s", this.ToBitString,this ? "Skip the originator reconcile check" : " ");
		UINT32 CoFlagMoveinGen:1 = FormatString("        (%s) %s", this.ToBitString,this ? "This change order was generated as part of a subfolder MOVEIN" : " ");
		UINT32 CoFlagMorphGenLeader:1 = FormatString("   (%s) %s", this.ToBitString,this ? "This is a MORPH_GEN leader" : " ");
		UINT32 CoFlagJustOidReset:1 = FormatString("     (%s) %s", this.ToBitString,this ? "Reset object ID (OID) back to its FRS1-defined value" : " ");
		UINT32 CoFlagCompressedStage:1 = FormatString("  (%s) %s", this.ToBitString,this ? "The staging file for this change order is compressed" : " ");
		UINT32 CoFlagSkipVvUpdate:1 = FormatString("     (%s) %s", this.ToBitString,this ? "This change order should not update the version vector" : " ");
		UINT32 Unused2:6 = FormatString("                 (%s)", this.ToBitString);
	};
	UINT32 IFlags
	{
		UINT32 CoIflag:1 = FormatString("                (%s) %s", this.ToBitString,this ? "Indicates that an FRS1 operation" : "This value is sent by the downstream replication partner if the change order is dampened");
		UINT32 CoIflagCoAbort:1 = FormatString("         (%s) %s", this.ToBitString,this ? "This value is sent by the downstream replication partner if change order processing needs to be aborted" : " ");
		UINT32 CoIflagDirEnumPending:1 = FormatString("  (%s) %s", this.ToBitString,this ? "This value is sent by the downstream replication partner if change order needs to enumerate its children as part of a sub-directory MoveIn" : " ");
		UINT32 Unused:29 = FormatString("                (%s) %s", this.ToBitString,this ? "Read" : " ");
	};
	UINT32 Status = Frs1ChangeOrderCommandStatusTable(this);
	UINT32 ContentCmd
	{
		UINT32 ReasonDataOverwrite:1 = FormatString("     (%s) %s", this.ToBitString,this ? "Overwrite a file" : " ");
		UINT32 ReasonDataExtend:1 = FormatString("        (%s) %s", this.ToBitString,this ? "Extend a file" : " ");
		UINT32 ReasonDataTruncate:1 = FormatString("      (%s) %s", this.ToBitString,this ? "Truncate the data" : " ");
		UINT32 Unused1:1 = FormatString("(%s)", this.ToBitString);
		UINT32 ReasonNamedDataOverwrite:1 = FormatString("(%s) %s", this.ToBitString,this ? "Overwrite named file" : " ");
		UINT32 ReasonNamedDataExtend:1 = FormatString("   (%s) %s", this.ToBitString,this ? "Extend named file" : " ");
		UINT32 ReasonNamedDataTruncate:1 = FormatString(" (%s) %s", this.ToBitString,this ? "Truncate named data" : " ");
		UINT32 Unused2:1 = FormatString("(%s)", this.ToBitString);
		UINT32 ReasonFileCreate:1 = FormatString("        (%s) %s", this.ToBitString,this ? "Create a file" : " ");
		UINT32 ReasonFileDelete:1 = FormatString("        (%s) %s", this.ToBitString,this ? "Delete a file" : " ");
		UINT32 ReasonEaChange:1 = FormatString("          (%s) %s", this.ToBitString,this ? "Change the extended attribute" : " ");
		UINT32 ReasonSecurityChange:1 = FormatString("    (%s) %s", this.ToBitString,this ? "Change the security type" : " ");
		UINT32 ReasonRenameOldName:1 = FormatString("     (%s) %s", this.ToBitString,this ? "The old name for rename operation" : " ");
		UINT32 ReasonRenameNewName:1 = FormatString("     (%s) %s", this.ToBitString,this ? "The new name for rename operation" : " ");
		UINT32 Unused3:1 = FormatString("                  (%s)", this.ToBitString);
		UINT32 ReasonBasicInfoChange:1 = FormatString("   (%s) %s", this.ToBitString,this ? "Change the basic information" : " ");
		UINT32 Unused4:1 = FormatString("                  (%s)", this.ToBitString);
		UINT32 ReasonCompressionChange:1 = FormatString(" (%s) %s", this.ToBitString,this ? "Change the compression" : " ");
		UINT32 ReasonEncryptionChange:1 = FormatString("  (%s) %s", this.ToBitString,this ? "Change the encryption" : " ");
		UINT32 ReasonObjectIdChange:1 = FormatString("    (%s) %s", this.ToBitString,this ? "Change the object identifier" : " ");
		UINT32 ReasonReparsePointChange:1 = FormatString("(%s) %s", this.ToBitString,this ? "Change the file reparse point" : " ");
		UINT32 ReasonStreamChange:1 = FormatString("      (%s) %s", this.ToBitString,this ? "Change the file stream" : " ");
		UINT32 Unused5:10 = FormatString("                 (%s)", this.ToBitString);
	};
	UINT32 LocationCmd
	{
		UINT32 DirOrFile:1 = FormatString("               (%s) %s", this.ToBitString,this ? "The change is for a folder" : "The change is for a file");
		UINT32 FileLocationCommand:4 = FormatString("     (%s) %s", this.ToBitString,this ? Frs1ChangeOrderCommandLocationCmdFileLocationCommandTable(this) : " ");
		UINT32 FillerBitsNotUsed:27 = FormatString("      (%s)", this.ToBitString);
	};
	UINT32 FileAttributes;
	UINT32 FileVersionNumber;
	UINT32 PartnerAckSeqNumber;
	UINT32 Notused;
	UINT64 FileSize;
	UINT64 FileOffset;
	UINT64 Frs1Vsn;
	UINT64 FileUsn;
	UINT64 JrnlUsn;
	UINT64 JrnlFirstUsn;
	UINT32 OriginalReplicaNum;
	UINT32 NewReplicaNum;
	GUID(true) ChangeOrderGuid;
	GUID(true) OriginatorGuid;
	GUID(true) FileGuid;
	GUID(true) OldParentGuid;
	GUID(true) NewParentGuid;
	GUID(true) CxtionGuid;
	UINT64 AckVersion;
	UINT64 Spare2Ul1;
	GUID(true) Spare1Guid;
	GUID(true) Spare2Guid;
	WCHARPtr Spare1Wcs;
	WCHARPtr Spare2Wcs;
	UINT32 Extension;
	UINT32 Spare2Bin;
	FILETIME EventTime;
	UINT16 FileNameLength;
	UnicodeString FileName;
	UINT32 Padding;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
}

//
//CO_RECORD_EXTENSION_WIN2K
//
Struct Frs1CoRecordExtensionWin2kStruct
{
	UINT32 FieldSize;
	UINT16 Major;
	UINT16 OffsetCount;
	UINT32 ExtensionWin2kOffset;
	UINT32 OffsetLast;
	Frs1DataExtensionChecksumStruct DataChecksum;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//DATA_EXTENSION_CHECKSUM
//
Struct Frs1DataExtensionChecksumStruct
{
	Frs1DataExtensionPrefixStruct Prefix;
	Blob(16) Data;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//DATA_EXTENSION_PREFIX
//
Struct Frs1DataExtensionPrefixStruct
{
	UINT32 Size;
	UINT32 Type =  Frs1DataExtensionPrefixTypeTable(this);
}

//
//CHANGE_ORDER_RECORD_EXTENSION
//
Struct Frs1ChangeOrderRecordExtensionStruct
{
	UINT32 FieldSize;
	UINT16 Major = Frs1ChangeOrderRecordExtensionMajorTable(this);
	UINT16 OffsetCount;
	UINT32 RecordExtensionOffset[2];
	UINT32 OffsetLast;
	Frs1DataExtensionChecksumStruct DataChecksum;
	Frs1DataExtensionRetryTimeoutStruct DataRetryTimeout;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//DATA_EXTENSION_RETRY_TIMEOUT
//
Struct Frs1DataExtensionRetryTimeoutStruct
{
	Frs1DataExtensionPrefixStruct Prefix;
	UINT32 Count;
	FILETIME FirstTryTime;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_BOP
//
Struct Frs1CommBopStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 Data;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_COMMAND
//
Struct Frs1CommCommandStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 Data = Frs1CommCommandDataTable(this);
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_TO
//
Struct Frs1CommToStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 LengthGuid;
	GUID(true) Guid;
	UINT32 LengthName;
	UnicodeString Name;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_FROM
//
Struct Frs1CommFromStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 LengthGuid;
	GUID(true) Guid;
	UINT32 LengthName;
	UnicodeString Name;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_REPLICA
//
Struct Frs1CommReplicaStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 LengthGuid;
	GUID(true) Guid;
	UINT32 LengthName;
	UnicodeString Name;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_CXTION
//
Struct Frs1CommCxtionStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 LengthGuid;
	GUID(true) Guid;
	UINT32 LengthName;
	UnicodeString Name;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_JOIN_GUID
//
Struct Frs1CommJoinGuidStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 DataLength;
	GUID(true) Data;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_LAST_JOIN_TIME
//
Struct Frs1CommLastJoinTimeStruct
{
	UINT16 CommType;
	UINT32 Length;
	switch(UINT64(FrameData, Offset))
	{
		case 0x0000000000000001: UINT64 Data = "The last join time is invalid";
		default: FILETIME TimeData;
	}
	switch
	{
		case Property.MSRPCNdr64: 
			struct
			{
				switch
				{
					case 0x0000000000000001: Align8 Pad1;
					default: Align4 Pad2;
				}
			}
	}
}

//
//	COMM_VVECTOR
//
Struct Frs1CommVvectorStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 DataLength;
	GVSN Data;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
}

//
//	COMM_JOIN_TIME
//
Struct Frs1CommJoinTimeStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 DataLength;
	FILETIME Data;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_REPLICA_VERSION_GUID
//
Struct Frs1CommReplicaVersionGuidStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 DataLength;
	GUID(true) Data;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_COMPRESSION_GUID
//
Struct Frs1CommCompressionGuidStruct
{
	UINT16 CommType;
	UINT32 Length;
	GUID(true) Data;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_BLOCK
//
Struct Frs1CommBlockStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 DataLength;
	Struct
	{
		[Frs1DataEnd = offset + DataLength]
		Frs1StageHeaderStruct StageHeader;
		switch
		{
			case Frs1ReparseDataPresent:
				_struct
				{
					switch
					{
						case offset < Frs1ReparseDataOffset:
							BLOB(Frs1ReparseDataOffset - offset) ReparseDataPad;
					}
					BLOB(Frs1FileDataOffset - offset) ReparseData;
				}
			default:
				_struct
				{
					switch
					{
						case offset < Frs1FileDataOffset:
							BLOB(Frs1FileDataOffset - offset) FileDataPad;
					}
				}
		}
		switch ( Frs1FileDataCompression )
		{
			case 0:
				BKUP BKUP;
			default:
				BLOB(Frs1DataEnd - offset) FileData;
		}
	}
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	STAGE_HEADER
//
Struct Frs1StageHeaderStruct
{
	[Frs1StageHeaderBegin = offset]
	UINT32 Major;
	UINT32 Minor = Frs1StageHeaderStructMinorTable(this);
	UINT32 DataHigh;
	[Frs1FileDataOffset = DataHigh * 65536 + DataLow]
	UINT32 DataLow;
	[Frs1FileDataCompression]
	UINT16 Compression;
	UINT8 NotUsed[6];
	FSCCFileNetworkOpenInformation Attributes;
	UINT32 Padding1;
	Frs1ChangeOrderCommandStruct ChangeOrderCommand;
	FSCCFileObjectIDBuffer FileObjId;
	Frs1CoRecordExtensionWin2kStruct CocExt;
	GUID(false) CompressionGuid;
	UINT32 EncryptedDataHigh;
	UINT32 EncryptedDataLow;
	INT64 EncryptedDataSize;
	[Frs1ReparseDataPresent]
	BOOL ReparseDataPresent;
	UINT32 ReparsePointDataHigh;
	[Frs1ReparseDataOffset = ReparsePointDataHigh * 65536 + ReparsePointDataLow]
	UINT32 ReparsePointDataLow;
	UINT32 Padding2;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
}

//
//	COMM_BLOCK_SIZE
//
Struct Frs1CommBlockSizeStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT64 Data;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
}

//
//	COMM_FILE_SIZE
//
Struct Frs1CommFileSizeStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT64 Data;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
}

//
//	COMM_FILE_OFFSET
//
Struct Frs1CommFileOffsetStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT64 Data;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
}

//
//	COMM_GVSN
//
Struct Frs1CommGvsnStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 DataLength;
	GVSN Data;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
}

//
//	COMM_CO_GUID
//
Struct Frs1CommCoGuidStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 DataLength;
	GUID(true) Data;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_CO_SEQUENCE_NUMBER
//
Struct Frs1CommCoSequenceNumberStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 Data;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	COMM_REMOTE_CO
//
Struct Frs1CommRemoteCoStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 DataLength;
	Frs1ChangeOrderCommandStruct Data;
}

//
//	COMM_CO_EXT_WIN2K
//
Struct Frs1CommCoExtWin2kStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 DataLength;
	Frs1CoRecordExtensionWin2kStruct Data;
}

//
//	COMM_CO_EXTENSION_2
//
Struct Frs1CommCoExtension2Struct
{
	UINT16 CommType;
	UINT32 Length;
	Frs1ChangeOrderRecordExtensionStruct Data;
}

//
//	COMM_EOP
//
Struct Frs1CommEopStruct
{
	UINT16 CommType;
	UINT32 Length;
	UINT32 Data;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}



