//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Windows Browser Service Protocol
//#
//#  Details:                
//#
//#  Public References:      http://www.microsoft.com/technet/archive/winntas/deploy/prodspecs/ntbrowse.mspx
//#  Microsoft References:   [MS-BRWS]:Common Internet File System (CIFS) Browser Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 3/2/2009
//#
//####

[DataTypeByteOrder = LittleEndian]
Protocol BROWSER = FormatString("%s%s", BROWSERCommandTable(Command), BROWSERSummary)
{
	UINT8 Command = FormatString("%s, %d(0x%02X)", BROWSERCommandTable(this), this, this);
	switch(Command)
	{
		case  1:
			_struct HostAnnoucement
			{
				UINT8 UpdateCount;
				UINT32 Periodicity = FormatString("%u (%u minutes)", this, this/60000);
				[BROWSERSummary = ServerName ? ", ServerName = " + this : ""]
				AsciiString(16) ServerName;
				UINT8 OSVersionMajor;
				UINT8 OSVersionMinor;
				BrowserServerType ServerType = BrowserServerTypeTable(UINT32(frameData, offset));
				//UINT16 ElectionVersion;
				UINT8 BrowserVersionMajor;
				UINT8 BrowserVersionMinor;
				UINT16 Signature = MustBeSetToTable(this,"0xAA55");
				switch
				{
					case frameLength > offset: AsciiString Comment;
				}
			};
		case  2:
			_struct AnnoucementRequest
			{
				UINT8 UnusedFlag;
				[BROWSERSummary = ResponseName ? ", ResponseName = " + this : ""]
				AsciiString ResponseName;
			};
		case  8:
			_struct RequestElection
			{
				UINT8 Version;
				UINT32 Criteria
				{
					UINT32 BackupBrw : 1 = FormatString("      (%s) %s",this.toBitString, this?"Running backup browser":"Not Running backup server");
					UINT32 BrowserMaster : 1 = FormatString("  (%s) %s",this.toBitString, this?"A backup browser server has been manually designated to be a backup browser server":"");
					UINT32 MasterBrwServer : 1 = FormatString("(%s) %s",this.toBitString, this?"Running master browser server":"Not Running master server");
					UINT32 PreferedMaster : 1 = FormatString(" (%s) %s",this.toBitString, this?"Preferred master browser server":"Not Preferred master server");
					UINT32 Bit_4 : 1 = FormatString("          (%s) %s",this.toBitString,"Unused Bit");
					UINT32 WinsClient : 1 = FormatString("     (%s) %s",this.toBitString, this?"using NetBIOS Name Service for NetBIOS":"No WINS");
					UINT32 Bit_6 : 1 = FormatString("          (%s) %s",this.toBitString,"Unused Bit");
					UINT32 PrimaryDomain : 1 = FormatString("  (%s) %s",this.toBitString, this?"Primary domain controller":"NO PDC");
					UINT32 BrowserVersion : 16= FormatString(" (%s) %s",this.toBitString, ElectRevisionTable(this));
					//UINT32 WinGroup : 1 = FormatString("       (%s) %s",this.toBitString, this?"Windows for Workgroups":"Not for workgroup");
					UINT32 Win95orWFW : 1 = FormatString("     (%s) %s",this.toBitString, this?"Windows 95/Windows for Workgroups":"Not Win 95 or Windows for Workgroups");
					UINT32 Bit_26 : 3 = FormatString("         (%s) %s",this.toBitString,"Unused Bit");
					UINT32 WinNTStation : 1 = FormatString("   (%s) %s",this.toBitString, this?"Workstation:Windows Vista, Windows XP, Windows 2000 Professional, and Windows NT":"No NT Station");
					UINT32 WinNTServer : 1 = FormatString("    (%s) %s",this.toBitString, this?"Server:Windows Server 2008, Windows Server 2003, Windows 2000 Server, and Windows NT Server":"No NT Server");
					UINT32 Bit_30 : 2 = FormatString("         (%s) %s",this.toBitString,"Unused Bit");
				};
				UINT32 UpTime;
				UINT32 Unused;
				[BROWSERSummary = ServerName ? ", ServerName = " + this : ""]
				AsciiString ServerName;
			};
		case  9:
			_struct GetBackupListRequest
			{
				UINT8 RequestedCount;
				UINT32 Token;
			};
		case 10:
			_struct GetBackupListResponse
			{
				UINT8 BackupServerCount;
				UINT32 Token;
				AsciiString BackupServerList[BackupServerCount];
			};
		case 11:
			AsciiString BrowserToPromote;
		case 12:
			_struct DomainWAnnoucement
			{
				UINT8 UpdateCount;
				UINT32 Periodicity = FormatString("%u (%u minutes)", this, this/60000);
				[BROWSERSummary = MachineGroup ? ", MachineGroup = " + this : ""]
				AsciiString(16) MachineGroup;
				UINT8 BrowseVersionMajor;
				UINT8 BrowseVersionMinor;
				BrowserServerType ServerType = BrowserServerTypeTable(UINT32(frameData, offset));
				UINT8 BrowserVersionMajor;
				UINT8 BrowserVersionMinor;
				UINT16 Signature = ShouldBeSetToTable(this,"0xAA55");
				[BROWSERSummary = LocalMasterBrowserName ? BROWSERSummary + ", serverName = " + this : ""]
				AsciiString LocalMasterBrowserName;
			}
		case 13:
			AsciiString MasterBrowserServerName;
		case 14:
			UINT8 ResetStateRequestType = BrowserResetStateRequestTypeTable(this);
		case 15:
			_struct LocalMasterAnnouncement
			{
				UINT8 UpdateCount;
				UINT32 Periodicity = FormatString("%u (%u minutes)", this, this/60000);
				[BROWSERSummary = ServerName ? ", ServerName = " + this : ""]
				AsciiString(16) ServerName;
				UINT8 OSVersionMajor;
				UINT8 OSVersionMinor;
				BrowserServerType ServerType = BrowserServerTypeTable(UINT32(frameData, offset));
				//UINT16 ElectionVersion;
				UINT8 BrowserVersionMajor;
				UINT8 BrowserVersionMinor;
				UINT16 Signature  = MustBeSetToTable(this,"0xAA55");
				switch
				{
					case frameLength > offset: AsciiString Comment;
				}
			}
		default:
			AsciiString(frameLength - frameOffset) UnhandledData;
	}
}
Table BROWSERCommandTable(command)
{
	switch(command)
	{
		case 1 : "Host Announcement";
		case 2 : "Request Announcement";
		case 8 : "Browser Election Request";
		case 9 : "Get Backup List Request";
		case 10: "Get Backup List Response";
		case 11: "Become Backup Browser";
		case 12: "Domain/Workgroup Announcement";
		case 13: "Master Announcement";
		case 14: "Reset State Request";
		case 15: "Local Master Announcement";
		default: "Undefined Command";
	}
}

Table BrowserServerTypeTable(svtype)
{
	switch(svtype)
	{
		case 0xFFFFFFFF: "All servers";
		default: FormatString("0x%08X", svtype);
	}
}

Table ElectRevisionTable(value)
{
	switch(value)
	{
		case 0x000C: "Windows for Workgroups and Windows 95";
		case 0x010F: "Windows NT/Windows 2000 Workstation/Windows XP/Vista,Windows NT Server/Windows 2000 Server/Windows Server 2003/Windows Server code name Longhorn";
		default: FormatString("%x,Unknown ElectRevision",value);
	}
}

Table BrowserResetStateRequestTypeTable(value)
{
	switch(value)
	{
		case 0x01:"RESET_STATE_STOP_MASTER";
		case 0x02:"RESET_STATE_CLEAR_ALL";
		case 0x04:"RESET_STATE_STOP";
		default: "Unknown value";
	}
}

[DataTypeByteOrder = LittleEndian]
struct BrowserServerType
{
	UINT32 AllLMW:1 = FormatString("       (%s) %s",this.ToBitString,this ? "All LAN Manager workstation" : "NOT All LAN Manager workstation");
	UINT32 AllLMS:1 = FormatString("       (%s) %s",this.ToBitString,this ? "All LAN Manager server" : "NOT All LAN Manager server");
	UINT32 AnySRWS:1 = FormatString("      (%s) %s",this.ToBitString,this ? "Any server running with SQLserver" : "NOT Any server running with SQLserver");
	UINT32 PrimaryDC:1 = FormatString("    (%s) %s",this.ToBitString,this ? "Primary domain controller" : "NOT Primary domain controller");
	UINT32 BackupDC:1 = FormatString("     (%s) %s",this.ToBitString,this ? "Backup domain controller" : "NOT Backup domain controller");
	UINT32 ServerRTS:1 = FormatString("    (%s) %s",this.ToBitString,this ? "Server running the Timesource Service" : "NOT Server running the Timesource Service");
	UINT32 AppleFPS:1 = FormatString("     (%s) %s",this.ToBitString,this ? "Apple File Protocol servers" : "NOT Apple File Protocol servers");
	UINT32 NovellS:1 = FormatString("      (%s) %s",this.ToBitString,this ? "Novell servers" : "NOT Novell servers");
	UINT32 DomainM:1 = FormatString("      (%s) %s",this.ToBitString,this ? "Domain Member" : "NOT Domain Member");
	UINT32 ServerSPQ:1 = FormatString("    (%s) %s",this.ToBitString,this ? "Server sharing print queue" : "NOT Server sharing print queue");
	UINT32 ServerRRASS:1 = FormatString("  (%s) %s",this.ToBitString,this ? "Server running RAS service" : "NOT Server running RAS service");
	UINT32 XenixS:1 = FormatString("       (%s) %s",this.ToBitString,this ? "Xenix server" : "NOT Xenix server");
	UINT32 NTS:1 = FormatString("          (%s) %s",this.ToBitString,this ? "NT server" : "NOT NT server");
	UINT32 ServerRWFW:1 = FormatString("   (%s) %s",this.ToBitString,this ? "Server running Windows for Workgroups" : "NOT Server running Windows for Workgroups");
	UINT32 Reserved1:1 = FormatString("    (%s)",this.ToBitString);
	UINT32 WindowsNTNDCS:1 = FormatString("(%s) %s",this.ToBitString,this ? "Windows NT Non-DC server" : "NOT Windows NT Non-DC server");
	UINT32 ServerCRBS:1 = FormatString("   (%s) %s",this.ToBitString,this ? "Server that can run the browser service" : "NOT Server that can run the browser service");
	UINT32 ServerRBSAB:1 = FormatString("  (%s) %s",this.ToBitString,this ? "Server running browser service as backup" : "NOT Server running browser service as backup");
	UINT32 ServerRMBS:1 = FormatString("   (%s) %s",this.ToBitString,this ? "Server running the master browser service" : "NOT Server running the master browser service");
	UINT32 ServerRDMB:1 = FormatString("   (%s) %s",this.ToBitString,this ? "Server running the domain master browser" : "NOT Server running the domain master browser");
	UINT32 Reserved2:1 = FormatString("    (%s)",this.ToBitString);
	UINT32 Reserved3:1 = FormatString("    (%s)",this.ToBitString);
	UINT32 Reserved4:1 = FormatString("    (%s)",this.ToBitString);
	UINT32 Reserved5:1 = FormatString("    (%s)",this.ToBitString);
	UINT32 Reserved6:1 = FormatString("    (%s)",this.ToBitString);
	UINT32 ServerRWNTTS:1 = FormatString(" (%s) %s",this.ToBitString,this ? "Server running Windows NT Terminal Services" : "NOT Server running Windows NT Terminal Services");
	UINT32 Reserved7:1 = FormatString("    (%s)",this.ToBitString);
	UINT32 Reserved8:1 = FormatString("    (%s)",this.ToBitString);
	UINT32 ServerRCW:1 = FormatString("    (%s) %s",this.ToBitString,this ? "Server running Citrix Winframe" : "NOT Server running Citrix Winframe");
	UINT32 ListATR:1 = FormatString("      (%s) %s",this.ToBitString,this ? "List for Alternate Transport Request" : "NOT List for Alternate Transport Request");
	UINT32 LocalLOR:1 = FormatString("     (%s) %s",this.ToBitString,this ? "local list only Request" : "NOT local list only Request");
	UINT32 DomainMR:1 = FormatString("     (%s) %s",this.ToBitString,this ? "domain members Request" : "NOT domain members Request");
}


