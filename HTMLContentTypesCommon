//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  HTML Content Types
//#
//#  Details:                
//#
//#  Public References:      RFC 2045, 2046
//#
//#  Comments:               
//#
//#  Revision Class and Date:
//#
//####

[
	DataTypeByteOrder = LittleEndian,
	HTTPSummaryType=FormatString("- GIF: %s", GIF.ToString),
	RegisterAfter(HTTPPayloadData.XML, GIF, HTTPContentType.Contains("image/gif"))
]
struct GIF = FormatString("Version=%s, Width=%d, Length=%d", Version, Width, Height)
{
	AsciiString(6) Version;
	UINT16 Width;
	UINT16 Height;
	UINT8 GlobalSettings
	{
		UINT8 GlobalColorTableSize:3 = FormatString("(%s) Size of table: %u", this.ToBitString, this);
		UINT8 SortFlag:1 = FormatString("            (%s) %s", this.ToBitString, this? "Global color table in desc order": "Global table not in order");
		UINT8 ColorResolution:3 = FormatString("     (%s) Bits-per-primary-color: %u", this.ToBitString, this + 1);
		UINT8 GlobalColorTableFlag:1 = FormatString("(%s) %s", this.ToBitString, this? "Global color table is present": "Global color table is not present, BackgroundColorIndex is meaningless");
	}
	UINT8 BackgroundColorIndex;
	UINT8 PixelAspectRatio = this == 0? 0: (this + 15)/64;
	switch
	{
		case GlobalSettings.GlobalColorTableFlag == 1: BLOB(3 * 1 << (GlobalSettings.GlobalColorTableSize + 1)) GlobalColorTable;
	}
	Blob(FrameLength - FrameOffset) RestOfData;
}

[
	DataTypeByteOrder = LittleEndian,
	HTTPSummaryType=FormatString("- ICO: %s", ICO.ToString),
	RegisterAfter(HTTPPayloadData.XML, ICO, HTTPContentType.Contains("image/x-icon"))
]
struct ICO = FormatString("Size=%d", FrameLength - FrameOffset)
{

	Blob(FrameLength - FrameOffset) IconData;
}

[
	DataTypeByteOrder = LittleEndian,
	HTTPSummaryType=FormatString("- JPEG: %s", JPEG.ToString),
	RegisterAfter(HTTPPayloadData.XML, JPEG, HTTPContentType.Contains("image/jpeg"))
]
struct JPEG = FormatString("Size=%d", FrameLength - FrameOffset)
{

	Blob(FrameLength - FrameOffset) JPEGData;
}

[
	DataTypeByteOrder = LittleEndian,
	HTTPSummaryType=FormatString("- ShockwaveFlash: %s", ShockwaveFlash.ToString),
	RegisterAfter(HTTPPayloadData.XML, ShockwaveFlash, HTTPContentType.Contains("application/x-shockwave-flash"))
]
struct ShockwaveFlash = FormatString("Size=%d", FrameLength - FrameOffset)
{

	Blob(FrameLength - FrameOffset) ShockwaveFlashData;
}
