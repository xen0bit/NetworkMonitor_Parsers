//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Component Object Model Plus (COM+) Remote Administration Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-COMA]: Component Object Model Plus (COM+) Remote Administration Protocol Specification (2.2.2)
//#
//#  Comments:               Parser Framework: PAC v2.1.1577.0
//#
//#  Revision Class and Date:Minor, 7/17/2009
//#
//####

Protocol COMA = FormatString( "%s %s%s%s%s%s", 
	Property.COMAMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.COMASummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.COMASummary : "" )
{
	[Property.COMASummary = ""]
	Switch( Property.MSRPCIfUuid )
	{
		Case "{7F43B400-1A0E-4D57-BBC9-6B0C65F7A889}":
			[Property.COMAMethodName = "IAlternateLaunch::" + COMAIAlternateLaunchMethodNameTable( Property.MSRPCOpnum )]
			_Struct IAlternateLaunch
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct CreateConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct DeleteConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown IAlternateLaunch method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{3F3B1B86-DBBE-11D1-9DA6-00805F85CFE3}":
			[Property.COMAMethodName = "IContainerControl::" + COMAIContainerControlMethodNameTable( Property.MSRPCOpnum )]
			_Struct IContainerControl
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct CreateContainer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct ShutdownContainers
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct RefreshComponents
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown IContainerControl method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{A8927A41-D3CE-11D1-8472-006008B0E5CA}":
			[Property.COMAMethodName = "ICatalogTableInfo::" + COMAICatalogTableInfoMethodNameTable( Property.MSRPCOpnum )]
			_Struct ICatalogTableInfo
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GetClientTableInfo
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown ICatalogTableInfo method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{F131EA3E-B7BE-480E-A60D-51CB2785779E}":
			[Property.COMAMethodName = "IExport2::" + COMAIExport2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IExport2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct ExportPartition
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown IExport2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{C2BE6970-DF9E-11D1-8B87-00C04FD7A924}":
			[Property.COMAMethodName = "IImport::" + COMAIImportMethodNameTable( Property.MSRPCOpnum )]
			_Struct IImport
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct ImportFromFile
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct QueryFile
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
					Case 6:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("COMA", "Invalid IImport method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("COMA", "Invalid IImport method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown IImport method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{6C935649-30A6-4211-8687-C4C83E5FE1C7}":
			[Property.COMAMethodName = "IContainerControl2::" + COMAIContainerControl2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IContainerControl2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct ShutdownContainer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct PauseContainer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct ResumeContainer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct IsContainerPaused
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct GetRunningContainers
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct GetContainerIDFromProcessID
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 9:
						_Struct RecycleContainer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 10:
						_Struct GetContainerIDFromConglomerationID
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown IContainerControl2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{456129E2-1078-11D2-B0F9-00805FC73204}":
			[Property.COMAMethodName = "ICatalogUtils::" + COMAICatalogUtilsMethodNameTable( Property.MSRPCOpnum )]
			_Struct ICatalogUtils
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct ValidateUser
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct WaitForEndWrites
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct GetEventClassesForIID
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown ICatalogUtils method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{98315903-7BE5-11D2-ADC1-00A02463D6E7}":
			[Property.COMAMethodName = "IReplicationUtil::" + COMAIReplicationUtilMethodNameTable( Property.MSRPCOpnum )]
			_Struct IReplicationUtil
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct CreateShare
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct CreateEmptyDir
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct RemoveShare
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct BeginReplicationAsTarget
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct QueryConglomerationPassword
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct CreateReplicationDir
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown IReplicationUtil method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{C726744E-5735-4F08-8286-C510EE638FB6}":
			[Property.COMAMethodName = "ICatalogUtils2::" + COMAICatalogUtils2MethodNameTable( Property.MSRPCOpnum )]
			_Struct ICatalogUtils2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct CopyConglomerations
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct CopyComponentConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct AliasComponent
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct MoveComponentConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct GetEventClassesForIID2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct IsSafeToDelete
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 9:
						_Struct FlushPartitionCache
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 10:
						_Struct EnumerateSRPLevels
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 11:
						_Struct GetComponentVersions
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown ICatalogUtils2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{0E3D6631-B46B-11D1-9D2D-006008B0E5CA}":
			[Property.COMAMethodName = "ICatalogTableWrite::" + COMAICatalogTableWriteMethodNameTable( Property.MSRPCOpnum )]
			_Struct ICatalogTableWrite
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct WriteTable
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown ICatalogTableWrite method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{8DB2180E-BD29-11D1-8B7E-00C04FD7A924}":
			[Property.COMAMethodName = "IRegister::" + COMAIRegisterMethodNameTable( Property.MSRPCOpnum )]
			_Struct IRegister
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct RegisterModule
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("COMA", "Invalid IRegister method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("COMA", "Invalid IRegister method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown IRegister method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{971668DC-C3FE-4EA1-9643-0C7230F494A1}":
			[Property.COMAMethodName = "IRegister2::" + COMAIRegister2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IRegister2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct CreateFullConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct CreateLegacyConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct PromoteLegacyConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct RegisterModule2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
					Case 7:
					Case 9:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("COMA", "Invalid IRegister2 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("COMA", "Invalid IRegister2 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown IRegister2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{182C40FA-32E4-11D0-818B-00A0C9231C29}":
			[Property.COMAMethodName = "ICatalogSession::" + COMAICatalogSessionMethodNameTable( Property.MSRPCOpnum )]
			_Struct ICatalogSession
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 7:
						_Struct InitializeSession
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct GetServerInformation
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 3:
					Case 4:
					Case 5:
					Case 6:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("COMA", "Invalid ICatalogSession method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("COMA", "Invalid ICatalogSession method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown ICatalogSession method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{CFADAC84-E12C-11D1-B34C-00C04F990D54}":
			[Property.COMAMethodName = "IExport::" + COMAIExportMethodNameTable( Property.MSRPCOpnum )]
			_Struct IExport
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct ExportConglomeration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
					Case 5:
					Case 6:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("COMA", "Invalid IExport method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("COMA", "Invalid IExport method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown IExport method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{1F7B1697-ECB2-4CBB-8A0E-75C427F4A6F0}":
			[Property.COMAMethodName = "IImport2::" + COMAIImport2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IImport2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct SetPartition
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
					Case 5:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("COMA", "Invalid IImport2 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("COMA", "Invalid IImport2 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown IImport2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{1D118904-94B3-4A64-9FA6-ED432666A7B9}":
			[Property.COMAMethodName = "ICatalog64BitSupport::" + COMAICatalog64BitSupportMethodNameTable( Property.MSRPCOpnum )]
			_Struct ICatalog64BitSupport
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct SupportsMultipleBitness
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct Initialize64BitQueryCellSupport
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown ICatalog64BitSupport method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{47CDE9A1-0BF6-11D2-8016-00C04FB9988E}":
			[Property.COMAMethodName = "ICapabilitySupport::" + COMAICapabilitySupportMethodNameTable( Property.MSRPCOpnum )]
			_Struct ICapabilitySupport
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct Start
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct Stop
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct Install
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct Uninstall
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct IsInstalled
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
						_Struct IsRunning
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 9:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("COMA", "Invalid ICapabilitySupport method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[COMASummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("COMA", "Invalid ICapabilitySupport method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown ICapabilitySupport method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{0E3D6630-B46B-11D1-9D2D-006008B0E5CA}":
			[Property.COMAMethodName = "ICatalogTableRead::" + COMAICatalogTableReadMethodNameTable( Property.MSRPCOpnum )]
			_Struct ICatalogTableRead
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct ReadTable
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("COMA", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "COMA", "Unknown ICatalogTableRead method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
	}
}

Table COMAIAlternateLaunchMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "CreateConfiguration";
		Case 4: "DeleteConfiguration";
		Default: "unknown";
	}
}

Table COMAIContainerControlMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "CreateContainer";
		Case 4: "ShutdownContainers";
		Case 5: "RefreshComponents";
		Default: "unknown";
	}
}

Table COMAICatalogTableInfoMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GetClientTableInfo";
		Default: "unknown";
	}
}

Table COMAIExport2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "ExportPartition";
		Default: "unknown";
	}
}

Table COMAIImportMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "ImportFromFile";
		Case 4: "QueryFile";
		Case 5: "Opnum5NotUsedOnWire";
		Case 6: "Opnum6NotUsedOnWire";
		Default: "unknown";
	}
}

Table COMAIContainerControl2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "ShutdownContainer";
		Case 4: "PauseContainer";
		Case 5: "ResumeContainer";
		Case 6: "IsContainerPaused";
		Case 7: "GetRunningContainers";
		Case 8: "GetContainerIDFromProcessID";
		Case 9: "RecycleContainer";
		Case 10: "GetContainerIDFromConglomerationID";
		Default: "unknown";
	}
}

Table COMAICatalogUtilsMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "ValidateUser";
		Case 4: "WaitForEndWrites";
		Case 5: "GetEventClassesForIID";
		Default: "unknown";
	}
}

Table COMAIReplicationUtilMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "CreateShare";
		Case 4: "CreateEmptyDir";
		Case 5: "RemoveShare";
		Case 6: "BeginReplicationAsTarget";
		Case 7: "QueryConglomerationPassword";
		Case 8: "CreateReplicationDir";
		Default: "unknown";
	}
}

Table COMAICatalogUtils2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "CopyConglomerations";
		Case 4: "CopyComponentConfiguration";
		Case 5: "AliasComponent";
		Case 6: "MoveComponentConfiguration";
		Case 7: "GetEventClassesForIID2";
		Case 8: "IsSafeToDelete";
		Case 9: "FlushPartitionCache";
		Case 10: "EnumerateSRPLevels";
		Case 11: "GetComponentVersions";
		Default: "unknown";
	}
}

Table COMAICatalogTableWriteMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "WriteTable";
		Default: "unknown";
	}
}

Table COMAIRegisterMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "RegisterModule";
		Case 4: "Opnum4NotUsedOnWire";
		Default: "unknown";
	}
}

Table COMAIRegister2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "CreateFullConfiguration";
		Case 4: "CreateLegacyConfiguration";
		Case 5: "PromoteLegacyConfiguration";
		Case 6: "Opnum6NotUsedOnWire";
		Case 7: "Opnum7NotUsedOnWire";
		Case 8: "RegisterModule2";
		Case 9: "Opnum9NotUsedOnWire";
		Default: "unknown";
	}
}

Table COMAICatalogSessionMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "Opnum3NotUsedOnWire";
		Case 4: "Opnum4NotUsedOnWire";
		Case 5: "Opnum5NotUsedOnWire";
		Case 6: "Opnum6NotUsedOnWire";
		Case 7: "InitializeSession";
		Case 8: "GetServerInformation";
		Default: "unknown";
	}
}

Table COMAIExportMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "ExportConglomeration";
		Case 4: "Opnum4NotUsedOnWire";
		Case 5: "Opnum5NotUsedOnWire";
		Case 6: "Opnum6NotUsedOnWire";
		Default: "unknown";
	}
}

Table COMAIImport2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "SetPartition";
		Case 4: "Opnum4NotUsedOnWire";
		Case 5: "Opnum5NotUsedOnWire";
		Default: "unknown";
	}
}

Table COMAICatalog64BitSupportMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "SupportsMultipleBitness";
		Case 4: "Initialize64BitQueryCellSupport";
		Default: "unknown";
	}
}

Table COMAICapabilitySupportMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "Start";
		Case 4: "Stop";
		Case 5: "Install";
		Case 6: "Uninstall";
		Case 7: "IsInstalled";
		Case 8: "IsRunning";
		Case 9: "Opnum9NotUsedOnWire";
		Default: "unknown";
	}
}

Table COMAICatalogTableReadMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "ReadTable";
		Default: "unknown";
	}
}

