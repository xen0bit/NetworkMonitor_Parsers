//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Remote Procedure Call Location Services Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-RPCL]: Remote Procedure Call Location Services Extensions
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 3/2/2010
//#
//####

[ReturnValue = 0]
Protocol RPCL = FormatString( "%s %s%s%s%s%s", 
	Property.RPCLMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? ", *Un-Interpreted*": "",
	Property.RPCLSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ?  ", " + Property.RPCLSummary : "" )
{
	[Property.RPCLSummary = ""]
	[Property.RPCLMethodName = RPCLMethodNameTable( Property.MSRPCOpnum )]
	Switch( Property.MSRPCOpnum )
	{
		Case 0:
			_Struct INsiLookupBegin
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPCLSummary = FormatString( "EntryNameSyntax=0x%X EntryName=0x%X BindingMaxCount=0x%X MaxCacheAge=0x%X", EntryNameSyntax, EntryName, BindingMaxCount, MaxCacheAge )]
									Struct
									{
										UINT32 EntryNameSyntax;
										NdrWIDESTRINGPtr EntryName;
										RPCLRpcSyntaxIdentifierPtr Interfaceid;
										RPCLRpcSyntaxIdentifierPtr Xfersyntax;
										RPCLPtrGuid ObjUuid;
										UINT32 BindingMaxCount;
										UINT32 MaxCacheAge;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPCLSummary = FormatString( "Status=0x%X", Status )]
									Struct
									{
										ContextHandle ImportContext;
										UINT16 Status;
									}
							}
						}
				}
			}
		
		Case 1:
			_Struct INsiLookupDone
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle ImportContext;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPCLSummary = FormatString( "Status=0x%X", Status )]
									Struct
									{
										ContextHandle ImportContext;
										UINT16 Status;
									}
							}
						}
				}
			}
		
		Case 2:
			_Struct INsiLookupNext
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle ImportContext;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPCLSummary = FormatString( "Status=0x%X", Status )]
									Struct
									{
										RPCLNsiBindingVectorTPtr BindingVector;
										UINT16 Status = RPCLINsiLookupNextStatusTable(this);
									}
							}
						}
				}
			}
		
		Case 3:
			_Struct INsiEntryObjectInqNext
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle InqContext;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPCLSummary = FormatString( "Status=0x%X", Status )]
									Struct
									{
										RPCLNsiUuidVectorTIdlStructPtr UuidVec;
										UINT16 Status;
									}
							}
						}
				}
			}
		
		Case 4:
			_Struct INsiPingLocator
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPCLSummary = FormatString( "Status=0x%X", Status )]
									Struct
									{
										UINT32 Status;
									}
							}
						}
				}
			}
		
		Case 5:
			_Struct INsiEntryObjectInqDone
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle InqContext;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPCLSummary = FormatString( "Status=0x%X", Status )]
									Struct
									{
										ContextHandle InqContext;
										UINT16 Status;
									}
							}
						}
				}
			}
		
		Case 6:
			_Struct INsiEntryObjectInqBegin
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPCLSummary = FormatString( "EntryNameSyntax=0x%X EntryName=0x%X", EntryNameSyntax, EntryName )]
									Struct
									{
										UINT32 EntryNameSyntax= RPCLEntryNameSyntax( this );
										NdrWIDESTRINGPtr EntryName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPCLSummary = FormatString( "Status=0x%X", Status )]
									Struct
									{
										ContextHandle InqContext;
										UINT16 Status;
									}
							}
						}
				}
			}
		
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "RPCL", "Unknown LocToLoc method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
	}
}

Table RPCLMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "I_nsi_lookup_begin";
		Case 1: "I_nsi_lookup_done";
		Case 2: "I_nsi_lookup_next";
		Case 3: "I_nsi_entry_object_inq_next";
		Case 4: "I_nsi_ping_locator";
		Case 5: "I_nsi_entry_object_inq_done";
		Case 6: "I_nsi_entry_object_inq_begin";
		Default: "unknown";
	}
}
Table RPCLEntryNameSyntax( Value )
{
	Switch( Value )
	{ 
		Case 0x00000001: "RpcCNsSyntaxDefault [Microsoft Default Syntax]";
		Case 0x00000003: "RpcCNsSyntaxDce [DCE Compliant RPC Name Syntax]";
		Default:         "Unknown";
	}
}





Table RPCLINsiLookupNextStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "NSI_S_OK - The call returned successfully.  There may be additional bindings that satisfy the criteria.";
		Case 0x00000001: "NSI_S_NO_MORE_BINDINGS - There are no more bindings that satisfy the criteria.";
		Default: "Unknown";
	}
}

Struct RPCLMSRPCGuidConformant
{
	NdrConformant Size;
	MSRPCGuid Element[Size.MaxCount];
}

//
//	_NSI_BINDING_T
//  Alignment: None
//
Struct RPCLNsiBindingT
{
	NdrPtr StringPtr;
	UINT32 EntryNameSyntax = RPCLEntryNameSyntax( this );
	NdrPtr EntryNamePtr;
	switch
	{
		case StringPtr.ReferentId > 0:
		NdrWideString	StringBinding;
	}
	switch
	{
		case EntryNamePtr.ReferentId > 0:
		NdrWideString	EntryName;
	}
}

Struct RPCLNsiBindingTConformant
{
	NdrConformant Size;
	switch 
	{ 
		case Size.MaxCount > 0:
			RPCLNsiBindingT BindingT[Size.MaxCount];
	}
}

//
//	_NSI_BINDING_VECTOR_T
//  Alignment: NdrAlign
//
Struct RPCLNsiBindingVectorT
{
	UINT32 Count;
	RPCLNsiBindingTConformant Binding;
}

Struct RPCLNsiBindingVectorTPtr
{
	NdrPtr NsiBindingVectorTPtr;
	Switch {
		Case NsiBindingVectorTPtr.ReferentID != 0:
			RPCLNsiBindingVectorT NsiBindingVectorT;
	}
}

//
//	_NSI_UUID_VECTOR_T
//  Alignment: NdrAlign
//
Struct RPCLNsiUuidVectorT
{
	UINT32 Count;
	NdrPtr UuidPtr;
}

Struct RPCLNsiUuidVectorTIdlStruct
{
	RPCLNsiUuidVectorT NsiUuidVectorT;
	Switch {
		Case NsiUuidVectorT.UuidPtr.ReferentID != 0:
			RPCLMSRPCGuidConformant Uuid[0];
	}
}

Struct RPCLNsiUuidVectorTIdlStructPtr
{
	NdrPtr NsiUuidVectorTIdlStructPtr;
	Switch {
		Case NsiUuidVectorTIdlStructPtr.ReferentID != 0:
			RPCLNsiUuidVectorTIdlStruct NsiUuidVectorTIdlStruct;
	}
}

//
//	RPC_SYNTAX_IDENTIFIER
//  Alignment: Align4
//
Struct RPCLRpcSyntaxIdentifier
{
	GUID(0) SyntaxGUID;
	UINT16 MajorVersion;
	UINT16 MinorVersion;
}


Struct RPCLRpcSyntaxIdentifierPtr
{
	NdrPtr RpcSyntaxIdentifierPtr;
	Switch {
		Case RpcSyntaxIdentifierPtr.ReferentID != 0:
			RPCLRpcSyntaxIdentifier RpcSyntaxIdentifier;
	}
}

Struct RPCLPtrGuid = Pointer.ReferentID > 0 ? FormatString("%s", Guid.ToString) : "NULL"
{
	NdrPtr		Pointer;
	switch 
	{ 
		case Pointer.ReferentID > 0:
		GUID(0)		Guid;
	}	
}
