//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  T.126 Protocol
//#
//#  Details:                www.ITU.org specification
//#
//#  OEM References:         T.126 Multipoint Still Image and Annotation Protocol.pdf
//#
//#  Comments:               
//#
//#  Revision Class and Date:
//#
//####

//
// one REAL ::= {mantissa 1, base 2, exponent 0}
//
const T126One = 1;

[DataTypeBitAlign]
struct T126ArchiveEntryName = T126ArchiveEntryName.ToString
{
	AsnPerBMPString(1, 256) T126ArchiveEntryName;
}

[DataTypeBitAlign]
struct T126Handle = T126HandleValue
{
	[Post.T126HandleValue = ConstrainedValue]
	AsnPerConstrainedInteger(0, 4294967295) handle;
}

Table T126ArchiveErrorTable(ExtensionBit, Choice)
{
	switch
	{
		case (ExtensionBit == 0) && (Choice== 0): "entryNotFound";
		case (ExtensionBit == 0) && (Choice== 1): "entryExists";
		case (ExtensionBit == 0) && (Choice== 2): "storageExceeded";
		case (ExtensionBit == 0) && (Choice== 3): "archiveNoLongerAvailable";
		case (ExtensionBit == 0) && (Choice== 4): "unspecifiedError";
		case (ExtensionBit == 0) && (Choice== 5): "nonStandardError";

	}
}

[DataTypeBitAlign]
struct T126ArchiveError = T126ArchiveErrorTable(ExtensionBit, T126ArchiveErrorChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ArchiveErrorChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ArchiveErrorTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ArchiveErrorChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 5) ChoiceValue = T126ArchiveErrorTable(ExtensionBit, ConstrainedValue);
				switch (T126ArchiveErrorChoice)
				{
					case 5: T126NonStandardIdentifier nonStandardError;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126ArchiveHeader	= FormatString("Name=%s,CreationTime=%s,ModificationTime=%s",
																					archiveName.ToString,archiveCreationTime.ToString,archiveModificationTime.ToString)//Sequence
{
	UINT8 ExtensionBit:1;


	T126ArchiveName archiveName;
	AsnPerGeneralizedTime archiveCreationTime;
	AsnPerGeneralizedTime archiveModificationTime;
	switch
	{
		case ExtensionBit:
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T126ArchiveMode	= isCreate?" Create":"" + isRead?" Read":"" + isWrite?" Write":""     //Sequence
{
	UINT8 ExtensionBit:1;

	[Post.isCreate = BooleanValue]
	AsnPerBoolean(0) create;
	[Post.isRead = BooleanValue]
	AsnPerBoolean(0) read;
	[Post.isWrite = BooleanValue]
	AsnPerBoolean(0) write;
	switch
	{
		case ExtensionBit:
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T126ArchiveName = T126ArchiveNameValue
{
	[T126ArchiveNameValue = BMPStringValue]
	AsnPerBMPString(1, 256) ArchiveName;
}


Table T126ArchiveOpenResultTable(ExtensionBit, Choice)
{
	switch
	{
		case (ExtensionBit == 0) && (Choice== 0): "archiveOpenSuccessful";
		case (ExtensionBit == 0) && (Choice== 1): "archiveNotFound";
		case (ExtensionBit == 0) && (Choice== 2): "archiveTimeIncorrect";
		case (ExtensionBit == 0) && (Choice== 3): "archiveExists";
		case (ExtensionBit == 0) && (Choice== 4): "archiveOpenForWriting";
		case (ExtensionBit == 0) && (Choice== 5): "storageExceeded";
		case (ExtensionBit == 0) && (Choice== 6): "unspecifiedError";
		case (ExtensionBit == 0) && (Choice== 7): "nonStandardResult";

	}
}

[DataTypeBitAlign]
struct T126ArchiveOpenResult = T126ArchiveOpenResultTable(ExtensionBit, T126ArchiveOpenResultChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ArchiveOpenResultChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ArchiveOpenResultTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ArchiveOpenResultChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 7) ChoiceValue = T126ArchiveOpenResultTable(ExtensionBit, ConstrainedValue);
				switch (T126ArchiveOpenResultChoice)
				{
					case 2: T126ArchiveHeader archiveTimeIncorrect;
					case 7: T126NonStandardIdentifier nonStandardResult;

				}
			}
	}
}


Table T126BitmapAbortReasonTable(ExtensionBit, Choice)
{
	switch
	{
		case (ExtensionBit == 0) && (Choice== 0): "unspecified";
		case (ExtensionBit == 0) && (Choice== 1): "noResources";
		case (ExtensionBit == 0) && (Choice== 2): "outOfPaper";
		case (ExtensionBit == 0) && (Choice== 3): "nonStandardReason";

	}
}

[DataTypeBitAlign]
struct T126BitmapAbortReason = T126BitmapAbortReasonTable(ExtensionBit, T126BitmapAbortReasonChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126BitmapAbortReasonChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126BitmapAbortReasonTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126BitmapAbortReasonChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue = T126BitmapAbortReasonTable(ExtensionBit, ConstrainedValue);
				switch (T126BitmapAbortReasonChoice)
				{
					case 3: T126NonStandardParameter nonStandardReason;

				}
			}
	}
}


Table T126BitmapAttributeTable(ExtensionBit, Choice)
{
	switch
	{
		case (ExtensionBit == 0) && (Choice== 0): "viewState";
		case (ExtensionBit == 0) && (Choice== 1): "zOrder";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardAttribute";
		case (ExtensionBit == 1) && (Choice== 0): "transparencyMask";
	}
}

[DataTypeBitAlign]
struct T126BitmapAttribute = T126BitmapAttributeTable(ExtensionBit, T126BitmapAttributeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126BitmapAttributeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126BitmapAttributeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch(T126BitmapAttributeChoice)
				{
					case 0: T126TransparencyMask transparencyMask;
				}
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126BitmapAttributeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue = T126BitmapAttributeTable(ExtensionBit, ConstrainedValue);
				switch (T126BitmapAttributeChoice)
				{
					case 0: T126ViewState viewState;
					case 1: T126ZOrder zOrder;
					case 2: T126NonStandardParameter nonStandardAttribute;
				}
			}
	}
}


Table T126ZOrderTable(EnumeratedExt, EnumeratedIndex)
{
	switch 
	{
		case (EnumeratedExt == 0) && (EnumeratedIndex== 0): "front";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 1): "back";
	}
}

[DataTypeBitAlign]
struct T126ZOrder
{
	AsnPerEnumerated(1, 1) ZOrder = T126ZOrderTable(EnumeratedExt, EnumeratedIndex);
}

[DataTypeBitAlign]
struct T126DataCheckPoint = FormatString("Size = %d", dataCheckpointCount)
{
	[Post.dataCheckpointCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 100) Size;
	T126TokenID dataCheckpoint[dataCheckpointCount];
}

[DataTypeBitAlign]
struct T126BitmapData	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 dataCheckpointPresent:1;
	UINT8 padBitsPresent:1;

	switch
	{
		case dataCheckpointPresent : T126DataCheckPoint dataCheckpoint;
	}
	switch
	{
		case padBitsPresent : AsnPerConstrainedInteger(1, 256) padBits;
	}
	AsnPerOctetString(1, 8192) data;
	switch
	{
		case ExtensionBit:
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}


Table T126BitmapDestinationAddressTable(ExtensionBit, Choice)
{
	switch
	{
		case (ExtensionBit == 0) && (Choice== 0): "hardCopyDevice";
		case (ExtensionBit == 0) && (Choice== 1): "softCopyImagePlane";
		case (ExtensionBit == 0) && (Choice== 2): "softCopyAnnotationPlane";
		case (ExtensionBit == 0) && (Choice== 3): "softCopyPointerPlane";
		case (ExtensionBit == 1) && (Choice== 0): "nonStandardDestination";
	}
}

[DataTypeBitAlign]
struct T126BitmapDestinationAddress = T126BitmapDestinationAddressTable(ExtensionBit, T126BitmapDestinationAddressChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126BitmapDestinationAddressChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126BitmapDestinationAddressTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch(T126BitmapDestinationAddressChoice)
				{
					case 0: T126NonStandardParameter nonStandardDestination;
				}
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126BitmapDestinationAddressChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue = T126BitmapDestinationAddressTable(ExtensionBit, ConstrainedValue);
				switch (T126BitmapDestinationAddressChoice)
				{
					case 1: T126SoftCopyDataPlaneAddress softCopyImagePlane;
					case 2: T126SoftCopyDataPlaneAddress softCopyAnnotationPlane;
					case 3: T126SoftCopyPointerPlaneAddress softCopyPointerPlane;
				}
			}
	}
}


[DataTypeBitAlign]
struct T126BitmapHeaderUncompressedColorMappingModeDirectMap	//Sequence
{
	T126ColorSpaceSpecifier colorSpace;
	T126ColorResolutionModeSpecifier resolutionMode;
}


[DataTypeBitAlign]
struct T126BitmapHeaderUncompressedColorMappingModePaletteMap	//Sequence
{
	UINT8 ExtensionBit:1;

	T126ColorPalette colorPalette;
	//TODO:
	//bitsPerPixel  INTEGER(1 | 4 | 8)},
	switch
	{
		case ExtensionBit:
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}


Table T126BitmapHeaderUncompressedColorMappingModeTable(ExtensionBit, Choice)
{
	switch
	{
		case (ExtensionBit == 0) && (Choice== 0): "directMap";
		case (ExtensionBit == 0) && (Choice== 1): "paletteMap";
	}
}

[DataTypeBitAlign]
struct T126BitmapHeaderUncompressedColorMappingMode = T126BitmapHeaderUncompressedColorMappingModeTable(ExtensionBit, T126BitmapHeaderUncompressedColorMappingModeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126BitmapHeaderUncompressedColorMappingModeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126BitmapHeaderUncompressedColorMappingModeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126BitmapHeaderUncompressedColorMappingModeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126BitmapHeaderUncompressedColorMappingModeTable(ExtensionBit, ConstrainedValue);
				switch (T126BitmapHeaderUncompressedColorMappingModeChoice)
				{
					case 0: T126BitmapHeaderUncompressedColorMappingModeDirectMap directMap;
					case 1: T126BitmapHeaderUncompressedColorMappingModePaletteMap paletteMap;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126BitmapHeaderUncompressed	= "colorMappingMode=" + colorMappingMode.ToString //Sequence
{
	UINT8 ExtensionBit:1;

	T126BitmapHeaderUncompressedColorMappingMode colorMappingMode;
	switch
	{
		case ExtensionBit:
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T126BitmapHeaderT4	= "twoDimensionalEncoding=" + twoDimensionalEncoding.ToString //Sequence
{
	UINT8 ExtensionBit:1;

	AsnPerBoolean(0) twoDimensionalEncoding;
	switch
	{
		case ExtensionBit:
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T126BitmapHeaderT6	//Sequence
{
	UINT8 ExtensionBit:1;

	switch
	{
		case ExtensionBit:
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T126BitmapHeaderT81	//Sequence
{
	UINT8 ExtensionBit:1;

	T126ColorSpaceSpecifier colorSpace;
	T126ColorResolutionModeSpecifier resolutionMode;
	switch
	{
		case ExtensionBit:
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;

				switch
				{
					case PERSmallNumber >= 0 : UINT8 colorPalettePresent:1;
				}

				switch
				{
					case colorPalettePresent :
						struct RemoteExtensionAddress = colorPalette.ToString
						{
							AsnPerLengthDeterminant length;
							[RemoteExtensionAddressEndOffset = FrameOffset + PERLengthValue]
							T126ColorPalette colorPalette;
							switch
							{
								case FrameBitOffset < RemoteExtensionAddressEndOffset * 8:
									AsnPerPadding(RemoteExtensionAddressEndOffset * 8 - FrameBitOffset) Padding;
							}
						}
				}
			}
	}
}

[DataTypeBitAlign]
struct T126ProgressivePalettes = FormatString("Size = %d", Size)
{
	[Post.T126ProgressivePalettesCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 8) Size;
	T126ColorIndexTable progressivePalettes[T126ProgressivePalettesCount];
}

Table T126ProgressiveModeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "progressivePalettes";
	}
}

[DataTypeBitAlign]
struct T126ProgressiveMode = T126ProgressiveModeTable(ExtensionBit, T126progressiveModeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126progressiveModeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ProgressiveModeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126progressiveModeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 0) ChoiceValue = T126ProgressiveModeTable(ExtensionBit, ConstrainedValue);
				switch (T126progressiveModeChoice)
				{
					case 0: T126ProgressivePalettes progressivePalettes;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126PaletteMap	//Sequence
{
	UINT8 progressiveModePresent:1;
	T126ColorPalette bitmapPalette;
	switch
	{
		case progressiveModePresent : T126ProgressiveMode progressiveMode;
	}   
}

Table T126ColorMappingModeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "paletteMap";
	}
}

[DataTypeBitAlign]
struct T126ColorMappingMode  = T126ColorMappingModeTable(0, Property.T126colorMappingModeChoice)		// CHOICE
{
	_struct NoneExtension
	{
		[Post.T126colorMappingModeChoice = ConstrainedValue]
		AsnPerConstrainedInteger(0, 0) ChoiceValue = T126ColorMappingModeTable(0, Property.ConstrainedValue);
		switch (T126colorMappingModeChoice)
		{
			case 0: T126PaletteMap paletteMap;
		}
	}
}

[DataTypeBitAlign]
struct T126BitmapHeaderT82	= FormatString("colorMappingMode=%s",colorMappingMode.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	T126ColorMappingMode colorMappingMode;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126upperLeft	= yCoordinate.ToString //Sequence
{
	AsnPerConstrainedInteger(0, 65535) yCoordinate;   
}

[DataTypeBitAlign]
struct T126lowerRight	 = yCoordinate.ToString //Sequence
{
	AsnPerConstrainedInteger(0, 65535) yCoordinate;   
}

[DataTypeBitAlign]
struct T126BitmapRegion	= FormatString("UpperLeft=%s,LowerRight=%s",upperLeft.ToString,lowerRight.ToString)//Sequence
{
	T126upperLeft upperLeft;
	T126lowerRight lowerRight;   
}

[DataTypeBitAlign]
struct T126BitmapSize	= FormatString("%sx%s", width.ToString, height.ToString)//Sequence
{
	AsnPerConstrainedInteger(1, 65536) width;
	AsnPerConstrainedInteger(1, 65536) height;   
}

Table T126ButtonEventTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "buttonUp";
		case (ExtensionBit == 0) && (Choice== 1): "buttonDown";
		case (ExtensionBit == 0) && (Choice== 2): "buttonDoubleClick";
		case (ExtensionBit == 0) && (Choice== 3): "buttonTripleClick";
		case (ExtensionBit == 0) && (Choice== 4): "buttonQuadClick";
		case (ExtensionBit == 0) && (Choice== 5): "nonStandardButtonEvent";
	}
}

[DataTypeBitAlign]
struct T126ButtonEvent = T126ButtonEventTable(ExtensionBit, T126ButtonEventChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ButtonEventChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ButtonEventTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ButtonEventChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 5) ChoiceValue = T126ButtonEventTable(ExtensionBit, ConstrainedValue);
				switch (T126ButtonEventChoice)
				{
					case 5: T126NonStandardIdentifier nonStandardButtonEvent;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126gamut //Sequence
{
	AsnPerConstrainedInteger(-32768, 32767) lSpan;
	AsnPerConstrainedInteger(-32768, 32767) lOffset;
	AsnPerConstrainedInteger(-32768, 32767) aSpan;
	AsnPerConstrainedInteger(-32768, 32767) aOffset;
	AsnPerConstrainedInteger(-32768, 32767) bSpan;
	AsnPerConstrainedInteger(-32768, 32767) bOffset;   
}

[DataTypeBitAlign]
struct T126generalCIELabParameters	//Sequence
{
	UINT8 colorTemperaturePresent:1;
	UINT8 gamutPresent:1;
	switch
	{
		case colorTemperaturePresent : AsnPerSemiConstrainedInteger(0) colorTemperature;
	}
	switch
	{
		case gamutPresent : T126gamut gamut;
	}   
}

Table T126predefinedCIELabSpaceTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "nonStandardCIELabSpace";
	}
}

[DataTypeBitAlign]
struct T126predefinedCIELabSpace  = T126predefinedCIELabSpaceTable(0, Property.T126predefinedCIELabSpaceChoice)		// CHOICE
{
	_struct NoneExtension
	{
		[Post.T126predefinedCIELabSpaceChoice = ConstrainedValue]
		AsnPerConstrainedInteger(0, 0) ChoiceValue = T126predefinedCIELabSpaceTable(0, Property.ConstrainedValue);
		switch (T126predefinedCIELabSpaceChoice)
		{
			case 0: T126NonStandardParameter nonStandardCIELabSpace;
		}
	}
}

Table T126ColorAccuracyEnhancementCIELabTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "predefinedCIELabSpace";
		case (ExtensionBit == 0) && (Choice== 1): "generalCIELabParameters";
	}
}

[DataTypeBitAlign]
struct T126ColorAccuracyEnhancementCIELab = T126ColorAccuracyEnhancementCIELabTable(ExtensionBit, T126ColorAccuracyEnhancementCIELabChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ColorAccuracyEnhancementCIELabChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ColorAccuracyEnhancementCIELabTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ColorAccuracyEnhancementCIELabChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126ColorAccuracyEnhancementCIELabTable(ExtensionBit, ConstrainedValue);
				switch (T126ColorAccuracyEnhancementCIELabChoice)
				{
					case 0: T126predefinedCIELabSpace predefinedCIELabSpace;
					case 1: T126generalCIELabParameters generalCIELabParameters;
				}
			}
	}
}

Table T126predefinedGreyscaleSpaceTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "nonStandardGreyscaleSpace";
	}
}

[DataTypeBitAlign]
struct T126predefinedGreyscaleSpace = T126predefinedGreyscaleSpaceTable(ExtensionBit, T126predefinedGreyscaleSpaceChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126predefinedGreyscaleSpaceChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126predefinedGreyscaleSpaceTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126predefinedGreyscaleSpaceChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 0) ChoiceValue = T126predefinedGreyscaleSpaceTable(ExtensionBit, ConstrainedValue);
				switch (T126predefinedGreyscaleSpaceChoice)
				{
					case 0: T126NonStandardParameter nonStandardGreyscaleSpace;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126generalGreyscaleParameters	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 gammaPresent:1;
	switch
	{
		case gammaPresent : AsnPerSemiConstrainedReal(0) gamma;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126ColorAccuracyEnhancementGreyscaleTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "predefinedGreyscaleSpace";
		case (ExtensionBit == 0) && (Choice== 1): "generalGreyscaleParameters";
	}
}

[DataTypeBitAlign]
struct T126ColorAccuracyEnhancementGreyscale = T126ColorAccuracyEnhancementGreyscaleTable(ExtensionBit, T126ColorAccuracyEnhancementGreyscaleChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ColorAccuracyEnhancementGreyscaleChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ColorAccuracyEnhancementGreyscaleTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ColorAccuracyEnhancementGreyscaleChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126ColorAccuracyEnhancementGreyscaleTable(ExtensionBit, ConstrainedValue);
				switch (T126ColorAccuracyEnhancementGreyscaleChoice)
				{
					case 0: T126predefinedGreyscaleSpace predefinedGreyscaleSpace;
					case 1: T126generalGreyscaleParameters generalGreyscaleParameters;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126Primaries = FormatString("(%s, %s, %s)", red.ToString, green.ToString, blue.ToString)	//Sequence
{
	T126ColorCIExyChromaticity red;
	T126ColorCIExyChromaticity green;
	T126ColorCIExyChromaticity blue;   
}


[DataTypeBitAlign]
struct T126GeneralRGBParameters	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 gammaPresent:1;
	UINT8 colorTemperaturePresent:1;
	UINT8 primariesPresent:1;
	
	switch
	{
		case gammaPresent : AsnPerSemiConstrainedReal(0) gamma;
	}
	switch
	{
		case colorTemperaturePresent : AsnPerSemiConstrainedInteger(0) colorTemperature;
	}
	switch
	{
		case primariesPresent : T126Primaries primaries;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126predefinedRGBSpaceTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "nonStandardRGBSpace";
	}
}

[DataTypeBitAlign]
struct T126PredefinedRGBSpace = T126predefinedRGBSpaceTable(ExtensionBit, T126predefinedRGBSpaceChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126predefinedRGBSpaceChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126predefinedRGBSpaceTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126predefinedRGBSpaceChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 0) ChoiceValue = T126predefinedRGBSpaceTable(ExtensionBit, ConstrainedValue);
				switch (T126predefinedRGBSpaceChoice)
				{
					case 0: T126NonStandardParameter nonStandardRGBSpace;
				}
			}
	}
}

Table T126ColorAccuracyEnhancementRGBTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "predefinedRGBSpace";
		case (ExtensionBit == 0) && (Choice== 1): "generalRGBParameters";
	}
}

[DataTypeBitAlign]
struct T126ColorAccuracyEnhancementRGB = T126ColorAccuracyEnhancementRGBTable(ExtensionBit, T126ColorAccuracyEnhancementRGBChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ColorAccuracyEnhancementRGBChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ColorAccuracyEnhancementRGBTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ColorAccuracyEnhancementRGBChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126ColorAccuracyEnhancementRGBTable(ExtensionBit, ConstrainedValue);
				switch (T126ColorAccuracyEnhancementRGBChoice)
				{
					case 0: T126PredefinedRGBSpace predefinedRGBSpace;
					case 1: T126GeneralRGBParameters generalRGBParameters;
				}
			}
	}
}

Table T126predefinedYCbCrSpaceTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "cCIR709";
		case (ExtensionBit == 0) && (Choice== 1): "nonStandardRGBSpace";

	}
}

[DataTypeBitAlign]
struct T126PredefinedYCbCrSpace = T126predefinedYCbCrSpaceTable(ExtensionBit, T126predefinedYCbCrSpaceChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126predefinedYCbCrSpaceChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126predefinedYCbCrSpaceTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126predefinedYCbCrSpaceChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126predefinedYCbCrSpaceTable(ExtensionBit, ConstrainedValue);
				switch (T126predefinedYCbCrSpaceChoice)
				{
					case 1: T126NonStandardParameter nonStandardRGBSpace;
				}
			}
	}
}


[DataTypeBitAlign]
struct T126GeneralYCbCrParameters	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 gammaPresent:1;
	UINT8 colorTemperaturePresent:1;
	UINT8 primariesPresent:1;
	switch
	{
		case gammaPresent : AsnPerSemiConstrainedReal(0) gamma;
	}
	switch
	{
		case colorTemperaturePresent : AsnPerSemiConstrainedInteger(0) colorTemperature;
	}
	switch
	{
		case primariesPresent : T126Primaries primaries;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126ColorAccuracyEnhancementYCbCrTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "predefinedYCbCrSpace";
		case (ExtensionBit == 0) && (Choice== 1): "generalYCbCrParameters";

	}
}

[DataTypeBitAlign]
struct T126ColorAccuracyEnhancementYCbCr = T126ColorAccuracyEnhancementYCbCrTable(ExtensionBit, T126ColorAccuracyEnhancementYCbCrChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ColorAccuracyEnhancementYCbCrChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ColorAccuracyEnhancementYCbCrTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ColorAccuracyEnhancementYCbCrChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126ColorAccuracyEnhancementYCbCrTable(ExtensionBit, ConstrainedValue);
				switch (T126ColorAccuracyEnhancementYCbCrChoice)
				{
					case 0: T126PredefinedYCbCrSpace predefinedYCbCrSpace;
					case 1: T126GeneralYCbCrParameters generalYCbCrParameters;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126ColorCIELab	= FormatString("(%s, %s, %s)", l.ToString, a.ToString, b.ToString)//Sequence
{
	AsnPerConstrainedInteger(0, 255) l;
	AsnPerConstrainedInteger(0, 255) a;
	AsnPerConstrainedInteger(0, 255) b;   
}

[DataTypeBitAlign]
struct T126ColorCIExyChromaticity	//Sequence
{
	AsnPerReal(0, T126One) x;
	AsnPerReal(0, T126One) y;
}

[DataTypeBitAlign]
struct T126ColorIndexTable = FormatString("Count = %d", T126ColorIndexTableCount)
{
	[Post.T126ColorIndexTableCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 256) Size;
	AsnPerConstrainedInteger(0, 255) ColorIndexTable[T126ColorIndexTableCount];
}

[DataTypeBitAlign]
struct T126Palette = FormatString("Count = %d", T126PaletteCount)
{
	[Post.T126PaletteCount = ConstrainedValue]
	AsnPerConstrainedInteger(2, 256) Size;
	T126ColorRGB palette[T126PaletteCount];
}

[DataTypeBitAlign]
struct T126PaletteRGB	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 enhancementPresent:1;
	T126Palette palette;
	switch
	{
		case enhancementPresent : T126ColorAccuracyEnhancementRGB enhancement;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126CIELabPalette = FormatString("Count = %d", T126CIELabPaletteCount)
{
	[Post.T126CIELabPaletteCount = ConstrainedValue]
	AsnPerConstrainedInteger(2, 256) Size;
	T126ColorCIELab palette[T126CIELabPaletteCount];
}

[DataTypeBitAlign]
struct T126PaletteCIELab	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 enhancementPresent:1;
	T126CIELabPalette palette;
	switch
	{
		case enhancementPresent : T126ColorAccuracyEnhancementCIELab enhancement;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126YCbCrPalette = FormatString("Count = %d", T126YCbCrPaletteCount)
{
	[Post.T126YCbCrPaletteCount = ConstrainedValue]
	AsnPerConstrainedInteger(2, 256) Size;
	T126ColorYCbCr palette[T126YCbCrPaletteCount];
}

[DataTypeBitAlign]
struct T126paletteYCbCr	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 enhancementPresent:1;
	T126YCbCrPalette palette;
	switch
	{
		case enhancementPresent : T126ColorAccuracyEnhancementYCbCr enhancement;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126colorLookUpTableTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "paletteRGB";
		case (ExtensionBit == 0) && (Choice== 1): "paletteCIELab";
		case (ExtensionBit == 0) && (Choice== 2): "paletteYCbCr";
		case (ExtensionBit == 0) && (Choice== 3): "nonStandardPalette";

	}
}

[DataTypeBitAlign]
struct T126ColorLookUpTable = T126colorLookUpTableTable(ExtensionBit, T126colorLookUpTableChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126colorLookUpTableChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126colorLookUpTableTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126colorLookUpTableChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue = T126colorLookUpTableTable(ExtensionBit, ConstrainedValue);
				switch (T126colorLookUpTableChoice)
				{
					case 0: T126PaletteRGB paletteRGB;
					case 1: T126PaletteCIELab paletteCIELab;
					case 2: T126paletteYCbCr paletteYCbCr;
					case 3: T126NonStandardParameter nonStandardPalette;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126ColorPalette	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 transparentEntryPresent:1;
	T126ColorLookUpTable colorLookUpTable;
	switch
	{
		case transparentEntryPresent : AsnPerConstrainedInteger(0, 255) transparentEntry;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126ColorResolutionModeSpecifierTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "resolution4-4-4";
		case (ExtensionBit == 0) && (Choice== 1): "resolution-4-2-2";
		case (ExtensionBit == 0) && (Choice== 2): "resolution-4-2-0";
		case (ExtensionBit == 0) && (Choice== 3): "nonStandardResolutionMode";
	}
}

[DataTypeBitAlign]
struct T126ColorResolutionModeSpecifier = T126ColorResolutionModeSpecifierTable(ExtensionBit, T126ColorResolutionModeSpecifierChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ColorResolutionModeSpecifierChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ColorResolutionModeSpecifierTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ColorResolutionModeSpecifierChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue = T126ColorResolutionModeSpecifierTable(ExtensionBit, ConstrainedValue);
				switch (T126ColorResolutionModeSpecifierChoice)
				{
					case 3: T126NonStandardIdentifier nonStandardResolutionMode;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126ColorRGB	= FormatString("(%s, %s, %s)", r.ToString, g.ToString, b.ToString)//Sequence
{
	AsnPerConstrainedInteger(0, 255) r;
	AsnPerConstrainedInteger(0, 255) g;
	AsnPerConstrainedInteger(0, 255) b;   
}

[DataTypeBitAlign]
struct T126Greyscale = accuracyEnhancementPresent ? accuracyEnhancement.ToString : ""	//Sequence
{
	UINT8 accuracyEnhancementPresent:1;
	switch
	{
		case accuracyEnhancementPresent : T126ColorAccuracyEnhancementGreyscale accuracyEnhancement;
	}   
}

[DataTypeBitAlign]
struct T126yCbCr = accuracyEnhancementPresent ? accuracyEnhancement.ToString : ""	//Sequence
{
	UINT8 accuracyEnhancementPresent:1;
	switch
	{
		case accuracyEnhancementPresent : T126ColorAccuracyEnhancementYCbCr accuracyEnhancement;
	}   
}

[DataTypeBitAlign]
struct T126rgb = accuracyEnhancementPresent ? accuracyEnhancement.ToString : ""	//Sequence
{
	UINT8 accuracyEnhancementPresent:1;
	switch
	{
		case accuracyEnhancementPresent : T126ColorAccuracyEnhancementRGB accuracyEnhancement;
	}   
}

[DataTypeBitAlign]
struct T126cieLab = accuracyEnhancementPresent ? accuracyEnhancement.ToString : ""	//Sequence
{
	UINT8 accuracyEnhancementPresent:1;
	switch
	{
		case accuracyEnhancementPresent : T126ColorAccuracyEnhancementCIELab accuracyEnhancement;
	}   
}

Table T126ColorSpaceSpecifierTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "greyscale";
		case (ExtensionBit == 0) && (Choice== 1): "yCbCr";
		case (ExtensionBit == 0) && (Choice== 2): "rgb";
		case (ExtensionBit == 0) && (Choice== 3): "cieLab";
		case (ExtensionBit == 0) && (Choice== 4): "nonStandardColorSpace";
	}
}

[DataTypeBitAlign]
struct T126ColorSpaceSpecifier = T126ColorSpaceSpecifierTable(ExtensionBit, T126ColorSpaceSpecifierChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ColorSpaceSpecifierChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ColorSpaceSpecifierTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ColorSpaceSpecifierChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 4) ChoiceValue = T126ColorSpaceSpecifierTable(ExtensionBit, ConstrainedValue);
				switch (T126ColorSpaceSpecifierChoice)
				{
					case 0: T126Greyscale greyscale;
					case 1: T126yCbCr yCbCr;
					case 2: T126rgb rgb;
					case 3: T126cieLab cieLab;
					case 4: T126NonStandardIdentifier nonStandardColorSpace;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126ColorYCbCr	 = FormatString("(%s, %s, %s)", y.ToString, cb.ToString, cr.ToString) //Sequence
{
	AsnPerConstrainedInteger(0, 255) y;
	AsnPerConstrainedInteger(0, 255) cb;
	AsnPerConstrainedInteger(0, 255) cr;   
}

Table T126ConductorPrivilegeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "workspacePrivilege";
		case (ExtensionBit == 0) && (Choice== 1): "annotationPrivilege";
		case (ExtensionBit == 0) && (Choice== 2): "imagePrivilege";
		case (ExtensionBit == 0) && (Choice== 3): "pointingPrivilege";
		case (ExtensionBit == 0) && (Choice== 4): "remoteKeyEventPrivilege";
		case (ExtensionBit == 0) && (Choice== 5): "remotePointingEventPrivilege";
		case (ExtensionBit == 0) && (Choice== 6): "remotePrintingPrivilege";
		case (ExtensionBit == 0) && (Choice== 7): "archiveCreateWritePrivilege";
		case (ExtensionBit == 0) && (Choice== 8): "nonStandardPrivilege";
	}
}

[DataTypeBitAlign]
struct T126ConductorPrivilege = T126ConductorPrivilegeTable(ExtensionBit, T126ConductorPrivilegeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ConductorPrivilegeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ConductorPrivilegeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ConductorPrivilegeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 8) ChoiceValue = T126ConductorPrivilegeTable(ExtensionBit, ConstrainedValue);
				switch (T126ConductorPrivilegeChoice)
				{
					case 8: T126NonStandardIdentifier nonStandardPrivilege;
				}
			}
	}
}

Table T126DrawingAttributeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "penColor";
		case (ExtensionBit == 0) && (Choice== 1): "fillColor";
		case (ExtensionBit == 0) && (Choice== 2): "penThickness";
		case (ExtensionBit == 0) && (Choice== 3): "penNib";
		case (ExtensionBit == 0) && (Choice== 4): "lineStyle";
		case (ExtensionBit == 0) && (Choice== 5): "highlight";
		case (ExtensionBit == 0) && (Choice== 6): "viewState";
		case (ExtensionBit == 0) && (Choice== 7): "zOrder";
		case (ExtensionBit == 0) && (Choice== 8): "nonStandardAttribute";
	}
}

[DataTypeBitAlign]
struct T126DrawingAttribute = T126DrawingAttributeTable(ExtensionBit, T126DrawingAttributeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126DrawingAttributeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126DrawingAttributeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			struct NoneExtension
			{
				[Post.T126DrawingAttributeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 8) ChoiceValue = T126DrawingAttributeTable(ExtensionBit, ConstrainedValue);
				switch (T126DrawingAttributeChoice)
				{
					case 0: T126WorkspaceColor penColor;
					case 1: T126WorkspaceColor fillColor;
					case 2: T126PenThickness penThickness;
					case 3: T126PenNib penNib;
					case 4: T126LineStyle lineStyle;
					case 5: AsnPerBoolean(0) highlight;
					case 6: T126ViewState viewState;
					case 7: T126ZOrder zOrder;
					case 8: T126NonStandardParameter nonStandardAttribute;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126DrawingAttributes = FormatString("Count = %d" , T126DrawingAttributesCount)
{
	[Post.T126DrawingAttributesCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126DrawingAttribute attributes[T126DrawingAttributesCount];
}

Table T126DrawingDestinationAddressTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "softCopyAnnotationPlane";
		case (ExtensionBit == 1) && (Choice== 0): "nonStandardDestination";
	}
}

[DataTypeBitAlign]
struct T126DrawingDestinationAddress = T126DrawingDestinationAddressTable(ExtensionBit, T126DrawingDestinationAddressChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126DrawingDestinationAddressChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126DrawingDestinationAddressTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch(T126DrawingDestinationAddressChoice)
				{
					case 0: T126NonStandardParameter nonStandardDestination;
				}
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126DrawingDestinationAddressChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 0) ChoiceValue = T126DrawingDestinationAddressTable(ExtensionBit, ConstrainedValue);
				switch (T126DrawingDestinationAddressChoice)
				{
					case 0: T126SoftCopyDataPlaneAddress softCopyAnnotationPlane;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126DataPlaneID = DataPlaneID.ToString
{
	AsnPerConstrainedInteger(0, 255) DataPlaneID;   
}

Table T126DrawingTypeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "point";
		case (ExtensionBit == 0) && (Choice== 1): "openPolyLine";
		case (ExtensionBit == 0) && (Choice== 2): "closedPolyLine";
		case (ExtensionBit == 0) && (Choice== 3): "rectangle";
		case (ExtensionBit == 0) && (Choice== 4): "ellipse";
		case (ExtensionBit == 0) && (Choice== 5): "nonStandardDrawingType";
	}
}

[DataTypeBitAlign]
struct T126DrawingType = T126DrawingTypeTable(ExtensionBit, T126DrawingTypeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126DrawingTypeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126DrawingTypeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126DrawingTypeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 5) ChoiceValue = T126DrawingTypeTable(ExtensionBit, ConstrainedValue);
				switch (T126DrawingTypeChoice)
				{
					case 5: T126NonStandardIdentifier nonStandardDrawingType;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126DSMCCTap	= FormatString("use = %s, id = %s, associationTag = %s", 
								use.ToString, id.ToString, associationTag.ToString) //Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 selectorPresent:1;
	AsnPerConstrainedInteger(0, 65535) use;
	AsnPerConstrainedInteger(0, 65535) id;
	AsnPerConstrainedInteger(0, 65535) associationTag;
	switch
	{
		case selectorPresent : AsnPerOctetString(1, 256) selector;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126object	= "handle=" + destinationObjectHandle.ToString //Sequence
{
	T126Handle destinationObjectHandle;   
}

[DataTypeBitAlign]
struct T126objectList = FormatString("Count = %d", T126objectListCount)
{
	[Post.T126objectListCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 65536) Size;
	T126object objectList[T126objectListCount];
}

[DataTypeBitAlign]
struct T126EditablePlaneCopyDescriptor	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 destinationOffsetPresent:1;
	T126objectList objectList;
	switch
	{
		case destinationOffsetPresent : T126WorkspacePoint destinationOffset;
	}
	AsnPerBoolean(0) planeClearFlag;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126KeyCodeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "character";
		case (ExtensionBit == 0) && (Choice== 1): "fkey";
		case (ExtensionBit == 0) && (Choice== 2): "upArrow";
		case (ExtensionBit == 0) && (Choice== 3): "downArrow";
		case (ExtensionBit == 0) && (Choice== 4): "leftArrow";
		case (ExtensionBit == 0) && (Choice== 5): "rightArrow";
		case (ExtensionBit == 0) && (Choice== 6): "pageUp";
		case (ExtensionBit == 0) && (Choice== 7): "pageDown";
		case (ExtensionBit == 0) && (Choice== 8): "home";
		case (ExtensionBit == 0) && (Choice== 9): "end";
		case (ExtensionBit == 0) && (Choice== 10): "insert";
		case (ExtensionBit == 0) && (Choice== 11): "delete";
		case (ExtensionBit == 0) && (Choice== 12): "nonStandardKey";
	}
}

[DataTypeBitAlign]
struct T126KeyCode = T126KeyCodeTable(ExtensionBit, T126KeyCodeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126KeyCodeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126KeyCodeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126KeyCodeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 12) ChoiceValue = T126KeyCodeTable(ExtensionBit, ConstrainedValue);
				switch (T126KeyCodeChoice)
				{
					case 0: AsnPerBMPString(1,1) character;
					case 1: AsnPerConstrainedInteger(1, 32) fkey;
					case 12: T126NonStandardIdentifier nonStandardKey;
				}
			}
	}
}

Table T126KeyModifierTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "leftAlt";
		case (ExtensionBit == 0) && (Choice== 1): "rightAlt";
		case (ExtensionBit == 0) && (Choice== 2): "leftShift";
		case (ExtensionBit == 0) && (Choice== 3): "rightShift";
		case (ExtensionBit == 0) && (Choice== 4): "leftControl";
		case (ExtensionBit == 0) && (Choice== 5): "rightControl";
		case (ExtensionBit == 0) && (Choice== 6): "leftSpecial";
		case (ExtensionBit == 0) && (Choice== 7): "rightSpecial";
		case (ExtensionBit == 0) && (Choice== 8): "numberPad";
		case (ExtensionBit == 0) && (Choice== 9): "scrollLock";
		case (ExtensionBit == 0) && (Choice== 10): "nonStandardModifier";
	}
}

[DataTypeBitAlign]
struct T126KeyModifier = T126KeyModifierTable(ExtensionBit, T126KeyModifierChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126KeyModifierChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126KeyModifierTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126KeyModifierChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 10) ChoiceValue = T126KeyModifierTable(ExtensionBit, ConstrainedValue);
				switch (T126KeyModifierChoice)
				{
					case 10: T126NonStandardIdentifier nonStandardModifier;
				}
			}
	}
}

Table T126KeyPressStateTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "none";
		case (ExtensionBit == 0) && (Choice== 1): "keyPress";
		case (ExtensionBit == 0) && (Choice== 2): "keyDown";
		case (ExtensionBit == 0) && (Choice== 3): "keyUp";
		case (ExtensionBit == 0) && (Choice== 4): "nonStandardKeyPressState";
	}
}

[DataTypeBitAlign]
struct T126KeyPressState = T126KeyPressStateTable(ExtensionBit, T126KeyPressStateChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126KeyPressStateChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126KeyPressStateTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126KeyPressStateChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 4) ChoiceValue = T126KeyPressStateTable(ExtensionBit, ConstrainedValue);
				switch (T126KeyPressStateChoice)
				{
					case 4: T126NonStandardIdentifier nonStandardKeyPressState;
				}
			}
	}
}

Table T126LineStyleTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "solid";
		case (ExtensionBit == 0) && (Choice== 1): "dashed";
		case (ExtensionBit == 0) && (Choice== 2): "dotted";
		case (ExtensionBit == 0) && (Choice== 3): "dash-dot";
		case (ExtensionBit == 0) && (Choice== 4): "dash-dot-dot";
		case (ExtensionBit == 0) && (Choice== 5): "two-tone";
		case (ExtensionBit == 0) && (Choice== 6): "nonStandardStyle";
	}
}

[DataTypeBitAlign]
struct T126LineStyle = T126LineStyleTable(ExtensionBit, T126LineStyleChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126LineStyleChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126LineStyleTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126LineStyleChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 6) ChoiceValue = T126LineStyleTable(ExtensionBit, ConstrainedValue);
				switch (T126LineStyleChoice)
				{
					case 6: T126NonStandardIdentifier nonStandardStyle;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126MCSUserID	= MCSUserID.ToString
{
	AsnPerConstrainedInteger(1001, 65535) MCSUserID;   
}

[DataTypeBitAlign]
struct T126H221NonStandardIdentifier = PEROctetStringValue
{
	[Post.NonStandardID = PEROctetStringValue]
	AsnPerOctetString(4,255) T126H221NonStandardIdentifier;
}

Table T126NonStandardIdentifierTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "object";
		case (ExtensionBit == 0) && (Choice== 1): "h221nonStandard";
	}
}

[DataTypeBitAlign]
struct T126NonStandardIdentifier  = T126NonStandardIdentifierTable(0, Property.T126NonStandardIdentifierChoice)		// CHOICE
{
	_struct NoneExtension
	{
		[Post.T126NonStandardIdentifierChoice = ConstrainedValue]
		AsnPerConstrainedInteger(0, 1) ChoiceValue = T126NonStandardIdentifierTable(0, Property.ConstrainedValue);
		switch (T126NonStandardIdentifierChoice)
		{
			case 0: AsnPerObjectIdentifier obj;
			case 1: T126H221NonStandardIdentifier h221nonStandard;
		}
	}
}

[DataTypeBitAlign]
struct T126NonStandardParameter	//Sequence
{
	T126NonStandardIdentifier nonStandardIdentifier;
	switch (NonStandardID)
	{
		// Netmeeting's extension
		case 0xB500534C4269746D6170323400:
			[PacketType = "BitmapInfoHeader"]
			_struct NetmeetingBitmap
			{
				AsnPerLengthDeterminant DeterminantLength;
				NetmeetingBITMAPINFOHEADER NetmeetingBITMAPINFOHEADER;
			}
		case 0xB5004C53546578743200:
			[PacketType = "MSTextPDU"]
			_struct NetmeetingText
			{
				AsnPerLengthDeterminant DeterminantLength;
				NetmeetingMSTextPDU NetmeetingMSTextPDU;
			}
		default:
			AsnPerOctetString(-1, -1) data;
	}
}

Table T126PenNibTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "circular";
		case (ExtensionBit == 0) && (Choice== 1): "square";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardNib";
	}
}

[DataTypeBitAlign]
struct T126PenNib = T126PenNibTable(ExtensionBit, T126PenNibChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126PenNibChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126PenNibTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126PenNibChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue = T126PenNibTable(ExtensionBit, ConstrainedValue);
				switch (T126PenNibChoice)
				{
					case 2: T126NonStandardIdentifier nonStandardNib;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126PenThickness	 = PenThickness.ToString //Sequence
{
	AsnPerConstrainedInteger(1, 255) PenThickness;   
}

[DataTypeBitAlign]
struct T126PermanentPlaneCopyDescriptor	= FormatString("sourceRegion=%s,destinationRegion=%s",sourceRegion.ToString,destinationRegion.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	T126WorkspaceRegion sourceRegion;
	T126WorkspaceRegion destinationRegion;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126general	= FormatString("numerator=%s,denominator=%s",numerator.ToString,denominator.ToString)//Sequence
{
	AsnPerConstrainedInteger(1, 65535) numerator;
	AsnPerConstrainedInteger(1, 65535) denominator;   
}

Table T126PixelAspectRatioTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "square";
		case (ExtensionBit == 0) && (Choice== 1): "cif";
		case (ExtensionBit == 0) && (Choice== 2): "fax1";
		case (ExtensionBit == 0) && (Choice== 3): "fax2";
		case (ExtensionBit == 0) && (Choice== 4): "general";
		case (ExtensionBit == 0) && (Choice== 5): "nonStandardAspectRatio";
	}
}

[DataTypeBitAlign]
struct T126PixelAspectRatio = T126PixelAspectRatioTable(ExtensionBit, T126PixelAspectRatioChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126PixelAspectRatioChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126PixelAspectRatioTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126PixelAspectRatioChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 5) ChoiceValue = T126PixelAspectRatioTable(ExtensionBit, ConstrainedValue);
				switch (T126PixelAspectRatioChoice)
				{
					case 4: T126general general;
					case 5: T126NonStandardIdentifier nonStandardAspectRatio;
				}
			}
	}
}

Table T126PlaneAttributeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "protection";
		case (ExtensionBit == 0) && (Choice== 1): "nonStandardAttribute";
	}
}

[DataTypeBitAlign]
struct T126PlaneAttribute = T126PlaneAttributeTable(ExtensionBit, T126PlaneAttributeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126PlaneAttributeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126PlaneAttributeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126PlaneAttributeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126PlaneAttributeTable(ExtensionBit, ConstrainedValue);
				switch (T126PlaneAttributeChoice)
				{
					case 0: T126PlaneProtection protection;
					case 1: T126NonStandardParameter nonStandardAttribute;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126PlaneProtection = protected.ToString	//Sequence
{
	UINT8 ExtensionBit:1;
	AsnPerBoolean(0) protected;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126PlaneUsageTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "annotation";
		case (ExtensionBit == 0) && (Choice== 1): "image";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardPlaneUsage";
	}
}

[DataTypeBitAlign, T126PlaneUsageValue = T126PlaneUsageValue + " " + T126PlaneUsageTable(ExtensionBit, T126PlaneUsageChoice)]
struct T126PlaneUsage = T126PlaneUsageTable(ExtensionBit, T126PlaneUsageChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126PlaneUsageChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126PlaneUsageTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126PlaneUsageChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue = T126PlaneUsageTable(ExtensionBit, ConstrainedValue);
				switch (T126PlaneUsageChoice)
				{
					case 2: T126NonStandardIdentifier nonStandardPlaneUsage;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126pointsDiff4 = FormatString("Count = %d", T126pointsDiff4Count)
{
	[Post.T126pointsDiff4Count = ConstrainedValue]
	AsnPerConstrainedInteger(0, 255) Size;
	T126PointDiff4 pointsDiff4[T126pointsDiff4Count];
}

[DataTypeBitAlign]
struct T126pointsDiff8 = FormatString("Count = %d", T126pointsDiff8Count)
{
	[Post.T126pointsDiff8Count = ConstrainedValue]
	AsnPerConstrainedInteger(0, 255) Size;
	T126PointDiff8 pointsDiff8[T126pointsDiff8Count];
}

[DataTypeBitAlign]
struct T126pointsDiff16 = FormatString("Count = %d", T126pointsDiff16Count)
{
	[Post.T126pointsDiff16Count = ConstrainedValue]
	AsnPerConstrainedInteger(0, 255) Size;
	T126PointDiff16 pointsDiff16[T126pointsDiff16Count];
}

Table T126PointListTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "pointsDiff4";
		case (ExtensionBit == 0) && (Choice== 1): "pointsDiff8";
		case (ExtensionBit == 0) && (Choice== 2): "pointsDiff16";
	}
}

[DataTypeBitAlign]
struct T126PointList  = T126PointListTable(0, Property.T126PointListChoice)		// CHOICE
{
	_struct NoneExtension
	{
		[Post.T126PointListChoice = ConstrainedValue]
		AsnPerConstrainedInteger(0, 2) ChoiceValue = T126PointListTable(0, Property.ConstrainedValue);
		switch (T126PointListChoice)
		{
			case 0: T126pointsDiff4 pointsDiff4;
			case 1: T126pointsDiff8 pointsDiff8;
			case 2: T126pointsDiff16 pointsDiff16;
		}
	}
}


[DataTypeBitAlign]
struct T126point	= FormatString("initialIndex=%s, initialPointEdit=%s",initialIndex.ToString,initialPointEdit.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 subsequentPointEditsPresent:1;
	AsnPerConstrainedInteger(0, 65534) initialIndex;
	T126PointDiff16 initialPointEdit;
	switch
	{
		case subsequentPointEditsPresent : T126PointList subsequentPointEdits;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126PointListEdits = FormatString("Count = %s", T126PointListEditsCount)
{
	[Post.T126PointListEditsCount = ConstrainedValue]
	AsnPerConstrainedInteger(1,255 ) Size;
	T126point PointListEdits[T126PointListEditsCount];
}


[DataTypeBitAlign]
struct T126PointDiff4	= FormatString("(%s, %s)", xCoordinate.ToString, yCoordinate.ToString) //Sequence
{
	AsnPerConstrainedInteger(-8, 7) xCoordinate;
	AsnPerConstrainedInteger(-8, 7) yCoordinate;   
}

[DataTypeBitAlign]
struct T126PointDiff8	= FormatString("(%s, %s)", xCoordinate.ToString, yCoordinate.ToString) //Sequence
{
	AsnPerConstrainedInteger(-128, 127) xCoordinate;
	AsnPerConstrainedInteger(-128, 127) yCoordinate;   
}

[DataTypeBitAlign]
struct T126PointDiff16	= FormatString("(%s, %s)", xCoordinate.ToString, yCoordinate.ToString) //Sequence
{
	AsnPerConstrainedInteger(-32768, 32767) xCoordinate;
	AsnPerConstrainedInteger(-32768, 32767) yCoordinate;   
}

Table T126RemoteEventDestinationAddressTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "softCopyWorkspace";
		case (ExtensionBit == 1) && (Choice== 0): "nonStandardDestination";
	}
}

[DataTypeBitAlign]
struct T126RemoteEventDestinationAddress = T126RemoteEventDestinationAddressTable(ExtensionBit, T126RemoteEventDestinationAddressChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126RemoteEventDestinationAddressChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126RemoteEventDestinationAddressTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch(T126RemoteEventDestinationAddressChoice)
				{
					case 0: T126NonStandardParameter nonStandardDestination;
				}
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126RemoteEventDestinationAddressChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 0) ChoiceValue = T126RemoteEventDestinationAddressTable(ExtensionBit, ConstrainedValue);
				switch (T126RemoteEventDestinationAddressChoice)
				{
					case 0: T126Handle softCopyWorkspace;
				}
			}
	}
}

Table T126RemoteEventPermissionTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "keyboardEvent";
		case (ExtensionBit == 0) && (Choice== 1): "pointingDeviceEvent";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardEvent";
	}
}

[DataTypeBitAlign]
struct T126RemoteEventPermission = T126RemoteEventPermissionTable(ExtensionBit, T126RemoteEventPermissionChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126RemoteEventPermissionChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126RemoteEventPermissionTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126RemoteEventPermissionChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue = T126RemoteEventPermissionTable(ExtensionBit, ConstrainedValue);
				switch (T126RemoteEventPermissionChoice)
				{
					case 2: T126NonStandardIdentifier nonStandardEvent;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126RotationSpecifier = FormatString("rotationAngle=%s, rotationAxis=%s",rotationAngle.ToString,rotationAxis.ToString)//Sequence
{
	AsnPerConstrainedInteger(0, 21599) rotationAngle;
	T126PointDiff16 rotationAxis;   
}


[DataTypeBitAlign]
struct T126SoftCopyDataPlaneAddress	= FormatString("handle=%s,p laneID=%s", workspaceHandle.ToString, plane.ToString)//Sequence
{
	T126Handle workspaceHandle;
	T126DataPlaneID plane;   
}

[DataTypeBitAlign]
struct T126SoftCopyPointerPlaneAddress	=workspaceHandle.ToString//Sequence
{
	T126Handle workspaceHandle;   
}

[DataTypeBitAlign]
struct T126SourceDisplayIndicator	//Sequence
{
	UINT8 ExtensionBit:1;
	AsnPerSemiConstrainedReal(0) displayAspectRatio;
	AsnPerSemiConstrainedReal(0) horizontalSizeRatio;
	AsnPerReal(-1, -1) horizontalPosition;
	AsnPerReal(-1, -1) verticalPosition;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126bitMaskTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "uncompressed";
		case (ExtensionBit == 0) && (Choice== 1): "jbigCompressed";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardFormat";
	}
}
[DataTypeBitAlign]
struct T126bitMask = T126bitMaskTable(ExtensionBit, T126bitMaskChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126bitMaskChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126bitMaskTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126bitMaskChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue = T126bitMaskTable(ExtensionBit, ConstrainedValue);
				switch (T126bitMaskChoice)
				{
					case 0: AsnPerOctetString(-1, -1) uncompressed;
					case 1: AsnPerOctetString(-1, -1) jbigCompressed;
					case 2: T126NonStandardParameter nonStandardFormat;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126TransparencyMask	= FormatString("BitMask=%s",bitMask.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126bitMask bitMask;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126VideoWindowDestinationAddressTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "softCopyImagePlane";
		case (ExtensionBit == 0) && (Choice== 1): "nonStandardDestination";
	}
}

[DataTypeBitAlign]
struct T126VideoWindowDestinationAddress = T126VideoWindowDestinationAddressTable(ExtensionBit, T126VideoWindowDestinationAddressChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126VideoWindowDestinationAddressChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126VideoWindowDestinationAddressTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126VideoWindowDestinationAddressChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126VideoWindowDestinationAddressTable(ExtensionBit, ConstrainedValue);
				switch (T126VideoWindowDestinationAddressChoice)
				{
					case 0: T126SoftCopyDataPlaneAddress softCopyImagePlane;
					case 1: T126NonStandardParameter nonStandardDestination;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126TokenID	= TokenID.ToString	//Sequence
{
	AsnPerConstrainedInteger(1, 65535) TokenID;   
}

[DataTypeBitAlign]
struct T126dSMCCConnBinder = FormatString("Count=%s", T126dSMCCConnBinderCount)
{
	[Post.T126dSMCCConnBinderCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126DSMCCTap dSMCCConnBinder[T126dSMCCConnBinderCount];
}

Table T126VideoSourceIdentifierTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "default";
		case (ExtensionBit == 0) && (Choice== 1): "h243SourceIdentifier";
		case (ExtensionBit == 0) && (Choice== 2): "h245SourceIdentifier";
		case (ExtensionBit == 0) && (Choice== 3): "dSMCCConnBinder";
		case (ExtensionBit == 0) && (Choice== 4): "videoIdentifier";
		case (ExtensionBit == 0) && (Choice== 5): "nonStandardSourceIdentifier";
	}
}

[DataTypeBitAlign]
struct T126VideoSourceIdentifier = T126VideoSourceIdentifierTable(ExtensionBit, T126VideoSourceIdentifierChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126VideoSourceIdentifierChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126VideoSourceIdentifierTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126VideoSourceIdentifierChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 5) ChoiceValue = T126VideoSourceIdentifierTable(ExtensionBit, ConstrainedValue);
				switch (T126VideoSourceIdentifierChoice)
				{
					case 1: AsnPerOctetString(2, 2) h243SourceIdentifier;
					case 2: AsnPerConstrainedInteger(0, 65535) h245SourceIdentifier;
					case 3: T126dSMCCConnBinder dSMCCConnBinder;
					case 4: AsnPerOctetString(1, 256) videoIdentifier;
					case 5: T126NonStandardParameter nonStandardSourceIdentifier;
				}
			}
	}
}

Table T126VideoWindowAttributeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "transparencyMask";
		case (ExtensionBit == 0) && (Choice== 1): "nonStandardAttribute";
	}
}

[DataTypeBitAlign]
struct T126VideoWindowAttribute = T126VideoWindowAttributeTable(ExtensionBit, T126VideoWindowAttributeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126VideoWindowAttributeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126VideoWindowAttributeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126VideoWindowAttributeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126VideoWindowAttributeTable(ExtensionBit, ConstrainedValue);
				switch (T126VideoWindowAttributeChoice)
				{
					case 0: T126TransparencyMask transparencyMask;
					case 1: T126NonStandardParameter nonStandardAttribute;
				}
			}
	}
}

Table T126ViewStateTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "unselected";
		case (ExtensionBit == 0) && (Choice== 1): "selected";
		case (ExtensionBit == 0) && (Choice== 2): "hidden";
		case (ExtensionBit == 0) && (Choice== 3): "nonStandardViewState";
	}
}

[DataTypeBitAlign]
struct T126ViewState = T126ViewStateTable(ExtensionBit, T126ViewStateChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126ViewStateChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126ViewStateTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126ViewStateChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue = T126ViewStateTable(ExtensionBit, ConstrainedValue);
				switch (T126ViewStateChoice)
				{
					case 3: T126NonStandardIdentifier nonStandardViewState;
				}
			}
	}
}

Table T126WorkspaceAttributeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "backgroundColor";
		case (ExtensionBit == 0) && (Choice== 1): "preserve";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardAttribute";
	}
}

[DataTypeBitAlign]
struct T126WorkspaceAttribute = T126WorkspaceAttributeTable(ExtensionBit, T126WorkspaceAttributeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126WorkspaceAttributeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126WorkspaceAttributeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126WorkspaceAttributeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue = T126WorkspaceAttributeTable(ExtensionBit, ConstrainedValue);
				switch (T126WorkspaceAttributeChoice)
				{
					case 0: T126WorkspaceColor backgroundColor;
					case 1: AsnPerBoolean(0) preserve;
					case 2: T126NonStandardParameter nonStandardAttribute;
				}
			}
	}
}

Table T126WorkspaceColorTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "workspacePaletteIndex";
		case (ExtensionBit == 0) && (Choice== 1): "rgbTrueColor";
		case (ExtensionBit == 0) && (Choice== 2): "transparent";
	}
}

[DataTypeBitAlign]
struct T126WorkspaceColor = T126WorkspaceColorTable(ExtensionBit, T126WorkspaceColorChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126WorkspaceColorChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126WorkspaceColorTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126WorkspaceColorChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue = T126WorkspaceColorTable(ExtensionBit, ConstrainedValue);
				switch (T126WorkspaceColorChoice)
				{
					case 0: AsnPerConstrainedInteger(0, 255) workspacePaletteIndex;
					case 1: T126ColorRGB rgbTrueColor;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126WorkspaceCoordinate	= WorkspaceCoordinate.ToString //Sequence
{
	AsnPerConstrainedInteger(-21845, 43690) WorkspaceCoordinate;   
}

Table T126WorkspaceDeleteReasonTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "userInitiated";
		case (ExtensionBit == 0) && (Choice== 1): "insufficientStorage";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardReason";
	}
}

[DataTypeBitAlign]
struct T126WorkspaceDeleteReason = T126WorkspaceDeleteReasonTable(ExtensionBit, T126WorkspaceDeleteReasonChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126WorkspaceDeleteReasonChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126WorkspaceDeleteReasonTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126WorkspaceDeleteReasonChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue = T126WorkspaceDeleteReasonTable(ExtensionBit, ConstrainedValue);
				switch (T126WorkspaceDeleteReasonChoice)
				{
					case 2: T126NonStandardParameter nonStandardReason;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126archiveWorkspace	= entryName.ToString + ", Handle = " + archiveHandle.ToString	//Sequence
{
	UINT8 modificationTimePresent:1;
	T126Handle archiveHandle;
	T126ArchiveEntryName entryName;
	switch
	{
		case modificationTimePresent : AsnPerGeneralizedTime modificationTime;
	}   
}

Table T126WorkspaceIdentifierTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "activeWorkspace";
		case (ExtensionBit == 0) && (Choice== 1): "archiveWorkspace";
	}
}

[DataTypeBitAlign]
struct T126WorkspaceIdentifier = T126WorkspaceIdentifierTable(ExtensionBit, T126WorkspaceIdentifierChoice) + 
																", Handle = " + T126WorkspaceIdentifierValue	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126WorkspaceIdentifierChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126WorkspaceIdentifierTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126WorkspaceIdentifierChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126WorkspaceIdentifierTable(ExtensionBit, ConstrainedValue);
				switch (T126WorkspaceIdentifierChoice)
				{
					case 0: 
						[Post.T126WorkspaceIdentifierValue = T126HandleValue]
						T126Handle activeWorkspace;
					case 1: 
						[Post.T126WorkspaceIdentifierValue = T126HandleValue]
						T126archiveWorkspace archiveWorkspace;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126WorkspacePoint	= FormatString("xCoordinate=%s,yCoordinate=%s",xCoordinate.ToString,yCoordinate.ToString)//Sequence
{
	T126WorkspaceCoordinate xCoordinate;
	T126WorkspaceCoordinate yCoordinate;   
}

[DataTypeBitAlign]
struct T126WorkspaceRegion	= FormatString("UpperLeft=%s,LowerRight=%s",upperLeft.ToString,lowerRight.ToString) //Sequence
{
	T126WorkspacePoint upperLeft;
	T126WorkspacePoint lowerRight;   
}


[DataTypeBitAlign]
struct T126WorkspaceSize	= FormatString("%dx%d", T126WorkspaceSizeWidthValue, T126WorkspaceSizeHeightValue)//Sequence
{
	[Post.T126WorkspaceSizeWidthValue = ConstrainedValue]
	AsnPerConstrainedInteger(1, 21845) width;
	[Post.T126WorkspaceSizeHeightValue = ConstrainedValue]
	AsnPerConstrainedInteger(1, 21845) height;   
}

Table T126viewRegionTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "fullWorkspace";
		case (ExtensionBit == 0) && (Choice== 1): "partialWorkspace";
	}
}

[DataTypeBitAlign]
struct T126viewRegion  = T126viewRegionTable(0, Property.T126viewRegionChoice)		// CHOICE
{
	_struct NoneExtension
	{
		[Post.T126viewRegionChoice = ConstrainedValue]
		AsnPerConstrainedInteger(0, 1) ChoiceValue = T126viewRegionTable(0, Property.ConstrainedValue);
		switch (T126viewRegionChoice)
		{
			case 1: T126WorkspaceRegion partialWorkspace;
		}
	}
}

Table T126WorkspaceViewAttributeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "viewRegion";
		case (ExtensionBit == 0) && (Choice== 1): "viewState";
		case (ExtensionBit == 0) && (Choice== 2): "updatesEnabled";
		case (ExtensionBit == 0) && (Choice== 3): "sourceDisplayIndicator";
		case (ExtensionBit == 0) && (Choice== 4): "nonStandardAttribute";
	}
}

[DataTypeBitAlign]
struct T126WorkspaceViewAttribute = T126WorkspaceViewAttributeTable(ExtensionBit, T126WorkspaceViewAttributeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126WorkspaceViewAttributeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126WorkspaceViewAttributeTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126WorkspaceViewAttributeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 4) ChoiceValue = T126WorkspaceViewAttributeTable(ExtensionBit, ConstrainedValue);
				switch (T126WorkspaceViewAttributeChoice)
				{
					case 0: T126viewRegion viewRegion;
					case 1: T126WorkspaceViewState viewState;
					case 2: AsnPerBoolean(0) updatesEnabled;
					case 3: T126SourceDisplayIndicator sourceDisplayIndicator;
					case 4: T126NonStandardParameter nonStandardAttribute;
				}
			}
	}
}

Table T126WorkspaceViewStateTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "hidden";
		case (ExtensionBit == 0) && (Choice== 1): "background";
		case (ExtensionBit == 0) && (Choice== 2): "foreground";
		case (ExtensionBit == 0) && (Choice== 3): "focus";
		case (ExtensionBit == 0) && (Choice== 4): "nonStandardState";
	}
}

[DataTypeBitAlign]
struct T126WorkspaceViewState = T126WorkspaceViewStateTable(ExtensionBit, T126WorkspaceViewStateChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126WorkspaceViewStateChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126WorkspaceViewStateTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126WorkspaceViewStateChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 4) ChoiceValue = T126WorkspaceViewStateTable(ExtensionBit, ConstrainedValue);
				switch (T126WorkspaceViewStateChoice)
				{
					case 4: T126NonStandardIdentifier nonStandardState;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126nonStandardParameters = FormatString("Count = %d", T126nonStandardParametersCount)
{
	[Post.T126nonStandardParametersCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126NonStandardParameter nonStandardParameters[T126nonStandardParametersCount];
}

[DataTypeBitAlign]
struct T126ArchiveAcknowledgePDU	= FormatString("Handle=%s, result=%s",archiveHandle.ToString,result.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle archiveHandle;
	T126ArchiveOpenResult result;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126ArchiveClosePDU	= FormatString("Handle = %s",archiveHandle.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle archiveHandle;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126ArchiveErrorPDU	= errorCode.ToString + ", Handle = " + archiveHandle.ToString	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 entryNamePresent:1;
	UINT8 nonStandardParametersPresent:1;
	
	T126Handle archiveHandle;
	switch
	{
		case entryNamePresent : T126ArchiveEntryName entryName;
	}
	T126ArchiveError errorCode;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126ArchiveOpenPDU	= FormatString("Handle = %s, mode = %s",archiveHandle.ToString,mode.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 maxEntriesPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle archiveHandle;
	T126ArchiveMode mode;
	T126ArchiveHeader header;
	switch
	{
		case maxEntriesPresent : AsnPerConstrainedInteger(1, 65535) maxEntries;
	}
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126BitmapAbortPDU	 = FormatString("BitmapHandle = %s",bitmapHandle.ToString)	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 userIDPresent:1;
	UINT8 reasonPresent:1;
	UINT8 messagePresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle bitmapHandle;
	switch
	{
		case userIDPresent : T126MCSUserID userID;
	}
	switch
	{
		case reasonPresent : T126BitmapAbortReason reason;
	}
	switch
	{
		case messagePresent : AsnPerBMPString(1,256) message;
	}
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126passedCheckpoints = FormatString("Count = %d", T126passedCheckpointsCount)
{
	[Post.T126passedCheckpointsCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 100) Size;
	T126TokenID passedCheckpoints[T126passedCheckpointsCount];
}

[DataTypeBitAlign]
struct T126BitmapCheckpointPDU	= FormatString("BitmapHandle = %s, percentComplete = %s",bitmapHandle.ToString,percentComplete.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle bitmapHandle;
	T126passedCheckpoints passedCheckpoints;
	AsnPerConstrainedInteger(1, 100) percentComplete;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126BitmapAttributes = FormatString("Count = %d", T126BitmapAttributesCount)
{
	[Post.T126BitmapAttributesCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126BitmapAttribute attributes[T126BitmapAttributesCount];
}

[DataTypeBitAlign]
struct T126checkpoints = FormatString("Count = %d", T126checkpointsCount)
{
	[Post.T126checkpointsCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 100) Size;
	T126TokenID checkpoints[T126checkpointsCount];
}

Table T126bitmapFormatHeaderTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "bitmapHeaderUncompressed";
		case (ExtensionBit == 0) && (Choice== 1): "bitmapHeaderT4";
		case (ExtensionBit == 0) && (Choice== 2): "bitmapHeaderT6";
		case (ExtensionBit == 0) && (Choice== 3): "bitmapHeaderT81";
		case (ExtensionBit == 0) && (Choice== 4): "bitmapHeaderT82";
		case (ExtensionBit == 0) && (Choice== 5): "bitmapHeaderNonStandard";
	}
}

[DataTypeBitAlign]
struct T126bitmapFormatHeader = T126bitmapFormatHeaderTable(ExtensionBit, T126bitmapFormatHeaderChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126bitmapFormatHeaderChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126bitmapFormatHeaderTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126bitmapFormatHeaderChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 5) ChoiceValue = T126bitmapFormatHeaderTable(ExtensionBit, ConstrainedValue);
				switch (T126bitmapFormatHeaderChoice)
				{
					case 0: T126BitmapHeaderUncompressed bitmapHeaderUncompressed;
					case 1: T126BitmapHeaderT4 bitmapHeaderT4;
					case 2: T126BitmapHeaderT6 bitmapHeaderT6;
					case 3: T126BitmapHeaderT81 bitmapHeaderT81;
					case 4: T126BitmapHeaderT82 bitmapHeaderT82;
					case 5: T126NonStandardParameter bitmapHeaderNonStandard;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126BitmapCreatePDU	= FormatString("bitmapHandle=%s, desAddress=%s", bitmapHandle.ToString, destinationAddress.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 attributesPresent:1;
	UINT8 anchorPointPresent:1;
	UINT8 bitmapRegionOfInterestPresent:1;
	UINT8 scalingPresent:1;
	UINT8 checkpointsPresent:1;
	UINT8 bitmapDataPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle bitmapHandle;
	T126BitmapDestinationAddress destinationAddress;
	switch
	{
		case attributesPresent : T126BitmapAttributes attributes;
	}
	switch
	{
		case anchorPointPresent : T126WorkspacePoint anchorPoint;
	}
	T126BitmapSize bitmapSize;
	switch
	{
		case bitmapRegionOfInterestPresent : T126BitmapRegion bitmapRegionOfInterest;
	}
	T126PixelAspectRatio pixelAspectRatio;
	switch
	{
		case scalingPresent : T126PointDiff16 scaling;
	}
	switch
	{
		case checkpointsPresent : T126checkpoints checkpoints;
	}
	T126bitmapFormatHeader bitmapFormatHeader;
	switch
	{
		case bitmapDataPresent : T126BitmapData bitmapData;
	}
	AsnPerBoolean(0) moreToFollow;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126BitmapCreateContinuePDU	= FormatString("BitmapHandle=%s, moreToFollow=%s",bitmapHandle.ToString,moreToFollow.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle bitmapHandle;
	T126BitmapData bitmapData;
	AsnPerBoolean(0) moreToFollow;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126BitmapDeletePDU	= FormatString("BitmapHandle=%s", bitmapHandle.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle bitmapHandle;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126attributeEdits = Formatstring("Count = %d", T126attributeEditsCount)
{
	[Post.T126attributeEditsCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126BitmapAttribute attributeEdits[T126attributeEditsCount];
}

[DataTypeBitAlign]
struct T126BitmapEditPDU	= FormatString("BitmapHandle=%s",bitmapHandle.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 attributeEditsPresent:1;
	UINT8 anchorPointEditPresent:1;
	UINT8 bitmapRegionOfInterestEditPresent:1;
	UINT8 scalingEditPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle bitmapHandle;
	switch
	{
		case attributeEditsPresent : T126attributeEdits attributeEdits;
	}
	switch
	{
		case anchorPointEditPresent : T126WorkspacePoint anchorPointEdit;
	}
	switch
	{
		case bitmapRegionOfInterestEditPresent : T126BitmapRegion bitmapRegionOfInterestEdit;
	}
	switch
	{
		case scalingEditPresent : T126PointDiff16 scalingEdit;
	}
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126privilegeList = FormatString("Count = %d", T126privilegeListCount)
{
	[Post.T126privilegeListCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126ConductorPrivilege privilegeList[T126privilegeListCount];
}

[DataTypeBitAlign]
struct T126ConductorPrivilegeGrantPDU	= FormatString("desUserID=%s",destinationUserID.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126MCSUserID destinationUserID;
	T126privilegeList privilegeList;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126ConductorPrivilegeRequestPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126privilegeList privilegeList;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126DrawingCreatePDU	= FormatString("desAddress=%s,drawingType=%s",destinationAddress.ToString,drawingType.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 drawingHandlePresent:1;
	UINT8 attributesPresent:1;
	UINT8 rotationPresent:1;
	UINT8 sampleRatePresent:1;
	UINT8 nonStandardParametersPresent:1;
	switch
	{
		case drawingHandlePresent : T126Handle drawingHandle;
	}
	T126DrawingDestinationAddress destinationAddress;
	T126DrawingType drawingType;
	switch
	{
		case attributesPresent : T126DrawingAttributes attributes;
	}
	T126WorkspacePoint anchorPoint;
	switch
	{
		case rotationPresent : T126RotationSpecifier rotation;
	}
	switch
	{
		case sampleRatePresent : AsnPerConstrainedInteger(1, 255) sampleRate;
	}
	T126PointList pointList;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126DrawingDeletePDU	= FormatString("Handle=%s",drawingHandle.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle drawingHandle;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126DrawingEditPDU	= FormatString("Handle=%s",drawingHandle.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 drawingAttributesPresent:1;
	UINT8 anchorPointEditPresent:1;
	UINT8 rotationEditPresent:1;
	UINT8 pointListEditsPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle drawingHandle;
	switch
	{
		case drawingAttributesPresent : T126DrawingAttributes attributeEdits;
	}
	switch
	{
		case anchorPointEditPresent : T126WorkspacePoint anchorPointEdit;
	}
	switch
	{
		case rotationEditPresent : T126RotationSpecifier rotationEdit;
	}
	switch
	{
		case pointListEditsPresent : T126PointListEdits pointListEdits;
	}
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126FontPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126remoteEventPermissionList = FormatString("Count = %d", T126remoteEventPermissionListCount)
{
	[Post.T126remoteEventPermissionListCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126RemoteEventPermission remoteEventPermissionList[T126remoteEventPermissionListCount];
}

[DataTypeBitAlign]
struct T126RemoteEventPermissionGrantPDU	= FormatString("desAddress=%s,desUserID=%s",destinationAddress.ToString,destinationUserID.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126RemoteEventDestinationAddress destinationAddress;
	T126MCSUserID destinationUserID;
	T126remoteEventPermissionList remoteEventPermissionList;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126RemoteEventPermissionRequestPDU	= FormatString("desAddress=%s",destinationAddress.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126RemoteEventDestinationAddress destinationAddress;
	T126remoteEventPermissionList remoteEventPermissionList;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126keyModifierStates = FormatString("Count = %d", T126keyModifierStatesCount)
{
	[Post.T126keyModifierStatesCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126KeyModifier keyModifierStates[T126keyModifierStatesCount];
}

[DataTypeBitAlign]
struct T126RemoteKeyboardEventPDU	= FormatString("desAddress=%s,keyState=%s,keyCode=%s",
																								destinationAddress.ToString,keyPressState.ToString,keyCode.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 keyModifierStatesPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126RemoteEventDestinationAddress destinationAddress;
	switch
	{
		case keyModifierStatesPresent : T126keyModifierStates keyModifierStates;
	}
	T126KeyPressState keyPressState;
	T126KeyCode keyCode;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126RemotePointingDeviceEventPDU	= FormatString("desAddress=%s,leftButtonState=%s,middleButtonState=%s,rightButtonState=%s,initialPoint=%s",
																											destinationAddress.ToString,leftButtonState.ToString,
																											middleButtonState.ToString,	rightButtonState.ToString,
																											initialPoint.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 sampleRatePresent:1;
	UINT8 pointListPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126RemoteEventDestinationAddress destinationAddress;
	T126ButtonEvent leftButtonState;
	T126ButtonEvent middleButtonState;
	T126ButtonEvent rightButtonState;
	T126WorkspacePoint initialPoint;
	switch
	{
		case sampleRatePresent : AsnPerConstrainedInteger(1, 255) sampleRate;
	}
	switch
	{
		case pointListPresent : T126PointList pointList;
	}
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126RemotePrintPDU	= FormatString("desAddress=%s",destinationAddress.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 numberOfCopiesPresent:1;
	UINT8 portraitPresent:1;
	UINT8 regionOfInterestPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126RemoteEventDestinationAddress destinationAddress;
	switch
	{
		case numberOfCopiesPresent : AsnPerConstrainedInteger(1, 65536) numberOfCopies;
	}
	switch
	{
		case portraitPresent : AsnPerBoolean(0) portrait;
	}
	switch
	{
		case regionOfInterestPresent : T126WorkspaceRegion regionOfInterest;
	}
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126SINonStandardPDU = FormatString("%s", PacketType)	//Sequence
{
	UINT8 ExtensionBit:1;
	T126NonStandardParameter nonStandardTransaction;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126TextCreatePDU	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126TextDeletePDU	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126TextEditPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126Windowattributes = FormatString("Count = %d", T126WindowattributesCount)
{
	[Post.T126WindowattributesCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126VideoWindowAttribute attributes[T126WindowattributesCount];
}

[DataTypeBitAlign]
struct T126VideoWindowCreatePDU	= FormatString("Handle=%s,desAddress=%s,sourceIdentifier=%s",
																								videoWindowHandle.ToString,destinationAddress.ToString,videoSourceIdentifier.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 attributesPresent:1;
	UINT8 videoWindowRegionOfInterestPresent:1;
	UINT8 anchorPointPresent:1;
	UINT8 extentPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle videoWindowHandle;
	T126VideoWindowDestinationAddress destinationAddress;
	T126VideoSourceIdentifier videoSourceIdentifier;
	switch
	{
		case attributesPresent : T126Windowattributes attributes;
	}
	switch
	{
		case videoWindowRegionOfInterestPresent : T126BitmapRegion videoWindowRegionOfInterest;
	}
	switch
	{
		case anchorPointPresent : T126WorkspacePoint anchorPoint;
	}
	switch
	{
		case extentPresent : T126PointDiff16 extent;
	}
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126VideoWindowDeletePDU	= FormatString("Handle=%s",videoWindowHandle.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle videoWindowHandle;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126WindowattributeEdits = FormatString("Count = %d", T126WindowattributeEditsCount)
{
	[Post.T126WindowattributeEditsCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126VideoWindowAttribute attributeEdits[T126WindowattributeEditsCount];
}

[DataTypeBitAlign]
struct T126VideoWindowEditPDU	= FormatString("Handle=%s",videoWindowHandle.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 videoSourceIdentifierPresent:1;
	UINT8 attributeEditsPresent:1;
	UINT8 anchorPointEditPresent:1;
	UINT8 extentPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126Handle videoWindowHandle;
	switch
	{
		case videoSourceIdentifierPresent : T126VideoSourceIdentifier videoSourceIdentifier;
	}
	switch
	{
		case attributeEditsPresent : T126WindowattributeEdits attributeEdits;
	}
	switch
	{
		case anchorPointEditPresent : T126WorkspacePoint anchorPointEdit;
	}
	switch
	{
		case extentPresent : T126PointDiff16 extent;
	}
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign, T126PlaneUsageValue = ""]
struct T126usage = "Count = " + T126usageCount
{
	[Post.T126usageCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126PlaneUsage usage[T126usageCount];
}

[DataTypeBitAlign]
struct T126planeAttributes =  FormatString("Count = %d", T126planeAttributesCount)
{
	[Post.T126planeAttributesCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126PlaneAttribute planeAttribute[T126planeAttributesCount];
}

[DataTypeBitAlign]
struct T126planePara = (T126planeParaEditable ? "Editable" : "Readonly") + 
												(", Usage:" + T126PlaneUsageValue)	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 planeAttributesPresent:1;
	[Post.T126planeParaEditable = BooleanValue]
	AsnPerBoolean(0) editable;
	T126usage usage = T126PlaneUsageValue;
	switch
	{
		case planeAttributesPresent : T126planeAttributes planeAttributes;
	}   
}

[DataTypeBitAlign]
struct T126planeParameters = FormatString("Count = %d", T126planeParametersCount)
{
	[Post.T126planeParametersCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 256) Size;
	T126planePara planeParameter[T126planeParametersCount];
}

[DataTypeBitAlign]
struct T126viewAttributes = FormatString("Count = %d", T126viewAttributesCount)
{
	[Post.T126viewAttributesCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126WorkspaceViewAttribute viewAttributes[T126viewAttributesCount];
}

[DataTypeBitAlign]
struct T126viewPara	= "Handle = " + viewHandle.ToString	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 viewAttributesPresent:1;
	T126Handle viewHandle;
	switch
	{
		case viewAttributesPresent : T126viewAttributes viewAttributes;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126workspaceAttributes = FormatString("Count = %d", T126workspaceAttributesCount)
{
	[Post.T126workspaceAttributesCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126WorkspaceAttribute workspaceAttributes[T126workspaceAttributesCount];
}

[DataTypeBitAlign]
struct T126protectedPlaneAccessList = FormatString("Count = %d", T126protectedPlaneAccessListCount)
{
	[Post.T126protectedPlaneAccessListCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 65536) Size;
	T126MCSUserID protectedPlaneAccessList[T126protectedPlaneAccessListCount];
}

[DataTypeBitAlign]
struct T126viewParameters = FormatString("Count = %d", T126viewParametersCount)
{
	[Post.T126viewParametersCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 256) Size;
	T126viewPara viewParameters[T126viewParametersCount];
}

[DataTypeBitAlign]
struct T126WorkspaceCreatePDU	= FormatString("Handle=%s Size=%dx%d",
																						T126WorkspaceIdentifierValue, T126WorkspaceSizeWidthValue, T126WorkspaceSizeHeightValue)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 protectedPlaneAccessListPresent:1;
	UINT8 workspaceAttributesPresent:1;
	UINT8 viewParametersPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126WorkspaceIdentifier workspaceIdentifier;
	AsnPerConstrainedInteger(0, 65535) appRosterInstance;
	AsnPerBoolean(0) synchronized;
	AsnPerBoolean(0) acceptKeyboardEvents;
	AsnPerBoolean(0) acceptPointingDeviceEvents;
	switch
	{
		case protectedPlaneAccessListPresent : T126protectedPlaneAccessList protectedPlaneAccessList;
	}
	T126WorkspaceSize workspaceSize;
	switch
	{
		case workspaceAttributesPresent : T126workspaceAttributes workspaceAttributes;
	}
	T126planeParameters planeParameters;
	switch
	{
		case viewParametersPresent : T126viewParameters viewParameters;
	}
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126WorkspaceCreateAcknowledgePDU	= FormatString("identifier=%s",workspaceIdentifier.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126WorkspaceIdentifier workspaceIdentifier;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126WorkspaceDeletePDU	= FormatString("Identifier=%s,reason=%s",workspaceIdentifier.ToString,reason.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126WorkspaceIdentifier workspaceIdentifier;
	T126WorkspaceDeleteReason reason;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126planeEdit = "ID = " + plane.ToString //Sequence
{
	UINT8 ExtensionBit:1;
	T126DataPlaneID plane;
	T126planeAttributes planeAttributes;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126WorkspaceattributeEdits = FormatString("Count = %d", T126WorkspaceattributeEditsCount)
{
	[Post.T126WorkspaceattributeEditsCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126WorkspaceAttribute attributeEdits[T126WorkspaceattributeEditsCount];
}

[DataTypeBitAlign]
struct T126createNewView = FormatString("Count = %d", T126createNewViewCount)
{
	[Post.T126createNewViewCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126WorkspaceViewAttribute createNewView[T126createNewViewCount];
}

[DataTypeBitAlign]
struct T126editView = FormatString("Count = %d", T126editViewCount)
{
	[Post.T126editViewCount = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T126WorkspaceViewAttribute editView[T126editViewCount];
}

Table T126actionTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "createNewView";
		case (ExtensionBit == 0) && (Choice== 1): "editView";
		case (ExtensionBit == 0) && (Choice== 2): "deleteView";
		case (ExtensionBit == 0) && (Choice== 3): "nonStandardAction";
	}
}

[DataTypeBitAlign]
struct T126action = T126actionTable(ExtensionBit, T126actionChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126actionChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue= T126actionTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126actionChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue= T126actionTable(ExtensionBit, ConstrainedValue);
				switch (T126actionChoice)
				{
					case 0: T126createNewView createNewView;
					case 1: T126editView editView;
					case 3: T126NonStandardParameter nonStandardAction;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126viewEdit = action.ToString + " Handle = " + viewHandle.ToString	//Sequence
{
	UINT8 ExtensionBit:1;
	T126Handle viewHandle;
	T126action action;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126planeEdits = FormatString("Count = %d", T126planeEditCount)
{
	[Post.T126planeEditCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 256) Size;
	T126planeEdit planeEdit[T126planeEditCount];
}

[DataTypeBitAlign]
struct T126viewEdits = FormatString("Count = %d", T126viewEditsCount)
{
	[Post.T126viewEditsCount = ConstrainedValue]
	AsnPerConstrainedInteger(1, 256) Size;
	T126viewEdit viewEdit[T126viewEditsCount];
}

[DataTypeBitAlign]
struct T126WorkspaceEditPDU	= workspaceIdentifier.ToString//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 attributeEditsPresent:1;
	UINT8 planeEditsPresent:1;
	UINT8 viewEditsPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T126WorkspaceIdentifier workspaceIdentifier;
	switch
	{
		case attributeEditsPresent : T126WorkspaceattributeEdits attributeEdits;
	}
	switch
	{
		case planeEditsPresent : T126planeEdits planeEdits;
	}
	switch
	{
		case viewEditsPresent : T126viewEdits viewEdits;
	}
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126copyDescriptorTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "permanentPlaneCopyDescriptor";
		case (ExtensionBit == 0) && (Choice== 1): "editablePlaneCopyDescriptor";
	}
}

[DataTypeBitAlign]
struct T126copyDescriptor = T126copyDescriptorTable(ExtensionBit, T126copyDescriptorChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126copyDescriptorChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126copyDescriptorTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126copyDescriptorChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T126copyDescriptorTable(ExtensionBit, ConstrainedValue);
				switch (T126copyDescriptorChoice)
				{
					case 0: T126PermanentPlaneCopyDescriptor permanentPlaneCopyDescriptor;
					case 1: T126EditablePlaneCopyDescriptor editablePlaneCopyDescriptor;
				}
			}
	}
}

[DataTypeBitAlign]
struct T126WorkspacePlaneCopyPDU	= FormatString("SourceIdentifier=%s,SourcePlane=%s,desIdentifier=%s,desPlane=%s,descriptor=%s",
																		sourceWorkspaceIdentifier.ToString,	sourcePlane.ToString,	destinationWorkspaceIdentifier.ToString,
																		destinationPlane.ToString,	copyDescriptor.ToString		)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126WorkspaceIdentifier sourceWorkspaceIdentifier;
	T126DataPlaneID sourcePlane;
	T126WorkspaceIdentifier destinationWorkspaceIdentifier;
	T126DataPlaneID destinationPlane;
	T126copyDescriptor copyDescriptor;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126WorkspaceReadyPDU	= FormatString("Identifier=%s",workspaceIdentifier.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T126WorkspaceIdentifier workspaceIdentifier;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T126WorkspaceRefreshStatusPDU	= FormatString("Status=%s",refreshStatus.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	AsnPerBoolean(0) refreshStatus;
	switch
	{
		case nonStandardParametersPresent : T126nonStandardParameters nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T126SIPDUTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "archiveAcknowledgePDU";
		case (ExtensionBit == 0) && (Choice== 1): "archiveClosePDU";
		case (ExtensionBit == 0) && (Choice== 2): "archiveErrorPDU";
		case (ExtensionBit == 0) && (Choice== 3): "archiveOpenPDU";
		case (ExtensionBit == 0) && (Choice== 4): "bitmapAbortPDU";
		case (ExtensionBit == 0) && (Choice== 5): "bitmapCheckpointPDU";
		case (ExtensionBit == 0) && (Choice== 6): "bitmapCreatePDU";
		case (ExtensionBit == 0) && (Choice== 7): "bitmapCreateContinuePDU";
		case (ExtensionBit == 0) && (Choice== 8): "bitmapDeletePDU";
		case (ExtensionBit == 0) && (Choice== 9): "bitmapEditPDU";
		case (ExtensionBit == 0) && (Choice== 10): "conductorPrivilegeGrantPDU";
		case (ExtensionBit == 0) && (Choice== 11): "conductorPrivilegeRequestPDU";
		case (ExtensionBit == 0) && (Choice== 12): "drawingCreatePDU";
		case (ExtensionBit == 0) && (Choice== 13): "drawingDeletePDU";
		case (ExtensionBit == 0) && (Choice== 14): "drawingEditPDU";
		case (ExtensionBit == 0) && (Choice== 15): "remoteEventPermissionGrantPDU";
		case (ExtensionBit == 0) && (Choice== 16): "remoteEventPermissionRequestPDU";
		case (ExtensionBit == 0) && (Choice== 17): "remoteKeyboardEventPDU";
		case (ExtensionBit == 0) && (Choice== 18): "remotePointingDeviceEventPDU";
		case (ExtensionBit == 0) && (Choice== 19): "remotePrintPDU";
		case (ExtensionBit == 0) && (Choice== 20): "siNonStandardPDU";
		case (ExtensionBit == 0) && (Choice== 21): "workspaceCreatePDU";
		case (ExtensionBit == 0) && (Choice== 22): "workspaceCreateAcknowledgePDU";
		case (ExtensionBit == 0) && (Choice== 23): "workspaceDeletePDU";
		case (ExtensionBit == 0) && (Choice== 24): "workspaceEditPDU";
		case (ExtensionBit == 0) && (Choice== 25): "workspacePlaneCopyPDU";
		case (ExtensionBit == 0) && (Choice== 26): "workspaceReadyPDU";
		case (ExtensionBit == 0) && (Choice== 27): "workspaceRefreshStatusPDU";
		case (ExtensionBit == 1) && (Choice== 0): "fontPDU";
		case (ExtensionBit == 1) && (Choice== 1): "textCreatePDU";
		case (ExtensionBit == 1) && (Choice== 2): "textDeletePDU";
		case (ExtensionBit == 1) && (Choice== 3): "textEditPDU";
		case (ExtensionBit == 1) && (Choice== 4): "videoWindowCreatePDU";
		case (ExtensionBit == 1) && (Choice== 5): "videoWindowDeleatePDU";
		case (ExtensionBit == 1) && (Choice== 6): "videoWindowEditPDU";
	}
}

[DataTypeBitAlign]
struct T126SIPDU = T126SIPDUTable(ExtensionBit, T126SIPDUChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T126SIPDUChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T126SIPDUTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch(T126SIPDUChoice)
				{
					case 0: 
					[PacketType = "FontPDU", T126FrameSummary = T126FrameSummary +  ", " + fontPDU.ToString]
					T126FontPDU fontPDU;
					case 1: 
					[PacketType = "TextCreatePDU", T126FrameSummary = T126FrameSummary +  ", " + textCreatePDU.ToString]
					T126TextCreatePDU textCreatePDU;
					case 2: 
					[PacketType = "TextDeletePDU", T126FrameSummary = T126FrameSummary +  ", " + textDeletePDU.ToString]
					T126TextDeletePDU textDeletePDU;
					case 3: 
					[PacketType = "TextEditPDU", T126FrameSummary = T126FrameSummary +  ", " + textEditPDU.ToString]
					T126TextEditPDU textEditPDU;
					case 4: 
					[PacketType = "VideoWindowCreatePDU", T126FrameSummary = T126FrameSummary +  ", " + videoWindowCreatePDU.ToString]
					T126VideoWindowCreatePDU videoWindowCreatePDU;
					case 5: 
					[PacketType = "VideoWindowDeletePDU", T126FrameSummary = T126FrameSummary +  ", " + videoWindowDeleatePDU.ToString]
					T126VideoWindowDeletePDU videoWindowDeleatePDU;
					case 6: 
					[PacketType = "VideoWindowEditPDU", T126FrameSummary = T126FrameSummary +  ", " + videoWindowEditPDU.ToString]
					T126VideoWindowEditPDU videoWindowEditPDU;
				}
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T126SIPDUChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 27) ChoiceValue = T126SIPDUTable(ExtensionBit, ConstrainedValue);
				switch (T126SIPDUChoice)
				{
					case 0: 
					[PacketType = "ArchiveAcknowledgePDU", T126FrameSummary = T126FrameSummary +  ", " + archiveAcknowledgePDU.ToString]
					T126ArchiveAcknowledgePDU archiveAcknowledgePDU;
					case 1: 
					[PacketType = "ArchiveClosePDU", T126FrameSummary = T126FrameSummary +  ", " + archiveClosePDU.ToString]
					T126ArchiveClosePDU archiveClosePDU;
					case 2: 
					[PacketType = "ArchiveErrorPDU", T126FrameSummary = T126FrameSummary +  ", " + archiveErrorPDU.ToString]
					T126ArchiveErrorPDU archiveErrorPDU;
					case 3:
					[PacketType = "ArchiveOpenPDU", T126FrameSummary = T126FrameSummary +  ", " + archiveOpenPDU.ToString]
					 T126ArchiveOpenPDU archiveOpenPDU;
					case 4:
					[PacketType = "BitmapAbortPDU", T126FrameSummary = T126FrameSummary +  ", " + bitmapAbortPDU.ToString]
					 T126BitmapAbortPDU bitmapAbortPDU;
					case 5: 
					[PacketType = "BitmapCheckpointPDU", T126FrameSummary = T126FrameSummary +  ", " + bitmapCheckpointPDU.ToString]
					T126BitmapCheckpointPDU bitmapCheckpointPDU;
					case 6: 
					[PacketType = "BitmapCreatePDU", T126FrameSummary = T126FrameSummary +  ", " + bitmapCreatePDU.ToString]
					T126BitmapCreatePDU bitmapCreatePDU;
					case 7: 
					[PacketType = "BitmapCreateContinuePDU", T126FrameSummary = T126FrameSummary +  ", " + bitmapCreateContinuePDU.ToString]
					T126BitmapCreateContinuePDU bitmapCreateContinuePDU;
					case 8:
					[PacketType = "BitmapDeletePDU", T126FrameSummary = T126FrameSummary +  ", " + bitmapDeletePDU.ToString]
					 T126BitmapDeletePDU bitmapDeletePDU;
					case 9:
					[PacketType = "BitmapEditPDU", T126FrameSummary = T126FrameSummary +  ", " + bitmapEditPDU.ToString]
					 T126BitmapEditPDU bitmapEditPDU;
					case 10:
					[PacketType = "ConductorPrivilegeGrantPDU", T126FrameSummary = T126FrameSummary +  ", " + conductorPrivilegeGrantPDU.ToString]
					 T126ConductorPrivilegeGrantPDU conductorPrivilegeGrantPDU;
					case 11:
					[PacketType = "ConductorPrivilegeRequestPDU", T126FrameSummary = T126FrameSummary +  ", " + conductorPrivilegeRequestPDU.ToString]
					 T126ConductorPrivilegeRequestPDU conductorPrivilegeRequestPDU;
					case 12:
					[PacketType = "DrawingCreatePDU", T126FrameSummary = T126FrameSummary +  ", " + drawingCreatePDU.ToString]
					 T126DrawingCreatePDU drawingCreatePDU;
					case 13:
					[PacketType = "DrawingDeletePDU", T126FrameSummary = T126FrameSummary +  ", " + drawingDeletePDU.ToString]
					 T126DrawingDeletePDU drawingDeletePDU;
					case 14: 
					[PacketType = "DrawingEditPDU", T126FrameSummary = T126FrameSummary +  ", " + drawingEditPDU.ToString]
					T126DrawingEditPDU drawingEditPDU;
					case 15:
					[PacketType = "RemoteEventPermissionGrantPDU", T126FrameSummary = T126FrameSummary +  ", " + remoteEventPermissionGrantPDU.ToString]
					 T126RemoteEventPermissionGrantPDU remoteEventPermissionGrantPDU;
					case 16: 
					[PacketType = "RemoteEventPermissionRequestPDU", T126FrameSummary = T126FrameSummary +  ", " + remoteEventPermissionRequestPDU.ToString]
					T126RemoteEventPermissionRequestPDU remoteEventPermissionRequestPDU;
					case 17: 
					[PacketType = "RemoteKeyboardEventPDU", T126FrameSummary = T126FrameSummary +  ", " + remoteKeyboardEventPDU.ToString]
					T126RemoteKeyboardEventPDU remoteKeyboardEventPDU;
					case 18: 
					[PacketType = "RemotePointingDeviceEventPDU", T126FrameSummary = T126FrameSummary +  ", " + remotePointingDeviceEventPDU.ToString]
					T126RemotePointingDeviceEventPDU remotePointingDeviceEventPDU;
					case 19: 
					[PacketType = "RemotePrintPDU", T126FrameSummary = T126FrameSummary +  ", " + remotePrintPDU.ToString]
					T126RemotePrintPDU remotePrintPDU;
					case 20:
					[PacketType = "SINonStandardPDU", T126FrameSummary = T126FrameSummary +  ", " + siNonStandardPDU.ToString]
					 T126SINonStandardPDU siNonStandardPDU;
					case 21: 
					[PacketType = "WorkspaceCreatePDU", T126FrameSummary = T126FrameSummary +  ", " + workspaceCreatePDU.ToString]
					T126WorkspaceCreatePDU workspaceCreatePDU;
					case 22: 
					[PacketType = "WorkspaceCreateAcknowledgePDU", T126FrameSummary = T126FrameSummary +  ", " + workspaceCreateAcknowledgePDU.ToString]
					T126WorkspaceCreateAcknowledgePDU workspaceCreateAcknowledgePDU;
					case 23:
					[PacketType = "WorkspaceDeletePDU", T126FrameSummary = T126FrameSummary +  ", " + workspaceDeletePDU.ToString]
					 T126WorkspaceDeletePDU workspaceDeletePDU;
					case 24: 
					[PacketType = "WorkspaceEditPDU", T126FrameSummary = T126FrameSummary +  ", " + workspaceEditPDU.ToString]
					T126WorkspaceEditPDU workspaceEditPDU;
					case 25:
					[PacketType = "WorkspacePlaneCopyPDU", T126FrameSummary = T126FrameSummary +  ", " + workspacePlaneCopyPDU.ToString]
					 T126WorkspacePlaneCopyPDU workspacePlaneCopyPDU;
					case 26: 
					[PacketType = "WorkspaceReadyPDU", T126FrameSummary = T126FrameSummary +  ", " + workspaceReadyPDU.ToString]
					T126WorkspaceReadyPDU workspaceReadyPDU;
					case 27:
					[PacketType = "WorkspaceRefreshStatusPDU", T126FrameSummary = T126FrameSummary +  ", " + workspaceRefreshStatusPDU.ToString]
					 T126WorkspaceRefreshStatusPDU workspaceRefreshStatusPDU;
				}
			}
	}
}
