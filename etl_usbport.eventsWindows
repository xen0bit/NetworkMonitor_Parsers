//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-usbport.events
//#
//#  Details:                
//#
//#  Public References:      usbport.events.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 03/12/2010
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsUSBUSBPORT, "{c88a4ef5-d048-4013-9408-e04b7db2814a}")]
Protocol USBPort_MicrosoftWindowsUSBUSBPORT = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_ADD USBPORT_ETW_EVENT_HC_ADD;
		case 2: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_REMOVAL USBPORT_ETW_EVENT_HC_REMOVAL;
		case 3: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_INFORMATION USBPORT_ETW_EVENT_HC_INFORMATION;
		case 4: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_START USBPORT_ETW_EVENT_HC_START;
		case 5: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_STOP USBPORT_ETW_EVENT_HC_STOP;
		case 6: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_SUSPEND USBPORT_ETW_EVENT_HC_SUSPEND;
		case 7: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_RESUME USBPORT_ETW_EVENT_HC_RESUME;
		case 8: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_ASYNC_SCHEDULE_ENABLE USBPORT_ETW_EVENT_HC_ASYNC_SCHEDULE_ENABLE;
		case 9: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_ASYNC_SCHEDULE_DISABLE USBPORT_ETW_EVENT_HC_ASYNC_SCHEDULE_DISABLE;
		case 10: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_PERIODIC_SCHEDULE_ENABLE USBPORT_ETW_EVENT_HC_PERIODIC_SCHEDULE_ENABLE;
		case 11: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_PERIODIC_SCHEDULE_DISABLE USBPORT_ETW_EVENT_HC_PERIODIC_SCHEDULE_DISABLE;
		case 12: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DEVICE_CREATE USBPORT_ETW_EVENT_DEVICE_CREATE;
		case 13: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DEVICE_INITIALIZE USBPORT_ETW_EVENT_DEVICE_INITIALIZE;
		case 14: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DEVICE_REMOVAL USBPORT_ETW_EVENT_DEVICE_REMOVAL;
		case 15: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DEVICE_INFORMATION USBPORT_ETW_EVENT_DEVICE_INFORMATION;
		case 16: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DEVICE_IDLE_STATE_SET USBPORT_ETW_EVENT_DEVICE_IDLE_STATE_SET;
		case 17: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DEVICE_IDLE_STATE_CLEAR USBPORT_ETW_EVENT_DEVICE_IDLE_STATE_CLEAR;
		case 18: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_ENDPOINT_OPEN USBPORT_ETW_EVENT_ENDPOINT_OPEN;
		case 19: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_ENDPOINT_CLOSE USBPORT_ETW_EVENT_ENDPOINT_CLOSE;
		case 20: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_ENDPOINT_INFORMATION USBPORT_ETW_EVENT_ENDPOINT_INFORMATION;
		case 21: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SELECT_CONFIGURATION USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SELECT_CONFIGURATION;
		case 22: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SELECT_INTERFACE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SELECT_INTERFACE;
		case 23: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_CURRENT_FRAME_NUMBER USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_CURRENT_FRAME_NUMBER;
		case 24: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CONTROL_TRANSFER USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CONTROL_TRANSFER;
		case 25: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CONTROL_TRANSFER_EX USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CONTROL_TRANSFER_EX;
		case 26: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER;
		case 27: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_ISOCH_TRANSFER USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_ISOCH_TRANSFER;
		case 28: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE;
		case 29: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICE;
		case 30: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINT USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINT;
		case 31: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINT USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINT;
		case 32: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACE;
		case 33: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACE;
		case 34: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_DEVICE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_DEVICE;
		case 35: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_INTERFACE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_INTERFACE;
		case 36: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_ENDPOINT USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_ENDPOINT;
		case 37: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICE;
		case 38: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACE;
		case 39: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINT USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINT;
		case 40: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_OTHER USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_OTHER;
		case 41: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_OTHER USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_OTHER;
		case 42: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_DEVICE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_DEVICE;
		case 43: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_INTERFACE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_INTERFACE;
		case 44: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_ENDPOINT USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_ENDPOINT;
		case 45: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_OTHER USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_OTHER;
		case 46: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_DEVICE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_DEVICE;
		case 47: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_INTERFACE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_INTERFACE;
		case 48: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_ENDPOINT USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_ENDPOINT;
		case 49: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_DEVICE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_DEVICE;
		case 50: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_INTERFACE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_INTERFACE;
		case 51: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_ENDPOINT USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_ENDPOINT;
		case 52: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_OTHER USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_OTHER;
		case 53: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_OTHER USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_OTHER;
		case 54: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_ABORT_PIPE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_ABORT_PIPE;
		case 55: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALL USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALL;
		case 56: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SYNC_RESET_PIPE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SYNC_RESET_PIPE;
		case 57: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SYNC_CLEAR_STALL USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SYNC_CLEAR_STALL;
		case 58: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_CONFIGURATION USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_CONFIGURATION;
		case 59: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_INTERFACE USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_INTERFACE;
		case 60: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTOR USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTOR;
		case 61: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROL USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROL;
		case 62: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROL USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROL;
		case 63: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_FRAME_LENGTH USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_FRAME_LENGTH;
		case 64: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FRAME_LENGTH USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FRAME_LENGTH;
		case 65: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_RESERVED USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_RESERVED;
		case 66: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER;
		case 67: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER_EX USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER_EX;
		case 68: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER_DATA USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER_DATA;
		case 69: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER_EX_DATA USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER_EX_DATA;
		case 70: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER;
		case 71: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER_DATA USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER_DATA;
		case 72: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_ISOCH_TRANSFER USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_ISOCH_TRANSFER;
		case 73: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_ISOCH_TRANSFER_DATA USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_ISOCH_TRANSFER_DATA;
		case 74: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_INTERNAL_URB_FUNCTION_CONTROL_TRANSFER USBPORT_ETW_EVENT_INTERNAL_URB_FUNCTION_CONTROL_TRANSFER;
		case 75: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_INTERNAL_URB_FUNCTION_CONTROL_TRANSFER USBPORT_ETW_EVENT_COMPLETE_INTERNAL_URB_FUNCTION_CONTROL_TRANSFER;
		case 76: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_INTERNAL_URB_FUNCTION_CONTROL_TRANSFER_DATA USBPORT_ETW_EVENT_COMPLETE_INTERNAL_URB_FUNCTION_CONTROL_TRANSFER_DATA;
		case 77: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_ABORT_PIPE USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_ABORT_PIPE;
		case 78: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_HEADER_LENGTH_WARNING USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_HEADER_LENGTH_WARNING;
		case 79: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_FUNCTION USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_FUNCTION;
		case 80: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_HEADER_LENGTH USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_HEADER_LENGTH;
		case 81: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_DEVICE_HANDLE USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_DEVICE_HANDLE;
		case 82: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_FUNCTION_NOT_SUPPORTED USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_FUNCTION_NOT_SUPPORTED;
		case 83: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_FUNCTION_RESERVED USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_FUNCTION_RESERVED;
		case 84: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_DUE_TO_HC_SUSPEND USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_DUE_TO_HC_SUSPEND;
		case 85: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_URB_LINK USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_URB_LINK;
		case 86: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_PIPE_HANDLE USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_PIPE_HANDLE;
		case 87: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ZERO_BW_PIPE_HANDLE USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ZERO_BW_PIPE_HANDLE;
		case 88: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUEST USBPORT_ETW_EVENT_DISPATCH_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUEST;
		case 89: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_CONTROL_TRANSFER_ENDPOINT USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_CONTROL_TRANSFER_ENDPOINT;
		case 90: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTH USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTH;
		case 91: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINT USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINT;
		case 92: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTH USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTH;
		case 93: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINT USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINT;
		case 94: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDL USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDL;
		case 95: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDL USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDL;
		case 96: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_ALLOCATE_MDL_FAILURE USBPORT_ETW_EVENT_DISPATCH_URB_ALLOCATE_MDL_FAILURE;
		case 97: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_ALLOCATE_TRANSFER_CONTEXT_FAILURE USBPORT_ETW_EVENT_DISPATCH_URB_ALLOCATE_TRANSFER_CONTEXT_FAILURE;
		case 98: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUEST USBPORT_ETW_EVENT_DISPATCH_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUEST;
		case 99: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_ZERO_LENGTH USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_ZERO_LENGTH;
		case 100: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_NUM_PACKETS USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_NUM_PACKETS;
		case 101: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_START_FRAME USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_START_FRAME;
		case 102: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_IRP_CANCEL USBPORT_ETW_EVENT_IRP_CANCEL;
		case 103: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_DISPATCH USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_DISPATCH;
		case 104: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_STATUS1 USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_STATUS1;
		case 105: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_STATUS2 USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_STATUS2;
		case 106: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_STATUS3 USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_STATUS3;
		case 107: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_COMPLETE USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_COMPLETE;
		case 108: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_DISPATCH USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_DISPATCH;
		case 109: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_DISPATCH_DATA USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_DISPATCH_DATA;
		case 110: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_TIMEOUT USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_TIMEOUT;
		case 111: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_COMPLETE USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_COMPLETE;
		case 112: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_COMPLETE_DATA USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_COMPLETE_DATA;
		case 1024: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_DISPATCH USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_DISPATCH;
		case 1025: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE;
		case 1026: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_1 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_1;
		case 1027: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_2 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_2;
		case 1028: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_3 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_3;
		case 1029: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_4 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_4;
		case 1030: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_5 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_5;
		case 1031: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_STOP_DISPATCH USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_STOP_DISPATCH;
		case 1032: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_STOP_COMPLETE USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_STOP_COMPLETE;
		case 1033: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_SUSPEND_DISPATCH USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_SUSPEND_DISPATCH;
		case 1034: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_SUSPEND_COMPLETE USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_SUSPEND_COMPLETE;
		case 1035: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_DISPATCH USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_DISPATCH;
		case 1036: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE;
		case 1037: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_1 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_1;
		case 1038: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_2 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_2;
		case 1039: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_3 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_3;
		case 1040: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_4 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_4;
		case 1041: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_5 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_5;
		case 1042: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_6 USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_6;
		case 2048: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_DISPATCH USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_DISPATCH;
		case 2049: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE;
		case 2050: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_1 USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_1;
		case 2051: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_2 USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_2;
		case 2052: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_3 USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_3;
		case 2053: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_4 USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_4;
		case 2054: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_5 USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_5;
		case 2055: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_STOP_DISPATCH USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_STOP_DISPATCH;
		case 2056: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_STOP_COMPLETE USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_STOP_COMPLETE;
		case 2057: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_SUSPEND_DISPATCH USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_SUSPEND_DISPATCH;
		case 2058: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_SUSPEND_COMPLETE USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_SUSPEND_COMPLETE;
		case 2059: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_DISPATCH USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_DISPATCH;
		case 2060: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE;
		case 2061: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_1 USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_1;
		case 2062: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_2 USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_2;
		case 2063: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_3 USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_3;
		case 2064: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_4 USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_4;
		case 2065: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_5 USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_5;
		case 3072: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_DISPATCH USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_DISPATCH;
		case 3073: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE;
		case 3074: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_1 USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_1;
		case 3075: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_2 USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_2;
		case 3076: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_3 USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_3;
		case 3077: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_4 USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_4;
		case 3078: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_STOP_DISPATCH USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_STOP_DISPATCH;
		case 3079: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_STOP_COMPLETE USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_STOP_COMPLETE;
		case 3080: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_SUSPEND_DISPATCH USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_SUSPEND_DISPATCH;
		case 3081: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_SUSPEND_COMPLETE USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_SUSPEND_COMPLETE;
		case 3082: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_DISPATCH USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_DISPATCH;
		case 3083: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE;
		case 3084: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_1 USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_1;
		case 3085: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_2 USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_2;
		case 3086: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_3 USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_3;
		case 3087: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_4 USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_4;
		case 3088: [property.ETLSummary = this.ToString] USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_5 USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_5;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_ADD = FormatString("Host Controller Add")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_REMOVAL = FormatString("Host Controller Removal")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_INFORMATION = FormatString("Host Controller Information")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_HC_Idle_Status
	{
		UINT8 fid_HC_HighSpeed;
		UINT8 fid_HC_Run;
		UINT8 fid_HC_AsyncScheduleEnable;
		UINT8 fid_HC_PeriodicScheduleEnable;
	}
	UnicodeString fid_USBPORT_HC_Pdo_Name;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_START = FormatString("Host Controller Start")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_STOP = FormatString("Host Controller Stop")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_SUSPEND = FormatString("Host Controller Suspend")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_RESUME = FormatString("Host Controller Resume")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_ASYNC_SCHEDULE_ENABLE = FormatString("Host Controller Async Schedule Enable")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_ASYNC_SCHEDULE_DISABLE = FormatString("Host Controller Async Schedule Disable")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_PERIODIC_SCHEDULE_ENABLE = FormatString("Host Controller Periodic Schedule Enable")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_PERIODIC_SCHEDULE_DISABLE = FormatString("Host Controller Periodic Schedule Disable")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DEVICE_CREATE = FormatString("Device Create")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Device_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT16 fid_bcdUSB;
		UINT8 fid_bDeviceClass;
		UINT8 fid_bDeviceSubClass;
		UINT8 fid_bDeviceProtocol;
		UINT8 fid_bMaxPacketSize0;
		UINT16 fid_idVendor;
		UINT16 fid_idProduct;
		UINT16 fid_bcdDevice;
		UINT8 fid_iManufacturer;
		UINT8 fid_iProduct;
		UINT8 fid_iSerialNumber;
		UINT8 fid_bNumConfigurations;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DEVICE_INITIALIZE = FormatString("Device Initialize")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Device_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT16 fid_bcdUSB;
		UINT8 fid_bDeviceClass;
		UINT8 fid_bDeviceSubClass;
		UINT8 fid_bDeviceProtocol;
		UINT8 fid_bMaxPacketSize0;
		UINT16 fid_idVendor;
		UINT16 fid_idProduct;
		UINT16 fid_bcdDevice;
		UINT8 fid_iManufacturer;
		UINT8 fid_iProduct;
		UINT8 fid_iSerialNumber;
		UINT8 fid_bNumConfigurations;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DEVICE_REMOVAL = FormatString("Device Removal")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DEVICE_INFORMATION = FormatString("Device Information")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Device_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT16 fid_bcdUSB;
		UINT8 fid_bDeviceClass;
		UINT8 fid_bDeviceSubClass;
		UINT8 fid_bDeviceProtocol;
		UINT8 fid_bMaxPacketSize0;
		UINT16 fid_idVendor;
		UINT16 fid_idProduct;
		UINT16 fid_bcdDevice;
		UINT8 fid_iManufacturer;
		UINT8 fid_iProduct;
		UINT8 fid_iSerialNumber;
		UINT8 fid_bNumConfigurations;
	}
	UnicodeString(16) fid_USBPORT_Device_Driver_Name;
	UINT32 fid_USBPORT_Device_Idle_State;
	UnicodeString fid_USBPORT_Device_Pdo_Name;
}
Struct USBPort_USBPORT_ETW_EVENT_DEVICE_IDLE_STATE_SET = FormatString("Device Idle State Set")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	UINT32 fid_USBPORT_Device_Idle_Previous_State;
	UINT32 fid_USBPORT_Device_Idle_New_State;
}
Struct USBPort_USBPORT_ETW_EVENT_DEVICE_IDLE_STATE_CLEAR = FormatString("Device Idle State Clear")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	UINT32 fid_USBPORT_Device_Idle_Previous_State;
	UINT32 fid_USBPORT_Device_Idle_New_State;
}
Struct USBPort_USBPORT_ETW_EVENT_ENDPOINT_OPEN = FormatString("Endpoint Open")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_ENDPOINT_CLOSE = FormatString("Endpoint Close")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_ENDPOINT_INFORMATION = FormatString("Endpoint Information")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SELECT_CONFIGURATION = FormatString("Dispatch URB_FUNCTION_SELECT_CONFIGURATION")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	UINT16 fid_URB_Length;
	UINT8 fid_URB[fid_URB_Length];
	UINT16 fid_Configuration_Descriptor_Length;
	UINT8 fid_Configuration_Descriptor[fid_Configuration_Descriptor_Length];
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SELECT_INTERFACE = FormatString("Dispatch URB_FUNCTION_SELECT_INTERFACE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	UINT16 fid_URB_Length;
	UINT8 fid_URB[fid_URB_Length];
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_CURRENT_FRAME_NUMBER = FormatString("Dispatch URB_FUNCTION_GET_CURRENT_FRAME_NUMBER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	UINT32 fid_URB_FrameNumber;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CONTROL_TRANSFER = FormatString("Dispatch URB_FUNCTION_CONTROL_TRANSFER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CONTROL_TRANSFER_EX = FormatString("Dispatch URB_FUNCTION_CONTROL_TRANSFER_EX")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER = FormatString("Dispatch URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_BULK_OR_INTERRUPT_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_ISOCH_TRANSFER = FormatString("Dispatch URB_FUNCTION_ISOCH_TRANSFER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	UINT16 fid_USBPORT_URB_NumberOfPackets;
	struct 	fid_USBPORT_URB_ISOCH_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
		UINT32 fid_URB_StartFrame;
		UINT32 fid_URB_NumberOfPackets;
		UINT32 fid_URB_ErrorCount;
	}
	USBPort_fid_USBPORT_URB_ISO_PACKETS fid_USBPORT_URB_ISO_PACKETS[fid_USBPORT_URB_NumberOfPackets]; // Struct Array
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE = FormatString("Dispatch URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICE = FormatString("Dispatch URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINT = FormatString("Dispatch URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINT")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINT = FormatString("Dispatch URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINT")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACE = FormatString("Dispatch URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACE = FormatString("Dispatch URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_DEVICE = FormatString("Dispatch URB_FUNCTION_SET_FEATURE_TO_DEVICE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_INTERFACE = FormatString("Dispatch URB_FUNCTION_SET_FEATURE_TO_INTERFACE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_ENDPOINT = FormatString("Dispatch URB_FUNCTION_SET_FEATURE_TO_ENDPOINT")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICE = FormatString("Dispatch URB_FUNCTION_CLEAR_FEATURE_TO_DEVICE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACE = FormatString("Dispatch URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINT = FormatString("Dispatch URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINT")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLEAR_FEATURE_TO_OTHER = FormatString("Dispatch URB_FUNCTION_CLEAR_FEATURE_TO_OTHER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FEATURE_TO_OTHER = FormatString("Dispatch URB_FUNCTION_SET_FEATURE_TO_OTHER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_DEVICE = FormatString("Dispatch URB_FUNCTION_GET_STATUS_FROM_DEVICE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_INTERFACE = FormatString("Dispatch URB_FUNCTION_GET_STATUS_FROM_INTERFACE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_ENDPOINT = FormatString("Dispatch URB_FUNCTION_GET_STATUS_FROM_ENDPOINT")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_STATUS_FROM_OTHER = FormatString("Dispatch URB_FUNCTION_GET_STATUS_FROM_OTHER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_DEVICE = FormatString("Dispatch URB_FUNCTION_VENDOR_DEVICE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_INTERFACE = FormatString("Dispatch URB_FUNCTION_VENDOR_INTERFACE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_ENDPOINT = FormatString("Dispatch URB_FUNCTION_VENDOR_ENDPOINT")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_DEVICE = FormatString("Dispatch URB_FUNCTION_CLASS_DEVICE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_INTERFACE = FormatString("Dispatch URB_FUNCTION_CLASS_INTERFACE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_ENDPOINT = FormatString("Dispatch URB_FUNCTION_CLASS_ENDPOINT")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_CLASS_OTHER = FormatString("Dispatch URB_FUNCTION_CLASS_OTHER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_VENDOR_OTHER = FormatString("Dispatch URB_FUNCTION_VENDOR_OTHER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_ABORT_PIPE = FormatString("Dispatch URB_FUNCTION_ABORT_PIPE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_URB_PIPE_REQUEST
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_Reserved;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALL = FormatString("Dispatch URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALL")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_URB_PIPE_REQUEST
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_Reserved;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SYNC_RESET_PIPE = FormatString("Dispatch URB_FUNCTION_SYNC_RESET_PIPE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_URB_PIPE_REQUEST
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_Reserved;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SYNC_CLEAR_STALL = FormatString("Dispatch URB_FUNCTION_SYNC_CLEAR_STALL")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_URB_PIPE_REQUEST
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_Reserved;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_CONFIGURATION = FormatString("Dispatch URB_FUNCTION_GET_CONFIGURATION")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_INTERFACE = FormatString("Dispatch URB_FUNCTION_GET_INTERFACE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTOR = FormatString("Dispatch URB_FUNCTION_GET_MS_FEATURE_DESCRIPTOR")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROL = "Dispatch URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROL" {}; // Empty Struct
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROL = "Dispatch URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROL" {}; // Empty Struct
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_GET_FRAME_LENGTH = "Dispatch URB_FUNCTION_GET_FRAME_LENGTH" {}; // Empty Struct
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_SET_FRAME_LENGTH = "Dispatch URB_FUNCTION_SET_FRAME_LENGTH" {}; // Empty Struct
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_FUNCTION_RESERVED = "Dispatch URB_FUNCTION_RESERVED" {}; // Empty Struct
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER = FormatString("Complete URB_FUNCTION_CONTROL_TRANSFER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER_EX = FormatString("Complete URB_FUNCTION_CONTROL_TRANSFER_EX")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER_DATA = FormatString("Complete URB_FUNCTION_CONTROL_TRANSFER with Data")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP_AND_DATA ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_CONTROL_TRANSFER_EX_DATA = FormatString("Complete URB_FUNCTION_CONTROL_TRANSFER_EX with Data")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP_AND_DATA ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER = FormatString("Complete URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_BULK_OR_INTERRUPT_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
	}
}
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER_DATA = FormatString("Complete URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER with Data")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_BULK_OR_INTERRUPT_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
	}
	UINT16 fid_URB_TransferDataLength;
	UINT8 fid_URB_TransferData[fid_URB_TransferDataLength];
}
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_ISOCH_TRANSFER = FormatString("Complete COMPLETE_URB_FUNCTION_ISOCH_TRANSFER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	UINT16 fid_USBPORT_URB_NumberOfPackets;
	struct 	fid_USBPORT_URB_ISOCH_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
		UINT32 fid_URB_StartFrame;
		UINT32 fid_URB_NumberOfPackets;
		UINT32 fid_URB_ErrorCount;
	}
	USBPort_fid_USBPORT_URB_ISO_PACKETS fid_USBPORT_URB_ISO_PACKETS[fid_USBPORT_URB_NumberOfPackets]; // Struct Array
}
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_ISOCH_TRANSFER_DATA = FormatString("Complete COMPLETE_URB_FUNCTION_ISOCH_TRANSFER with Data")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	UINT16 fid_USBPORT_URB_NumberOfPackets;
	struct 	fid_USBPORT_URB_ISOCH_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
		UINT32 fid_URB_StartFrame;
		UINT32 fid_URB_NumberOfPackets;
		UINT32 fid_URB_ErrorCount;
	}
	USBPort_fid_USBPORT_URB_ISO_PACKETS fid_USBPORT_URB_ISO_PACKETS[fid_USBPORT_URB_NumberOfPackets]; // Struct Array
}
Struct USBPort_USBPORT_ETW_EVENT_INTERNAL_URB_FUNCTION_CONTROL_TRANSFER = FormatString("Internal URB_FUNCTION_CONTROL_TRANSFER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_INTERNAL_URB_FUNCTION_CONTROL_TRANSFER = FormatString("Complete Internal URB_FUNCTION_CONTROL_TRANSFER")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_INTERNAL_URB_FUNCTION_CONTROL_TRANSFER_DATA = FormatString("Complete Internal URB_FUNCTION_CONTROL_TRANSFER with Data")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP_AND_DATA ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_COMPLETE_URB_FUNCTION_ABORT_PIPE = FormatString("Complete URB_FUNCTION_ABORT_PIPE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_URB_PIPE_REQUEST
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_Reserved;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_HEADER_LENGTH_WARNING = FormatString("Dispatch URB INVALID_HEADER_LENGTH_WARNING")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_FUNCTION = FormatString("Dispatch URB INVALID_FUNCTION")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_HEADER_LENGTH = FormatString("Dispatch URB INVALID_HEADER_LENGTH")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_DEVICE_HANDLE = FormatString("Dispatch URB INVALID_DEVICE_HANDLE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_FUNCTION_NOT_SUPPORTED = FormatString("Dispatch URB INVALID_FUNCTION_NOT_SUPPORTED")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_FUNCTION_RESERVED = FormatString("Dispatch URB INVALID_FUNCTION_RESERVED")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_DUE_TO_HC_SUSPEND = FormatString("Dispatch URB INVALID_DUE_TO_HC_SUSPEND")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_URB_LINK = FormatString("Dispatch URB INVALID_URB_LINK")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_PIPE_HANDLE = FormatString("Dispatch URB INVALID_PIPE_HANDLE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_INVALID_PIPE_REQUEST
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ZERO_BW_PIPE_HANDLE = FormatString("Dispatch URB INVALID_ZERO_BW_PIPE_HANDLE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_INVALID_PIPE_REQUEST
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUEST = FormatString("Dispatch URB NOP_ZERO_BW_PIPE_HANDLE_REQUEST")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_INVALID_PIPE_REQUEST
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_CONTROL_TRANSFER_ENDPOINT = FormatString("Dispatch URB INVALID_CONTROL_TRANSFER_ENDPOINT")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTH = FormatString("Dispatch URB INVALID_CONTROL_TRANSFER_BUFFER_LENGTH")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	CONTROL_TRANSFER_URB_SETUP ControlTransfer;
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINT = FormatString("Dispatch URB INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINT")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_BULK_OR_INTERRUPT_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTH = FormatString("Dispatch URB INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTH")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_BULK_OR_INTERRUPT_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINT = FormatString("Dispatch URB INVALID_ISOCHRONOUS_TRANSFER_ENDPOINT")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_ISOCH_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
		UINT32 fid_URB_StartFrame;
		UINT32 fid_URB_NumberOfPackets;
		UINT32 fid_URB_ErrorCount;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDL = FormatString("Dispatch URB INVALID_NULL_TRANSFER_BUFFER_AND_MDL")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDL = FormatString("Dispatch URB INVALID_NON_NULL_TRANSFER_BUFFER_MDL")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_ALLOCATE_MDL_FAILURE = FormatString("Dispatch URB ALLOCATE_MDL_FAILURE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_ALLOCATE_TRANSFER_CONTEXT_FAILURE = FormatString("Dispatch URB ALLOCATE_TRANSFER_CONTEXT_FAILURE")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_HEADER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUEST = FormatString("Dispatch URB NOP_ROOTHUB_PIPE_HANDLE_REQUEST")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_INVALID_PIPE_REQUEST
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_ZERO_LENGTH = FormatString("Dispatch URB INVALID_ISOCHRONOUS_ZERO_LENGTH")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_ISOCH_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
		UINT32 fid_URB_StartFrame;
		UINT32 fid_URB_NumberOfPackets;
		UINT32 fid_URB_ErrorCount;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_NUM_PACKETS = FormatString("Dispatch URB INVALID_ISOCHRONOUS_NUM_PACKETS")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	struct 	fid_USBPORT_URB_ISOCH_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
		UINT32 fid_URB_StartFrame;
		UINT32 fid_URB_NumberOfPackets;
		UINT32 fid_URB_ErrorCount;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_DISPATCH_URB_INVALID_ISOCHRONOUS_START_FRAME = FormatString("Dispatch URB INVALID_ISOCHRONOUS_START_FRAME")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Device
	{
		EtlPtr DeviceHandle;
		UINT16 idVendor;
		UINT16 idProduct;
		UINT32 PortPathDepth;
		UINT32 PortPath[6];
		UINT32 DeviceSpeed;
		UINT32 DeviceAddress;
	}
	struct 	fid_USBPORT_Endpoint
	{
		EtlPtr Endpoint;
		EtlPtr PipeHandle;
		EtlPtr DeviceHandle;
	}
	struct 	fid_USBPORT_Endpoint_Descriptor
	{
		UINT8 fid_bLength;
		UINT8 fid_bDescriptorType;
		UINT8 fid_bEndpointAddress;
		UINT8 fid_bmAttributes;
		UINT16 fid_wMaxPacketSize;
		UINT8 fid_bInterval;
	}
	EtlPtr fid_IRP_Ptr;
	EtlPtr fid_URB_Ptr;
	UINT16 fid_USBPORT_URB_NumberOfPackets;
	struct 	fid_USBPORT_URB_ISOCH_TRANSFER
	{
		UINT16 fid_URB_Hdr_Length;
		UINT16 fid_URB_Hdr_Function;
		UINT32 fid_URB_Hdr_Status;
		EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
		EtlPtr fid_URB_Hdr_UsbdFlags;
		EtlPtr fid_URB_PipeHandle;
		UINT32 fid_URB_TransferFlags;
		UINT32 fid_URB_TransferBufferLength;
		EtlPtr fid_URB_TransferBuffer;
		EtlPtr fid_URB_TransferBufferMDL;
		EtlPtr fid_URB_ReservedMBZ;
		EtlPtr fid_URB_ReservedHcd[8];
		UINT32 fid_URB_StartFrame;
		UINT32 fid_URB_NumberOfPackets;
		UINT32 fid_URB_ErrorCount;
	}
	USBPort_fid_USBPORT_URB_ISO_PACKETS fid_USBPORT_URB_ISO_PACKETS[fid_USBPORT_URB_NumberOfPackets]; // Struct Array
	UINT32 fid_URB_FrameNumber;
}
Struct USBPort_USBPORT_ETW_EVENT_IRP_CANCEL = FormatString("Irp Cancel")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	EtlPtr fid_IRP_Ptr;
}
Struct USBPort_USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_DISPATCH = FormatString("USBUSER_OP_RAW_RESET_PORT Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT16 fid_PortNumber;
}
Struct USBPort_USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_STATUS1 = FormatString("USBUSER_OP_RAW_RESET_PORT GetPortStatus after SetFeaturePortPower")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT16 fid_PortNumber;
	UINT32 fid_PortStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_STATUS2 = FormatString("USBUSER_OP_RAW_RESET_PORT GetPortStatus after SetFeaturePortReset")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT16 fid_PortNumber;
	UINT32 fid_PortStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_STATUS3 = FormatString("USBUSER_OP_RAW_RESET_PORT GetPortStatus after ClearFeaturePortResetChange")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT16 fid_PortNumber;
	UINT32 fid_PortStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_USBUSER_OP_RAW_RESET_PORT_COMPLETE = FormatString("USBUSER_OP_RAW_RESET_PORT Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT16 fid_PortNumber;
	UINT32 fid_UsbStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_DISPATCH = FormatString("USBUSER_OP_SEND_ONE_PACKET Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Usbuser_Op_Send_One_Packet
	{
		UINT8 fid_DeviceAddress;
		UINT8 fid_EndpointAddress;
		UINT16 fid_MaximumPacketSize;
		UINT32 fid_Timeout;
		UINT32 fid_UsbPacketFlags;
		UINT32 fid_DataLength;
		UINT16 fid_HubDeviceAddress;
		UINT16 fid_PortTTNumber;
		UINT32 fid_UsbdStatus;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_DISPATCH_DATA = FormatString("USBUSER_OP_SEND_ONE_PACKET Dispatch with Data")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Usbuser_Op_Send_One_Packet
	{
		UINT8 fid_DeviceAddress;
		UINT8 fid_EndpointAddress;
		UINT16 fid_MaximumPacketSize;
		UINT32 fid_Timeout;
		UINT32 fid_UsbPacketFlags;
		UINT32 fid_DataLength;
		UINT16 fid_HubDeviceAddress;
		UINT16 fid_PortTTNumber;
		UINT32 fid_UsbdStatus;
	}
	UINT16 fid_PacketDataLength;
	UINT8 fid_PacketData[fid_PacketDataLength];
}
Struct USBPort_USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_TIMEOUT = FormatString("USBUSER_OP_SEND_ONE_PACKET Timeout")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Usbuser_Op_Send_One_Packet
	{
		UINT8 fid_DeviceAddress;
		UINT8 fid_EndpointAddress;
		UINT16 fid_MaximumPacketSize;
		UINT32 fid_Timeout;
		UINT32 fid_UsbPacketFlags;
		UINT32 fid_DataLength;
		UINT16 fid_HubDeviceAddress;
		UINT16 fid_PortTTNumber;
		UINT32 fid_UsbdStatus;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_COMPLETE = FormatString("USBUSER_OP_SEND_ONE_PACKET Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Usbuser_Op_Send_One_Packet
	{
		UINT8 fid_DeviceAddress;
		UINT8 fid_EndpointAddress;
		UINT16 fid_MaximumPacketSize;
		UINT32 fid_Timeout;
		UINT32 fid_UsbPacketFlags;
		UINT32 fid_DataLength;
		UINT16 fid_HubDeviceAddress;
		UINT16 fid_PortTTNumber;
		UINT32 fid_UsbdStatus;
	}
	UINT32 fid_UsbStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_USBUSER_OP_SEND_ONE_PACKET_COMPLETE_DATA = FormatString("USBUSER_OP_SEND_ONE_PACKET Complete with Data")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	struct 	fid_USBPORT_Usbuser_Op_Send_One_Packet
	{
		UINT8 fid_DeviceAddress;
		UINT8 fid_EndpointAddress;
		UINT16 fid_MaximumPacketSize;
		UINT32 fid_Timeout;
		UINT32 fid_UsbPacketFlags;
		UINT32 fid_DataLength;
		UINT16 fid_HubDeviceAddress;
		UINT16 fid_PortTTNumber;
		UINT32 fid_UsbdStatus;
	}
	UINT16 fid_PacketDataLength;
	UINT8 fid_PacketData[fid_PacketDataLength];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_DISPATCH = FormatString("EHCI Miniport Start Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE = FormatString("EHCI Miniport Start Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_1 = FormatString("EHCI Miniport Start Complete Error - Invalid Resources")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_2 = FormatString("EHCI Miniport Start Complete Error - Hardware Gone")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_3 = FormatString("EHCI Miniport Start Complete Error - Stop BIOS")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_4 = FormatString("EHCI Miniport Start Complete Error - Initialize Hardware")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_START_COMPLETE_ERROR_5 = FormatString("EHCI Miniport Start Complete Error - Initialize Schedule")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_STOP_DISPATCH = FormatString("EHCI Miniport Stop Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_STOP_COMPLETE = FormatString("EHCI Miniport Stop Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_SUSPEND_DISPATCH = FormatString("EHCI Miniport Suspend Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_SUSPEND_COMPLETE = FormatString("EHCI Miniport Suspend Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_DISPATCH = FormatString("EHCI Miniport Resume Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE = FormatString("EHCI Miniport Resume Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_1 = FormatString("EHCI Miniport Resume Complete Error - Hardware Gone")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_2 = FormatString("EHCI Miniport Resume Complete Error - HcHalted")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_3 = FormatString("EHCI Miniport Resume Complete Error - ConfigFlag")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_4 = FormatString("EHCI Miniport Resume Complete Error - PortPower")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_5 = FormatString("EHCI Miniport Resume Complete Error - PortOwnedByCC")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_EHCI_MINIPORT_RESUME_COMPLETE_ERROR_6 = FormatString("EHCI Miniport Resume Complete Error - OvercurrentChange")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_DISPATCH = FormatString("OHCI Miniport Start Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE = FormatString("OHCI Miniport Start Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_1 = FormatString("OHCI Miniport Start Complete Error - Invalid Resources")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_2 = FormatString("OHCI Miniport Start Complete Error - Hardware Gone")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_3 = FormatString("OHCI Miniport Start Complete Error - Stop BIOS")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_4 = FormatString("OHCI Miniport Start Complete Error - Initialize Schedule")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_START_COMPLETE_ERROR_5 = FormatString("OHCI Miniport Start Complete Error - Initialize Hardware")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_STOP_DISPATCH = FormatString("OHCI Miniport Stop Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_STOP_COMPLETE = FormatString("OHCI Miniport Stop Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_SUSPEND_DISPATCH = FormatString("OHCI Miniport Suspend Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_SUSPEND_COMPLETE = FormatString("OHCI Miniport Suspend Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_DISPATCH = FormatString("OHCI Miniport Resume Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE = FormatString("OHCI Miniport Resume Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_1 = FormatString("OHCI Miniport Resume Complete Error - Hardware Gone")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_2 = FormatString("OHCI Miniport Resume Complete Error - HcControl")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_3 = FormatString("OHCI Miniport Resume Complete Error - HcHCCA")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_4 = FormatString("OHCI Miniport Resume Complete Error - HcRhS_OverCurrentIndicatorChange")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_OHCI_MINIPORT_RESUME_COMPLETE_ERROR_5 = FormatString("OHCI Miniport Resume Complete Error - HcRhPS_OverCurrentIndicatorChange")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_DISPATCH = FormatString("UHCI Miniport Start Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE = FormatString("UHCI Miniport Start Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_1 = FormatString("UHCI Miniport Start Complete Error - Invalid Resources")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_2 = FormatString("UHCI Miniport Start Complete Error - Stop BIOS")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_3 = FormatString("UHCI Miniport Start Complete Error - Initialize Hardware")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_START_COMPLETE_ERROR_4 = FormatString("UHCI Miniport Start Complete Error - Initialize Schedule")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_STOP_DISPATCH = FormatString("UHCI Miniport Stop Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_STOP_COMPLETE = FormatString("UHCI Miniport Stop Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_SUSPEND_DISPATCH = FormatString("UHCI Miniport Suspend Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_SUSPEND_COMPLETE = FormatString("UHCI Miniport Suspend Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_DISPATCH = FormatString("UHCI Miniport Resume Dispatch")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE = FormatString("UHCI Miniport Resume Complete")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_1 = FormatString("UHCI Miniport Resume Complete Error - Hardware Gone")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_2 = FormatString("UHCI Miniport Resume Complete Error - EnterGlobalSuspendMode")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_3 = FormatString("UHCI Miniport Resume Complete Error - ForceGlobalResume")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_4 = FormatString("UHCI Miniport Resume Complete Error - FrameNumber")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
Struct USBPort_USBPORT_ETW_EVENT_HC_UHCI_MINIPORT_RESUME_COMPLETE_ERROR_5 = FormatString("UHCI Miniport Resume Complete Error - OvercurrentChange")
{
	struct 	fid_USBPORT_HC
	{
		EtlPtr DeviceObject;
		UINT32 PciBus;
		UINT16 PciDevice;
		UINT16 PciFunction;
		UINT16 PciVendorId;
		UINT16 PciDeviceId;
	}
	UINT32 fid_MiniportStatus;
	UINT16 fid_NumberOfPorts;
	UINT32 fid_SuspendPortStatus[fid_NumberOfPorts];
	UINT32 fid_ResumePortStatus[fid_NumberOfPorts];
}
struct USBPort_fid_USBPORT_URB_ISO_PACKETS //Array Struct
{
	UINT32 fid_URB_Packet_Offset;
	UINT32 fid_URB_Packet_Length;
	UINT32 fid_URB_Packet_Status;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsUSBUSBPORT_Keyword, "{c88a4ef5-d048-4013-9408-e04b7db2814a}")]
struct USBPort_MicrosoftWindowsUSBUSBPORT_Keyword
{
	UINT64 Diagnostic:1 = FormatString("      (%s) %s", this.ToBitString, this? "USBPORT_ETW_KEYWORD_DIAGNOSTIC":"");
	UINT64 PowerDiagnostics:1 = FormatString("(%s) %s", this.ToBitString, this? "USBPORT_ETW_KEYWORD_POWER_DIAGNOSTICS":"");
	UINT64 Reserved1:62 = FormatString("       (%s)", this.ToBitString);
}

struct CONTROL_TRANSFER_URB_SETUP
{
	TRANSFER_URB Urb;
	SETUP_PACKET SetupPacket;
}

struct CONTROL_TRANSFER_URB_SETUP_AND_DATA
{
	TRANSFER_URB Urb;
	SETUP_PACKET SetupPacket;
	[PostAfter.DataEndOffset = Offset + this]
	UINT16 fid_URB_TransferDataLength;
	struct DataPackets
	{
		switch
		{
			case (USBPort_RequestTypeTypeMap(SetupPacket.bmRequestType.Type) == "Standard"):
			switch(USBPort_StandardDeviceRequestMap(SetupPacket.bRequest))
			{
				case "GET_CONFIGURATION": UINT8 Data_ConfigurationValue;
				case "GET_INTERFACE": UINT8 Data_AlternateInterface;
				case "SYNCH_FRAME": UINT16 Data_FrameNumber;
				case "GET_STATUS": switch(USBPort_RequestTypeRecipientMap(SetupPacket.bmRequestType.Recipient))
				{
					case "Device": UINT16 Data_DeviceStatus
					{
						UINT16 SelfPowered:1 = FormatString("(%s) %d", this.ToBitString, this);
						UINT16 RemoteWakeup:1 = FormatString("(%s) %d", this.ToBitString, this);
						UINT16 Reserved:14;
					}
					case "Endpoint": UINT16 Data_EndpointStatus
					{
						UINT16 Halt:1 = FormatString("(%s) %d", this.ToBitString, this);
						UINT16 Reserved:15;
					}
					default: BLOB (DataEndOffset - Offset) Data_Status;
				}
				case "GET_DESCRIPTOR":
				case "SET_DESCRIPTOR":
					while Descriptors[Offset < DataEndOffset]
					{
						// Look ahead at descriptor length
						switch(UINT8(FrameData, Offset))
						{
							case 0:
							case 1:
								// Length should have been >= 2
								BLOB (DataEndOffset - Offset) _Descriptor;
							default:
								// Look ahead at descriptor type
								switch(USBPort_DescriptorTypeMap(UINT8(FrameData, Offset+1)))
								{
									case "DEVICE": _USB_DEVICE_DESCRIPTOR DeviceDescriptor;
									case "CONFIGURATION": _USB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor;
									case "STRING": _USB_STRING_DESCRIPTOR StringDescriptor;
									case "INTERFACE": _USB_INTERFACE_DESCRIPTOR InterfaceDescriptor;
									case "ENDPOINT": _USB_ENDPOINT_DESCRIPTOR EndpointDescriptor;
									default: BLOB (UINT8(FrameData, Offset)) Descriptor;

								}
						}
					}
				default: BLOB (DataEndOffset - Offset) _Data;
			}
			case (USBPort_RequestTypeTypeMap(SetupPacket.bmRequestType.Type) == "Class" &&
				USBPort_RequestTypeRecipientMap(SetupPacket.bmRequestType.Recipient) == "Other" &&
				USBPort_RequestTypeDirectionMap(SetupPacket.bmRequestType.Direction) == "Device-to-host" &&
				USBPort_StandardDeviceRequestMap(SetupPacket.bRequest) == "GET_STATUS"):
				// Could be Get Port Status request to a USB hub
				struct
				{
					UINT16 wPortStatus = this.ToBitString
					{
						UINT16 PORT_CONNECTION:1 = FormatString("  (%s) %d", this.ToBitString, this);
						UINT16 PORT_ENABLE:1 = FormatString("      (%s) %d", this.ToBitString, this);
						UINT16 PORT_SUSPEND:1 = FormatString("     (%s) %d", this.ToBitString, this);
						UINT16 PORT_OVER_CURRENT:1 = FormatString("(%s) %d", this.ToBitString, this);
						UINT16 PORT_RESET:1 = FormatString("       (%s) %d", this.ToBitString, this);
						UINT16 Reserved:3;
						UINT16 PORT_POWER:1 = FormatString("       (%s) %d", this.ToBitString, this);
						UINT16 PORT_LOW_SPEED:1 = FormatString("   (%s) %d", this.ToBitString, this);
						UINT16 PORT_HIGH_SPEED:1 = FormatString("  (%s) %d", this.ToBitString, this);
						UINT16 PORT_TEST:1 = FormatString("        (%s) %d", this.ToBitString, this);
						UINT16 PORT_INDICATOR:1 = FormatString("   (%s) %d", this.ToBitString, this);
						UINT16 Reserved2:3;
					}
					UINT16 wPortChange = USBPort_ChangeBitsStringMap(this)
					{
						UINT16 C_PORT_CONNECTION:1 = FormatString("  (%s) %d", this.ToBitString, this);
						UINT16 C_PORT_ENABLE:1 = FormatString("      (%s) %d", this.ToBitString, this);
						UINT16 C_PORT_SUSPEND:1 = FormatString("     (%s) %d", this.ToBitString, this);
						UINT16 C_PORT_OVER_CURRENT:1 = FormatString("(%s) %d", this.ToBitString, this);
						UINT16 C_PORT_RESET:1 = FormatString("       (%s) %d", this.ToBitString, this);
						UINT16 Reserved:11;
					}
				}
			default: BLOB (DataEndOffset - Offset) Data;
		}
	}
}

// Doesn't cover all URBs, but covers the beginning of most transfer URBs.
struct TRANSFER_URB = FormatString("Status = 0x%x, Flags 0x%x, Length = %u",
									fid_URB_Hdr_Status,
									fid_URB_TransferFlags,
									fid_URB_TransferBufferLength)
{
	UINT16 fid_URB_Hdr_Length;
	UINT16 fid_URB_Hdr_Function;
	UINT32 fid_URB_Hdr_Status;
	EtlPtr fid_URB_Hdr_UsbdDeviceHandle;
	EtlPtr fid_URB_Hdr_UsbdFlags;
	EtlPtr fid_URB_PipeHandle;
	UINT32 fid_URB_TransferFlags;
	UINT32 fid_URB_TransferBufferLength;
	EtlPtr fid_URB_TransferBuffer;
	EtlPtr fid_URB_TransferBufferMDL;
	EtlPtr fid_URB_ReservedMBZ;
	EtlPtr fid_URB_ReservedHcd[8];
}

struct SETUP_PACKET = USBPort_RequestTypeTypeMap(bmRequestType.Type) == "Standard" ?
							FormatString("%s", USBPort_StandardDeviceRequestMap(bRequest)) :
							(USBPort_RequestTypeTypeMap(bmRequestType.Type) == "Class" &&
								USBPort_RequestTypeRecipientMap(bmRequestType.Recipient) == "Other" &&
								USBPort_RequestTypeDirectionMap(bmRequestType.Direction) == "Device-to-host" &&
								USBPort_StandardDeviceRequestMap(bRequest) == "GET_STATUS") ?
							// Could be Get Port Status request to a USB hub
							"Get Port Status" :
							"" 
{
	UINT8 bmRequestType = FormatString("(%s request) 0x%x", USBPort_RequestTypeTypeMap(this.Type), this)
	{
		UINT8 Recipient:5 = FormatString("(%s) %s", this.ToBitString, USBPort_RequestTypeRecipientMap(this));
		UINT8 Type:2 = FormatString("     (%s) %s", this.ToBitString, USBPort_RequestTypeTypeMap(this));
		UINT8 Direction:1 = FormatString("(%s) %s", this.ToBitString, USBPort_RequestTypeDirectionMap(this));
	};
	UINT8 bRequest =
		USBPort_RequestTypeTypeMap(bmRequestType.Type) == "Standard" ?
		FormatString("(%d) %s", this, USBPort_StandardDeviceRequestMap(this)) :
		FormatString("0x%x", this) ;
	// wValue:
	switch
	{
		case (USBPort_RequestTypeTypeMap(bmRequestType.Type) == "Standard"):
		switch (USBPort_StandardDeviceRequestMap(bRequest))
		{
			case "GET_DESCRIPTOR":
			case "SET_DESCRIPTOR": struct
			{
				UINT8 Value_DescriptorIndex;
				UINT8 Value_DescriptorType =
					FormatString("(%d) %s", this, USBPort_DescriptorTypeMap(this));
			}
			case "CLEAR_FEATURE":
			case "SET_FEATURE": switch(USBPort_RequestTypeRecipientMap(bmRequestType.Recipient))
			{
				case "Device": UINT16 Value_DeviceFeature =
					FormatString("(%d) %s", this, USBPort_DeviceFeatureMap(this));
				case "Interface": UINT16 Value_InterfaceFeature =
					FormatString("(%d) Unknown interface feature", this);
				case "Endpoint": UINT16 Value_EndpointFeature =
					FormatString("(%d) %s", this, USBPort_EndpointFeatureMap(this));
				default: UINT16 Value_UnknownFeature;
			}
			case "SET_ADDRESS": UINT16 Value_DeviceAddress;
			case "SET_CONFIGURATION": struct
			{
				UINT8 Value_ConfigurationValue;
				UINT8 Value_Reserved;
			}
			case "SET_INTERFACE": UINT16 Value_AlternateSetting;
			default: UINT16 _wValue;
		}
		default: UINT16 wValue;
	}
	// wIndex:
	switch
	{
		case (USBPort_RequestTypeTypeMap(bmRequestType.Type) == "Standard"):
		switch
		{
			case (USBPort_RequestTypeRecipientMap(bmRequestType.recipient) == "Device" &&
				(USBPort_StandardDeviceRequestMap(bRequest) == "GET_DESCRIPTOR" ||
				USBPort_StandardDeviceRequestMap(bRequest) == "SET_DESCRIPTOR") &&
				USBPort_DescriptorTypeMap(Value_DescriptorType) == "STRING"): UINT16 Index_Language;
			case (USBPort_RequestTypeRecipientMap(bmRequestType.recipient) == "Interface"): UINT16 Index_Interface;
			case (USBPort_RequestTypeRecipientMap(bmRequestType.recipient) == "Endpoint"): UINT16 Index_Endpoint;
			default: UINT16 _wIndex;
		}
		case (USBPort_RequestTypeTypeMap(bmRequestType.Type) == "Class" &&
			USBPort_RequestTypeRecipientMap(bmRequestType.Recipient) == "Other" &&
			USBPort_RequestTypeDirectionMap(bmRequestType.Direction) == "Device-to-host" &&
			USBPort_StandardDeviceRequestMap(bRequest) == "GET_STATUS"):
			// Could be Get Port Status request to a USB hub
			UINT16 Index_Port;
		default: UINT16 wIndex;
	}
	UINT16 wLength;
}

// bmRequestType.Recipient
Table USBPort_RequestTypeRecipientMap(value)
{
	switch(value)
	{
		case 0: "Device";
		case 1: "Interface";
		case 2: "Endpoint";
		case 3: "Other";
		default: "Reserved";
	}
}

// bmRequestType.Type
Table USBPort_RequestTypeTypeMap(value)
{
	switch(value)
	{
		case 0: "Standard";
		case 1: "Class";
		case 2: "Vendor";
		case 3: "Reserved";
	}
}

// bmRequestType.Dir
Table USBPort_RequestTypeDirectionMap(value)
{
	switch(value)
	{
		case 0: "Host-to-device";
		case 1: "Device-to-host";
	}
}

Table USBPort_StandardDeviceRequestMap(value)
{
	switch(value)
	{
		case 0: "GET_STATUS";
		case 1: "CLEAR_FEATURE";
		case 2: "Reserved for future use";
		case 3: "SET_FEATURE";
		case 4: "Reserved for future use";
		case 5: "SET_ADDRESS";
		case 6: "GET_DESCRIPTOR";
		case 7: "SET_DESCRIPTOR";
		case 8: "GET_CONFIGURATION";
		case 9: "SET_CONFIGURATION";
		case 10: "GET_INTERFACE";
		case 11: "SET_INTERFACE";
		case 12: "SYNCH_FRAME";
		default: "Unknown";
	}
}

Table USBPort_DescriptorTypeMap(value)
{
	switch(value)
	{
		case 1: "DEVICE";
		case 2: "CONFIGURATION";
		case 3: "STRING";
		case 4: "INTERFACE";
		case 5: "ENDPOINT";
		case 6: "DEVICE_QUALIFIER";
		case 7: "OTHER_SPEED_CONFIGURATION";
		case 8: "INTERFACE_POWER";
		default: "Unknown";
	}
}

Table USBPort_DeviceFeatureMap(value)
{
	switch(value)
	{
		case 1: "DEVICE_REMOTE_WAKEUP";
		case 2: "TEST_MODE";
		default: "Unknown device feature";
	}
}

Table USBPort_EndpointFeatureMap(value)
{
	switch(value)
	{
		case 0: "ENDPOINT_HALT";
		default: "Unknown endpoint feature";
	}
}

// Descriptions for common values of hub port status change bits
Table USBPort_ChangeBitsStringMap(value)
{
	switch(value)
	{
		case 0x0: "0";
		case 0x1: "Changed PORT_CONNECTION";
		case 0x2: "Changed PORT_ENABLE";
		case 0x4: "Changed PORT_SUSPEND";
		case 0x8: "Changed PORT_OVER_CURRENT";
		case 0x10: "Changed PORT_RESET";
		default: value.ToBitString;
	}
}

struct _USB_DEVICE_DESCRIPTOR
{
	UINT8 bLength;
	UINT8 bDescriptorType;
	UINT16 bcdUSB;
	UINT8 bDeviceClass;
	UINT8 bDeviceSubClass;
	UINT8 bDeviceProtocol;
	UINT8 bMaxPacketSize0;
	UINT16 idVendor;
	UINT16 idProduct;
	UINT16 bcdDevice;
	UINT8 iManufacturer;
	UINT8 iProduct;
	UINT8 iSerialNumber;
	UINT8 bNumConfigurations;
}

struct _USB_ENDPOINT_DESCRIPTOR
{
	UINT8 bLength;
	UINT8 bDescriptorType;
	UINT8 bEndpointAddress;
	UINT8 bmAttributes;
	UINT16 wMaxPacketSize;
	UINT8 bInterval;
}

struct _USB_CONFIGURATION_DESCRIPTOR
{
	UINT8 bLength;
	UINT8 bDescriptorType;
	UINT16 wTotalLength;
	UINT8 bNumInterfaces;
	UINT8 bConfigurationValue;
	UINT8 iConfiguration;
	UINT8 bmAttributes;
	UINT8 MaxPower;
}

struct _USB_INTERFACE_DESCRIPTOR
{
	UINT8 bLength;
	UINT8 bDescriptorType;
	UINT8 bInterfaceNumber;
	UINT8 bAlternateSetting;
	UINT8 bNumEndpoints;
	UINT8 bInterfaceClass;
	UINT8 bInterfaceSubClass;
	UINT8 bInterfaceProtocol;
	UINT8 iInterface;
}

struct _USB_STRING_DESCRIPTOR
{
	UINT8 bLength;
	UINT8 bDescriptorType;
	UnicodeString(bLength/2) bString;
}
