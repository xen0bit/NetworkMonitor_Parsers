//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Devices Profile for Web Services
//#
//#  Details:                
//#
//#  Public References:      http://schemas.xmlsoap.org/ws/2006/02/devprof/devicesprofile.xsd
//#                          http://specs.xmlsoap.org/ws/2006/02/devprof/devicesprofile.pdf
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 12/16/2009
//#                          Minor, 3/11/2010
//#
//####

//
// Element ThisModel
//
[
	RegisterBefore( WSMetadataExchangeMetadataSection.MessageBody, DPWSdevThisModelElement, 
	StringTerm(FrameData,FrameOffset,Property.XMLEncoding,Property.XMLElementNameTerm,true,false,false).contains("ThisModel") 
	&& Property.SoapEnvelopeAttributes.Contains( "http://schemas.xmlsoap.org/ws/2006/02/devprof" ))
]
struct DPWSdevThisModelElement = this.STag.ToString
{
	[Post.Local.DPWSdevThisModelElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ThisModel") STag;
	switch
	{
		Case !Local.DPWSdevThisModelElement_IsEmpty:
			struct
			{
				DPWSdevThisModelType ThisModelType;
				XmlTag("ThisModel") ETag;
			}
	}
}

//
// ComplexType ThisModelType
//
Struct DPWSdevThisModelType
{
	While [StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false) == "Manufacturer" && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct Manufacturer = this.STag.ToString
		{
			[Post.Local.Manufacturer_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("Manufacturer") STag;
			switch
			{
				Case !Local.Manufacturer_IsEmpty:
					struct
					{
						DPWSdevLocalizedStringType Manufacturer;
						XmlTag("Manufacturer") ETag;
					}
			}
		}
		
	}
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ManufacturerUrl") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct ManufacturerUrl = this.ManufacturerUrl
			{
				[Post.Local.ManufacturerUrl_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ManufacturerUrl") STag;
				switch
				{
					Case !Local.ManufacturerUrl_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) ManufacturerUrl;
							XmlTag("ManufacturerUrl") ETag;
						}
				}
			}
			
	}
	
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ModelName") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct ModelName = this.STag.ToString
		{
			[Post.Local.ModelName_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("ModelName") STag;
			switch
			{
				Case !Local.ModelName_IsEmpty:
					struct
					{
						DPWSdevLocalizedStringType ModelName;
						XmlTag("ModelName") ETag;
					}
			}
		}
		
	}
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ModelNumber") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct ModelNumber = this.ModelNumber
			{
				[Post.Local.ModelNumber_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ModelNumber") STag;
				switch
				{
					Case !Local.ModelNumber_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) ModelNumber;
							XmlTag("ModelNumber") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ModelUrl") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct ModelUrl = this.ModelUrl
			{
				[Post.Local.ModelUrl_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ModelUrl") STag;
				switch
				{
					Case !Local.ModelUrl_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) ModelUrl;
							XmlTag("ModelUrl") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "PresentationUrl") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct PresentationUrl = this.PresentationUrl
			{
				[Post.Local.PresentationUrl_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("PresentationUrl") STag;
				switch
				{
					Case !Local.PresentationUrl_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) PresentationUrl;
							XmlTag("PresentationUrl") ETag;
						}
				}
			}
			
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// Element ThisDevice
//
[
	RegisterBefore( WSMetadataExchangeMetadataSection.MessageBody, DPWSdevThisDeviceElement, 
	StringTerm(FrameData,FrameOffset,Property.XMLEncoding,Property.XMLElementNameTerm,true,false,false).contains("ThisDevice") 
	&& Property.SoapEnvelopeAttributes.Contains( "http://schemas.xmlsoap.org/ws/2006/02/devprof" ))
]
struct DPWSdevThisDeviceElement = this.STag.ToString
{
	[Post.Local.DPWSdevThisDeviceElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ThisDevice") STag;
	switch
	{
		Case !Local.DPWSdevThisDeviceElement_IsEmpty:
			struct
			{
				DPWSdevThisDeviceType ThisDeviceType;
				XmlTag("ThisDevice") ETag;
			}
	}
}

//
// ComplexType ThisDeviceType
//
Struct DPWSdevThisDeviceType
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "FriendlyName") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct FriendlyName = this.STag.ToString
		{
			[Post.Local.FriendlyName_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("FriendlyName") STag;
			switch
			{
				Case !Local.FriendlyName_IsEmpty:
					struct
					{
						DPWSdevLocalizedStringType FriendlyName;
						XmlTag("FriendlyName") ETag;
					}
			}
		}
		
	}
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "FirmwareVersion") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct FirmwareVersion = this.FirmwareVersion
			{
				[Post.Local.FirmwareVersion_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("FirmwareVersion") STag;
				switch
				{
					Case !Local.FirmwareVersion_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) FirmwareVersion;
							XmlTag("FirmwareVersion") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "SerialNumber") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct SerialNumber = this.SerialNumber
			{
				[Post.Local.SerialNumber_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("SerialNumber") STag;
				switch
				{
					Case !Local.SerialNumber_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) SerialNumber;
							XmlTag("SerialNumber") ETag;
						}
				}
			}
			
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType LocalizedStringType
//
Struct DPWSdevLocalizedStringType
{
	StringTerm(Property.XMLEncoding, "<", true, false, false) BaseType;
}

//
// Element Relationship
// Embedded ComplexType 
//

[
	RegisterBefore( WSMetadataExchangeMetadataSection.MessageBody, DPWSdevRelationshipElement, 
	StringTerm(FrameData,FrameOffset,Property.XMLEncoding,Property.XMLElementNameTerm,true,false,false).contains("Relationship")
	&& Property.SoapEnvelopeAttributes.Contains( "http://schemas.xmlsoap.org/ws/2006/02/devprof" ))
]
struct DPWSdevRelationshipElement = this.STag.ToString
{
	[Post.Local.DPWSdevRelationshipElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Relationship") STag;
	switch
	{
		Case !Local.DPWSdevRelationshipElement_IsEmpty:
			struct
			{
				While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
				{
					switch
					{
						Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Hosted"):
							DPWSdevHostedElement Hosted;
						Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Host"):
							DPWSdevHostElement Host;
						Default:
							XmlElement(true) OtherElement;
					}
				}
				XmlTag("Relationship") ETag;
			}
	}
}

//
// Element Host
//

struct DPWSdevHostElement = this.STag.ToString
{
	[Post.Local.DPWSdevHostElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Host") STag;
	switch
	{
		Case !Local.DPWSdevHostElement_IsEmpty:
			struct
			{
				DPWSdevHostServiceType HostServiceType;
				XmlTag("Host") ETag;
			}
	}
}

//
// Element Hosted
//

struct DPWSdevHostedElement = this.STag.ToString
{
	[Post.Local.DPWSdevHostedElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Hosted") STag;
	switch
	{
		Case !Local.DPWSdevHostedElement_IsEmpty:
			struct
			{
				DPWSdevHostServiceType HostServiceType;
				XmlTag("Hosted") ETag;
			}
	}
}

//
// ComplexType HostServiceType
//
Struct DPWSdevHostServiceType
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EndpointReference") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		WSADDREndpointReferenceElement EndpointReference;
	}
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Types") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			DPWSdevTypesElement Types;
	}
	
	DPWSdevServiceIdElement ServiceId;
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// Element ServiceId
//
struct DPWSdevServiceIdElement = this.AnyURI
{
	[Post.Local.DPWSdevServiceIdElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ServiceId") STag;
	switch
	{
		Case !Local.DPWSdevServiceIdElement_IsEmpty:
			struct
			{
				StringTerm(Property.XMLEncoding, "<", true, false, false) AnyURI;
				XmlTag("ServiceId") ETag;
			}
	}
}

//
// Element Types
//
struct DPWSdevTypesElement = this.STag.ToString
{
	[Post.Local.DPWSdevTypesElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Types") STag;
	switch
	{
		Case !Local.DPWSdevTypesElement_IsEmpty:
			struct
			{
				DPWSdevQNameListType QNameListType;
				XmlTag("Types") ETag;
			}
	}
}

//
// SimpleType QNameListType
//
Struct DPWSdevQNameListType
{
	StringTerm(Property.XMLEncoding, "<", true, false, false) QName;
}


//
// Element Profile
//

[
	RegisterBefore( WSMetadataExchangePolicy.Element, DPWSdevProfileElement, 
	StringTerm(FrameData,FrameOffset,Property.XMLEncoding,Property.XMLElementNameTerm,true,false,false).contains("Profile")
	&& Property.SoapEnvelopeAttributes.Contains( "http://schemas.xmlsoap.org/ws/2006/02/devprof" ))
]
[
	RegisterBefore( WSMetadataExchangePort.PolicyElement, DPWSdevProfileElement, 
	StringTerm(FrameData,FrameOffset,Property.XMLEncoding,Property.XMLElementNameTerm,true,false,false).contains("Profile")
	&& Property.SoapEnvelopeAttributes.Contains( "http://schemas.xmlsoap.org/ws/2006/02/devprof" ))
]
[
	RegisterBefore( WSMetadataExchangeBinding.PolicyElement, DPWSdevProfileElement, 
	StringTerm(FrameData,FrameOffset,Property.XMLEncoding,Property.XMLElementNameTerm,true,false,false).contains("Profile")
	&& Property.SoapEnvelopeAttributes.Contains( "http://schemas.xmlsoap.org/ws/2006/02/devprof" ))
]
struct DPWSdevProfileElement = this.STag.ToString
{
	[Post.Local.DPWSdevProfileElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Profile") STag;
	switch
	{
		Case !Local.DPWSdevProfileElement_IsEmpty:
			struct
			{
				DPWSdevAssertionType AssertionType;
				XmlTag("Profile") ETag;
			}
	}
}

//
// ComplexType AssertionType
// Restricted as StringTerm(Property.XMLEncoding, "<", true, false, false)
//
Struct DPWSdevAssertionType
{
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}
