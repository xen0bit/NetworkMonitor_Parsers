//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-Extensible-Authentication-Protocol-Host-Service
//#
//#  Details:                
//#
//#  Public References:      ExtensibleAuthenticationProtocolHostService.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsEapHost, "{6eb8db94-fe96-443f-a366-5fe0cee7fb1c}")]
Protocol ExAuthen_MicrosoftWindowsEapHost = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1001: [property.ETLSummary = this.ToString] ExAuthen_FriendlyNameCLSIDError FriendlyNameCLSIDError;
		case 1002: [property.ETLSummary = this.ToString] ExAuthen_InvalidEapPacket InvalidEapPacket;
		case 1003: [property.ETLSummary = this.ToString] ExAuthen_LoadConfigError LoadConfigError;
		case 1004: [property.ETLSummary = this.ToString] ExAuthen_EapNegFailed EapNegFailed;
		case 1005: [property.ETLSummary = this.ToString] ExAuthen_EapNegFailed1 EapNegFailed1;
		case 1006: [property.ETLSummary = this.ToString] ExAuthen_EapNegFailed2 EapNegFailed2;
		case 1021: [property.ETLSummary = this.ToString] ExAuthen_RegKeyOpenError RegKeyOpenError;
		case 1022: [property.ETLSummary = this.ToString] ExAuthen_RegKeyQueryError RegKeyQueryError;
		case 1023: [property.ETLSummary = this.ToString] ExAuthen_RegKeyValidationError RegKeyValidationError;
		case 1041: [property.ETLSummary = this.ToString] ExAuthen_ComReInitError ComReInitError;
		case 1042: [property.ETLSummary = this.ToString] ExAuthen_CoInitExError CoInitExError;
		case 1043: [property.ETLSummary = this.ToString] ExAuthen_ComInitError ComInitError;
		case 1044: [property.ETLSummary = this.ToString] ExAuthen_InvalidEapAttribute InvalidEapAttribute;
		case 1045: [property.ETLSummary = this.ToString] ExAuthen_UnsupportedAPIError UnsupportedAPIError;
		case 1046: [property.ETLSummary = this.ToString] ExAuthen_PeerResponse PeerResponse;
		case 1047: [property.ETLSummary = this.ToString] ExAuthen_NoPrefMethod NoPrefMethod;
		case 1048: [property.ETLSummary = this.ToString] ExAuthen_ReceivedPacketEvent ReceivedPacketEvent;
		case 1049: [property.ETLSummary = this.ToString] ExAuthen_SendPacketEvent SendPacketEvent;
		case 1050: [property.ETLSummary = this.ToString] ExAuthen_SoHRespFound SoHRespFound;
		case 1051: [property.ETLSummary = this.ToString] ExAuthen_GetSoHResp GetSoHResp;
		case 1052: [property.ETLSummary = this.ToString] ExAuthen_MethodStandAloneError MethodStandAloneError;
		case 1053: [property.ETLSummary = this.ToString] ExAuthen_PPPInvalidPacketError PPPInvalidPacketError;
		case 1054: [property.ETLSummary = this.ToString] ExAuthen_NakResponse NakResponse;
		case 3001: [property.ETLSummary = this.ToString] ExAuthen_LibLoadFailed LibLoadFailed;
		case 3002: [property.ETLSummary = this.ToString] ExAuthen_MethodNotFound MethodNotFound;
		case 3021: [property.ETLSummary = this.ToString] ExAuthen_RegOpenFailure RegOpenFailure;
		case 3022: [property.ETLSummary = this.ToString] ExAuthen_TypeIDFailure TypeIDFailure;
		case 3023: [property.ETLSummary = this.ToString] ExAuthen_AuthorIDFailure AuthorIDFailure;
		case 3024: [property.ETLSummary = this.ToString] ExAuthen_VendorTypeFailure VendorTypeFailure;
		case 3025: [property.ETLSummary = this.ToString] ExAuthen_VendorIDFailure VendorIDFailure;
		case 3026: [property.ETLSummary = this.ToString] ExAuthen_MethodAddFailed MethodAddFailed;
		case 3027: [property.ETLSummary = this.ToString] ExAuthen_XMLNodeFailedEvent XMLNodeFailedEvent;
		case 3028: [property.ETLSummary = this.ToString] ExAuthen_XMLDataMismatchError XMLDataMismatchError;
		case 3029: [property.ETLSummary = this.ToString] ExAuthen_XMLConfigError XMLConfigError;
		case 3041: [property.ETLSummary = this.ToString] ExAuthen_OutOfMemory OutOfMemory;
		case 3042: [property.ETLSummary = this.ToString] ExAuthen_NewMethodFailure NewMethodFailure;
		case 3043: [property.ETLSummary = this.ToString] ExAuthen_EapExceptionEvent EapExceptionEvent;
		case 3044: [property.ETLSummary = this.ToString] ExAuthen_ExceptionEvent ExceptionEvent;
		case 3045: [property.ETLSummary = this.ToString] ExAuthen_MUIReadFailed MUIReadFailed;
		case 3046: [property.ETLSummary = this.ToString] ExAuthen_ReInitMethodList ReInitMethodList;
		case 3047: [property.ETLSummary = this.ToString] ExAuthen_MethodFoundEvent MethodFoundEvent;
		case 3048: [property.ETLSummary = this.ToString] ExAuthen_MethodAdditionEvent MethodAdditionEvent;
		case 3049: [property.ETLSummary = this.ToString] ExAuthen_ExceededEap3HostProcessCntEvent ExceededEap3HostProcessCntEvent;
		case 2001: [property.ETLSummary = this.ToString] ExAuthen_PeerMethodRegAccessFailure PeerMethodRegAccessFailure;
		case 2002: [property.ETLSummary = this.ToString] ExAuthen_PeerPathNameValidationFailure PeerPathNameValidationFailure;
		case 2003: [property.ETLSummary = this.ToString] ExAuthen_PeerCOMMemAllocError PeerCOMMemAllocError;
		case 2004: [property.ETLSummary = this.ToString] ExAuthen_PeerCOMInitializationFailure PeerCOMInitializationFailure;
		case 2005: [property.ETLSummary = this.ToString] ExAuthen_PeerNotifySoHChangeException PeerNotifySoHChangeException;
		case 2006: [property.ETLSummary = this.ToString] ExAuthen_PeerConfigSchemaInvalid PeerConfigSchemaInvalid;
		case 2007: [property.ETLSummary = this.ToString] ExAuthen_PeerInvalidThread PeerInvalidThread;
		case 2008: [property.ETLSummary = this.ToString] ExAuthen_PeerSessionRequestForActiveSession PeerSessionRequestForActiveSession;
		case 2009: [property.ETLSummary = this.ToString] ExAuthen_PeerFunctionNotSupported PeerFunctionNotSupported;
		case 2010: [property.ETLSummary = this.ToString] ExAuthen_PeerXMLConfigProblemRootElementAccessFailure PeerXMLConfigProblemRootElementAccessFailure;
		case 2011: [property.ETLSummary = this.ToString] ExAuthen_PeerXMLConfigProblemInvalidParameterPassed PeerXMLConfigProblemInvalidParameterPassed;
		case 2012: [property.ETLSummary = this.ToString] ExAuthen_PeerRegKeyValidationSuccess PeerRegKeyValidationSuccess;
		case 2013: [property.ETLSummary = this.ToString] ExAuthen_PeerNotNAPAware PeerNotNAPAware;
		case 2014: [property.ETLSummary = this.ToString] ExAuthen_PeerSoHResponseFailure PeerSoHResponseFailure;
		case 2015: [property.ETLSummary = this.ToString] ExAuthen_PeerSoHChangeSuccess PeerSoHChangeSuccess;
		case 2016: [property.ETLSummary = this.ToString] ExAuthen_PeerSoHChangeFailure PeerSoHChangeFailure;
		case 2017: [property.ETLSummary = this.ToString] ExAuthen_PeerUserAccountAuthFailure PeerUserAccountAuthFailure;
		case 2018: [property.ETLSummary = this.ToString] ExAuthen_PeerClientServerDontSupportSameMethod PeerClientServerDontSupportSameMethod;
		case 2019: [property.ETLSummary = this.ToString] ExAuthen_PeerFunctionNotSupportedInfo PeerFunctionNotSupportedInfo;
		case 2020: [property.ETLSummary = this.ToString] ExAuthen_PeerCOMAPIFailure PeerCOMAPIFailure;
		case 2021: [property.ETLSummary = this.ToString] ExAuthen_PeerRegisterEventSourceFailure PeerRegisterEventSourceFailure;
		case 2022: [property.ETLSummary = this.ToString] ExAuthen_PeerBeginThreadFailure PeerBeginThreadFailure;
		case 2023: [property.ETLSummary = this.ToString] ExAuthen_PeerXMLInvalidWithError PeerXMLInvalidWithError;
		case 2024: [property.ETLSummary = this.ToString] ExAuthen_PeerHandleOpenFailure PeerHandleOpenFailure;
		case 4001: [property.ETLSummary = this.ToString] ExAuthen_DebugInfoEvent DebugInfoEvent;
		case 4002: [property.ETLSummary = this.ToString] ExAuthen_DebugErrorEvent DebugErrorEvent;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct ExAuthen_FriendlyNameCLSIDError = "Method not registered or method's registry data could not be accessed. LoadConfig: FriendlyName, ConfigCLSID both are empty" {}; // Empty Struct
Struct ExAuthen_InvalidEapPacket = "Unable to parse malformed EAP packet" {}; // Empty Struct
Struct ExAuthen_LoadConfigError = FormatString("Method not registered or registry value error: Function Name=LoadConfig, ArgumentName=%s", MethodString.ToString)
{
	UnicodeString MethodString;
}
Struct ExAuthen_EapNegFailed = "Negotiation failed. No available EAP methods" {}; // Empty Struct
Struct ExAuthen_EapNegFailed1 = "Negotiation failed. Proposed methods list from peer is invalid" {}; // Empty Struct
Struct ExAuthen_EapNegFailed2 = "Negotiation failed. Requested EAP methods not available" {}; // Empty Struct
Struct ExAuthen_RegKeyOpenError = FormatString("Method not registered or method's registry data could not be accessed. Unable to open registry key %s, error code %s", RegistryKey.ToString, ErrorCode.ToString)
{
	UnicodeString RegistryKey;
	INT8 ErrorCode;
}
Struct ExAuthen_RegKeyQueryError = FormatString("Method not registered or method's registry data could not be accessed. Query registry (%s) failed for method: TypeId=%s, AuthorId=%s, VendorId=%s, VendorType=%s", RegKeyValue.ToString, TypeId.ToString, AuthorId.ToString, VendorId.ToString, VendorType.ToString)
{
	UnicodeString RegKeyValue;
	UINT8 TypeId;
	UINT32 AuthorId;
	UINT32 VendorId;
	UINT32 VendorType;
}
Struct ExAuthen_RegKeyValidationError = FormatString("Method not registered or method's registry data could not be accessed. Validation failed for key (%s), Method Info: Type Id=%s, AuthorId=%s, vendorId=%s, vendorType=%s", RegKeyValue.ToString, TypeId.ToString, AuthorId.ToString, VendorId.ToString, VendorType.ToString)
{
	UnicodeString RegKeyValue;
	UINT8 TypeId;
	UINT32 AuthorId;
	UINT32 VendorId;
	UINT32 VendorType;
}
Struct ExAuthen_ComReInitError = "Unable to Initialize COM library. An instance of EapHostAuthenticatorInvokeConfigUI() is already running. CoInitializeEx returned S_FALSE." {}; // Empty Struct
Struct ExAuthen_CoInitExError = "Unable to Initialize COM library. The wrong concurrency model was specified for EapHostAuthenticatorInvokeConfigUI(). COM Error: RPC_E_CHANGED_MODE." {}; // Empty Struct
Struct ExAuthen_ComInitError = FormatString("Unable to Initialize COM library for EapHostAuthenticatorInitialize().   Error Description: %s", ErrorString.ToString)
{
	UnicodeString ErrorString;
}
Struct ExAuthen_InvalidEapAttribute = FormatString("Invalid eatInnerEapMethodType returned by the EAP method. Attribute has incorrect format (%s)", Length.ToString)
{
	INT32 Length;
}
Struct ExAuthen_UnsupportedAPIError = "Method does not support EapMethodAuthenticatorUpdateInnerMethodParams() API, but UpdateInnerMethodParams() called" {}; // Empty Struct
Struct ExAuthen_PeerResponse = FormatString("Client's response: NAK=%s, Accept=%s", NAK.ToString, Accept.ToString)
{
	UINT8 NAK;
	UINT8 Accept;
}
Struct ExAuthen_NoPrefMethod = "No preferred methods list provided by Peer" {}; // Empty Struct
Struct ExAuthen_ReceivedPacketEvent = FormatString("Session(%s), state(%s), receive packet id(%s), length(%s)", SessionId.ToString, state.ToString, PacketID.ToString, PacketLength.ToString)
{
	UINT32 SessionId;
	INT8 state;
	UINT8 PacketID;
	UINT16 PacketLength;
}
Struct ExAuthen_SendPacketEvent = FormatString("send packet id(%s), length(%s)", PacketId.ToString, PacketLength.ToString)
{
	UINT8 PacketId;
	UINT16 PacketLength;
}
Struct ExAuthen_SoHRespFound = "SoH response found" {}; // Empty Struct
Struct ExAuthen_GetSoHResp = "NAP exchange required, get SoH response from network policy server" {}; // Empty Struct
Struct ExAuthen_MethodStandAloneError = FormatString("Method does not support stand-alone mode. Skipping EapMethod TypeId=%s, AuthorId=%s", TypeId.ToString, AuthorId.ToString)
{
	UINT8 TypeId;
	UINT32 AuthorId;
	UINT32 VendorId;
	UINT32 VendorType;
}
Struct ExAuthen_PPPInvalidPacketError = "Unable to parse malformed EAP packet. ERROR_PPP_INVALID_PACKET returned" {}; // Empty Struct
Struct ExAuthen_NakResponse = FormatString("NAK Response: Method (VenId(%s), VenType(%s), Type(%s))  present", VendorId.ToString, VendorType.ToString, TypeId.ToString)
{
	UINT8 TypeId;
	UINT32 VendorId;
	UINT32 VendorType;
}
Struct ExAuthen_LibLoadFailed = FormatString("EAPHost failed to load. LoadLibraryW(%s) failed %s", ModuleName.ToString, Error.ToString)
{
	UnicodeString ModuleName;
	WinErrorCode Error;
}
Struct ExAuthen_MethodNotFound = FormatString("Could not find the requested EapMethod: TypeId(%s), AuthorId(%s), VendorId(%s), VendorType(%s)", TypeId.ToString, AuthorId.ToString, VendorId.ToString, VendorType.ToString)
{
	UINT8 TypeId;
	UINT32 AuthorId;
	UINT32 VendorId;
	UINT32 VendorType;
}
Struct ExAuthen_RegOpenFailure = FormatString("EAP methods not registered or registry data could not be accessed; Failed to open registry %s, Error Code: %s", RegistryKey.ToString, ErrorCode.ToString)
{
	UnicodeString RegistryKey;
	INT8 ErrorCode;
}
Struct ExAuthen_TypeIDFailure = FormatString("EAP methods not registered or registry data could not be accessed; Failed to open method registry %s\\%s. Skip this type ID", AuthorId.ToString, TypeId.ToString)
{
	UnicodeString TypeId;
	UnicodeString AuthorId;
}
Struct ExAuthen_AuthorIDFailure = FormatString("EAP methods not registered or registry data could not be accessed; Failed to open method registry %s. Skip this author ID", AuthorId.ToString)
{
	UnicodeString AuthorId;
}
Struct ExAuthen_VendorTypeFailure = FormatString("EAP methods not registered or registry data could not be accessed; Failed to open method registry %s\\254\\%s\\%s. Skip this vendor type", AuthorId.ToString, VendorId.ToString, VendorType.ToString)
{
	UINT32 AuthorId;
	UnicodeString VendorId;
	UnicodeString VendorType;
}
Struct ExAuthen_VendorIDFailure = FormatString("EAP methods not registered or registry data could not be accessed; Failed to open method registry %s\\254\\%s. Skip this vendor ID", AuthorId.ToString, VendorId.ToString)
{
	UINT32 AuthorId;
	UnicodeString VendorId;
}
Struct ExAuthen_MethodAddFailed = FormatString("Skipping: Unable to add EAP method. Friendly name not present. TypeId(%s), AuthorId(%s), VendorId(%s), VendorType(%s)", TypeId.ToString, AuthorId.ToString, VendorId.ToString, VendorType.ToString)
{
	UINT8 TypeId;
	UINT32 AuthorId;
	UINT32 VendorId;
	UINT32 VendorType;
}
Struct ExAuthen_XMLNodeFailedEvent = FormatString("XML configuration problem; Failed to get EapMethodType node  . Error Description: %s", ErrorString.ToString)
{
	UnicodeString ErrorString;
}
Struct ExAuthen_XMLDataMismatchError = FormatString("XML configuration problem; Data Type mismatch for %s", debugString.ToString)
{
	AsciiString debugString;
}
Struct ExAuthen_XMLConfigError = FormatString("XML configuration problem; Bad method: TypeId(%s), AuthorId(%s), VendorId(%s), VendorType(%s)", TypeId.ToString, AuthorId.ToString, VendorId.ToString, VendorType.ToString)
{
	UINT8 TypeId;
	UINT32 AuthorId;
	UINT32 VendorId;
	UINT32 VendorType;
}
Struct ExAuthen_OutOfMemory = "Could not load method. Out of memory" {}; // Empty Struct
Struct ExAuthen_NewMethodFailure = "Unable to add new method after re-initialization" {}; // Empty Struct
Struct ExAuthen_EapExceptionEvent = FormatString("EAP Exception caught: authorId(%s), type(%s), vendorId(%s), vendorType(%s), error(%s)", AuthorId.ToString, TypeId.ToString, VendorId.ToString, VendorType.ToString, ErrorString.ToString)
{
	UINT32 AuthorId;
	UINT8 TypeId;
	UINT32 VendorId;
	UINT32 VendorType;
	UnicodeString ErrorString;
}
Struct ExAuthen_ExceptionEvent = FormatString("Exception caught: authorId(%s), type(%s), vendorId(%s), vendorType(%s), error(%s)", AuthorId.ToString, TypeId.ToString, VendorId.ToString, VendorType.ToString, ErrorString.ToString)
{
	UINT32 AuthorId;
	UINT8 TypeId;
	UINT32 VendorId;
	UINT32 VendorType;
	UnicodeString ErrorString;
}
Struct ExAuthen_MUIReadFailed = FormatString("Error %s, reading EAP method friendly name(muiRead). Friendly name retrieved from registry", ErrorCode.ToString)
{
	UINT8 ErrorCode;
}
Struct ExAuthen_ReInitMethodList = "EAP method not found, re-initializing the library manager's EapMethodList data" {}; // Empty Struct
Struct ExAuthen_MethodFoundEvent = "New method found after re-initializing EapMethodList data" {}; // Empty Struct
Struct ExAuthen_MethodAdditionEvent = FormatString("New EAP method added to EapMethodList: TypeId=%s, AuthorId=%s, VendorId=%s, VendorType=%s", TypeId.ToString, AuthorId.ToString, VendorId.ToString, VendorType.ToString)
{
	UINT8 TypeId;
	UINT32 AuthorId;
	UINT32 VendorId;
	UINT32 VendorType;
}
Struct ExAuthen_ExceededEap3HostProcessCntEvent = "Exceeded the maximum number(32) of Third Party EapHost processes. Running the current eap session in short lived Eap3Host process." {}; // Empty Struct
Struct ExAuthen_PeerMethodRegAccessFailure = FormatString("Eap method friendly name can not be verified or %s path could not be accessed; Error: type(%s), authId(%s), vendorId(%s), vendorType(%s)", KeyName.ToString, TypeId.ToString, AuthorId.ToString, VendorId.ToString, VendorType.ToString)
{
	AsciiString KeyName;
	UINT8 TypeId;
	UINT32 AuthorId;
	UINT32 VendorId;
	UINT32 VendorType;
}
Struct ExAuthen_PeerPathNameValidationFailure = FormatString("Skipping: %s validation failed. Error: typeId=%s, authorId=%s, vendorId=%s, vendorType=%s", KeyName.ToString, TypeId.ToString, AuthorId.ToString, VendorId.ToString, VendorType.ToString)
{
	AsciiString KeyName;
	UINT8 TypeId;
	UINT32 AuthorId;
	UINT32 VendorId;
	UINT32 VendorType;
}
Struct ExAuthen_PeerCOMMemAllocError = "CoTaskMemAlloc() failed for SoH. SoH not saved." {}; // Empty Struct
Struct ExAuthen_PeerCOMInitializationFailure = "Could not initialize COM library in service control manager notification thread" {}; // Empty Struct
Struct ExAuthen_PeerNotifySoHChangeException = FormatString("SoH change failed. EapQec::NotifySoHChange caught exception for %s: 0x%s", Connection.ToString, ErrorCode.ToString)
{
	UnicodeString Connection;
	UINT32 ErrorCode;
}
Struct ExAuthen_PeerConfigSchemaInvalid = FormatString("ConfigSchema validation failed. Error  %s", Error.ToString)
{
	UnicodeString Error;
}
Struct ExAuthen_PeerInvalidThread = "EapQec Listening thread handle is NULL" {}; // Empty Struct
Struct ExAuthen_PeerSessionRequestForActiveSession = FormatString("Session(%s, %s) in use", ConnectionName.ToString, SessionID.ToString)
{
	UnicodeString ConnectionName;
	INT32 SessionID;
}
Struct ExAuthen_PeerFunctionNotSupported = FormatString("EAP method does not support %s.", FunctionName.ToString)
{
	AsciiString FunctionName;
}
Struct ExAuthen_PeerXMLConfigProblemRootElementAccessFailure = "XML configuration problem;  Failed to find root element." {}; // Empty Struct
Struct ExAuthen_PeerXMLConfigProblemInvalidParameterPassed = "XML configuration problem;  Invalid parameter passed." {}; // Empty Struct
Struct ExAuthen_PeerRegKeyValidationSuccess = "Registry key validation successful" {}; // Empty Struct
Struct ExAuthen_PeerNotNAPAware = "Client not NAP enabled. SoH change failed." {}; // Empty Struct
Struct ExAuthen_PeerSoHResponseFailure = FormatString("No SoH response received for %s", ConnectionName.ToString)
{
	UnicodeString ConnectionName;
}
Struct ExAuthen_PeerSoHChangeSuccess = "Notify SoH change succeeded." {}; // Empty Struct
Struct ExAuthen_PeerSoHChangeFailure = FormatString("Notify SoH change failed with interface: %s.", ConnectionName.ToString)
{
	UnicodeString ConnectionName;
}
Struct ExAuthen_PeerUserAccountAuthFailure = FormatString("Session(%s): Received EAP-Failure after Identity exchange:  There is likely a problem with the authenticating user's account.", SessionID.ToString)
{
	INT32 SessionID;
}
Struct ExAuthen_PeerClientServerDontSupportSameMethod = FormatString("Session(%s): Received EAP-Failure after EAP-Nak negotiation:  The client & server are not configured to support the same EAP methods. (Server offered EAP type %s; Client sent a Nak, and requested EAP type %s.)", SessionID.ToString, ServerOfferedMethod.ToString, ClientRequestedMethod.ToString)
{
	INT32 SessionID;
	INT32 ServerOfferedMethod;
	INT32 ClientRequestedMethod;
}
Struct ExAuthen_PeerFunctionNotSupportedInfo = FormatString("Method does not implement %s", FunctionName.ToString)
{
	AsciiString FunctionName;
}
Struct ExAuthen_PeerCOMAPIFailure = FormatString("COM API %s Failed.  Error Description : %s", FunctionName.ToString, ErrorDescription.ToString)
{
	AsciiString FunctionName;
	UnicodeString ErrorDescription;
}
Struct ExAuthen_PeerRegisterEventSourceFailure = FormatString("Eap Host event log could not be opened. RegisterEventSource failed.  Error Description : %s", Error.ToString)
{
	UnicodeString Error;
}
Struct ExAuthen_PeerBeginThreadFailure = FormatString("_beginthreadex failed.  Error Description : %s", Error.ToString)
{
	UnicodeString Error;
}
Struct ExAuthen_PeerXMLInvalidWithError = FormatString("Invalid XML document. Failed to selectSingleNode.  Error Description : %s", Error.ToString)
{
	UnicodeString Error;
}
Struct ExAuthen_PeerHandleOpenFailure = FormatString("Unable to open %s handle.  Error Description : %s", FunctionName.ToString, ErrorDescription.ToString)
{
	AsciiString FunctionName;
	UnicodeString ErrorDescription;
}
Struct ExAuthen_DebugInfoEvent = FormatString("%s", debugString.ToString)
{
	AsciiString debugString;
}
Struct ExAuthen_DebugErrorEvent = FormatString("%s", debugString.ToString)
{
	AsciiString debugString;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsEapHost_Keyword, "{6eb8db94-fe96-443f-a366-5fe0cee7fb1c}")]
struct ExAuthen_MicrosoftWindowsEapHost_Keyword
{
	UINT64 Reg:1 = FormatString("      (%s) %s", this.ToBitString, this? "Reg_Info_Error":"");
	UINT64 COM:1 = FormatString("      (%s) %s", this.ToBitString, this? "COM_Info_Error":"");
	UINT64 Reserved1:62 = FormatString("(%s)", this.ToBitString);
}
