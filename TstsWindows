//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Terminal Services Terminal Server Runtime Interface Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-TSTS]: Terminal Services Terminal Server Runtime Interface Protocol Specification (9.0)
//#
//#  Comments:               Parser Framework: PAC v2.1.1577.0
//#
//#  Revision Class and Date:Major, 7/7/2009
//#                          Minor, 3/2/2010
//#
//####

//
//	[MS-TSTS] WINSTATIONNAME_LENGTH
//
const WINSTATIONNAME_LENGTH = 32;

//
//	[MS-TSTS] DEVICENAME_LENGTH
//
const DEVICENAME_LENGTH = 128;

//
//	[MS-TSTS] MODEMNAME_LENGTH
//
const MODEMNAME_LENGTH = 128;

//
//	[MS-TSTS] VIRTUALCHANNELNAME_LENGTH
//
const VIRTUALCHANNELNAME_LENGTH = 7;

//
//	[MS-TSTS] NASISPECIFICNAME_LENGTH
//
const NASISPECIFICNAME_LENGTH = 14;

//
//	[MS-TSTS] NASIUSERNAME_LENGTH
//
const NASIUSERNAME_LENGTH = 47;

//
//	[MS-TSTS] NASIPASSWORD_LENGTH
//
const NASIPASSWORD_LENGTH = 24;

//
//	[MS-TSTS] NASISESSIONNAME_LENGTH
//
const NASISESSIONNAME_LENGTH = 16;

//
//	[MS-TSTS] NASIFILESERVER_LENGTH
//
const NASIFILESERVER_LENGTH = 47;

//
//	[MS-TSTS] KBDSHIFT
//
const KBDSHIFT = 1;

//
//	[MS-TSTS] KBDCTRL
//
const KBDCTRL = 2;

//
//	[MS-TSTS] KBDALT
//
const KBDALT = 4;

//
//	[MS-TSTS] MODULE_SIZE
//
const MODULE_SIZE = 512;

//
//	[MS-TSTS] MAX_PDCONFIG
//
const MAX_PDCONFIG = 10;

//
//	[MS-TSTS] PDNAME_LENGTH
//
const PDNAME_LENGTH = 32;

//
//	[MS-TSTS] WDNAME_LENGTH
//
const WDNAME_LENGTH = 32;

//
//	[MS-TSTS] CDNAME_LENGTH
//
const CDNAME_LENGTH = 32;

//
//	[MS-TSTS] DLLNAME_LENGTH
//
const DLLNAME_LENGTH = 32;

//
//	[MS-TSTS] WDPREFIX_LENGTH
//
const WDPREFIX_LENGTH = 12;

//
//	[MS-TSTS] WINSTATIONCOMMENT_LENGTH
//
const WINSTATIONCOMMENT_LENGTH = 60;

//
//	[MS-TSTS] DOMAIN_LENGTH
//
const DOMAIN_LENGTH = 17;

//
//	[MS-TSTS] USERNAME_LENGTH
//
const USERNAME_LENGTH = 20;

//
//	[MS-TSTS] PASSWORD_LENGTH
//
const PASSWORD_LENGTH = 14;

//
//	[MS-TSTS] DIRECTORY_LENGTH
//
const DIRECTORY_LENGTH = 256;

//
//	[MS-TSTS] INITIALPROGRAM_LENGTH
//
const INITIALPROGRAM_LENGTH = 256;

//
//	[MS-TSTS] CALLBACK_LENGTH
//
const CALLBACK_LENGTH = 50;

//
//	[MS-TSTS] MAX_BR_NAME
//
const MAX_BR_NAME = 65;

//
//	[MS-TSTS] EXTENDED_USERNAME_LEN
//
const EXTENDED_USERNAME_LEN = 255;

//
//	[MS-TSTS] EXTENDED_PASSWORD_LEN
//
const EXTENDED_PASSWORD_LEN = 255;

//
//	[MS-TSTS] EXTENDED_DOMAIN_LEN
//
const EXTENDED_DOMAIN_LEN = 255;

//
//	[MS-TSTS] CLIENTNAME_LENGTH
//
const CLIENTNAME_LENGTH = 20;

//
//	[MS-TSTS] CLIENTADDRESS_LENGTH
//
const CLIENTADDRESS_LENGTH = 30;

//
//	[MS-TSTS] CLIENTLICENSE_LENGTH
//
const CLIENTLICENSE_LENGTH = 32;

//
//	[MS-TSTS] CLIENTMODEM_LENGTH
//
const CLIENTMODEM_LENGTH = 40;

//
//	[MS-TSTS] IMEFILENAME_LENGTH
//
const IMEFILENAME_LENGTH = 32;

//
//	[MS-TSTS] CLIENT_PRODUCT_ID_LENGTH
//
const CLIENT_PRODUCT_ID_LENGTH = 32;

//
//	[MS-TSTS] MAX_THINWIRECACHE
//
const MAX_THINWIRECACHE = 4;

//
//	[MS-TSTS] MAX_LICENSE_SERVER_LENGTH
//
const MAX_LICENSE_SERVER_LENGTH = 1024;

//
//	[MS-TSTS] EXECSRVPIPENAMELEN
//
const EXECSRVPIPENAMELEN = 48;

//
//	[MS-TSTS] CLIENTDATANAME_LENGTH
//
const CLIENTDATANAME_LENGTH = 7;

//
//	[MS-TSTS] SIZEOF_TS4_SYSTEM_THREAD_INFORMATION
//
const SIZEOF_TS4_SYSTEM_THREAD_INFORMATION = 64;

//
//	[MS-TSTS] SIZEOF_TS4_SYSTEM_PROCESS_INFORMATION
//
const SIZEOF_TS4_SYSTEM_PROCESS_INFORMATION = 136;

Protocol TSTS = FormatString( "%s %s%s%s%s%s", 
	Property.TSTSMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.TSTSSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.TSTSSummary : "" )
{
	[Property.TSTSSummary = ""]
	Switch( Property.MSRPCIfUuid )
	{
		Case "{11899A43-2B68-4A76-92E3-A3D6AD8C26CE}":
			[Property.TSTSMethodName = "TermSrvNotification::" + TSTSTermSrvNotificationMethodNameTable( Property.MSRPCOpnum )]
			_Struct TermSrvNotification
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 0:
						_Struct RpcWaitForSessionState
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%d State=%d Timeout=%u", SessionId, State, Timeout )]
												Struct
												{
													INT32 SessionId;
													INT32 State;
													UINT32 Timeout;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 1:
						_Struct RpcRegisterAsyncNotification
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%d Mask=%u", SessionId, Mask )]
												Struct
												{
													INT32 SessionId;
													TSTSTNotificationId Mask;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													ContextHandle Notify;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 2:
						_Struct RpcWaitAsyncNotification
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Notify;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Entries=%u ReturnValue=%s", Entries, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrPtr SessionChangePtr;
													Switch
													{
														Case SessionChangePtr.ReferentID != 0:
															Struct
															{
																NdrConformant Size;
																TSTSSessionChange Element[ Size.MaxCount ];
															}
													};
													Align4 Padding;
													UINT32 Entries;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 3:
						_Struct RpcUnRegisterAsyncNotification
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Notify;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													ContextHandle Notify;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("TSTS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown TermSrvNotification method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{BDE95FDF-EEE0-45DE-9E12-E5A61CD0D4FE}":
			[Property.TSTSMethodName = "RCMPublic::" + TSTSRCMPublicMethodNameTable( Property.MSRPCOpnum )]
			_Struct RCMPublic
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 0:
						_Struct RpcGetClientData
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%u", SessionId )]
												Struct
												{
													UINT32 SessionId;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "OutBuffByteLen=%u ReturnValue=%s", OutBuffByteLen, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
															Struct
															{
																NdrConformant Size;
																Switch
																{
																	case Size.MaxCount > 0:
																		[ DataFieldFrameLength = Size.MaxCount + FrameOffSet ]
																		Struct
																		{
																			TSTSWinstationClient WinstationClient;
																			Blob(FrameLength - FrameOffSet) BufferData;
																		}
																}
															}
													};
													Align4 Pad;
													UINT32 OutBuffByteLen;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 1:
						_Struct RpcGetConfigData
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%u", SessionId )]
												Struct
												{
													UINT32 SessionId;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "OutBuffByteLen=%u ReturnValue=%s", OutBuffByteLen, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
															Struct
															{
																NdrConformant Size;
																Switch
																{
																	case Size.MaxCount > 0:
																		[DataFieldFrameLength = FrameOffSet + Size.MaxCount]
																		Struct
																		{
																			TSTSWinstationConfig WinstationConfig;
																			Blob(FrameLength - FrameOffSet) BufData;
																		}
																}
															}
													};
													Align4 Padding;
													UINT32 OutBuffByteLen;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 2:
						_Struct RpcGetProtocolStatus
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%u", SessionId )]
												Struct
												{
													UINT32 SessionId;
													TSTSProtocolstatusInfoType InfoType;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ProtoStatus1=%u ReturnValue=%s", ProtoStatus1, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{	
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
															Struct
															{
																NdrConformant Size;
																Switch
																{
																	case Size.MaxCount > 0:
																		[DataFieldFrameLength = FrameOffSet + Size.MaxCount]
																		Struct
																		{
																			TSTSProtocolStatus ProtocolStatus;
																			Blob(FrameLength - FrameOffSet) bufData;
																		}
																}
															}
													};
													Align4 Pad;
													UINT32 ProtoStatus1;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 3:
						_Struct RpcGetLastInputTime
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%u", SessionId )]
												Struct
												{
													UINT32 SessionId;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "LastInputTime=%d ReturnValue=%s", LastInputTime, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													INT64 LastInputTime;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 4:
						_Struct RpcGetRemoteAddress
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%u", SessionId )]
												Struct
												{
													UINT32 SessionId;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													TSTSRcmRemoteaddress RemoteAddress;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 8:
						_Struct RpcGetAllListeners
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Level=%u", Level )]
												Struct
												{
													UINT32 Level = MustBeSetToTable(this,"1");
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "NumListeners=%u ReturnValue=%s", NumListeners, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
															Struct
															{
																NdrConformant ListenersSize;
																TSTSListenerenum Listeners[ListenersSize.MaxCount];
															}
													}
													Align4 Pad;
													UINT32 NumListeners;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 9:
						_Struct RpcGetSessionProtocolLastInputTime
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%u", SessionId )]
												Struct
												{
													UINT32 SessionId;
													TSTSProtocolstatusInfoType InfoType;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ProtoStatus1=%u LastInputTime=%d ReturnValue=%s", ProtoStatus1, LastInputTime, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
															Struct
															{
																NdrConformant Size;
																Switch
																{
																	case Size.MaxCount > 0:
																		[DataFieldFrameLength = FrameOffSet + Size.MaxCount]
																		Struct
																		{
																			TSTSProtocolStatus ProtocolStatus;
																			Blob(FrameLength - FrameOffSet) bufData;
																		}
																}
															}
													};
													Align4 Pad1;
													UINT32 ProtoStatus1;
													Align8 pad2;
													INT64 LastInputTime;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 10:
						_Struct RpcGetUserCertificates
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%u", SessionId )]
												Struct
												{
													UINT32 SessionId;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Certs1=%u ReturnValue=%s", Certs1, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													UINT32 Certs;
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
															Struct
															{
																NdrConformant Size;
																BLOB(Size.MaxCount) Certs;
															}
													};
													Align4 Padding;
													UINT32 Certs1;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 11:
						_Struct RpcQuerySessionData
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%u InputData1=%u SessionData1=%u", SessionId, InputData1, SessionData1 )]
												Struct
												{
													UINT32 SessionId;
													TSTSQuerySessionDataType Type;
													NdrPtr InputDataPtr;
													Switch
													{
														case InputDataPtr.ReferentID > 0:
															Struct
															{
																NdrConformant InputDataSize;
																Switch
																{
																	case InputDataSize.MaxCount > 0:
																		BLOB(InputDataSize.MaxCount) InputData;
																}
															}
													};
													Align4 Padding;
													UINT32 InputData1;
													UINT32 SessionData1;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnLength=%u RequireBufferSize=%u ReturnValue=%s", ReturnLength, RequireBufferSize, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrConformantVarying SessionDataLength;
													Switch
													{
														case SessionDataLength.ActualCount > 0:
															BLOB(SessionDataLength.ActualCount) SessionData;
													}
													Align4 Padding;
													UINT32 ReturnLength;
													UINT32 RequireBufferSize;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 5:
					Case 6:
					Case 7:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[TSTSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("TSTS", "Invalid RCMPublic method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[TSTSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("TSTS", "Invalid RCMPublic method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("TSTS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown RCMPublic method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{497D95A6-2D27-4BF5-9BBD-A6046957133C}":
			[Property.TSTSMethodName = "RCMListener::" + TSTSRCMListenerMethodNameTable( Property.MSRPCOpnum )]
			_Struct RCMListener
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 0:
						_Struct RpcOpenListener
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ListenerName=%s", ListenerName.ToString )]
												Struct
												{
													NdrWideString ListenerName;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													ContextHandle Listener;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 1:
						_Struct RpcCloseListener
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Listener;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													ContextHandle Listener;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 2:
						_Struct RpcStopListener
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Listener;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 3:
						_Struct RpcStartListener
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Listener;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 4:
						_Struct RpcIsListening
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Listener;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "IsListening=%d ReturnValue=%s", IsListening, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													BOOL IsListening;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("TSTS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown RCMListener method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{53B46B02-C73B-4A3E-8DEE-B16B80672FC0}":
			[Property.TSTSMethodName = "TSVIPPublic::" + TSTSTSVIPPublicMethodNameTable( Property.MSRPCOpnum )]
			_Struct TSVIPPublic
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 0:
						_Struct RpcGetSessionIP
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Family=%u SessionId=%u", Family, SessionId )]
												Struct
												{
													UINT16 Family;
													Align4 pad;
													UINT32 SessionId;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													TSTSTSVIPSession VIPSession;
													Align4 Padding1;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("TSTS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown TSVIPPublic method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{88143FD0-C28D-4B2B-8FEF-8D882F6A9390}":
			[Property.TSTSMethodName = "TermSrvEnumeration::" + TSTSTermSrvEnumerationMethodNameTable( Property.MSRPCOpnum )]
			_Struct TermSrvEnumeration
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 0:
						_Struct RpcOpenEnum
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													ContextHandle Enum;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 1:
						_Struct RpcCloseEnum
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Enum;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													ContextHandle Enum;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 2:
						_Struct RpcFilterByState
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "State=%d Invert=%d", State, Invert )]
												Struct
												{
													ContextHandle Enum;
													INT32 State = TSTSRpcGetStateStateTable(this);
													INT32 Invert;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 3:
						_Struct RpcFilterByCallersName
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Enum;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 4:
						_Struct RpcEnumAddFilter
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Enum;
													ContextHandle SubEnum;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 5:
						_Struct RpcGetEnumResult
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Level=%u", Level )]
												Struct
												{
													ContextHandle Enum;
													UINT32 Level;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Entries=%u ReturnValue=%s", Entries, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrPtr SessionenumPtr;
													Switch {
														Case SessionenumPtr.ReferentID != 0:
															Struct
															{
																NdrConformant Size;
																TSTSSessionenum Element[ Size.MaxCount ];
															}
													}
													Align4 Pad1;
													UINT32 Entries;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 6:
						_Struct RpcFilterBySessionType
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Enum;
													MSRPCGuid SessionType;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 8:
						_Struct RpcGetSessionIds
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "MaxEntries=%u", MaxEntries )]
												Struct
												{
													TSTSSessionFilter Filter;
													Align4 Pad;
													UINT32 MaxEntries;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionIds1=%u ReturnValue=%s", SessionIds1, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentID > 0:
															Struct
															{
																NdrConformant Size;
																INT32 SessionIds[Size.MaxCount];
															}
													}
													UINT32 SessionIds1;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 9:
						_Struct RpcGetEnumResultEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Level=%u", Level )]
												Struct
												{
													ContextHandle Enum;
													UINT32 Level = TSTSRpcGetEnumResultExLevelTable(this);
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Entries=%u ReturnValue=%s", Entries, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrPtr SessionenumExPtr;
													Switch
													{
														Case SessionenumExPtr.ReferentID != 0:
															Struct
															{
																NdrConformant Size;
																TSTSSessionenumEx SessionEnumResult[Size.MaxCount];
															}
													};
													Align4 Pad1;
													UINT32 Entries;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 10:
						_Struct RpcGetAllSessions
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Level=%u", Level )]
												Struct
												{
													UINT32 Level = TSTSRpcGetAllSessionsLevelTable(this);
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Level=%u Entries=%u ReturnValue=%s", Level, Entries, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													UINT32 Level = TSTSRpcGetAllSessionsLevelTable(this);
													NdrPtr ExecenvdataPtr;
													Switch
													{
														Case ExecenvdataPtr.ReferentID != 0:
															Struct
															{
																NdrConformant Size;
																TSTSPexecenvData SessionData[ Size.MaxCount ];
															}
													};
													Align4 Pad1;
													UINT32 Entries;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 7:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[TSTSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("TSTS", "Invalid TermSrvEnumeration method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[TSTSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("TSTS", "Invalid TermSrvEnumeration method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("TSTS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown TermSrvEnumeration method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{5CA4A760-EBB1-11CF-8611-00A0245420ED}":
			[Property.TSTSMethodName = "IcaApi::" + TSTSIcaApiMethodNameTable( Property.MSRPCOpnum )]
			_Struct IcaApi
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 0:
						_Struct RpcWinStationOpenServer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result),ReturnValue.ToString)]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													ContextHandle Server;
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 1:
						_Struct RpcWinStationCloseServer
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Server;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString)]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 2:
						_Struct RpcIcaServerPing
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Server;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 3:
						_Struct RpcWinStationEnumerate
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Entries=%u ByteCount=%u Index=%u", Entries, ByteCount, Index )]
												Struct
												{
													ContextHandle Server;
													UINT32 Entries;
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
														Struct
														{
															NdrConformant Size;
															[DataFieldFrameLength = FrameOffSet + Size.MaxCount]
															while [FrameOffSet < FrameLength]
															{
																TSTSLogonId LogonId;
															}
														}
													}
													Align4 Pad;
													UINT32 ByteCount;
													UINT32 Index;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s Entries=%u ByteCount=%u Index=%u ReturnValue=%s", NtStatusTable(Result), Entries, ByteCount, Index,ReturnValue.ToString)]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													UINT32 Entries;
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
														Struct
														{
															NdrConformant Size;
															[DataFieldFrameLength = FrameOffSet + Size.MaxCount]
															while [FrameOffSet < FrameLength]
															{
																TSTSLogonId LogonId;
															}
														}
													}
													Align4 Padding;
													UINT32 ByteCount;
													UINT32 Index;
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 4:
						_Struct RpcWinStationRename
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "NameOldSize=%u NameNewSize=%u", NameOldSize, NameNewSize )]
												Struct
												{
													ContextHandle Server;
													NdrConformant WinStationNameOldSize;
													switch
													{
														case WinStationNameOldSize.MaxCount > 0:UnicodeString(WinStationNameOldSize.MaxCount) WinStationNameOld;
													}
													Align4 Pad1;
													UINT32 NameOldSize;
													NdrConformant WinStationNameNewSize;
													switch
													{
														case WinStationNameNewSize.MaxCount > 0:UnicodeString(WinStationNameNewSize.MaxCount) WinStationNameNew;
													}
													Align4 Pad2;
													UINT32 NameNewSize;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 5:
						_Struct RpcWinStationQueryInformation
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "LogonId=%u WinStationInformationClass=%u WinStationInformationLength=%u", LogonId, WinStationInformationClass, WinStationInformationLength )]
												Struct
												{
													ContextHandle Server;
													UINT32 LogonId;
													UINT32 WinStationInformationClass = TSTSWinStationInfoClassTable(this);
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
														Struct
														{
															NdrConformant Size;
															BLOB(Size.MaxCount) WinstationInformation;
														}
													}
													Align4 Pad;
													UINT32 WinStationInformationLength;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnLength=%u ReturnValue=%s", NtStatusTable(Result), ReturnLength, ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
														Struct
														{
															NdrConformant Size;
															BLOB(Size.MaxCount) WinstationInformation;
														}
													}
													Align4 Pad;
													UINT32 ReturnLength;
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 6:
						_Struct RpcWinStationSetInformation
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "LogonId=%u WinStationInformationClass=%u WinStationInformationLength=%u", LogonId, WinStationInformationClass, WinStationInformationLength )]
												Struct
												{
													ContextHandle Server;
													UINT32 LogonId;
													UINT32 WinStationInformationClass = TSTSWinStationInfoClassTable(this);
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
														Struct
														{
															NdrConformant Size;
															BLOB(Size.MaxCount) WinstationInformation;
														}
													}
													Align4 Pad;
													UINT32 WinStationInformationLength;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
														Struct
														{
															NdrConformant Size;
															BLOB(Size.MaxCount) WinstationInformation;
														}
													}
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 7:
						_Struct RpcWinStationSendMessage
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "LogonId=%u TitleLength=%u MessageLength=%u Style=%u Timeout=%u DoNotWait=%s", LogonId, TitleLength, MessageLength, Style, Timeout, DoNotWait.ToString )]
												Struct
												{
													ContextHandle Server;
													UINT32 LogonId;
													NdrConformant TitleSize;
													switch
													{
														case TitleSize.MaxCount > 0: UnicodeString(TitleSize.MaxCount) Title;
													}
													Align4 Pad1;
													UINT32 TitleLength;
													NdrConformant MessageSize;
													switch
													{
														case MessageSize.MaxCount > 0: UnicodeString(MessageSize.MaxCount) Message;
													}
													Align4 Padd2;
													UINT32 MessageLength;
													UINT32 Style;
													UINT32 Timeout;
													BOOLEAN DoNotWait;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s Response=%u ReturnValue=%s", NtStatusTable(Result), Response, ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													UINT32 Response;
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 8:
						_Struct RpcLogonIdFromWinStationName
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "NameSize=%u", NameSize )]
												Struct
												{
													ContextHandle Server;
													NdrConformant WinStationNameSize;
													switch
													{
														case WinStationNameSize.MaxCount > 0: UnicodeString(WinStationNameSize.MaxCount) WinStationName;
													}
													Align4 Pad;
													UINT32 NameSize;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s LogonId=%u ReturnValue=%s", NtStatusTable(Result), LogonId, ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													UINT32 LogonId;
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 9:
						_Struct RpcWinStationNameFromLogonId
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "LoginId=%u NameSize=%u", LoginId, NameSize )]
												Struct
												{
													ContextHandle Server;
													UINT32 LoginId;
													NdrConformant WinStationNameSize;
													switch
													{
														case WinStationNameSize.MaxCount > 0: UnicodeString(WinStationNameSize.MaxCount) WinStationName;
													}
													Align4 Pad;
													UINT32 NameSize;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													NdrConformant WinStationNameSize;
													switch
													{
														case WinStationNameSize.MaxCount > 0: UnicodeString(WinStationNameSize.MaxCount) WinStationName;
													}
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 10:
						_Struct RpcWinStationConnect
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ClientLogonId=%u ConnectLogonId=%u TargetLogonId=%u PasswordSize=%u Wait=%s", ClientLogonId, ConnectLogonId, TargetLogonId, PasswordSize, Wait.ToString )]
												Struct
												{
													ContextHandle Server;
													UINT32 ClientLogonId;
													UINT32 ConnectLogonId;
													UINT32 TargetLogonId;
													NdrConformant WinStationNameSize;
													switch
													{
														case WinStationNameSize.MaxCount > 0: UnicodeString(WinStationNameSize.MaxCount) WinStationName;
													}
													Align4 Pad;
													UINT32 PasswordSize;
													BOOLEAN Wait;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 13:
						_Struct RpcWinStationDisconnect
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "LogonId=%u Wait=%s", LogonId, Wait.ToString )]
												Struct
												{
													ContextHandle Server;
													UINT32 LogonId;
													BOOLEAN Wait;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 14:
						_Struct RpcWinStationReset
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "LogonId=%u Wait=%s", LogonId, Wait.ToString )]
												Struct
												{
													ContextHandle Server;
													UINT32 LogonId;
													BOOLEAN Wait;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 15:
						_Struct RpcWinStationShutdownSystem
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ClientLogonId=%u ShutdownFlags=%u", ClientLogonId, ShutdownFlags )]
												Struct
												{
													ContextHandle Server;
													UINT32 ClientLogonId;
													UINT32 ShutdownFlags
													{
														UINT32 WsdLogoff:1 = FormatString("  (%s) %s",this.ToBitString,this ? "Forces sessions to logoff." : "Don't forces sessions to logoff.");
														UINT32 WsdShutdown:1 = FormatString("(%s) %s",this.ToBitString,this ? "Shuts down the system." : "Doesn't shut down the system.");
														UINT32 WsdReboot:1 = FormatString("  (%s) %s",this.ToBitString,this ? "Reboots after shutdown." : "Doesn't reboot after shutdown.");
														UINT32 WsdPoweroff:1 = FormatString("(%s) %s",this.ToBitString,this ? "Powers off after shutdown." : "Doesn't power off after shutdown.");
														UINT32 Unused:28 = FormatString("   (%s)",this.ToBitString);
													};
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 16:
						_Struct RpcWinStationWaitSystemEvent
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "EventMask=%u", EventMask )]
												Struct
												{
													ContextHandle Server;
													UINT32 EventMask = this ? "WEVENT_ALL - Wait for all event types." : "WEVENT_NONE - The client desires to clear its event wait block."
													{
														UINT32 Create:1 = FormatString("      (%s) %s",this.ToBitString,this ? "Wait for a new session to be created." : "Don't wait for a new session to be created.");
														UINT32 Delete:1 = FormatString("      (%s) %s",this.ToBitString,this ? "Wait for an existing session to be deleted." : "Don't wait for an existing session to be deleted.");
														UINT32 Rename:1 = FormatString("      (%s) %s",this.ToBitString,this ? "Wait for a session to be renamed." : "Don't wait for a session to be renamed.");
														UINT32 Connect:1 = FormatString("     (%s) %s",this.ToBitString,this ? "The session connected to a client." : "The session didn't connect to a client.");
														UINT32 Disconnect:1 = FormatString("  (%s) %s",this.ToBitString,this ? "A client disconnected from the session." : "A client didn't disconnect from the session.");
														UINT32 Logon:1 = FormatString("       (%s) %s",this.ToBitString,this ? "A user logged on to the session." : "A user didn't log on to the session.");
														UINT32 Logoff:1 = FormatString("      (%s) %s",this.ToBitString,this ? "A user logged off from the session." : "A user didn't log off from the session.");
														UINT32 StateChange:1 = FormatString(" (%s) %s",this.ToBitString,this ? "The session state changed." : "The session state don't changed.");
														UINT32 License:1 = FormatString("     (%s) %s",this.ToBitString,this ? "The license state changed." : "The license state don't changed.");
														UINT32 Unused:22 = FormatString("    (%s)",this.ToBitString);
														UINT32 Flush:1 = FormatString("       (%s) %s",this.ToBitString,this ? "Release all waiting clients." : "Don't release all waiting clients.");
													};
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s EventFlags=%u ReturnValue=%s", NtStatusTable(Result), EventFlags, ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													UINT32 EventFlags;
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 17:
						_Struct RpcWinStationShadow
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "LogonId=%u NameSize=%u TargetLogonId=%u HotKeyVk=%c HotkeyModifiers=%u", LogonId, NameSize, TargetLogonId, HotKeyVk, HotkeyModifiers )]
												Struct
												{
													ContextHandle Server;
													UINT32 LogonId;
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
														Struct
														{
															NdrConformant TargetServerNameSize;
															switch
															{
																case TargetServerNameSize.MaxCount > 0: UnicodeString(TargetServerNameSize.MaxCount) TargetServerName;
															}
														}
													};
													Align4 Pad1;
													UINT32 NameSize;
													UINT32 TargetLogonId;
													UINT8 HotKeyVk;
													Align2 pad2;
													UINT16 HotkeyModifiers;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 29:
						_Struct RpcWinStationBreakPoint
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "LogonId=%u KernelFlag=%s", LogonId, KernelFlag.ToString )]
												Struct
												{
													ContextHandle Server;
													UINT32 LogonId;
													BOOLEAN KernelFlag;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 30:
						_Struct RpcWinStationReadRegistry
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Server;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 34:
						_Struct OldRpcWinStationEnumerateProcesses
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ByteCount=%u", ByteCount )]
												Struct
												{
													ContextHandle Server;
													UINT32 ByteCount;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													NdrConformant BufSize;
													Switch
													{
														case BufSize.MaxCount > 0:
															Struct
															{
																TSTSTsProcessInformationNt4 ProcessInformation;
																Blob(SIZEOF_TS4_SYSTEM_THREAD_INFORMATION) SystemThreadInformation;
																TSTSTsSysProcessInformation SysProcessInformation;
															}
													}
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 36:
						_Struct RpcWinStationEnumerateProcesses
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ByteCount=%u", ByteCount )]
												Struct
												{
													ContextHandle Server;
													UINT32 ByteCount;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													NdrConformant BufSize;
													Switch
													{
														case BufSize.MaxCount > 0:
															Struct
															{
																TSTSTsProcessInformationNt4 ProcessInformation;
																Blob(SIZEOF_TS4_SYSTEM_THREAD_INFORMATION) SystemThreadInformation;
																TSTSTsSysProcessInformation SysProcessInformation;
															}
													}
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 37:
						_Struct RpcWinStationTerminateProcess
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ProcessId=%u ExitCode=%u", ProcessId, ExitCode )]
												Struct
												{
													ContextHandle Server;
													UINT32 ProcessId;
													UINT32 ExitCode;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 43:
						_Struct RpcWinStationGetAllProcesses
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Level=%u NumberOfProcesses=%u", Level, NumberOfProcesses )]
												Struct
												{
													ContextHandle Server;
													UINT32 Level;
													UINT32 NumberOfProcesses;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s NumberOfProcesses=%u ReturnValue=%s", NtStatusTable(Result), NumberOfProcesses, ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													UINT32 NumberOfProcesses;
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
															Struct
															{
																[Local.MaxCount = Size.MaxCount]
																NdrConformant Size;
																[Property.AllProcessesInfoCount = 0]
																TSTSTsAllProcessesInfo AllProcessesInfo[Size.MaxCount];
																
																[Local.Count = 0]
																[MaxLoopCount = Size.MaxCount]
																while [Local.Count < Local.MaxCount]
																{
																	Struct TSTSTsAllProcessesInfoRef
																	{
																		[Post.Local.Count = Local.Count + 1]
																		Switch
																		{
																			case Property.TSTSTsProcessInfoPtr$[Local.Count] > 0:
																				Struct
																				{
																					Align8 Pad;
																					TSTSTsSysProcessInformation TsAllProcessesInfo;
																				}
																		}
																		Switch
																		{
																			case Property.TSTSSidPtr$[Local.Count] > 0:
																				SID(True) Sid;
																		}
																	}
																}
															}
													};
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 44:
						_Struct RpcWinStationGetProcessSid
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "UniqueProcessId=%u SidSize=%u SizeNeeded=%u", UniqueProcessId, SidSize, SizeNeeded )]
												Struct
												{
													ContextHandle Server;
													UINT32 UniqueProcessId;
													INT64 ProcessStartTime;
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
															SID(True) ProcessUserSid;
													};
													Align4 Pad1;
													UINT32 SidSize;
													UINT32 SizeNeeded;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s SizeNeeded=%u ReturnValue=%s", NtStatusTable(Result), SizeNeeded, ReturnValue.ToString )]
												Struct
												{
													INT32 Result = NtStatusTable(this);
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
															SID(True) ProcessUserSid;
													}
													Align4 Pad1;
													UINT32 SizeNeeded;
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 45:
						_Struct RpcWinStationGetTermSrvCountersValue
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Entries=%u", Entries )]
												Struct
												{
													ContextHandle Server;
													UINT32 Entries;
													NdrConformant CounterSize;
													TSTSTsCounter Counter[CounterSize.MaxCount];
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													NdrConformant CounterSize;
													TSTSTsCounter Counter[CounterSize.MaxCount];
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 46:
						_Struct RpcWinStationReInitializeSecurity
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Server;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 53:
						_Struct RpcWinStationGetLanAdapterName
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "PdNameSize=%u LanAdapter=%u", PdNameSize, LanAdapter )]
												Struct
												{
													ContextHandle Server;
													UINT32 PdNameSize;
													NdrConformant NameSize;
													Switch
													{
														case NameSize.MaxCount > 0:
														UnicodeString(NameSize.MaxCount) Name;
													}
													Align4 Pad;
													UINT32 LanAdapter;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s Length=%u ReturnValue=%s", NtStatusTable(Result), Length, ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													UINT32 Length;
													NdrPtr Pointer;
													Switch
													{
														case Pointer.ReferentId > 0:
															Struct
															{
																NdrConformant NameSize;
																Switch
																{
																	case NameSize.MaxCount > 0:
																		UnicodeString(NameSize.MaxCount) LanAdapter;
																}
															}
													}
													Align4 Pad;
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 58:
						_Struct RpcWinStationUpdateSettings
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SettingsClass=%u SettingsParameters=%u", SettingsClass, SettingsParameters )]
												Struct
												{
													ContextHandle Server;
													UINT32 SettingsClass = TSTSRpcWinStationUpdateSettingsSettingsClassTable(this);
													UINT32 SettingsParameters = MustBeSetToTable(this,"0");
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 59:
						_Struct RpcWinStationShadowStop
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "LogonId=%u Wait=%s", LogonId, Wait.ToString )]
												Struct
												{
													ContextHandle Server;
													UINT32 LogonId;
													BOOLEAN Wait;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 60:
						_Struct RpcWinStationCloseServerEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Server;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													ContextHandle Server;
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 61:
						_Struct RpcWinStationIsHelpAssistantSession
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%u", SessionId )]
												Struct
												{
													ContextHandle Server;
													UINT32 SessionId;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 62:
						_Struct RpcWinStationGetMachinePolicy
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "BufferSize=%u", BufferSize )]
												Struct
												{
													ContextHandle Server;
													NdrConformant PolicySize;
													Switch
													{
														case PolicySize.MaxCount > 0:
															Struct
															{
																[Property.TSTSPolicyTsMachineLength = FrameOffSet + PolicySize.MaxCount]
																TSTSPolicyTsMachine Policy;
																Switch
																{
																	case Property.TSTSPolicyTsMachineLength > FrameOffSet:
																		BLOB(TSTSPolicyTsMachineLength - FrameOffSet) Padding;
																}
															}
													};
													Align4 Pad;
													UINT32 BufferSize;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", ReturnValue.ToString )]
												Struct
												{
													NdrConformant PolicySize;
													Switch
													{
														case PolicySize.MaxCount > 0:
															Struct
															{
																[Property.TSTSPolicyTsMachineLength = FrameOffSet + PolicySize.MaxCount]
																TSTSPolicyTsMachine PolicyTsMachine;
																Switch
																{
																	case Property.TSTSPolicyTsMachineLength > FrameOffSet:
																		BLOB(TSTSPolicyTsMachineLength - FrameOffSet) Padding;
																}
															}
													};
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 65:
						_Struct RpcWinStationCheckLoopBack
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ClientLogonId=%u TargetLogonId=%u NameSize=%u", ClientLogonId, TargetLogonId, NameSize )]
												Struct
												{
													ContextHandle Server;
													UINT32 ClientLogonId;
													UINT32 TargetLogonId;
													NdrConformant Size;
													Switch
													{
														case Size.MaxCount > 0:
															UnicodeString(Size.MaxCount) TargetServerName;
													};
													Align4 Pad;
													UINT32 NameSize;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 66:
						_Struct RpcConnectCallback
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "TimeOut=%u AddressType=%u AddressSize=%u", TimeOut, AddressType, AddressSize )]
												Struct
												{
													ContextHandle Server;
													UINT32 TimeOut;
													UINT32 AddressType;
													NdrConformant Size;
													Switch
													{
														case Size.MaxCount > 0:
															BLOB(Size.MaxCount) Address;
													};
													Align4 Pad;
													UINT32 AddressSize;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 70:
						_Struct RpcWinStationGetAllProcessesNt6
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Level=%u NumberOfProcesses=%u", Level, NumberOfProcesses )]
												Struct
												{
													ContextHandle Server;
													UINT32 Level = MustBeSetToTable(this,"0");
													UINT32 NumberOfProcesses;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s NumberOfProcesses=%u ReturnValue=%s", NtStatusTable(Result), NumberOfProcesses, ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													UINT32 NumberOfProcesses;
													NdrPtr TsAllProcessesInfoNt6Ptr;
													Switch
													{
														Case TsAllProcessesInfoNt6Ptr.ReferentID != 0:
															Struct
															{
																[Local.MaxCount = Size.Maxcount]
																NdrConformant Size;
																[ Property.TSTSTsAllProcessesInfoNt6Count = 0 ]
																TSTSTsAllProcessesInfoNt6 TsAllProcessesInfoNt6[Size.MaxCount];
																[Local.Count = 0]
																[MaxLoopCount = Local.MaxCount]
																while [local.count < Local.MaxCount]
																{
																	[Post.Local.Count = Local.Count + 1]
																	Struct TSTSTsAllProcessesInfoNt6Ref
																	{
																		Switch
																		{
																			case Property.TSTSTsProcessInfoptr$[Local.Count] != 0:
																				Struct
																				{
																					Align8 Pad;
																					TSTSTsSysProcessInformationNt6 TsProcessInfo;
																				}
																		}
																		Switch
																		{
																			case Property.TSTSSidPtr$[Local.Count] != 0:
																				SID(True) Sid;
																		}
																	}
																}
															}
													};
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 75:
						_Struct RpcWinStationOpenSessionDirectory
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ServerName=%s", ServerName.ToString )]
												Struct
												{
													ContextHandle Server;
													NdrWideString ServerName;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Result=%s ReturnValue=%s", NtStatusTable(Result), ReturnValue.ToString )]
												Struct
												{
													UINT32 Result = NtStatusTable(this);
													BOOLEAN ReturnValue;
												}
										}
									}
							}
						}
					
					Case 11:
					Case 12:
					Case 18:
					Case 19:
					Case 20:
					Case 21:
					Case 22:
					Case 23:
					Case 24:
					Case 25:
					Case 26:
					Case 27:
					Case 28:
					Case 31:
					Case 32:
					Case 33:
					Case 35:
					Case 38:
					Case 39:
					Case 40:
					Case 41:
					Case 42:
					Case 47:
					Case 48:
					Case 49:
					Case 50:
					Case 51:
					Case 52:
					Case 54:
					Case 55:
					Case 56:
					Case 57:
					Case 63:
					Case 64:
					Case 67:
					Case 68:
					Case 69:
					Case 71:
					Case 72:
					Case 73:
					Case 74:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[TSTSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("TSTS", "Invalid IcaApi method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[TSTSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("TSTS", "Invalid IcaApi method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("TSTS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown IcaApi method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{484809D6-4239-471B-B5BC-61DF8C23AC48}":
			[Property.TSTSMethodName = "TermSrvSession::" + TSTSTermSrvSessionMethodNameTable( Property.MSRPCOpnum )]
			_Struct TermSrvSession
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 0:
						_Struct RpcOpenSession
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%d", SessionId )]
												Struct
												{
													INT32 SessionId;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													ContextHandle Session;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 1:
						_Struct RpcCloseSession
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Session;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													ContextHandle Session;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 2:
						_Struct RpcConnect
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "TargetSessionId=%d Password=%s", TargetSessionId, Password.ToString )]
												Struct
												{
													ContextHandle Session;
													INT32 TargetSessionId;
													NdrWideString Password;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 3:
						_Struct RpcDisconnect
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Session;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 4:
						_Struct RpcLogoff
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Session;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 5:
						_Struct RpcGetUserName
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Session;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "UserName=%s Domain=%s ReturnValue=%s", UserName.ToString, Domain.ToString, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrWideStringPtr UserName;
													NdrWideStringPtr Domain;
													Align4 Pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 6:
						_Struct RpcGetTerminalName
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Session;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "TerminalName=%s ReturnValue=%s", TerminalName.ToString, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrWideStringPtr TerminalName;
													Align4 Pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 7:
						_Struct RpcGetState
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Session;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "State=%d ReturnValue=%s", State, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													INT32 State = TSTSRpcGetStateStateTable(this);
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 8:
						_Struct RpcIsSessionDesktopLocked
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Session;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 9:
						_Struct RpcShowMessageBox
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Title=%s Message=%s Style=%u Timeout=%u DoNotWait=%d", Title.ToString, Message.ToString, Style, Timeout, DoNotWait )]
												Struct
												{
													ContextHandle Session;
													NdrWideString Title;
													NdrWideString Message;
													Align4 Pad;
													UINT32 Style;
													UINT32 Timeout;
													BOOL DoNotWait;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "Response=%u ReturnValue=%s", Response, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													UINT32 Response = TSTSRpcShowMessageBoxResponseTable(this);
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 10:
						_Struct RpcGetTimes
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Session;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ConnectTime=%d DisconnectTime=%d LogonTime=%d ReturnValue=%s", ConnectTime, DisconnectTime, LogonTime, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													INT64 ConnectTime;
													INT64 DisconnectTime;
													INT64 LogonTime;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 11:
						_Struct RpcGetSessionCounters
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "UEntries=%u", UEntries )]
												Struct
												{
													NdrConformant CounterSize;
													TSTSTsCounter Counter[CounterSize.MaxCount];
													Align4 Pad1;
													UINT32 UEntries;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													NdrConformant CounterSize;
													TSTSTsCounter Counter[CounterSize.MaxCount];
													Align4 Pad1;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 12:
						_Struct RpcGetSessionInformation
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%d", SessionId )]
												Struct
												{
													INT32 SessionId;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													TSTSLSMSessionInformation SessionInfo;
													Align4 Pad1;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 15:
						_Struct RpcGetLoggedOnCount
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "UserSessions=%u DeviceSessions=%u ReturnValue=%s", UserSessions, DeviceSessions, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													UINT32 UserSessions;
													UINT32 DeviceSessions;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 16:
						_Struct RpcGetSessionType
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%d", SessionId )]
												Struct
												{
													INT32 SessionId;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionType=%u ReturnValue=%s", SessionType, HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													UINT32 SessionType;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 17:
						_Struct RpcGetSessionInformationEx
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "SessionId=%d Level=%u", SessionId, Level )]
												Struct
												{
													INT32 SessionId;
													UINT32 Level = MustBeSetToTable(this,"1");
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TSTSSummary = FormatString( "ReturnValue=%s", HResultErrorCodeNameTable(ReturnValue) )]
												Struct
												{
													TSTSLsmsessioninformationEx LSMSessionInfoExPtr;
													Align4 Pad;
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					
					Case 13:
					Case 14:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[TSTSSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("TSTS", "Invalid TermSrvSession method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[TSTSSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("TSTS", "Invalid TermSrvSession method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("TSTS", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown TermSrvSession method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
	}
}

//
//	2.2.2.18.1.1   TS_SYSTEMTIME
//
Struct TSTSTsSystemtime
{
	UINT16 WYear;
	UINT16 WMonth = TsTsrTsSystemtimeWMonthTable( this );
	UINT16 WDayOfWeek = TsTsrTsSystemtimeWDayOfWeekTable( this );
	UINT16 WDay = TsTsrTsSystemtimeWDayTable( this );
	UINT16 WHour;
	UINT16 WMinute;
	UINT16 WSecond;
	UINT16 WMilliseconds;
}

Table TsTsrTsSystemtimeWMonthTable( Value )
{
	Switch( Value )
	{
		Case 1: "January";
		Case 2: "February";
		Case 3: "March";
		Case 4: "April";
		Case 5: "May";
		Case 6: "June";
		Case 7: "July";
		Case 8: "August";
		Case 9: "September";
		Case 10: "October";
		Case 11: "November";
		Case 12: "December";
		Default: "unknown";
	}
}

Table TsTsrTsSystemtimeWDayOfWeekTable( Value )
{
	Switch( Value )
	{
		Case 0: "Sunday";
		Case 1: "Monday";
		Case 2: "Tuesday";
		Case 3: "Wednesday";
		Case 4: "Thursday";
		Case 5: "Friday";
		Case 6: "Saturday";
		Default: "unknown";
	}
}

Table TsTsrTsSystemtimeWDayTable( Value )
{
	Switch( Value )
	{
		Case 1: "First occurrence of wDayOfWeek";
		Case 2: "Second occurrence of wDayOfWeek";
		Case 3: "Third occurrence of wDayOfWeek";
		Case 4: "Fourth occurrence of wDayOfWeek";
		Case 5: "Last occurrence of wDayOfWeek";
		Default: "unknown";
	}
}

//
//	2.2.2.18.1   TS_TIME_ZONE_INFORMATION
// Alignment: None 
//
Struct TSTSTsTimeZoneInformation
{
	INT32 Bias;
	UnicodeString(32) StandardName;
	TSTSTsSystemtime StandardDate;
	INT32 StandardBias;
	UnicodeString(32) DaylightName;
	TSTSTsSystemtime DaylightDate;
	INT32 DaylightBias;
}

//
//	2.2.2.6.1   ExecEnvData
// 	Alignment: Align4
//
Struct TSTSExecEnvData
{
	UINT32 SwitchValue;
	Switch(Property. MSRPCNdr64)
	{
		Case true: Align4 Pad2;
	}
	Switch( SwitchValue )
	{
		Case 1:
			TSTSExecenvdataLevel1 ExecEnvEnumLevel1;
		Case 2:
			TSTSExecenvdataLevel2 ExecEnvEnumLevel2;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	2.2.2.6   PEXECENVDATA
//	Alignment: Align4
//
Struct TSTSPexecenvData
{
	UINT32 Level;
	Align4 Pad1;
	TSTSExecEnvData Data;
}

//
//	_EXECENVDATA_LEVEL1
//	Alignment: Align4
//
Struct TSTSExecenvdataLevel1
{
	INT32 ExecEnvId;
	INT32 State;
	UnicodeString(33) SessionName;
	switch
	{
		case Property.MSRPCNdr64:
			Align4 Pad;
	}
}

//
//	_EXECENVDATA_LEVEL2
//	Alignment: Align4
//
Struct TSTSExecenvdataLevel2
{
	INT32 ExecEnvId;
	INT32 State;
	UnicodeString(33) SessionName;
	Align4 Padding1;
	INT32 AbsSessionId;
	UnicodeString(33) HostName;
	UnicodeString(33) UserName;
	UnicodeString(33) DomainName;
	UnicodeString(33) FarmName;
	switch
	{
		case Property.MSRPCNdr64:
			Align4 Pad;
	}
}

//
//	2.2.2.11 LISTENERENUM
//	Alignment : Align4
//
Struct TSTSListenerenum
{
	UINT32 Level;
	Align4 Pad1;
	TSTSListenerInfo Data;
}

//
//	_LISTENERENUM_LEVEL1
// Alignment:Align4
//
Struct TSTSListenerenumLevel1
{
	Align4 Pad1;
	INT32 Id;
	BOOL Listening;
	UnicodeString(33) Name;
	switch
	{
		case Property.MSRPCNdr64:
			Align4 Pad2;
	}
}

//
//	_ListenerInfo
//	Alignment: Align4
//
Struct TSTSListenerInfo
{
	UINT32 SwitchValue;
	Switch( SwitchValue )
	{
		Case 1:
			TSTSListenerenumLevel1 ListenerEnumLevel1;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	_LSM_SESSIONINFO_EX
// Alignment: Align8
//
Struct TSTSLsmSessioninfoEx
{
	Switch(Property. MSRPCNdr64)
	{
		Case true: Align8 pad2;
	}
	UINT32 SwitchValue;
	Switch(Property. MSRPCNdr64)
	{
		Case true: Align8 pad2;
	}
	Switch( SwitchValue )
	{
		Case 1:
			Struct
			{
				Align8 Padding;
				TSTSLsmSessioninfoExLevel1 LsmSessionInfoLevel1;
			}
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	2.2.2.10 _LSM_SESSIONINFO_EX_LEVEL1
//	Alignment: Align8
//
Struct TSTSLsmSessioninfoExLevel1
{
	INT32 SessionState;
	INT32 SessionFlags = this ? "Unknown session state" : "Session is locked"
	{
		INT32 WtsSessionSateUnlock:1 = FormatString("(%s) %s", this.ToBitString, this ? "Session is unlocked" : "Session isn't unlocked");
		INT32 Unused:31 = FormatString("            (%s)", this.ToBitString); 
	};
	UnicodeString(33) SessionName;
	UnicodeString(18) DomainName;
	UnicodeString(21) UserName;
	Align8 Pad1;
	INT64 ConnectTime;
	INT64 DisconnectTime;
	INT64 LogonTime;
	INT64 LastInputTime;
	UINT32 ProtocolDataSize;
	NdrPtr ProtocolDataPtr;
	Switch
	{
		case Property.MSRPCNdr64:
			Align8 Pad;
	}
	Switch
	{
		case ProtocolDataPtr.ReferentID > 0:
			Struct
			{
				NdrConformant Size;
				switch
				{
					case Size.MaxCount > 0:
					BLOB(Size.MaxCount) protocolData;
				}
			}
	}
}

//
//	2.2.2.8 _LSMSESSIONINFORMATION_EX
//	Alignment: Align8
//
Struct TSTSLsmsessioninformationEx
{
	UINT32 Level = MustBeSetToTable(this,"1");
	Align8 Pad;
	TSTSLsmSessioninfoEx Data;
}

//
//	_LSMSessionInformation
// Alignment: Align8
//
Struct TSTSLSMSessionInformation
{
	NdrPtr UserNamePtr;
	NdrPtr DomainPtr;
	NdrPtr TerminalNamePtr;
	INT32 SessionState;
	BOOL DesktopLocked;
	Align8 Pad1;
	INT64 ConnectTime;
	INT64 DisconnectTime;
	INT64 LogonTime;
	Switch {
		Case UserNamePtr.ReferentID != 0:
			NdrWideString UserName;
	}
	Switch {
		Case DomainPtr.ReferentID != 0:
			NdrWideString Domain;
	}
	Switch {
		Case TerminalNamePtr.ReferentID != 0:
			NdrWideString TerminalName;
	}
}

//
//	PROTOCOLSTATUS_INFO_TYPE
//
Struct TSTSProtocolstatusInfoType
{
	NdrEnum Value = TSTSProtocolstatusInfoTypeTable(this.value);
}

Table TSTSProtocolstatusInfoTypeTable( Value )
{
	Switch( Value )
	{
		Case 0: "PROTOCOLSTATUS_INFO_BASIC - Returns basic information about the protocol status in a PROTOCOLSTATUS structure.";
		Case 1: "PROTOCOLSTATUS_INFO_EXTENDED - Returns extended information about the protocol status. Extended information is returned in a PROTOCOLSTATUSEX structure.";
	}
}

//
//	2.2.2.19.1.2   PROTOCOLCOUNTERS
// Alignment: Align4
//
Struct TSTSProtocolCounters
{
	UINT32 WdBytes;
	UINT32 WdFrames;
	UINT32 WaitForOutBuf;
	UINT32 Frames;
	UINT32 Bytes;
	UINT32 CompressedBytes;
	UINT32 CompressFlushes;
	UINT32 Errors;
	UINT32 Timeouts;
	UINT32 AsyncFramingError;
	UINT32 AsyncOverrunError;
	UINT32 AsyncOverflowError;
	UINT32 AsyncParityError;
	UINT32 TdErrors;
	UINT16 ProtocolType;
	UINT16 Length;
	UINT32 Reserved[Length];
}

//
//	2.2.2.18   WINSTATIONCLIENT
//
struct TSTSWinstationClient
{
	Struct
	{
		UINT32 TextOnly:1 = FormatString("           (%s) Text-only client session.This is always FALSE.",this.ToBitString);
		UINT32 DisableCtrlAltDel:1 = FormatString("  (%s) %s",this.ToBitString, this ? "CTRL+ALT+DEL is disabled" : "CTRL+ALT+DEL is enabled");
		UINT32 Mouse:1 = FormatString("              (%s) %s",this.ToBitString, this ? "The mouse is connected to the client" : "The mouse isn't connected to the client");
		UINT32 DoubleClickDetect:1 = FormatString("  (%s) %s",this.ToBitString, this ? "Detect double-click" : "Don't detect double-click");
		UINT32 INetClient:1 = FormatString("         (%s) Always set to FALSE.",this.ToBitString);
		UINT32 PromptForPassword:1 = FormatString("  (%s) %s",this.ToBitString, this ? "The user will always be prompted for a password, even if the password is saved from previous connection" : "The user won't be prompted for a password.");
		UINT32 MaximizeShell:1 = FormatString("      (%s) %s",this.ToBitString, this ? "Maximize the shell" : "Don't maximize the shell");
		UINT32 EnableWindowsKey:1 = FormatString("   (%s) %s",this.ToBitString, this ? "A Windows key enabled in the terminal server session" : "A Windows key disabled in the terminal server session");
		UINT32 RemoteConsoleAudio:1 = FormatString(" (%s) %s",this.ToBitString, this ? "Audio for the console session is left remotely at the server" : "Audio for the console session isn't left remotely at the server");
		UINT32 PasswordIsScPin:1 = FormatString("    (%s) %s",this.ToBitString, this ? "The password field contains a smart card PIN" : "The password field doesn't contain a smart card PIN");
		UINT32 NoAudioPlayback:1 = FormatString("    (%s) %s",this.ToBitString, this ? "Audio SHOULD NOT be played back," : "Audio SHOULD be played back,");
		UINT32 UsingSavedCreds:1 = FormatString("    (%s) %s",this.ToBitString, this ? "The terminal server connection was made using a credential saved on the client computer" : "The terminal server connection wasn't made using a credential saved on the client computer");
		UINT32 Reserved:20 = FormatString("            (%s)Reserved",this.ToBitString);
	}
	UnicodeString(CLIENTNAME_LENGTH + 1) ClientName;
	UnicodeString(DOMAIN_LENGTH + 1) Domain;
	UnicodeString(USERNAME_LENGTH + 1) UserName;
	UnicodeString(PASSWORD_LENGTH + 1) Password;
	UnicodeString(DIRECTORY_LENGTH + 1) WorkDirectory;
	UnicodeString(INITIALPROGRAM_LENGTH + 1) InitialProgram;
	Align4 Padding1;
	UINT32 SerialNumber;
	UINT8 EncryptionLevel;
	UINT32 ClientAddressFamily;
	UnicodeString(CLIENTADDRESS_LENGTH + 1) ClientAddress;
	Align4 Padding2;
	UINT16 HRes;
	UINT16 VRes;
	UINT16 ColorDepth;
	UINT16 ProtocolType;
	UINT32 KeyboardLayout;
	UINT32 KeyboardType;
	UINT32 KeyboardSubType;
	UINT32 KeyboardFunctionKey;
	UnicodeString(IMEFILENAME_LENGTH + 1) imeFileName;
	UnicodeString(DIRECTORY_LENGTH + 1) ClientDirectory;
	UnicodeString(CLIENTLICENSE_LENGTH + 1) ClientLicense;
	UnicodeString(CLIENTMODEM_LENGTH + 1) ClientModem;
	Align4 Padding3;
	UINT32 ClientBuildNumber;
	UINT32 ClientHardwareId;
	UINT16 ClientProductId;
	UINT16 OutBufCountHost;
	UINT16 OutBufCountClient;
	UINT16 OutBufLength;
	UnicodeString(9) AudioDriverName;
	Align4 Padding4;
	TSTSTsTimeZoneInformation ClientTimeZone;
	UINT32 ClientSessionId;
	UnicodeString(CLIENT_PRODUCT_ID_LENGTH) clientDigProductId;
	Align4 Padding5;
	UINT32 PerformanceFlags = this ? "" : "TS_PERF_DISABLE_NOTHING"
	{
		UINT32 DisableWallpaper:1 = FormatString("           (%s) %s", this.ToBitString, this ? "Disable wallpaper." : "Enable wallpaper.");
		UINT32 DisableFullWindowDrag:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Disable full window drag animation." : "Enable full window drag animation.");
		UINT32 DisableMenuAnimations:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Disable menu animations." : "Enable menu animations.");
		UINT32 DisableTheming:1 = FormatString("             (%s) %s", this.ToBitString, this ? "Disable themes." : "Enable themes.");
		UINT32 EnableEnhancedGraphics:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Enable enhanced graphics." : "Disable enhanced graphics.");
		UINT32 DisableCursorShadow:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Disable cursor shadow." : "Enable cursor shadow.");
		UINT32 DisableCursorSettings:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Disable cursor settings." : "Enable cursor settings.");
		UINT32 EnableFontSmoothing:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Enable font smoothing." : "Disable font smoothing.");
		UINT32 EnableDesktopComposition:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Enable desktop composition." : "Disable desktop composition.");
		UINT32 Unused:21 = FormatString("                     (%s) Unused", this.ToBitString);
		UINT32 DefaultNonperfClientSetting:1 = FormatString("(%s) %s", this.ToBitString, this ? "Set internally for clients not aware of this setting." : "Set internally for clients aware of this setting.");
		UINT32 Reserced1:1 = FormatString("                  (%s) Reserved and used internally by the client.", this.ToBitString);
	};
	UINT32 ActiveInputLocale;
}

//
//	2.2.2.30.1   WINSTATIONCONFIG
//
Struct TSTSWinstationConfig
{
	UnicodeString(WINSTATIONCOMMENT_LENGTH + 1) Comment;
	Align4 Padding;
	TSTSUserConfig User;
	INT8 OEMId[4];
}

//
//	2.2.2.17   USERCONFIG
//
struct TSTSUserConfig
{
	Struct
	{
		UINT32 InheritAutoLogon:1 = FormatString("           (%s) %s",this.ToBitString, this ? "The use of client-specified autologon settings" : "The use of machine autologon settings.");
		UINT32 InheritResetBroken:1 = FormatString("         (%s) %s",this.ToBitString, this ? "The value to use for fResetBroken from the user properties if the machine/user policy is not set" : "The value to unuse for fResetBroken from the user properties if the machine/user policy is not set");
		UINT32 InheritReconnectSame:1 = FormatString("       (%s) %s",this.ToBitString, this ? "The value to use for fReconnectSame from the user properties if the machine/user policy is not set" : "The value to unuse for fReconnectSame from the user properties if the machine/user policy is not set");
		UINT32 InheritInitialProgram:1 = FormatString("      (%s) %s",this.ToBitString, this ? "The value to use for InitialProgram from the user properties if the machine/user policy is not set" : "The value to unuse for InitialProgram from the user properties if the machine/user policy is not set");
		UINT32 InheritCallback:1 = FormatString("            (%s) %s",this.ToBitString, this ? "The value to use for Callback from the user properties if the machine/user policy is not set" : "The value to unuse for Callback from the user properties if the machine/user policy is not set");
		UINT32 InheritCallbackNumber:1 = FormatString("      (%s) %s",this.ToBitString, this ? "The value to use for CallbackNumber from the user properties if the machine/user policy is not set" : "the value to unuse for CallbackNumber from the user properties if the machine/user policy is not set");
		UINT32 InheritShadow:1 = FormatString("              (%s) %s",this.ToBitString, this ? "The value to use for Shadow from the user properties if the machine/user policy is not set" : "The value to unuse for Shadow from the user properties if the machine/user policy is not set");
		UINT32 InheritMaxSessionTime:1 = FormatString("      (%s) %s",this.ToBitString, this ? "The value to use for MaxSessionTime from the user properties if the machine/user policy is not set" : "The value to unuse for MaxSessionTime from the user properties if the machine/user policy is not set");
		UINT32 InheritMaxDisconnectionTime:1 = FormatString("(%s) %s",this.ToBitString, this ? "The value to use for MaxDisconnectionTime from the user properties if the machine/user policy is not set" : "The value to unuse for MaxDisconnectionTime from the user properties if the machine/user policy is not set");
		UINT32 InheritMaxIdleTime:1 = FormatString("         (%s) %s",this.ToBitString, this ? "The value to use for MaxIdleTime from the user properties if the machine/user policy is not set" : "The value to unuse for MaxIdleTime from the user properties if the machine/user policy is not set");
		UINT32 InheritAutoClient:1 = FormatString("          (%s) %s",this.ToBitString, this ? "The value to use for fAutoClientDrivers and fAutoClientLpts from the user properties if the machine/user policy is not set" : "The value to unuse for fAutoClientDrivers and fAutoClientLpts from the user properties if the machine/user policy is not set");
		UINT32 InheritSecurity:1 = FormatString("            (%s) %s",this.ToBitString, this ? "The use of security settings from the user properties if the machine/user policy is not set" : "The use of security unset from the user properties if the machine/user policy is not set");
		UINT32 PromptForPassword:1 = FormatString("          (%s) %s",this.ToBitString, this ? "Ignore the credential sent from the client and always prompt for a password" : "Don't ignore the credential sent from the client and always prompt for a password");
		UINT32 ResetBroken:1 = FormatString("                (%s) %s",this.ToBitString, this ? "Log off the session when the idle timers for the session expire." : "The session will be disconnected when the timer expires.");
		UINT32 ReconnectSame:1 = FormatString("              (%s) %s",this.ToBitString, this ? "the user MUST reconnect to a disconnected session from the same client computer that initially established the disconnected session. Logging on from a different client computer will lead to a new terminal server session being created." : "The user can reconnect from any client computer to a disconnected session.");
		UINT32 LogonDisabled:1 = FormatString("              (%s) %s",this.ToBitString, this ? "A user cannot log on to a session remotely" : "A user can log on to a session remotely");
		UINT32 WallPaperDisabled:1 = FormatString("          (%s) %s",this.ToBitString, this ? "Display of the desktop wallpaper in the session has been disabled" : "Display of the desktop wallpaper in the session hasn't been disabled");
		UINT32 AutoClientDrives:1 = FormatString("           (%s) %s",this.ToBitString, this ? "Automatically redirect local drives on the client so they are accessible to the user in the remote terminal server session" : "Don't automatically redirect local drives on the client");
		UINT32 AutoClientLpts:1 = FormatString("             (%s) %s",this.ToBitString, this ? "Automatically redirect printers on the client so they are accessible to the user in the remote terminal server session" : "Automatically redirect printers on the client");
		UINT32 ForceClientLptDef:1 = FormatString("          (%s) %s",this.ToBitString, this ? "Force the client's redirected printer to be the default printer for the user" : "Don't force the client's redirected printer to be the default printer for the user");
		UINT32 RequireEncryption:1 = FormatString("          (%s) %s",this.ToBitString, this ? "The connection MUST be encrypted" : " ");
		UINT32 DisableEncryption:1 = FormatString("          (%s) %s",this.ToBitString, this ? "The connection does not need encryption" : " ");
		UINT32 Unused1:1 = FormatString("                    (%s) Not used",this.ToBitString);
		UINT32 HomeDirectoryMapRoot:1 = FormatString("       (%s) Not used",this.ToBitString);
		UINT32 UseDefaultGina:1 = FormatString("             (%s) %s",this.ToBitString, this ? "Override a third-party GINA so that only the default GINA is used for the terminal server session" : "Don't override a third-party GINA so that only the default GINA is used for the terminal server session");
		UINT32 CursorBlinkDisabled:1 = FormatString("        (%s) %s",this.ToBitString, this ? "Disable the blinking of the mouse cursor" : "Enable the blinking of the mouse cursor,");
		UINT32 PublishedApp:1 = FormatString("               (%s) Not used",this.ToBitString);
		UINT32 HideTitleBar:1 = FormatString("               (%s) Not used",this.ToBitString);
		UINT32 Maximize:1 = FormatString("                   (%s) Not used",this.ToBitString);
		UINT32 DisableCpm:1 = FormatString("                 (%s) %s",this.ToBitString, this ? "Disable client printer redirection," : "Enable client printer redirection,");
		UINT32 DisableCdm:1 = FormatString("                 (%s) %s",this.ToBitString, this ? "Disable client drive redirection" : "Enable client drive redirection");
		UINT32 DisableCcm:1 = FormatString("                 (%s) %s",this.ToBitString, this ? "Disable client COM port redirection" : "Enable client COM port redirection");
	}
	Struct
	{
		UINT32 DisableLPT:1 = FormatString("          (%s) %s",this.ToBitString, this ? "Disable client printer (LPT) port redirection" : "Enable client printer (LPT) port redirection");
		UINT32 DisableClip:1 = FormatString("         (%s) %s",this.ToBitString, this ? "Disable client clipboard redirection" : "Enable client clipboard redirection");
		UINT32 DisableExe:1 = FormatString("          (%s) %s",this.ToBitString, this ? "Disable .exe file execution" : "Enable .exe file execution");
		UINT32 DisableCam:1 = FormatString("          (%s) %s",this.ToBitString, this ? "Disable client audio redirection" : "Enable client audio redirection");
		UINT32 DisableAutoReconnect:1 = FormatString("(%s) %s",this.ToBitString, this ? "Disable auto-reconnect functionality" : "Enable auto-reconnect functionality");
		UINT32 ColorDepth:3 = FormatString("          (%s) The color depth of the session is %u",this.ToBitString, this);
		UINT32 InheritColorDepth:1 = FormatString("   (%s) %s",this.ToBitString, this ? "Inherit color depth from the user or client configuration" : "Don't inherit color depth from the user or client configuration");
		UINT32 ErrorInvalidProfile:1 = FormatString(" (%s) %s",this.ToBitString, this ? "WFProfilePath, WFHomeDir, or WFHomeDirDrive is invalid (too long)" : "if WFProfilePath, WFHomeDir, or WFHomeDirDrive is valid (too long)");
		UINT32 PasswordIsScPin:1 = FormatString("     (%s) %s",this.ToBitString, this ? "The password field contains a smart card PIN." : "The password field doesn't contain a smart card PIN.");
		UINT32 DisablePNPRedir:1 = FormatString("     (%s) %s",this.ToBitString, this ? "Plug and Play (PnP) redirection is disabled" : "Plug and Play (PnP) redirection is enabled");
		UINT32 Reserved:20 = FormatString("            (%s) Reserved",this.ToBitString);
	}
	UnicodeString(USERNAME_LENGTH + 1) UserName;
	UnicodeString(DOMAIN_LENGTH + 1) Domain;
	UnicodeString(PASSWORD_LENGTH + 1) Password;
	UnicodeString(DIRECTORY_LENGTH + 1) WorkDirectory;
	UnicodeString(INITIALPROGRAM_LENGTH + 1) InitialProgram;
	UnicodeString(CALLBACK_LENGTH + 1) CallbackNumber;
	Align4 Padding1;
	UINT32 Callback = TSTSCallBackClass(this);
	UINT32 Shadow = TSTSShadowClass(this);
	UINT32 MaxConnectionTime;
	UINT32 MaxDisconnectionTime;
	UINT32 MaxIdleTime;
	UINT32 KeyboardLayout;
	UINT8 MinEncryptionLevel;
	UnicodeString(NASIFILESERVER_LENGTH + 1) NWLogonServer;
	UnicodeString(MAX_BR_NAME) PublishedName;
	UnicodeString(DIRECTORY_LENGTH + 1) WFProfilePath;
	UnicodeString(DIRECTORY_LENGTH + 1) WFHomeDir;
	UnicodeString(4) WFHomeDirDrive;
}


//
//	2.2.2.17.1   CALLBACKCLASS
//
Table TSTSCallBackClass(value)
{
	Switch(value)
	{
		case 0: "Callback_Disable";
		case 1: "Callback_Roving";
		case 2: "Callback_Fixed";
		Default: "Invalid Value";
	}
}

//
//	2.2.1.15   SHADOWCLASS
//
Table TSTSShadowClass(value)
{
	Switch(value)
	{
		case 0: "Shadow_Disable";
		case 1: "Shadow_EnableInputNotify";
		case 2: "Shadow_EnableInputNoNotify";
		case 3: "Shadow_EnableNoInputNotify";
		case 4: "Shadow_EnableNoInputNoNotify";
		Default: "Invalid Value";
	}
}

//
//	2.2.2.31   POLICY_TS_MACHINE
//
Struct TSTSPolicyTsMachine
{
	Struct
	{
		UINT32 PolicyDisableClip:1 = FormatString("                     (%s) %s", this.ToBitString, this ? "The policy for DisableClip is set" : "The policy for DisableClip isn't set");
		UINT32 PolicyDisableCam:1 = FormatString("                      (%s) %s", this.ToBitString, this ? "The policy for DisableCam is set" : "The policy for DisableCam isn't set");
		UINT32 PolicyDisableCcm:1 = FormatString("                      (%s) %s", this.ToBitString, this ? "The policy for DisableCcm is set" : "The policy for DisableCcm isn't set");
		UINT32 PolicyDisableLPT:1 = FormatString("                      (%s) %s", this.ToBitString, this ? "The policy for DisableLPT is set" : "The policy for DisableLPT isn't set");
		UINT32 PolicyDisableCpm:1 = FormatString("                      (%s) %s", this.ToBitString, this ? "The policy for DisableCpm is set" : "The policy for DisableCpm isn't set");
		UINT32 PolicyPromptForPassword:1 = FormatString("               (%s) %s", this.ToBitString, this ? "The policy for PromptForPassword is set" : "The policy for PromptForPassword isn't set");
		UINT32 PolicyMaxInstanceCount:1 = FormatString("                (%s) %s", this.ToBitString, this ? "The policy for MaxInstanceCount is set" : "The policy for MaxInstanceCount isn't set");
		UINT32 PolicyMinEncryptionLevel:1 = FormatString("              (%s) %s", this.ToBitString, this ? "The policy for MinEncryptionLevel is set" : "The policy for MinEncryptionLevel isn't set");
		UINT32 PolicyFipsEnabled:1 = FormatString("                     (%s) %s", this.ToBitString, this ? "The policy for Fips is set" : "The policy for Fips isn't set");
		UINT32 PolicyDisableAutoReconnect:1 = FormatString("            (%s) %s", this.ToBitString, this ? "The policy for DisableAutoReconnect is set" : "The policy for DisableAutoReconnect isn't set");
		UINT32 PolicyWFProfilePath:1 = FormatString("                   (%s) %s", this.ToBitString, this ? "The policy for WFProfilePath is set" : "The policy for WFProfilePath isn't set");
		UINT32 PolicyWFHomeDir:1 = FormatString("                       (%s) %s", this.ToBitString, this ? "The policy for WFHomeDir is set" : "The policy for WFHomeDir isn't set");
		UINT32 PolicyWFHomeDirDrive:1 = FormatString("                  (%s) %s", this.ToBitString, this ? "The policy for WFHomeDirDrive is set" : "The policy for WFHomeDirDrive isn't set");
		UINT32 PolicyDenyTSConnections:1 = FormatString("               (%s) %s", this.ToBitString, this ? "The policy for DenyTSConnections is set" : "The policy for DenyTSConnections isn't set");
		UINT32 PolicyTempFoldersPerSession:1 = FormatString("           (%s) %s", this.ToBitString, this ? "The policy for TempFoldersPerSession is set" : "The policy for TempFoldersPerSession isn't set");
		UINT32 PolicyDeleteTempFoldersOnExit:1 = FormatString("         (%s) %s", this.ToBitString, this ? "The policy for DeleteTempFoldersOnExit is set" : "The policy for DeleteTempFoldersOnExit isn't set");
		UINT32 PolicyColorDepth:1 = FormatString("                      (%s) %s", this.ToBitString, this ? "The policy for ColorDepth is set" : "The policy for ColorDepth isn't set");
		UINT32 PolicySessionDirectoryActive:1 = FormatString("          (%s) %s", this.ToBitString, this ? "The policy for SessionDirectoryActive is set" : "The policy for SessionDirectoryActive isn't set");
		UINT32 PolicySessionDirectoryLocation:1 = FormatString("        (%s) %s", this.ToBitString, this ? "The policy for SessionDirectoryLocation is set" : "The policy for SessionDirectoryLocation isn't set");
		UINT32 PolicySessionDirectoryClusterName:1 = FormatString("     (%s) %s", this.ToBitString, this ? "The policy for SessionDirectoryClusterName is set" : "The policy for SessionDirectoryClusterName isn't set");
		UINT32 PolicySessionDirectoryAdditionalParams:1 = FormatString("(%s) %s", this.ToBitString, this ? "The policy for SessionDirectoryAdditionalParams is set" : "The policy for SessionDirectoryAdditionalParams isn't set");
		UINT32 PolicySessionDirectoryExposeServerIP:1 = FormatString("  (%s) %s", this.ToBitString, this ? "The policy for SessionDirectoryExposeServerIP is set" : "The policy for SessionDirectoryExposeServerIP isn't set");
		UINT32 PolicyPreventLicenseUpgrade:1 = FormatString("           (%s) %s", this.ToBitString, this ? "The policy for PreventLicenseUpgrade is set" : "The policy for PreventLicenseUpgrade isn't set");
		UINT32 PolicySecureLicensing:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "The policy for SecureLicensing is set" : "The policy for SecureLicensing isn't set");
		UINT32 PolicyWritableTSCCPermissionsTAB:1 = FormatString("      (%s) %s", this.ToBitString, this ? "The policy for WritableTSCCPermissionsTAB is set" : "The policy for WritableTSCCPermissionsTAB isn't set");
		UINT32 PolicyDisableCdm:1 = FormatString("                      (%s) %s", this.ToBitString, this ? "The policy for DisableCdm is set" : "The policy for DisableCdm isn't set");
		UINT32 PolicyForceClientLptDef:1 = FormatString("               (%s) %s", this.ToBitString, this ? "The policy for ForceClientLptDef is set" : "The policy for ForceClientLptDef isn't set");
		UINT32 PolicyShadow:1 = FormatString("                          (%s) %s", this.ToBitString, this ? "The policy for Shadow is set" : "The policy for Shadow isn't set");
		UINT32 PolicyResetBroken:1 = FormatString("                     (%s) %s", this.ToBitString, this ? "The policy for ResetBroken is set" : "The policy for ResetBroken isn't set");
		UINT32 PolicyReconnectSame:1 = FormatString("                   (%s) %s", this.ToBitString, this ? "The policy for ReconnectSame is set" : "The policy for ReconnectSame isn't set");
		UINT32 PolicyMaxSessionTime:1 = FormatString("                  (%s) %s", this.ToBitString, this ? "The policy for MaxSessionTime is set" : "The policy for MaxSessionTime isn't set");
		UINT32 PolicyMaxDisconnectionTime:1 = FormatString("            (%s) %s", this.ToBitString, this ? "The policy for MaxDisconnectionTime is set" : "The policy for MaxDisconnectionTime isn't set");
	}
	Struct
	{
		UINT32 PolicyMaxIdleTime:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "The policy for MaxIdleTime is set" : "The policy for MaxIdleTime isn't set");
		UINT32 PolicyInitialProgram:1 = FormatString("              (%s) %s", this.ToBitString, this ? "The policy for InitialProgram is set" : "The policy for InitialProgram isn't set");
		UINT32 PolicySingleSessionPerUser:1 = FormatString("        (%s) %s", this.ToBitString, this ? "The policy for SingleSessionPerUser is set" : "The policy for SingleSessionPerUser isn't set");
		UINT32 PolicyDisableWallpaper:1 = FormatString("            (%s) %s", this.ToBitString, this ? "The policy for DisableWallpaper is set" : "The policy for DisableWallpaper isn't set");
		UINT32 PolicyKeepAlive:1 = FormatString("                   (%s) %s", this.ToBitString, this ? "The policy for KeepAlive is set" : "The policy for KeepAlive isn't set");
		UINT32 PolicyEnableTimeZoneRedirection:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The policy for EnableTimeZoneRedirection is set" : "The policy for EnableTimeZoneRedirection isn't set");
		UINT32 PolicyDisableForcibleLogoff:1 = FormatString("       (%s) %s", this.ToBitString, this ? "The policy for DisableForcibleLogoff is set" : "The policy for DisableForcibleLogoff isn't set");
		UINT32 PolicyLicensingMode:1 = FormatString("               (%s) %s", this.ToBitString, this ? "The policy for LicensingMode is set" : "The policy for LicensingMode isn't set");
		UINT32 PolicyExplicitLSDiscovery:1 = FormatString("         (%s) %s", this.ToBitString, this ? "The policy for ExplicitLSDiscovery is set" : "The policy for ExplicitLSDiscovery isn't set");
		UINT32 PolicyDisableTerminalServerTooltip:1 = FormatString("(%s) %s", this.ToBitString, this ? "The policy for DisableTerminalServerTooltip is set" : "The policy for DisableTerminalServerTooltip isn't set");
		UINT32 DisableClip:1 = FormatString("                       (%s) %s", this.ToBitString, this ? "Disable client clipboard redirection" : "Enable client clipboard redirection");
		UINT32 DisableCam:1 = FormatString("                        (%s) %s", this.ToBitString, this ? "Disable client audio redirection" : "Enable client audio redirection");
		UINT32 DisableCcm:1 = FormatString("                        (%s) %s", this.ToBitString, this ? "Disable client COM port redirection" : "Enable client COM port redirection");
		UINT32 DisableLPT:1 = FormatString("                        (%s) %s", this.ToBitString, this ? "Disable client LPT port redirection" : "Enable client LPT port redirection");
		UINT32 DisableCpm:1 = FormatString("                        (%s) %s", this.ToBitString, this ? "Disable client printer redirection" : "Enable client printer redirection");
		UINT32 PromptForPassword:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "Prompt the user for password." : "Log on user with previously provided credentials");
		UINT32 ColorDepth:3 = FormatString("                        (%s)The color depth of the session is %u", this.ToBitString, this);
		UINT32 DenyTSConnections:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "Terminal Services is effectively disabled since remote connections will be declined" : "Terminal Services is Enabled");
		UINT32 TempFoldersPerSession:1 = FormatString("             (%s) %s", this.ToBitString, this ? "There are temporary folders per session instead of one common temp folder" : "There aren't temporary folders per session instead of one common temp folder");
		UINT32 DeleteTempFoldersOnExit:1 = FormatString("           (%s) %s", this.ToBitString, this ? "Delete temporary folders on session exit" : "Undelete temporary folders on session exit");
		UINT32 WritableTSCCPermissionsTAB:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Administrators can change the per-connection security description" : "Administrators cann't change the per-connection security description");
		UINT32 DisableCdm:1 = FormatString("                        (%s) %s", this.ToBitString, this ? "Disable client drive redirection" : "Enable client drive redirection");
		UINT32 ForceClientLptDef:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "Force the client's redirected printer to be the default printer for the user" : "Don't force the client's redirected printer to be the default printer for the user");
		UINT32 ResetBroken:1 = FormatString("                       (%s) %s", this.ToBitString, this ? "Reset the session if the connection is broken or if the connection or idle timers expire" : "Don't reset the session if the connection is broken or if the connection or idle timers expire");
		UINT32 ReconnectSame:1 = FormatString("                     (%s) %s", this.ToBitString, this ? "The user can reconnect to a disconnected session only from the same client computer that initially established the disconnected session" : "The user can reconnect from any client computer to a disconnected session");
		UINT32 SingleSessionPerUser:1 = FormatString("              (%s) %s", this.ToBitString, this ? "Each user can have only a single session" : "Each user not only have a single session");
		UINT32 DisableWallpaper:1 = FormatString("                  (%s) %s", this.ToBitString, this ? "Display of the desktop wallpaper in the session has been disabled" : "Display of the desktop wallpaper in the session hasn't been disabled");
		UINT32 KeepAliveEnable:1 = FormatString("                   (%s) %s", this.ToBitString, this ? "KeepAlive is enabled" : "KeepAlive is disabled");
		UINT32 PreventLicenseUpgrade:1 = FormatString("             (%s) %s", this.ToBitString, this ? "Licenses are prevented from being upgraded" : "Licenses aren't prevented from being upgraded");
		UINT32 SecureLicensing:1 = FormatString("                   (%s) %s", this.ToBitString, this ? "Secure licensing is enabled" : "Secure licensing is disabled");
	}
	Struct
	{
		UINT32 EnableTimeZoneRedirection:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Client time zone redirection is enabled" : "Client time zone redirection is disabled");
		UINT32 DisableAutoReconnect:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Disable auto-reconnect functionality" : "Enable auto-reconnect functionality");
		UINT32 DisableForcibleLogoff:1 = FormatString("       (%s) %s", this.ToBitString, this ? "Disable forcible logoff" : "Enable forcible logoff");
		UINT32 PolicyEncryptRPCTraffic:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Policy for EncryptRpcTraffic is set" : "Policy for EncryptRpcTraffic isn't set");
		UINT32 EncryptRPCTraffic:1 = FormatString("           (%s) %s", this.ToBitString, this ? "The policy for EncryptRpcTraffic is set" : "The policy for EncryptRpcTraffic isn't set");
		UINT32 ErrorInvalidProfile:1 = FormatString("         (%s) %s", this.ToBitString, this ? "WFProfilePath, WFHomeDir, or WFHomeDirDrive is invalid " : "WFProfilePath, WFHomeDir, or WFHomeDirDrive is valid ");
		UINT32 PolicyFallbackPrintDriver:1 = FormatString("   (%s) %s", this.ToBitString, this ? "The policy for FallbackPrintDriver is set" : "The policy for FallbackPrintDriver isn't set");
		UINT32 FallbackPrintDriverType:3 = FormatString("     (%s)The fallback printer driver type is %u", this.ToBitString, this);
		UINT32 DisableTerminalServerTooltip:1 = FormatString("(%s) %s", this.ToBitString, this ? "Disable terminal server tooltip" : "Enable terminal server tooltip");
		UINT32 Reserved3:21 = FormatString("                   (%s)", this.ToBitString);
	}
	UINT8 SecurityLayer;
	Align4 Padding1;
	Struct
	{
		UINT32 PolicySecurityLayer:1 = FormatString("(%s) %s", this.ToBitString, this ? "The policy for SecurityLayer is set" : "The policy for SecurityLayer isn't set");
		UINT32 Reserved4:31 = FormatString("          (%s)", this.ToBitString);
	}
	UINT8 UserAuthentication;
	Align4 Padding2;
	Struct
	{
		UINT32 PolicyUserAuthentication:1 = FormatString("  (%s) %s", this.ToBitString, this ? "The policy for UserAuthentication is set" : "The policy for UserAuthentication is set");
		UINT32 PolicyTurnOffSingleAppMode:1 = FormatString("(%s) %s", this.ToBitString, this ? "The policy for TurnOffSingleAppMode is set" : "The policy for TurnOffSingleAppMode isn't set");
		UINT32 TurnOffSingleAppMode:1 = FormatString("      (%s) %s", this.ToBitString, this ? "The desktop is always displayed when a client connects to a remote computer" : "an initial program can be specified that runs on the remote computer after the client connects to the remote computer");
		UINT32 DisablePNPPolicyIsEnfored:1 = FormatString(" (%s) %s", this.ToBitString, this ? "The policy for  PnP redirection is set" : "The policy for  PnP redirection isn't set");
		UINT32 DisablePNPPolicyValue:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Disable PnP redirection" : "Enable PnP redirection");
		UINT32 Reserved5:27 = FormatString("                 (%s) %s", this.ToBitString);
	}
	UINT32 MaxInstanceCount;
	UINT32 LicensingMode;
	UINT8 MinEncryptionLevel;
	Align2 Padding5;
	UnicodeString(DIRECTORY_LENGTH + 1) WFProfilePath;
	UnicodeString(DIRECTORY_LENGTH + 1) WFHomeDir;
	UnicodeString(4) WFHomeDirDrive;
	Align4 Padding3; 
	UINT32 SessionDirectoryActive;
	UnicodeString(DIRECTORY_LENGTH+1) SessionDirectoryLocation;
	UnicodeString(DIRECTORY_LENGTH+1) SessionDirectoryClusterName;
	UnicodeString(DIRECTORY_LENGTH+1) SessionDirectoryAdditionalParams;
	Align4 Padding4;
	UINT32 SessionDirectoryExposeServerIP;
	UINT32 KeepAliveInterval;
	UINT32 Shadow = TSTSShadowClass(this);
	UINT32 MaxConnectionTime;
	UINT32 MaxDisconnectionTime;
	UINT32 MaxIdleTime;
	UnicodeString(DIRECTORY_LENGTH+1) WorkDirectory;
	UnicodeString(INITIALPROGRAM_LENGTH + 1) InitialProgram;
	UnicodeString(MAX_LICENSE_SERVER_LENGTH + 1) LicenseServers;
}

//
//	2.2.2.12   LOGONID
//
Struct TSTSLogonId
{
	UINT32 SessionId;
	UnicodeString(WINSTATIONNAME_LENGTH + 1) WinStationName;
	Align4 Pad;
	UINT32 State = TSTSWinStationStateClassTable(this);
}

Table TSTSWinStationStateClassTable(value)
{
	Switch(value)
	{
		case 0: "State_Active";
		case 1: "State_Connected";
		case 2: "State_ConnectQuery";
		case 3: "State_Shadow";
		case 4: "State_Disconnected";
		case 5: "State_Idle";
		case 6: "State_Listen";
		case 7: "State_Reset";
		case 8: "State_Down";
		case 9: "State_Init";
		Default: "Invalid Value";
	}
}

//
//	2.2.2.13   TS_PROCESS_INFORMATION_NT4
//	Alignment : Align4
//
Struct TSTSTsProcessInformationNt4
{
	UINT32		MagicNumber;
	UINT32		LogonId;
	ContextHandle	ProcessSid;
	UINT32		Pad;
}

//
//	2.2.2.19.1.3   CACHE_STATISTICS
// Alignment: Align4
Struct TSTSCacheStatistics
{
	UINT16 ProtocolType;
	UINT16 Length;
	UINT32 Reserved[Length];
}

//
//	2.2.2.19.1   PROTOCOLSTATUS
// Alignment: Align4
//
Struct TSTSProtocolStatus
{
	TSTSProtocolCounters Output;
	TSTSProtocolCounters Input;
	TSTSCacheStatistics Cache;
	UINT32 AsyncSignal;
	UINT32 AsyncSignalMask;
}

//
//	QUERY_SESSION_DATA_TYPE
//
Struct TSTSQuerySessionDataType
{
	NdrEnum Value = TSTSQuerySessionDataTypeTable(this.value);
}

Table TSTSQuerySessionDataTypeTable( Value )
{
	Switch( Value )
	{
		Case 0: "QUERY_SESSION_DATA_MODULE - Used to retrieve data about protocol-specific binaries loaded for the given Terminal Services session.";
		Case 1: "QUERY_SESSION_DATA_WDCONFIG - Used to retrieve protocol driver configuration data for the session.";
		Case 2: "QUERY_SESSION_DATA_VIRTUALDATA - Used to retrieve data about virtual channels for the given Terminal Services session.";
		Case 3: "QUERY_SESSION_DATA_LICENSE - Used to retrieve data about the licensing policies associated with a given Terminal Services session.For windows this will be ULONG with 1 indicating Desktop Window Manager (DWM) is enabled in the Terminal Services session, disabled otherwise. For more information about DWM, see [MSDN-DWM].";
		Case 4: "QUERY_SESSION_DATA_DEVICEID - Used to retrieve the device ID of the client connected to a given Terminal Services session.This field is only available in windows_vista and windows_server_2008windows_vista, windows_server_2008, and windows_7.";
		Case 5: "QUERY_SESSION_DATA_LICENSE_VALIDATION - Used to retrieve the data required to validate the license associated with a given Terminal Services session.Supported on windows_7.";
	}
}

//
//	RCM_REMOTEADDRESS
//	Alignment: Align4
//
Struct TSTSRcmRemoteaddress
{
	Switch
	{
		case Property.MSRPCNdr64: Align4 pad1;
		Default:Align2 pad;
	}
	UINT16 SinFamily;
	Switch
	{
		case Property.MSRPCNdr64:
		 Align4 pad2;
	}
	switch(SinFamily)
	{
		case 2:
			Struct
			{
				Align4 Pad3;
				UINT16 SinPort;
				Align4 Pad4;
				UINT32 InAddr;
				UINT8 SinZero[8];
			}
		case 23:
			Struct
			{
				Align4 Pad5;
				UINT16 Sin6Port;
				Align4 Pad6;
				UINT32 Sin6FlowInfo;
				UINT16 Sin6Addr[8];
				UINT32 Sin6ScopeID;
			}
	}
}

//
//	2.2.2.15 TS_ALL_PROCESSES_INFO_NT6
//
Struct TSTSTsAllProcessesInfoNt6
{
	[Property.TSTSTsProcessInfoptr$[Property.TSTSTsAllProcessesInfoNt6Count] = TsProcessInfoptr.ReferentID]
	NdrPtr TsProcessInfoptr;
	UINT32 SizeOfSid;
	[Property.TSTSSidPtr$[Property.TSTSTsAllProcessesInfoNt6Count] = SidPtr.ReferentID]
	NdrPtr SidPtr;
	[Property.TSTSTsAllProcessesInfoNt6Count = Property.TSTSTsAllProcessesInfoNt6Count + 1]
	Struct{};
}

//
//	2.2.2.15.1   TS_SYS_PROCESS_INFORMATION_NT6
//	Alignment: Align8
//
Struct TSTSTsSysProcessInformationNt6
{
	UINT32 NextEntryOffset;
	UINT32 NumberOfThreads;
	UINT64 SpareLi1;
	UINT64 SpareLi2;
	UINT64 SpareLi3;
	UINT64 CreateTime;
	UINT64 UserTime;
	UINT64 KernelTime;
	NdrUnicodeStringHeader ImageNamePtr;
	INT32 BasePriority;
	UINT32 UniqueProcessId;
	UINT32 InheritedFromUniqueProcessId;
	UINT32 HandleCount;
	UINT32 SessionId;
	UINT32 SpareUl3;
	UINT32 PeakVirtualSize;
	UINT32 VirtualSize;
	UINT32 PageFaultCount;
	UINT32 PeakWorkingSetSize;
	UINT32 WorkingSetSize;
	UINT32 QuotaPeakPagedPoolUsage;
	UINT32 QuotaPagedPoolUsage;
	UINT32 QuotaPeakNonPagedPoolUsage;
	UINT32 QuotaNonPagedPoolUsage;
	UINT32 PagefileUsage;
	UINT32 PeakPagefileUsage;
	UINT32 PrivatePageCount;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 Pad;
	}
	Switch
	{
		case Property.NdrUnicodeStringHeaderPtr > 0:
			NdrUnicodeStringRef ImageName;
	}
}

Table TSTSRpcGetAllSessionsLevelTable( Value )
{
	Switch( Value )
	{
		Case 1: "The union ExecEnvData will have the EXECENVDATA_LEVEL1 structure.";
		Case 2: "The union ExecEnvData will have the EXECENVDATA_LEVEL2 structure.";
		Default: "Unknown";
	}
}

Table TSTSRpcGetEnumResultExLevelTable( Value )
{
	Switch( Value )
	{
		Case 1: "The union SessionInfo_Ex will have the SessionEnum_Level1 structure.";
		Case 2: "The union SessionInfo_Ex will have the SessionEnum_Level2 structure.";
		Case 3: "The union SessionInfo_Ex will have the SessionEnum_Level3 structure.";
		Default: "Unknown";
	}
}

Table TSTSRpcShowMessageBoxResponseTable( Value )
{
	Switch( Value )
	{
		Case 3: "IDABORT - The Abort button was selected.";
		Case 2: "IDCANCEL - The Cancel button was selected.";
		Case 5: "IDIGNORE - The Ignore button was selected.";
		Case 7: "IDNO - The No button was selected.";
		Case 1: "IDOK - The OK button was selected.";
		Case 4: "IDRETRY - The Retry button was selected.";
		Case 6: "IDYES - The Yes button was selected.";
		Case 32001: "IDASYNC - The bDoNotWait parameter was TRUE, so the function returned without waiting for a response.";
		Case 32000: "IDTIMEOUT - The bDoNotWait parameter was FALSE and the time-out interval elapsed.";
		Default: "Unknown";
	}
}

Table TSTSWinStationInfoClassTable( Value )
{
	Switch( Value )
	{
		Case 0: "WinStationCreateData - Retrieves general information on the type of terminal server session (protocol) to which the session belongs.The pWinStationInformation argument points to a WINSTATIONCREATE structure, and WinStationInformationLength SHOULD be sizeof(WINSTATIONCREATE).This information class is NOT supported in windows_vista and windows_server_2008.";
		Case 1: "WinStationConfiguration - Retrieves general configuration data on the terminal server session.The pWinStationInformation argument points to a WINSTACONFIGWIRE structure followed by a USERCONFIG structure. The WinStationInformationLength SHOULD be sizeof(WINSTACONFIGWIRE) + sizeof(USERCONFIG). The Size field in the USERCONFIG structure inside WINSTACONFIGWIRE MUST be set to sizeof(USERCONFIG) and the Offset set to sizeof(WINSTACONFIGWIRE). The Size field in the NewFields structure inside WINSTACONFIGWIRE MUST be set to 0, and the offset MUST be set to sizeof(WINSTACONFIGWIRE) + sizeof(USERCONFIG).";
		Case 2: "WinStationPdParams - Retrieves transport protocol driver parameters.The driver is tdtcp.sys for Microsoft Terminal Services. The structure coming into the function indicates via SDClass the specific protocol driver on which to receive parameter information. The result will be returned in the union in the structure.The pWinStationInformation argument points to a PDPARAMSWIRE structure followed by a PDPARAMS structure. The WinStationInformationLength SHOULD be sizeof(PDPARAMSWIRE) + sizeof(PDPARAMS). The Size field in SdClassSpecific field inside PDPARAMSWIRE MUST be set to sizeof(PDPARAMS) and the offset MUST be set to sizeof(PDPARAMSWIRE).";
		Case 3: "WinStationWd - Retrieves WinStation protocol driver configuration data for the session.The driver is rdpwd.sys for Microsoft Terminal Services.The pWinStationInformation argument points to a VARDATA_WIRE structure followed by a WDCONFIG structure. The WinStationInformationLength SHOULD be sizeof(VARDATA_WIRE) + sizeof(WDCONFIG). The Size field in the VARDATA_WIRE structure MUST be set to sizeof(WDCONFIG) and the Offset set to sizeof(VARDATA_WIRE).";
		Case 4: "WinStationPd - Retrieves transport protocol driver configuration data for the session.The driver is tdtcp.sys for Microsoft Terminal Services.The pWinStationInformation argument points to a VARDATA_WIRE, followed by a PDPARAMSWIRE structure, followed by a PDCONFIG2 structure and finally ending with a PDPARAMS structure. The WinStationInformationLength SHOULD be sizeof(VARDATA_WIRE) + sizeof(PDPARAMSWIRE) + size of(PDCONFIG2) + sizeof(PDPARAMS). The Size field in the VARDATA_WIRE structure MUST be set to sizeof(PDCONFIG2) and the Offset set to sizeof(VARDATA_WIRE) + sizeof(PDPARAMSWIRE). The Size field in SdClassSpecific field inside PDPARAMSWIRE MUST be set to sizeof(PDPARAMS) - sizeof(SDCLASS), and the offset MUST be set to Offset + Size of the VARDATA_WIRE structure.";
		Case 5: "WinStationPrinter - Not supported.";
		Case 6: "WinStationClient - Retrieves data on the terminal serverclient of the session. The pWinStationInformation argument points to a VARDATA_WIRE structure followed by a WINSTATIONCLIENT structure. The WinStationInformationLength SHOULD be sizeof(VARDATA_WIRE) + sizeof(WINSTATIONCLIENT). The Size field in the VARDATA_WIRE structure MUST be set to sizeof(WINSTATIONCLIENT) and the Offset set to sizeof(VARDATA_WIRE).";
		Case 7: "WinStationModules - Internal get function to retrieve data on protocol-specific binaries loaded for the given terminal server session. The structure pointed to by pWinStationInformation and the size of the buffer is Terminal Service protocol-specific.";
		Case 8: "WinStationInformation - Retrieves information on the session, including connect state, session's name, connect time, disconnect time, time last input was received from the client, logon time, user's username and domain, and the current time. pWinStationInformation points to a VARDATA_WIRE structure followed by a WINSTATIONINFORMATION structure. The WinStationInformationLength SHOULD be sizeof(VARDATA_WIRE) + sizeof(WINSTATIONINFORMATION). The Size field in the VARDATA_WIRE structure MUST be set to sizeof(WINSTATIONINFORMATION) and the Offset set to sizeof(VARDATA_WIRE).";
		Case 9: "WinStationTrace - Enables tracing on the lower-level terminal server drivers for this session. This MUST be called by a process running as SYSTEM or as an Administrator.The pWinStationInformation argument points to a TS_TRACE structure, and WinStationInformationLength SHOULD be sizeof(TS_TRACE).";
		Case 10: "WinStationBeep - Sends a beep to the session.The pWinStationInformation argument points to a BEEPINPUT structure, and WinStationInformationLength SHOULD be sizeof(BEEPINPUT).";
		Case 11: "WinStationEncryptionOff - Turns encryption off.Ignored by the Microsoft terminal server drivers in windows_nt_4_0, windows_2000, windows_xp, and windows_server_2003.";
		Case 12: "WinStationEncryptionPerm - Turns encryption permanently on.Ignored by the Microsoft terminal server drivers in windows_nt_4_0, windows_2000, windows_xp, and windows_server_2003.";
		Case 13: "WinStationNtSecurity - Sends logon service in the session a CTRL+ALT+DEL message.Used by Winlogon.The pWinStationInformation argument and WinStationInformationLength are not used for this class. Set them to dummy valid data, however, as there always has to be something in these parameters.";
		Case 14: "WinStationUserToken - Retrieves the user's token in the session. Caller needs WINSTATION_ALL_ACCESS permission.The pWinStationInformation argument points to a WINSTATIONUSERTOKEN structure, and WinStationInformationLength SHOULD be sizeof(WINSTATIONUSERTOKEN).";
		Case 16: "WinStationVideoData - Retrieves resolution and color depth of the session. The pWinStationInformation argument points to a WINSTATIONVIDEODATA structure, and WinStationInformationLength SHOULD be sizeof(WINSTATIONVIDEODATA).This information class is not supported in windows_vista and windows_server_2008.";
		Case 17: "WinStationInitialProgram - Not used.";
		Case 18: "WinStationCd - Retrieves connection driver configuration data. The pWinStationInformation points to a CDCONFIG structure, and WinStationInformationLength SHOULD be sizeof(CDCONFIG).This information class is not supported in windows_vista and windows_server_2008.";
		Case 19: "WinStationSystemTrace - Enables global tracing on the lower-level terminal server drivers for this session. This MUST be called by a process running as SYSTEM or as an Administrator.The pWinStationInformation argument points to a TS_TRACE structure, and WinStationInformationLength SHOULD be sizeof(TS_TRACE).";
		Case 20: "WinStationVirtualData - Query client virtual data.";
		Case 21: "WinStationClientData - Sends data to the terminal serverclient.WinStationInformationLength represents the complete length of all items to send and MUST be at least sizeof(VARDATA_WIRE) + sizeof(WINSTATIONCLIENTDATA ). Otherwise, STATUS_INFO_LENGTH_MISMATCH (as specified in [MS-ERREF]) is returned in pResult. If the data is larger than this but still less than what is expected, STATUS_INVALID_USER_BUFFER (as specified in [MS-ERREF]) is returned in pResult.The pWinStationInformation points to a VARDATA_WIRE structure followed by the WINSTATIONCLIENTDATA structure itself. The Size field in the VARDATA_WIRE structure MUST be set to sizeof(WINSTATIONCLIENTDATA) and the Offset set to sizeof(VARDATA_WIRE).";
		Case 22: "WinStationSecureDesktopEnter - Not used.";
		Case 23: "WinStationSecureDesktopExit - Not used.";
		Case 24: "WinStationLoadBalanceSessionTarget - Retrieves the target session ID for a client redirected from another server in a load balancing cluster. The pWinStationInformation points to a ULONG, and WinStationInformationLength SHOULD be sizeof(ULONG). If there is no redirection, -1 is returned in pWinStationInformation.This information class is not supported in windows_vista and windows_server_2008.";
		Case 25: "WinStationLoadIndicator - Retrieves an indicator of the load on the server. The pWinStationInformation argument points to a WINSTATIONLOADINDICATORDATA structure. WinStationInformationLength SHOULD be sizeof(WINSTATIONLOADINDICATORDATA).";
		Case 26: "WinStationShadowInfo - Retrieves the current shadow state of a session. The pWinStationInformation argument points to a WINSTATIONSHADOW structure. WinStationInformationLength SHOULD be sizeof(WINSTATIONSHADOW).This information class is not supported in windows_vista and windows_server_2008.";
		Case 27: "WinStationDigProductId - Retrieves the client product ID and current product ID of the session. The pWinStationInformation argument points to a WINSTATIONPRODID structure. WinStationInformationLength SHOULD be sizeof (WINSTATIONPRODID).This information class is not supported in windows_vista and windows_server_2008.";
		Case 28: "WinStationLockedState - Retrieves the current locked state of the session, TRUE or FALSE.The pWinStationInformation argument points to a BOOL variable. WinStationInformationLength SHOULD be sizeof (BOOL).";
		Case 29: "WinStationRemoteAddress - Retrieves the remote IP address of the terminal serverclient in the session. The pWinStationInformation argument points to a WINSTATIONREMOTEADDRESS structure. WinStationInformationLength SHOULD be sizeof (WINSTATIONREMOTEADDRESS).";
		Case 30: "WinStationIdleTime - Retrieves the idle time for the session, in seconds.The pWinStationInformation argument points to a ULONG variable.WinStationInformationLength SHOULD be sizeof (ULONG).This information class is not supported in windows_vista and windows_server_2008.";
		Case 31: "WinStationLastReconnectType - Retrieves the last reconnect type for the session. The value placed in pWinStationInformation will come from the enum RECONNECT_TYPE.The pWinStationInformation argument points to a ULONG variable.WinStationInformationLength SHOULD be sizeof (ULONG).This information class is not supported in windows_vista and windows_server_2008.";
		Case 32: "WinStationDisallowAutoReconnect - Allows or disallows auto-reconnect behavior for this session, TRUE or FALSE. This MUST be called by a process running as SYSTEM.The pWinStationInformation argument points to a BOOL variable. WinStationInformationLength SHOULD be sizeof (BOOL).";
		Case 37: "WinStationReconnectedFromId - In case of reconnected sessions, this will return the session ID of the temporary session from which it was reconnected, or -1 if no temporary session was created.";
		Case 38: "WinStationEffectsPolicy - Return policies that differentiate among versions of Windows.";
		Case 39: "WinStationType - Returns the type associated with this WinStation.";
		Case 40: "WinStationInformationEx - Returns extended information about the WinStation.";
		Case 15: 
		Case 33:
		Case 34:
		Case 35:
		Case 36: "Not used.";
		Default: "Unknown";
	}
}

Table TSTSRpcWinStationUpdateSettingsSettingsClassTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "WINSTACFG_SESSDIR - Contacts Session Directory to reread the WinStation settings.If running in Remote Desktop mode (windows_xp) or in Remote Admin mode, this does nothing.";
		Case 0x00000000: "WINSTACFG_LEGACY - Rereads settings from the local registry for the configured winstations. This does the same thing as RpcWinStationReadRegistry.";
		Default: "Unknown";
	}
}

Struct TSTSTNotificationId
{
	switch
	{
		case (UINT32(FrameData,FrameOffset) == 0xFFFFFFFF):
			UINT32 Notify = FormatString("All Notification");
		default:
			Struct
			{
				UINT32 Create : 1 = FormatString("        (%s) %s", this.toBitString, this?"Create Notification":"No Notification");
				UINT32 Connect : 1 = FormatString("       (%s) %s",this.toBitString, this? "Notify Connection":"No connection");
				UINT32 Disconn : 1 = FormatString("       (%s) %s",this.toBitString, this? "DisConnection":"No Disconnection");
				UINT32 Logon : 1 = FormatString("         (%s) %s",this.toBitString, this? "Logon":"No Logon Notification");
				UINT32 Logoff : 1 = FormatString("        (%s) %s",this.toBitString, this? "LogOff":"No Logoff Notification");
				UINT32 ShadowStart : 1 = FormatString("   (%s) %s",this.toBitString, this? "Shadow Start":"No shadow start notification");
				UINT32 ShadowStop : 1 = FormatString("    (%s) %s",this.toBitString, this? "Shadow Stop":" No Shadow Stop Notification");
				UINT32 Ternimation : 1 = FormatString("   (%s) %s",this.toBitString, this? "Termination":" No Termination");
				UINT32 ConsoleConn : 1 = FormatString("   (%s) %s",this.toBitString, this? "Console Session Connection":" No Console Session Connection");
				UINT32 ConsoleDisConn : 1 = FormatString("(%s) %s",this.toBitString, this? "Console Session Disconnect":"No Console Session Disconnect");
				UINT32 LockNotify : 1 = FormatString("    (%s) %s",this.toBitString, this? "Lock Notification":"No Lock Notification");
				UINT32 Unlock : 1 = FormatString("        (%s) %s",this.toBitString, this? "Unlock Notification":"No Unlock Notification");
				UINT32 Bit_13_32 :20 = FormatString("     (%s) %s",this.toBitString,  "Reserved");
			};
	}
}

//
//	2.2.2.43   SESSION_CHANGE
//	Alignment : Align4
//
Struct TSTSSessionChange
{
	INT32 SessionId;
	TSTSTNotificationId NotificationId;
}

//
//	_SESSIONENUM
//	Alignment : Align4
//
Struct TSTSSessionenum
{
	UINT32 Level;
	TSTSSessionInfo Data;
}

//
//	2.2.2.5   PSESSIONENUM_EX
//	Alignment: Align4
//
Struct TSTSSessionenumEx
{
	UINT32 Level = TSTSSessionenumExLevelTable(this);
	NdrAlign Pad1;
	TSTSSessionInfoEx Data;
}

Table TSTSSessionenumExLevelTable( Value )
{
	Switch( Value )
	{
		Case 1: "The union SessionInfo_Ex will have the SessionEnum_Level1 structure.";
		Case 2: "The union SessionInfo_Ex will have the SessionEnum_Level2 structure.";
		Case 3: "The union SessionInfo_Ex will have the SessionEnum_Level3 structure.";
		Default: "Unknown";
	}
}

//
//	_SESSIONENUM_LEVEL1
// Alignment:Align4
//
Struct TSTSSessionenumLevel1
{
	Align4 Pad1;
	INT32 SessionId;
	INT32 State;
	UnicodeString(33) Name;
	Switch
	{
		case Property.MSRPCNdr64:
		Align4 Pad;
	}
}

//
//	_SESSIONENUM_LEVEL2
// Alignment:Align4
//
Struct TSTSSessionenumLevel2
{
	Align4 Pad1;
	INT32 SessionId;
	INT32 State;
	UnicodeString(33) Name;
	Align4 Pad2;
	UINT32 Source;
	BOOL FullDesktop;
	MSRPCGuid SessionType;
	Switch
	{
		case Property.MSRPCNdr64:
		Align4 Pad;
	}
}

//
//	_SESSIONENUM_LEVEL3
// Alignment:NdrAlign
//
Struct TSTSSessionenumLevel3
{
	INT32 SessionId;
	INT32 State;
	UnicodeString(33) Name;
	Align4 Pad;
	UINT32 Source;
	BOOL FullDesktop;
	MSRPCGuid SessionType;
	UINT32 ProtoDataSize;
	NdrPtr Pointer;
	Switch
	{
		case Property.MSRPCNdr64:
		NdrAlign Pad;
	}
	Switch
	{
		case Pointer.ReferentID > 0:
			Struct
			{
				NdrConformant Size;
				UINT8 ProtocolData[Size.MaxCount];
			}
	}
}

//
//	_SESSION_FILTER
//
Struct TSTSSessionFilter
{
	NdrEnum Value = TSTSSessionFilterTable(this.value);
}

Table TSTSSessionFilterTable( Value )
{
	Switch( Value )
	{
		Case 0: "SF_SERVICES_SESSION_POPUP - Returns all sessions in a logged-on state.";
	}
}

//
//	2.2.2.4.1   SessionInfo
//	Alignmengt: Align4
//
Struct TSTSSessionInfo
{
	UINT32 SwitchValue;
	Switch( SwitchValue )
	{
		Case 1:
			TSTSSessionenumLevel1 SessionEnumLevel1;
		Case 2:
			TSTSSessionenumLevel2 SessionEnumLevel2;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	2.2.2.5.1   SessionInfo_Ex
//	Alignmengt: Ndr
//
Struct TSTSSessionInfoEx
{
	Switch
	{
		case Property.MSRPCNdr64:
		NdrAlign pad1;
	}
	UINT32 SwitchValue;
	Switch
	{
		case Property.MSRPCNdr64:
		NdrAlign pad2;
	}
	Switch( SwitchValue )
	{
		Case 1:
			TSTSSessionenumLevel1 SessionEnumLevel1;
		Case 2:
			TSTSSessionenumLevel2 SessionEnumLevel2;
		Case 3:
			Struct
			{
				NdrAlign Pad3;
				TSTSSessionenumLevel3 SessionEnumLevel3;
			}
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "TSTS", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	2.2.2.14   TS_ALL_PROCESSES_INFO
//	Alignment:None
//
Struct TSTSTsAllProcessesInfo
{
	[Post.Property.AllProcessesInfoCount = Property.AllProcessesInfoCount + 1]
	[Property.TSTSTsProcessInfoPtr$[Property.AllProcessesInfoCount] = TsProcessInfoPtr.ReferentId]
	NdrPtr TsProcessInfoPtr;
	UINT32 SizeOfSid;
	[Property.TSTSSidPtr$[Property.AllProcessesInfoCount] = SidPtr.ReferentId]
	NdrPtr SidPtr;
}

//
//	2.2.2.14.1   TS_SYS_PROCESS_INFORMATION
// Alignment: align8
//
Struct	TSTSTsSysProcessInformation
{
	UINT32 NextEntryOffset;
	UINT32 NumberOfThreads;
	INT64 SpareLi1;
	INT64 SpareLi2;
	INT64 SpareLi3;
	INT64 CreateTime;
	INT64 UserTime;
	INT64 KernelTime;
	NdrUnicodeStringHeader ImageNamePtr;
	INT32 BasePriority;
	UINT32 UniqueProcessId;
	UINT32 InheritedFromUniqueProcessId;
	UINT32 HandleCount;
	UINT32 SessionId;
	UINT32 SpareUl3;
	UINT32 PeakVirtualSize;
	UINT32 VirtualSize;
	UINT32 PageFaultCount;
	UINT32 PeakWorkingSetSize;
	UINT32 WorkingSetSize;
	UINT32 QuotaPeakPagedPoolUsage;
	UINT32 QuotaPagedPoolUsage;
	UINT32 QuotaPeakNonPagedPoolUsage;
	UINT32 QuotaNonPagedPoolUsage;
	UINT32 PagefileUsage;
	UINT32 PeakPagefileUsage;
	UINT32 PrivatePageCount;
	Switch
	{
		case Property.NdrUnicodeStringHeaderPtr > 0:
			NdrUnicodeStringRef ImageName;
	}
}

//
//	2.2.2.16 _TS_COUNTER
//	Alignment: Align8
//
Struct TSTSTsCounter
{
	Align8 Pad1;
	TSTSTsCounterHeader CounterHead;
	Align4 Pad2;
	UINT32 Value;
	Align8 Pad3;
	INT64 StartTime;
}

//
//	_TS_COUNTER_HEADER
//	Alignment:Align4
//
Struct TSTSTsCounterHeader
{
	UINT32 CounterID;
	BOOLEAN Result;
}

//
//	2.2.2.50 _TSVIPAddress
//	Alignment: Align4
//
Struct TSTSTSVIPAddress
{
	UINT32 Version = MustBeSetToTable(this,"1");
	TSTSTsvipSockaddr IPAddress;
	Align4 Pad1;
	UINT32 PrefixOrSubnetMask;
	UINT32 PhysicalAddressLength;
	UINT8 PhysicalAddress[PhysicalAddressLength];
	Align4 Pad2;
	UINT32 LeaseExpires;
	UINT32 T1;
	UINT32 T2;
}

//
//	2.2.2.51 _TSVIPSession
//	Alignment: align4
//
Struct TSTSTSVIPSession
{
	UINT32 Version  = MustBeSetToTable(this,"1");
	UINT32 SessionId;
	TSTSTSVIPAddress SessionIP;
}

//
//	TSVIP_SOCKADDR
//	Alignment: Align4
//
Struct TSTSTsvipSockaddr
{
	Switch(Property. MSRPCNdr64)
	{
		Case true: Align4 pad;
	}
	UINT16 SinFamily;
	Switch(Property. MSRPCNdr64)
	{
		Case true: Align4 pad;
	}
	switch(SinFamily)
	{
		case 2:
			Struct
			{
				Align4 Pad1;
				UINT16 SinPort;
				Align4 Pad2;
				UINT32 InAddr;
				UINT8 SinZero[8];
			}
		case 23:
			Struct
			{
				Align4 Pad1;
				UINT16 Sin6Port;
				Align4 Pad2;
				UINT32 Sin6FlowInfo;
				UINT16 Sin6Addr[8];
				UINT32 Sin6ScopeID;
			}
	}
}

Table TSTSTermSrvNotificationMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "RpcWaitForSessionState";
		Case 1: "RpcRegisterAsyncNotification";
		Case 2: "RpcWaitAsyncNotification";
		Case 3: "RpcUnRegisterAsyncNotification";
		Default: "unknown";
	}
}

Table TSTSRCMPublicMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "RpcGetClientData";
		Case 1: "RpcGetConfigData";
		Case 2: "RpcGetProtocolStatus";
		Case 3: "RpcGetLastInputTime";
		Case 4: "RpcGetRemoteAddress";
		Case 5: "Opnum5NotUsedOnWire";
		Case 6: "Opnum6NotUsedOnWire";
		Case 7: "Opnum7NotUsedOnWire";
		Case 8: "RpcGetAllListeners";
		Case 9: "RpcGetSessionProtocolLastInputTime";
		Case 10: "RpcGetUserCertificates";
		Case 11: "RpcQuerySessionData";
		Default: "unknown";
	}
}

Table TSTSRCMListenerMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "RpcOpenListener";
		Case 1: "RpcCloseListener";
		Case 2: "RpcStopListener";
		Case 3: "RpcStartListener";
		Case 4: "RpcIsListening";
		Default: "unknown";
	}
}

Table TSTSTSVIPPublicMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "RpcGetSessionIP";
		Default: "unknown";
	}
}

Table TSTSTermSrvEnumerationMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "RpcOpenEnum";
		Case 1: "RpcCloseEnum";
		Case 2: "RpcFilterByState";
		Case 3: "RpcFilterByCallersName";
		Case 4: "RpcEnumAddFilter";
		Case 5: "RpcGetEnumResult";
		Case 6: "RpcFilterBySessionType";
		Case 7: "Opnum7NotUsedOnWire";
		Case 8: "RpcGetSessionIds";
		Case 9: "RpcGetEnumResultEx";
		Case 10: "RpcGetAllSessions";
		Default: "unknown";
	}
}

Table TSTSIcaApiMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "RpcWinStationOpenServer";
		Case 1: "RpcWinStationCloseServer";
		Case 2: "RpcIcaServerPing";
		Case 3: "RpcWinStationEnumerate";
		Case 4: "RpcWinStationRename";
		Case 5: "RpcWinStationQueryInformation";
		Case 6: "RpcWinStationSetInformation";
		Case 7: "RpcWinStationSendMessage";
		Case 8: "RpcLogonIdFromWinStationName";
		Case 9: "RpcWinStationNameFromLogonId";
		Case 10: "RpcWinStationConnect";
		Case 11: "Opnum11NotUsedOnWire";
		Case 12: "Opnum12NotUsedOnWire";
		Case 13: "RpcWinStationDisconnect";
		Case 14: "RpcWinStationReset";
		Case 15: "RpcWinStationShutdownSystem";
		Case 16: "RpcWinStationWaitSystemEvent";
		Case 17: "RpcWinStationShadow";
		Case 18: "Opnum18NotUsedOnWire";
		Case 19: "Opnum19NotUsedOnWire";
		Case 20: "Opnum20NotUsedOnWire";
		Case 21: "Opnum21NotUsedOnWire";
		Case 22: "Opnum22NotUsedOnWire";
		Case 23: "Opnum23NotUsedOnWire";
		Case 24: "Opnum24NotUsedOnWire";
		Case 25: "Opnum25NotUsedOnWire";
		Case 26: "Opnum26NotUsedOnWire";
		Case 27: "Opnum27NotUsedOnWire";
		Case 28: "Opnum28NotUsedOnWire";
		Case 29: "RpcWinStationBreakPoint";
		Case 30: "RpcWinStationReadRegistry";
		Case 31: "Opnum31NotUsedOnWire";
		Case 32: "Opnum32NotUsedOnWire";
		Case 33: "Opnum33NotUsedOnWire";
		Case 34: "OldRpcWinStationEnumerateProcesses";
		Case 35: "Opnum35NotUsedOnWire";
		Case 36: "RpcWinStationEnumerateProcesses";
		Case 37: "RpcWinStationTerminateProcess";
		Case 38: "Opnum38NotUsedOnWire";
		Case 39: "Opnum39NotUsedOnWire";
		Case 40: "Opnum40NotUsedOnWire";
		Case 41: "Opnum41NotUsedOnWire";
		Case 42: "Opnum42NotUsedOnWire";
		Case 43: "RpcWinStationGetAllProcesses";
		Case 44: "RpcWinStationGetProcessSid";
		Case 45: "RpcWinStationGetTermSrvCountersValue";
		Case 46: "RpcWinStationReInitializeSecurity";
		Case 47: "Opnum47NotUsedOnWire";
		Case 48: "Opnum48NotUsedOnWire";
		Case 49: "Opnum49NotUsedOnWire";
		Case 50: "Opnum50NotUsedOnWire";
		Case 51: "Opnum51NotUsedOnWire";
		Case 52: "Opnum52NotUsedOnWire";
		Case 53: "RpcWinStationGetLanAdapterName";
		Case 54: "Opnum54NotUsedOnWire";
		Case 55: "Opnum55NotUsedOnWire";
		Case 56: "Opnum56NotUsedOnWire";
		Case 57: "Opnum57NotUsedOnWire";
		Case 58: "RpcWinStationUpdateSettings";
		Case 59: "RpcWinStationShadowStop";
		Case 60: "RpcWinStationCloseServerEx";
		Case 61: "RpcWinStationIsHelpAssistantSession";
		Case 62: "RpcWinStationGetMachinePolicy";
		Case 63: "Opnum63NotUsedOnWire";
		Case 64: "Opnum64NotUsedOnWire";
		Case 65: "RpcWinStationCheckLoopBack";
		Case 66: "RpcConnectCallback";
		Case 67: "Opnum67NotUsedOnWire";
		Case 68: "Opnum68NotUsedOnWire";
		Case 69: "Opnum69NotUsedOnWire";
		Case 70: "RpcWinStationGetAllProcesses_NT6";
		Case 71: "Opnum71NotUsedOnWire";
		Case 72: "Opnum72NotUsedOnWire";
		Case 73: "Opnum73NotUsedOnWire";
		Case 74: "Opnum74NotUsedOnWire";
		Case 75: "RpcWinStationOpenSessionDirectory";
		Default: "unknown";
	}
}

Table TSTSTermSrvSessionMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "RpcOpenSession";
		Case 1: "RpcCloseSession";
		Case 2: "RpcConnect";
		Case 3: "RpcDisconnect";
		Case 4: "RpcLogoff";
		Case 5: "RpcGetUserName";
		Case 6: "RpcGetTerminalName";
		Case 7: "RpcGetState";
		Case 8: "RpcIsSessionDesktopLocked";
		Case 9: "RpcShowMessageBox";
		Case 10: "RpcGetTimes";
		Case 11: "RpcGetSessionCounters";
		Case 12: "RpcGetSessionInformation";
		Case 13: "Opnum13NotUsedOnWire";
		Case 14: "Opnum14NotUsedOnWire";
		Case 15: "RpcGetLoggedOnCount";
		Case 16: "RpcGetSessionType";
		Case 17: "RpcGetSessionInformationEx";
		Default: "unknown";
	}
}

Table TSTSRpcGetStateStateTable( Value )
{
	Switch(value)
	{
		Case 0:"Active";
		Case 1:"Connected";
		Case 2:"ConnectQuery";
		Case 3:"Shadow";
		Case 4:"Disconnected";
		Case 5:"Idle";
		Case 6:"Listen";
		Case 7:"Reset";
		Case 8:"Down";
		Case 9:"Init"; 
		Default:"Invalid Value";
	}
}
