//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Remote Assistance Remote Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-RAI]: Remote Assistance Initiation Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 9/16/2009
//#                          Minor, 4/23/2010
//#
//####

//======================================================================================
// Conversation Mode switch structure
//======================================================================================
//

PROTOCOL RAPRBIN = (MSRPCptype == 0x00) ? 	FormatString("%s(%s)", RAPRGlobalMethodTable(MSRPCIfUuid, MSRPCopnum), RAPRDecomParameters) : FormatString("%s = %s, %s", RAPRGlobalMethodTable(MSRPCIfUuid, MSRPCopnum), RAPRDecomResult, RAPRDecomOutParameters)
{
	switch (Property.MSRPCIfUuid)
	{
		case "{833E4100-AFF7-4AC3-AAC2-9F24C1457BCE}":
			_struct IPCHCollection
			{
				switch (Property.MSRPCopnum)
				{
					case 0x05:
						_struct GetIDsOfNames
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
									_struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													OLEAUTRefIId riid;
													NdrConformant NamesCount;
													OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
													Align4 pad;
													UINT32 cNames;
													OLEAUTLCID lcid;
												}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													NdrConformant prgDispId;
													OLEAUTDISPID rgDispId[prgDispId.MaxCount];
													[RAPRDecomResult = ReturnValue.ToString]
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					case 0x06:
						_struct Invoke
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
								_struct Request
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										Default:
											struct
											{
												OLEAUTDISPID dispIdMember;
												OLEAUTRefIId riid;
												OLEAUTLCID lcid;
												switch( Property.MSRPCByteOrder )
												{
													case LittleEndian:
														_struct LittleEndian
														{
															UINT32 dwFlags
															{
																[Local.InvocationType = this ? "Method" : Local.InvocationType]
																UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
																[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
																UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
																[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
																UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
																[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
																UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
																UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
																UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
																UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
																UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
																UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
															}
														}
													default:
														_struct BigEndian
														{
															UINT32 dwFlags
															{
																UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
																UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
																UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
																UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
																UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
																[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
																UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
																[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
																UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
																[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
																UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
																[Local.InvocationType = this ? "Method" : Local.InvocationType]
																UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
															}
														}
												}
												[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
												OLEAUTDISPPARAMS DispParams;
												UINT32 cVarRef;
												NdrConformant VarRefIdxConformant;
												UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
												OLEAUTSafeArrVariant VarRef;
											}
									}
								}
								case 0x02:
								_struct Response
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										Default:
											struct
											{
												OLEAUTVariant VarResult;
												NdrAlign pad;
												OLEAUTExcepInfo ExcepInfo;
												UINT32 Argerr;
												OLEAUTSafeArrVariant rgVarRef;
												Align4 padding;
												[RAPRDecomResult = ReturnValue.ToString]
												HRESULT ReturnValue;
											}
									}
								}
							}
						}
					case 0x07:
					_struct RAPIPCHCOLL_NewEnum 
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											DCOMConformantMInterfacePointer pVal;
											Align4 Pad;
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					case 0x08:
					_struct RAPIPCHCOLL_Item
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomParameters = FormatString("%u", vIndex)]
											UINT32 vIndex;
										}
								}
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											OLEAUTVariant ppEntry;
											Align4 Pad;
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					case 0x09:
					_struct RAPIPCHCOLL_Count
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomOutParameters = FormatString("pVal = %u", pVal)]
											UINT32 pVal;
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					
					Default:
					[post.Description = "Error: " + Property.ParserErrorMessage]
					ReportParserError(ParserErrorProtocolClassWindows, "Rapr_bin{833E4100-AFF7-4AC3-AAC2-9F24C1457BCE}", FormatString( "Unknown Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
					
				}
			}
		case "{833E4200-AFF7-4AC3-AAC2-9F24C1457BCE}":
			_struct IPCHService
			{
				switch (Property.MSRPCopnum)
				{
					case 0x05:
						_struct GetIDsOfNames
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
									_struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												Struct
												{
													OLEAUTRefIId riid;
													NdrConformant NamesCount;
													OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
													Align4 pad;
													UINT32 cNames;
													OLEAUTLCID lcid;
												}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												Struct
												{
													NdrConformant prgDispId;
													OLEAUTDISPID rgDispId[prgDispId.MaxCount];
													[RAPRDecomResult = ReturnValue.ToString]
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					case 0x06:
						_struct Invoke
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
								_struct Request
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										default:
											Struct
											{
												OLEAUTDISPID dispIdMember;
												OLEAUTRefIId riid;
												OLEAUTLCID lcid;
												switch( Property.MSRPCByteOrder )
												{
													case LittleEndian:
														_struct LittleEndian
														{
															UINT32 dwFlags
															{
																[Local.InvocationType = this ? "Method" : Local.InvocationType]
																UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
																[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
																UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
																[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
																UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
																[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
																UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
																UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
																UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
																UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
																UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
																UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
															}
														}
													default:
														_struct BigEndian
														{
															UINT32 dwFlags
															{
																UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
																UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
																UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
																UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
																UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
																[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
																UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
																[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
																UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
																[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
																UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
																[Local.InvocationType = this ? "Method" : Local.InvocationType]
																UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
															}
														}
												}
												[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
												OLEAUTDISPPARAMS DispParams;
												UINT32 cVarRef;
												NdrConformant VarRefIdxConformant;
												UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
												OLEAUTSafeArrVariant VarRef;
											}
									}
								}
								case 0x02:
								_struct Response
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										default:
											Struct
											{
												OLEAUTVariant VarResult;
												NdrAlign pad;
												OLEAUTExcepInfo ExcepInfo;
												UINT32 Argerr;
												OLEAUTSafeArrVariant rgVarRef;
												Align4 padding;
												[RAPRDecomResult = ReturnValue.ToString]
												HRESULT ReturnValue;
											}
									}
								}
							}
						}
					case 0x13:
					_struct RAPIPCHSERV_RemoteConnectionParms
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											BSTR bstrUserName;
											BSTR bstrDomainName;
											ALIGN4 Align;
											UINT32 lSessionId;
											[Post.RAPRDecomParameters = FormatString("%s, %s, %u, %s", 
											bstrUserName.ToString, 
											bstrDomainName.ToString, 
											lSessionId, 
											bstrUserHelpBlob.ToString)]
											BSTR bstrUserHelpBlob;
										}
								}
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomOutParameters = "pbstrConnectionString = " + pbstrConnectionString.ToString]
											BSTR pbstrConnectionString;
											Align4 Pad;
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					case 0x14:
					_struct RAPIPCHSERV_RemoteUserSessionInfo
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											DCOMConformantMInterfacePointer pVal;
											Align4 Pad;
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}		
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
					case 16:
					case 17:
					case 18:
					case 21:
					struct NotUsedOnWire
					{
						Switch (property.MSRPCPType)
						{
						// REQUEST
							case 0x00:
							[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
							struct Request 
							{
								ReportParserWarning("Rapr_bin{833E4200-AFF7-4AC3-AAC2-9F24C1457BCE}", "Invalid Rapr_bin method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
								Blob(FrameLength - Offset) PayloadData;
							}

						// RESPONSE
							case 0x02:
							[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
							struct Response
							{
								ReportParserWarning("Rapr_bin{833E4200-AFF7-4AC3-AAC2-9F24C1457BCE}", "Invalid Rapr_bin method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
								Blob(FrameLength - Offset) PayloadData;					
							}
						}
					}
					Default:
					[post.Description = "Error: " + Property.ParserErrorMessage]
					ReportParserError(ParserErrorProtocolClassWindows, "Rapr_bin{833E4200-AFF7-4AC3-AAC2-9F24C1457BCE}", FormatString( "Unknown Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
				}
			}
		case "{833E41AA-AFF7-4AC3-AAC2-9F24C1457BCE}":
			_struct ISAFSession
			{
				switch (Property.MSRPCopnum)
				{
					case 0x05:
						_struct GetIDsOfNames
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
									_struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												Struct
												{
													OLEAUTRefIId riid;
													NdrConformant NamesCount;
													OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
													Align4 pad;
													UINT32 cNames;
													OLEAUTLCID lcid;
												}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												Struct
												{
													NdrConformant prgDispId;
													OLEAUTDISPID rgDispId[prgDispId.MaxCount];
													[RAPRDecomResult = ReturnValue.ToString]
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					case 0x06:
						_struct Invoke
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
								_struct Request
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										default:
											Struct
											{
												OLEAUTDISPID dispIdMember;
												OLEAUTRefIId riid;
												OLEAUTLCID lcid;
												switch( Property.MSRPCByteOrder )
												{
													case LittleEndian:
														_struct LittleEndian
														{
															UINT32 dwFlags
															{
																[Local.InvocationType = this ? "Method" : Local.InvocationType]
																UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
																[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
																UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
																[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
																UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
																[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
																UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
																UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
																UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
																UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
																UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
																UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
															}
														}
													default:
														_struct BigEndian
														{
															UINT32 dwFlags
															{
																UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
																UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
																UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
																UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
																UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
																[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
																UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
																[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
																UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
																[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
																UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
																[Local.InvocationType = this ? "Method" : Local.InvocationType]
																UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
															}
														}
												}
												[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
												OLEAUTDISPPARAMS DispParams;
												UINT32 cVarRef;
												NdrConformant VarRefIdxConformant;
												UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
												OLEAUTSafeArrVariant VarRef;
											}
									}
								}
								case 0x02:
								_struct Response
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										default:
											Struct
											{
												OLEAUTVariant VarResult;
												NdrAlign pad;
												OLEAUTExcepInfo ExcepInfo;
												UINT32 Argerr;
												OLEAUTSafeArrVariant rgVarRef;
												Align4 padding;
												[RAPRDecomResult = ReturnValue.ToString]
												HRESULT ReturnValue;
											}
									}
								}
							}
						}
					case 0x07:
					_struct RAPISAFSESS_SessionIDGet
					{	
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomOutParameters = FormatString("pVal = %u", pVal)]
											UINT32 pVal;
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					case 0x08:
					_struct RAPISAFSESS_SessionIDSet 
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomParameters = FormatString("%u", pVal)]
											UINT32 pVal;
										}
								}
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					case 0x09:
					_struct RAPISAFSESS_SessionStateGet 
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomOutParameters = FormatString("pVal = %d", pVal)]
											INT32 pVal;
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					case 0x0A:
					_struct RAPISAFSESS_SessionStateSet 
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomParameters = FormatString("%d", pVal)]
											INT32 pVal;
										}
								}
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					case 0x0B:
					_struct RAPISAFSESS_DomainNameGet  
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomOutParameters = "pVal = " + pVal.ToString]
											BSTR pVal;
											Align4 Pad;
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					case 0x0C:
					_struct RAPISAFSESS_DomainNameSet 
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomParameters = pVal.ToString]
											BSTR pVal;
										}
								}
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					case 0x0D:
					_struct RAPISAFSESS_UserNameGet
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomOutParameters = "pVal = " + pVal.ToString]
											BSTR pVal;
											Align4 Pad;
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					case 0x0E:
					_struct RAPISAFSESS_UserNameSet  
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomParameters = pVal.ToString]
											BSTR pVal;
										}
								}
							}
							case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										Struct
										{
											[RAPRDecomResult = ReturnValue.ToString]
											HRESULT ReturnValue;
										}
								}
							}
						}
					}
					
					Default:
					[post.Description = "Error: " + Property.ParserErrorMessage]
					ReportParserError(ParserErrorProtocolClassWindows, "Rapr_bin{833E41AA-AFF7-4AC3-AAC2-9F24C1457BCE}", FormatString( "Unknown Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
				}
			}
		case "{F120A684-B926-447F-9DF4-C966CB785648}" : //Remote Assistance Remote - IRASrv
			_struct IRASrv
			{
				switch (Property.MSRPCopnum)
				{
					case 0x05:
						_struct GetIDsOfNames
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
									_struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												Struct
												{
													OLEAUTRefIId riid;
													NdrConformant NamesCount;
													OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
													Align4 pad;
													UINT32 cNames;
													OLEAUTLCID lcid;
												}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												Struct
												{
													NdrConformant prgDispId;
													OLEAUTDISPID rgDispId[prgDispId.MaxCount];
													[RAPRDecomResult = ReturnValue.ToString]
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					case 0x06:
						_struct Invoke
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
								_struct Request
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										default:
											Struct
											{
												OLEAUTDISPID dispIdMember;
												OLEAUTRefIId riid;
												OLEAUTLCID lcid;
												switch( Property.MSRPCByteOrder )
												{
													case LittleEndian:
														_struct LittleEndian
														{
															UINT32 dwFlags
															{
																[Local.InvocationType = this ? "Method" : Local.InvocationType]
																UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
																[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
																UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
																[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
																UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
																[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
																UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
																UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
																UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
																UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
																UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
																UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
															}
														}
													default:
														_struct BigEndian
														{
															UINT32 dwFlags
															{
																UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
																UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
																UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
																UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
																UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
																[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
																UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
																[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
																UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
																[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
																UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
																[Local.InvocationType = this ? "Method" : Local.InvocationType]
																UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
															}
														}
												}
												[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
												OLEAUTDISPPARAMS DispParams;
												UINT32 cVarRef;
												NdrConformant VarRefIdxConformant;
												UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
												OLEAUTSafeArrVariant VarRef;
											}
									}
								}
								case 0x02:
								_struct Response
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										default:
											Struct
											{
												OLEAUTVariant VarResult;
												NdrAlign pad;
												OLEAUTExcepInfo ExcepInfo;
												UINT32 Argerr;
												OLEAUTSafeArrVariant rgVarRef;
												Align4 padding;
												[RAPRDecomResult = ReturnValue.ToString]
												HRESULT ReturnValue;
											}
									}
								}
							}
						}
					case 0x07:
						_struct RAPIRASrv_GetNoviceUserInfo
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
									_struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
													Struct
													{
														NdrPtr Pointer;
														Switch
														{
															Case Pointer.ReferentID > 0: 
																[Post.RAPRDecomParameters = FormatString("szName: %s ", szName)]
																NdrWideString szName;
														}
													}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
												Struct
												{
													NdrPtr Pointer;
													Switch
													{
														Case Pointer.ReferentID > 0: 
															[RAPRDecomOutParameters = FormatString("szName: %s", szName)]
															struct
															{
																NdrConformantVarying szNameLength;
																RAPRRemoteAConString2 szName;
															}
													}
													Align4 Pad;
													[RAPRDecomResult = ReturnValue.ToString]
													HRESULT ReturnValue;
												}
										}
									}
							}
						}
					case 0x08:
						_struct RAPIRASrv_GetSessionInfo
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
									_struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
													Struct
													{
														AsciiString(4) Signature;
														OLEAUTSAFEARRAY UserNames;
														Align4 Pad;
														[Post.RAPRDecomParameters = FormatString("UserNames: %s, Count: %d", UserNames.toString, Count)]
														UINT32 Count;
													}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											default:
													Struct
													{
														AsciiString(4) Signature;
														OLEAUTSAFEARRAY UserNames;
														Align4 Pad;
														[RAPRDecomOutParameters = FormatString("UserNames: %s, Count: %d", UserNames.toString, Count)]
														UINT32 Count;
														[RAPRDecomResult = ReturnValue.ToString]
														HRESULT ReturnValue;	
													}
										}								
									}
							}
						}
					
					Default:
					[post.Description = "Error: " + Property.ParserErrorMessage]
					ReportParserError(ParserErrorProtocolClassWindows, "Rapr_bin{F120A684-B926-447F-9DF4-C966CB785648}", FormatString( "Unknown Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
				}
			}		
	}
}

//2.2.2		Remote Assistance Connection String 2
struct RAPRRemoteAConString2
{
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case StringTerm(Framedata, Frameoffset, Property.XmlEncoding, Property.XMLElementNameTerm, true, false, false).contains("E"):
						RAPRE E;
					default: XmlElement(true) Element;
				}
			}
	}
}

//E
struct RAPRE
{
	XMLTag("E") ESTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while[!Contains(StringTerm(FrameData,FrameOffset,Property.XmlEncoding,True,False,False),"E")]
				{
					switch
					{
						case StringTerm(Framedata, Frameoffset, Property.XmlEncoding, Property.XMLElementNameTerm, true, false, false).contains("A"):
							xmlelement(true) A;
						case StringTerm(Framedata, Frameoffset, Property.XmlEncoding, Property.XMLElementNameTerm, true, false, false).contains("C"):
							RAPRC C;
					}
				}
				XMLTag("E") EETag;
			}
	}
}

//C
struct RAPRC
{
	XMLTag("C") CSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				switch
				{
					case StringTerm(Framedata, Frameoffset, Property.XmlEncoding, Property.XMLElementNameTerm, true, false, false).contains("T"):
						RAPRT T;
				}
				XMLTag("C") CETag;
			}
	}
}

struct RAPRT
{
	XMLTag("T") TSTag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				while[!Contains(StringTerm(FrameData,FrameOffset,Property.XmlEncoding,True,False,False),"T")]
				{
					switch
					{
						case StringTerm(Framedata, Frameoffset, Property.XmlEncoding, Property.XMLElementNameTerm, true, false, false).contains("L"):
							XmlElement(true) L;
					}
				}
				XMLTag("T") TETag;
			}
	}
}

Table RAPIPCHCOLLMethodTable (value)
{
	switch (value)
	{
		case 0x07: "NewEnum";
		case 0x08: "Item";
		case 0x09: "Count";
		default: "Undefined value: " + FormatString("%d", value);
	}
}

Table RAPIPCHSERVMethodTable (value)
{
	switch (value)
	{
		case 0x13: "RemoteConnectionParms";
		case 0x14: "RemoteUserSessionInfo";
		default: "Undefined value: " + FormatString("%d", value);
	}
}

Table RAPISAFSESSMethodTable (value)
{
	switch (value)
	{
		case 0x07: "SessionIDGet";
		case 0x08: "SessionIDSet";
		case 0x09: "SessionStateGet";
		case 0x0A: "SessionStateSet";
		case 0x0B: "DomainNameGet";
		case 0x0C: "DomainNameSet";
		case 0x0D: "UserNameGet";
		case 0x0E: "UserNameSet";
		default: "Undefined value: " + FormatString("%d", value);
	}
}
Table RAPIRASrvMethodTable(value)
{
	switch(value)
	{
		case 0x07: "GetNoviceUserInfo";
		case 0x08: "GetSessionInfo";
		default: "Undefined value: " + FormatString("%d", value);
	}
}
Table RAPRGlobalMethodTable(uuid, opnum)
{
	switch (uuid)
	{
		case "{833E4100-AFF7-4AC3-AAC2-9F24C1457BCE}" : "IPCHCollection." + RAPIPCHCOLLMethodTable(opnum);
		case "{833E4200-AFF7-4AC3-AAC2-9F24C1457BCE}" : "IPCHService." + RAPIPCHSERVMethodTable(opnum);
		case "{833E41AA-AFF7-4AC3-AAC2-9F24C1457BCE}" : "ISAFSession." + RAPISAFSESSMethodTable(opnum);
		case "{F120A684-B926-447F-9DF4-C966CB785648}" : "IRASrv." + RAPIRASrvMethodTable(opnum);
		default: "Undefined value: " + FormatString("%d", uuid);
	}
}

