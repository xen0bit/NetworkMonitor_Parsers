//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Failover Cluster: Setup and Validation Protocol (ClusPrep)
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-CSVP]: Failover Cluster: Setup and Validation Protocol (ClusPrep) Specification (6.0)
//#
//#  Comments:               Parser Framework: PAC v2.1.1577.0
//#
//#  Revision Class and Date:Major, 6/24/2009
//#
//####

Protocol CSVP = FormatString( "%s %s%s%s%s%s", 
	Property.CSVPMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.CSVPSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.CSVPSummary : "" )
{
	[Property.CSVPSummary = ""]
	Switch( Property.MSRPCIfUuid )
	{
		Case "{85923CA7-1B6B-4E83-A2E4-F5BA3BFBB8A3}":
			[Property.CSVPMethodName = "IClusterLog::" + CSVPIClusterLogMethodNameTable( Property.MSRPCOpnum )]
			_Struct IClusterLog
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct GenerateClusterLog
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct GenerateTimeSpanLog
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("CSVP", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "CSVP", "Unknown IClusterLog method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{F1D6C29C-8FBE-4691-8724-F6D8DEAEAFC8}":
			[Property.CSVPMethodName = "IClusterFirewall::" + CSVPIClusterFirewallMethodNameTable( Property.MSRPCOpnum )]
			_Struct IClusterFirewall
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct InitializeAdapterConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct GetNextAdapterFirewallConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("CSVP", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "CSVP", "Unknown IClusterFirewall method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{2931C32C-F731-4C56-9FEB-3D5F1C5E72BF}":
			[Property.CSVPMethodName = "IClusterNetwork2::" + CSVPIClusterNetwork2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IClusterNetwork2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct SendRTMessage
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct InitializeNode
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct GetIpConfigSerialized
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct CleanupNode
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct QueryFirewallConfiguration
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("CSVP", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "CSVP", "Unknown IClusterNetwork2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{12108A88-6858-4467-B92F-E6CF4568DFB6}":
			[Property.CSVPMethodName = "IClusterStorage2::" + CSVPIClusterStorage2MethodNameTable( Property.MSRPCOpnum )]
			_Struct IClusterStorage2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct CprepDiskRawRead
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct CprepDiskRawWrite
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct CprepPrepareNode
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 6:
						_Struct CprepPrepareNodePhase2
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 7:
						_Struct CprepDiskGetProps
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 12:
						_Struct CprepDiskStopDefense
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 13:
						_Struct CprepDiskOnline
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 14:
						_Struct CprepDiskVerifyUnique
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 17:
						_Struct CprepDiskWriteFileData
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 18:
						_Struct CprepDiskVerifyFileData
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 19:
						_Struct CprepDiskDeleteFile
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 20:
						_Struct CprepDiskOffline
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 22:
						_Struct CprepDiskGetUniqueIds
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 23:
						_Struct CprepDiskAttach
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 24:
						_Struct CprepDiskPRArbitrate
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 25:
						_Struct CprepDiskPRRegister
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 26:
						_Struct CprepDiskPRUnRegister
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 27:
						_Struct CprepDiskPRReserve
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 28:
						_Struct CprepDiskPRRelease
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 29:
						_Struct CprepDiskDiskPartitionIsNtfs
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 30:
						_Struct CprepDiskGetArbSectors
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 31:
						_Struct CprepDiskIsPRPresent
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 32:
						_Struct CprepDiskPRPreempt
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 33:
						_Struct CprepDiskPRClear
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 34:
						_Struct CprepDiskIsOnline
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 35:
						_Struct CprepDiskSetOnline
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 36:
						_Struct CprepDiskGetFSName
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 37:
						_Struct CprepDiskIsReadable
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 38:
						_Struct CprepDiskGetDsms
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 8:
					Case 9:
					Case 10:
					Case 11:
					Case 15:
					Case 16:
					Case 21:
						struct NotUsedOnWire
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									[CSVPSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
									_Struct Request
									{
										ReportParserWarning("CSVP", "Invalid IClusterStorage2 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
								
								Case 0x02: //RESPONSE
									[CSVPSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
									_Struct Response
									{
										ReportParserWarning("CSVP", "Invalid IClusterStorage2 method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
										Blob(FrameLength - Offset) PayloadData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("CSVP", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "CSVP", "Unknown IClusterStorage2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{D6105110-8917-41A5-AA32-8E0AA2933DC9}":
			[Property.CSVPMethodName = "IClusterCleanup::" + CSVPIClusterCleanupMethodNameTable( Property.MSRPCOpnum )]
			_Struct IClusterCleanup
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct CleanUpEvictedNode
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct ClearPR
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("CSVP", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "CSVP", "Unknown IClusterCleanup method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{491260B5-05C9-40D9-B7F2-1F7BDAE0927F}":
			[Property.CSVPMethodName = "IClusterSetup::" + CSVPIClusterSetupMethodNameTable( Property.MSRPCOpnum )]
			_Struct IClusterSetup
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3:
						_Struct ConfigSvcSecret
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 4:
						_Struct RetrieveSvcSecret
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Case 5:
						_Struct RetrieveHostLabel
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Blob( FrameLength - FrameOffset ) EncryptedData;
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("CSVP", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "CSVP", "Unknown IClusterSetup method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
	}
}

Table CSVPIClusterLogMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "GenerateClusterLog";
		Case 4: "GenerateTimeSpanLog";
		Default: "unknown";
	}
}

Table CSVPIClusterFirewallMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "InitializeAdapterConfiguration";
		Case 4: "GetNextAdapterFirewallConfiguration";
		Default: "unknown";
	}
}

Table CSVPIClusterNetwork2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "SendRTMessage";
		Case 4: "InitializeNode";
		Case 5: "GetIpConfigSerialized";
		Case 6: "CleanupNode";
		Case 7: "QueryFirewallConfiguration";
		Default: "unknown";
	}
}

Table CSVPIClusterStorage2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "CprepDiskRawRead";
		Case 4: "CprepDiskRawWrite";
		Case 5: "CprepPrepareNode";
		Case 6: "CprepPrepareNodePhase2";
		Case 7: "CprepDiskGetProps";
		Case 8: "Opnum8NotUsedOnWire";
		Case 9: "Opnum9NotUsedOnWire";
		Case 10: "Opnum10NotUsedOnWire";
		Case 11: "Opnum11NotUsedOnWire";
		Case 12: "CprepDiskStopDefense";
		Case 13: "CprepDiskOnline";
		Case 14: "CprepDiskVerifyUnique";
		Case 15: "Opnum15NotUsedOnWire";
		Case 16: "Opnum16NotUsedOnWire";
		Case 17: "CprepDiskWriteFileData";
		Case 18: "CprepDiskVerifyFileData";
		Case 19: "CprepDiskDeleteFile";
		Case 20: "CprepDiskOffline";
		Case 21: "Opnum21NotUsedOnWire";
		Case 22: "CprepDiskGetUniqueIds";
		Case 23: "CprepDiskAttach";
		Case 24: "CprepDiskPRArbitrate";
		Case 25: "CprepDiskPRRegister";
		Case 26: "CprepDiskPRUnRegister";
		Case 27: "CprepDiskPRReserve";
		Case 28: "CprepDiskPRRelease";
		Case 29: "CprepDiskDiskPartitionIsNtfs";
		Case 30: "CprepDiskGetArbSectors";
		Case 31: "CprepDiskIsPRPresent";
		Case 32: "CprepDiskPRPreempt";
		Case 33: "CprepDiskPRClear";
		Case 34: "CprepDiskIsOnline";
		Case 35: "CprepDiskSetOnline";
		Case 36: "CprepDiskGetFSName";
		Case 37: "CprepDiskIsReadable";
		Case 38: "CprepDiskGetDsms";
		Default: "unknown";
	}
}

Table CSVPIClusterCleanupMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "CleanUpEvictedNode";
		Case 4: "ClearPR";
		Default: "unknown";
	}
}

Table CSVPIClusterSetupMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "ConfigSvcSecret";
		Case 4: "RetrieveSvcSecret";
		Case 5: "RetrieveHostLabel";
		Default: "unknown";
	}
}

