//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-TCPIP
//#
//#  Details:                
//#
//#  Public References:      TCPIP.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 1/28/2010
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsTCPIP, "{2F07E2EE-15DB-40F1-90EF-9D7BA282188A}")]
Protocol TCPIP_MicrosoftWindowsTCPIP = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1001: [property.ETLSummary = this.ToString] TCPIP_TCP_ENDPOINT_CREATION_EVENT TCP_ENDPOINT_CREATION_EVENT;
		case 1002: [property.ETLSummary = this.ToString] TCPIP_TCP_REQUEST_CONNECT_EVENT TCP_REQUEST_CONNECT_EVENT;
		case 1003: [property.ETLSummary = this.ToString] TCPIP_TCP_INSPECT_CONNECT_COMPLETE_EVENT TCP_INSPECT_CONNECT_COMPLETE_EVENT;
		case 1004: [property.ETLSummary = this.ToString] TCPIP_TCP_TCB_SYN_SEND_EVENT TCP_TCB_SYN_SEND_EVENT;
		case 1005: [property.ETLSummary = this.ToString] TCPIP_TCP_BIND_ENDPOINT_RESOLUTION_FAILURE TCP_BIND_ENDPOINT_RESOLUTION_FAILURE;
		case 1006: [property.ETLSummary = this.ToString] TCPIP_TCP_BIND_ENDPOINT_PORT_FAILURE TCP_BIND_ENDPOINT_PORT_FAILURE;
		case 1007: [property.ETLSummary = this.ToString] TCPIP_TCP_BIND_ENDPOINT_INSPECTION_FAILURE TCP_BIND_ENDPOINT_INSPECTION_FAILURE;
		case 1008: [property.ETLSummary = this.ToString] TCPIP_TCP_BIND_ENDPOINT_COMPLETE TCP_BIND_ENDPOINT_COMPLETE;
		case 1009: [property.ETLSummary = this.ToString] TCPIP_TCP_CLOSE_ENDPOINT TCP_CLOSE_ENDPOINT;
		case 1010: [property.ETLSummary = this.ToString] TCPIP_TCP_CREATE_ENDPOINT_AF_FAILURE TCP_CREATE_ENDPOINT_AF_FAILURE;
		case 1011: [property.ETLSummary = this.ToString] TCPIP_TCP_CREATE_ENDPOINT_COMPARTMENT_FAILURE TCP_CREATE_ENDPOINT_COMPARTMENT_FAILURE;
		case 1012: [property.ETLSummary = this.ToString] TCPIP_TCP_CREATE_ENDPOINT_INSPECTION_FAILURE TCP_CREATE_ENDPOINT_INSPECTION_FAILURE;
		case 1013: [property.ETLSummary = this.ToString] TCPIP_TCP_CREATE_ENDPOINT_COMPLETE TCP_CREATE_ENDPOINT_COMPLETE;
		case 1014: [property.ETLSummary = this.ToString] TCPIP_TCP_ACCEPT_LISTENER_ROUTE_LOOKUP_FAILURE TCP_ACCEPT_LISTENER_ROUTE_LOOKUP_FAILURE;
		case 1015: [property.ETLSummary = this.ToString] TCPIP_TCP_ACCEPT_LISTENER_INSERTION_FAILURE TCP_ACCEPT_LISTENER_INSERTION_FAILURE;
		case 1016: [property.ETLSummary = this.ToString] TCPIP_TCP_ACCEPT_LISTENER_REJECTED TCP_ACCEPT_LISTENER_REJECTED;
		case 1017: [property.ETLSummary = this.ToString] TCPIP_TCP_ACCEPT_LISTENER_COMPLETE TCP_ACCEPT_LISTENER_COMPLETE;
		case 1018: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAILED_AF TCP_CONNECT_TCB_FAILED_AF;
		case 1019: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAILED_COMPARTMENT TCP_CONNECT_TCB_FAILED_COMPARTMENT;
		case 1020: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAILED_INSPECT TCP_CONNECT_TCB_FAILED_INSPECT;
		case 1021: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAILED_ROUTE TCP_CONNECT_TCB_FAILED_ROUTE;
		case 1022: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_SKIP_RATE_LIMIT TCP_CONNECT_TCB_SKIP_RATE_LIMIT;
		case 1023: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_PASS_RATE_LIMIT TCP_CONNECT_TCB_PASS_RATE_LIMIT;
		case 1024: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_CHECK_RATE_LIMIT TCP_CONNECT_TCB_CHECK_RATE_LIMIT;
		case 1025: [property.ETLSummary = this.ToString] TCPIP_TCP_SECURITY_RATE_LIMIT TCP_SECURITY_RATE_LIMIT;
		case 1026: [property.ETLSummary = this.ToString] TCPIP_TCP_RATE_LIMIT_PATH_RELEASE TCP_RATE_LIMIT_PATH_RELEASE;
		case 1027: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_RATE_LIMIT_RELEASE TCP_CONNECT_TCB_RATE_LIMIT_RELEASE;
		case 1028: [property.ETLSummary = this.ToString] TCPIP_TCP_RATE_LIMIT_PATH_CANCEL TCP_RATE_LIMIT_PATH_CANCEL;
		case 1029: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_CANCEL TCP_CONNECT_TCB_CANCEL;
		case 1030: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAIL_INSERTION TCP_CONNECT_TCB_FAIL_INSERTION;
		case 1031: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_PROCEEDING TCP_CONNECT_TCB_PROCEEDING;
		case 1032: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_RATE_LIMIT_CANCEL TCP_CONNECT_TCB_RATE_LIMIT_CANCEL;
		case 1033: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_COMPLETE TCP_CONNECT_TCB_COMPLETE;
		case 1034: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAILURE TCP_CONNECT_TCB_FAILURE;
		case 1035: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAIL_INSPECT_CONNECT_COMPLETE TCP_CONNECT_TCB_FAIL_INSPECT_CONNECT_COMPLETE;
		case 1036: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAIL_SESSION_STATE TCP_CONNECT_TCB_FAIL_SESSION_STATE;
		case 1037: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAIL_DONT_FRAGMENT TCP_CONNECT_TCB_FAIL_DONT_FRAGMENT;
		case 1038: [property.ETLSummary = this.ToString] TCPIP_TCP_CLOSE_TCB_REQUEST TCP_CLOSE_TCB_REQUEST;
		case 1039: [property.ETLSummary = this.ToString] TCPIP_TCP_ABORT_TCB_REQUEST TCP_ABORT_TCB_REQUEST;
		case 1040: [property.ETLSummary = this.ToString] TCPIP_TCP_ABORT_TCB_COMPLETE TCP_ABORT_TCB_COMPLETE;
		case 1041: [property.ETLSummary = this.ToString] TCPIP_TCP_DISCONNECT_TCB_INJECT_FAILED TCP_DISCONNECT_TCB_INJECT_FAILED;
		case 1042: [property.ETLSummary = this.ToString] TCPIP_TCP_DISCONNECT_TCB_REQUEST TCP_DISCONNECT_TCB_REQUEST;
		case 1043: [property.ETLSummary = this.ToString] TCPIP_TCP_DISCONNECT_TCB_COMPLETE TCP_DISCONNECT_TCB_COMPLETE;
		case 1044: [property.ETLSummary = this.ToString] TCPIP_TCP_SHUTDOWN_TCB TCP_SHUTDOWN_TCB;
		case 1045: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_TIMEOUT TCP_CONNECT_TCB_TIMEOUT;
		case 1046: [property.ETLSummary = this.ToString] TCPIP_TCP_DISCONNECT_TCB_RTO_TIMEOUT TCP_DISCONNECT_TCB_RTO_TIMEOUT;
		case 1047: [property.ETLSummary = this.ToString] TCPIP_TCP_DISCONNECT_TCB_KEEPALIVE_TIMEOUT TCP_DISCONNECT_TCB_KEEPALIVE_TIMEOUT;
		case 1048: [property.ETLSummary = this.ToString] TCPIP_TCP_DISCONNECT_TCB_TIMEOUT TCP_DISCONNECT_TCB_TIMEOUT;
		case 1049: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_ESTATS_FAILED TCP_CONNECT_TCB_ESTATS_FAILED;
		case 1050: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_FAILED_PORT_ACQUIRE TCP_CONNECT_FAILED_PORT_ACQUIRE;
		case 1051: [property.ETLSummary = this.ToString] TCPIP_TCP_TCB_STATE_CHANGE TCP_TCB_STATE_CHANGE;
		case 1052: [property.ETLSummary = this.ToString] TCPIP_TCP_ENDPOINT_ACQUIRE_PORT_RESERVATION TCP_ENDPOINT_ACQUIRE_PORT_RESERVATION;
		case 1053: [property.ETLSummary = this.ToString] TCPIP_TCP_ENDPOINT_FAILED_PORT_RESERVATION TCP_ENDPOINT_FAILED_PORT_RESERVATION;
		case 1054: [property.ETLSummary = this.ToString] TCPIP_TCP_GLOBAL_PORT_RESERVATION TCP_GLOBAL_PORT_RESERVATION;
		case 1055: [property.ETLSummary = this.ToString] TCPIP_TCP_SYN_ATTACK_ENTRY TCP_SYN_ATTACK_ENTRY;
		case 1056: [property.ETLSummary = this.ToString] TCPIP_TCP_REASSEMBLY_LIMIT_VIOLATION TCP_REASSEMBLY_LIMIT_VIOLATION;
		case 1057: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECTION_RATE_LIMIT_VIOLATION TCP_CONNECTION_RATE_LIMIT_VIOLATION;
		case 1058: [property.ETLSummary = this.ToString] TCPIP_TCP_LAND_ATTACK_SEGMENT_DROP TCP_LAND_ATTACK_SEGMENT_DROP;
		case 1059: [property.ETLSummary = this.ToString] TCPIP_TCP_ISB_BEGIN_THROTTLE TCP_ISB_BEGIN_THROTTLE;
		case 1060: [property.ETLSummary = this.ToString] TCPIP_TCP_ISB_END_THROTTLE TCP_ISB_END_THROTTLE;
		case 1061: [property.ETLSummary = this.ToString] TCPIP_TCP_ATTACH_AF TCP_ATTACH_AF;
		case 1062: [property.ETLSummary = this.ToString] TCPIP_TCP_DETACH_AF TCP_DETACH_AF;
		case 1063: [property.ETLSummary = this.ToString] TCPIP_TCP_SYN_ATTACK_EXIT TCP_SYN_ATTACK_EXIT;
		case 1064: [property.ETLSummary = this.ToString] TCPIP_TCP_TCB_TIMER_START TCP_TCB_TIMER_START;
		case 1065: [property.ETLSummary = this.ToString] TCPIP_TCP_TCB_STOP_TIMER TCP_TCB_STOP_TIMER;
		case 1066: [property.ETLSummary = this.ToString] TCPIP_TCP_TCB_EXPIRE_TIMER TCP_TCB_EXPIRE_TIMER;
		case 1067: [property.ETLSummary = this.ToString] TCPIP_TCP_TCB_CHANGE_ISB TCP_TCB_CHANGE_ISB;
		case 1068: [property.ETLSummary = this.ToString] TCPIP_TCP_RSS_TABLE_CHANGE TCP_RSS_TABLE_CHANGE;
		case 1069: [property.ETLSummary = this.ToString] TCPIP_TCP_DATA_TRANSFER_TIMEOUT TCP_DATA_TRANSFER_TIMEOUT;
		case 1070: [property.ETLSummary = this.ToString] TCPIP_TCP_DATA_TRANSFER_RTT_SAMPLE TCP_DATA_TRANSFER_RTT_SAMPLE;
		case 1071: [property.ETLSummary = this.ToString] TCPIP_TCP_DATA_TRANSFER_CUM_ACK TCP_DATA_TRANSFER_CUM_ACK;
		case 1072: [property.ETLSummary = this.ToString] TCPIP_TCP_DATA_TRANSFER_DUP_ACK TCP_DATA_TRANSFER_DUP_ACK;
		case 1073: [property.ETLSummary = this.ToString] TCPIP_TCP_DATA_TRANSFER_SEND TCP_DATA_TRANSFER_SEND;
		case 1074: [property.ETLSummary = this.ToString] TCPIP_TCP_DATA_TRANSFER_RECEIVE TCP_DATA_TRANSFER_RECEIVE;
		case 1075: [property.ETLSummary = this.ToString] TCPIP_TCP_DATA_TRANSFER_ECN TCP_DATA_TRANSFER_ECN;
		case 1076: [property.ETLSummary = this.ToString] TCPIP_TCP_DATA_TRANSFER_SPURIOUS_TIMEOUT TCP_DATA_TRANSFER_SPURIOUS_TIMEOUT;
		case 1077: [property.ETLSummary = this.ToString] TCPIP_TCP_DATA_TRANSFER_RETRANSMIT_ROUND TCP_DATA_TRANSFER_RETRANSMIT_ROUND;
		case 1150: [property.ETLSummary = this.ToString] TCPIP_TCP_CTCP_DATA_TRANSFER_TIMEOUT TCP_CTCP_DATA_TRANSFER_TIMEOUT;
		case 1151: [property.ETLSummary = this.ToString] TCPIP_TCP_CTCP_DATA_TRANSFER_CUM_ACK TCP_CTCP_DATA_TRANSFER_CUM_ACK;
		case 1152: [property.ETLSummary = this.ToString] TCPIP_TCP_CTCP_DATA_TRANSFER_DUP_ACK TCP_CTCP_DATA_TRANSFER_DUP_ACK;
		case 1153: [property.ETLSummary = this.ToString] TCPIP_TCP_CTCP_DATA_TRANSFER_SEND TCP_CTCP_DATA_TRANSFER_SEND;
		case 1154: [property.ETLSummary = this.ToString] TCPIP_TCP_CTCP_DATA_TRANSFER_ECN TCP_CTCP_DATA_TRANSFER_ECN;
		case 1155: [property.ETLSummary = this.ToString] TCPIP_TCP_CTCP_DATA_TRANSFER_SPURIOUS_TIMEOUT TCP_CTCP_DATA_TRANSFER_SPURIOUS_TIMEOUT;
		case 1078: [property.ETLSummary = this.ToString] TCPIP_TCP_LOSS_RECOVERY_ENTRY TCP_LOSS_RECOVERY_ENTRY;
		case 1079: [property.ETLSummary = this.ToString] TCPIP_TCP_LOSS_RECOVERY_EXIT TCP_LOSS_RECOVERY_EXIT;
		case 1080: [property.ETLSummary = this.ToString] TCPIP_TCP_LOSS_RECOVERY_SACK_ENTRY TCP_LOSS_RECOVERY_SACK_ENTRY;
		case 1081: [property.ETLSummary = this.ToString] TCPIP_TCP_LOSS_RECOVERY_SACK_EXIT TCP_LOSS_RECOVERY_SACK_EXIT;
		case 1082: [property.ETLSummary = this.ToString] TCPIP_TCP_SLOW_START_TO_CONG_AVOIDANCE TCP_SLOW_START_TO_CONG_AVOIDANCE;
		case 1084: [property.ETLSummary = this.ToString] TCPIP_TCP_BLACKHOLE_DETECTION_ENTRY TCP_BLACKHOLE_DETECTION_ENTRY;
		case 1085: [property.ETLSummary = this.ToString] TCPIP_TCP_BLACKHOLE_DETECTION_EXIT TCP_BLACKHOLE_DETECTION_EXIT;
		case 1086: [property.ETLSummary = this.ToString] TCPIP_TCP_BLACKHOLE_DETECTION_FAILED TCP_BLACKHOLE_DETECTION_FAILED;
		case 1087: [property.ETLSummary = this.ToString] TCPIP_TCP_SPURIOUS_RTO_DETECTION_BEGIN TCP_SPURIOUS_RTO_DETECTION_BEGIN;
		case 1088: [property.ETLSummary = this.ToString] TCPIP_TCP_SPURIOUS_RTO_DETECTION_END TCP_SPURIOUS_RTO_DETECTION_END;
		case 1089: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAILED_ACTIVE_CONNECT TCP_CONNECT_TCB_FAILED_ACTIVE_CONNECT;
		case 1090: [property.ETLSummary = this.ToString] TCPIP_TCP_RELEASE_INDICATION TCP_RELEASE_INDICATION;
		case 1091: [property.ETLSummary = this.ToString] TCPIP_TCP_APP_SEND_BUFFER_SIZE TCP_APP_SEND_BUFFER_SIZE;
		case 1092: [property.ETLSummary = this.ToString] TCPIP_TCP_AUTOTUNING_BEGIN TCP_AUTOTUNING_BEGIN;
		case 1093: [property.ETLSummary = this.ToString] TCPIP_TCP_AUTOTUNING_END TCP_AUTOTUNING_END;
		case 1094: [property.ETLSummary = this.ToString] TCPIP_TCP_AUTOTUNING_FAILED_RTT_ESTIMATION TCP_AUTOTUNING_FAILED_RTT_ESTIMATION;
		case 1095: [property.ETLSummary = this.ToString] TCPIP_TCP_AUTOTUNING_FAILED_BANDWIDTH_ESTIMATION TCP_AUTOTUNING_FAILED_BANDWIDTH_ESTIMATION;
		case 1096: [property.ETLSummary = this.ToString] TCPIP_TCP_AUTOTUNING_FAILED_ALLOCATION_FAILURE TCP_AUTOTUNING_FAILED_ALLOCATION_FAILURE;
		case 1097: [property.ETLSummary = this.ToString] TCPIP_TCP_AUTOTUNING_CHANGE_RCV_BUFFER_SIZE TCP_AUTOTUNING_CHANGE_RCV_BUFFER_SIZE;
		case 1098: [property.ETLSummary = this.ToString] TCPIP_TCP_RTT_RESILIENCY_DETECTION TCP_RTT_RESILIENCY_DETECTION;
		case 1099: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECTION_OFFLOAD_STATE_CHANGE TCP_CONNECTION_OFFLOAD_STATE_CHANGE;
		case 1100: [property.ETLSummary = this.ToString] TCPIP_TCP_SWS_AVOIDANCE_BEGIN TCP_SWS_AVOIDANCE_BEGIN;
		case 1101: [property.ETLSummary = this.ToString] TCPIP_TCP_SWS_AVOIDANCE_END TCP_SWS_AVOIDANCE_END;
		case 1102: [property.ETLSummary = this.ToString] TCPIP_TCP_ZERO_WINDOW_PROBING_BEGIN TCP_ZERO_WINDOW_PROBING_BEGIN;
		case 1103: [property.ETLSummary = this.ToString] TCPIP_TCP_ZERO_WINDOW_PROBING_END TCP_ZERO_WINDOW_PROBING_END;
		case 1104: [property.ETLSummary = this.ToString] TCPIP_TCP_SET_TCP_OPTION TCP_SET_TCP_OPTION;
		case 1105: [property.ETLSummary = this.ToString] TCPIP_TCP_SET_TCP_SO_OPTION TCP_SET_TCP_SO_OPTION;
		case 1106: [property.ETLSummary = this.ToString] TCPIP_TCPIP_MEDIA_DISCONNECT TCPIP_MEDIA_DISCONNECT;
		case 1107: [property.ETLSummary = this.ToString] TCPIP_TCPIP_MODULE_STARTED TCPIP_MODULE_STARTED;
		case 1108: [property.ETLSummary = this.ToString] TCPIP_TCPIP_MODULE_STOPPED TCPIP_MODULE_STOPPED;
		case 1109: [property.ETLSummary = this.ToString] TCPIP_TCPIP_MEMORY_FAILURES TCPIP_MEMORY_FAILURES;
		case 1110: [property.ETLSummary = this.ToString] TCPIP_TCP_GLOBAL_PARAMETERS TCP_GLOBAL_PARAMETERS;
		case 1111: [property.ETLSummary = this.ToString] TCPIP_TCP_LSO TCP_LSO;
		case 1112: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECTION_OFFLOAD_STATUS TCP_CONNECTION_OFFLOAD_STATUS;
		case 1113: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECTION_OFFLOAD_PMAX TCP_CONNECTION_OFFLOAD_PMAX;
		case 1114: [property.ETLSummary = this.ToString] TCPIP_IP_DAD_SUCCESSFUL IP_DAD_SUCCESSFUL;
		case 1115: [property.ETLSummary = this.ToString] TCPIP_IP_DAD_FAILED IP_DAD_FAILED;
		case 1116: [property.ETLSummary = this.ToString] TCPIP_IP_DAD_STARTED IP_DAD_STARTED;
		case 1117: [property.ETLSummary = this.ToString] TCPIP_TCP_LISTENER_ACTIVATION_FAILED_AF TCP_LISTENER_ACTIVATION_FAILED_AF;
		case 1118: [property.ETLSummary = this.ToString] TCPIP_TCP_LISTENER_ACTIVATION_FAILED_COMPARTMENT TCP_LISTENER_ACTIVATION_FAILED_COMPARTMENT;
		case 1119: [property.ETLSummary = this.ToString] TCPIP_TCP_LISTENER_ACTIVATION_FAILED_INSPECTION1 TCP_LISTENER_ACTIVATION_FAILED_INSPECTION1;
		case 1120: [property.ETLSummary = this.ToString] TCPIP_TCP_LISTENER_ACTIVATION_FAILED_INSPECTION2 TCP_LISTENER_ACTIVATION_FAILED_INSPECTION2;
		case 1121: [property.ETLSummary = this.ToString] TCPIP_TCP_LISTENER_BIND_FAILED_RESOLUTION TCP_LISTENER_BIND_FAILED_RESOLUTION;
		case 1122: [property.ETLSummary = this.ToString] TCPIP_TCP_LISTENER_BIND_FAILED_PORT TCP_LISTENER_BIND_FAILED_PORT;
		case 1123: [property.ETLSummary = this.ToString] TCPIP_TCP_LISTENER_ACTIVATED TCP_LISTENER_ACTIVATED;
		case 1124: [property.ETLSummary = this.ToString] TCPIP_TCP_LISTENER_UNBOUND TCP_LISTENER_UNBOUND;
		case 1127: [property.ETLSummary = this.ToString] TCPIP_IP_ADDRESS_ADDED IP_ADDRESS_ADDED;
		case 1128: [property.ETLSummary = this.ToString] TCPIP_IP_ADDRESS_DELETED IP_ADDRESS_DELETED;
		case 1130: [property.ETLSummary = this.ToString] TCPIP_FRAMING_INTERFACE_OPER_STATUS FRAMING_INTERFACE_OPER_STATUS;
		case 1136: [property.ETLSummary = this.ToString] TCPIP_FRAMING_NDIS_PAUSE FRAMING_NDIS_PAUSE;
		case 1137: [property.ETLSummary = this.ToString] TCPIP_FRAMING_NDIS_RESTART FRAMING_NDIS_RESTART;
		case 1138: [property.ETLSummary = this.ToString] TCPIP_IP_ADDRESS_STATE_PREFERRED IP_ADDRESS_STATE_PREFERRED;
		case 1139: [property.ETLSummary = this.ToString] TCPIP_IP_ADDRESS_STATE_NONPREFERRED IP_ADDRESS_STATE_NONPREFERRED;
		case 1144: [property.ETLSummary = this.ToString] TCPIP_IP_INTERFACE_PROPERY_CHANGE IP_INTERFACE_PROPERY_CHANGE;
		case 1145: [property.ETLSummary = this.ToString] TCPIP_IP_ROUTE_CREATED IP_ROUTE_CREATED;
		case 1146: [property.ETLSummary = this.ToString] TCPIP_IP_ROUTE_DELETED IP_ROUTE_DELETED;
		case 1147: [property.ETLSummary = this.ToString] TCPIP_IP_ROUTE_PROPERTY_CHANGE IP_ROUTE_PROPERTY_CHANGE;
		case 1148: [property.ETLSummary = this.ToString] TCPIP_IP_NEIGHBOR_UNREACHABLE IP_NEIGHBOR_UNREACHABLE;
		case 1149: [property.ETLSummary = this.ToString] TCPIP_IP_NEIGHBOR_REACHABLE IP_NEIGHBOR_REACHABLE;
		case 1156: [property.ETLSummary = this.ToString] TCPIP_TCP_RECEIVE_REQUEST TCP_RECEIVE_REQUEST;
		case 1157: [property.ETLSummary = this.ToString] TCPIP_TCP_DELIVERY_INDICATED TCP_DELIVERY_INDICATED;
		case 1158: [property.ETLSummary = this.ToString] TCPIP_TCP_DELIVERY_SATISFIED TCP_DELIVERY_SATISFIED;
		case 1159: [property.ETLSummary = this.ToString] TCPIP_TCP_SEND_POSTED TCP_SEND_POSTED;
		case 1160: [property.ETLSummary = this.ToString] TCPIP_TCP_SEND_TRANSMITTED TCP_SEND_TRANSMITTED;
		case 1161: [property.ETLSummary = this.ToString] TCPIP_TCP_SEND_ADVANCE TCP_SEND_ADVANCE;
		case 1162: [property.ETLSummary = this.ToString] TCPIP_TCP_CTCP_DELAY_WNDW_INACTIVE TCP_CTCP_DELAY_WNDW_INACTIVE;
		case 1163: [property.ETLSummary = this.ToString] TCPIP_TCP_CTCP_ASSIGNED_BLOCKS TCP_CTCP_ASSIGNED_BLOCKS;
		case 1164: [property.ETLSummary = this.ToString] TCPIP_TCP_CTCP_CONGESTION_WNDW TCP_CTCP_CONGESTION_WNDW;
		case 1165: [property.ETLSummary = this.ToString] TCPIP_TCP_CTCP_GAMMA TCP_CTCP_GAMMA;
		case 1166: [property.ETLSummary = this.ToString] TCPIP_TCP_SRTT_MEASUREMENT_STARTED TCP_SRTT_MEASUREMENT_STARTED;
		case 1167: [property.ETLSummary = this.ToString] TCPIP_TCP_SRTT_MEASUREMENT_COMPLETE TCP_SRTT_MEASUREMENT_COMPLETE;
		case 1168: [property.ETLSummary = this.ToString] TCPIP_TCP_SRTT_MEASUREMENT_CANCELLED TCP_SRTT_MEASUREMENT_CANCELLED;
		case 1169: [property.ETLSummary = this.ToString] TCPIP_UDP_ENDPOINT_SEND_MESSAGES UDP_ENDPOINT_SEND_MESSAGES;
		case 1170: [property.ETLSummary = this.ToString] TCPIP_UDP_ENDPOINT_RECEIVE_MESSAGES UDP_ENDPOINT_RECEIVE_MESSAGES;
		case 1300: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECTION_RUNDOWN TCP_CONNECTION_RUNDOWN;
		case 1171: [property.ETLSummary = this.ToString] TCPIP_TCP_DELIVERY_FLUSH TCP_DELIVERY_FLUSH;
		case 1172: [property.ETLSummary = this.ToString] TCPIP_TCP_TCB_INJECT_RCV_FAILURE TCP_TCB_INJECT_RCV_FAILURE;
		case 1173: [property.ETLSummary = this.ToString] TCPIP_TCP_DELIVERY_INJECTING_DATA TCP_DELIVERY_INJECTING_DATA;
		case 1174: [property.ETLSummary = this.ToString] TCPIP_TCP_TCB_INJECT_FIN_FAILURE TCP_TCB_INJECT_FIN_FAILURE;
		case 1175: [property.ETLSummary = this.ToString] TCPIP_TCP_DELIVERY_ACCEPT TCP_DELIVERY_ACCEPT;
		case 1176: [property.ETLSummary = this.ToString] TCPIP_TCP_DELIVERY_FIN TCP_DELIVERY_FIN;
		case 1178: [property.ETLSummary = this.ToString] TCPIP_TCP_DELIVERY_PUSH TCP_DELIVERY_PUSH;
		case 1180: [property.ETLSummary = this.ToString] TCPIP_TCP_TCB_INJECT_FIN_COMPLETE TCP_TCB_INJECT_FIN_COMPLETE;
		case 1181: [property.ETLSummary = this.ToString] TCPIP_TCP_DELIVERY_COMPLETING TCP_DELIVERY_COMPLETING;
		case 1182: [property.ETLSummary = this.ToString] TCPIP_TCP_INITIATE_SYNRST_VALIDATION TCP_INITIATE_SYNRST_VALIDATION;
		case 1183: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_TCB_FAILED_RCVD_RST TCP_CONNECT_TCB_FAILED_RCVD_RST;
		case 1184: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECTION_TERMINATED_RCVD_RST TCP_CONNECTION_TERMINATED_RCVD_RST;
		case 1185: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECTION_TERMINATED_RCVD_SYN TCP_CONNECTION_TERMINATED_RCVD_SYN;
		case 1186: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECT_RETRANSMIT TCP_CONNECT_RETRANSMIT;
		case 1187: [property.ETLSummary = this.ToString] TCPIP_TCP_DATA_TRANSFER_RETRANSMIT TCP_DATA_TRANSFER_RETRANSMIT;
		case 1188: [property.ETLSummary = this.ToString] TCPIP_TCP_CONNECTION_KEEPALIVE TCP_CONNECTION_KEEPALIVE;
		case 1189: [property.ETLSummary = this.ToString] TCPIP_TCP_DELIVERY_STATE_CHANGE TCP_DELIVERY_STATE_CHANGE;
		case 1190: [property.ETLSummary = this.ToString] TCPIP_TCP_DELIVERY_DATA_DROPPED TCP_DELIVERY_DATA_DROPPED;
		case 1191: [property.ETLSummary = this.ToString] TCPIP_TCP_ACQUIRE_PORT TCP_ACQUIRE_PORT;
		case 1192: [property.ETLSummary = this.ToString] TCPIP_TCP_ACQUIRE_WEAKREF_PORT TCP_ACQUIRE_WEAKREF_PORT;
		case 1193: [property.ETLSummary = this.ToString] TCPIP_TCP_RELEASE_PORT TCP_RELEASE_PORT;
		case 1194: [property.ETLSummary = this.ToString] TCPIP_TCP_REPLACE_PORT TCP_REPLACE_PORT;
		case 1195: [property.ETLSummary = this.ToString] TCPIP_TCP_ASSIGNED_WEAK_REFERENCE_PORT TCP_ASSIGNED_WEAK_REFERENCE_PORT;
		case 1196: [property.ETLSummary = this.ToString] TCPIP_TCP_BH_DETECT_FULL_SIZE_ACK TCP_BH_DETECT_FULL_SIZE_ACK;
		case 1197: [property.ETLSummary = this.ToString] TCPIP_TCP_FLUSH_SACK TCP_FLUSH_SACK;
		case 1198: [property.ETLSummary = this.ToString] TCPIP_TCP_REASSEMBLY_ENTRY TCP_REASSEMBLY_ENTRY;
		case 1199: [property.ETLSummary = this.ToString] TCPIP_TCP_REASSEMBLY_EXIT TCP_REASSEMBLY_EXIT;
		case 1200: [property.ETLSummary = this.ToString] TCPIP_TCP_DISCONNECT_TCB_ZERO_WINDOW_TIMEOUT TCP_DISCONNECT_TCB_ZERO_WINDOW_TIMEOUT;
		case 1201: [property.ETLSummary = this.ToString] TCPIP_TCP_DISCONNECT_TCB_FINWAIT2_TIMEOUT TCP_DISCONNECT_TCB_FINWAIT2_TIMEOUT;
		case 1202: [property.ETLSummary = this.ToString] TCPIP_IP_INTERFACE_RUNDOWN IP_INTERFACE_RUNDOWN;
		case 1203: [property.ETLSummary = this.ToString] TCPIP_IP_INTERFACE_SPPED_CHANGE IP_INTERFACE_SPPED_CHANGE;
		case 1204: [property.ETLSummary = this.ToString] TCPIP_TCP_FLUSH_REASSEMBLY TCP_FLUSH_REASSEMBLY;
		case 1205: [property.ETLSummary = this.ToString] TCPIP_TCPIP_RECEIVE_SLOW_PATH TCPIP_RECEIVE_SLOW_PATH;
		case 1206: [property.ETLSummary = this.ToString] TCPIP_TCPIP_SEND_SLOW_PATH TCPIP_SEND_SLOW_PATH;
		case 1207: [property.ETLSummary = this.ToString] TCPIP_TCP_WSD_INITIALIZATION_ERROR TCP_WSD_INITIALIZATION_ERROR;
		case 1208: [property.ETLSummary = this.ToString] TCPIP_TCP_WSD_INITIALIZATION_INFORMATION TCP_WSD_INITIALIZATION_INFORMATION;
		case 1209: [property.ETLSummary = this.ToString] TCPIP_TCP_WSD_WS_RESTRICTED_PROFILE TCP_WSD_WS_RESTRICTED_PROFILE;
		case 1210: [property.ETLSummary = this.ToString] TCPIP_TCP_WSD_WS_RESTRICTED_DESTINATION TCP_WSD_WS_RESTRICTED_DESTINATION;
		case 1211: [property.ETLSummary = this.ToString] TCPIP_TCP_WSD_CACHE_ENTRY_STATE_CHANGE TCP_WSD_CACHE_ENTRY_STATE_CHANGE;
		case 1212: [property.ETLSummary = this.ToString] TCPIP_TCP_WSD_PROFILE_STATE_CHANGE TCP_WSD_PROFILE_STATE_CHANGE;
		case 1213: [property.ETLSummary = this.ToString] TCPIP_TCP_WSD_STATE_CHANGE TCP_WSD_STATE_CHANGE;
		case 1214: [property.ETLSummary = this.ToString] TCPIP_TCPIP_TRANSPORT_PACKET_DROPS TCPIP_TRANSPORT_PACKET_DROPS;
		case 1215: [property.ETLSummary = this.ToString] TCPIP_TCPIP_NETWORK_PACKET_DROPS TCPIP_NETWORK_PACKET_DROPS;
		case 1216: [property.ETLSummary = this.ToString] TCPIP_TCP_MPP_NPP_EVALUATION TCP_MPP_NPP_EVALUATION;
		case 1217: [property.ETLSummary = this.ToString] TCPIP_TCP_MPP_START_EPISODE TCP_MPP_START_EPISODE;
		case 1218: [property.ETLSummary = this.ToString] TCPIP_TCP_MPP_STOP_EPISODE TCP_MPP_STOP_EPISODE;
		case 1219: [property.ETLSummary = this.ToString] TCPIP_TCP_MPP_START_EPOCH TCP_MPP_START_EPOCH;
		case 1220: [property.ETLSummary = this.ToString] TCPIP_TCP_MPP_STOP_EPOCH TCP_MPP_STOP_EPOCH;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table TCPIP_TCPIP_PROPERTY_ValueMap(value)
{
	switch(value)
	{
		case 0: "Disabled";
		case 1: "Enabled";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_BOOLEAN_ValueMap(value)
{
	switch(value)
	{
		case 0: "FALSE";
		case 1: "TRUE";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_Protocol_ValueMap(value)
{
	switch(value)
	{
		case 4: " ";
		case 6: "(Ignore IPv4 address), IPv6 address =";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_Transport_Protocol_ValueMap(value)
{
	switch(value)
	{
		case 0: "Unknown (Header corrupt / not parsed)";
		case 1: "ICMP";
		case 2: "IGMP";
		case 6: "TCP";
		case 17: "UDP";
		case 43: "ROUTING";
		case 44: "FRAGMENT";
		case 47: "GRE";
		case 50: "ESP";
		case 51: "AH";
		case 58: "ICMPV6";
		case 256: "Unknown";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_IP_IF_STATUS_ValueMap(value)
{
	switch(value)
	{
		case 1: "Operational";
		case 2: "Unoperational";
		case 4: "Unknown";
		case 5: "Dormant";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(value)
{
	switch(value)
	{
		case 2: "IPV4";
		case 23: "IPV6";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCP_CONNECTION_STATE_ValueMap(value)
{
	switch(value)
	{
		case 0: "ClosedState";
		case 1: "ListenState";
		case 2: "SynSentState";
		case 3: "SynRcvdState";
		case 4: "EstablishedState";
		case 5: "FinWait1State";
		case 6: "FinWait2State";
		case 7: "CloseWaitState";
		case 8: "ClosingState";
		case 9: "LastAckState";
		case 10: "TimeWaitState";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCP_CONNECTION_OFFLOAD_STATE_ValueMap(value)
{
	switch(value)
	{
		case 0: "TcpConnectionOffloadStateInHost";
		case 2: "TcpConnectionOffloadStateOffloaded";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCP_TIMER_TYPE_ValueMap(value)
{
	switch(value)
	{
		case 0: "RetransmitTimer";
		case 1: "ConnectTimer";
		case 2: "DelAckTimer";
		case 3: "PushTimer";
		case 4: "KeepAliveTimer";
		case 5: "DisconnectTimer";
		case 6: "SwsTimer";
		case 7: "ReassemblyRateTimer";
		case 8: "SynOrRstValidationTimer";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCP_OPTION_TYPE_ValueMap(value)
{
	switch(value)
	{
		case 0: "TCP_OFFLOAD_NO_PREFERENCE";
		case 1: "TCP_OFFLOAD_NOT_PREFERRED";
		case 2: "TCP_OFFLOAD_PREFERRED";
		case 3: "TCP_KEEPALIVE";
		case 4: "TCP_MAXSEG";
		case 5: "TCP_MAXRT";
		case 6: "TCP_STDURG";
		case 7: "TCP_NOURG";
		case 8: "TCP_ATMARK";
		case 9: "TCP_NOSYNRETRIES";
		case 10: "TCP_TIMESTAMPS";
		case 11: "TCP_OFFLOAD_PREFERENCE";
		case 12: "TCP_CONGESTION_ALGORITHM";
		case 13: "TCP_DELAY_FIN_ACK";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCP_SO_OPTION_TYPE_ValueMap(value)
{
	switch(value)
	{
		case 1: "SO_DEBUG";
		case 2: "SO_ACCEPTCONN";
		case 4: "SO_REUSEADDR";
		case 8: "SO_KEEPALIVE";
		case 16: "SO_DONTROUTE";
		case 32: "SO_BROADCAST";
		case 64: "SO_USELOOPBACK";
		case 128: "SO_LINGER";
		case 256: "SO_OOBINLINE";
		case 4097: "SO_SNDBUF";
		case 4098: "SO_RCVBUF";
		case 12290: "SO_CONDITIONAL_ACCEPT";
		case 12291: "SO_PAUSE_ACCEPT";
		case 12292: "SO_COMPARTMENT_ID";
		case 12293: "SO_RANDOMIZE_PORT";
		case 12294: "SO_PORT_SCALABILITY";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_IP_DAD_STATE_ValueMap(value)
{
	switch(value)
	{
		case 0: "NldsInvalid";
		case 1: "NldsTentative";
		case 2: "NldsDuplicate";
		case 3: "NldsDeprecated";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_TCP_DELIVERY_STATE_ValueMap(value)
{
	switch(value)
	{
		case 0: "Indicate";
		case 1: "Pend";
		case 2: "Satisfy";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_IP_PHYSICALMEDIUM_TYPE_ValueMap(value)
{
	switch(value)
	{
		case 0: "NdisPhysicalMediumUnspecified";
		case 1: "NdisPhysicalMediumWirelessLan";
		case 2: "NdisPhysicalMediumCableModem";
		case 3: "NdisPhysicalMediumPhoneLine";
		case 5: "NdisPhysicalMediumDSL";
		case 7: "NdisPhysicalMedium1394";
		case 8: "NdisPhysicalMediumWirelessWan";
		case 9: "NdisPhysicalMediumNative802_11";
		case 10: "NdisPhysicalMediumBluetooth";
		case 11: "NdisPhysicalMediumInfiniband";
		case 12: "NdisPhysicalMediumWiMax";
		case 14: "NdisPhysicalMedium802_3";
		case 15: "NdisPhysicalMedium802_5";
		case 16: "NdisPhysicalMediumIrda";
		case 17: "NdisPhysicalMediumWiredWAN";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_SLOW_PATH_REASON_ValueMap(value)
{
	switch(value)
	{
		case 0: "IP checksum offload not computed";
		case 1: "TCP checksum offload not computed";
		case 2: "UDP checksum offload not computed";
		case 3: "Header not aligned on 4-byte boundary";
		case 4: "IP fragmentation";
		case 5: "Source address is not unicast";
		case 6: "Destination address is not unicast";
		case 7: "Ethernet and IP header not contiguous";
		case 8: "IP options present";
		case 9: "ESP over UDP";
		case 10: "Lack contiguous space for upper layer headers";
		case 11: "WFP filters present";
		case 12: "Nexthop is unavailable";
		case 13: "Path has been invalidated due to policy change";
		case 14: "DHCP assigned IP address' promiscuous count is non-zero";
		case 15: "ECN codepoint has not been negotiated for this traffic";
		case 16: "Session state is not compatible";
		case 17: "Session state is not compatible";
		case 18: "Session state is not compatible";
		case 19: "Session state is not compatible";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCP_WSD_ValueMap(value)
{
	switch(value)
	{
		case 0: "Failed to allocate the WSD cache";
		case 1: "Failure initializing PnP work queue";
		case 2: "Failed to get persistent parameters";
		case 3: "Rejected persistent parameters";
		case 4: "qualified profile";
		case 5: "qualified destination";
		case 6: "sample collection completion";
		case 7: "idle time expiration";
		case 8: "allocation";
		case 9: "new sample request";
		case 10: "configuration change";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCP_WSD_CACHE_ENTRY_STATE_ValueMap(value)
{
	switch(value)
	{
		case 0: "Idle";
		case 1: "ProbingWs";
		case 2: "ProbeWait";
		case 3: "ProbingWithoutWs";
		case 4: "RecordWait";
		case 5: "EreQualified";
		case 6: "Qualified";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_TRANSPORT_PACKET_DROP_REASON_ValueMap(value)
{
	switch(value)
	{
		case 1: "Destination is multicast";
		case 2: "Header is invalid";
		case 3: "Checksum is invalid";
		case 4: "Transport endpoint was not found";
		case 5: "Connected path error";
		case 6: "Session state error";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table TCPIP_TCPIP_NETWORK_PACKET_DROP_REASON_ValueMap(value)
{
	switch(value)
	{
		case 1: "Bad source address";
		case 2: "Not locally destined";
		case 3: "Protocol unreachable";
		case 4: "Port unreachable";
		case 5: "Bad length";
		case 6: "Malformed Header";
		case 7: "No route available";
		case 8: "Beyond scope";
		case 9: "Inspection drop";
		case 10: "Too many decapsulations";
		case 11: "Administratively prohibited";
		case 128: "Hop limit exceeded";
		case 129: "Address unreachable";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct TCPIP_TCP_ENDPOINT_CREATION_EVENT = FormatString("TCP: endpoint %s (Family=%s, PID=%s) created with status = %s.", Endpoint.ToString, AddressFamily.ToString, Pid.ToString, Status.ToString)
{
	NTSTATUS Status;
	EtlPtr Endpoint;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
	UINT32 Pid;
}
Struct TCPIP_TCP_REQUEST_CONNECT_EVENT = FormatString("TCP: Tcb %s (local=%s remote=%s) requested to connect.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	EtlPtr Tcb;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 NewState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 RexmitCount;
}
Struct TCPIP_TCP_INSPECT_CONNECT_COMPLETE_EVENT = FormatString("TCP: Inspect Connect has been completed on Tcb %s with status = %s.", Tcb.ToString, Status.ToString)
{
	EtlPtr Tcb;
	NTSTATUS Status;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_TCB_SYN_SEND_EVENT = FormatString("TCP: Tcb %s is going to output SYN with ISN = %s, RcvWnd = %s, RcvWndScale = %s.", Tcb.ToString, ISN.ToString, RcvWnd.ToString, RcvWndScale.ToString)
{
	EtlPtr Tcb;
	UINT32 ISN;
	UINT32 RcvWnd;
	UINT8 RcvWndScale;
}
Struct TCPIP_TCP_BIND_ENDPOINT_RESOLUTION_FAILURE = FormatString("TCP: endpoint bind failed: address %s cannot be resolved (%s).", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	NTSTATUS Status;
}
Struct TCPIP_TCP_BIND_ENDPOINT_PORT_FAILURE = FormatString("TCP: endpoint (sockaddr=%s) bind failed: port-acquisition status = %s.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	NTSTATUS Status;
}
Struct TCPIP_TCP_BIND_ENDPOINT_INSPECTION_FAILURE = FormatString("TCP: endpoint (sockaddr=%s) bind failed: inspection status = %s.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	NTSTATUS Status;
}
Struct TCPIP_TCP_BIND_ENDPOINT_COMPLETE = FormatString("TCP: endpoint (sockaddr=%s) bound.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	NTSTATUS Status;
}
Struct TCPIP_TCP_CLOSE_ENDPOINT = FormatString("TCP: endpoint (sockaddr=%s) closed.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	NTSTATUS Status;
}
Struct TCPIP_TCP_CREATE_ENDPOINT_AF_FAILURE = FormatString("TCP: endpoint (Family=%s PID=%s) create failed: address family not attached.", AddressFamily.ToString, ProcessId.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_CREATE_ENDPOINT_COMPARTMENT_FAILURE = FormatString("TCP: endpoint (Family=%s PID=%s) create failed: compartment %s not found.", AddressFamily.ToString, ProcessId.ToString, CompartmentId.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_CREATE_ENDPOINT_INSPECTION_FAILURE = FormatString("TCP: endpoint (Family=%s PID=%s) create failed: inspection status %s.", AddressFamily.ToString, ProcessId.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_CREATE_ENDPOINT_COMPLETE = FormatString("TCP: endpoint (Family=%s PID=%s) created.", AddressFamily.ToString, ProcessId.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_ACCEPT_LISTENER_ROUTE_LOOKUP_FAILURE = FormatString("TCP: listener (local=%s remote=%s) accept failed: Route lookup status = %s, TCB = %s.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, Status.ToString, Tcb.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_ACCEPT_LISTENER_INSERTION_FAILURE = FormatString("TCP: listener (local=%s remote=%s) accept failed: connection insertion. Duplicate TCB = %s.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, Tcb.ToString)
{
	EtlPtr Tcb;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 NewState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 RexmitCount;
}
Struct TCPIP_TCP_ACCEPT_LISTENER_REJECTED = FormatString("TCP: listener (local=%s remote=%s) accept failed: client rejection status = %s.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_ACCEPT_LISTENER_COMPLETE = FormatString("TCP: listener (local=%s remote=%s) accept completed. TCB = %s. PID = %s.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, Tcb.ToString, ProcessId.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_FAILED_AF = FormatString("TCP: connection %s (local=%s remote=%s PID=%s) connect failed: address family not attached.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, ProcessId.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_FAILED_COMPARTMENT = FormatString("TCP: connection %s (local=%s remote=%s PID=%s) connect failed: compartment %s not found.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, ProcessId.ToString, Compartment.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_FAILED_INSPECT = FormatString("TCP: connection %s (local=%s remote=%s PID=%s) connect failed: inspection status = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, ProcessId.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_FAILED_ROUTE = FormatString("TCP: connection %s (local=%s remote=%s) connect failed: route lookup status = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_SKIP_RATE_LIMIT = FormatString("TCP: Bypass rate limiting since flag is set on path %s (local=%s remote=%s) ", Path.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	EtlPtr Path;
}
Struct TCPIP_TCP_CONNECT_TCB_PASS_RATE_LIMIT = FormatString("TCP: Charge rate limiting quota and set rate limiting flag for path %s (local=%s remote=%s) ", Path.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	EtlPtr Path;
}
Struct TCPIP_TCP_CONNECT_TCB_CHECK_RATE_LIMIT = FormatString("TCP: connection %s (local=%s remote=%s) deferred.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_SECURITY_RATE_LIMIT = FormatString("TCP: %s rate-limiting paths %s backlogged connections.", ConnectionRateLimitDepth.ToString, ConnectionRateLimitBacklog.ToString)
{
	UINT32 SynAttacksDetected;
	UINT32 ReassemblyLimitViolations;
	UINT32 ConnectionRateLimitBacklog;
	UINT32 ConnectionRateLimitViolations;
	UINT32 LandAttackSegmentsDropped;
	UINT32 ConnectionRateLimitDepth;
}
Struct TCPIP_TCP_RATE_LIMIT_PATH_RELEASE = FormatString("TCP: Release and set rate limiting flag on path %s (local=%s remote=%s) ", Path.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	EtlPtr Path;
}
Struct TCPIP_TCP_CONNECT_TCB_RATE_LIMIT_RELEASE = FormatString("TCP: connection %s (local=%s remote=%s) released.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_RATE_LIMIT_PATH_CANCEL = FormatString("TCP: Clear rate limiting flag on path %s (local=%s remote=%s) since connection is cancelled.", Path.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	EtlPtr Path;
}
Struct TCPIP_TCP_CONNECT_TCB_CANCEL = FormatString("TCP: connection %s (local=%s remote=%s) connect failed: connection cancelled.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_FAIL_INSERTION = FormatString("TCP: connection (local=%s remote=%s) connect failed: connection insertion status = %s.", LocalAddressLength.ToString, RemoteAddressLength.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	EtlPtr Tcb;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 NewState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 RexmitCount;
}
Struct TCPIP_TCP_CONNECT_TCB_PROCEEDING = FormatString("TCP: connection %s (local=%s remote=%s) connect proceeding.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_RATE_LIMIT_CANCEL = FormatString("TCP: connection %s (local=%s remote=%s) released due to cancel.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_COMPLETE = FormatString("TCP: connection %s (local=%s remote=%s) connect completed. PID = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, ProcessId.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_FAILURE = FormatString("TCP: connection %s (local=%s remote=%s) connect attempt failed with status = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_FAIL_INSPECT_CONNECT_COMPLETE = FormatString("TCP: connection %s (local=%s remote=%s) connect failed: connect-complete inspect status = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_FAIL_SESSION_STATE = FormatString("TCP: ApplySynOptions, failed to create session state with status = %s, TCB = %s.", Status.ToString, Tcb.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_FAIL_DONT_FRAGMENT = FormatString("TCP: ApplySynOptions, failed to update DF with status = %s, TCB = %s.", Status.ToString, Tcb.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CLOSE_TCB_REQUEST = FormatString("TCP: connection %s (local=%s remote=%s) close issued.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_ABORT_TCB_REQUEST = FormatString("TCP: connection %s (local=%s remote=%s) abort issued.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_ABORT_TCB_COMPLETE = FormatString("TCP: connection %s (local=%s remote=%s) abort completed.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_DISCONNECT_TCB_INJECT_FAILED = FormatString("TCP: Injecting disconnect on a shutdown TCB failed. TCB = %s.", Tcb.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_DISCONNECT_TCB_REQUEST = FormatString("TCP: connection disconnect %s, length=%s.", Injected.ToString, Length.ToString)
{
	EtlPtr Length;
	UINT64 Timeout;
	UnicodeString Injected;
}
Struct TCPIP_TCP_DISCONNECT_TCB_COMPLETE = FormatString("TCP: connection %s (local=%s remote=%s) disconnect completed.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_SHUTDOWN_TCB = FormatString("TCP: connection %s (local=%s remote=%s) shutdown initiated (%s). PID = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, Status.ToString, ProcessId.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_TIMEOUT = FormatString("TCP: connection %s (local=%s remote=%s) connect failed: connect-request timeout expired.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_DISCONNECT_TCB_RTO_TIMEOUT = FormatString("TCP: connection %s (local=%s remote=%s) terminating: retransmission timeout expired.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_DISCONNECT_TCB_KEEPALIVE_TIMEOUT = FormatString("TCP: connection %s (local=%s remote=%s) terminating: keep-alive timeout expired.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_DISCONNECT_TCB_TIMEOUT = FormatString("TCP: connection %s (local=%s remote=%s) terminating: disconnect timeout expired.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_TCB_ESTATS_FAILED = FormatString("TCP: connection %s (local=%s remote=%s) connect failed: extended statistics status = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_CONNECT_FAILED_PORT_ACQUIRE = FormatString("TCP: connection %s (local=%s remote=%s) connect failed: port-acquisition status = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, Status.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_TCB_STATE_CHANGE = FormatString("TCP: connection %s transition from %s to %s, SndNxt = %s.", Tcb.ToString, OldState.ToString, NewState.ToString, SndNxt.ToString)
{
	UINT32 OldState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 NewState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 SndNxt;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_ENDPOINT_ACQUIRE_PORT_RESERVATION = FormatString("TCP: Process with PID = %s reserved %s ports starting at %s.", ProcessId.ToString, NumberOfPorts.ToString, StartPort.ToString)
{
	UINT32 ProcessId;
	NTSTATUS Status;
	UINT16 StartPort;
	UINT16 NumberOfPorts;
}
Struct TCPIP_TCP_ENDPOINT_FAILED_PORT_RESERVATION = FormatString("TCP: Process with PID = %s failed to reserve %s ports starting at %s with status = %s.", ProcessId.ToString, NumberOfPorts.ToString, StartPort.ToString, Status.ToString)
{
	UINT32 ProcessId;
	NTSTATUS Status;
	UINT16 StartPort;
	UINT16 NumberOfPorts;
}
Struct TCPIP_TCP_GLOBAL_PORT_RESERVATION = FormatString("TCP: Process with PID = %s completed global port reservation of %s ports starting at %s with status = %s.", ProcessId.ToString, NumberOfPorts.ToString, StartPort.ToString, Status.ToString)
{
	UINT32 ProcessId;
	NTSTATUS Status;
	UINT16 StartPort;
	UINT16 NumberOfPorts;
}
Struct TCPIP_TCP_SYN_ATTACK_ENTRY = FormatString("TCP: entering SYN attack resistance mode, Syn Attacks Detected = %s.", SynAttacksDetected.ToString)
{
	UINT32 SynAttacksDetected;
	UINT32 ReassemblyLimitViolations;
	UINT32 ConnectionRateLimitBacklog;
	UINT32 ConnectionRateLimitViolations;
	UINT32 LandAttackSegmentsDropped;
	UINT32 ConnectionRateLimitDepth;
}
Struct TCPIP_TCP_REASSEMBLY_LIMIT_VIOLATION = FormatString("TCP: reasembly rate-limiting violated %s times since boot.", ReassemblyLimitViolations.ToString)
{
	UINT32 SynAttacksDetected;
	UINT32 ReassemblyLimitViolations;
	UINT32 ConnectionRateLimitBacklog;
	UINT32 ConnectionRateLimitViolations;
	UINT32 LandAttackSegmentsDropped;
	UINT32 ConnectionRateLimitDepth;
}
Struct TCPIP_TCP_CONNECTION_RATE_LIMIT_VIOLATION = FormatString("TCP: connection rate-limiting violated %s times since boot.", ConnectionRateLimitViolations.ToString)
{
	UINT32 SynAttacksDetected;
	UINT32 ReassemblyLimitViolations;
	UINT32 ConnectionRateLimitBacklog;
	UINT32 ConnectionRateLimitViolations;
	UINT32 LandAttackSegmentsDropped;
	UINT32 ConnectionRateLimitDepth;
}
Struct TCPIP_TCP_LAND_ATTACK_SEGMENT_DROP = FormatString("TCP: land attack has dropped %s packets since boot.", LandAttackSegmentsDropped.ToString)
{
	UINT32 SynAttacksDetected;
	UINT32 ReassemblyLimitViolations;
	UINT32 ConnectionRateLimitBacklog;
	UINT32 ConnectionRateLimitViolations;
	UINT32 LandAttackSegmentsDropped;
	UINT32 ConnectionRateLimitDepth;
}
Struct TCPIP_TCP_ISB_BEGIN_THROTTLE = FormatString("TCP: low memory state detected. LowMemoryEvent =%s LowPagedPoolEvent = %s.", LowMemoryEvent.ToString, LowPagedPoolEvent.ToString)
{
	UINT32 HighMemoryEvent;
	UINT32 HighPagedPoolEvent;
	UINT32 LowMemoryEvent;
	UINT32 LowPagedPoolEvent;
}
Struct TCPIP_TCP_ISB_END_THROTTLE = FormatString("TCP: leaving low memory state. HighMemoryEvent = %s HighPagedPoolEvent = %s.", HighMemoryEvent.ToString, HighPagedPoolEvent.ToString)
{
	UINT32 HighMemoryEvent;
	UINT32 HighPagedPoolEvent;
	UINT32 LowMemoryEvent;
	UINT32 LowPagedPoolEvent;
}
Struct TCPIP_TCP_ATTACH_AF = FormatString("TCP: address family %s added to interface %s.", AddressFamily.ToString, InterfaceIndex.ToString)
{
	UINT32 InterfaceIndex;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_DETACH_AF = FormatString("TCP: address family %s removed from interface %s.", AddressFamily.ToString, InterfaceIndex.ToString)
{
	UINT32 InterfaceIndex;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_SYN_ATTACK_EXIT = FormatString("TCP: leaving SYN attack resistance mode, Syn Attacks Detected = %s.", SynAttacksDetected.ToString)
{
	UINT32 SynAttacksDetected;
	UINT32 ReassemblyLimitViolations;
	UINT32 ConnectionRateLimitBacklog;
	UINT32 ConnectionRateLimitViolations;
	UINT32 LandAttackSegmentsDropped;
	UINT32 ConnectionRateLimitDepth;
}
Struct TCPIP_TCP_TCB_TIMER_START = FormatString("TCP: Connection %s %s timer started. Scheduled to expire in %s ms.", Tcb.ToString, TimerType.ToString, WaitTimeMilliseconds.ToString)
{
	EtlPtr Tcb;
	UINT32 TimerType = TCPIP_TCP_TIMER_TYPE_ValueMap(this);
	UINT32 WaitTimeMilliseconds;
}
Struct TCPIP_TCP_TCB_STOP_TIMER = FormatString("TCP: Connection %s stopping %s timer. ", Tcb.ToString, TimerType.ToString)
{
	EtlPtr Tcb;
	UINT32 TimerType = TCPIP_TCP_TIMER_TYPE_ValueMap(this);
	UINT32 WaitTimeMilliseconds;
}
Struct TCPIP_TCP_TCB_EXPIRE_TIMER = FormatString("TCP: Connection %s %s timer has expired.", Tcb.ToString, TimerType.ToString)
{
	EtlPtr Tcb;
	UINT32 TimerType = TCPIP_TCP_TIMER_TYPE_ValueMap(this);
	UINT32 WaitTimeMilliseconds;
}
Struct TCPIP_TCP_TCB_CHANGE_ISB = FormatString("TCP: ISB changed to %s. CWnd = %s SndWnd = %s SendAvailable = %s SSThresh = %s.", IsbSize.ToString, Cwnd.ToString, SndWnd.ToString, SendAvailable.ToString, SSThresh.ToString)
{
	UINT32 IsbSize;
	UINT32 Cwnd;
	UINT32 SndWnd;
	UINT32 SendAvailable;
	UINT32 SSThresh;
}
Struct TCPIP_TCP_RSS_TABLE_CHANGE = FormatString("TCP: moving RSS indirection table index %s from processor %s to processor %s.", TableEntry.ToString, SourceProcessor.ToString, DestinationProcessor.ToString)
{
	UINT32 SourceProcessor;
	UINT32 SourceActivity;
	UINT32 DestinationProcessor;
	UINT32 DestinationActivity;
	UINT32 PartitionMovesRemaining;
	UINT8 TableEntry;
}
Struct TCPIP_TCP_DATA_TRANSFER_TIMEOUT = FormatString("TCP: connection %s: Timeout Event updated cwnd = %s and updated ssthresh = %s.", Tcb.ToString, Cwnd.ToString, SSThresh.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_DATA_TRANSFER_RTT_SAMPLE = FormatString("TCP: connection %s:  Rtt sample recorded %s.", Tcb.ToString, RttSample.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_DATA_TRANSFER_CUM_ACK = FormatString("TCP: connection %s: Cumulative ACK updated cwnd = %s.", Tcb.ToString, Cwnd.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_DATA_TRANSFER_DUP_ACK = FormatString("TCP: connection %s: Duplicate ACK updated cwnd = %s and updated ssthresh = %s.", Tcb.ToString, Cwnd.ToString, SSThresh.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_DATA_TRANSFER_SEND = FormatString("TCP: connection %s: Sent data with number of bytes = %s and Sequence number = %s.", Tcb.ToString, NumBytes.ToString, SeqNo.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_DATA_TRANSFER_RECEIVE = FormatString("TCP: connection %s: Received data with number of bytes = %s. ThSeq = %s.", Tcb.ToString, NumBytes.ToString, SeqNo.ToString)
{
	EtlPtr Tcb;
	UINT32 NumBytes;
	UINT32 SeqNo;
}
Struct TCPIP_TCP_DATA_TRANSFER_ECN = FormatString("TCP: connection %s: ECN Echo updated cwnd = %s and updated ssthresh = %s. SndUna = %s, Mss = %s, ThAck = %s.", Tcb.ToString, Cwnd.ToString, SSThresh.ToString, SndUna.ToString, Mss.ToString, ThAck.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 SndUna;
	UINT32 Mss;
	UINT32 ThAck;
	UINT32 DWnd;
	UINT32 BaseRtt;
}
Struct TCPIP_TCP_DATA_TRANSFER_SPURIOUS_TIMEOUT = FormatString("TCP: connection %s: Spurious timeout with SndUna = %s.", Tcb.ToString, SndUna.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_DATA_TRANSFER_RETRANSMIT_ROUND = FormatString("TCP: connection %s: Send Retransmit round with SndUna = %s, Round = %s, SRTT = %s, RTO = %s.", Tcb.ToString, SeqNo.ToString, Round.ToString, SRTT.ToString, RTO.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_CTCP_DATA_TRANSFER_TIMEOUT = FormatString("TCP: CTCP DataTransferTimeout event. Connection %s, CWnd = %s, SsThresh = %s.", Tcb.ToString, Cwnd.ToString, SSThresh.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_CTCP_DATA_TRANSFER_CUM_ACK = FormatString("TCP: CTCP Cumulative Ack event Connection %s, sequence = %s, CWnd = %s, DWnd = %s, BaseRtt = %s.", Tcb.ToString, SeqNo.ToString, Cwnd.ToString, DWnd.ToString, BaseRtt.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_CTCP_DATA_TRANSFER_DUP_ACK = FormatString("TCP: CTCP Duplicate Ack event. Connection %s, sequence = %s, SndUna = %s, CWnd = %s, DWnd = %s, BaseRtt = %s, DupAckCount = %s.", Tcb.ToString, SeqNo.ToString, SndUna.ToString, Cwnd.ToString, DWnd.ToString, BaseRtt.ToString, DupAckCount.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_CTCP_DATA_TRANSFER_SEND = FormatString("TCP: CTCP Send event. Connection %s, sequence = %s, length = %s.", Tcb.ToString, SeqNo.ToString, NumBytes.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_CTCP_DATA_TRANSFER_ECN = FormatString("TCP: CTCP ECN event. Connection %s, CWnd %s, SndUna = %s, Mss = %s, DWnd = %s, BaseRtt = %s.", Tcb.ToString, Cwnd.ToString, SndUna.ToString, Mss.ToString, DWnd.ToString, BaseRtt.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 SndUna;
	UINT32 Mss;
	UINT32 ThAck;
	UINT32 DWnd;
	UINT32 BaseRtt;
}
Struct TCPIP_TCP_CTCP_DATA_TRANSFER_SPURIOUS_TIMEOUT = FormatString("TCP: CTCP Spurious timeout event. Connection %s, CWnd = %s, SsThresh = %s.", Tcb.ToString, Cwnd.ToString, SSThresh.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_LOSS_RECOVERY_ENTRY = FormatString("TCP: connection %s: Entered loss recovery phase with SndUna = %s and SndMax = %s.", Tcb.ToString, SndUna.ToString, SndMax.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
}
Struct TCPIP_TCP_LOSS_RECOVERY_EXIT = FormatString("TCP: connection %s: Leaving loss recovery phase with SndUna = %s and SndMax = %s.", Tcb.ToString, SndUna.ToString, SndMax.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
}
Struct TCPIP_TCP_LOSS_RECOVERY_SACK_ENTRY = FormatString("TCP: connection %s entering SACK mode with SndUna = %s.", Tcb.ToString, SndUna.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
	UnicodeString Reason;
	UINT32 IsSack = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
}
Struct TCPIP_TCP_LOSS_RECOVERY_SACK_EXIT = FormatString("TCP: connection %s leaving SACK mode with SndUna = %s.", Tcb.ToString, SndUna.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
	UnicodeString Reason;
	UINT32 IsSack = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
}
Struct TCPIP_TCP_SLOW_START_TO_CONG_AVOIDANCE = FormatString("TCP: connection %s entering Congestion Avoidance Phase with cwnd = %s and ssthresh = %s.", Tcb.ToString, Cwnd.ToString, SSThresh.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_BLACKHOLE_DETECTION_ENTRY = FormatString("TCP: connection %s entered BH, BH MSS %s, original MSS %s.", Tcb.ToString, BHMSS.ToString, OriginalMSS.ToString)
{
	EtlPtr Tcb;
	UINT32 BHMSS;
	UINT32 OriginalMSS;
	UnicodeString TraceString;
}
Struct TCPIP_TCP_BLACKHOLE_DETECTION_EXIT = FormatString("TCP: connection %s Exiting BH due to %s, BH mss %s, Original MSS %s.", Tcb.ToString, TraceString.ToString, BHMSS.ToString, OriginalMSS.ToString)
{
	EtlPtr Tcb;
	UINT32 BHMSS;
	UINT32 OriginalMSS;
	UnicodeString TraceString;
}
Struct TCPIP_TCP_BLACKHOLE_DETECTION_FAILED = FormatString("TCP: connection %s not entering BH due to %s.", Tcb.ToString, TraceString.ToString)
{
	EtlPtr Tcb;
	UINT32 BHMSS;
	UINT32 OriginalMSS;
	UnicodeString TraceString;
}
Struct TCPIP_TCP_SPURIOUS_RTO_DETECTION_BEGIN = FormatString("TCP: connection %s spurious RTO detection initiated at %s.", Tcb.ToString, SndUna.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_SPURIOUS_RTO_DETECTION_END = FormatString("TCP: connection %s spurious RTO detection terminated at %s.", Tcb.ToString, SndUna.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_CONNECT_TCB_FAILED_ACTIVE_CONNECT = FormatString("TCP: active connect failed (family=%s) connect-complete inspection failed: status = %s.", Status.ToString, AddressFamily.ToString)
{
	EtlPtr Tcb;
	NTSTATUS Status;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_RELEASE_INDICATION = FormatString("TCP: TcpReleaseIndicationList: Nbl = %s.", NBL.ToString)
{
	EtlPtr NBL;
}
Struct TCPIP_TCP_APP_SEND_BUFFER_SIZE = FormatString("TCP: connection %s posted an average of %s bytes per send.", Tcb.ToString, NumBytes.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_AUTOTUNING_BEGIN = FormatString("TCP: connection (local=%s remote=%s) starting receive window auto-tuning.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 BufferSize;
}
Struct TCPIP_TCP_AUTOTUNING_END = FormatString("TCP: connection (local=%s remote=%s) ending receive window auto-tuning.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 BufferSize;
}
Struct TCPIP_TCP_AUTOTUNING_FAILED_RTT_ESTIMATION = FormatString("TCP: connection (local=%s remote=%s) failed to enter auto-tuning because fine-grained RTT estimation could not be started.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 BufferSize;
}
Struct TCPIP_TCP_AUTOTUNING_FAILED_BANDWIDTH_ESTIMATION = FormatString("TCP: connection (local=%s remote=%s) failed to enter auto-tuning because receiver bandwidth estimation could not be started.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 BufferSize;
}
Struct TCPIP_TCP_AUTOTUNING_FAILED_ALLOCATION_FAILURE = FormatString("TCP: connection (local=%s remote=%s) failed to enter auto-tuning because of receive window tuning allocation failure.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 BufferSize;
}
Struct TCPIP_TCP_AUTOTUNING_CHANGE_RCV_BUFFER_SIZE = FormatString("TCP: connection (local=%s remote=%s) auto-tuner adjusted receive buffer size to %s bytes.", IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, BufferSize.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 BufferSize;
}
Struct TCPIP_TCP_RTT_RESILIENCY_DETECTION = FormatString("TCP: connection %s: Rtt resiliency detection complete with Rtt sample = %s and new SRTT = %s.", Tcb.ToString, RttSample.ToString, SRTT.ToString)
{
	EtlPtr Tcb;
	UINT32 Cwnd;
	UINT32 SSThresh;
	UINT32 RttSample;
	UINT32 NumBytes;
	UINT32 SeqNo;
	UINT32 SndUna;
	UINT32 Round;
	UINT32 SRTT;
	UINT32 RTO;
	UINT32 DWnd;
	UINT32 BaseRtt;
	UINT32 DupAckCount;
}
Struct TCPIP_TCP_CONNECTION_OFFLOAD_STATE_CHANGE = FormatString("TCP: connection %s: Connection State = %s, Offload State = %s. SndNxt = %s, RcvNxt = %s. NdisStatus = %s.", Tcb.ToString, TcbState.ToString, OcbState.ToString, SndNxt.ToString, RcvNxt.ToString, Status.ToString)
{
	UINT32 TcbState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 OcbState = TCPIP_TCP_CONNECTION_OFFLOAD_STATE_ValueMap(this);
	UINT32 SndNxt;
	UINT32 RcvNxt;
	EtlPtr Tcb;
	NTSTATUS Status;
}
Struct TCPIP_TCP_SWS_AVOIDANCE_BEGIN = FormatString("TCP: SWS avoidance began on connection %s. Timer set for %s ms. BytesToSend = %s, SendAvailable = %s, Cwnd = %s, MaxSndWnd = %s.", Tcb.ToString, TimerValue.ToString, BytesToSend.ToString, SendAvailable.ToString, Cwnd.ToString, MaxSndWnd.ToString)
{
	EtlPtr Tcb;
	UINT32 TimerValue;
	EtlPtr BytesToSend;
	UINT32 SendAvailable;
	UINT32 Cwnd;
	EtlPtr MaxSndWnd;
}
Struct TCPIP_TCP_SWS_AVOIDANCE_END = FormatString("TCP: SWS avoidance ended on connection %s.", Tcb.ToString)
{
	EtlPtr Tcb;
	UINT32 TimerValue;
	EtlPtr BytesToSend;
	UINT32 SendAvailable;
	UINT32 Cwnd;
	EtlPtr MaxSndWnd;
}
Struct TCPIP_TCP_ZERO_WINDOW_PROBING_BEGIN = FormatString("TCP: connection %s send: Beginning zero-window probing with SndUna = %s.", Tcb.ToString, SndUna.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
}
Struct TCPIP_TCP_ZERO_WINDOW_PROBING_END = FormatString("TCP: connection %s send: Leaving zero-window probing with SndUna = %s.", Tcb.ToString, SndUna.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
}
Struct TCPIP_TCP_SET_TCP_OPTION = FormatString("TCP: Option %s is going to be set for connection %s.", OptionType.ToString, Tcb.ToString)
{
	EtlPtr Tcb;
	UINT32 OptionType = TCPIP_TCP_OPTION_TYPE_ValueMap(this);
	UINT32 SoOptionType = TCPIP_TCP_SO_OPTION_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_SET_TCP_SO_OPTION = FormatString("TCP: Socket Option %s is going to be set for connection %s.", SoOptionType.ToString, Tcb.ToString)
{
	EtlPtr Tcb;
	UINT32 OptionType = TCPIP_TCP_OPTION_TYPE_ValueMap(this);
	UINT32 SoOptionType = TCPIP_TCP_SO_OPTION_TYPE_ValueMap(this);
}
Struct TCPIP_TCPIP_MEDIA_DISCONNECT = FormatString("IP: Disconnecting interface %s, trace = %s.", InterfaceIndex.ToString, TraceString.ToString)
{
	UINT32 InterfaceIndex;
	AsciiString TraceString;
}
Struct TCPIP_TCPIP_MODULE_STARTED = FormatString("TCPIP: Module %s started.", ModuleNameString.ToString)
{
	UnicodeString ModuleNameString;
}
Struct TCPIP_TCPIP_MODULE_STOPPED = FormatString("TCPIP: Module %s stopped.", ModuleNameString.ToString)
{
	UnicodeString ModuleNameString;
}
Struct TCPIP_TCPIP_MEMORY_FAILURES = FormatString("TCPIP: Failure allocating %s.", AllocationObjectString.ToString)
{
	UnicodeString AllocationObjectString;
}
Struct TCPIP_TCP_GLOBAL_PARAMETERS = FormatString("TCP: Global parameters updated for Address Family %s: EnablePMtuDiscovery = %s, UseRfc1122UrgentPointer = %s, DisableTaskOffload = %s, DisableTcpChimneyOffload = %s, DisableRss = %s, EnablePMtuBHDetect = %s, EcnCapability = %s, MaxDataRetransmissions = %s, KeepAliveTime = %s, KeepAliveInterval = %s, TimedWaitDelay = %s, SillyWindowTimeout = %s, FinWait2Timeout = %s, CongestionAlgorithm = %s, UseRfc1323Timestamps = %s, AutoTuningLevelLocal = %s, AutoTuningLevelGroupPolicy = %s.", AddressFamily.ToString, EnablePMTUDiscovery.ToString, TcpUseRFC1122UrgentPointer.ToString, DisableTaskOffload.ToString, EnablePMTUBHDetect.ToString, DisableTcpChimneyOffload.ToString, DisableRss.ToString, EcnCapability.ToString, TcpMaxDataRetransmissions.ToString, KeepAliveTime.ToString, KeepAliveInterval.ToString, TcpTimedWaitDelay.ToString, SillyWindowTimeout.ToString, TcpFinWait2Delay.ToString, CongestionAlgorithm.ToString, Tcp1323Opts.ToString, AutoTuningLevelLocal.ToString, AutoTuningLevelGroupPolicy.ToString)
{
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
	UINT8 EnablePMTUDiscovery;
	UINT8 TcpUseRFC1122UrgentPointer;
	UINT8 DisableTaskOffload;
	UINT8 EnablePMTUBHDetect;
	UINT8 DisableTcpChimneyOffload;
	UINT8 DisableRss;
	UINT8 EcnCapability;
	UINT8 TcpMaxDataRetransmissions;
	UINT32 KeepAliveTime;
	UINT32 KeepAliveInterval;
	UINT32 TcpTimedWaitDelay;
	UINT32 SillyWindowTimeout;
	UINT32 TcpFinWait2Delay;
	UINT8 CongestionAlgorithm;
	UINT8 Tcp1323Opts;
	UINT32 AutoTuningLevelLocal;
	UINT32 AutoTuningLevelGroupPolicy;
}
Struct TCPIP_TCP_LSO = FormatString("TCP: Connection %s Large Send Offload, Bytes in segment = %s and Bytes remaining = %s.", Tcb.ToString, BytesInSegment.ToString, BytesRemaining.ToString)
{
	EtlPtr Tcb;
	UINT32 BytesInSegment;
	UINT32 BytesRemaining;
}
Struct TCPIP_TCP_CONNECTION_OFFLOAD_STATUS = FormatString("TCP: Connection %s status changed to %s.", Tcb.ToString, Status.ToString)
{
	EtlPtr Tcb;
	NTSTATUS Status;
	UINT32 Interface;
	UINT32 PMax;
}
Struct TCPIP_TCP_CONNECTION_OFFLOAD_PMAX = FormatString("TCP: Connection %s status = %s, Interface = %s, PMax = %s.", Tcb.ToString, Status.ToString, Interface.ToString, PMax.ToString)
{
	EtlPtr Tcb;
	NTSTATUS Status;
	UINT32 Interface;
	UINT32 PMax;
}
Struct TCPIP_IP_DAD_SUCCESSFUL = FormatString("IP: DAD successful for IP address = %s %s %s on interface = %s, protocol = %s.", IPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6Address) ? "Null" : IPv6Address.ToString, Interface.ToString, Protocol.ToString)
{
	UINT32 Interface;
	AsciiString Protocol;
	UINT32 DadState = TCPIP_TCPIP_IP_DAD_STATE_ValueMap(this);
	UINT32 DlAddrLength;
	BLOB(DlAddrLength) DLAddress;
	UINT32 IpAddrLength;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_IP_DAD_FAILED = FormatString("IP: DAD failed for IP address = %s %s %s on interface = %s, protocol = %s, DL address of packet = %s.", IPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6Address) ? "Null" : IPv6Address.ToString, Interface.ToString, Protocol.ToString, DLAddress.ToString)
{
	UINT32 Interface;
	AsciiString Protocol;
	UINT32 DadState = TCPIP_TCPIP_IP_DAD_STATE_ValueMap(this);
	UINT32 DlAddrLength;
	BLOB(DlAddrLength) DLAddress;
	UINT32 IpAddrLength;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_IP_DAD_STARTED = FormatString("IP: DAD started for IP address = %s %s %s on interface = %s, protocol = %s.", IPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6Address) ? "Null" : IPv6Address.ToString, Interface.ToString, Protocol.ToString)
{
	UINT32 Interface;
	AsciiString Protocol;
	UINT32 DadState = TCPIP_TCPIP_IP_DAD_STATE_ValueMap(this);
	UINT32 DlAddrLength;
	BLOB(DlAddrLength) DLAddress;
	UINT32 IpAddrLength;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_TCP_LISTENER_ACTIVATION_FAILED_AF = FormatString("TCP: listener (sockaddr=%s PID=%s) activation failed: address family not attached.", IsValueNone(SocketAddress) ? "Null" : SocketAddress.ToString, ProcessId.ToString)
{
	EtlPtr Listener;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE SocketAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_LISTENER_ACTIVATION_FAILED_COMPARTMENT = FormatString("TCP: listener %s (family=%s PID=%s) activation failed: compartment %s not found. Status=%s.", Listener.ToString, AddressFamily.ToString, ProcessId.ToString, CompartmentId.ToString, Status.ToString)
{
	EtlPtr Listener;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE SocketAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_LISTENER_ACTIVATION_FAILED_INSPECTION1 = FormatString("TCP: listener %s (family=%s PID=%s) activation failed: inspection status=%s.", Listener.ToString, AddressFamily.ToString, ProcessId.ToString, Status.ToString)
{
	EtlPtr Listener;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE SocketAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_LISTENER_ACTIVATION_FAILED_INSPECTION2 = FormatString("TCP: listener %s (sockaddr=%s) activation failed: inspection status=%s.", Listener.ToString, IsValueNone(SocketAddress) ? "Null" : SocketAddress.ToString, Status.ToString)
{
	EtlPtr Listener;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE SocketAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_LISTENER_BIND_FAILED_RESOLUTION = FormatString("TCP: listener %s (sockaddr=%s) bind failed: port-acquisition status=%s.", Listener.ToString, IsValueNone(SocketAddress) ? "Null" : SocketAddress.ToString, Status.ToString)
{
	EtlPtr Listener;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE SocketAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_LISTENER_BIND_FAILED_PORT = FormatString("TCP: listener %s (family=%s PID=%s) bind failed: address %s cannot be resolved (Status=%s).", Listener.ToString, AddressFamily.ToString, ProcessId.ToString, IsValueNone(SocketAddress) ? "Null" : SocketAddress.ToString, Status.ToString)
{
	EtlPtr Listener;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE SocketAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_LISTENER_ACTIVATED = FormatString("TCP: listener %s (sockaddr=%s) activated.", Listener.ToString, IsValueNone(SocketAddress) ? "Null" : SocketAddress.ToString)
{
	EtlPtr Listener;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE SocketAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_LISTENER_UNBOUND = FormatString("TCP: listener %s (sockaddr=%s) unbound.", Listener.ToString, IsValueNone(SocketAddress) ? "Null" : SocketAddress.ToString)
{
	EtlPtr Listener;
	UINT32 AddressLength;
	switch
	{
		case AddressLength > 0 :
			ETL_SOCKADDR_STORAGE SocketAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 CompartmentId;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_IP_ADDRESS_ADDED = FormatString("IP: IP address = %s %s %s added on interface = %s, Protocol = %s.", IPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6Address) ? "Null" : IPv6Address.ToString, Interface.ToString, Protocol.ToString)
{
	UINT32 Interface;
	AsciiString Protocol;
	UINT32 DadState = TCPIP_TCPIP_IP_DAD_STATE_ValueMap(this);
	UINT32 DlAddrLength;
	BLOB(DlAddrLength) DLAddress;
	UINT32 IpAddrLength;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_IP_ADDRESS_DELETED = FormatString("IP: IP address = %s %s %s deleted on interface = %s, Protocol = %s.", IPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6Address) ? "Null" : IPv6Address.ToString, Interface.ToString, Protocol.ToString)
{
	UINT32 Interface;
	AsciiString Protocol;
	UINT32 DadState = TCPIP_TCPIP_IP_DAD_STATE_ValueMap(this);
	UINT32 DlAddrLength;
	BLOB(DlAddrLength) DLAddress;
	UINT32 IpAddrLength;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_FRAMING_INTERFACE_OPER_STATUS = FormatString("Framing: Interface %s Operational Status = %s, Operational Status Flags = %s.", Interface.ToString, OperationalStatus.ToString, Status.ToString)
{
	UINT32 Interface;
	UINT32 OperationalStatus = TCPIP_TCPIP_IP_IF_STATUS_ValueMap(this);
	UINT64 Status;
}
Struct TCPIP_FRAMING_NDIS_PAUSE = FormatString("Framing: NDIS pause event on interface %s.", InterfaceIndex.ToString)
{
	UINT32 InterfaceIndex;
	AsciiString TraceString;
}
Struct TCPIP_FRAMING_NDIS_RESTART = FormatString("Framing: NDIS restart event on interface %s.", InterfaceIndex.ToString)
{
	UINT32 InterfaceIndex;
	AsciiString TraceString;
}
Struct TCPIP_IP_ADDRESS_STATE_PREFERRED = FormatString("IP: IP address = %s %s %s state changed to Preferred. Interface = %s.", IPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6Address) ? "Null" : IPv6Address.ToString, Interface.ToString)
{
	UINT32 Interface;
	AsciiString Protocol;
	UINT32 DadState = TCPIP_TCPIP_IP_DAD_STATE_ValueMap(this);
	UINT32 DlAddrLength;
	BLOB(DlAddrLength) DLAddress;
	UINT32 IpAddrLength;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_IP_ADDRESS_STATE_NONPREFERRED = FormatString("IP: IP address = %s %s %s state changed to Non-preferred. Interface = %s. DadState = %s.", IPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6Address) ? "Null" : IPv6Address.ToString, Interface.ToString, DadState.ToString)
{
	UINT32 Interface;
	AsciiString Protocol;
	UINT32 DadState = TCPIP_TCPIP_IP_DAD_STATE_ValueMap(this);
	UINT32 DlAddrLength;
	BLOB(DlAddrLength) DLAddress;
	UINT32 IpAddrLength;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_IP_INTERFACE_PROPERY_CHANGE = FormatString("IP: Interface %s property change. Advertise= %s, AdvertiseDefaultRoute = %s, Forward = %s, ForwardMulticast = %s, UseNud = %s, AdvertisingEnabled = %s.", Interface.ToString, Advertise.ToString, AdvertiseDefaultRoute.ToString, Forward.ToString, ForwardMulticast.ToString, UseNud.ToString, AdvertisingEnabled.ToString)
{
	UINT32 Interface;
	UINT32 Advertise = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 AdvertiseDefaultRoute = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 Forward = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 ForwardMulticast = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 UseNud = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 AdvertisingEnabled = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
}
Struct TCPIP_IP_ROUTE_CREATED = FormatString("IP: Route %s created on interface %s. Protocol = %s, DestinationPrefix = %s %s %s /%s, Nexthop = %s %s %s.", Route.ToString, Interface.ToString, Protocol.ToString, IPv4DestinationPrefix.ToString, IPProtocol.ToString, IsValueNone(DestinationPrefix) ? "Null" : DestinationPrefix.ToString, DestinationPrefixLength.ToString, IPv4NextHopAddress.ToString, IPProtocol.ToString, IsValueNone(NextHopAddress) ? "Null" : NextHopAddress.ToString)
{
	EtlPtr Route;
	UINT32 Interface;
	UINT32 DestinationPrefixAddressLength;
	UINT32 NextHopAddressLength;
	AsciiString Protocol;
	UINT32 DestinationPrefixLength;
	switch
	{
		case DestinationPrefixAddressLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address DestinationPrefix;
	}
	switch
	{
		case NextHopAddressLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address NextHopAddress;
	}
	UINT64 ValidLifetime;
	UINT64 PreferredLifetime;
	UINT32 Metric;
	UINT32 Loopback = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 AutoconfigureAddress = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 Publish = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 Immortal = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4DestinationPrefix;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4NextHopAddress;
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_IP_ROUTE_DELETED = FormatString("IP: Route %s deleted on interface %s, Protocol = %s, DestinationPrefix = %s %s %s /%s, Nexthop = %s %s %s.", Route.ToString, Interface.ToString, Protocol.ToString, IPv4DestinationPrefix.ToString, IPProtocol.ToString, IsValueNone(DestinationPrefix) ? "Null" : DestinationPrefix.ToString, DestinationPrefixLength.ToString, IPv4NextHopAddress.ToString, IPProtocol.ToString, IsValueNone(NextHopAddress) ? "Null" : NextHopAddress.ToString)
{
	EtlPtr Route;
	UINT32 Interface;
	UINT32 DestinationPrefixAddressLength;
	UINT32 NextHopAddressLength;
	AsciiString Protocol;
	UINT32 DestinationPrefixLength;
	switch
	{
		case DestinationPrefixAddressLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address DestinationPrefix;
	}
	switch
	{
		case NextHopAddressLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address NextHopAddress;
	}
	UINT64 ValidLifetime;
	UINT64 PreferredLifetime;
	UINT32 Metric;
	UINT32 Loopback = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 AutoconfigureAddress = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 Publish = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 Immortal = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4DestinationPrefix;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4NextHopAddress;
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_IP_ROUTE_PROPERTY_CHANGE = FormatString("IP: Route %s property change. Interface = %s, Protocol = %s, DestinationPrefix = %s %s %s /%s, Nexthop = %s %s %s. Properties: ValidLifetime = %s, PreferredLifetime = %s, Metric = %s, Loopback = %s, AutoconfigureAddress = %s, Publish = %s, Immortal = %s.", Route.ToString, Interface.ToString, Protocol.ToString, IPv4DestinationPrefix.ToString, IPProtocol.ToString, IsValueNone(DestinationPrefix) ? "Null" : DestinationPrefix.ToString, DestinationPrefixLength.ToString, IPv4NextHopAddress.ToString, IPProtocol.ToString, IsValueNone(NextHopAddress) ? "Null" : NextHopAddress.ToString, ValidLifetime.ToString, PreferredLifetime.ToString, Metric.ToString, Loopback.ToString, AutoconfigureAddress.ToString, Publish.ToString, Immortal.ToString)
{
	EtlPtr Route;
	UINT32 Interface;
	UINT32 DestinationPrefixAddressLength;
	UINT32 NextHopAddressLength;
	AsciiString Protocol;
	UINT32 DestinationPrefixLength;
	switch
	{
		case DestinationPrefixAddressLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address DestinationPrefix;
	}
	switch
	{
		case NextHopAddressLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address NextHopAddress;
	}
	UINT64 ValidLifetime;
	UINT64 PreferredLifetime;
	UINT32 Metric;
	UINT32 Loopback = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 AutoconfigureAddress = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 Publish = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	UINT32 Immortal = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4DestinationPrefix;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4NextHopAddress;
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_IP_NEIGHBOR_UNREACHABLE = FormatString("IP: Neighbor unreachable. Interface %s, IP address = %s %s %s.", Interface.ToString, IPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6Address) ? "Null" : IPv6Address.ToString)
{
	UINT32 Interface;
	UINT32 DlAddrLength;
	BLOB(DlAddrLength) DlAddress;
	UINT32 IpAddrLength;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_IP_NEIGHBOR_REACHABLE = FormatString("IP: Neighbor reachable. Interface %s, IP address = %s %s %s, DlAddress = %s.", Interface.ToString, IPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6Address) ? "Null" : IPv6Address.ToString, DlAddress.ToString)
{
	UINT32 Interface;
	UINT32 DlAddrLength;
	BLOB(DlAddrLength) DlAddress;
	UINT32 IpAddrLength;
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_TCP_RECEIVE_REQUEST = FormatString("TCP: connection %s, delivery %s, Request %s  posted for %s bytes, flags = %s. RcvNxt = %s.", Tcb.ToString, Delivery.ToString, Request.ToString, NumBytes.ToString, RequestFlags.ToString, RcvNxt.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_DELIVERY_INDICATED = FormatString("TCP: connection %s delivery %s indicated %s bytes accepted %s bytes, status = %s. RcvNxt = %s.", Tcb.ToString, Delivery.ToString, NumBytes.ToString, Length.ToString, RequestStatus.ToString, RcvNxt.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_DELIVERY_SATISFIED = FormatString("TCP: connection %s delivery %s satisfied %s bytes %s requested. IsFullySatisfied = %s. RcvNxt = %s.", Tcb.ToString, Delivery.ToString, NumBytes.ToString, Length.ToString, FullySatisfiedORDelayedPush.ToString, RcvNxt.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_SEND_POSTED = FormatString("TCP: connection %s send %s posted %s bytes at %s.", Tcb.ToString, Injected.ToString, NumBytes.ToString, SndNxt.ToString)
{
	EtlPtr Tcb;
	UnicodeString Injected;
	UINT32 NumBytes;
	UINT32 SndNxt;
}
Struct TCPIP_TCP_SEND_TRANSMITTED = FormatString("TCP: connection %s send transmitted %s bytes at %s.", Tcb.ToString, NumBytes.ToString, SndNxt.ToString)
{
	EtlPtr Tcb;
	UnicodeString Injected;
	UINT32 NumBytes;
	UINT32 SndNxt;
}
Struct TCPIP_TCP_SEND_ADVANCE = FormatString("TCP: connection %s send advance %s bytes at %s.", Tcb.ToString, NumBytes.ToString, SndNxt.ToString)
{
	EtlPtr Tcb;
	UnicodeString Injected;
	UINT32 NumBytes;
	UINT32 SndNxt;
}
Struct TCPIP_TCP_CTCP_DELAY_WNDW_INACTIVE = FormatString("TCP: CTcp: Connection %s Delay window has not kicked in.", Tcb.ToString)
{
	EtlPtr Tcb;
	NTSTATUS Status;
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_CTCP_ASSIGNED_BLOCKS = FormatString("TCP: CTcp: Allocated blocks: %s; Assigned blocks: %s.", AssignedBlocks.ToString, AllocatedBlocks.ToString)
{
	UINT32 AssignedBlocks;
	UINT32 AllocatedBlocks;
}
Struct TCPIP_TCP_CTCP_CONGESTION_WNDW = FormatString("TCP: CTcp: Connection %s, DWnd = %s (Prev = %s), BaseRtt = %s, AverageRtt = %s, CWnd =%s, DiffWnd = %s, DWnd increment = %s.", Tcb.ToString, DWnd.ToString, PrevDWnd.ToString, BaseRtt.ToString, AvgRtt.ToString, Cwnd.ToString, DiffWnd.ToString, DwndIncrement.ToString)
{
	EtlPtr Tcb;
	UINT32 DWnd;
	UINT32 PrevDWnd;
	UINT32 BaseRtt;
	UINT32 AvgRtt;
	UINT32 Cwnd;
	UINT32 DiffWnd;
	UINT32 DwndIncrement;
}
Struct TCPIP_TCP_CTCP_GAMMA = FormatString("TCP: CTcp: Gamma Autotuning: Connection %s Updated Gamma %s, Average backlog %s, Average backlog across LFPs %s.", Tcb.ToString, Gamma.ToString, AverageBacklog.ToString, AverageBacklogAcrossLFP.ToString)
{
	EtlPtr Tcb;
	UINT32 Gamma;
	UINT32 AverageBacklog;
	UINT32 AverageBacklogAcrossLFP;
}
Struct TCPIP_TCP_SRTT_MEASUREMENT_STARTED = FormatString("TCP: connection %s SRTT measurement started (seq = %s, tick = %s).", Tcb.ToString, SeqNum.ToString, Tick.ToString)
{
	EtlPtr Tcb;
	UINT32 SeqNum;
	UINT32 Tick;
	UINT32 RttSample;
	UINT32 NewSrtt;
}
Struct TCPIP_TCP_SRTT_MEASUREMENT_COMPLETE = FormatString("TCP: connection %s SRTT measurement complete (tick = %s, sample = %s ms, new srtt = %s ms).", Tcb.ToString, Tick.ToString, RttSample.ToString, NewSrtt.ToString)
{
	EtlPtr Tcb;
	UINT32 SeqNum;
	UINT32 Tick;
	UINT32 RttSample;
	UINT32 NewSrtt;
}
Struct TCPIP_TCP_SRTT_MEASUREMENT_CANCELLED = FormatString("TCP: connection %s: SRTT measurement cancelled.", Tcb.ToString)
{
	EtlPtr Tcb;
	UINT32 SeqNum;
	UINT32 Tick;
	UINT32 RttSample;
	UINT32 NewSrtt;
}
Struct TCPIP_UDP_ENDPOINT_SEND_MESSAGES = FormatString("UDP: endpoint %s (LocalAddress = %s, RemoteAddress = %s) sending %s messages and a total of %s bytes. PID = %s.", Endpoint.ToString, IsValueNone(LocalSockAddr) ? "Null" : LocalSockAddr.ToString, IsValueNone(RemoteSockAddr) ? "Null" : RemoteSockAddr.ToString, NumMessages.ToString, NumBytes.ToString, Pid.ToString)
{
	EtlPtr Endpoint;
	UINT32 NumMessages;
	UINT32 NumBytes;
	UINT32 LocalSockAddrLength;
	switch
	{
		case LocalSockAddrLength > 0 :
			ETL_SOCKADDR_STORAGE LocalSockAddr;
	}
	UINT32 RemoteSockAddrLength;
	switch
	{
		case RemoteSockAddrLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteSockAddr;
	}
	UINT32 Pid;
}
Struct TCPIP_UDP_ENDPOINT_RECEIVE_MESSAGES = FormatString("UDP: endpoint %s (LocalAddress = %s, RemoteAddress = %s) delivering %s bytes. PID = %s.", Endpoint.ToString, IsValueNone(LocalSockAddr) ? "Null" : LocalSockAddr.ToString, IsValueNone(RemoteSockAddr) ? "Null" : RemoteSockAddr.ToString, NumBytes.ToString, Pid.ToString)
{
	EtlPtr Endpoint;
	UINT32 NumMessages;
	UINT32 NumBytes;
	UINT32 LocalSockAddrLength;
	switch
	{
		case LocalSockAddrLength > 0 :
			ETL_SOCKADDR_STORAGE LocalSockAddr;
	}
	UINT32 RemoteSockAddrLength;
	switch
	{
		case RemoteSockAddrLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteSockAddr;
	}
	UINT32 Pid;
}
Struct TCPIP_TCP_CONNECTION_RUNDOWN = FormatString("TCP: connection %s (local=%s remote=%s) exists. State = %s. PID = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, State.ToString, Pid.ToString)
{
	EtlPtr Tcb;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 State = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 Pid;
}
Struct TCPIP_TCP_DELIVERY_FLUSH = FormatString("TCP: connection %s delivery %s flushing %s bytes %s requested status = %s.", Tcb.ToString, Delivery.ToString, NumBytes.ToString, Length.ToString, RequestStatus.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_TCB_INJECT_RCV_FAILURE = FormatString("TCP: Injecting receive on a shutdown TCB failed. TCB = %s.", Tcb.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_DELIVERY_INJECTING_DATA = FormatString("TCP: connection %s delivery %s injecting %s bytes delta %s, IsUrgentDelivery = %s.", Tcb.ToString, Delivery.ToString, NumBytes.ToString, Length.ToString, IsUrgentDelivery.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_TCB_INJECT_FIN_FAILURE = FormatString("TCP: Injecting fin on a shutdown TCB failed. TCB = %s.", Tcb.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_DELIVERY_ACCEPT = FormatString("TCP: connection %s delivery %s accepting %s bytes. RcvNxt = %s.", Tcb.ToString, Delivery.ToString, NumBytes.ToString, RcvNxt.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_DELIVERY_FIN = FormatString("TCP: connection %s delivery %s delivering FIN. RcvNxt = %s.", Tcb.ToString, Delivery.ToString, RcvNxt.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_DELIVERY_PUSH = FormatString("TCP: connection %s delivery %s pushing %s bytes %s requested. Delayed push = %s.", Tcb.ToString, Delivery.ToString, NumBytes.ToString, Length.ToString, FullySatisfiedORDelayedPush.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_TCB_INJECT_FIN_COMPLETE = FormatString("TCP: Injecting fin on TCB completed. TCB = %s, Processor = %s.", Tcb.ToString, NumBytes.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_DELIVERY_COMPLETING = FormatString("TCP: connection %s delivery %s urgent boundary completing %s bytes %s requested.", Tcb.ToString, Delivery.ToString, NumBytes.ToString, Length.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_INITIATE_SYNRST_VALIDATION = FormatString("TCP: connection %s (local=%s remote=%s): initiating SYN/RST validation.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	EtlPtr Tcb;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 NewState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 RexmitCount;
}
Struct TCPIP_TCP_CONNECT_TCB_FAILED_RCVD_RST = FormatString("TCP: connection %s (local=%s remote=%s) connect failed: received RST.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	EtlPtr Tcb;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 NewState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 RexmitCount;
}
Struct TCPIP_TCP_CONNECTION_TERMINATED_RCVD_RST = FormatString("TCP: connection %s (local=%s remote=%s) connection terminated: received RST.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	EtlPtr Tcb;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 NewState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 RexmitCount;
}
Struct TCPIP_TCP_CONNECTION_TERMINATED_RCVD_SYN = FormatString("TCP: connection %s (local=%s remote=%s) connection terminated: received SYN in state %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, NewState.ToString)
{
	EtlPtr Tcb;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 NewState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 RexmitCount;
}
Struct TCPIP_TCP_CONNECT_RETRANSMIT = FormatString("TCP: connection %s (local=%s remote=%s) retransmitting connect attempt, RexmitCount = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, RexmitCount.ToString)
{
	EtlPtr Tcb;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 NewState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 RexmitCount;
}
Struct TCPIP_TCP_DATA_TRANSFER_RETRANSMIT = FormatString("TCP: connection %s (local=%s remote=%s) retransmitting data, RexmitCount = %s.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString, RexmitCount.ToString)
{
	EtlPtr Tcb;
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	UINT32 NewState = TCPIP_TCP_CONNECTION_STATE_ValueMap(this);
	UINT32 RexmitCount;
}
Struct TCPIP_TCP_CONNECTION_KEEPALIVE = FormatString("TCP: connection %s send keep-alive at SndUna = %s.", Tcb.ToString, SndUna.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
}
Struct TCPIP_TCP_DELIVERY_STATE_CHANGE = FormatString("TCP: connection %s, delivery %s: delivery state changed from %s to %s.", Tcb.ToString, Delivery.ToString, OldDeliveryState.ToString, NewDeliveryState.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	UINT32 OldDeliveryState = TCPIP_TCPIP_TCP_DELIVERY_STATE_ValueMap(this);
	UINT32 NewDeliveryState = TCPIP_TCPIP_TCP_DELIVERY_STATE_ValueMap(this);
}
Struct TCPIP_TCP_DELIVERY_DATA_DROPPED = FormatString("TCP: connection %s delivery %s dropping data. TotalBytesEnqueued = %s. Length = %s. RcvNxt = %s.", Tcb.ToString, Delivery.ToString, NumBytes.ToString, Length.ToString, RcvNxt.ToString)
{
	EtlPtr Tcb;
	EtlPtr Delivery;
	EtlPtr Request;
	EtlPtr NumBytes;
	UINT32 RequestFlags;
	EtlPtr Length;
	NTSTATUS RequestStatus;
	UINT32 IsUrgentDelivery;
	UINT32 FullySatisfiedORDelayedPush;
	UINT32 RcvNxt;
}
Struct TCPIP_TCP_ACQUIRE_PORT = FormatString("TCP: endpoint/connection %s acquired port number %s.", PortAcquirer.ToString, PortNumber.ToString)
{
	EtlPtr PortAcquirer;
	UINT16 PortNumber;
	UINT32 WeakReference = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	EtlPtr OriginalAcquirer;
}
Struct TCPIP_TCP_ACQUIRE_WEAKREF_PORT = FormatString("TCP: connection %s attempted to acquire weak reference on port number %s inherited from endpoint %s. Successful = %s.", PortAcquirer.ToString, PortNumber.ToString, OriginalAcquirer.ToString, WeakReference.ToString)
{
	EtlPtr PortAcquirer;
	UINT16 PortNumber;
	UINT32 WeakReference = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	EtlPtr OriginalAcquirer;
}
Struct TCPIP_TCP_RELEASE_PORT = FormatString("TCP: endpoint/connection %s released port number %s. WeakReference = %s.", PortAcquirer.ToString, PortNumber.ToString, WeakReference.ToString)
{
	EtlPtr PortAcquirer;
	UINT16 PortNumber;
	UINT32 WeakReference = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	EtlPtr OriginalAcquirer;
}
Struct TCPIP_TCP_REPLACE_PORT = FormatString("TCP: endpoint/connection %s replaced base endpoint %s and acquired reference to port number %s.", PortAcquirer.ToString, OriginalAcquirer.ToString, PortNumber.ToString)
{
	EtlPtr PortAcquirer;
	UINT16 PortNumber;
	UINT32 WeakReference = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	EtlPtr OriginalAcquirer;
}
Struct TCPIP_TCP_ASSIGNED_WEAK_REFERENCE_PORT = FormatString("TCP: Portpool assigned port number %s with weak references due to port exhaustion.", PortNumber.ToString)
{
	EtlPtr PortAcquirer;
	UINT16 PortNumber;
	UINT32 WeakReference = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
	EtlPtr OriginalAcquirer;
}
Struct TCPIP_TCP_BH_DETECT_FULL_SIZE_ACK = FormatString("TCP: connection %s BH receive ACK for full size seq. Seq = %s. IsSack = %s.", Tcb.ToString, SndUna.ToString, IsSack.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
	UnicodeString Reason;
	UINT32 IsSack = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
}
Struct TCPIP_TCP_FLUSH_SACK = FormatString("TCP: connection %s flushed SACK state at SndUna = %s. Reason: %s.", Tcb.ToString, SndUna.ToString, Reason.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
	UnicodeString Reason;
	UINT32 IsSack = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
}
Struct TCPIP_TCP_REASSEMBLY_ENTRY = FormatString("TCP: Connection %s entering reassembly at RcvNxt = %s.", Tcb.ToString, SndUna.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
}
Struct TCPIP_TCP_REASSEMBLY_EXIT = FormatString("TCP: Connection %s leaving reassembly at RcvNxt = %s.", Tcb.ToString, SndUna.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
}
Struct TCPIP_TCP_DISCONNECT_TCB_ZERO_WINDOW_TIMEOUT = FormatString("TCP: connection %s (local=%s remote=%s) terminating: Zero window probe timeout expired.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_TCP_DISCONNECT_TCB_FINWAIT2_TIMEOUT = FormatString("TCP: connection %s (local=%s remote=%s) terminating: FIN-WAIT-2 timeout expired.", Tcb.ToString, IsValueNone(LocalAddress) ? "Null" : LocalAddress.ToString, IsValueNone(RemoteAddress) ? "Null" : RemoteAddress.ToString)
{
	UINT32 LocalAddressLength;
	switch
	{
		case LocalAddressLength > 0 :
			ETL_SOCKADDR_STORAGE LocalAddress;
	}
	UINT32 RemoteAddressLength;
	switch
	{
		case RemoteAddressLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteAddress;
	}
	NTSTATUS Status;
	UINT32 ProcessId;
	UINT32 Compartment;
	EtlPtr Tcb;
}
Struct TCPIP_IP_INTERFACE_RUNDOWN = FormatString("IP: Interface rundown: Index = %s, Linkspeed = %s bps, PhysicalMediumType = %s, IP Address = %s %s %s.", IfIndex.ToString, LinkSpeed.ToString, PhysicalMediumType.ToString, IPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6Address) ? "Null" : IPv6Address.ToString)
{
	UINT32 IfIndex;
	UINT64 LinkSpeed;
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	UINT32 IpAddrLength;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 PhysicalMediumType = TCPIP_TCPIP_IP_PHYSICALMEDIUM_TYPE_ValueMap(this);
}
Struct TCPIP_IP_INTERFACE_SPPED_CHANGE = FormatString("IP: Interface Index = %s, Linkspeed changed to %s bps, PhysicalMediumType = %s.", IfIndex.ToString, LinkSpeed.ToString, PhysicalMediumType.ToString)
{
	UINT32 IfIndex;
	UINT64 LinkSpeed;
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	UINT32 IpAddrLength;
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6Address;
	}
	UINT32 PhysicalMediumType = TCPIP_TCPIP_IP_PHYSICALMEDIUM_TYPE_ValueMap(this);
}
Struct TCPIP_TCP_FLUSH_REASSEMBLY = FormatString("TCP: Connection %s flushing reassembly state at RcvNxt = %s. Reason = %s.", Tcb.ToString, SndUna.ToString, Reason.ToString)
{
	EtlPtr Tcb;
	UINT32 SndUna;
	UINT32 SndMax;
	UnicodeString Reason;
	UINT32 IsSack = TCPIP_TCPIP_BOOLEAN_ValueMap(this);
}
Struct TCPIP_TCPIP_RECEIVE_SLOW_PATH = FormatString("TCPIP: NBL %s fell off the receive fast path, Reason: %s. Protocol = %s, Family = %s, Number of NBLs = %s. SourceAddress = %s %s %s. DestAddress = %s %s %s.", Nbl.ToString, Reason.ToString, IPTransportProtocol.ToString, AddressFamily.ToString, NblCount.ToString, SourceIPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6SourceAddress) ? "Null" : IPv6SourceAddress.ToString, DestIPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6DestAddress) ? "Null" : IPv6DestAddress.ToString)
{
	EtlPtr Nbl;
	UINT32 IPTransportProtocol = TCPIP_TCPIP_Transport_Protocol_ValueMap(this);
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address SourceIPv4Address;
	[DataFieldByteOrder = BigEndian]IPv4Address DestIPv4Address;
	UINT32 IPv6SourceIpAddrLength;
	switch
	{
		case IPv6SourceIpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6SourceAddress;
	}
	UINT32 IPv6DestIpAddrLength;
	switch
	{
		case IPv6DestIpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6DestAddress;
	}
	UINT32 Reason = TCPIP_TCPIP_SLOW_PATH_REASON_ValueMap(this);
	UINT32 NblCount;
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_TCPIP_SEND_SLOW_PATH = FormatString("TCPIP: SendDatagram %s fell off the send fast path, Reason: %s. Protocol = %s, Family = %s, Number of NBLs = %s. SourceAddress = %s %s %s. DestAddress = %s %s %s.", Nbl.ToString, Reason.ToString, IPTransportProtocol.ToString, AddressFamily.ToString, NblCount.ToString, SourceIPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6SourceAddress) ? "Null" : IPv6SourceAddress.ToString, DestIPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6DestAddress) ? "Null" : IPv6DestAddress.ToString)
{
	EtlPtr Nbl;
	UINT32 IPTransportProtocol = TCPIP_TCPIP_Transport_Protocol_ValueMap(this);
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address SourceIPv4Address;
	[DataFieldByteOrder = BigEndian]IPv4Address DestIPv4Address;
	UINT32 IPv6SourceIpAddrLength;
	switch
	{
		case IPv6SourceIpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6SourceAddress;
	}
	UINT32 IPv6DestIpAddrLength;
	switch
	{
		case IPv6DestIpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6DestAddress;
	}
	UINT32 Reason = TCPIP_TCPIP_SLOW_PATH_REASON_ValueMap(this);
	UINT32 NblCount;
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_TCP_WSD_INITIALIZATION_ERROR = FormatString("TCP: WSD - %s Status: %s.", TcpWsdEtwPoint.ToString, Status.ToString)
{
	UINT32 TcpWsdEtwPoint = TCPIP_TCP_WSD_ValueMap(this);
	NTSTATUS Status;
}
Struct TCPIP_TCP_WSD_INITIALIZATION_INFORMATION = FormatString("TCP: WSD - %s Status: %s.", TcpWsdEtwPoint.ToString, Status.ToString)
{
	UINT32 TcpWsdEtwPoint = TCPIP_TCP_WSD_ValueMap(this);
	NTSTATUS Status;
}
Struct TCPIP_TCP_WSD_WS_RESTRICTED_PROFILE = FormatString("TCP: WSD - TCB %s will use a highly restricted window scale factor due to a %s.", Tcb.ToString, TcpWsdEtwPoint.ToString)
{
	UINT32 TcpWsdEtwPoint = TCPIP_TCP_WSD_ValueMap(this);
	EtlPtr Tcb;
}
Struct TCPIP_TCP_WSD_WS_RESTRICTED_DESTINATION = FormatString("TCP: WSD - TCB %s will use a highly restricted window scale factor due to a %s.", Tcb.ToString, TcpWsdEtwPoint.ToString)
{
	UINT32 TcpWsdEtwPoint = TCPIP_TCP_WSD_ValueMap(this);
	EtlPtr Tcb;
}
Struct TCPIP_TCP_WSD_CACHE_ENTRY_STATE_CHANGE = FormatString("TCP: WSD - Entry (%s, %s) moved from %s to %s due to %s.", Processor.ToString, Entry.ToString, OldState.ToString, NewState.ToString, TcpWsdEtwPoint.ToString)
{
	UINT32 TcpWsdEtwPoint = TCPIP_TCP_WSD_ValueMap(this);
	UINT32 Processor;
	UINT32 Entry;
	UINT32 OldState = TCPIP_TCP_WSD_CACHE_ENTRY_STATE_ValueMap(this);
	UINT32 NewState = TCPIP_TCP_WSD_CACHE_ENTRY_STATE_ValueMap(this);
	UINT32 ProbeCount;
	UINT32 ProbeCountWs;
}
Struct TCPIP_TCP_WSD_PROFILE_STATE_CHANGE = FormatString("TCP: WSD - Profile: %s State: %s Qualified: %s EreQualified: %s.", Profile.ToString, State.ToString, Qualified.ToString, EreQualified.ToString)
{
	UINT32 Profile;
	UINT32 State;
	UINT32 Qualified;
	UINT32 EreQualified;
}
Struct TCPIP_TCP_WSD_STATE_CHANGE = FormatString("TCP: WSD - Enabled moved from %s to %s. Threshold moved from  %s to %s.", OldEnabledState.ToString, NewEnabledState.ToString, OldThreshold.ToString, NewThreshold.ToString)
{
	UINT32 OldEnabledState;
	UINT32 NewEnabledState;
	UINT32 OldThreshold;
	UINT32 NewThreshold;
}
Struct TCPIP_TCPIP_TRANSPORT_PACKET_DROPS = FormatString("TCPIP: Transport (Protocol %s, AddressFamily = %s) dropped %s packet(s) with Source = %s, Destination = %s. Reason = %s.", IPTransportProtocol.ToString, AddressFamily.ToString, PacketCount.ToString, IsValueNone(LocalSockAddr) ? "Null" : LocalSockAddr.ToString, IsValueNone(RemoteSockAddr) ? "Null" : RemoteSockAddr.ToString, Reason.ToString)
{
	UINT32 IPTransportProtocol = TCPIP_TCPIP_Transport_Protocol_ValueMap(this);
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
	UINT32 LocalSockAddrLength;
	switch
	{
		case LocalSockAddrLength > 0 :
			ETL_SOCKADDR_STORAGE LocalSockAddr;
	}
	UINT32 RemoteSockAddrLength;
	switch
	{
		case RemoteSockAddrLength > 0 :
			ETL_SOCKADDR_STORAGE RemoteSockAddr;
	}
	UINT32 Reason = TCPIP_TCPIP_TRANSPORT_PACKET_DROP_REASON_ValueMap(this);
	UINT32 PacketCount;
}
Struct TCPIP_TCPIP_NETWORK_PACKET_DROPS = FormatString("TCPIP: Network layer (Protocol %s, AddressFamily = %s) dropped %s packet(s). SourceAddress = %s %s %s. DestAddress = %s %s %s. Reason = %s.", IPTransportProtocol.ToString, AddressFamily.ToString, PacketCount.ToString, SourceIPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6SourceAddress) ? "Null" : IPv6SourceAddress.ToString, DestIPv4Address.ToString, IPProtocol.ToString, IsValueNone(IPv6DestAddress) ? "Null" : IPv6DestAddress.ToString, Reason.ToString)
{
	UINT32 IPTransportProtocol = TCPIP_TCPIP_Transport_Protocol_ValueMap(this);
	UINT32 AddressFamily = TCPIP_TCPIP_ADDRESS_FAMILY_TYPE_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address SourceIPv4Address;
	[DataFieldByteOrder = BigEndian]IPv4Address DestIPv4Address;
	UINT32 IPv6SourceIpAddrLength;
	switch
	{
		case IPv6SourceIpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6SourceAddress;
	}
	UINT32 IPv6DestIpAddrLength;
	switch
	{
		case IPv6DestIpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPv6DestAddress;
	}
	UINT32 Reason = TCPIP_TCPIP_NETWORK_PACKET_DROP_REASON_ValueMap(this);
	UINT32 PacketCount;
	UINT32 IPProtocol = TCPIP_TCPIP_Protocol_ValueMap(this);
}
Struct TCPIP_TCP_MPP_NPP_EVALUATION = FormatString("TCP: MPP NPP Evaluation PhysicalPages = %s NonPagedPoolPages = %s Current = %s Peak = %s Low = %s High = %s.", PhysicalPages.ToString, NonPagedPoolPages.ToString, CurrentWatermark.ToString, PeakWatermark.ToString, HighWatermark.ToString, LowWatermark.ToString)
{
	UINT32 PhysicalPages;
	UINT32 NonPagedPoolPages;
	UINT32 CurrentWatermark;
	UINT32 PeakWatermark;
	UINT32 HighWatermark;
	UINT32 LowWatermark;
}
Struct TCPIP_TCP_MPP_START_EPISODE = FormatString("TCP: MPP: Memory pressure episode started. LowNppEventState = %s HighNppEventState = %s EpisodeStartTick = %s EpisodeStopTick = %s Current = %s Low = %s Reentry = %s.", LowNppEventState.ToString, HighNppEventState.ToString, EpisodeStartTick.ToString, EpisodeStopTick.ToString, CurrentWatermark.ToString, LowWatermark.ToString, ReentryWatermark.ToString)
{
	UINT32 LowNppEventState;
	UINT32 HighNppEventState;
	UINT64 EpisodeStartTick;
	UINT64 EpisodeStopTick;
	UINT32 CurrentWatermark;
	UINT32 LowWatermark;
	UINT32 ReentryWatermark;
}
Struct TCPIP_TCP_MPP_STOP_EPISODE = FormatString("TCP: MPP: Memory pressure episode ended. LowNppEventState = %s HighNppEventState = %s EpisodeStartTick = %s EpisodeStopTick = %s Reentry = %s.", LowNppEventState.ToString, HighNppEventState.ToString, EpisodeStartTick.ToString, EpisodeStopTick.ToString, ReentryWatermark.ToString)
{
	UINT32 LowNppEventState;
	UINT32 HighNppEventState;
	UINT64 EpisodeStartTick;
	UINT64 EpisodeStopTick;
	UINT32 ReentryWatermark;
}
Struct TCPIP_TCP_MPP_START_EPOCH = FormatString("TCP: MPP: Epoch %s started. LowNppEventState = %s HighNppEventState = %s EpochStartTick = %s EpochStopTick = %s SynDropRate = %s -> %s TcbKillRate = %s -> %s CurrentWatermark = %s.", Epoch.ToString, LowNppEventState.ToString, HighNppEventState.ToString, EpochStartTick.ToString, EpochStopTick.ToString, OldSynDropRate.ToString, NewSynDropRate.ToString, OldTcbAbortionRate.ToString, NewTcbAbortionRate.ToString, CurrentWatermark.ToString)
{
	UINT32 Epoch;
	UINT32 LowNppEventState;
	UINT32 HighNppEventState;
	UINT64 EpochStartTick;
	UINT64 EpochStopTick;
	UINT32 OldSynDropRate;
	UINT32 NewSynDropRate;
	UINT32 OldTcbAbortionRate;
	UINT32 NewTcbAbortionRate;
	UINT32 CurrentWatermark;
}
Struct TCPIP_TCP_MPP_STOP_EPOCH = FormatString("TCP: MPP: Epoch %s ended. LowNppEventState = %s HighNppEventState = %s EpochStartTick = %s EpochStopTick = %s SynDropRate = %s TcbKillRate = %s Current = %s.", Epoch.ToString, LowNppEventState.ToString, HighNppEventState.ToString, EpochStartTick.ToString, EpochStopTick.ToString, SynDropRate.ToString, TcbAbortionRate.ToString, CurrentWatermark.ToString)
{
	UINT32 Epoch;
	UINT32 LowNppEventState;
	UINT32 HighNppEventState;
	UINT64 EpochStartTick;
	UINT64 EpochStopTick;
	UINT32 SynDropRate;
	UINT32 TcbAbortionRate;
	UINT32 CurrentWatermark;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsTcpipSQMProvider, "{C8F7689F-3692-4d66-B0C0-9536D21082C9}")]
Protocol TCPIP_MicrosoftWindowsTcpipSQMProvider = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 5: [property.ETLSummary = this.ToString] TCPIP_SQM_SET_DWORD SQM_SET_DWORD;
		case 6: [property.ETLSummary = this.ToString] TCPIP_SQM_INCREMENT_DWORD SQM_INCREMENT_DWORD;
		case 7: [property.ETLSummary = this.ToString] TCPIP_SQM_ADDTOAVERAGE_DWORD SQM_ADDTOAVERAGE_DWORD;
		case 8: [property.ETLSummary = this.ToString] TCPIP_SQM_SETIFMAX_DWORD SQM_SETIFMAX_DWORD;
		case 9: [property.ETLSummary = this.ToString] TCPIP_SQM_SETIFMIN_DWORD SQM_SETIFMIN_DWORD;
		case 10: [property.ETLSummary = this.ToString] TCPIP_SQM_SET_STRING SQM_SET_STRING;
		case 11: [property.ETLSummary = this.ToString] TCPIP_SQM_ADD_STREAMROW SQM_ADD_STREAMROW;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct TCPIP_SQM_SET_DWORD = FormatString("SQM_SET_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct TCPIP_SQM_INCREMENT_DWORD = FormatString("SQM_INCREMENT_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct TCPIP_SQM_ADDTOAVERAGE_DWORD = FormatString("SQM_ADDTOAVERAGE_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct TCPIP_SQM_SETIFMAX_DWORD = FormatString("SQM_SETIFMAX_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct TCPIP_SQM_SETIFMIN_DWORD = FormatString("SQM_SETIFMIN_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct TCPIP_SQM_SET_STRING = FormatString("SQM_SET_STRING - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmStringDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmStringDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UnicodeString SqmStringDatapointValue;
}
Struct TCPIP_SQM_ADD_STREAMROW = FormatString("SQM_ADD_STREAMROW - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmStreamRowLength : %s, SqmStreamRow : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmStreamRowLength.ToString, SqmStreamRow.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmStreamRowLength;
	TCPIP_SqmStreamRow SqmStreamRow[SqmStreamRowLength]; // Struct Array
}
struct TCPIP_SqmStreamRow //Array Struct
{
	UINT32 SqmTypeEntry;
	UINT32 SqmDWORDEntry;
	UnicodeString SqmStringEntry;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsTCPIP_Keyword, "{2F07E2EE-15DB-40F1-90EF-9D7BA282188A}")]
struct TCPIP_MicrosoftWindowsTCPIP_Keyword
{
	UINT64 utTcpipEndpoint:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_TCPIP_ENDPOINT":"");
	UINT64 utTcpipListener:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_TCPIP_LISTENER":"");
	UINT64 utTcpipTcb:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_TCPIP_TCB":"");
	UINT64 utTcpipBind:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_TCPIP_BIND":"");
	UINT64 utTcpipInterface:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_TCPIP_INTERFACE":"");
	UINT64 utTcpipRoute:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_TCPIP_ROUTE":"");
	UINT64 utTcpipCtcp:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_TCPIP_CTCP":"");
	UINT64 utTcpipDiagnosis:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_TCPIP_DIAGNOSIS":"");
	UINT64 Reserved1:24 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utConnectPath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utProcessIdHint:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_PID_HINT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utEndpoint:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_ENDPOINT":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utTransfer:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_TRANSFER":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 Reserved2:17 = FormatString("        (%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsTcpipSQMProvider_Keyword, "{C8F7689F-3692-4d66-B0C0-9536D21082C9}")]
struct TCPIP_MicrosoftWindowsTcpipSQMProvider_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
