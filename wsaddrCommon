//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Web Services Addressing 1.0 (WS-Addressing)
//#
//#  Details:                
//#
//#  Public References:      http://www.w3.org/standards/techs/wsaddr
//#                          http://www.w3.org/2006/03/addressing/ws-addr.xsd
//#                          http://schemas.xmlsoap.org/ws/2004/08/addressing
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 11/27/2009
//#                          Minor, 03/11/2010
//#
//####
/*
    Section 1. Constructs from the WS-Addressing Core

        wsaddrendpointreferenceelement
        wsaddrmessageidelement
        wsaddrrelatestoelement
        wsaddrreplytoelement
        wsaddrfromelement
        wsaddrfaulttoelement
        wsaddrtoelement
*/

//
// Element EndpointReference
//
struct WSADDREndpointReferenceElement = this.STag.Tostring
{
	[Post.Local.WSADDREndpointReferenceElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("EndpointReference") STag;
	switch
	{
		Case !Local.WSADDREndpointReferenceElement_IsEmpty:
			struct
			{
				WSADDREndpointReferenceType EndpointReferenceType;
				XmlTag("EndpointReference") ETag;
			}
	}
}

//
// ComplexType EndpointReferenceType
//
Struct WSADDREndpointReferenceType = Address.ToString
{
	struct Address = this.Address.ToString
	{
		[Post.Local.Address_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Address") STag;
		switch
		{
			Case !Local.Address_IsEmpty:
				struct
				{
					WSADDRAttributedURIType Address;
					XmlTag("Address") ETag;
				}
		}
	}
	
	//This element is from http://schemas.xmlsoap.org/ws/2004/08/addressing
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ReferenceProperties") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			WSADDRReferencePropertiesElement ReferenceParameters;
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ReferenceParameters") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			WSADDRReferenceParametersElement ReferenceParameters;
	}
	
	//This element is from http://schemas.xmlsoap.org/ws/2004/08/addressing
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "PortType") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			WSADDRPortTypeElement PortType;
	}
	
	//This element is from http://schemas.xmlsoap.org/ws/2004/08/addressing
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ServiceName") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			WSADDRServiceNameElement ServiceName;
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Metadata") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			WSADDRMetadataElement Metadata;
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		Switch
		{
			Default:
				XmlElement(true) OtherElement;
		}
	}
}

//
// Element ReferenceParameters
//
struct WSADDRReferenceParametersElement
{
	[Post.Local.WSADDRReferenceParametersElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ReferenceParameters") STag;
	switch
	{
		Case !Local.WSADDRReferenceParametersElement_IsEmpty:
			struct
			{
				WSADDRReferenceParametersType ReferenceParametersType;
				XmlTag("ReferenceParameters") ETag;
			}
	}
}

//
// ComplexType ReferenceParametersType
//
Struct WSADDRReferenceParametersType
{
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		Switch
		{
			default:
				XmlElement(true) OtherElement;
		}
	}
}

//
// Element ReferenceProperties
//
struct WSADDRReferencePropertiesElement
{
	[Post.Local.WSADDRReferencePropertiesElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ReferenceProperties") STag;
	switch
	{
		Case !Local.WSADDRReferencePropertiesElement_IsEmpty:
			struct
			{
				WSADDRReferencePropertiesType ReferencePropertiesType;
				XmlTag("ReferenceProperties") ETag;
			}
	}
}

//
// ComplexType ReferencePropertiesType
//
Struct WSADDRReferencePropertiesType
{
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// Element PortType
//
struct WSADDRPortTypeElement
{
	[Post.Local.WSADDRPortTypeElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("PortType") STag;
	switch
	{
		Case !Local.WSADDRPortTypeElement_IsEmpty:
			struct
			{
				StringTerm(Property.XMLEncoding, "<", true, false, false) PortType;
				XmlTag("PortType") ETag;
			}
	}
}

//
// Element ServiceName
//
struct WSADDRServiceNameElement
{
	[Post.Local.WSADDRServiceNameElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ServiceName") STag;
	switch
	{
		Case !Local.WSADDRServiceNameElement_IsEmpty:
			struct
			{
				StringTerm(Property.XMLEncoding, "<", true, false, false) ServiceName;
				XmlTag("ServiceName") ETag;
			}
	}
}

//
// Element Metadata
//
struct WSADDRMetadataElement
{
	[Post.Local.WSADDRMetadataElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Metadata") STag;
	switch
	{
		Case !Local.WSADDRMetadataElement_IsEmpty:
			struct
			{
				WSADDRMetadataType MetadataType;
				XmlTag("Metadata") ETag;
			}
	}
}

//
// ComplexType MetadataType
//
Struct WSADDRMetadataType
{
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// Element MessageID
//
[RegisterBefore(
    SoapHeader.SoapHeaderNodes.Node,
    MessageID,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MessageID"))]
struct WSADDRMessageIDElement = AttributedURIType.ToString
{
	[Post.Local.WSADDRMessageIDElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("MessageID") STag;
	switch
	{
		Case !Local.WSADDRMessageIDElement_IsEmpty:
			struct
			{
				WSADDRAttributedURIType AttributedURIType;
				switch
				{
					case Property.HttpIsRequest:
						[BuildConversationWithParent(AttributedURIType.WSADDRAnyURI.BaseType.BaseTypeValue)]
						struct{}
				}
				[Conversation.ConversationDescription = AttributedURIType.WSADDRAnyURI.BaseType.BaseTypeValue]
				[Conversation.WSMVResourceURICov = Property.WSMVResourceURI]
				[Conversation.WSADDRAction = IsValueNone(Conversation.WSADDRAction) && WSADDRActionElement ? Property.ActionURI : Conversation.WSADDRAction]
				[Property.SoapAction = Conversation.WSADDRAction]
				XmlTag("MessageID") ETag;
			}
	}
}

//
// Element RelatesTo
//
[RegisterBefore(
    SoapHeader.SoapHeaderNodes.Node,
    RelatesTo,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "RelatesTo"))]
struct WSADDRRelatesToElement = RelatesToType.ToString
{
	[Post.Local.WSADDRRelatesToElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("RelatesTo") STag;
	switch
	{
		Case !Local.WSADDRRelatesToElement_IsEmpty:
			struct
			{
				WSADDRRelatesToType RelatesToType;
				switch
				{
					case Property.HttpIsResponse:
						[BuildConversationWithParent(RelatesToType.WSADDRAnyURI.BaseType.BaseTypeValue)]
						struct{}
				}
				[Property.WSMVResourceURI = Conversation.WSMVResourceURICov]
				[Conversation.WSADDRAction = IsValueNone(Conversation.WSADDRAction) && WSADDRActionElement ? Property.ActionURI : Conversation.WSADDRAction]
				[Property.SoapAction = Conversation.WSADDRAction]
				XmlTag("RelatesTo") ETag;
			}
	}
}

//
// ComplexType RelatesToType
// Extended from StringTerm(Property.XMLEncoding, "<", true, false, false)
//
Struct WSADDRRelatesToType = WSADDRAnyURI.ToString
{
	WSADDRAnyURI WSADDRAnyURI;
}

//
// Element ReplyTo
//
[RegisterBefore(
    SoapHeader.SoapHeaderNodes.Node,
    ReplyTo,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ReplyTo"))]
struct WSADDRReplyToElement = EndpointReferenceType.ToString
{
	[Post.Local.WSADDRReplyToElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ReplyTo") STag;
	switch
	{
		Case !Local.WSADDRReplyToElement_IsEmpty:
			struct
			{
				WSADDREndpointReferenceType EndpointReferenceType;
				XmlTag("ReplyTo") ETag;
			}
	}
}

//
// Element From
//
[RegisterBefore(
    SoapHeader.SoapHeaderNodes.Node,
    From,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "From"))]
struct WSADDRFromElement = EndpointReferenceType.ToString
{
	[Post.Local.WSADDRFromElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("From") STag;
	switch
	{
		Case !Local.WSADDRFromElement_IsEmpty:
			struct
			{
				WSADDREndpointReferenceType EndpointReferenceType;
				XmlTag("From") ETag;
			}
	}
}

//
// Element FaultTo
//
[RegisterBefore(
    SoapHeader.SoapHeaderNodes.Node,
    FaultTo,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "FaultTo"))]
struct WSADDRFaultToElement = EndpointReferenceType.ToString
{
	[Post.Local.WSADDRFaultToElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("FaultTo") STag;
	switch
	{
		Case !Local.WSADDRFaultToElement_IsEmpty:
			struct
			{
				WSADDREndpointReferenceType EndpointReferenceType;
				XmlTag("FaultTo") ETag;
			}
	}
}

//
// Element To
//
[RegisterBefore(
    SoapHeader.SoapHeaderNodes.Node,
    To,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, true, false), "To>"))]
struct WSADDRToElement = AttributedURIType.ToString
{
	[Post.Local.WSADDRToElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("To") STag;
	switch
	{
		Case !Local.WSADDRToElement_IsEmpty:
			struct
			{
				WSADDRAttributedURIType AttributedURIType;
				XmlTag("To") ETag;
			}
	}
}

//
// Element Action
//
[RegisterBefore(
    SoapHeader.SoapHeaderNodes.Node,
    Action,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Action"))]
struct WSADDRActionElement = AttributedURIType.ToString
{
	[Post.Local.WSADDRActionElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Action") STag;
	switch
	{
		Case !Local.WSADDRActionElement_IsEmpty:
			struct
			{
				[Property.ActionURI = this.WSADDRAnyURI.BaseType.BaseTypeValue]
				WSADDRAttributedURIType AttributedURIType;
				switch
				{
					case ((Property.HttpIsRequest && WSADDRMessageIDElement) || (Property.HttpIsResponse && WSADDRRelatesToElement)):
						[Conversation.WSADDRAction =  IsValueNone(Conversation.WSADDRAction) ? Property.ActionURI : Conversation.WSADDRAction]
						[Property.SoapAction = Conversation.WSADDRAction]
						struct{};
				}
				XmlTag("Action") ETag;
			}
	}
}

//
// ComplexType AttributedURIType
// Extended from StringTerm(Property.XMLEncoding, "<", true, false, false)
//
Struct WSADDRAttributedURIType = WSADDRAnyURI.ToString
{
	WSADDRAnyURI WSADDRAnyURI;
}

Struct WSADDRAnyURI = BaseType
{
	[
		Property.XMLElementContentTerm.AddToProperty(" ", ADD_TO_PROPERTY_FLAG_NO_DUPLICATES), 
		Property.XMLElementContentTerm.AddToProperty("\t", ADD_TO_PROPERTY_FLAG_NO_DUPLICATES), 
		Property.XMLElementContentTerm.AddToProperty("\n", ADD_TO_PROPERTY_FLAG_NO_DUPLICATES), 
		Property.XMLElementContentTerm.AddToProperty("\r", ADD_TO_PROPERTY_FLAG_NO_DUPLICATES), 
		Property.XMLElementContentTerm.AddToProperty("<", ADD_TO_PROPERTY_FLAG_NO_DUPLICATES)
	]
	StringTerm(Property.XMLEncoding, "<", true, false, false) BaseType
	{
		while [ String(FrameData, FrameOffset, Property.XMLEncoding, 1) == Property.XMLSpace ]
		{
			DynamicSwitch String(Property.XMLEncoding, 1)
			{
				default: struct{}
			};
		}
		
		StringTerm(Property.XMLEncoding, Property.XMLElementContentTerm, true, false, false) BaseTypeValue;
	}
}

/*
    Section 2. Constructs from the WS-Addressing SOAP binding

        wsaddrretryafterelement
        wsaddrproblemheaderqnameelement
        wsaddrproblemirielement
        wsaddrproblemactionelement
*/

//
// Element RetryAfter
//
[RegisterBefore(
    SoapDetail.OtherElement,
    RetryAfter,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "RetryAfter"))]
struct WSADDRRetryAfterElement
{
	[Post.Local.WSADDRRetryAfterElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("RetryAfter") STag;
	switch
	{
		Case !Local.WSADDRRetryAfterElement_IsEmpty:
			struct
			{
				StringTerm(Property.XMLEncoding, "<", true, false, false) AttributedUnsignedLongType;
				XmlTag("RetryAfter") ETag;
			}
	}
}

//
// Element ProblemHeaderQName
//
[RegisterBefore(
    SoapDetail.OtherElement,
    ProblemHeaderQName,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ProblemHeaderQName"))]
struct WSADDRProblemHeaderQNameElement
{
	[Post.Local.WSADDRProblemHeaderQNameElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ProblemHeaderQName") STag;
	switch
	{
		Case !Local.WSADDRProblemHeaderQNameElement_IsEmpty:
			struct
			{
				StringTerm(Property.XMLEncoding, "<", true, false, false) AttributedQNameType;
				XmlTag("ProblemHeaderQName") ETag;
			}
	}
}

//
// Element ProblemIRI
//
[RegisterBefore(
    SoapDetail.OtherElement,
    ProblemIRI,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ProblemIRI"))]
struct WSADDRProblemIRIElement
{
	[Post.Local.WSADDRProblemIRIElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ProblemIRI") STag;
	switch
	{
		Case !Local.WSADDRProblemIRIElement_IsEmpty:
			struct
			{
				WSADDRAttributedURIType AttributedURIType;
				XmlTag("ProblemIRI") ETag;
			}
	}
}

//
// Element ProblemAction
//
[RegisterBefore(
    SoapDetail.OtherElement,
    ProblemAction,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ProblemAction"))]
struct WSADDRProblemActionElement
{
	[Post.Local.WSADDRProblemActionElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ProblemAction") STag;
	switch
	{
		Case !Local.WSADDRProblemActionElement_IsEmpty:
			struct
			{
				WSADDRProblemActionType ProblemActionType;
				XmlTag("ProblemAction") ETag;
			}
	}
}

//
// ComplexType ProblemActionType
//
Struct WSADDRProblemActionType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Action") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			WSADDRActionElement Action;
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "SoapAction") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct SoapAction
			{
				[Post.Local.SoapAction_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("SoapAction") STag;
				switch
				{
					Case !Local.SoapAction_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) SoapAction;
							XmlTag("SoapAction") ETag;
						}
				}
			}			
	}	
}

