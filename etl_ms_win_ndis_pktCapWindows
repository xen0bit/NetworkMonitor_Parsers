//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-ndis-packetcapture
//#
//#  Details:                
//#
//#  Public References:      microsoft-windows-ndis-packetcapture.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsNDISPacketCapture, "{2ED6006E-4729-4609-B423-3EE7BCD678EF}")]
Protocol NDISPacCap_MicrosoftWindowsNDISPacketCapture = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1001: [property.ETLSummary = this.ToString] NDISPacCap_PacketFragment PacketFragment;
		case 1002: [property.ETLSummary = this.ToString] NDISPacCap_PacketMetadata PacketMetadata;
		case 1011: [property.ETLSummary = this.ToString] NDISPacCap_CaptureRules CaptureRules;
		case 1012: [property.ETLSummary = this.ToString] NDISPacCap_DriverLoad DriverLoad;
		case 1013: [property.ETLSummary = this.ToString] NDISPacCap_DriverUnload DriverUnload;
		case 1014: [property.ETLSummary = this.ToString] NDISPacCap_LayerLoad LayerLoad;
		case 1015: [property.ETLSummary = this.ToString] NDISPacCap_LayerUnload LayerUnload;
		case 1016: [property.ETLSummary = this.ToString] NDISPacCap_CaptureRule CaptureRule;
		case 2001: [property.ETLSummary = this.ToString] NDISPacCap_DriverLoadError DriverLoadError;
		case 2002: [property.ETLSummary = this.ToString] NDISPacCap_LayerLoadError LayerLoadError;
		case 2003: [property.ETLSummary = this.ToString] NDISPacCap_RuleLoadError RuleLoadError;
		case 3001: [property.ETLSummary = this.ToString] NDISPacCap_StartLayerLoad StartLayerLoad;
		case 3002: [property.ETLSummary = this.ToString] NDISPacCap_EndLayerLoad EndLayerLoad;
		case 5000: [property.ETLSummary = this.ToString] NDISPacCap_RxPacketStart RxPacketStart;
		case 5001: [property.ETLSummary = this.ToString] NDISPacCap_RxPacketComplete RxPacketComplete;
		case 5002: [property.ETLSummary = this.ToString] NDISPacCap_TxPacketStart TxPacketStart;
		case 5003: [property.ETLSummary = this.ToString] NDISPacCap_TxPacketComplete TxPacketComplete;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table NDISPacCap_utOpcodeMap(value)
{
	switch(value)
	{
		case 1: "Start State";
		case 2: "End State";
		case 21: "Loading State";
		case 22: "Unloading State";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDISPacCap_RuleIdMap(value)
{
	switch(value)
	{
		case 2: "FrameControl";
		case 3: "MultiLayer";
		case 4: "InterfaceIndex";
		case 6: "EtherType";
		case 7: "Source MAC Address";
		case 8: "Destination MAC Address";
		case 9: "Any MAC Address";
		case 10: "Source IPv4 Address";
		case 11: "Destination IPv4 Address";
		case 12: "Any IPv4 Address";
		case 13: "Source IPv6 Address";
		case 14: "Destination IPv6 Address";
		case 15: "Any IPv6 Address";
		case 16: "IP Protocol";
		case 17: "Packet Truncate Bytes";
		case 18: "Custom MAC Offset";
		case 19: "Custom IP Offset";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDISPacCap_DirectiveMap(value)
{
	switch(value)
	{
		case 0: "OFF";
		case 1: "LTE";
		case 2: "GTE";
		case 3: "EQU";
		case 4: "MASK";
		case 5: "LIST";
		case 6: "RANGE";
		case 131: "NEQ";
		case 132: "NMASK";
		case 133: "NLIST";
		case 134: "NRANGE";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct NDISPacCap_PacketFragment = FormatString("Packet Fragment (%s bytes)", FragmentSize.ToString)
{
	UINT32 MiniportIfIndex;
	UINT32 LowerIfIndex;
	UINT32 FragmentSize;
	[DataFieldByteOrder = BigEndian]
	switch
	{
		case Property.UTEventFirstFragment && Property.UTEventLastFragment:
			switch
			{
				case Property.UTEventFragEthernet8023:
					Ethernet Ethernet;
				case Property.UTEventFragNative80211:
					UTWiFi wifi;
				case Property.UTEventFragWirelessWAN:
					UTWWan WirelessWAN;
			}
		default:
			BLOB(FragmentSize) Fragment;
	}
}
Struct NDISPacCap_PacketMetadata = FormatString("Packet Metadata (%s bytes)", MetadataSize.ToString)
{
	UINT32 MiniportIfIndex;
	UINT32 LowerIfIndex;
	UINT32 MetadataSize;
	// BLOB(MetadataSize) Metadata;
	UTWiFiMetadata Metadata;
}
Struct NDISPacCap_CaptureRules = FormatString("Capture Rules Count=%s", RulesCount.ToString)
{
	UINT32 RulesCount;
}
Struct NDISPacCap_DriverLoad = FormatString("Driver Loaded (FriendlyName=%s UniqueName=%s ServiceName=%s)", FriendlyName.ToString, UniqueName.ToString, ServiceName)
{
	UnicodeString FriendlyName;
	UnicodeString UniqueName;
	UnicodeString ServiceName;
	UnicodeString Version;
}
Struct NDISPacCap_DriverUnload = FormatString("Driver Unloaded (FriendlyName=%s UniqueName=%s ServiceName=%s)", FriendlyName.ToString, UniqueName.ToString, ServiceName)
{
	UnicodeString FriendlyName;
	UnicodeString UniqueName;
	UnicodeString ServiceName;
	UnicodeString Version;
}
Struct NDISPacCap_LayerLoad = FormatString("Attached to miniport interface %s above layer interface %s with media type %s (context=%s)", MiniportIfIndex.ToString, LowerIfIndex.ToString, MediaType.ToString, ReferenceContext.ToString)
{
	UINT32 MiniportIfIndex;
	UINT32 LowerIfIndex;
	UINT32 MediaType;
	UINT32 ReferenceContext;
}
Struct NDISPacCap_LayerUnload = FormatString("Detached from miniport interface %s above layer interface %s with media type %s (context=%s)", MiniportIfIndex.ToString, LowerIfIndex.ToString, MediaType.ToString, ReferenceContext.ToString)
{
	UINT32 MiniportIfIndex;
	UINT32 LowerIfIndex;
	UINT32 MediaType;
	UINT32 ReferenceContext;
}
Struct NDISPacCap_CaptureRule = FormatString("Capture Rule: Id=%s Directive=%s ValueLength=%s Value=%s", RuleId.ToString, Directive.ToString, Length.ToString, Value.ToString)
{
	UINT8 RuleId = NDISPacCap_RuleIdMap(this);
	UINT8 Directive = NDISPacCap_DirectiveMap(this);
	UINT16 Length;
	BLOB(Length) Value;
}
Struct NDISPacCap_DriverLoadError = FormatString("Driver load failed with status=%s at location %s", ErrorCode.ToString, Location.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDISPacCap_LayerLoadError = FormatString("FilterAttach failed with status=%s at location %s (context=%s)", ErrorCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDISPacCap_RuleLoadError = FormatString("Received Invalid Capture Rule: Id=%s Directive=%s ValueLength=%s Value=%s", RuleId.ToString, Directive.ToString, Length.ToString, Value.ToString)
{
	UINT8 RuleId = NDISPacCap_RuleIdMap(this);
	UINT8 Directive = NDISPacCap_DirectiveMap(this);
	UINT16 Length;
	BLOB(Length) Value;
}
Struct NDISPacCap_StartLayerLoad = FormatString("Entering state '%s' from state '%s' (location=%s, context=%s)", NextState.ToString, PreviousState.ToString, Location.ToString, Context.ToString)
{
	UINT8 PreviousState = NDISPacCap_utOpcodeMap(this);
	UINT8 NextState = NDISPacCap_utOpcodeMap(this);
	UINT32 Location;
	UINT32 Context;
}
Struct NDISPacCap_EndLayerLoad = FormatString("Entering state '%s' from state '%s' (location=%s, context=%s)", NextState.ToString, PreviousState.ToString, Location.ToString, Context.ToString)
{
	UINT8 PreviousState = NDISPacCap_utOpcodeMap(this);
	UINT8 NextState = NDISPacCap_utOpcodeMap(this);
	UINT32 Location;
	UINT32 Context;
}
Struct NDISPacCap_RxPacketStart = "Rx Packet Processing Start" {}; // Empty Struct
Struct NDISPacCap_RxPacketComplete = "Rx Packet Processing Complete" {}; // Empty Struct
Struct NDISPacCap_TxPacketStart = "Rx Packet Processing Start" {}; // Empty Struct
Struct NDISPacCap_TxPacketComplete = "Rx Packet Processing Complete" {}; // Empty Struct
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsNDISPacketCapture_Keyword, "{2ED6006E-4729-4609-B423-3EE7BCD678EF}")]
struct NDISPacCap_MicrosoftWindowsNDISPacketCapture_Keyword
{
	[Property.UTEventFragEthernet8023]
	UINT64 Ethernet8023:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_MEDIA_802_3":"");
	UINT64 Reserved1:8 = FormatString("        (%s)", this.ToBitString);
	[Property.UTEventFragWirelessWAN]
	UINT64 WirelessWAN:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_MEDIA_WIRELESS_WAN": "");
	UINT64 Reserved2:5 = FormatString("        (%s)", this.ToBitString);
	UINT64 Tunnel:1 = FormatString("           (%s) %s", this.ToBitString, this? "KW_MEDIA_TUNNEL": "");
	[Property.UTEventFragNative80211]
	UINT64 Native80211:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_MEDIA_NATIVE_802_11":"");
	UINT64 Reserved3:13 = FormatString("        (%s)", this.ToBitString);
	[Property.UTEventFirstFragment]
	UINT64 PacketStart:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_PACKET_START": "");
	[Property.UTEventLastFragment]
	UINT64 PacketEnd:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_PACKET_END":"");
	[Property.UTEventSend]
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND":"");
	[Property.UTEventReceive]
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 Reserved4:18 = FormatString("        (%s)", this.ToBitString);
}
