//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Terminal Services Workspace Provisioning Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-TSWP]: Terminal Services Workspace Provisioning Protocol Specification (2.0.1)
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 8/28/2009
//#                          Minor, 3/11/2009
//#
//####
[RegisterBefore(XMLParser_struct.SOAP, TSWP, Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ResourceCollection"))]
Protocol TSWP
{
	[Post.Local.TSWPmstnsResourceCollectionElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ResourceCollection") STag;
	switch
	{
		Case !Local.TSWPmstnsResourceCollectionElement_IsEmpty:
			struct
			{
				TSWPmstnsResourceCollectionType ResourceCollection;
				XmlTag("ResourceCollection") ETag;
			}
	}
}

//
// ComplexType ResourceCollectionType
//
Struct TSWPmstnsResourceCollectionType
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Publisher") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct Publisher= this.STag.ToString
		{
			[Post.Local.Publisher_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("Publisher") STag;
			switch
			{
				Case !Local.Publisher_IsEmpty:
					struct
					{
						TSWPmstnsPublisherType Publisher;
						XmlTag("Publisher") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType PublisherType
//
Struct TSWPmstnsPublisherType
{
	//
	// Embedded ComplexType 
	//
	struct Resources= this.STag.ToString
	{
		[Post.Local.Resources_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Resources") STag;
		switch
		{
			Case !Local.Resources_IsEmpty:
				struct
				{
					While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Resource") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
					{
						struct Resource= this.STag.ToString
						{
							[Post.Local.Resource_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("Resource") STag;
							switch
							{
								Case !Local.Resource_IsEmpty:
									struct
									{
										TSWPmstnsResourceType Resource;
										XmlTag("Resource") ETag;
									}
							}
						}
						
					}
					XmlTag("Resources") ETag;
				}
		}
	}
	
	//
	// Embedded ComplexType 
	//
	struct TerminalServers= this.STag.ToString
	{
		[Post.Local.TerminalServers_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("TerminalServers") STag;
		switch
		{
			Case !Local.TerminalServers_IsEmpty:
				struct
				{
					While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "TerminalServer") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
					{
						struct TerminalServer
						{
							XmlTag("TerminalServer") TerminalServer;
						}
						
					}
					XmlTag("TerminalServers") ETag;
				}
		}
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType ResourceType
//
Struct TSWPmstnsResourceType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Icons") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			//
			// Embedded ComplexType 
			//
			struct Icons= this.STag.ToString
			{
				[Post.Local.Icons_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Icons") STag;
				switch
				{
					Case !Local.Icons_IsEmpty:
						struct
						{
							While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
							{
								Switch
								{
									Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Icon16"):
										struct Icon16= this.STag.ToString
										{
											[Post.Local.Icon16_IsEmpty = Property.IsXmlEmptyElement]
											XmlTag("Icon16") STag;
											switch
											{
												Case !Local.Icon16_IsEmpty:
													struct
													{
														TSWPmstnsIconType Icon16;
														XmlTag("Icon16") ETag;
													}
											}
										}
										
									Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Icon32"):
										struct Icon32= this.STag.ToString
										{
											[Post.Local.Icon32_IsEmpty = Property.IsXmlEmptyElement]
											XmlTag("Icon32") STag;
											switch
											{
												Case !Local.Icon32_IsEmpty:
													struct
													{
														TSWPmstnsIconType Icon32;
														XmlTag("Icon32") ETag;
													}
											}
										}
										
									Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Icon48"):
										struct Icon48= this.STag.ToString
										{
											[Post.Local.Icon48_IsEmpty = Property.IsXmlEmptyElement]
											XmlTag("Icon48") STag;
											switch
											{
												Case !Local.Icon48_IsEmpty:
													struct
													{
														TSWPmstnsIconType Icon48;
														XmlTag("Icon48") ETag;
													}
											}
										}
										
									Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Icon64"):
										struct Icon64= this.STag.ToString
										{
											[Post.Local.Icon64_IsEmpty = Property.IsXmlEmptyElement]
											XmlTag("Icon64") STag;
											switch
											{
												Case !Local.Icon64_IsEmpty:
													struct
													{
														TSWPmstnsIconType Icon64;
														XmlTag("Icon64") ETag;
													}
											}
										}
										
									Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Icon100"):
										struct Icon100= this.STag.ToString
										{
											[Post.Local.Icon100_IsEmpty = Property.IsXmlEmptyElement]
											XmlTag("Icon100") STag;
											switch
											{
												Case !Local.Icon100_IsEmpty:
													struct
													{
														TSWPmstnsIconType Icon100;
														XmlTag("Icon100") ETag;
													}
											}
										}
										
									Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Icon256"):
										struct Icon256= this.STag.ToString
										{
											[Post.Local.Icon256_IsEmpty = Property.IsXmlEmptyElement]
											XmlTag("Icon256") STag;
											switch
											{
												Case !Local.Icon256_IsEmpty:
													struct
													{
														TSWPmstnsIconType Icon256;
														XmlTag("Icon256") ETag;
													}
											}
										}
										
									Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "IconRaw"):
										struct IconRaw= this.STag.ToString
										{
											[Post.Local.IconRaw_IsEmpty = Property.IsXmlEmptyElement]
											XmlTag("IconRaw") STag;
											switch
											{
												Case !Local.IconRaw_IsEmpty:
													struct
													{
														TSWPmstnsIconType IconRaw;
														XmlTag("IconRaw") ETag;
													}
											}
										}
										
								}
								
							}
							XmlTag("Icons") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "FileExtensions") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			//
			// Embedded ComplexType 
			//
			struct FileExtensions= this.STag.ToString
			{
				[Post.Local.FileExtensions_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("FileExtensions") STag;
				switch
				{
					Case !Local.FileExtensions_IsEmpty:
						struct
						{
							While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "FileExtension") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
							{
								struct FileExtension
								{
									[Post.Local.FileExtension_IsEmpty = Property.IsXmlEmptyElement]
									XmlTag("FileExtension") STag;
									switch
									{
										Case !Local.FileExtension_IsEmpty:
											struct
											{
												TSWPmstnsFileExtensionType FileExtension;
												XmlTag("FileExtension") ETag;
											}
									}
								}
								
							}
							XmlTag("FileExtensions") ETag;
						}
				}
			}
			
	}
	
	//
	// Embedded ComplexType 
	//
	struct HostingTerminalServers= this.STag.ToString
	{
		[Post.Local.HostingTerminalServers_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("HostingTerminalServers") STag;
		switch
		{
			Case !Local.HostingTerminalServers_IsEmpty:
				struct
				{
					While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "HostingTerminalServer") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
					{
						struct HostingTerminalServer= this.STag.ToString
						{
							[Post.Local.HostingTerminalServer_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("HostingTerminalServer") STag;
							switch
							{
								Case !Local.HostingTerminalServer_IsEmpty:
									struct
									{
										TSWPmstnsHostingTerminalServerType HostingTerminalServer;
										XmlTag("HostingTerminalServer") ETag;
									}
							}
						}
						
					}
					XmlTag("HostingTerminalServers") ETag;
				}
		}
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType IconType
//
Struct TSWPmstnsIconType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "FileContent") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct FileContent= this.FileContent
			{
				[Post.Local.FileContent_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("FileContent") STag;
				switch
				{
					Case !Local.FileContent_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) FileContent;
							XmlTag("FileContent") ETag;
						}
				}
			}
			
	}
	
}

//
// ComplexType FileExtensionType
//
Struct TSWPmstnsFileExtensionType
{
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType ResourceFileType
//
Struct TSWPmstnsResourceFileType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Content") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct Content=this.Content
			{
				[Post.Local.Content_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Content") STag;
				switch
				{
					Case !Local.Content_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Content;
							XmlTag("Content") ETag;
						}
				}
			}
			
	}
	
}

//
// ComplexType HostingTerminalServerType
//
Struct TSWPmstnsHostingTerminalServerType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ResourceFile") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct ResourceFile= this.STag.ToString
			{
				[Post.Local.ResourceFile_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ResourceFile") STag;
				switch
				{
					Case !Local.ResourceFile_IsEmpty:
						struct
						{
							TSWPmstnsResourceFileType ResourceFile;
							XmlTag("ResourceFile") ETag;
						}
				}
			}
			
	}
	
	struct TerminalServerRef
	{
		XmlTag("TerminalServerRef") TerminalServerRef;
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}
