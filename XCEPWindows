//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  X.509 Certificate Enrollment Policy Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-XCEP]: X.509 Certificate Enrollment Policy Protocol Specification (2.0)
//#
//#  Comments:               Microsoft implementation is encrypted
//#
//#  Revision Class and Date:Major, 8/10/2009
//#                          Minor, 3/11/2009
//#
//####

[Property.SoapBodySummary = "XCEP Payload"]
[RegisterBefore(SoapBody.DefaultSoapBody, XCEP, XCEPSoapActionTable(Property.SOAPAction))]
Protocol XCEP = Property.XCEPSummary
{
	Switch(Property.SOAPAction)
	{
		Case "http://schemas.microsoft.com/windows/pki/2009/01/enrollmentpolicy/IPolicy/GetPolicies":
		Case "http://schemas.microsoft.com/windows/pki/2009/01/enrollmentpolicy/IPolicy/GetPoliciesResponse":
			[Property.XCEPSummary = this.ToString]
			XCEPGetPolicies XCEPGetPolicies;
		Default:
			While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
			{
				XmlElement(true) AnyNode;
			}
	}
	
}

struct XCEPGetPolicies = FormatString("%s Message", Property.XCEPGetPoliciesSummary)
{
	[Post.Local.XCEPGetPolicies_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.XCEPGetPolicies_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetPoliciesResponse"):
						[Property.XCEPGetPoliciesSummary = "GetPolicies Response"]
						XCEPxcepGetPoliciesResponseElement GetPoliciesResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetPolicies"):
						[Property.XCEPGetPoliciesSummary = "GetPolicies Request"]
						XCEPxcepGetPoliciesElement GetPolicies;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.XCEPGetPoliciesSummary = "Fault GetPolicies Response"]
						SoapFaultElement FaultGetPoliciesElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.XCEPGetPoliciesSummary = "Encrypted GetPolicies Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

//
// Element commonName
//
struct XCEPxcepCommonNameElement = this.String
{
	[Post.Local.XCEPxcepCommonNameElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("commonName") STag;
	switch
	{
		Case !Local.XCEPxcepCommonNameElement_IsEmpty:
			struct
			{
				StringTerm(Property.XMLEncoding, "<", true, false, false) String;
				XmlTag("commonName") ETag;
			}
	}
}

//
// Element GetPolicies
// Embedded ComplexType 
//
struct XCEPxcepGetPoliciesElement = this.STag.ToString
{
	[Post.Local.XCEPxcepGetPoliciesElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("GetPolicies") STag;
	switch
	{
		Case !Local.XCEPxcepGetPoliciesElement_IsEmpty:
			struct
			{
				struct Client = this.STag.ToString
				{
					[Post.Local.Client_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("client") STag;
					switch
					{
						Case !Local.Client_IsEmpty:
							struct
							{
								XCEPxcepClient Client;
								XmlTag("client") ETag;
							}
					}
				}
				
				struct RequestFilter = this.STag.ToString
				{
					[Post.Local.RequestFilter_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("requestFilter") STag;
					switch
					{
						Case !Local.RequestFilter_IsEmpty:
							struct
							{
								XCEPxcepRequestFilter RequestFilter;
								XmlTag("requestFilter") ETag;
							}
					}
				}
				
				XmlTag("GetPolicies") ETag;
			}
	}
}

//
// Element GetPoliciesResponse
// Embedded ComplexType 
//
struct XCEPxcepGetPoliciesResponseElement = this.STag.ToString
{
	[Post.Local.XCEPxcepGetPoliciesResponseElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("GetPoliciesResponse") STag;
	switch
	{
		Case !Local.XCEPxcepGetPoliciesResponseElement_IsEmpty:
			struct
			{
				struct Response = this.STag.ToString
				{
					[Post.Local.Response_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("response") STag;
					switch
					{
						Case !Local.Response_IsEmpty:
							struct
							{
								XCEPxcepResponse Response;
								XmlTag("response") ETag;
							}
					}
				}
				
				struct CAs = this.STag.ToString
				{
					[Post.Local.CAs_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("cAs") STag;
					switch
					{
						Case !Local.CAs_IsEmpty:
							struct
							{
								XCEPxcepCACollection CAs;
								XmlTag("cAs") ETag;
							}
					}
				}
				
				struct OIDs = this.STag.ToString
				{
					[Post.Local.OIDs_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("oIDs") STag;
					switch
					{
						Case !Local.OIDs_IsEmpty:
							struct
							{
								XCEPxcepOIDCollection OIDs;
								XmlTag("oIDs") ETag;
							}
					}
				}
				
				XmlTag("GetPoliciesResponse") ETag;
			}
	}
}

//
// ComplexType Attributes
//
Struct XCEPxcepAttributes
{
	XCEPxcepCommonNameElement CommonName;
	struct PolicySchema = this.PolicySchema
	{
		[Post.Local.PolicySchema_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("policySchema") STag;
		switch
		{
			Case !Local.PolicySchema_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) PolicySchema;
					XmlTag("policySchema") ETag;
				}
		}
	}
	
	struct CertificateValidity = this.STag.ToString
	{
		[Post.Local.CertificateValidity_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("certificateValidity") STag;
		switch
		{
			Case !Local.CertificateValidity_IsEmpty:
				struct
				{
					XCEPxcepCertificateValidity CertificateValidity;
					XmlTag("certificateValidity") ETag;
				}
		}
	}
	
	struct Permission = this.STag.ToString
	{
		[Post.Local.Permission_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("permission") STag;
		switch
		{
			Case !Local.Permission_IsEmpty:
				struct
				{
					XCEPxcepEnrollmentPermission Permission;
					XmlTag("permission") ETag;
				}
		}
	}
	
	struct PrivateKeyAttributes = this.STag.ToString
	{
		[Post.Local.PrivateKeyAttributes_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("privateKeyAttributes") STag;
		switch
		{
			Case !Local.PrivateKeyAttributes_IsEmpty:
				struct
				{
					XCEPxcepPrivateKeyAttributes PrivateKeyAttributes;
					XmlTag("privateKeyAttributes") ETag;
				}
		}
	}
	
	struct Revision = this.STag.ToString
	{
		[Post.Local.Revision_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("revision") STag;
		switch
		{
			Case !Local.Revision_IsEmpty:
				struct
				{
					XCEPxcepRevision Revision;
					XmlTag("revision") ETag;
				}
		}
	}
	
	struct SupersededPolicies = this.STag.ToString
	{
		[Post.Local.SupersededPolicies_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("supersededPolicies") STag;
		switch
		{
			Case !Local.SupersededPolicies_IsEmpty:
				struct
				{
					XCEPxcepSupersededPolicies SupersededPolicies;
					XmlTag("supersededPolicies") ETag;
				}
		}
	}
	
	struct PrivateKeyFlags = this.PrivateKeyFlags
	{
		[Post.Local.PrivateKeyFlags_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("privateKeyFlags") STag;
		switch
		{
			Case !Local.PrivateKeyFlags_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) PrivateKeyFlags;
					XmlTag("privateKeyFlags") ETag;
				}
		}
	}
	
	struct SubjectNameFlags = this.SubjectNameFlags
	{
		[Post.Local.SubjectNameFlags_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("subjectNameFlags") STag;
		switch
		{
			Case !Local.SubjectNameFlags_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) SubjectNameFlags;
					XmlTag("subjectNameFlags") ETag;
				}
		}
	}
	
	struct EnrollmentFlags = this.EnrollmentFlags
	{
		[Post.Local.EnrollmentFlags_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("enrollmentFlags") STag;
		switch
		{
			Case !Local.EnrollmentFlags_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) EnrollmentFlags;
					XmlTag("enrollmentFlags") ETag;
				}
		}
	}
	
	struct GeneralFlags = this.GeneralFlags
	{
		[Post.Local.GeneralFlags_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("generalFlags") STag;
		switch
		{
			Case !Local.GeneralFlags_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) GeneralFlags;
					XmlTag("generalFlags") ETag;
				}
		}
	}
	
	struct HashAlgorithmOIDReference = this.HashAlgorithmOIDReference
	{
		[Post.Local.HashAlgorithmOIDReference_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("hashAlgorithmOIDReference") STag;
		switch
		{
			Case !Local.HashAlgorithmOIDReference_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) HashAlgorithmOIDReference;
					XmlTag("hashAlgorithmOIDReference") ETag;
				}
		}
	}
	
	struct RARequirements = this.STag.ToString
	{
		[Post.Local.RARequirements_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("rARequirements") STag;
		switch
		{
			Case !Local.RARequirements_IsEmpty:
				struct
				{
					XCEPxcepRARequirements RARequirements;
					XmlTag("rARequirements") ETag;
				}
		}
	}
	
	struct KeyArchivalAttributes = this.STag.ToString
	{
		[Post.Local.KeyArchivalAttributes_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("keyArchivalAttributes") STag;
		switch
		{
			Case !Local.KeyArchivalAttributes_IsEmpty:
				struct
				{
					XCEPxcepKeyArchivalAttributes KeyArchivalAttributes;
					XmlTag("keyArchivalAttributes") ETag;
				}
		}
	}
	
	struct Extensions = this.STag.ToString
	{
		[Post.Local.Extensions_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("extensions") STag;
		switch
		{
			Case !Local.Extensions_IsEmpty:
				struct
				{
					XCEPxcepExtensionCollection Extensions;
					XmlTag("extensions") ETag;
				}
		}
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType CA
//
Struct XCEPxcepCA
{
	struct Uris = this.STag.ToString
	{
		[Post.Local.Uris_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("uris") STag;
		switch
		{
			Case !Local.Uris_IsEmpty:
				struct
				{
					XCEPxcepCAURICollection Uris;
					XmlTag("uris") ETag;
				}
		}
	}
	
	struct Certificate = this.Certificate
	{
		[Post.Local.Certificate_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("certificate") STag;
		switch
		{
			Case !Local.Certificate_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) Certificate;
					XmlTag("certificate") ETag;
				}
		}
	}
	
	struct EnrollPermission = this.EnrollPermission
	{
		[Post.Local.EnrollPermission_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("enrollPermission") STag;
		switch
		{
			Case !Local.EnrollPermission_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) EnrollPermission;
					XmlTag("enrollPermission") ETag;
				}
		}
	}
	
	struct CAReferenceID = this.CAReferenceID
	{
		[Post.Local.CAReferenceID_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("cAReferenceID") STag;
		switch
		{
			Case !Local.CAReferenceID_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) CAReferenceID;
					XmlTag("cAReferenceID") ETag;
				}
		}
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType CACollection
//
Struct XCEPxcepCACollection
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "cA") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct CA = this.STag.ToString
		{
			[Post.Local.CA_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("cA") STag;
			switch
			{
				Case !Local.CA_IsEmpty:
					struct
					{
						XCEPxcepCA CA;
						XmlTag("cA") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType CAReferenceCollection
//
Struct XCEPxcepCAReferenceCollection
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "cAReference") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct CAReference = this.CAReference
		{
			[Post.Local.CAReference_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("cAReference") STag;
			switch
			{
				Case !Local.CAReference_IsEmpty:
					struct
					{
						StringTerm(Property.XMLEncoding, "<", true, false, false) CAReference;
						XmlTag("cAReference") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType CAURI
//
Struct XCEPxcepCAURI
{
	struct ClientAuthentication = this.ClientAuthentication
	{
		[Post.Local.ClientAuthentication_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("clientAuthentication") STag;
		switch
		{
			Case !Local.ClientAuthentication_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) ClientAuthentication;
					XmlTag("clientAuthentication") ETag;
				}
		}
	}
	
	struct Uri = this.Uri
	{
		[Post.Local.Uri_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("uri") STag;
		switch
		{
			Case !Local.Uri_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) Uri;
					XmlTag("uri") ETag;
				}
		}
	}
	
	struct Priority = this.Priority
	{
		[Post.Local.Priority_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("priority") STag;
		switch
		{
			Case !Local.Priority_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) Priority;
					XmlTag("priority") ETag;
				}
		}
	}
	
	struct RenewalOnly = this.RenewalOnly
	{
		[Post.Local.RenewalOnly_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("renewalOnly") STag;
		switch
		{
			Case !Local.RenewalOnly_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) RenewalOnly;
					XmlTag("renewalOnly") ETag;
				}
		}
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType CAURICollection
//
Struct XCEPxcepCAURICollection
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "cAURI") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct CAURI = this.STag.ToString
		{
			[Post.Local.CAURI_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("cAURI") STag;
			switch
			{
				Case !Local.CAURI_IsEmpty:
					struct
					{
						XCEPxcepCAURI CAURI;
						XmlTag("cAURI") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType CertificateEnrollmentPolicy
//
Struct XCEPxcepCertificateEnrollmentPolicy
{
	struct PolicyOIDReference = this.PolicyOIDReference
	{
		[Post.Local.PolicyOIDReference_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("policyOIDReference") STag;
		switch
		{
			Case !Local.PolicyOIDReference_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) PolicyOIDReference;
					XmlTag("policyOIDReference") ETag;
				}
		}
	}
	
	struct CAs = this.STag.ToString
	{
		[Post.Local.CAs_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("cAs") STag;
		switch
		{
			Case !Local.CAs_IsEmpty:
				struct
				{
					XCEPxcepCAReferenceCollection CAs;
					XmlTag("cAs") ETag;
				}
		}
	}
	
	struct Attributes = this.STag.ToString
	{
		[Post.Local.Attributes_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("attributes") STag;
		switch
		{
			Case !Local.Attributes_IsEmpty:
				struct
				{
					XCEPxcepAttributes Attributes;
					XmlTag("attributes") ETag;
				}
		}
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType CertificateValidity
//
Struct XCEPxcepCertificateValidity
{
	struct ValidityPeriodSeconds = this.ValidityPeriodSeconds
	{
		[Post.Local.ValidityPeriodSeconds_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("validityPeriodSeconds") STag;
		switch
		{
			Case !Local.ValidityPeriodSeconds_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) ValidityPeriodSeconds;
					XmlTag("validityPeriodSeconds") ETag;
				}
		}
	}
	
	struct RenewalPeriodSeconds = this.RenewalPeriodSeconds
	{
		[Post.Local.RenewalPeriodSeconds_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("renewalPeriodSeconds") STag;
		switch
		{
			Case !Local.RenewalPeriodSeconds_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) RenewalPeriodSeconds;
					XmlTag("renewalPeriodSeconds") ETag;
				}
		}
	}
	
}

//
// ComplexType Client
//
Struct XCEPxcepClient
{
	struct LastUpdate = this.LastUpdate
	{
		[Post.Local.LastUpdate_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("lastUpdate") STag;
		switch
		{
			Case !Local.LastUpdate_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) LastUpdate;
					XmlTag("lastUpdate") ETag;
				}
		}
	}
	
	struct PreferredLanguage = this.PreferredLanguage
	{
		[Post.Local.PreferredLanguage_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("preferredLanguage") STag;
		switch
		{
			Case !Local.PreferredLanguage_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) PreferredLanguage;
					XmlTag("preferredLanguage") ETag;
				}
		}
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType CryptoProviders
//
Struct XCEPxcepCryptoProviders
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "provider") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct Provider = this.Provider
		{
			[Post.Local.Provider_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("provider") STag;
			switch
			{
				Case !Local.Provider_IsEmpty:
					struct
					{
						StringTerm(Property.XMLEncoding, "<", true, false, false) Provider;
						XmlTag("provider") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType EnrollmentPermission
//
Struct XCEPxcepEnrollmentPermission
{
	struct Enroll = this.Enroll
	{
		[Post.Local.Enroll_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("enroll") STag;
		switch
		{
			Case !Local.Enroll_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) Enroll;
					XmlTag("enroll") ETag;
				}
		}
	}
	
	struct AutoEnroll = this.AutoEnroll
	{
		[Post.Local.AutoEnroll_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("autoEnroll") STag;
		switch
		{
			Case !Local.AutoEnroll_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) AutoEnroll;
					XmlTag("autoEnroll") ETag;
				}
		}
	}
	
}

//
// ComplexType Extension
//
Struct XCEPxcepExtension
{
	struct OIDReference = this.OIDReference
	{
		[Post.Local.OIDReference_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("oIDReference") STag;
		switch
		{
			Case !Local.OIDReference_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) OIDReference;
					XmlTag("oIDReference") ETag;
				}
		}
	}
	
	struct Critical = this.Critical
	{
		[Post.Local.Critical_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("critical") STag;
		switch
		{
			Case !Local.Critical_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) Critical;
					XmlTag("critical") ETag;
				}
		}
	}
	
	struct Value = this.Value
	{
		[Post.Local.Value_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("value") STag;
		switch
		{
			Case !Local.Value_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) Value;
					XmlTag("value") ETag;
				}
		}
	}
	
}

//
// ComplexType ExtensionCollection
//
Struct XCEPxcepExtensionCollection
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "extension") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct Extension = this.STag.ToString
		{
			[Post.Local.Extension_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("extension") STag;
			switch
			{
				Case !Local.Extension_IsEmpty:
					struct
					{
						XCEPxcepExtension Extension;
						XmlTag("extension") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType FilterOIDCollection
//
Struct XCEPxcepFilterOIDCollection
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "oid") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct Oid = this.Oid
		{
			[Post.Local.Oid_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("oid") STag;
			switch
			{
				Case !Local.Oid_IsEmpty:
					struct
					{
						StringTerm(Property.XMLEncoding, "<", true, false, false) Oid;
						XmlTag("oid") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType KeyArchivalAttributes
//
Struct XCEPxcepKeyArchivalAttributes
{
	struct SymmetricAlgorithmOIDReference = this.SymmetricAlgorithmOIDReference
	{
		[Post.Local.SymmetricAlgorithmOIDReference_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("symmetricAlgorithmOIDReference") STag;
		switch
		{
			Case !Local.SymmetricAlgorithmOIDReference_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) SymmetricAlgorithmOIDReference;
					XmlTag("symmetricAlgorithmOIDReference") ETag;
				}
		}
	}
	
	struct SymmetricAlgorithmKeyLength = this.SymmetricAlgorithmKeyLength
	{
		[Post.Local.SymmetricAlgorithmKeyLength_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("symmetricAlgorithmKeyLength") STag;
		switch
		{
			Case !Local.SymmetricAlgorithmKeyLength_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) SymmetricAlgorithmKeyLength;
					XmlTag("symmetricAlgorithmKeyLength") ETag;
				}
		}
	}
	
}

//
// ComplexType OID
//
Struct XCEPxcepOID
{
	struct Value = this.Value
	{
		[Post.Local.Value_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("value") STag;
		switch
		{
			Case !Local.Value_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) Value;
					XmlTag("value") ETag;
				}
		}
	}
	
	struct Group = this.Group
	{
		[Post.Local.Group_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("group") STag;
		switch
		{
			Case !Local.Group_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) Group;
					XmlTag("group") ETag;
				}
		}
	}
	
	struct OIDReferenceID = this.OIDReferenceID
	{
		[Post.Local.OIDReferenceID_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("oIDReferenceID") STag;
		switch
		{
			Case !Local.OIDReferenceID_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) OIDReferenceID;
					XmlTag("oIDReferenceID") ETag;
				}
		}
	}
	
	struct DefaultName = this.DefaultName
	{
		[Post.Local.DefaultName_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("defaultName") STag;
		switch
		{
			Case !Local.DefaultName_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) DefaultName;
					XmlTag("defaultName") ETag;
				}
		}
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType OIDCollection
//
Struct XCEPxcepOIDCollection
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "oID") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct OID = this.STag.ToString
		{
			[Post.Local.OID_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("oID") STag;
			switch
			{
				Case !Local.OID_IsEmpty:
					struct
					{
						XCEPxcepOID OID;
						XmlTag("oID") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType OIDReferenceCollection
//
Struct XCEPxcepOIDReferenceCollection
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "oIDReference") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct OIDReference = this.OIDReference
		{
			[Post.Local.OIDReference_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("oIDReference") STag;
			switch
			{
				Case !Local.OIDReference_IsEmpty:
					struct
					{
						StringTerm(Property.XMLEncoding, "<", true, false, false) OIDReference;
						XmlTag("oIDReference") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType PolicyCollection
//
Struct XCEPxcepPolicyCollection
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "policy") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct Policy = this.STag.ToString
		{
			[Post.Local.Policy_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("policy") STag;
			switch
			{
				Case !Local.Policy_IsEmpty:
					struct
					{
						XCEPxcepCertificateEnrollmentPolicy Policy;
						XmlTag("policy") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType PrivateKeyAttributes
//
Struct XCEPxcepPrivateKeyAttributes
{
	struct MinimalKeyLength = this.MinimalKeyLength
	{
		[Post.Local.MinimalKeyLength_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("minimalKeyLength") STag;
		switch
		{
			Case !Local.MinimalKeyLength_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) MinimalKeyLength;
					XmlTag("minimalKeyLength") ETag;
				}
		}
	}
	
	struct KeySpec = this.KeySpec
	{
		[Post.Local.KeySpec_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("keySpec") STag;
		switch
		{
			Case !Local.KeySpec_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) KeySpec;
					XmlTag("keySpec") ETag;
				}
		}
	}
	
	struct KeyUsageProperty = this.KeyUsageProperty
	{
		[Post.Local.KeyUsageProperty_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("keyUsageProperty") STag;
		switch
		{
			Case !Local.KeyUsageProperty_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) KeyUsageProperty;
					XmlTag("keyUsageProperty") ETag;
				}
		}
	}
	
	struct Permissions = this.Permissions
	{
		[Post.Local.Permissions_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("permissions") STag;
		switch
		{
			Case !Local.Permissions_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) Permissions;
					XmlTag("permissions") ETag;
				}
		}
	}
	
	struct AlgorithmOIDReference = this.AlgorithmOIDReference
	{
		[Post.Local.AlgorithmOIDReference_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("algorithmOIDReference") STag;
		switch
		{
			Case !Local.AlgorithmOIDReference_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) AlgorithmOIDReference;
					XmlTag("algorithmOIDReference") ETag;
				}
		}
	}
	
	struct CryptoProviders = this.STag.ToString
	{
		[Post.Local.CryptoProviders_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("cryptoProviders") STag;
		switch
		{
			Case !Local.CryptoProviders_IsEmpty:
				struct
				{
					XCEPxcepCryptoProviders CryptoProviders;
					XmlTag("cryptoProviders") ETag;
				}
		}
	}
	
}

//
// ComplexType RARequirements
//
Struct XCEPxcepRARequirements
{
	struct RASignatures = this.RASignatures
	{
		[Post.Local.RASignatures_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("rASignatures") STag;
		switch
		{
			Case !Local.RASignatures_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) RASignatures;
					XmlTag("rASignatures") ETag;
				}
		}
	}
	
	struct RAEKUs = this.STag.ToString
	{
		[Post.Local.RAEKUs_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("rAEKUs") STag;
		switch
		{
			Case !Local.RAEKUs_IsEmpty:
				struct
				{
					XCEPxcepOIDReferenceCollection RAEKUs;
					XmlTag("rAEKUs") ETag;
				}
		}
	}
	
	struct RAPolicies = this.STag.ToString
	{
		[Post.Local.RAPolicies_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("rAPolicies") STag;
		switch
		{
			Case !Local.RAPolicies_IsEmpty:
				struct
				{
					XCEPxcepOIDReferenceCollection RAPolicies;
					XmlTag("rAPolicies") ETag;
				}
		}
	}
	
}

//
// ComplexType RequestFilter
//
Struct XCEPxcepRequestFilter
{
	struct PolicyOIDs = this.STag.ToString
	{
		[Post.Local.PolicyOIDs_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("policyOIDs") STag;
		switch
		{
			Case !Local.PolicyOIDs_IsEmpty:
				struct
				{
					XCEPxcepFilterOIDCollection PolicyOIDs;
					XmlTag("policyOIDs") ETag;
				}
		}
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType Response
//
Struct XCEPxcepResponse
{
	struct PolicyID = this.PolicyID
	{
		[Post.Local.PolicyID_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("policyID") STag;
		switch
		{
			Case !Local.PolicyID_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) PolicyID;
					XmlTag("policyID") ETag;
				}
		}
	}
	
	struct PolicyFriendlyName = this.PolicyFriendlyName
	{
		[Post.Local.PolicyFriendlyName_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("policyFriendlyName") STag;
		switch
		{
			Case !Local.PolicyFriendlyName_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) PolicyFriendlyName;
					XmlTag("policyFriendlyName") ETag;
				}
		}
	}
	
	struct NextUpdateHours = this.NextUpdateHours
	{
		[Post.Local.NextUpdateHours_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("nextUpdateHours") STag;
		switch
		{
			Case !Local.NextUpdateHours_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) NextUpdateHours;
					XmlTag("nextUpdateHours") ETag;
				}
		}
	}
	
	struct PoliciesNotChanged = this.PoliciesNotChanged
	{
		[Post.Local.PoliciesNotChanged_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("policiesNotChanged") STag;
		switch
		{
			Case !Local.PoliciesNotChanged_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) PoliciesNotChanged;
					XmlTag("policiesNotChanged") ETag;
				}
		}
	}
	
	struct Policies = this.STag.ToString
	{
		[Post.Local.Policies_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("policies") STag;
		switch
		{
			Case !Local.Policies_IsEmpty:
				struct
				{
					XCEPxcepPolicyCollection Policies;
					XmlTag("policies") ETag;
				}
		}
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// ComplexType Revision
//
Struct XCEPxcepRevision
{
	struct MajorRevision = this.MajorRevision
	{
		[Post.Local.MajorRevision_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("majorRevision") STag;
		switch
		{
			Case !Local.MajorRevision_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) MajorRevision;
					XmlTag("majorRevision") ETag;
				}
		}
	}
	
	struct MinorRevision = this.MinorRevision
	{
		[Post.Local.MinorRevision_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("minorRevision") STag;
		switch
		{
			Case !Local.MinorRevision_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) MinorRevision;
					XmlTag("minorRevision") ETag;
				}
		}
	}
	
}

//
// ComplexType SupersededPolicies
//
Struct XCEPxcepSupersededPolicies
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "commonName") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XCEPxcepCommonNameElement CommonName;
	}
}

Table XCEPSoapActionTable(value)
{
	Switch(value)
	{
		Case "http://schemas.microsoft.com/windows/pki/2009/01/enrollmentpolicy/IPolicy/GetPolicies": 
		Case "http://schemas.microsoft.com/windows/pki/2009/01/enrollmentpolicy/IPolicy/GetPoliciesResponse": true;
		Default:false;
	}
}
