//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  SD Microsoft Distributed File System Replication Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-FRS2]: SD Microsoft Distributed File System Replication Protocol Specification (6.0)
//#
//#  Comments:               Parser Framework: PAC v2.1.1577.0
//#
//#  Revision Class and Date:Minor, 5/21/2009
//#
//####

Protocol FRS2 = FormatString( "%s %s%s%s%s%s", 
	Property.FRS2MethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.FRS2Summary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.FRS2Summary : "" )
{
	[Property.FRS2Summary = ""]
	[Property.FRS2MethodName = FRS2MethodNameTable( Property.MSRPCOpnum )]
	Switch( Property.MSRPCOpnum )
	{
		Case 0:
			_Struct CheckConnectivity
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 1:
			_Struct EstablishConnection
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 2:
			_Struct EstablishSession
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 3:
			_Struct RequestUpdates
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 4:
			_Struct RequestVersionVector
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 5:
			_Struct AsyncPoll
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 6:
			_Struct RequestRecords
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 7:
			_Struct UpdateCancel
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 8:
			_Struct RawGetFileData
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 9:
			_Struct RdcGetSignatures
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 10:
			_Struct RdcPushSourceNeeds
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 11:
			_Struct RdcGetFileData
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 12:
			_Struct RdcClose
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 13:
			_Struct InitializeFileTransferAsync
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 14:
			_Struct Opnum14NotUsedOnWire
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 15:
			_Struct RawGetFileDataAsync
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Case 16:
			_Struct RdcGetFileDataAsync
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Blob( FrameLength - FrameOffset ) EncryptedData;
						}
				}
			}
		
		Default:
			Switch
			{
				case IsValueNone(Property.MSRPCOpnum):
					struct
					{
						Blob( FrameLength - Offset ) data;
						ReportParserWarning("FRS2", "Property MSRPCOpnum is missing") ParserWarning;
					}
				default:
					ReportParserError( ParserErrorProtocolClassWindows, "FRS2", "Unknown FrsTransport method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
	}
}

Table FRS2MethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "CheckConnectivity";
		Case 1: "EstablishConnection";
		Case 2: "EstablishSession";
		Case 3: "RequestUpdates";
		Case 4: "RequestVersionVector";
		Case 5: "AsyncPoll";
		Case 6: "RequestRecords";
		Case 7: "UpdateCancel";
		Case 8: "RawGetFileData";
		Case 9: "RdcGetSignatures";
		Case 10: "RdcPushSourceNeeds";
		Case 11: "RdcGetFileData";
		Case 12: "RdcClose";
		Case 13: "InitializeFileTransferAsync";
		Case 14: "Opnum14NotUsedOnWire";
		Case 15: "RawGetFileDataAsync";
		Case 16: "RdcGetFileDataAsync";
		Default: "unknown";
	}
}

