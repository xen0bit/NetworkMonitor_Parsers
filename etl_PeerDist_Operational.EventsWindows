//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-PeerDist-Operational.Events
//#
//#  Details:                
//#
//#  Public References:      PeerDist-Operational.Events.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsBranchCache, "{7EAFCF79-06A7-460B-8A55-BD0A0C9248AA}")]
Protocol BranchCacheEvent_MicrosoftWindowsBranchCache = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] BranchCacheEvent_ServiceStartupEvent ServiceStartupEvent;
		case 2: [property.ETLSummary = this.ToString] BranchCacheEvent_ServiceShutdownEvent ServiceShutdownEvent;
		case 3: [property.ETLSummary = this.ToString] BranchCacheEvent_ServiceRoamingDetectedEvent ServiceRoamingDetectedEvent;
		case 4: [property.ETLSummary = this.ToString] BranchCacheEvent_ServiceStartupFailedEvent ServiceStartupFailedEvent;
		case 5: [property.ETLSummary = this.ToString] BranchCacheEvent_ConfigChangeEvent ConfigChangeEvent;
		case 6: [property.ETLSummary = this.ToString] BranchCacheEvent_HCDetectedBothServerAndClientSettingsEvent HCDetectedBothServerAndClientSettingsEvent;
		case 7: [property.ETLSummary = this.ToString] BranchCacheEvent_DiscoveryBlockedByFirewallEvent DiscoveryBlockedByFirewallEvent;
		case 8: [property.ETLSummary = this.ToString] BranchCacheEvent_DownloadBlockedByFirewallEvent DownloadBlockedByFirewallEvent;
		case 9: [property.ETLSummary = this.ToString] BranchCacheEvent_HCProtocolBlockedByFirewallEvent HCProtocolBlockedByFirewallEvent;
		case 10: [property.ETLSummary = this.ToString] BranchCacheEvent_UrlReservationRequiredEvent UrlReservationRequiredEvent;
		case 11: [property.ETLSummary = this.ToString] BranchCacheEvent_RepublishFailedToAllocateEvent RepublishFailedToAllocateEvent;
		case 12: [property.ETLSummary = this.ToString] BranchCacheEvent_PublishFailedToInitializeEvent PublishFailedToInitializeEvent;
		case 13: [property.ETLSummary = this.ToString] BranchCacheEvent_PublishFailedEvent PublishFailedEvent;
		case 14: [property.ETLSummary = this.ToString] BranchCacheEvent_DownloadFromPeerFailedEvent DownloadFromPeerFailedEvent;
		case 15: [property.ETLSummary = this.ToString] BranchCacheEvent_DownloadFromHCFailedEvent DownloadFromHCFailedEvent;
		case 16: [property.ETLSummary = this.ToString] BranchCacheEvent_PeerQuarantinedEvent PeerQuarantinedEvent;
		case 17: [property.ETLSummary = this.ToString] BranchCacheEvent_InvalidMessageEvent InvalidMessageEvent;
		case 18: [property.ETLSummary = this.ToString] BranchCacheEvent_PeerRequestDeniedEvent PeerRequestDeniedEvent;
		case 19: [property.ETLSummary = this.ToString] BranchCacheEvent_UnableToConnectToHCEvent UnableToConnectToHCEvent;
		case 20: [property.ETLSummary = this.ToString] BranchCacheEvent_HCOfferTimedOutEvent HCOfferTimedOutEvent;
		case 21: [property.ETLSummary = this.ToString] BranchCacheEvent_AccumulatedEvent AccumulatedEvent;
		case 22: [property.ETLSummary = this.ToString] BranchCacheEvent_FirewallRulesInconsistencyEvent FirewallRulesInconsistencyEvent;
		case 23: [property.ETLSummary = this.ToString] BranchCacheEvent_ClientDllServiceDisabledEvent ClientDllServiceDisabledEvent;
		case 24: [property.ETLSummary = this.ToString] BranchCacheEvent_LoadPersistedCacheFailedEvent LoadPersistedCacheFailedEvent;
		case 25: [property.ETLSummary = this.ToString] BranchCacheEvent_LoadPersistedCacheSucceededEvent LoadPersistedCacheSucceededEvent;
		case 26: [property.ETLSummary = this.ToString] BranchCacheEvent_SavePersistedCacheSucceededEvent SavePersistedCacheSucceededEvent;
		case 27: [property.ETLSummary = this.ToString] BranchCacheEvent_SavePersistedCacheFailedEvent SavePersistedCacheFailedEvent;
		case 28: [property.ETLSummary = this.ToString] BranchCacheEvent_ServiceShutdownStartEvent ServiceShutdownStartEvent;
		case 29: [property.ETLSummary = this.ToString] BranchCacheEvent_SSLCertNotConfiguredEvent SSLCertNotConfiguredEvent;
		case 30: [property.ETLSummary = this.ToString] BranchCacheEvent_RepublishFailedToInitializeEvent RepublishFailedToInitializeEvent;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct BranchCacheEvent_ServiceStartupEvent = FormatString("The BranchCache service started successfully.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_ServiceShutdownEvent = FormatString("The BranchCache service stopped successfully.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_ServiceRoamingDetectedEvent = FormatString("The BranchCache service detected that this computer roamed to a different location. Group Policy settings will refresh.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_ServiceStartupFailedEvent = FormatString("The BranchCache service failed to start. Error: %s %s", ErrorCode.ToString, ErrorMessage.ToString)
{
	UINT32 ErrorCode;
	UnicodeString ErrorMessage;
}
Struct BranchCacheEvent_ConfigChangeEvent = FormatString("A BranchCache configuration change was detected.")
{
	UnicodeString SubKey;
	UnicodeString ValueName;
	UINT32 SettingType;
	UINT32 UInt32;
	UINT64 UInt64;
	UnicodeString String;
	UINT32 BinaryLength;
	BLOB(BinaryLength) Binary;
}
Struct BranchCacheEvent_HCDetectedBothServerAndClientSettingsEvent = FormatString("This computer is configured as a Hosted Cache server and it is also configured to use a Hosted Cache. Only one of these options is allowed.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_DiscoveryBlockedByFirewallEvent = FormatString("A firewall is blocking inbound traffic on UDP port 3702, which is used to discover the availability of cached content on this computer. Other computers on the network cannot discover this client.  To create a Windows Firewall rule that allows traffic on UDP port 3702, run the command 'netsh branchcache set service distributed' from an elevated command prompt. If a different firewall is used, modify the firewall settings to allow this traffic.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_DownloadBlockedByFirewallEvent = FormatString("A firewall is blocking inbound traffic on TCP port 80, which is used to serve content to requesting computers. As a result, other computers on the network, including the Hosted Cache server, cannot retrieve content from this client.  To create a Windows Firewall rule that allows inbound traffic on TCP port 80, run the command 'netsh branchcache set service' from an elevated command prompt. If a different firewall is used, modify the firewall settings to allow this traffic.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_HCProtocolBlockedByFirewallEvent = FormatString("A firewall is blocking inbound traffic on TCP port 443, which is used by the Hosted Cache server for accepting incoming client offers to add content. As a result, clients cannot add content to the Hosted Cache.  To create a Windows Firewall rule that allows inbound traffic on TCP port 443, run the command 'netsh branchcache set service hostedserver' from an elevated command prompt. If a different firewall is used, modify the firewall settings to allow this traffic.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_UrlReservationRequiredEvent = FormatString("The BranchCache service cannot start because the HTTP namespace used for serving content to requesting clients is not reserved.  Run the command 'netsh branchcache set service' from an elevated command prompt.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_RepublishFailedToAllocateEvent = FormatString("Content was not cached. BranchCache cannot free enough space in the local cache to accommodate the content being added.  The maximum cache size is %s MB. To increase the cache size, run the command 'netsh branchcache set cachesize' from an elevated command prompt and ensure that the disk where the local cache is saved has enough free space.", CacheSize.ToString)
{
	UINT32 CacheSize;
}
Struct BranchCacheEvent_PublishFailedToInitializeEvent = FormatString("BranchCache cannot publish the content at location %s. Error: %s %s This might be because the publication directory location is not on an NTFS partition, the path is too long (typically, greater than 190 characters) or does not exist, or the BranchCache service does not have the permissions to write to the directory location.  Run the command 'netsh branchcache set publicationcache' from an elevated command prompt.", Path.ToString, ErrorCode.ToString, ErrorMessage.ToString)
{
	UnicodeString Path;
	UINT32 ErrorCode;
	UnicodeString ErrorMessage;
}
Struct BranchCacheEvent_PublishFailedEvent = FormatString("BranchCache cannot publish the content with content-id: %s because the publication cache size was exceeded or the disk does not have enough space. Error: %s %s Run the command 'netsh branchcache set publicationcachesize' from an elevated command prompt to increase the cache size.", ContentId.ToString, ErrorCode.ToString, ErrorMessage.ToString)
{
	UINT16 cbContentId;
	BLOB(cbContentId) ContentId;
	UINT32 ErrorCode;
	UnicodeString ErrorMessage;
}
Struct BranchCacheEvent_DownloadFromPeerFailedEvent = FormatString("A request message sent to another BranchCache client failed. Error: %s %s", ErrorCode.ToString, ErrorMessage.ToString)
{
	UINT32 cbSegmentId;
	BLOB(cbSegmentId) SegmentId;
	UINT32 BlockId;
	AsciiString PeerAddress;
	UINT32 MessageType;
	UINT32 ErrorCode;
	UnicodeString ErrorMessage;
}
Struct BranchCacheEvent_DownloadFromHCFailedEvent = FormatString("A request message sent to the Hosted Cache server failed. Error: %s %s", ErrorCode.ToString, ErrorMessage.ToString)
{
	UINT32 cbSegmentId;
	BLOB(cbSegmentId) SegmentId;
	UINT32 BlockId;
	AsciiString HostedCacheAddress;
	UINT32 MessageType;
	UINT32 ErrorCode;
	UnicodeString ErrorMessage;
}
Struct BranchCacheEvent_PeerQuarantinedEvent = FormatString("Another BranchCache client has been quarantined by this client for approximately %s seconds. This might be because the client served data that was not valid or it repeatedly failed to serve data in a timely fashion.", SecondsOfQuarantine.ToString)
{
	AsciiString PeerAddress;
	UINT32 SecondsOfQuarantine;
}
Struct BranchCacheEvent_InvalidMessageEvent = FormatString("A request message from another BranchCache client was dropped because it was not valid. Remote client address: %s Error: %s %s", FromAddress.ToString, ErrorCode.ToString, ErrorMessage.ToString)
{
	AsciiString FromAddress;
	UINT32 MessageType;
	UINT32 ErrorCode;
	UnicodeString ErrorMessage;
}
Struct BranchCacheEvent_PeerRequestDeniedEvent = FormatString("A content retrieval request from another BranchCache client was denied. Remote client address: %s Error: %s %s", PeerAddress.ToString, ErrorCode.ToString, ErrorMessage.ToString)
{
	AsciiString PeerAddress;
	UINT32 ErrorCode;
	UnicodeString ErrorMessage;
}
Struct BranchCacheEvent_UnableToConnectToHCEvent = FormatString("BranchCache tried to offer content to the Hosted Cache server on %s, but there was an error connecting to the Hosted Cache server.  Error: %s %s  Possible reasons are that the Hosted Cache server location is incorrect, the port used for connection is not configured correctly on the client, or traffic on the port used for connection is blocked by a firewall on the Hosted Cache server.  From an elevated command prompt, run the command 'netsh branchcache set service hostedclient' (on client computers), and run the command 'netsh branchcache set service hostedserver' (on server computers).", HostedCacheLocation.ToString, ErrorCode.ToString, ErrorMessage.ToString)
{
	UnicodeString HostedCacheLocation;
	UINT32 ErrorCode;
	UnicodeString ErrorMessage;
}
Struct BranchCacheEvent_HCOfferTimedOutEvent = FormatString("BranchCache tried to offer content to the Hosted Cache server on %s, but the request timed out. The Hosted Cache server might be experiencing heavy loads or might not be reachable because of network or authentication issues.", HostedCacheLocation.ToString)
{
	UnicodeString HostedCacheLocation;
}
Struct BranchCacheEvent_AccumulatedEvent = FormatString("%s instance(s) of event id %s occurred.", Count.ToString, EventId.ToString)
{
	UINT32 EventId;
	UINT32 Count;
}
Struct BranchCacheEvent_FirewallRulesInconsistencyEvent = FormatString("The Windows Firewall rules for the BranchCache service are not configured correctly.  Run the command 'netsh branchcache set service' to set the Windows Firewall configuration correctly.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_ClientDllServiceDisabledEvent = FormatString("The BranchCache service could not be started because it has been disabled.  Use the Services snap-in console to set the Startup Type for the BranchCache service to 'Manual' on client computers and to 'Automatic' on server computers.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_LoadPersistedCacheFailedEvent = FormatString("The BranchCache service started, but was unable to load the cache file from disk because the cache file was corrupted or was an incompatible version. Sub code: %s Error: %s %s", SubCode.ToString, ErrorCode.ToString, ErrorMessage.ToString)
{
	UINT32 ErrorCode;
	UINT32 SubCode;
	UnicodeString ErrorMessage;
}
Struct BranchCacheEvent_LoadPersistedCacheSucceededEvent = FormatString("The BranchCache service started and loaded a cache file from disk that was saved on %s.", Timestamp.ToString)
{
	UnicodeString Timestamp;
}
Struct BranchCacheEvent_SavePersistedCacheSucceededEvent = FormatString("BranchCache saved a cache file to disk on %s.", Timestamp.ToString)
{
	UnicodeString Timestamp;
}
Struct BranchCacheEvent_SavePersistedCacheFailedEvent = FormatString("The BranchCache service stopped and was unable to save the cache file to disk. Error: %s %s", ErrorCode.ToString, ErrorMessage.ToString)
{
	UINT32 ErrorCode;
	UnicodeString ErrorMessage;
}
Struct BranchCacheEvent_ServiceShutdownStartEvent = FormatString("The BranchCache service is stopping.")
{
	_struct Empty{};
}
Struct BranchCacheEvent_SSLCertNotConfiguredEvent = FormatString("An SSL certificate is not bound to the port %s on the Hosted Cache server. As a result, clients cannot add content to the Hosted Cache. Run the command 'netsh http add sslcert' from an elevated command prompt to bind a certificate.", Port.ToString)
{
	UINT32 Port;
}
Struct BranchCacheEvent_RepublishFailedToInitializeEvent = FormatString("BranchCache cannot initialize the local cache at location %s. Error: %s %s Possible reasons are that the local cache directory location is not on an NTFS partition, the path is too long (typically, greater than 190 characters) or does not exist, or the BranchCache service does not have the permissions to write to the directory location.  Run the command 'netsh branchcache set localcache' from an elevated command prompt.", CachePath.ToString, ErrorCode.ToString, ErrorMessage.ToString)
{
	UnicodeString CachePath;
	UINT32 ErrorCode;
	UnicodeString ErrorMessage;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsBranchCacheEventProvider, "{DD85457F-4E2D-44a5-A7A7-6253362E34DC}")]
Protocol BranchCacheEvent_MicrosoftWindowsBranchCacheEventProvider = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 10000: [property.ETLSummary = this.ToString] BranchCacheEvent_CreateRequestEvent CreateRequestEvent;
		case 10001: [property.ETLSummary = this.ToString] BranchCacheEvent_SendRequestEvent SendRequestEvent;
		case 10002: [property.ETLSummary = this.ToString] BranchCacheEvent_SendResponseEvent SendResponseEvent;
		case 10003: [property.ETLSummary = this.ToString] BranchCacheEvent_CloseRequestEvent CloseRequestEvent;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct BranchCacheEvent_CreateRequestEvent = FormatString("CreateRequest")
{
	_struct Empty{};
}
Struct BranchCacheEvent_SendRequestEvent = FormatString("SendRequest")
{
	_struct Empty{};
}
Struct BranchCacheEvent_SendResponseEvent = FormatString("SendResponse")
{
	_struct Empty{};
}
Struct BranchCacheEvent_CloseRequestEvent = FormatString("CloseRequest")
{
	_struct Empty{};
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsBranchCacheClientEventProvider, "{E837619C-A2A8-4689-833F-47B48EBD2442}")]
Protocol BranchCacheEvent_MicrosoftWindowsBranchCacheClientEventProvider = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 10100: [property.ETLSummary = this.ToString] BranchCacheEvent_ClientOpenContentEvent ClientOpenContentEvent;
		case 10101: [property.ETLSummary = this.ToString] BranchCacheEvent_ClientCloseContentEvent ClientCloseContentEvent;
		case 10102: [property.ETLSummary = this.ToString] BranchCacheEvent_ClientAddDataEvent ClientAddDataEvent;
		case 10103: [property.ETLSummary = this.ToString] BranchCacheEvent_ClientAddDataCompleteEvent ClientAddDataCompleteEvent;
		case 10104: [property.ETLSummary = this.ToString] BranchCacheEvent_ClientBlockReadEvent ClientBlockReadEvent;
		case 10105: [property.ETLSummary = this.ToString] BranchCacheEvent_ClientBlockReadCompleteEvent ClientBlockReadCompleteEvent;
		case 10106: [property.ETLSummary = this.ToString] BranchCacheEvent_ClientStreamReadEvent ClientStreamReadEvent;
		case 10107: [property.ETLSummary = this.ToString] BranchCacheEvent_ClientStreamReadCompleteEvent ClientStreamReadCompleteEvent;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct BranchCacheEvent_ClientOpenContentEvent = FormatString("ClientOpenContent")
{
	_struct Empty{};
}
Struct BranchCacheEvent_ClientCloseContentEvent = FormatString("ClientCloseContent")
{
	_struct Empty{};
}
Struct BranchCacheEvent_ClientAddDataEvent = FormatString("ClientAddData")
{
	_struct Empty{};
}
Struct BranchCacheEvent_ClientAddDataCompleteEvent = FormatString("ClientAddDataComplete")
{
	HRESULT ErrorCode;
}
Struct BranchCacheEvent_ClientBlockReadEvent = FormatString("ClientBlockRead")
{
	_struct Empty{};
}
Struct BranchCacheEvent_ClientBlockReadCompleteEvent = FormatString("ClientBlockReadComplete")
{
	HRESULT ErrorCode;
}
Struct BranchCacheEvent_ClientStreamReadEvent = FormatString("ClientStreamRead")
{
	_struct Empty{};
}
Struct BranchCacheEvent_ClientStreamReadCompleteEvent = FormatString("ClientStreamReadComplete")
{
	HRESULT ErrorCode;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsBranchCache_Keyword, "{7EAFCF79-06A7-460B-8A55-BD0A0C9248AA}")]
struct BranchCacheEvent_MicrosoftWindowsBranchCache_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsBranchCacheEventProvider_Keyword, "{DD85457F-4E2D-44a5-A7A7-6253362E34DC}")]
struct BranchCacheEvent_MicrosoftWindowsBranchCacheEventProvider_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsBranchCacheClientEventProvider_Keyword, "{E837619C-A2A8-4689-833F-47B48EBD2442}")]
struct BranchCacheEvent_MicrosoftWindowsBranchCacheClientEventProvider_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
