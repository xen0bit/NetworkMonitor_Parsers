//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  .NET Binary Format: XML Data Structure
//#
//#  Details:                
//#
//#  Public References:      [MC-NBFX]: .NET Binary Format: XML Data Structure
//#
//#  Comments:               Parser Framework: PAC v2.1.1991.0
//#
//#  Revision Class and Date:Major, 02/26/2010
//#                          Minor, 04/02/2010
//#
//####


//
//	Record
//
[DataTypeByteOrder = LittleEndian]
struct NBFXRecord = NBFXRecordTable( RecordType )
{
	UINT8 RecordType = NBFXRecordTable( this );
	switch
	{
		case RecordType == 0x01:
			NBFXEndElement EndElement;
		case RecordType == 0x02:
			NBFXComment Comment;
		case RecordType == 0x03:
			NBFXArray Array;
		case RecordType == 0x04:
			NBFXShortAttribute ShortAttribute;
		case RecordType == 0x05:
			NBFXAttribute Attribute;
		case RecordType == 0x06:
			NBFXShortDictionaryAttribute ShortDictionaryAttribute;
		case RecordType == 0x07:
			NBFXDictionaryAttribute DictionaryAttribute;
		case RecordType == 0x08:
			NBFXShortXmlnsAttribute ShortXmlnsAttribute;
		case RecordType == 0x09:
			NBFXXmlnsAttribute XmlnsAttribute;
		case RecordType == 0x0A:
			NBFXShortDictionaryXmlnsAttribute ShortDictionaryXmlnsAttribute;
		case RecordType == 0x0B:
			NBFXDictionaryXmlnsAttribute DictionaryXmlnsAttribute;
		case (RecordType >= 0x0C) && (RecordType <= 0x25 ):
			NBFXPrefixDictionaryAttributeAZ(RecordType) PrefixDictionaryAttribute;
		case (RecordType >= 0x26) && (RecordType <= 0x3F ):
			NBFXPrefixAttributeAZ(RecordType) PrefixAttribute;
		case RecordType == 0x40:
			NBFXShortElement ShortElement;
		case RecordType == 0x41:
			NBFXElement Element;
		case RecordType == 0x42:
			NBFXShortDictionaryElement ShortDictionaryElement;
		case RecordType == 0x43:
			NBFXDictionaryElement DictionaryElement;
		case (RecordType >= 0x44) && (RecordType <= 0x5D ):
			NBFXPrefixDictionaryElementAZ(RecordType) PrefixDictionaryElement;
		case (RecordType >= 0x5E) && (RecordType <= 0x77 ):
			NBFXPrefixElementAZ(RecordType) PrefixElement;
		case RecordType == 0x80:
			NBFXZeroText ZeroText;
		case RecordType == 0x81:
			NBFXZeroTextWithEndElement ZeroTextWithEndElement;
		case RecordType == 0x82:
			NBFXOneText OneText;
		case RecordType == 0x83:
			NBFXOneTextWithEndElement OneTextWithEndElement;
		case RecordType == 0x84:
			NBFXFalseText FalseText;
		case RecordType == 0x85: 
			NBFXFalseTextWithEndElement FalseTextWithEndElement;
		case RecordType == 0x86: 
			NBFXTrueText TrueText;
		case RecordType == 0x87: 
			NBFXTrueTextWithEndElement TrueTextWithEndElement;
		case RecordType == 0x88: 
			NBFXInt8Text Int8Text;
		case RecordType == 0x89: 
			NBFXInt8TextWithEndElement Int8TextWithEndElement;
		case RecordType == 0x8A: 
			NBFXInt16Text Int16Text;
		case RecordType == 0x8B: 
			NBFXInt16TextWithEndElement Int16TextWithEndElement;
		case RecordType == 0x8C: 
			NBFXInt32Text Int32Text;
		case RecordType == 0x8D: 
			NBFXInt32TextWithEndElement Int32TextWithEndElement;
		case RecordType == 0x8E: 
			NBFXInt64Text Int64Text;
		case RecordType == 0x8F: 
			NBFXInt64TextWithEndElement Int64TextWithEndElement;
		case RecordType == 0x90: 
			NBFXFloatText FloatText;
		case RecordType == 0x91: 
			NBFXFloatTextWithEndElement FloatTextWithEndElement;
		case RecordType == 0x92: 
			NBFXDoubleText DoubleText;
		case RecordType == 0x93: 
			NBFXDoubleTextWithEndElement DoubleTextWithEndElement;
		case RecordType == 0x94: 
			NBFXDecimalText DecimalText;
		case RecordType == 0x95: 
			NBFXDecimalTextWithEndElement DecimalTextWithEndElement;
		case RecordType == 0x96: 
			NBFXDateTimeText DateTimeText;
		case RecordType == 0x97: 
			NBFXDateTimeTextWithEndElement DateTimeTextWithEndElement;
		case RecordType == 0x98:
			NBFXChars8Text Chars8Text;
		case RecordType == 0x99: 
			NBFXChars8TextWithEndElement Chars8TextWithEndElement;
		case RecordType == 0x9A: 
			NBFXChars16Text Chars16Text;
		case RecordType == 0x9B: 
			NBFXChars16TextWithEndElement Chars16TextWithEndElement;
		case RecordType == 0x9C: 
			NBFXChars32Text Chars32Text;
		case RecordType == 0x9D:
			NBFXChars32TextWithEndElement Chars32TextWithEndElement;
		case RecordType == 0x9E: 
			NBFXBytes8Text Bytes8Text;
		case RecordType == 0x9F: 
			NBFXBytes8TextWithEndElement Bytes8TextWithEndElement;
		case RecordType == 0xA0: 
			NBFXBytes16Text Bytes16Text;
		case RecordType == 0xA1: 
			NBFXBytes16TextWithEndElement Bytes16TextWithEndElement;
		case RecordType == 0xA2: 
			NBFXBytes32Text Bytes32Text;
		case RecordType == 0xA3: 
			NBFXBytes32TextWithEndElement Bytes32TextWithEndElement;
		case RecordType == 0xA4: 
			NBFXStartListText StartListText;
		case RecordType == 0xA6:
			NBFXEndListText EndListText;
		case RecordType == 0xA8: 
			NBFXEmptyText EmptyText;
		case RecordType == 0xA9: 
			NBFXEmptyTextWithEndElement EmptyTextWithEndElement;
		case RecordType == 0xAA: 
			NBFXDictionaryText DictionaryText;
		case RecordType == 0xAB: 
			NBFXDictionaryTextWithEndElement DictionaryTextWithEndElement;
		case RecordType == 0xAC: 
			NBFXUniqueIdText UniqueIdText;
		case RecordType == 0xAD: 
			NBFXUniqueIdTextWithEndElement UniqueIdTextWithEndElement;
		case RecordType == 0xAE: 
			NBFXTimeSpanText TimeSpanText;
		case RecordType == 0xAF: 
			NBFXTimeSpanTextWithEndElement TimeSpanTextWithEndElement;
		case RecordType == 0xB0: 
			NBFXUuidText UuidText;
		case RecordType == 0xB1: 
			NBFXUuidTextWithEndElement UuidTextWithEndElement;
		case RecordType == 0xB2: 
			NBFXUInt64Text UInt64Text;
		case RecordType == 0xB3:
			NBFXUInt64TextWithEndElement UInt64TextWithEndElement;
		case RecordType == 0xB4: 
			NBFXBoolText BoolText;
		case RecordType == 0xB5: 
			NBFXBoolTextWithEndElement BoolTextWithEndElement;
		case RecordType == 0xB6: 
			NBFXUnicodeChars8Text UnicodeChars8Text;
		case RecordType == 0xB7: 
			NBFXUnicodeChars8TextWithEndElement UnicodeChars8TextWithEndElement;
		case RecordType == 0xB8: 
			NBFXUnicodeChars16Text UnicodeChars16Text;
		case RecordType == 0xB9: 
			NBFXUnicodeChars16TextWithEndElement UnicodeChars16TextWithEndElement;
		case RecordType == 0xBA: 
			NBFXUnicodeChars32Text UnicodeChars32Text;
		case RecordType == 0xBB: 
			NBFXUnicodeChars32TextWithEndElement UnicodeChars32TextWithEndElement;
		case RecordType == 0xBC: 
			NBFXQNameDictionaryText QNameDictionaryText;
		case RecordType == 0xBD: 
			NBFXQNameDictionaryTextWithEndElement QNameDictionaryTextWithEndElement;
		default:
			struct
			{
				ReportParserError(ParserErrorProtocolClassWindows, "NBFX", "Unknown Record Type")  ErrorRecordType;
				BLOB(FrameLength - FrameOffset ) UnknownData;
			}
	}
}


//
//	Array Record
//
struct NBFXArray = FormatString("%s",RecordType.ToString)
{
	NBFXRecord Element;
	NBFXRecord EndElement;
	UINT8 RecordType = NBFXRecordTable(this);
	NBFXMultiByteInt31 Length;
	
	// caculate the number of elements data that contained in data field
	[
		Local.RecordSize = NBFXRecordSizeTable( RecordType ),
		Local.Count = (Local.RecordSize != 0 ) ? Property.NBFXByteLen / Local.RecordSize : 0,
		DataFieldFrameLength = FrameOffset + Property.NBFXByteLen
	]
	struct Data
	{
		switch (RecordType)
		{
			case 0x8B:
				[ MaxLoopCount = Local.Count ]
				while [ FrameOffset < frameLength ]
				{
					NBFXInt16TextWithEndElement Int16TextWithEndElement;
				};
			case 0x8D:
				[ MaxLoopCount = Local.Count ]
				while [ FrameOffset < frameLength ]
				{
					NBFXInt32TextWithEndElement Int32TextWithEndElement;
				};
			case 0x8F:
				[ MaxLoopCount = Local.Count ]
				while [ FrameOffset < frameLength ]
				{
					NBFXInt64TextWithEndElement Int64TextWithEndElement;
				};
			case 0x91:
				[ MaxLoopCount = Local.Count ]
				while [ FrameOffset < frameLength ]
				{
					NBFXFloatTextWithEndElement FloatTextWithEndElement;
				};
			case 0x93:
				[ MaxLoopCount = Local.Count ]
				while [ FrameOffset < frameLength ]
				{
					NBFXDoubleTextWithEndElement DoubleTextWithEndElement;
				};
			case 0x95:
				[ MaxLoopCount = Local.Count ]
				while [ FrameOffset < frameLength ]
				{
					NBFXDecimalTextWithEndElement DecimalTextWithEndElement;
				};
			case 0x97:
				[ MaxLoopCount = Local.Count ]
				while [ FrameOffset < frameLength ]
				{
					NBFXDateTimeTextWithEndElement DateTimeTextWithEndElement;
				};
			case 0xAF:
				[ MaxLoopCount = Local.Count ]
				while [ FrameOffset < frameLength ]
				{
					NBFXTimeSpanTextWithEndElement TimeSpanTextWithEndElement;
				};
			case 0xB1:
				[ MaxLoopCount = Local.Count ]
				while [ FrameOffset < frameLength ]
				{
					NBFXUuidTextWithEndElement UuidTextWithEndElement;
				};
			case 0xB5:
				[ MaxLoopCount = Local.Count ]
				while [ FrameOffset < frameLength ]
				{
					NBFXBoolTextWithEndElement BoolTextWithEndElement;
				};
			default:
				struct
				{
					ReportParserError(ParserErrorProtocolClassWindows, "NBFX", "Unknown Record Type")  ErrorRecordType;
					BLOB( Property.NBFXByteLen ) UnknownData;
				}
		}
	}
}


//
//	Attribute Record
//
struct NBFXAttribute = FormatString("Prefix = %s, Name = %s, Text = %s", Prefix.ToString, Name.ToString, Value.ToString)
{
	NBFXString Prefix;
	NBFXString Name;
	NBFXRecord Value;
}


//
//	Element Record
//
struct NBFXElement = FormatString("Prefix = %s, Name = %s", Prefix.ToString, Name.ToString)
{
	NBFXString Prefix;
	NBFXString Name;
	//Zero or more attribute records
	switch
	{
		case NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ):
			[ Local.AttributesCount = 0]
			struct Attributes = FormatString( "%d Attributes", Local.AttributesCount)
			{
				while[ NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ) ]
				{
					[ Local.AttributesCount = Local.AttributesCount + 1]
					NBFXRecord Attribute;
				}
			}
	}
}


//
//	MultiByteInt31
//
struct NBFXMultiByteInt31 = FormatString("%d", Property.NBFXByteLen)
{
	[Property.NBFXByteLen = 0]
	[property.NBFXLengthByteCount = 0]
	while[!((UINT8(FrameData, FrameOffset) & 0x80) == 00)]
	{
		[Property.NBFXByteLen = Property.NBFXByteLen + ((this&0x7f) << (7 * property.NBFXLengthByteCount))]
		[post.property.NBFXLengthByteCount = property.NBFXLengthByteCount + 1]
		UINT8 ByteInt;
	}
		[Property.NBFXByteLen = Property.NBFXByteLen + (this<<(7 * property.NBFXLengthByteCount))]
		UINT8 FirstByteInt;
}


//
//	String
//
struct NBFXString = Value
{
	NBFXMultiByteInt31 Length;
	String(2, Property.NBFXByteLen) Value;
}


//
//	DictionaryString
//
struct NBFXDictionaryString = Property.NBFXByteLen % 2 == 1 ? property.NBFSEstringValue$[Property.NBFXByteLen]: NPFSDictionaryStringTable(Property.NBFXByteLen)
{
	NBFXMultiByteInt31 Value = Property.NBFXByteLen % 2 == 1 ? property.NBFSEstringValue$[Property.NBFXByteLen]: NPFSDictionaryStringTable(Property.NBFXByteLen);
}


//
//	BoolText Record
//
struct NBFXBoolText = Value
{
	BOOLEAN Value;
}


//
//	BoolTextWithEndElement Record
//
struct NBFXBoolTextWithEndElement = BoolText.ToString
{
	NBFXBoolText BoolText;
	NBFXEndElement EndElement;
}



//
//	Bytes16Text Record
//
struct NBFXBytes16Text = Bytes.ToString
{
	UINT16 Length;
	blob(Length) Bytes;
}

//
//	Bytes16TextWithEndElement Record
//
struct NBFXBytes16TextWithEndElement = Bytes16Text.ToString
{
	NBFXBytes16Text Bytes16Text;
	NBFXEndElement EndElement;
}

//
//	Bytes32Text Record
//
struct NBFXBytes32Text = Bytes.ToString
{
	INT32 Length;
	blob(Length) Bytes;
}

//
//	Bytes32TextWithEndElement Record
//
struct NBFXBytes32TextWithEndElement = Bytes32Text.ToString
{
	NBFXBytes32Text Bytes32Text;
	NBFXEndElement EndElement;
}


//
//	Bytes8Text
//
struct NBFXBytes8Text = Bytes.ToString
{
	UINT8 Length;
	Blob(Length) Bytes;
}


//
//	Bytes8TextWithEndElement Record
//
struct NBFXBytes8TextWithEndElement = Bytes8Text.ToString
{
	NBFXBytes8Text Bytes8Text;
	NBFXEndElement EndElement;
}


//
//	Chars16Text
//
struct NBFXChars16Text = Value
{
	UINT16 Length;
	String(2, Length) Value;
}


//
//	Chars16TextWithEndElement Record
//
struct NBFXChars16TextWithEndElement = Chars16Text.ToString
{
	NBFXChars16Text Chars16Text;
	NBFXEndElement EndElement;
}


//
//	Chars32Text Record
//
struct NBFXChars32Text = Value
{
	INT32 Length;
	String(2, Length) Value;
}


//
//	Chars32TextWithEndElement Record
//
struct NBFXChars32TextWithEndElement = Chars32Text.ToString
{
	NBFXChars32Text Chars32Text;
	NBFXEndElement EndElement;
}


//
//	Chars8Text Record
//
struct NBFXChars8Text = Value
{
	UINT8 Length;
	String(2, Length) Value;
}


//
//	Chars8TextWithEndElement Record
//
struct NBFXChars8TextWithEndElement = Chars8Text.ToString
{
	NBFXChars8Text Chars8Text;
	NBFXEndElement EndElement;
}


//
//	Comment Record
//
struct NBFXComment = FormatString("Comment = %s", Value.ToString)
{
	NBFXString Value;
}


//
//	DateTimeText Record
//
[DataTypeByteOrder = LittleEndian ]
struct NBFXDateTimeText = DateTime.ToString
{
     UINT64 DateTime = Value.ToString
     {
         UINT64 Value:62 = ( this% (3600*24*10000000) == 0 ) ? FormatString("%T{yyyy-MM-dd}", this - 504911232000000000):
                           ( this%10000000 == 0)? FormatString("%T{yyyy-MM-dd}T%t{HH':'mm':'ss}", this - 504911232000000000, this - 504911232000000000):
                            FormatString("%T{yyyy-MM-dd}T%t{HH':'mm':'ss}%t{fffffff}",this - 504911232000000000, this - 504911232000000000, this - 504911232000000000);
         UINT64 TZ:2 = FormatString("TimeZone Info = %s", this==1? "UTC" :this==2 ? "Local time" :this==0 ? "Either UTC or a local time" : "Undefined");
     }
}



//
//	DateTimeTextWithEndElement Record
//
struct NBFXDateTimeTextWithEndElement = DateTimeText.ToString
{
	NBFXDateTimeText DateTimeText;
	NBFXEndElement EndElement;
}


//
//	DecimalText Record
//
struct NBFXDecimalText
{
	OLEAUTDecimal Value;
}


//
//	DecimalTextWithEndElement Record
//
struct NBFXDecimalTextWithEndElement
{
	NBFXDecimalText DecimalText;
	NBFXEndElement EndElement;
}


//
//	DictionaryAttribute Record
//
struct NBFXDictionaryAttribute = FormatString("Prefix = %s, Name = %s, Value = %s", Prefix.ToString, Name.ToString, Value.ToString)
{
	NBFXString Prefix;
	NBFXString Name;
	NBFXRecord Value;
}


//
//	DictionaryElement Record
//
struct NBFXDictionaryElement = FormatString("Prefix = %s, Name = %s", Prefix.ToString, Name.ToString)
{
	NBFXString Prefix;
	NBFXDictionaryString Name;
	//Zero or more attribute records
	switch
	{
		case NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ):
			[ Local.AttributesCount = 0]
			struct Attributes = FormatString( "%d Attributes", Local.AttributesCount)
			{
				while[ NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ) ]
				{
					[ Local.AttributesCount = Local.AttributesCount + 1]
					NBFXRecord Attribute;
				}
			}
	}
}


//
//	DictionaryText Record
//
struct NBFXDictionaryText = Value.ToString
{
	NBFXDictionaryString Value;
}


//
//	DictionaryTextWithEndElement Record
//
struct NBFXDictionaryTextWithEndElement = DictionaryText.ToString
{
	NBFXDictionaryText DictionaryText;
	NBFXEndElement EndElement;
}


//
//	DictionaryXmlnsAttribute Record
//
struct NBFXDictionaryXmlnsAttribute = FormatString("Prefix = %s, Value = %s", Prefix.ToString, Value.ToString)
{
	NBFXString Prefix;
	NBFXDictionaryString Value;
}


//
//	DoubleText Record
//
struct NBFXDoubleText = FormatString("%f", Value)
{
	DOUBLE Value;
}


//
//	DoubleTextWithEndElement Record
//
struct NBFXDoubleTextWithEndElement = DoubleText.ToString
{
	NBFXDoubleText DoubleText;
	NBFXEndElement EndElement;
}


//
//	EmptyText Record
//
struct NBFXEmptyText = ""
{ }


//
//	EmptyTextWithEndElement Record
//
struct NBFXEmptyTextWithEndElement = EmptyText.ToString
{
	NBFXEmptyText EmptyText;
	NBFXEndElement EndElement;
}


//
//	FalseText Record
//
struct NBFXFalseText = "False"
{ }


//
//	FalseTextWithEndElement Record
//
struct NBFXFalseTextWithEndElement = FalseText.ToString
{
	NBFXFalseText FalseText;
	NBFXEndElement EndElement;
}


//
//	EndElement Record
//
struct NBFXEndElement = "EndElement"
{ }


//
//	FloatText Record
//
struct NBFXFloatText = Value
{
	FLOAT Value;
}


//
//	FloatTextWithEndElement Record
//
struct NBFXFloatTextWithEndElement = FloatText.ToString
{
	NBFXFloatText FloatText;
	NBFXEndElement EndElement;
}


//
//	Int16Text Record
//
struct NBFXInt16Text = Value
{
	INT16 Value;
}


//
//	Int16TextWithEndElement Record
//
struct NBFXInt16TextWithEndElement = Int16Text.ToString
{
	NBFXInt16Text Int16Text;
	NBFXEndElement EndElement;
}


//
//	Int32Text Record
//
struct NBFXInt32Text = Value
{
	INT32 Value;
}


//
//	Int32TextWithEndElement Record
//
struct NBFXInt32TextWithEndElement = Int32Text.ToString
{
	NBFXInt32Text Int32Text;
	NBFXEndElement EndElement;
}


//
//	Int64Text Record
//
struct NBFXInt64Text = Value
{
	INT64 Value;
}


//
//	Int64TextWithEndElement Record
//
struct NBFXInt64TextWithEndElement = Int64Text.ToString
{
	NBFXInt64Text Int64Text;
	NBFXEndElement EndElement;
}


//
//	Int8Text Record
//
struct NBFXInt8Text = Value
{
	INT8 Value;
}


//
//	Int8TextWithEndElement Record
//
struct NBFXInt8TextWithEndElement = Int8Text.ToString
{
	NBFXInt8Text Int8Text;
	NBFXEndElement EndElement;
}


//
//	OneText Record
//
struct NBFXOneText = "1"
{ }


//
//	OneTextWithEndElement Record
//
struct NBFXOneTextWithEndElement = OneText.ToString
{ 
	NBFXOneText OneText;
	NBFXEndElement EndElement;
}


//
//	PrefixAttribute_A_Z_Records
//
struct NBFXPrefixAttributeAZ(PrefixValue) = FormatString("Prefix = %c, Name = %s, Text Record = %s", PrefixValue + 0x3b, Name.ToString, Text.ToString)
{
	NBFXString Name;
	NBFXRecord Text;
}


//
//	PrefixDictionaryAttribute_A_Z_Records
//
struct NBFXPrefixDictionaryAttributeAZ(PrefixValue) = FormatString("Prefix = %c, Name = %s, Text Record = %s", PrefixValue + 0x55, Name.ToString, Text.ToString)
{
	NBFXDictionaryString Name;
	NBFXRecord Text;
}


//
//	PrefixDictionaryElement_A_Z_Record
//
struct NBFXPrefixDictionaryElementAZ(PrefixValue) = FormatString("Prefix = %c, Name = %s", PrefixValue + 0x1d, Name.ToString)
{
	NBFXDictionaryString Name;
	//Zero or more attribute records
	switch
	{
		case NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ):
			[ Local.AttributesCount = 0]
			struct Attributes = FormatString( "%d Attributes", Local.AttributesCount)
			{
				while[ NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ) ]
				{
					[ Local.AttributesCount = Local.AttributesCount + 1]
					NBFXRecord Attribute;
				}
			}
	}
}


//
//	PrefixElement_A_Z_Record
//
struct NBFXPrefixElementAZ(PrefixValue) = FormatString("Prefix = %c, Name = %s", PrefixValue + 0x03, Name.ToString)
{
	NBFXString Name;
	//Zero or more attribute records
	switch
	{
		case NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ):
			[ Local.AttributesCount = 0]
			struct Attributes = FormatString( "%d Attributes", Local.AttributesCount)
			{
				while[ NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ) ]
				{
					[ Local.AttributesCount = Local.AttributesCount + 1]
					NBFXRecord Attribute;
				}
			}
	}
}


//
//	QNameDictionaryText Record
//
struct NBFXQNameDictionaryText = FormatString("Prefix = %c, Name = %s", Prefix + 0x61, Name.ToString)
{
	UINT8 Prefix;
	NBFXDictionaryString Name;
}


//
//	QNameDictionaryTextWithEndElement Record
//
struct NBFXQNameDictionaryTextWithEndElement = QNameDictionaryText.ToString
{
	NBFXQNameDictionaryText QNameDictionaryText;
	NBFXEndElement EndElement;
}


//
//	StartListText Record
//
struct NBFXStartListText = FormatString("%s", Local.Summary)
{
	[Local.Summary = ""]
	while Data [ UINT8(framedata, frameOffset) != 0xA6 ]
	{
		[Local.Summary = Local.Summary + (Local.Summary == "" ? "" : " ") + Text.ToString]
		NBFXRecord Text;
	}
	NBFXRecord EndListText;
}


//
//	EndListText Record
//
struct NBFXEndListText = "EndListText"
{ }



//
//	ShortAttribute Record
//
struct NBFXShortAttribute = FormatString("Name = %s, Text Record = %s", Name.ToString, Text.ToString)
{
	NBFXString Name;
	NBFXRecord Text;
}


//
//	ShortDictionaryAttribute Record
//
struct NBFXShortDictionaryAttribute = FormatString("Name = %s, Value = %s", Name.ToString, Text.ToString)
{
	NBFXDictionaryString Name;
	NBFXRecord Text;
}


//
//	ShortDictionaryElement Record
//
struct NBFXShortDictionaryElement = FormatString("Name = %s", Name.ToString)
{
	NBFXDictionaryString Name;
	//Zero or more attribute records
	switch
	{
		case NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ):
			[ Local.AttributesCount = 0]
			struct Attributes = FormatString( "%d Attributes", Local.AttributesCount)
			{
				while[ NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ) ]
				{
					[ Local.AttributesCount = Local.AttributesCount + 1]
					NBFXRecord Attribute;
				}
			}
	}
}


//
//	ShortDictionaryXmlnsAttribute Record
//
struct NBFXShortDictionaryXmlnsAttribute = FormatString(" xmlns= %s", Value.ToString)
{
	NBFXDictionaryString Value;
}


//
//	ShortElement Record
//
struct NBFXShortElement = FormatString("Name = %s", Name.ToString)
{
	NBFXString Name;
	//Zero or more attribute records
	switch
	{
		case NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ):
			[ Local.AttributesCount = 0]
			struct Attributes = FormatString( "%d Attributes", Local.AttributesCount)
			{
				while[ NBFXIsAttributeRecodTable( UINT8(FrameData, FrameOffset) ) ]
				{
					[ Local.AttributesCount = Local.AttributesCount + 1]
					NBFXRecord Attribute;
				}
			}
	}
}


//
//	ShortXmlnsAttribute Record
//
struct NBFXShortXmlnsAttribute = FormatString("Value = %s", Value.ToString)
{
	NBFXString Value;
}


//	
//	TimeSpanText Record 
//
struct NBFXTimeSpanText = Value.ToString
{
	INT64 Value= (Value % 10000000 == 0) ? 
				 ((Value >= 864000000000) ? 
				FormatString("%d.%t{HH':'mm':'ss}", Value / 864000000000, Value % 864000000000) : 
				FormatString("%t{HH':'mm':'ss}", Value)):
				((Value >= 864000000000) ? 
				FormatString("%d.%t{HH':'mm':'ss}.%t{fffffff}", Value / 864000000000, Value % 864000000000, Value % 864000000000) : 
				FormatString("%t{HH':'mm':'ss}.%t{fffffff}", Value, Value));
}


//
//	TimeSpanTextWithEndElement Record
//
struct NBFXTimeSpanTextWithEndElement = TimeSpanText.ToString
{
	NBFXTimeSpanText TimeSpanText;
	NBFXEndElement EndElement;
}


//
//	TrueText Record
//
struct NBFXTrueText = "True"
{ }


//
//	TrueTextWithEndElement Record
//
struct NBFXTrueTextWithEndElement = TrueText.ToString
{ 
	NBFXTrueText TrueText;
	NBFXEndElement EndElement;
}


//
//	UInt64Text Record
//
struct NBFXUInt64Text = Value
{
	UINT64 Value;
}


//
//	UInt64TextWithEndElement Record
//
struct NBFXUInt64TextWithEndElement = UInt64Text.ToString
{
	NBFXUInt64Text UInt64Text;
	NBFXEndElement EndElement;
}


//
//	UnicodeChars16Text Record
//
struct NBFXUnicodeChars16Text = Value
{
	UINT16 Length;
	String(1, Length) Value;
}


//
//	UnicodeChars16TextWithEndElement Record
//
struct NBFXUnicodeChars16TextWithEndElement = UnicodeChars16Text.ToString
{
	NBFXUnicodeChars16Text UnicodeChars16Text;
	NBFXEndElement EndElement;
}


//
//	UnicodeChars32Text Record
//
struct NBFXUnicodeChars32Text = Value
{
	UINT32 Length;
	String(1, Length) Value;
}


//
//	UnicodeChars32TextWithEndElement Record
//
struct NBFXUnicodeChars32TextWithEndElement = UnicodeChars32Text.ToString
{
	NBFXUnicodeChars32Text UnicodeChars32Text;
	NBFXEndElement EndElement;
}


//
//	UnicodeChars8Text Record
//
struct NBFXUnicodeChars8Text = Value
{
	UINT8 Length;
	String(1, Length) Value;
}


//
//	UnicodeChars8TextWithEndElement Record
//
struct NBFXUnicodeChars8TextWithEndElement = UnicodeChars8Text.ToString
{
	NBFXUnicodeChars8Text UnicodeChars8Text;
	NBFXEndElement EndElement;
}


//
//	UniqueIdText Record
//
struct NBFXUniqueIdText = FormatString("urn:uuid:%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
												Data1[1], Data1[2], Data1[3], Data1[4], Data2[1], Data2[2], Data3[1], Data3[2],
												Data4_1, Data4_2, Data4_3, Data4_4, Data4_5, Data4_6, Data4_7, Data4_8)
{
	UINT32 Data1;
	UINT16 Data2;
	UINT16 Data3;
	UINT8 Data4_1;
	UINT8 Data4_2;
	UINT8 Data4_3;
	UINT8 Data4_4;
	UINT8 Data4_5;
	UINT8 Data4_6;
	UINT8 Data4_7;
	UINT8 Data4_8;
}


//
//	UniqueIdTextWithEndElement Record
//
struct NBFXUniqueIdTextWithEndElement = UniqueIdText.ToString
{
	NBFXUniqueIdText UniqueIdText;
	NBFXEndElement EndElement;
}


//
//	UuidText Record
//
struct NBFXUuidText = FormatString("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
												Data1[1], Data1[2], Data1[3], Data1[4], Data2[1], Data2[2], Data3[1], Data3[2],
												Data4_1, Data4_2, Data4_3, Data4_4, Data4_5, Data4_6, Data4_7, Data4_8)
{
	UINT32 Data1;
	UINT16 Data2;
	UINT16 Data3;
	UINT8 Data4_1;
	UINT8 Data4_2;
	UINT8 Data4_3;
	UINT8 Data4_4;
	UINT8 Data4_5;
	UINT8 Data4_6;
	UINT8 Data4_7;
	UINT8 Data4_8;
}


//
//	UuidTextWithEndElement Record
//
struct NBFXUuidTextWithEndElement = UuidText.ToString
{
	NBFXUuidText UuidText;
	NBFXEndElement EndElement;
}


//
//	ZeroText Record
//
struct NBFXZeroText = "0"
{}


//
//	ZeroTextWithEndElement Record
//
struct NBFXZeroTextWithEndElement = ZeroText.ToString
{
	NBFXZeroText ZeroText;
	NBFXEndElement EndElement;
}



//
//	XmlnsAttribute Record
//
struct NBFXXmlnsAttribute = FormatString("Prefix = %s, Value = %s", Prefix.ToString, Value.ToString)
{
	NBFXString Prefix;
	NBFXString Value;
}


//
//	Record size referenced by NBFXArrayRecord.
//
Table NBFXRecordSizeTable( Value )
{
	switch( Value )
	{
		case 0xB5: "1";
		case 0x8B: "2";
		case 0x8D:
		case 0x91: "4";
		case 0x8F:
		case 0x93:
		case 0x97:
		case 0xAF: "8";
		case 0x95:
		case 0XB1: "16";
		default:    "0";
	}
}


//
//	Record type table
//
table NBFXRecordTable( RecordType )
{
	switch
	{
		case RecordType == 0x01: "EndElement";
		case RecordType == 0x02: "Comment";
		case RecordType == 0x03: "Array";
		case RecordType == 0x04: "ShortAttribute";
		case RecordType == 0x05: "Attribute";
		case RecordType == 0x06: "ShortDictionaryAttribute";
		case RecordType == 0x07: "DictionaryAttribute";
		case RecordType == 0x08: "ShortXmlnsAttribute";
		case RecordType == 0x09: "XmlnsAttribute";
		case RecordType == 0x0A: "ShortDictionaryXmlnsAttribute";
		case RecordType == 0x0B: "DictionaryXmlnsAttribute";
		case (RecordType >= 0x0C) && (RecordType <= 0x25 ): FormatString("PrefixDictionaryAttribute%c", RecordType + 0x35);
		case (RecordType >= 0x26) && (RecordType <= 0x3F ): FormatString("PrefixAttribute%c", RecordType + 0x1B);
		case RecordType == 0x40: "ShortElement";
		case RecordType == 0x41: "Element";
		case RecordType == 0x42: "ShortDictionaryElement";
		case RecordType == 0x43: "DictionaryElement";
		case (RecordType >= 0x44) && (RecordType <= 0x5D ): FormatString("PrefixDictionaryElement%c", RecordType - 0x03);
		case (RecordType >= 0x5E) && (RecordType <= 0x77 ): FormatString("PrefixElement%c", RecordType - 0x1D);
		case RecordType == 0x80: "ZeroText";
		case RecordType == 0x81: "ZeroTextWithElement";
		case RecordType == 0x82: "OneText";
		case RecordType == 0x83: "OneTextWithElement";
		case RecordType == 0x84: "FalseText";
		case RecordType == 0x85: "FalseTextWithElement";
		case RecordType == 0x86: "TrueText";
		case RecordType == 0x87: "TrueTextWithElement";
		case RecordType == 0x88: "Int8Text";
		case RecordType == 0x89: "Int8TextWithElement";
		case RecordType == 0x8A: "Int16Text";
		case RecordType == 0x8B: "Int16TextWithElement";
		case RecordType == 0x8C: "Int32Text";
		case RecordType == 0x8D: "Int32TextWithElement";
		case RecordType == 0x8E: "Int64Text";
		case RecordType == 0x8F: "Int64TextWithElement";
		case RecordType == 0x90: "FloatText";
		case RecordType == 0x91: "FloatTextWithElement";
		case RecordType == 0x92: "DoubleText";
		case RecordType == 0x93: "DoubleTextWithElement";
		case RecordType == 0x94: "DecimalText";
		case RecordType == 0x95: "DecimalTextWithElement";
		case RecordType == 0x96: "DateTimeText";
		case RecordType == 0x97: "DateTimeTextWithElement";
		case RecordType == 0x98: "Chars8Text";
		case RecordType == 0x99: "Chars8TextWithElement";
		case RecordType == 0x9A: "Chars16Text";
		case RecordType == 0x9B: "Chars16TextWithElement";
		case RecordType == 0x9C: "Chars32Text";
		case RecordType == 0x9D: "Chars32TextWithElement";
		case RecordType == 0x9E: "Bytes8Text";
		case RecordType == 0x9F: "Bytes8TextWithElement";
		case RecordType == 0xA0: "Bytes16Text";
		case RecordType == 0xA1: "Bytes16TextWithElement";
		case RecordType == 0xA2: "Bytes32Text";
		case RecordType == 0xA3: "Bytes32TextWithElement";
		case RecordType == 0xA4: "StartListText";
		case RecordType == 0xA6: "EndListText";
		case RecordType == 0xA8: "EmptyText";
		case RecordType == 0xA9: "EmptyTextWithElement";
		case RecordType == 0xAA: "DictionaryText";
		case RecordType == 0xAB: "DictionaryTextWithElement";
		case RecordType == 0xAC: "UniqueIdText";
		case RecordType == 0xAD: "UniqueIdTextWithElement";
		case RecordType == 0xAE: "TimeSpanText";
		case RecordType == 0xAF: "TimeSpanTextWithElement";
		case RecordType == 0xB0: "UuidText";
		case RecordType == 0xB1: "UuidTextWithElement";
		case RecordType == 0xB2: "UInt64Text";
		case RecordType == 0xB3: "UInt64TextWithElement";
		case RecordType == 0xB4: "BoolText";
		case RecordType == 0xB5: "BoolTextWithElement";
		case RecordType == 0xB6: "UnicodeChars8Text";
		case RecordType == 0xB7: "UnicodeChars8TextWithElement";
		case RecordType == 0xB8: "UnicodeChars16Text";
		case RecordType == 0xB9: "UnicodeChars16TextWithElement";
		case RecordType == 0xBA: "UnicodeChars32Text";
		case RecordType == 0xBB: "UnicodeChars32TextWithElement";
		case RecordType == 0xBC: "QNameDictionaryText";
		case RecordType == 0xBD: "QNameDictionaryTextWithElement";
		default: FormatString("Unknown Type (0x%0x)", RecordType);
	}
}

table NBFXIsAttributeRecodTable( RecordType )
{
	switch
	{
		case RecordType ==0x04: //ShortAttribute
		case RecordType ==0x05: //Attribute
		case RecordType ==0x06: //ShortDictionaryAttribute
		case RecordType ==0x07: //DictionaryAttribute
		case RecordType ==0x08: //ShortXmlnsAttribute
		case RecordType ==0x09: //XmlnsAttribute
		case RecordType ==0x0A: //ShortDictionaryXmlnsAttribute
		case RecordType ==0x0B: //DictionaryXmlsAttribute
		case RecordType >= 0x0C && RecordType <=0x25: //PrefixDictionaryAttribute[A-Z]
		case RecordType >= 0x26 && RecordType <=0x3F: //PrefixAttribute[A-Z]
			true;
		default:
			false;
	}
}
