//#  (c) 2010 Microsoft Corporation
//#
//#  Title:                  DirectPlay Voice Protocol
//#
//#  Details:                
//#
//#  Public References:      [MC-DPLVP]: DirectPlay Voice Protocol Specification
//#
//#  Comments:               Parser Framework: PAC v2.1.1991.0
//#
//#  Revision Class and Date:Major, 03/11/2010
//#
//####

Protocol DPLVP = Property.DPLVPSummary
{
	
	switch (UINT8(FrameData, OffSet))
	{
		
		case 0x01:[Property.DPLVPSummary = "Add a voice client to their list of voice clients"]DPLVPAddVoiceClient DPLVPAddVoiceClient;
		case 0x02:[Property.DPLVPSummary = "Instruct it to remove a specific voice client from its list of voice clients"]DPLVPRemoveVoiceClient DPLVPRemoveVoiceClient;
		case 0x03:[Property.DPLVPSummary = "Add Voice Client Message"]DPLVPSessionLost DPLVPSessionLost;
		case 0x0C:[Property.DPLVPSummary = "Successfully created and initialized"]DPLVPHostMigrationComplete DPLVPHostMigrationComplete;
		case 0x0D:[Property.DPLVPSummary = "Update the voice client's voice target list"]DPLVPSetClientVoiceTarget DPLVPSetClientVoiceTarget;
		case 0x51:[Property.DPLVPSummary = "Sent to all DirectPlay clients/Sent to the DirectPlay host"]DPLVPConnectRequest DPLVPConnectRequest;
		case 0x53:[Property.DPLVPSummary = "Connect and the voice server is either shutting down or not yet initialized"]DPLVPConnectRefuse DPLVPConnectRefuse;
		case 0x54:[Property.DPLVPSummary = "Exiting the voice session gracefully "]DPLVPClientDisconnectRequest DPLVPClientDisconnectRequest;
		case 0x55:[Property.DPLVPSummary = "Sent from one voice client to another to send a single speech frame"]DPLVPSpeech DPLVPSpeech;
		case 0x56:[Property.DPLVPSummary = "Inform the voice client of configuration of the game session"]DPLVPConnectAccept DPLVPConnectAccept;
		case 0x58:[Property.DPLVPSummary = "Used by the Connection Subprotocol"]DPLVPClientCapabilityConfirmation DPLVPClientCapabilityConfirmation;
		case 0x5A:[Property.DPLVPSummary = "Voice server has successfully removed a voice client from the voice session"]DPLVPClientDisconnectConfirmation DPLVPClientDisconnectConfirmation;
		case 0x60:[Property.DPLVPSummary = "Send a single frame of audio"]DPLVPSpeechWithBounce DPLVPSpeechWithBounce;
		case 0x61:[Property.DPLVPSummary = "Provide that client with a list of all voice clients"]DPLVPVoiceClientList DPLVPVoiceClientList;
		case 0x62:[Property.DPLVPSummary = "Exiting the voice session and host migration is enabled"]DPLVPVoiceServerExitedWithHostMigration DPLVPVoiceServerExitedWithHostMigration;
		case 0x63:[Property.DPLVPSummary = "Sent from the voice client to the voice server"]DPLVPSpeechWithTarget DPLVPSpeechWithTarget;
		case 0x64:[Property.DPLVPSummary = "Relay a speech message on behalf of the voice client"]DPLVPSpeechWithFrom DPLVPSpeechWithFrom;
	}
}


table DPLVPCommonMessageHeaderMessageTypeTable( Value )
{
	switch( Value )
	{
		case 0x01: "DVMSGID_CREATEVOICEPLAYER - Add Voice Client Message";
		case 0x02: "DVMSGID_DELETEVOICEPLAYER - Remove Voice Client Message";
		case 0x03: "DVMSGID_SESSIONLOST - Session Lost Message";
		case 0x0C: "DVMSGID_HOSTMIGRATED - Host Migration Complete Message";
		case 0x0D: "DVMSGID_SETTARGETS - Set Client Voice Target Message";
		case 0x51: "DVMSGID_CONNECTREQUEST - Connect Request Message";
		case 0x53: "DVMSGID_CONNECTREFUSE - Connect Refuse Message";
		case 0x54: "DVMSGID_DISCONNECT - Client Disconnect Request Message";
		case 0x55: "DVMSGID_SPEECH - Speech Message";
		case 0x56: "DVMSGID_CONNECTACCEPT - Connect Accept Message";
		case 0x58: "DVMSGID_SETTINGSCONFIRM - Client Capability Confirmation Message";
		case 0x5A: "DVMSGID_DISCONNECTCONFIRM - Client Disconnect Confirmation Message";
		case 0x60: "DVMSGID_SPEECHBOUNCE - Speech with Bounce Message";
		case 0x61: "DVMSGID_PLAYERLIST - Voice Client List Message";
		case 0x62: "DVMSGID_HOSTMIGRATELEAVE - Voice Server Exited with Host Migration Message";
		case 0x63: "DVMSGID_SPEECHWITHTARGET - Speech with Target Message";
		case 0x64: "DVMSGID_SPEECHWITHFROM - Speech with From Message";
		default: FormatString("Unknown Value(%u)", Value);
	}
}

//
//2.2.2.1   Session Lost MessageSession_Lost
//
struct DPLVPSessionLost  = "Add Voice Client Message"
{
	UINT8 Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT32 ReasonCode = DPLVPSessionLostReasonCodeTable(this);
}

table DPLVPSessionLostReasonCodeTable( Value )
{
	switch( Value )
	{
		case 0x8015012C: "V1 - DVERR_SESSIONLOST";
		default: FormatString("Unknown Value(%u)", Value);
	}
}

//
//2.2.2.2   Client Disconnect Request Message
//
//
struct DPLVPClientDisconnectRequest= "Exiting the voice session gracefully "
{
	UINT8 Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
}

//
//2.2.2.3   Client Disconnect Confirmation Message
//
struct DPLVPClientDisconnectConfirmation = "Voice server has successfully removed a voice client from the voice session"
{
	UINT8 Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
}

//
//2.2.2.4   Add Voice Client Message
//
struct DPLVPAddVoiceClient= FormatString("HostOrderID: %s",HostOrderID)
{
	UINT8 Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT32 DVID;
	UINT32 PlayerFlags = DPLVPAddVoiceClientPlayerFlagsTable(this);
	UINT32 HostOrderID;
}


table DPLVPAddVoiceClientPlayerFlagsTable( Value )
{
	switch( Value )
	{
		case 0x00000001: "DVPLAYERCAPS_HALFDUPLEX - The voice client cannot record audio and will therefore not be transmitting any speech messages.";
		default: FormatString("Unknown Value(%u)", Value);
	}
}

//
//2.2.2.5   Set Client Voice Target Message
//
struct DPLVPSetClientVoiceTarget= FormatString("TargetCount: %d", TargetCount)
{
	UINT8  Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT32 TargetCount;
	UINT32 TargetDVIDs[TargetCount];
}

//
//2.2.2.6   Speech with Target Message
//
struct DPLVPSpeechWithTarget = FormatString("MessageNumber: %d, SequenceNumber: %d, TargetCount: %d", MessageNumber, SequenceNumber,TargetCount)
{
	UINT8  Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT8  MessageNumber;
	UINT8  SequenceNumber;
	UINT32 TargetCount;
	UINT32 TargetDVIDs[TargetCount];
	Blob(Framelength-Offset) SpeechData;


}

//
//2.2.2.7   Speech with Bounce Message
//
struct DPLVPSpeechWithBounce = FormatString("MessageNumber: %d, SequenceNumber: %d", MessageNumber, SequenceNumber)
{
	UINT8 Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT8 MessageNumber;
	UINT8 SequenceNumber;
	Blob(Framelength-Offset) SpeechData;
}

//
//2.2.2.8   Client Capability Confirmation Message
//
struct DPLVPClientCapabilityConfirmation= FormatString("HostOrderID: %s",HostOrderID)
{
	UINT8  Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT32 PlayerFlags = DPLVPClientCapabilityConfirmationPlayerFlagsTable(this);
	UINT32 HostOrderID;
}


table DPLVPClientCapabilityConfirmationPlayerFlagsTable( Value )
{
	switch( Value )
	{
		case 0x00000001: "DVPLAYERCAPS_HALFDUPLEX - The voice client cannot record audio and will therefore not be transmitting any encoded audio data.";
		default: FormatString("Unknown Value(%u)", Value);
	}
}

//
//2.2.3.1   Connect Request Message
//
struct DPLVPConnectRequest= "Sent to all DirectPlay clients/Sent to the DirectPlay host"
{
	UINT8  Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT8  VersionMajor = MustBeSetToTable(this, "0x01");
	UINT8  VersionMinor = MustBeSetToTable(this, "0x00");
	UINT32 VersionBuild = MustBeSetToTable(this, "0x00000003");
}

//
//2.2.3.2   Connect Accept Message
//
struct DPLVPConnectAccept= FormatString("SessionType : %s",SessionType)
{
	UINT8  Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT32 SessionType  = DPLVPConnectAcceptSessionTypeTable(this);
	UINT8  VersionMajor = MustBeSetToTable(this, "0x01");
	UINT8  VersionMinor = MustBeSetToTable(this, "0x00");
	UINT32 VersionBuild = MustBeSetToTable(this, "0x00000003");
	UINT32 SessionFlags 
	{
		UINT32 DVSESSION_NOHOSTMIGRATION:1 = FormatString("      (%s) %s",this.ToBitString,this ? "Host migration is not enabled in the current voice session" : "Host migration is enabled in the current voice session");
		UINT32 DVSESSION_SERVERCONTROLTARGET:1	 = FormatString("(%s) %s",this.ToBitString,this ? "The target of a voice client's voice data is controlled by the voice server instead of the voice client itself" : "The target of a voice client's voice data is not controlled by the voice server instead of the voice client itself.");
		UINT32 Reserved:30 = FormatString("                       (%s)",this.ToBitString);
	};
	GUID(True) CompressionType = DPLVPConnectAcceptCompressionTypeTable(this);
}


table DPLVPConnectAcceptCompressionTypeTable( Value )
{
	switch( Value )
	{
		case "699B52C1-A885-46a8-A308-97172419ADC7": "DPVCTGUID_ADPCM - Microsoft Adaptive Delta Pulse Code Modulation (MS-ADPCM)";
		case "24768C60-5A0D-11d3-9BE4-525400D985E7": "DPVCTGUID_GSM - Global System for Mobile Communications (GSM)";
		case "8DE12FD4-7CB3-48ce-A7E8-9C47A22E8AC5": "DPVCTGUID_NONE - Pulse Code Modulation (PCM)";
		case "7D82A29B-2242-4f82-8F39-5D1153DF3E41": "DPVCTGUID_SC03 - Voxware SC03";
		case "53DEF900-7168-4633-B47F-D143916A13C7": "DPVCTGUID_SC06 - Voxware SC06";
		case "D7954361-5A0B-11d3-9BE4-525400D985E7": "DPVCTGUID_TRUESPEECH - Truespeech";
		case "FE44A9FE-8ED4-48bf-9D66-1B1ADFF9FF6D": "DPVCTGUID_VR12 - Voxware VR12";
		default: FormatString("Unknown Value(%u)", Value);
	}
}

table DPLVPConnectAcceptSessionFlagsTable( Value )
{
	switch( Value )
	{
		case 0x00000001: "DVSESSION_NOHOSTMIGRATION - Host migration (section ) is not enabled in the current voice session. If the voice server leaves the game session, the game session will end.";
		case 0x00000002: "DVSESSION_SERVERCONTROLTARGET - The target of a voice client's voice data is controlled by the voice server instead of the voice client itself.";
		default: FormatString("Unknown Value(%u)", Value);
	}
}

table DPLVPConnectAcceptSessionTypeTable( Value )
{
	switch( Value )
	{
		case 0x00000001: "DVSESSIONTYPE_PEER - The peer-to-peervoice session type. Use the Peer Voice Session Subprotocol .";
		case 0x00000002: "DVSESSIONTYPE_MIXING - The mixing voice session type. Use the Mixing Voice Session Subprotocol .";
		case 0x00000003: "DVSESSIONTYPE_FORWARDING - The forwarding voice session type. Use the Forwarding Voice Session Subprotocol .";
		case 0x00000004: "DVSESSIONTYPE_ECHO - The echo voice session type. Use the Echo Voice Session Subprotocol .";
		default: FormatString("Unknown Value(%u)", Value);
	}
}

//
//2.2.3.3   Connect Refuse Message
//
struct DPLVPConnectRefuse= FormatString("ReasonCode: %s",ReasonCode)
{
	UINT8  Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT32 ReasonCode   = DPLVPConnectRefuseReasonCodeTable(this);
	UINT8  VersionMajor = MustBeSetToTable(this, "0x01");
	UINT8  VersionMinor = MustBeSetToTable(this, "0x00");
	UINT32 VersionBuild = MustBeSetToTable(this, "0x00000003");
}


table DPLVPConnectRefuseReasonCodeTable( Value )
{
	switch( Value )
	{
		case 0x8015017B: "DVERR_NOTHOSTING - An HRESULT value indicating the reason the connection request was refused";
		default: FormatString("Unknown Value(%u)", Value);
	}
}

//
//2.2.4.1   Voice Client List Entry Structure
//
struct DPLVPVoiceClientListEntryStructure= FormatString("HostOrderID: %s",HostOrderID)
{
	UINT32 DVID;
	UINT32 PlayerFlags = DPLVPVoiceClientListEntryStructurePlayerFlagsTable(this);
	UINT32 HostOrderID;
}


table DPLVPVoiceClientListEntryStructurePlayerFlagsTable( Value )
{
	switch( Value )
	{
		case 0x00000001: "DVPLAYERCAPS_HALFDUPLEX - The voice client cannot record audio and will therefore not be transmitting any encoded audio data.";
		default: FormatString("Unknown Value(%u)", Value);
	}
}

//
//	2.2.4.2   Voice Client List Message
//
struct DPLVPVoiceClientList= FormatString("HostOrderID: %s,Player List Number: %d",HostOrderID,NumPlayerListEntries)
{
	UINT8  Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT32 HostOrderID;
	UINT32 NumPlayerListEntries;
	DPLVPVoiceClientListEntryStructure PlayerList[NumPlayerListEntries];
}

//
//	2.2.4.3   Remove Voice Client Message
//
struct DPLVPRemoveVoiceClient= "Instruct it to remove a specific voice client from its list of voice clients"
{
	UINT8  Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT32 DVID;
}

//
//	2.2.4.4   Speech Message
//
struct DPLVPSpeech= FormatString("MessageNumber: %d, SequenceNumber: %d", MessageNumber, SequenceNumber)
{
	UINT8 Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT8 MessageNumber;
	UINT8 SequenceNumber;
	Blob(Framelength-Offset) SpeechData;
}

//
//	2.2.4.5.1   Voice Server Exited with Host Migration Message
//
struct DPLVPVoiceServerExitedWithHostMigration = "Exiting the voice session and host migration is enabled"
{
	UINT8 Header;
}



//
//	2.2.4.5.2   Host Migration Complete Message
//
struct DPLVPHostMigrationComplete = "Successfully created and initialized"
{
	UINT8 Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
}

//
//	2.2.5.1   Speech with From Message
//
struct DPLVPSpeechWithFrom= FormatString("MessageNumber: %d, SequenceNumber: %d", MessageNumber, SequenceNumber)
{
	UINT8 Header= DPLVPCommonMessageHeaderMessageTypeTable(this);
	UINT8 MessageNumber;
	UINT8 SequenceNumber;
	UINT32 SourceDVID;
	Blob(Framelength-Offset) SpeechData;
}
