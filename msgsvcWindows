//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Messenger Service Remote Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-MSRP]: Messenger Service Remote Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 3/2/2010
//#
//####

PROTOCOL MSGSVC = property.Description
{
	Switch ( property.MSRPCOpnum )
	{
		Case 0: 
		_struct NetrMessageNameAdd
		{
			Switch ( property.MSRPCPType )
			{
				Case 0x00: //REQUEST
				[Description = "NetrMessageNameAdd Request Server=" + ServerName.ToString + " Msg=" + MsgName.ToString]
				_Struct Request {
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
								NdrWIDESTRINGPtr	ServerName;
								NdrWideString	MsgName;
							}
					}

				}
				Case 0x02: //RESPONSE
				[Description = "NetrMessageNameAdd Response Return=" + ReturnValue.ToString]
				_Struct Response {
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
								UINT32	ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}
		}
		Case 1: 
		_struct NetrMessageNameEnum
		{
			Switch ( property.MSRPCPType )
			{
				Case 0x00: //REQUEST
				[Description = "NetrMessageNameEnum Request Server=" + ServerName.ToString + " MaxLen=" + PrefMaxLen + " Resume=" + ResumeHandle.ToString]
				_Struct Request {
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
								NdrWIDESTRINGPtr	ServerName;
								NdrAlign			Pad;
								MSGSVCMsgEnumStruct InfoStruct;
								Align4 Padding;
								UINT32		PrefMaxLen;
								UINT32Ptr	ResumeHandle;
							}
					}
				}
				Case 0x02: //RESPONSE
				[Description = "NetrMessageNameEnum Response Entries=" + TotalEntries + " Resume=" + ResumeHandle.ToString + " Return=" + ReturnValue.ToString]
				_Struct Response {
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
								MSGSVCMsgEnumStruct InfoStruct;
								Align4 Pad;
								UINT32	TotalEntries;
								UINT32Ptr	ResumeHandle;
								UINT32	ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}
		}

		Case 2: 
		_struct NetrMessageNameGetInfo
		{
			Switch ( property.MSRPCPType )
			{
				Case 0x00: //REQUEST
				[Description = "NetrMessageNameGetInfo Request Server=" + ServerName.ToString + " Msg=" + MsgName.ToString + " Level=" + Level.ToString]
				_Struct Request {
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
								NdrWIDESTRINGPtr	ServerName;
								NdrWideString	MsgName;
								Align4 Pad;
								UINT32		Level;
							}
					}

				}
				Case 0x02: //RESPONSE
				[Description = "NetrMessageNameGetInfo Response Level=" + LPMSGInfo.Level.ToString + " Return=" + ReturnValue.ToString]
				_Struct Response {
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
								struct LPMSGInfo
								{
									UINT32 Level;
									switch( Level )
									{
										case 0: MSGSVCPMsgInfo0 Level0;
										case 1: MSGSVCPMsgInfo1 Level1;
									}
								}
								Align4 Pad;
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}
				}
			}
		}
		Case 3: 
		_struct NetrMessageNameDel
		{
			Switch ( property.MSRPCPType )
			{
				Case 0x00: //REQUEST
				[Description = "NetrMessageNameDel Request Server=" + ServerName.ToString + " Msg=" + MsgName.ToString]
				_Struct Request {
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
								NdrWIDESTRINGPtr	ServerName;
								NdrWideString	MsgName;
							}
					}
				}
				Case 0x02: //RESPONSE
				[Description = "NetrMessageNameDel Response Return=" + ReturnValue.ToString]
				_Struct Response {
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}
				}
			}
		}
		Default:
		[post.Description = "Error: " + Property.ParserErrorMessage]
		ReportParserError(ParserErrorProtocolClassWindows, "MSGSVC", FormatString( "Unknown Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
	}
}

struct MSGSVCPMsgInfo0
{
	NdrPtr Pointer;
	switch
	{
		case Pointer.ReferentID != 0: NdrWIDESTRINGPtr msgi0name;
	}
}

struct MSGSVCPMsgInfo1
{
	NdrPtr Pointer;
	switch
	{
		case Pointer.ReferentID != 0:
		struct
		{
			[Property.MSGSVCMsgInfo1Count = 0]
			MSGSVCMsgInfo1 Info;
			[Property.MSGSVCMsgInfo1DataCount = 0]
			MSGSVCMsgInfo1Data Data;
		}
	}
}

//
// _MSG_ENUM_STRUCT
//
struct MSGSVCMsgEnumStruct
{
	UINT32 Level;
	Switch
	{
		case Property.MSRPCNdr64:
			Align8 pad;
	}
	UINT32 LevelC;
	switch( LevelC )
	{
		case 0: MSGSVCPMsgInfo0Container Level0;
		case 1: MSGSVCPMsgInfo1Container Level1;
		Default: ReportParserError(ParserErrorProtocolClassWindows, "MSGSVC", FormatString( "Unknown level=%d", Level ) ) ProtocolError;
	}
}

struct MSGSVCPMsgInfo0Container
{
	NdrPtr Pointer;
	switch
	{
		case Pointer.ReferentID != 0: MSGSVCMsgInfo0Container MsgInfo;
	}
}

//
//	[MS-MSRP] MSG_INFO_0_CONTAINER
//	Alignment:None
//
struct MSGSVCMsgInfo0Container
{
	UINT32	EntriesRead;
	struct PmsgInfo0
	{
		NdrPtr Pointer;
		switch
		{
			case Pointer.ReferentID != 0: 
				struct
				{
					NdrConformant Count;
					[Property.MSGVCMsgNameCount = 0]
					MSGSVCMsgInfo0 Info[Count.MaxCount];
					[Local.Count = 0]
					While[local.count < Count.MaxCount]
					{
						switch
						{
							case Property.MSGSVCMsgi0NamePtr$[Local.Count] != 0:
								[Post.Local.Count = Local.Count + 1]
								NdrWideString Msgi0Name;
						}
					}
				}
		}
	}
}


struct MSGSVCPMsgInfo1Container
{
	NdrPtr Pointer;
	switch
	{
		case Pointer.ReferentID != 0: MSGSVCMsgInfo1Container MsgInfo;
	}
}

//
//	[MS-MSRP] MSG_INFO_1_CONTAINER
//	Alignment: NDR
//
struct MSGSVCMsgInfo1Container
{
	UINT32	EntriesRead;
	struct PmsgInfo1
	{
		NdrPtr Pointer;
		switch
		{
			case Pointer.ReferentID != 0: 
			struct 
			{
				NdrConformant Count;
				[Property.MSGSVCMsgInfo1Count = 0]
				MSGSVCMsgInfo1 Info[Count.MaxCount];
				[Property.MSGSVCMsgInfo1DataCount = 0]
				while[Property.MSGSVCMsgInfo1DataCount < Count.MaxCount]
				{
					MSGSVCMsgInfo1Data Data;
				}
					
			}
		}
	}
}


struct MSGSVCMsgInfo0
{
	[Post.Property.MSGSVCMsgi0NamePtr$[Property.MSGVCMsgNameCount] = Msgi0Name.referentID]
	NdrPtr Msgi0Name;
	[Property.MSGVCMsgNameCount = Property.MSGVCMsgNameCount + 1]
	struct {};
}

//
//	[MS-MSRP] MSG_INFO_1
//	Alignment: None
//
struct MSGSVCMsgInfo1
{
	[Post.Property.MSGSVCMsgi1NamePtr$[Property.MSGSVCMsgInfo1Count] = Msgi1Name.referentID]
	NdrPtr	Msgi1Name;
	UINT32	Msgi1ForwardFlag;
	[Post.Property.MSGSVCMsgi1ForwardPtr$[Property.MSGSVCMsgInfo1Count] = Msgi1Forward.referentID]
	NdrPtr	Msgi1Forward;
	[Property.MSGSVCMsgInfo1Count = Property.MSGSVCMsgInfo1Count + 1]
	struct {};
}

struct MSGSVCMsgInfo1Data
{
	switch
	{
		case Property.MSGSVCMsgi1NamePtr$[Property.MSGSVCMsgInfo1DataCount] != 0:
			NdrWideString	Msgi1Name;
	}
	switch
	{
		case Property.MSGSVCMsgi1ForwardPtr$[Property.MSGSVCMsgInfo1DataCount] != 0:
			NdrWideString	Msgi1Forward;
	}
	[Property.MSGSVCMsgInfo1DataCount = Property.MSGSVCMsgInfo1DataCount + 1]
	struct {};
}
