//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Web Services Management Protocol Extensions for Windows Server 2003
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-WSMAN]: Web Services Management Protocol Extensions for Windows Server 2003
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 3/11/2010
//#
//####

//
// Element WSManFault
//
[RegisterBefore(
    SoapDetail.OtherElement,
    WSMANWSManFault,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, ">", true, false, false),"http://schemas.microsoft.com/ws/2005/06/wsmanfault")&&Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "WSManFault"))]
struct WSMANWSManFaultElement = this.STag.ToString
{
	[Post.Local.WSMANWSManFaultElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("WSManFault") STag;
	switch
	{
		Case !Local.WSMANWSManFaultElement_IsEmpty:
			struct
			{
				WSMANWSManFaultType ProviderFaultType;
				XmlTag("WSManFault") ETag;
			}
	}
}

//
// Element Config
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANConfig,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/")),Property.WSTransferGetSummary = "Config"]
[RegisterBefore(
    WSTransferPut.ElementNodes,
    WSMANConfig,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/")),Property.WSTransferPutSummary = "Config"]
struct WSMANConfigElement = this.STag.ToString
{
	[Post.Local.WSMANConfigElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Config") STag;
	switch
	{
		Case !Local.WSMANConfigElement_IsEmpty:
			struct
			{
				WSMANConfigType ConfigType;
				XmlTag("Config") ETag;
			}
	}
}

//
// Element Client
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANClient,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/")),Property.WSTransferGetSummary = "Client"]
[RegisterBefore(
    WSTransferPut.ElementNodes,
    WSMANClient,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/")),Property.WSTransferGetSummary = "Client"]
struct WSMANClientElement = this.STag.ToString
{
	[Post.Local.WSMANClientElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Client") STag;
	switch
	{
		Case !Local.WSMANClientElement_IsEmpty:
			struct
			{
				WSMANClientType ClientType;
				XmlTag("Client") ETag;
			}
	}
}

//
// Element ClientHTTP
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANClientHTTP,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/http") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/http/")),Property.WSTransferGetSummary = "ClientHTTP"]
[RegisterBefore(
    WSTransferPut.ElementNodes,
    WSMANClientHTTP,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/http") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/http/")),Property.WSTransferGetSummary = "ClientHTTP"]
struct WSMANClientHTTPElement = this.STag.ToString
{
	[Post.Local.WSMANClientHTTPElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("HTTP") STag;
	switch
	{
		Case !Local.WSMANClientHTTPElement_IsEmpty:
			struct
			{
				WSMANClientHTTPType ClientHTTPType;
				XmlTag("HTTP") ETag;
			}
	}
}

//
// Element ClientUnencrypted
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANClientUnencrypted,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/http/unencrypted") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/http/unencrypted/")),Property.WSTransferGetSummary = "ClientUnencrypted"]
[RegisterBefore(
    WSTransferPut.ElementNodes,
    WSMANClientUnencrypted,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/http/unencrypted") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/http/unencrypted/")),Property.WSTransferGetSummary = "ClientUnencrypted"]
struct WSMANClientUnencryptedElement = this.STag.ToString
{
	[Post.Local.WSMANClientUnencryptedElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Unencrypted") STag;
	switch
	{
		Case !Local.WSMANClientUnencryptedElement_IsEmpty:
			struct
			{
				WSMANClientUnencryptedType WSMANClientUnencryptedElementType;
				XmlTag("Unencrypted") ETag;
			}
	}
}

//
// Element ClientHTTPS
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANClientHTTPS,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/https") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/https/")),Property.WSTransferGetSummary = "ClientHTTPS"]
[RegisterBefore(
    WSTransferPut.ElementNodes,
    WSMANClientHTTPS,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/https") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/client/https/")),Property.WSTransferGetSummary = "ClientHTTPS"]
struct WSMANClientHTTPSElement = this.STag.ToString
{
	[Post.Local.WSMANClientHTTPSElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("HTTPS") STag;
	switch
	{
		Case !Local.WSMANClientHTTPSElement_IsEmpty:
			struct
			{
				WSMANClientHTTPSType ClientHTTPSType;
				XmlTag("HTTPS") ETag;
			}
	}
}

//
// Element Service
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANService,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/")),Property.WSTransferGetSummary = "Service"]
[RegisterBefore(
    WSTransferPut.ElementNodes,
    WSMANService,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/")),Property.WSTransferGetSummary = "Service"]
struct WSMANServiceElement = this.STag.ToString
{
	[Post.Local.WSMANServiceElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Service") STag;
	switch
	{
		Case !Local.WSMANServiceElement_IsEmpty:
			struct
			{
				WSMANServiceType ServiceType;
				XmlTag("Service") ETag;
			}
	}
}

//
// Element ServiceHTTP
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANServiceHTTP,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/http") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/http/")),Property.WSTransferGetSummary = "ServiceHTTP"]
[RegisterBefore(
    WSTransferPut.ElementNodes,
    WSMANServiceHTTP,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/http") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/http/")),Property.WSTransferGetSummary = "ServiceHTTP"]
struct WSMANServiceHTTPElement = this.STag.ToString
{
	[Post.Local.WSMANServiceHTTPElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("HTTP") STag;
	switch
	{
		Case !Local.WSMANServiceHTTPElement_IsEmpty:
			struct
			{
				WSMANServiceHTTPType ServiceType;
				XmlTag("HTTP") ETag;
			}
	}
}

//
// Element ServiceUnencrypted
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANServiceUnencrypted,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/http/unencrypted") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/http/unencrypted/")),Property.WSTransferGetSummary = "ServiceUnencrypted"]
[RegisterBefore(
    WSTransferPut.ElementNodes,
    WSMANServiceUnencrypted,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/http/unencrypted") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/http/unencrypted/")),Property.WSTransferGetSummary = "ServiceUnencrypted"]
struct WSMANServiceUnencryptedElement = this.STag.ToString
{
	[Post.Local.WSMANServiceUnencryptedElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Unencrypted") STag;
	switch
	{
		Case !Local.WSMANServiceUnencryptedElement_IsEmpty:
			struct
			{
				WSMANServiceUnencryptedType ServiceUnencryptedType;
				XmlTag("Unencrypted") ETag;
			}
	}
}

//
// Element ServiceHTTPS
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANServiceHTTPS,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/https") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/https/")),Property.WSTransferGetSummary = "ServiceHTTPS"]
[RegisterBefore(
    WSTransferPut.ElementNodes,
    WSMANServiceHTTPS,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/https") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/service/https/")),Property.WSTransferGetSummary = "ServiceHTTPS"]
struct WSMANServiceHTTPSElement = this.STag.ToString
{
	[Post.Local.WSMANServiceHTTPSElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("HTTPS") STag;
	switch
	{
		Case !Local.WSMANServiceHTTPSElement_IsEmpty:
			struct
			{
				WSMANServiceHTTPSType ServiceHTTPSType;
				XmlTag("HTTPS") ETag;
			}
	}
}

//
// Element Listener 
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANListener,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/listener") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/listener/")),Property.WSTransferGetSummary = "Listener"]
[RegisterBefore(
    WSTransferPut.ElementNodes,
    WSMANListener,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/listener") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/listener/")),Property.WSTransferGetSummary = "Listener"]
[RegisterBefore(
    WSEnumerationPull.ElementNodes,
    WSMANListener,
    Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/listener") && !Contains(Property.WSMVResourceURI,"wsman:microsoft.com/wsman/2005/06/config/listener/")),Property.WSTransferGetSummary = "Listener"]
struct WSMANListenerElement = this.STag.ToString
{
	[Post.Local.WSMANListenerElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Listener") STag;
	switch
	{
		Case !Local.WSMANListenerElement_IsEmpty:
			struct
			{
				WSMANListenerType ListenerType;
				XmlTag("Listener") ETag;
			}
	}
}

//
// Element This
//
[RegisterBefore(
    WSTransferExchangeMetadata.ElementNodes,
    WSMANThis,
    Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, ">", true, false, false),"http://schemas.xmlsoap.org/ws/2005/06/management/this")&&Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "This"))]
struct WSMANThisElement = this.STag.ToString
{
	[Post.Local.WSMANThisElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("This") STag;
	switch
	{
		Case !Local.WSMANThisElement_IsEmpty:
			struct
			{
				WSMANThisType ThisType;
				XmlTag("This") ETag;
			}
	}
}

//
// ComplexType WSManFaultType
//
Struct WSMANWSManFaultType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Message") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct Message = this.STag.ToString
			{
				[Post.Local.Message_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Message") STag;
				switch
				{
					Case !Local.Message_IsEmpty:
						struct
						{
							WSMANMessageType MessageValue;
							XmlTag("Message") ETag;
						}
				}
			}
	}
}

//
// ComplexType MessageType
//
Struct WSMANMessageType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ProviderFault") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct ProviderFault = this.STag.ToString
			{
				[Post.Local.ProviderFault_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ProviderFault") STag;
				switch
				{
					Case !Local.ProviderFault_IsEmpty:
						struct
						{
							WSMANProviderFaultType ProviderFault;
							XmlTag("ProviderFault") ETag;
						}
				}
			}
	}
}

//
// ComplexType ProviderFaultType
//
Struct WSMANProviderFaultType
{
	While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
	{
		XmlElement(true) AnyNode;
	}
}

//
// ComplexType ConfigType
//
Struct WSMANConfigType
{
	struct MaxEnvelopeSizekb = this.MaxEnvelopeSizekbValue
	{
		[Post.Local.MaxEnvelopeSizekb_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("MaxEnvelopeSizekb") STag;
		switch
		{
			Case !Local.MaxEnvelopeSizekb_IsEmpty:
				struct
				{
					XmlElemContent MaxEnvelopeSizekbValue;
					XmlTag("MaxEnvelopeSizekb") ETag;
				}
		}
	}
	
	struct MaxTimeoutms = this.MaxTimeoutmsValue
	{
		[Post.Local.MaxTimeoutms_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("MaxTimeoutms") STag;
		switch
		{
			Case !Local.MaxTimeoutms_IsEmpty:
				struct
				{
					XmlElemContent MaxTimeoutmsValue;
					XmlTag("MaxTimeoutms") ETag;
				}
		}
	}
	
	struct MaxBatchItems = this.MaxBatchItemsValue
	{
		[Post.Local.MaxBatchItems_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("MaxBatchItems") STag;
		switch
		{
			Case !Local.MaxBatchItems_IsEmpty:
				struct
				{
					XmlElemContent MaxBatchItemsValue;
					XmlTag("MaxTimeoutms") ETag;
				}
		}
	}
	
	struct SoapTraceEnabled = this.SoapTraceEnabledValue
	{
		[Post.Local.SoapTraceEnabled_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("SoapTraceEnabled") STag;
		switch
		{
			Case !Local.SoapTraceEnabled_IsEmpty:
				struct
				{
					XmlElemContent SoapTraceEnabledValue;
					XmlTag("SoapTraceEnabled") ETag;
				}
		}
	}
	
	struct MaxProviderRequests = this.MaxProviderRequestsValue
	{
		[Post.Local.MaxProviderRequests_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("MaxProviderRequests") STag;
		switch
		{
			Case !Local.MaxProviderRequests_IsEmpty:
				struct
				{
					XmlElemContent MaxProviderRequestsValue;
					XmlTag("MaxProviderRequests") ETag;
				}
		}
	}
	
	struct Client = this.STag.ToString
	{
		[Post.Local.Client_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Client") STag;
		switch
		{
			Case !Local.Client_IsEmpty:
				struct
				{
					WSMANClientType ClientValue;
					XmlTag("Client") ETag;
				}
		}
	}
	
	struct Service = this.STag.ToString
	{
		[Post.Local.Service_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Service") STag;
		switch
		{
			Case !Local.Service_IsEmpty:
				struct
				{
					WSMANServiceType ServiceValue;
					XmlTag("Service") ETag;
				}
		}
	}
}

//
// ComplexType ClientType
//
Struct WSMANClientType
{
	struct NetworkDelayms = this.NetworkDelaymsValue
	{
		[Post.Local.NetworkDelayms_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("NetworkDelayms") STag;
		switch
		{
			Case !Local.NetworkDelayms_IsEmpty:
				struct
				{
					XmlElemContent NetworkDelaymsValue;
					XmlTag("NetworkDelayms") ETag;
				}
		}
	}
	
	struct URLPrefix = this.URLPrefixValue
	{
		[Post.Local.URLPrefix_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("URLPrefix") STag;
		switch
		{
			Case !Local.URLPrefix_IsEmpty:
				struct
				{
					XmlElemContent URLPrefixValue;
					XmlTag("URLPrefix") ETag;
				}
		}
	}
	
	struct HTTP = this.STag.ToString
	{
		[Post.Local.HTTP_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("HTTP") STag;
		switch
		{
			Case !Local.HTTP_IsEmpty:
				struct
				{
					WSMANClientHTTPType HTTPValue;
					XmlTag("HTTP") ETag;
				}
		}
	}
	
	struct HTTPS = this.STag.ToString
	{
		[Post.Local.HTTPS_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("HTTPS") STag;
		switch
		{
			Case !Local.HTTPS_IsEmpty:
				struct
				{
					WSMANClientHTTPSType HTTPSValue;
					XmlTag("HTTPS") ETag;
				}
		}
	}
}

//
// ComplexType ClientUnencryptedType
//
Struct WSMANClientUnencryptedType
{
	struct Basic= this.BasicValue
	{
		[Post.Local.Basic_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Basic") STag;
		switch
		{
			Case !Local.Basic_IsEmpty:
				struct
				{
					XmlElemContent BasicValue;
					XmlTag("Basic") ETag;
				}
		}
	}
	
	struct Digest = this.DigestValue
	{
		[Post.Local.Digest_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Digest") STag;
		switch
		{
			Case !Local.Digest_IsEmpty:
				struct
				{
					XmlElemContent DigestValue;
					XmlTag("Digest") ETag;
				}
		}
	}
	
	struct Negotiate = this.NegotiateValue
	{
		[Post.Local.Negotiate_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Negotiate") STag;
		switch
		{
			Case !Local.Negotiate_IsEmpty:
				struct
				{
					XmlElemContent NegotiateValue;
					XmlTag("Negotiate") ETag;
				}
		}
	}
}

//
// ComplexType ClientHTTPType
//
Struct WSMANClientHTTPType
{
	struct Port= this.PortValue
	{
		[Post.Local.Port_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Port") STag;
		switch
		{
			Case !Local.Port_IsEmpty:
				struct
				{
					XmlElemContent PortValue;
					XmlTag("Port") ETag;
				}
		}
	}
	
	struct Unencrypted = this.STag.ToString
	{
		[Post.Local.Unencrypted_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Unencrypted") STag;
		switch
		{
			Case !Local.Unencrypted_IsEmpty:
				struct
				{
					WSMANClientUnencryptedType UnencryptedValue;
					XmlTag("Unencrypted") ETag;
				}
		}
	}
}

//
// ComplexType ClientHTTPSType
//
Struct WSMANClientHTTPSType
{
	struct Port= this.PortValue
	{
		[Post.Local.Port_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Port") STag;
		switch
		{
			Case !Local.Port_IsEmpty:
				struct
				{
					XmlElemContent PortValue;
					XmlTag("Port") ETag;
				}
		}
	}
	
	struct Basic = this.BasicValue
	{
		[Post.Local.Basic_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Basic") STag;
		switch
		{
			Case !Local.Basic_IsEmpty:
				struct
				{
					XmlElemContent BasicValue;
					XmlTag("Basic") ETag;
				}
		}
	}
	
	struct Digest = this.DigestValue
	{
		[Post.Local.Digest_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Digest") STag;
		switch
		{
			Case !Local.Digest_IsEmpty:
				struct
				{
					XmlElemContent DigestValue;
					XmlTag("Digest") ETag;
				}
		}
	}
	
	struct Negotiate = this.NegotiateValue
	{
		[Post.Local.Negotiate_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Negotiate") STag;
		switch
		{
			Case !Local.Negotiate_IsEmpty:
				struct
				{
					XmlElemContent NegotiateValue;
					XmlTag("Negotiate") ETag;
				}
		}
	}
}

//
// ComplexType ServiceType
//
Struct WSMANServiceType
{
	struct RootSDDL= this.RootSDDLValue
	{
		[Post.Local.RootSDDL_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("RootSDDL") STag;
		switch
		{
			Case !Local.RootSDDL_IsEmpty:
				struct
				{
					XmlElemContent RootSDDLValue;
					XmlTag("RootSDDL") ETag;
				}
		}
	}
	
	struct MaxConcurrentOperations = this.MaxConcurrentOperationsValue
	{
		[Post.Local.MaxConcurrentOperations_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("MaxConcurrentOperations") STag;
		switch
		{
			Case !Local.MaxConcurrentOperations_IsEmpty:
				struct
				{
					XmlElemContent MaxConcurrentOperationsValue;
					XmlTag("MaxConcurrentOperations") ETag;
				}
		}
	}
	
	struct EnumerationTimeoutms = this.EnumerationTimeoutmsValue
	{
		[Post.Local.EnumerationTimeoutms_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("EnumerationTimeoutms") STag;
		switch
		{
			Case !Local.EnumerationTimeoutms_IsEmpty:
				struct
				{
					XmlElemContent EnumerationTimeoutmsValue;
					XmlTag("EnumerationTimeoutms") ETag;
				}
		}
	}
	
	struct MaxClientCertInfoSize = this.MaxClientCertInfoSizeValue
	{
		[Post.Local.MaxClientCertInfoSize_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("MaxClientCertInfoSize") STag;
		switch
		{
			Case !Local.MaxClientCertInfoSize_IsEmpty:
				struct
				{
					XmlElemContent MaxClientCertInfoSizeValue;
					XmlTag("MaxClientCertInfoSize") ETag;
				}
		}
	}
	
	struct MaxConnections = this.MaxConnectionsValue
	{
		[Post.Local.MaxConnections_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("MaxConnections") STag;
		switch
		{
			Case !Local.MaxConnections_IsEmpty:
				struct
				{
					XmlElemContent MaxConnectionsValue;
					XmlTag("MaxConnections") ETag;
				}
		}
	}
	
	struct HTTP = this.STag.ToString
	{
		[Post.Local.HTTP_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("HTTP") STag;
		switch
		{
			Case !Local.HTTP_IsEmpty:
				struct
				{
					WSMANServiceHTTPType HTTPValue;
					XmlTag("HTTP") ETag;
				}
		}
	}
	
	struct HTTPS = this.STag.ToString
	{
		[Post.Local.HTTPS_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("HTTPS") STag;
		switch
		{
			Case !Local.HTTPS_IsEmpty:
				struct
				{
					WSMANServiceHTTPSType HTTPSValue;
					XmlTag("HTTPS") ETag;
				}
		}
	}
}

//
// ComplexType ServiceUnencryptedType
//
Struct WSMANServiceUnencryptedType
{
	struct Basic = this.BasicValue
	{
		[Post.Local.Basic_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Basic") STag;
		switch
		{
			Case !Local.Basic_IsEmpty:
				struct
				{
					XmlElemContent BasicValue;
					XmlTag("Basic") ETag;
				}
		}
	}
	
	struct Negotiate = this.NegotiateValue
	{
		[Post.Local.Negotiate_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Negotiate") STag;
		switch
		{
			Case !Local.Negotiate_IsEmpty:
				struct
				{
					XmlElemContent NegotiateValue;
					XmlTag("Negotiate") ETag;
				}
		}
	}
}

//
// ComplexType ServiceHTTPType
//
Struct WSMANServiceHTTPType
{
	struct Unencrypted = this.STag.ToString
	{
		[Post.Local.Unencrypted_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Unencrypted") STag;
		switch
		{
			Case !Local.Unencrypted_IsEmpty:
				struct
				{
					WSMANServiceUnencryptedType UnencryptedValue;
					XmlTag("Unencrypted") ETag;
				}
		}
	}
}

//
// ComplexType ServiceHTTPSType
//
Struct WSMANServiceHTTPSType
{
	struct Basic = this.BasicValue
	{
		[Post.Local.Basic_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Basic") STag;
		switch
		{
			Case !Local.Basic_IsEmpty:
				struct
				{
					XmlElemContent BasicValue;
					XmlTag("Basic") ETag;
				}
		}
	}
	
	struct Negotiate = this.NegotiateValue
	{
		[Post.Local.Negotiate_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Negotiate") STag;
		switch
		{
			Case !Local.Negotiate_IsEmpty:
				struct
				{
					XmlElemContent NegotiateValue;
					XmlTag("Negotiate") ETag;
				}
		}
	}
}

//
// ComplexType ListenerType
//
Struct WSMANListenerType
{
	struct IP = this.IPValue
	{
		[Post.Local.IP_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("IP") STag;
		switch
		{
			Case !Local.IP_IsEmpty:
				struct
				{
					XmlElemContent IPValue;
					XmlTag("IP") ETag;
				}
		}
	}
	
	struct Port = this.PortValue
	{
		[Post.Local.Port_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Port") STag;
		switch
		{
			Case !Local.Port_IsEmpty:
				struct
				{
					XmlElemContent PortValue;
					XmlTag("Port") ETag;
				}
		}
	}
	
	struct Hostname = this.HostnameValue
	{
		[Post.Local.Hostname_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Hostname") STag;
		switch
		{
			Case !Local.Hostname_IsEmpty:
				struct
				{
					XmlElemContent HostnameValue;
					XmlTag("Hostname") ETag;
				}
		}
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Enabled") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct Enabled = this.EnabledValue
			{
				[Post.Local.Enabled_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Enabled") STag;
				switch
				{
					Case !Local.Enabled_IsEmpty:
						struct
						{
							XmlElemContent EnabledValue;
							XmlTag("Enabled") ETag;
						}
				}
			}
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "URLPrefix") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct URLPrefix = this.URLPrefixValue
			{
				[Post.Local.URLPrefix_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("URLPrefix") STag;
				switch
				{
					Case !Local.URLPrefix_IsEmpty:
						struct
						{
							XmlElemContent URLPrefixValue;
							XmlTag("URLPrefix") ETag;
						}
				}
			}
	}
	
	struct Transport = this.TransportValue
	{
		[Post.Local.Transport_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Transport") STag;
		switch
		{
			Case !Local.Transport_IsEmpty:
				struct
				{
					XmlElemContent TransportValue;
					XmlTag("Transport") ETag;
				}
		}
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "CertificateThumbprint") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct CertificateThumbprint = this.CertificateThumbprintValue
			{
				[Post.Local.CertificateThumbprint_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("CertificateThumbprint") STag;
				switch
				{
					Case !Local.CertificateThumbprint_IsEmpty:
						struct
						{
							XmlElemContent CertificateThumbprintValue;
							XmlTag("CertificateThumbprint") ETag;
						}
				}
			}
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MACAddress") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct MACAddress = this.MACAddressValue
			{
				[Post.Local.MACAddress_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("MACAddress") STag;
				switch
				{
					Case !Local.MACAddress_IsEmpty:
						struct
						{
							XmlElemContent MACAddressValue;
							XmlTag("MACAddress") ETag;
						}
				}
			}
	}
}

//
// ComplexType ThisType
//
Struct WSMANThisType
{
	struct Vendor = this.VendorValue
	{
		[Post.Local.Vendor_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Vendor") STag;
		switch
		{
			Case !Local.Vendor_IsEmpty:
				struct
				{
					XmlElemContent VendorValue;
					XmlTag("Vendor") ETag;
				}
		}
	}
	
	struct Version = this.VersionValue
	{
		[Post.Local.Version_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Version") STag;
		switch
		{
			Case !Local.Version_IsEmpty:
				struct
				{
					XmlElemContent VersionValue;
					XmlTag("Version") ETag;
				}
		}
	}
}

