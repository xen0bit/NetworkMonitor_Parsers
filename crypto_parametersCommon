//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Parameters for Cryptographic Types in Algorithm Identifiers
//#
//#  Details:                
//#
//#  Public References:      RFC 3279 - Algorithms and Identifiers for X.509
//#                          RFC 3370 - CMS Algorithms
//#                          RFC 3565 - AES in CMS
//#                          RFC 2313 - PKCS
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 6/5/2009
//#
//####

/** DHParameter as defined by PKCS #3, available at
  	ftp://ftp.rsasecurity.com/pub/pkcs/ascii/pkcs-3.asc **/

struct DhParameter {
	AsnBerInfo SequenceHeader;
	AsnBerInteger Prime;
	AsnBerInteger Base;
	switch {
		case (UINT8(FrameData,Offset)==0x02):
			AsnBerInteger PrivateValueLength;
	}
}

/** Algorithms and Identifiers for X.509, RFC 3279 **/

struct DhDomainParameters {
	AsnBerInfo SequenceInfo;
	AsnBerInteger P;
	AsnBerInteger G;
	AsnBerInteger Q;
	switch {
		case(UINT8(Framedata,Offset) == 0x02):
		AsnBerInteger J;
	}
	switch {
		case(UINT8(FrameData,Offset) == 0x30):
		DhValidationParms ValidationParms;
	}
}

struct DhValidationParms {
	AsnBerInfo SequenceInfo;
	AsnBerBitString Seed;
	AsnBerInteger PgenCounter;
}

struct KeaParmsId {
	AsnBerOctetString Id;
}

struct FieldID {
	AsnBerInfo SequenceHeader;
	AsnBerObjectIdentifier FieldType;
	AsnBerAnyByOid(property.AsnOid) Parameters;
}

struct EcdsaSigValue {
	AsnBerInfo SequenceHeader;
	AsnBerInteger R;
	AsnBerInteger S;
}

struct EcPrimeP {
	AsnBerInteger PrimeP;
}

struct EcCharacteristicTwo {
	AsnBerInfo SequenceHeader;
	AsnBerInteger M;
	AsnBerObjectIdentifier Basis;
	AsnBerAnyByOid(property.AsnOid) Parameters;
}

struct EcTrinomial {
	AsnBerInteger Trinomial;
}

struct EcPentanomial {
	AsnBerInfo SequenceHeader;
	AsnBerInteger K1;
	AsnBerInteger K2;
	AsnBerInteger K3;
}

struct FieldElement {
	AsnBerOctetString Element;
}

struct EcPoint {
	AsnBerOctetString Point;
}

struct EcpkParameters {
	switch (UINT8(FrameData,Offset)) {
		case 0x30: EcParameters EcParameters;
		case 0x06: AsnBerObjectIdentifier NamedCurve;
		case 0x05: AsnBerNull ImplicitlyCa;
	}
}

struct EcParameters {
	AsnBerInfo SequenceHeader;
	EcPVer Version;
	FieldID FieldID;
	Curve Curve;
	EcPoint Base;
	AsnBerInteger Order;
	switch {
		case(UINT8(FrameData,Offset) == 0x02):
		struct {
			AsnBerInteger Cofactor;
		}
	}
}

struct EcPVer {
	AsnBerInteger Version;
}

struct Curve {
	AsnBerInfo SequenceHeader;
	FieldElement A;
	FieldElement B;
	switch {
		case(UINT8(FrameData,Offset) == 0xa5):
		struct {
			AsnBerBitString Seed;
		}
	}
}


/** CMS Algorithms, RFC 3370 **/

struct KeyWrapAlgorithm {
	X509AlgorithmIdentifier Algorithm;
}

struct RC2wrapParameter {
	RC2ParameterVersion Parameter;
}

struct RC2ParameterVersion {
	AsnBerInteger Version;
}

struct Pbkdf2Params {
	AsnBerInfo SequenceHeader;
	switch (UINT8(FrameData,Offset)) {
		case 0x04: AsnBerOctetString Specified;
		case 0x30: X509AlgorithmIdentifier OtherSource;
	}
	AsnBerInteger IterationCount;
	switch {
		case(UINT8(FrameData,Offset) == 0x02):
		struct {
			AsnBerInteger KeyLength;
		}
	}
	switch {
		case(UINT8(FrameData,Offset) == 0x30):
		struct {
			X509AlgorithmIdentifier Prf;
		}
	}
}

struct CBCParameter {
	IV Parameter;
}

struct IV {
	AsnBerOctetString Iv;
}

struct RC2CBCParameter {
	AsnBerInfo SequenceHeader;
	AsnBerInteger Rc2ParameterVersion;
	AsnBerOctetString Iv;
}

struct OPTNULL {
	switch (UINT8(FrameData,Offset)) {
		case 0x05: AsnBerNull Params;
		default:   NULL NoParams;
	}
}


// AES in CMS, RFC 3565
struct AesIv {
	AsnBerOctetString Iv;
}


/** PKCS Algorithms **/

struct PkcsHashAlgorithm {
	X509AlgorithmIdentifier Algorithm;
}

// Handle both optional and NULL encoding
// as explained in RFC3370, section 2.1
struct PkcsSha1Parameters {
	switch(UINT8(FrameData,Offset)) {
		case 0x05: AsnBerNull Params;
		default:   NULL NoParams;
	}
}

struct PkcsMaskGenAlgorithm {
	X509AlgorithmIdentifier Algorithm;
}

struct PkcsEncodingParameters {
	AsnBerOctetString Params;
}

struct PkcsPSourceAlgorithm {
	X509AlgorithmIdentifier Algorithm;
}

// Main structures

struct PkcsRSAPublicKey {
	AsnBerInfo SequenceHeader;
	AsnBerInteger Modulus;
	AsnBerInteger PublicExponent;
}

struct PkcsRSAPrivateKey {
	AsnBerInfo SequenceHeader;
	PkcsVersion Version;
	AsnBerInteger Modulus;
	AsnBerInteger PublicExponent;
	AsnBerInteger PrivateExponent;
	AsnBerInteger Prime1;
	AsnBerInteger Prime2;
	AsnBerInteger Exponent1;
	AsnBerInteger Exponent2;
	AsnBerInteger Coefficient;
	switch {
		case(UINT8(FrameData,Offset) == 0x30):
		struct {
			PkcsOtherPrimeInfos OtherPrimeInfos;
		}
	}
}

Table PkcsVersionTable(Verno) {
	switch (Verno) {
		case 0: "two-Prime (0)";
		case 1: "multi (1)";
		default: FormatString("Unknown version (%d)", Verno);
	}
}

struct PkcsVersion = PkcsVersionTable(PkcsVersion) {
	[PkcsVersion = AsnIntValue]
	AsnBerInteger Version;
}

struct PkcsOtherPrimeInfos {
	[post.PkcsOPrimeInfsSequenceEnd = Offset+LengthValue+LengthOfLength+2]
	AsnBerInfo SequenceOfHeader;
	while opis[(Offset<PkcsOPrimeInfsSequenceEnd)] {
		PkcsOtherPrimeInfo OtherPrimeInfo;
	}
}

struct PkcsOtherPrimeInfo {
	AsnBerInfo SequenceHeader;
	AsnBerInteger Prime;
	AsnBerInteger Exponent;
	AsnBerInteger Coefficient;
}

struct PkcsRSAESOaepParams {
	AsnBerInfo SequenceHeader;
	switch {
		case(UINT8(FrameData,Offset) == 0xa0):
		struct {
			AsnBerInfo Tag0;
			PkcsHashAlgorithm HashAlgorithm;
		}
	}
	switch {
		case(UINT8(FrameData,Offset) == 0xa1):
		struct {
			AsnBerInfo Tag1;
			PkcsMaskGenAlgorithm MaskGenAlgorithm;
		}
	}
	switch {
		case(UINT8(FrameData,Offset) == 0xa2):
		struct {
			AsnBerInfo Tag2;
			PkcsPSourceAlgorithm PSourceAlgorithm;
		}
	}
}

struct RsassaPssParams {
	AsnBerInfo SequenceHeader;
	switch {
		case(UINT8(FrameData,Offset) == 0xa0):
		struct {
			AsnBerInfo Tag0;
			PkcsHashAlgorithm HashAlgorithm;
		}
	}
	switch {
		case(UINT8(FrameData,Offset) == 0xa1):
		struct {
			AsnBerInfo Tag1;
			PkcsMaskGenAlgorithm MaskGenAlgorithm;
		}
	}
	switch {
		case(UINT8(FrameData,Offset) == 0xa2):
		struct {
			AsnBerInfo Tag2;
			AsnBerInteger SaltLength;
		}
	}
	switch {
		case(UINT8(FrameData,Offset) == 0xa3):
		struct {
			AsnBerInfo Tag3;
			PkcsTrailerField TrailerField;
		}
	}
}

Table PkcsTrailerFieldTable(Tft) {
	switch (Tft) {
		case 1: "TrailerFieldBC (1)";
		default: FormatString("Unknown Trailer Field (%d)", Tft);
	}
}

struct PkcsTrailerField = PkcsTrailerFieldTable(PkcsTrailerField) {
	[PkcsTrailerField = AsnIntValue]
	AsnBerInteger Field;
}

struct PkcsDigestInfo {
	AsnBerInfo SequenceHeader;
	PkcsDigestAlgorithm DigestAlgorithm;
	AsnBerOctetString Digest;
}

struct PkcsDigestAlgorithm {
	X509AlgorithmIdentifier Algorithm;
}

struct DSAParameters
{
	AsnBerInfo SequenceInfo;
	AsnBerInteger P;
	AsnBerInteger Q;
	AsnBerInteger G;
}