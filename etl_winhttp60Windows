//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-winhttp60
//#
//#  Details:                
//#
//#  Public References:      winhttp60.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWinHttp, "{7D44233D-3055-4B9C-BA64-0D47CA40A232}")]
Protocol WINHTTP_MicrosoftWindowsWinHttp = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 0x00000004: [property.ETLSummary = this.ToString] WINHTTP_WINHTTP_INFO WINHTTP_INFO;
		case 0x00000002: [property.ETLSummary = this.ToString] WINHTTP_WINHTTP_WARNING WINHTTP_WARNING;
		case 0x00000001: [property.ETLSummary = this.ToString] WINHTTP_WINHTTP_ERROR WINHTTP_ERROR;
		case 0x000030D5: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_DATA_CORRUPT MSG_WINHTTP_AUTOPROXY_SVC_DATA_CORRUPT;
		case 0x000030D7: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_IDLE_TIMEOUT MSG_WINHTTP_AUTOPROXY_SVC_IDLE_TIMEOUT;
		case 0x000030DA: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_WIN32_ERROR MSG_WINHTTP_AUTOPROXY_SVC_WIN32_ERROR;
		case 0x000030DB: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_FAILED_ALLOCATE_RESOURCE MSG_WINHTTP_AUTOPROXY_SVC_FAILED_ALLOCATE_RESOURCE;
		case 0x000030DD: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_NON_LRPC_REQUEST MSG_WINHTTP_AUTOPROXY_SVC_NON_LRPC_REQUEST;
		case 0x000030DF: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_TIMEOUT_GRACEFUL_SHUTDOWN MSG_WINHTTP_AUTOPROXY_SVC_TIMEOUT_GRACEFUL_SHUTDOWN;
		case 0x000030E0: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_INVALID_PARAMETER MSG_WINHTTP_AUTOPROXY_SVC_INVALID_PARAMETER;
		case 0x000030E1: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_NOT_IN_SERVICE MSG_WINHTTP_AUTOPROXY_SVC_NOT_IN_SERVICE;
		case 0x000030E2: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_WINHTTP_EXCEPTED MSG_WINHTTP_AUTOPROXY_SVC_WINHTTP_EXCEPTED;
		case 0x000030E4: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_RETRY_REQUEST MSG_WINHTTP_AUTOPROXY_SVC_RETRY_REQUEST;
		case 0x000030E5: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_SUSPEND_OPERATION MSG_WINHTTP_AUTOPROXY_SVC_SUSPEND_OPERATION;
		case 0x000030E6: [property.ETLSummary = this.ToString] WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_RESUME_OPERATION MSG_WINHTTP_AUTOPROXY_SVC_RESUME_OPERATION;
		case 9: [property.ETLSummary = this.ToString] WINHTTP_ApiEnterTrace ApiEnterTrace;
		case 10: [property.ETLSummary = this.ToString] WINHTTP_ApiExitTrace ApiExitTrace;
		case 11: [property.ETLSummary = this.ToString] WINHTTP_ApiFailedExitTrace ApiFailedExitTrace;
		case 12: [property.ETLSummary = this.ToString] WINHTTP_ApiPendingTrace ApiPendingTrace;
		case 13: [property.ETLSummary = this.ToString] WINHTTP_ApiCompletedTrace ApiCompletedTrace;
		case 14: [property.ETLSummary = this.ToString] WINHTTP_ApiFailedCompletionTrace ApiFailedCompletionTrace;
		case 100: [property.ETLSummary = this.ToString] WINHTTP_SetCredentialsPrivate SetCredentialsPrivate;
		case 59999: [property.ETLSummary = this.ToString] WINHTTP_DebugDumpStringTrace DebugDumpStringTrace;
		case 58999: [property.ETLSummary = this.ToString] WINHTTP_StringTrace StringTrace;
		case 59998: [property.ETLSummary = this.ToString] WINHTTP_StartThreadAction StartThreadAction;
		case 59997: [property.ETLSummary = this.ToString] WINHTTP_StopThreadAction StopThreadAction;
		case 59996: [property.ETLSummary = this.ToString] WINHTTP_QueueThreadAction QueueThreadAction;
		case 59995: [property.ETLSummary = this.ToString] WINHTTP_CancelThreadAction CancelThreadAction;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table WINHTTP_mapQueueActionType(value)
{
	switch(value)
	{
		case 1: "Timer";
		case 2: "WorkItem";
		case 3: "Overlapped IO";
		case 4: "Wait Callback";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WINHTTP_mapWinHttpAuthTarget(value)
{
	switch(value)
	{
		case 0: "WINHTTP_AUTH_TARGET_SERVER";
		case 1: "WINHTTP_AUTH_TARGET_PROXY";
		default:
			FormatString("Unknown value: %d", value);
	}
}
struct WINHTTP_mapWinHttpAuthScheme = Local.BitMapSummary
{
	UINT32 BitfieldBASIC:1 = FormatString("    (%s) %s", this.ToBitString, this? "BASIC":"");
	UINT32 BitfieldNTLM:1 = FormatString("     (%s) %s", this.ToBitString, this? "NTLM":"");
	UINT32 BitfieldPASSPORT:1 = FormatString(" (%s) %s", this.ToBitString, this? "PASSPORT":"");
	UINT32 BitfieldDIGEST:1 = FormatString("   (%s) %s", this.ToBitString, this? "DIGEST":"");
	UINT32 BitfieldNEGOTIATE:1 = FormatString("(%s) %s", this.ToBitString, this? "NEGOTIATE":"");
	UINT32 BitfieldKERBEROS:1 = FormatString(" (%s) %s", this.ToBitString, this? "KERBEROS":"");
	UINT32 Reserved1:26 = FormatString("        (%s)", this.ToBitString);
	[Local.BitMapSummary =
		(BitfieldBASIC? "BASIC" + " " : "") +
		(BitfieldNTLM? "NTLM" + " " : "") +
		(BitfieldPASSPORT? "PASSPORT" + " " : "") +
		(BitfieldDIGEST? "DIGEST" + " " : "") +
		(BitfieldNEGOTIATE? "NEGOTIATE" + " " : "") +
		(BitfieldKERBEROS? "KERBEROS" + " " : "") +
		""]
	struct{}
}
Struct WINHTTP_WINHTTP_INFO = FormatString("%s", loadunloadinfo.ToString)
{
	UnicodeString loadunloadinfo;
}
Struct WINHTTP_WINHTTP_WARNING = FormatString("%s", param1.ToString)
{
	UnicodeString param1;
}
Struct WINHTTP_WINHTTP_ERROR = FormatString("%s", param1.ToString)
{
	UnicodeString param1;
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_DATA_CORRUPT = FormatString("The WinHTTP Web Proxy Auto-Discovery Service detected an internal data corruption.")
{
	_struct Empty{};
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_IDLE_TIMEOUT = FormatString("The WinHTTP Web Proxy Auto-Discovery Service has been idle for %s minutes, it will be shut down.", IdleTime.ToString)
{
	UINT32 IdleTime;
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_WIN32_ERROR = FormatString("The WinHTTP Web Proxy Auto-Discovery Service encountered a system error from %s: (Error Code = %s) %s", Functionname.ToString, Errorcode.ToString, Errortext.ToString)
{
	UnicodeString Functionname;
	UnicodeString Errortext;
	UnicodeString Errorcode;
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_FAILED_ALLOCATE_RESOURCE = FormatString("The WinHTTP Web Proxy Auto-Discovery Service failed to allocate a critical resource. The system may be running low on physical memory.")
{
	_struct Empty{};
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_NON_LRPC_REQUEST = FormatString("The WinHTTP Web Proxy Auto-Discovery Service detected a non- local RPC request (Transport Type = %s); Access Denied. There may have been an rogue attempt to gain access to the service through the network.", Transporttype.ToString)
{
	UnicodeString Transporttype;
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_TIMEOUT_GRACEFUL_SHUTDOWN = FormatString("The WinHTTP Web Proxy Auto-Discovery Service failed to abort all pending requests in %s seconds.  The system WinHTTP Services may have been under stress and slow to respond to cancel requests.", param1.ToString)
{
	UnicodeString param1;
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_INVALID_PARAMETER = FormatString("The WinHTTP Web Proxy Auto-Discovery Service failed parameter validation of a client request.  This may be due to an unexpected error from the system WinHTTP Services.")
{
	_struct Empty{};
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_NOT_IN_SERVICE = FormatString("The WinHTTP Web Proxy Auto-Discovery Service is shutting down and not accepting client requests.")
{
	_struct Empty{};
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_WINHTTP_EXCEPTED = FormatString("The WinHTTP Web Proxy Auto-Discovery Service detected an unexpected exception from the system WinHTTP Services. (Exception Code = %s)", Exceptioncode.ToString)
{
	UnicodeString Exceptioncode;
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_RETRY_REQUEST = FormatString("The WinHTTP Web Proxy Auto-Discovery Service discarded and is re-attempting a request after a critical power event.")
{
	_struct Empty{};
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_SUSPEND_OPERATION = FormatString("The WinHTTP Web Proxy Auto-Discovery Service suspended operation.")
{
	_struct Empty{};
}
Struct WINHTTP_MSG_WINHTTP_AUTOPROXY_SVC_RESUME_OPERATION = FormatString("The WinHTTP Web Proxy Auto-Discovery Service resumed operation.")
{
	_struct Empty{};
}
Struct WINHTTP_ApiEnterTrace = FormatString("%s(%s) API called.", Api.ToString, ApiHandle.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
}
Struct WINHTTP_ApiExitTrace = FormatString("%s(%s) API returned successfully.", Api.ToString, ApiHandle.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
	WinErrorCode Result;
}
Struct WINHTTP_ApiFailedExitTrace = FormatString("%s(%s) API failed with an error = %s.", Api.ToString, ApiHandle.ToString, Result.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
	WinErrorCode Result;
}
Struct WINHTTP_ApiPendingTrace = FormatString("%s(%s) API pending completion.", Api.ToString, ApiHandle.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
}
Struct WINHTTP_ApiCompletedTrace = FormatString("%s(%s) API completed.", Api.ToString, ApiHandle.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
	WinErrorCode Result;
}
Struct WINHTTP_ApiFailedCompletionTrace = FormatString("%s(%s) API completed with an error = %s.", Api.ToString, ApiHandle.ToString, Result.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
	WinErrorCode Result;
}
Struct WINHTTP_SetCredentialsPrivate = FormatString("%s: WinHttpSetCredentials Details: Target (%s) Schemes (%s) UserName (%s) Password (%s)", hRequest.ToString, AuthTargets.ToString, AuthScheme.ToString, UserName.ToString, Password.ToString)
{
	EtlPtr hRequest;
	UINT32 AuthTargets = WINHTTP_mapWinHttpAuthTarget(this);
	WINHTTP_mapWinHttpAuthScheme AuthScheme;
	UnicodeString UserName;
	UnicodeString Password;
}
Struct WINHTTP_DebugDumpStringTrace = FormatString("(%s:%s) %s", File.ToString, Line.ToString, Message.ToString)
{
	AsciiString File;
	UINT32 Line;
	UINT16 Length;
	AsciiString(Length) Message;
}
Struct WINHTTP_StringTrace = FormatString("%s", Message.ToString)
{
	AsciiString Message;
}
Struct WINHTTP_StartThreadAction = FormatString("Starting %s Thread Action (Context: %s)", EtwQueueActionType.ToString, Context.ToString)
{
	EtlPtr Context;
	UINT32 EtwQueueActionType = WINHTTP_mapQueueActionType(this);
}
Struct WINHTTP_StopThreadAction = FormatString("Stopping %s Thread Action (Context: %s)", EtwQueueActionType.ToString, Context.ToString)
{
	EtlPtr Context;
	UINT32 EtwQueueActionType = WINHTTP_mapQueueActionType(this);
}
Struct WINHTTP_QueueThreadAction = FormatString("Queue %s Thread Action (Context: %s)", EtwQueueActionType.ToString, Context.ToString)
{
	EtlPtr Context;
	UINT32 EtwQueueActionType = WINHTTP_mapQueueActionType(this);
}
Struct WINHTTP_CancelThreadAction = FormatString("Canceling %s Thread Action (Context: %s)", EtwQueueActionType.ToString, Context.ToString)
{
	EtlPtr Context;
	UINT32 EtwQueueActionType = WINHTTP_mapQueueActionType(this);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWinHttp_Keyword, "{7D44233D-3055-4B9C-BA64-0D47CA40A232}")]
struct WINHTTP_MicrosoftWindowsWinHttp_Keyword
{
	UINT64 KeywordAPI:1 = FormatString("             (%s) %s", this.ToBitString, this? "API":"");
	UINT64 Reserved1:31 = FormatString("              (%s)", this.ToBitString);
	UINT64 KeywordSEND:1 = FormatString("            (%s) %s", this.ToBitString, this? "NA": "");
	UINT64 KeywordRECEIVE:1 = FormatString("         (%s) %s", this.ToBitString, this? "RECEIVE":"");
	UINT64 KeywordL3_CONNECT:1 = FormatString("      (%s) %s", this.ToBitString, this? "L3_CONNECT":"");
	UINT64 Reserved2:1 = FormatString("              (%s)", this.ToBitString);
	UINT64 KeywordCLOSE:1 = FormatString("           (%s) %s", this.ToBitString, this? "NA": "");
	UINT64 KeywordSECURITY:1 = FormatString("        (%s) %s", this.ToBitString, this? "SECURITY":"");
	UINT64 KeywordCONFIGURATION:1 = FormatString("   (%s) %s", this.ToBitString, this? "CONFIGURATION":"");
	UINT64 KeywordGLOBAL:1 = FormatString("          (%s) %s", this.ToBitString, this? "GLOBAL":"");
	UINT64 KeywordDROPPED:1 = FormatString("         (%s) %s", this.ToBitString, this? "DROPPED":"");
	UINT64 KeywordPII_PRESENT:1 = FormatString("     (%s) %s", this.ToBitString, this? "PII_PRESENT":"");
	UINT64 KeywordPACKET:1 = FormatString("          (%s) %s", this.ToBitString, this? "PACKET":"");
	UINT64 KeywordADDRESS:1 = FormatString("         (%s) %s", this.ToBitString, this? "ADDRESS":"");
	UINT64 KeywordCONTEXT_EVENT:1 = FormatString("   (%s) %s", this.ToBitString, this? "CONTEXT_EVENT":"");
	UINT64 KeywordSTATE_TRANSITION:1 = FormatString("(%s) %s", this.ToBitString, this? "STATE_TRANSITION":"");
	UINT64 Reserved3:18 = FormatString("              (%s)", this.ToBitString);
}
