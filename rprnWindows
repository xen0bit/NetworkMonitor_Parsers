//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Print System Remote Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-RPRN]: Print System Remote Protocol Specification (10.0)
//#
//#  Comments:               Parser Framework: PAC v2.1.1519.0
//#
//#  Revision Class and Date:Major, 5/22/2009
//#                          Minor, 3/2/2010
//#
//####

Protocol RPRN = FormatString( "%s %s%s%s%s%s",
	Property.RPRNMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.RPRNSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.RPRNSummary : "" )
{
	[Property.RPRNSummary = ""]
	[Property.RPRNMethodName = RPRNMethodNameTable( Property.MSRPCOpnum )]
	Switch( Property.MSRPCOpnum )
	{
		Case 0:
			_Struct RpcEnumPrinters
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Flags = %s, Object Name = %s, Level = %s ", Flags.ToString, Name.ToString, RPRNPrinterInfoTable( Level) ) ]
									Struct
									{
										RPRNPrinterEnumFlags Flags;
										NdrWideStringPtr Name;
										Align4 Pad1;
										[ Conversation.RPRNPrinterInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										UINT32 Level = RPRNPrinterInfoTable( this );
										RPRNConfByteBufferPtr PrinterEnum;
										Align4 Pad2;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Structure Count = %u, Stauts = %s", PcbNeeded, PcReturned, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomPrinterInfoPtr( TRUE ) PrinterEnum;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 PcReturned;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 1:
			_Struct RpcOpenPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Printer Name = %s, Data Type = %s, Access = %s", PrinterName.ToString, Datatype.ToString, AccessRequired.ToString ) ]
									Struct
									{
										NdrWideStringPtr PrinterName;
										NdrWideStringPtr Datatype;
										NdrAlign Pad1;
										RPRNDevmodeContainer DevModeContainer;
										Align4 Pad2;
										RPRNAccessMaskFlags AccessRequired;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) )  ]
									Struct
									{
										ContextHandle Handle;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 2:
			_Struct RpcSetJob
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Job Id = %u, Command = %s", JobId, RPRNJobControlValuesTable( Command ) ) ]
									Struct
									{
										ContextHandle Printer;
										//JobId field MUST NOT be zero
										UINT32 JobId;
										RPRNJobContainerPtr JobContainer;
										Align4 Pad;
										UINT32 Command = RPRNJobControlValuesTable( this );
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 3:
			_Struct RpcGetJob
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Job ID = %u, Level = %s", JobId, Level, RPRNJobInfoTable( Level ) ) ]
									Struct
									{
										ContextHandle Printer;
										UINT32 JobId;
										[ Conversation.RPRNJobInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										//Level field MUST be 0x00000001, 0x00000002, 0x00000003, or 0x00000004
										UINT32 Level = RPRNJobInfoTable( this );
										RPRNConfByteBufferPtr Job;
										Align4 Pad;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcbNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomJobInfoPtr( FALSE ) Job;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 4:
			_Struct RpcEnumJobs
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "First Job = %u, Total Jobs = %u, Level = %s", FirstJob, NoJobs, RPRNJobInfoTable( Level ) ) ]
									Struct
									{
										ContextHandle Printer;
										UINT32 FirstJob;
										UINT32 NoJobs;
										[ Conversation.RPRNJobInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										//Level field MUST be 0x00000001, 0x00000002, 0x00000003, or 0x00000004
										UINT32 Level = RPRNJobInfoTable( this );
										RPRNConfByteBufferPtr Job;
										Align4 Pad;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Structure Count = %u, Status = %s", PcbNeeded, PcReturned, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomJobInfoPtr( TRUE ) Job;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 PcReturned;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 5:
			_Struct RpcAddPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s", Name.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrAlign Pad1;
										RPRNPrinterContainer PrinterContainer;
										NdrAlign Pad2;
										RPRNDevmodeContainer DevModeContainer;
										NdrAlign Pad3;
										RPRNSecurityContainer SecurityContainer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										ContextHandle Handle;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 6:
			_Struct RpcDeletePrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Printer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 7:
			_Struct RpcSetPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Command = %s", Command ? RPRNRpcSetPrinterCommandTable( Command ) : Command ) ]
									Struct
									{
										ContextHandle Printer;
										NdrAlign Pad1;
										RPRNPrinterContainer PrinterContainer;
										NdrAlign Pad2;
										RPRNDevmodeContainer DevModeContainer;
										NdrAlign Pad3;
										RPRNSecurityContainer SecurityContainer;
										Align4 Pad;
										UINT32 Command = this? RPRNRpcSetPrinterCommandTable( this ) : this;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue =  WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 8:
			_Struct RpcGetPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Level = %s, Buffer Size = %u", RPRNPrinterInfoTable( Level ), CbBuf ) ]
									Struct
									{
										ContextHandle Printer;
										[ Conversation.RPRNPrinterInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										UINT32 Level = RPRNPrinterInfoTable(this);
										RPRNConfByteBufferPtr PrinterData;
										Align4 Pad;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcbNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomPrinterInfoPtr( FALSE ) Printer;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 ReturnValue =  WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 9:
			_Struct RpcAddPrinterDriver
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s", Name.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrAlign Pad;
										//The Level member of the DriverContainer MUST be 0x00000002, 0x00000003, or 0x00000004.
										RPRNDriverContainer DriverContainer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue =  WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 10:
			_Struct RpcEnumPrinterDrivers
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Environment = %s, Level = %s", Name.ToString, Environment.ToString, RPRNDriverInfoTable( Level) ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideStringPtr Environment;
										Align4 Pad1;
										[ Conversation.RPRNDriverInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										UINT32 Level = RPRNDriverInfoTable( this );
										RPRNConfByteBufferPtr Drivers;
										Align4 Pad2;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Structure Count = %u, Status = %s", PcbNeeded, PcReturned, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomDriverInfoPtr( TRUE ) Drivers;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 PcReturned;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 11:
			_Struct RpcGetPrinterDriver
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Environment = %s, Level = %s, CbBuf = %u", Environment.ToString, RPRNDriverInfoTable( Level ), CbBuf ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideStringPtr Environment;
										Align4 Pad1;
										[ Conversation.RPRNDriverInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										UINT32 Level = RPRNDriverInfoTable(this);
										RPRNConfByteBufferPtr Driver;
										Align4 Pad2;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcbNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomDriverInfoPtr( FALSE ) Driver;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 12:
			_Struct RpcGetPrinterDriverDirectory
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Environment = %s, Level = %u, CbBuf = %u",Name.ToString, Environment.ToString, Level, CbBuf ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideStringPtr Environment;
										Align4 Pad1;
										//The Level field that MUST be 0x00000001.
										UINT32 Level = MustBeSetToTable(this, "1");
										RPRNConfByteBufferPtr DriverDirectory;
										Align4 Pad2;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcbNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfStringQueryPtr( FALSE ) DriverDirectory;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 13:
			_Struct RpcDeletePrinterDriver
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Environment = %s, DriverName = %s", Name.ToString, Environment.ToString, DriverName.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideString Environment;
										NdrWideString DriverName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) )  ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 14:
			_Struct RpcAddPrintProcessor
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Environment = %s, Path Name = %s, Print Processor Name = %s", Name.ToString, Environment.ToString, PathName.ToString, PrintProcessorName.ToString )]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideString Environment;
										NdrWideString PathName;
										NdrWideString PrintProcessorName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) )  ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 15:
			_Struct RpcEnumPrintProcessors
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
								[ RPRNSummary = FormatString( "Name = %s, Environment = %s, Level = %u, Buffer Size = %u", Name.ToString, Environment.ToString, Level, CbBuf ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideStringPtr Environment;
										Align4 Pad1;
										[ Conversation.RPRNPrintProcessorInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										//Level field MUST be 0x00000001
										UINT32 Level = MustBeSetToTable(this, "1");
										RPRNConfByteBufferPtr PrintProcessorInfo;
										Align4 Pad2;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Structure Count = %u, Status = %s", PcbNeeded, PcReturned, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomPrintProcessorInfoPtr( TRUE ) PrintProcessorInfo;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 PcReturned;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 16:
			_Struct RpcGetPrintProcessorDirectory
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Environment = %s, Level = %u, Buffer Size = %u", Name.ToString, Environment.ToString, Level, CbBuf ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideStringPtr Environment;
										Align4 Pad1;
										//Level field MUST be 0x00000001
										UINT32 Level = MustBeSetToTable(this, "1");
										RPRNConfByteBufferPtr PrintProcessorDirectory;
										Align4 Pad2;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcbNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfStringQueryPtr( False ) PrintProcessorDirectory;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 ReturnValue =  WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 17:
			_Struct RpcStartDocPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Printer;
										NdrAlign Pad;
										RPRNDocInfoContainer DocInfoContainer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Job ID = %u, Status = %s", JobId, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 JobId;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 18:
			_Struct RpcStartPagePrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Printer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 19:
			_Struct RpcWritePrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u", CbBuf ) ]
									Struct
									{
										ContextHandle Printer;
										RPRNWritePrinterBuffer Buf;
										Align4 Pad;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcWritten, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 PcWritten;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 20:
			_Struct RpcEndPagePrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Printer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 21:
			_Struct RpcAbortPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Printer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 22:
			_Struct RpcReadPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u", CbBuf ) ]
									Struct
									{
										ContextHandle Printer;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Bytes Read = %u, Status = %s", PcNoBytesRead, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfByteBuffer Buf;
										Align4 Pad;
										UINT32 PcNoBytesRead;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 23:
			_Struct RpcEndDocPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Printer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 24:
			_Struct RpcAddJob
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Level = %u, Buffer Size = %u", Level, CbBuf ) ]
									Struct
									{
										ContextHandle Printer;
										//Level field MUST be 0x00000001
										UINT32 Level = MustBeSetToTable(this, "1");
										RPRNConfByteBufferPtr AddJob;
										Align4 Pad;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcbNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfByteBufferPtr AddJob;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 25:
			_Struct RpcScheduleJob
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Job ID = %u", JobId ) ]
									Struct
									{
										ContextHandle Printer;
										UINT32 JobId;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 26:
			_Struct RpcGetPrinterData
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Value Name = %s, Buffer Size = %u", ValueName.ToString, NSize ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString ValueName;
										Align4 Pad;
										UINT32 NSize;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Type %u = %s, Buffer Size = %u, Status = %s", Type, RPRNRegistryTypeValuesTable( Type ), PcbNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 Type = RPRNRegistryTypeValuesTable( this );
										RPRNDynamicallyTypedQuery( Type ) Data;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 27:
			_Struct RpcSetPrinterData
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "ValueName = %s, Type = %s, Buffer Size = %u", ValueName.ToString, RPRNRegistryTypeValuesTable( type ), CbData ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString ValueName;
										Align4 Pad1;
										UINT32 Type = RPRNRegistryTypeValuesTable( this );
										RPRNDynamicallyTypedQuery( Type ) Data;
										Align4 Pad2;
										UINT32 CbData;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 28:
			_Struct RpcWaitForPrinterChange
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Flags = %s", Flags.ToString ) ]
									Struct
									{
										ContextHandle Printer;
										RPRNPrinterChangeFlags Flags;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Flags = %s, Status = %s", Flags.ToString, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNPrinterChangeFlags Flags;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 29:
			_Struct RpcClosePrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Printer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										ContextHandle Printer;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		Case 30:
			_Struct RpcAddForm
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Printer;
										NdrAlign Pad;
										RPRNFormContainer FormInfoContainer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 31:
			_Struct RpcDeleteForm
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Form Name =%s", FormName.ToString ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString FormName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 32:
			_Struct RpcGetForm
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									 [ RPRNSummary = FormatString( "Form Name = %s, Level = %s, Buffer Size = %u", FormName.ToString, RPRNFormInfoTable( Level ), CbBuf ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString FormName;
										Align4 Pad1;
										[ Conversation.RPRNFormInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										UINT32 Level = RPRNFormInfoTable(this);
										RPRNConfByteBufferPtr Form;
										Align4 Pad2;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcbNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomFormInfoPtr( FALSE ) Form;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 33:
			_Struct RpcSetForm
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Form Name = %s", FormName.ToString ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString FormName;
										NdrAlign Pad;
										RPRNFormContainer FormInfoContainer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 34:
			_Struct RpcEnumForms
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Level %u = %s, Buffer Size = %u", Level, RPRNFormInfoTable( Level ), CbBuf ) ]
									Struct
									{
										ContextHandle Printer;
										[ Conversation.RPRNFormInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										UINT32 Level = RPRNFormInfoTable( this );
										RPRNConfByteBufferPtr Form;
										Align4 Pad;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Szie = %u, Structure Count = %u, Status = %s", PcbNeeded, PcReturned, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomFormInfoPtr( TRUE ) Form;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 PcReturned;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 35:
			_Struct RpcEnumPorts
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Level = %s, Buffer Size = %u", Name.ToString, RPRNPortInfoTable( Level ), CbBuf ) ]
									Struct
									{
										NdrWideStringPtr Name;
										Align4 Pad1;
										[ Conversation.RPRNPortInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										UINT32 Level = RPRNPortInfoTable(this);
										RPRNConfByteBufferPtr Port;
										ALign4 Pad2;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Structure Count = %u, Status = %s", PcbNeeded, PcReturned, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomPortInfoPtr( TRUE ) Port;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 PcReturned;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 36:
			_Struct RpcEnumMonitors
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Level %u = %s, Buffer Size = %u", Name.ToString, Level, RPRNMonitorInfoTable( Level ), CbBuf ) ]
									Struct
									{
										NdrWideStringPtr Name;
										Align4 Pad1;
										[ Conversation.RPRNMonitorInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										UINT32 Level = RPRNMonitorInfoTable(this);
										RPRNConfByteBufferPtr Monitor;
										Align4 Pad2;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Structure Count = %u, Status = %s", PcbNeeded, PcReturned, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomMonitorInfoPtr( TRUE ) Monitor;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 PcReturned;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 39:
			_Struct RpcDeletePort
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Port Name = %s", Name.ToString, PortName.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										Align4 Pad;
										//ULONG_PTR, used for pointer precision not a pointer actually.
										NdrPtr Wnd;
										NdrWideString PortName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 40:
			_Struct RpcCreatePrinterIC
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Printer;
										NdrAlign Pad;
										RPRNDevmodeContainer DevModeContainer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										ContextHandle Handle;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 41:
			_Struct RpcPlayGdiScriptOnPrinterIC
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u", COut) ]
									Struct
									{
										ContextHandle PrinterIC;
										RPRNConfByteBuffer In;
										Align4 Pad;
										UINT32 CIn;
										UINT32 COut;
										UINT32 Ul;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfUniversalFontIDArray Out;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 42:
			_Struct RpcDeletePrinterIC
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle PrinterIC;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										ContextHandle PrinterIC;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 46:
			_Struct RpcAddMonitor
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s", Name.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrAlign Pad;
										RPRNMonitorContainer MonitorContainer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 47:
			_Struct RpcDeleteMonitor
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Environment = %s, MonitorName = %s", Name.ToString, Environment.ToString, MonitorName.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideStringPtr Environment;
										NdrWideString MonitorName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 48:
			_Struct RpcDeletePrintProcessor
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Environment = %s, PrintProcessorName = %s", Name.ToString, Environment.ToString, PrintProcessorName.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideStringPtr Environment;
										NdrWideString PrintProcessorName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 51:
			_Struct RpcEnumPrintProcessorDatatypes
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Print Processor Name = %s, Level = %u, Buffer Size = %u", Name.ToString, PrintProcessorName.ToString, Level, CbBuf ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideStringPtr PrintProcessorName;
										Align4 Pad1;
										//The Level field MUST be 0x00000001.
										[ Conversation.RPRNDataTypesInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										UINT32 Level = MustBeSetToTable(this, "1");
										RPRNConfByteBufferPtr Datatypes;
										Align4 Pad2;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Structure Count = %u, Status = %s", PcbNeeded, PcReturned, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomDataTypesInfoPtr( TRUE ) Datatypes;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 PcReturned;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 52:
			_Struct RpcResetPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Data Type = %s", Datatype.ToString ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideStringPtr Datatype;
										NdrAlign Pad;
										RPRNDevmodeContainer DevModeContainer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 53:
			_Struct RpcGetPrinterDriver2
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Environment = %s, Level = %s, Buffer Size = %u", Environment.ToString, RPRNDriverInfoTable( Level ), CbBuf ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideStringPtr Environment;
										Align4 Pad1;
										[ Conversation.RPRNDriverInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] ]
										UINT32 Level = RPRNDriverInfoTable(this);
										RPRNConfByteBufferPtr Driver;
										Align4 Pad2;
										UINT32 CbBuf;
										UINT32 ClientMajorVersion;
										UINT32 ClientMinorVersion;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcbNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomDriverInfoPtr( FALSE ) Driver;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 ServerMaxVersion;
										UINT32 ServerMinVersion;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 56:
			_Struct RpcFindClosePrinterChangeNotification
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Printer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 58:
			_Struct RpcReplyOpenPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Machine = %s, Printer Remote = %u, Type = %u, Buffer Size = %u", Machine.ToString, PrinterRemote, Type, CbBuffer )]
									Struct
									{
										NdrWideString Machine;
										Align4 Pad;
										//The PrinterRemote field MUST NOT be zero.
										UINT32 PrinterRemote;
										//The Type field MUST be 0x00000001.
										UINT32 Type = MustBeSetToTable(this, "1");
										UINT32 CbBuffer;
										RPRNConfByteBufferPtr Buffer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										ContextHandle PrinterNotify;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 59:
			_Struct RpcRouterReplyPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Flags = %s, Buffer Size = %u", Flags.ToString, CbBuffer ) ]
									Struct
									{
										ContextHandle Notify;
										RPRNPrinterChangeFlags Flags;
										UINT32 CbBuffer;
										RPRNConfByteBufferPtr Buffer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 60:
			_Struct RpcReplyClosePrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									Struct
									{
										ContextHandle Notify;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										ContextHandle Notify;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 61:
			_Struct RpcAddPortEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( " Name = %s, Monitor Name = %s", Name.ToString, MonitorName.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrAlign Pad1;
										RPRNPortContainer PortContainer;
										NdrAlign Pad2;
										RPRNPortVarContainer PortVarContainer;
										NdrWideString MonitorName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 62:
			_Struct RpcRemoteFindFirstPrinterChangeNotification
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Flags = %s, Local Machine = %s, Printer Local = %u, Buffer Size = %u", Flags.ToString, LocalMachine.ToString, PrinterLocal, CbBuffer ) ]
									Struct
									{
										ContextHandle Printer;
										RPRNPrinterChangeFlags Flags;
										// The Options field MUST be 0x00000000 and ignored upon receipt.
										UINT32 Options = MustBeSetToTable(this, "0");
										NdrWideStringPtr LocalMachine;
										Align4 Pad;
										UINT32 PrinterLocal;
										UINT32 CbBuffer;
										RPRNConfByteBufferPtr Buffer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfByteBufferPtr Buffer;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 65:
			_Struct RpcRemoteFindFirstPrinterChangeNotificationEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Local Machine = %s, Printer Local =  %u", LocalMachine.ToString, PrinterLocal ) ]
									Struct
									{
										ContextHandle Printer;
										RPRNPrinterChangeFlags Flags;
										//The Options field MUST be 0x00000000
										UINT32 Options = MustBeSetToTable(this,"0");
										NdrWideStringPtr LocalMachine;
										Align4 Pad;
										UINT32 PrinterLocal;
										RPRNRpcV2NotifyOptionsPtr OptionsData;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 66:
			_Struct RpcRouterReplyPrinterEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Color = %u, Flags = %s", Color, Flags.ToString, ReplyType ) ]
									Struct
									{
										ContextHandle Notify;
										UINT32 Color;
										RPRNPrinterChangeFlags Flags;
										//The ReplyType field MUST be zero.
										UINT32 ReplyType;
										RPRNRpcV2UreplyPrinter Reply;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Result = %u, Status = %s", Result, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNChangeNotificationInfoFlags Result;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 67:
			_Struct RpcRouterRefreshPrinterChangeNotification
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Color = %u", Color ) ]
									Struct
									{
										ContextHandle Printer;
										UINT32 Color;
										RPRNRpcV2NotifyOptionsPtr Options;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNRpcV2NotifyInfoPtr Info;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 69:
			_Struct RpcOpenPrinterEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Printer Name = %s, Data Type = %s, Access = %s", PrinterName.ToString, Datatype.ToString, AccessRequired.ToString ) ]
									Struct
									{
										NdrWideStringPtr PrinterName;
										NdrWideStringPtr Datatype;
										NdrAlign Pad1;
										RPRNDevmodeContainer DevModeContainer;
										Align4 Pad2;
										RPRNAccessMaskFlags AccessRequired;
										NdrAlign Pad3;
										RPRNSplclientContainer ClientInfo;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										ContextHandle Handle;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 70:
			_Struct RpcAddPrinterEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s", Name.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrAlign Pad1;
										RPRNPrinterContainer PrinterContainer;
										NdrAlign Pad2;
										RPRNDevmodeContainer DevModeContainer;
										NdrAlign Pad3;
										RPRNSecurityContainer SecurityContainer;
										NdrAlign Pad4;
										RPRNSplClientContainer ClientInfo;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										ContextHandle Handle;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 71:
			_Struct RpcSetPort
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Port Name = %s", Name.ToString, PortName.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideStringPtr PortName;
										NdrAlign Pad;
										RPRNPortContainer PortContainer;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 72:
			_Struct RpcEnumPrinterData
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Index = %u, Buffer Size = %u", Index, CbData ) ]
									Struct
									{
										ContextHandle Printer;
										UINT32 Index;
										UINT32 CbValueName;
										UINT32 CbData;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Type %u = %s , Buffer Size = %u, Status = %s", Type, RPRNRegistryTypeValuesTable( Type ), PcbData, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNWideString ValueName;
										Align4 Pad1;
										UINT32 PcbValueName;
										UINT32 Type = RPRNRegistryTypeValuesTable( this );
										RPRNDynamicallyTypedQuery( Type ) Data;
										Align4 Pad2;
										UINT32 PcbData;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 73:
			_Struct RpcDeletePrinterData
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( " Value Name=%s", ValueName.ToString ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString ValueName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 77:
			_Struct RpcSetPrinterDataEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Key Name = %s, Value Name = %s, Type = % s, Buffer Size = %u", KeyName.ToString, ValueName.ToString,RPRNRegistryTypeValuesTable( Type ),  CbData ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString KeyName;
										NdrWideString ValueName;
										Align4 Pad1;
										UINT32 Type = RPRNRegistryTypeValuesTable( this );
										RPRNDynamicallyTypedQuery( Type ) Data;
										ALign4 Pad2;
										UINT32 CbData;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 78:
			_Struct RpcGetPrinterDataEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Key Name = %s, Value Name = %s, Buffer Size = %u", KeyName.ToString, ValueName.ToString, NSize ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString KeyName;
										NdrWideString ValueName;
										Align4 Pad;
										UINT32 NSize;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Type %u = %s, Buffer Size = %u, Status = %s", Type,RPRNRegistryTypeValuesTable( Type ), PcbNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 Type = RPRNRegistryTypeValuesTable( this );
										RPRNDynamicallyTypedQuery( Type ) Data;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 79:
			_Struct RpcEnumPrinterDataEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( " Key Name = %s, Buffer Size = %u", KeyName.ToString, CbEnumValues ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString KeyName;
										Align4 Pad;
										UINT32 CbEnumValues;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Structure Count = %u, Status = %s", PcbEnumValues, PnEnumValues, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomMultiPrinterEnumValues	EnumValues;
										Align4 Pad;
										UINT32 PcbEnumValues;
										UINT32 PnEnumValues;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 80:
			_Struct RpcEnumPrinterKey
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Key Name = %s, Buffer Size = %u", KeyName.ToString, CbSubkey ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString KeyName;
										Align4 Pad;
										UINT32 CbSubkey;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[RPRNSummary = FormatString( "Buffer Size = %u Status = %s", PcbSubkey, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfStringQuery2( False ) Subkey;
										Align4 Pad;
										UINT32 PcbSubkey;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 81:
			_Struct RpcDeletePrinterDataEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Key Name = %s, Value Name = %s", KeyName.ToString, ValueName.ToString ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideString KeyName;
										NdrWideString ValueName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 82:
			_Struct RpcDeletePrinterKey
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "KeyName = %s", KeyName.ToString )]
									Struct
									{
										ContextHandle Printer;
										NdrWideString KeyName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 84:
			_Struct RpcDeletePrinterDriverEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, Environment = %s, Driver Name = %s, DeleteFlag = %s", Name.ToString, Environment.ToString, DriverName.ToString, DeleteFlag.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrWideString Environment;
										NdrWideString DriverName;
										Align4 Pad1;
										RPRNDeletePrinterDriverFlags DeleteFlag;
										Align4 Pad2;
										UINT32 VersionNum = FormatString( "%u - %s", this, RPRNDriverInfoOSVersionTable( this ) );
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 85:
			_Struct RpcAddPerMachineConnection
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Server = %s, Printer Name = %s, Print Server = %s, Provider = %s", Server.ToString, PrinterName.ToString, PrintServer.ToString, Provider.ToString ) ]
									Struct
									{
										NdrWideStringPtr Server;
										NdrWideString PrinterName;
										NdrWideString PrintServer;
										NdrWideString Provider;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 86:
			_Struct RpcDeletePerMachineConnection
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Server = %s, Printer Name = %s", Server.ToString, PrinterName.ToString ) ]
									Struct
									{
										NdrWideStringPtr Server;
										NdrWideString PrinterName;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 87:
			_Struct RpcEnumPerMachineConnections
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Server = %s, Buffer Size = %u", Server.ToString, CbBuf ) ]
									Struct
									{
										NdrWideStringPtr Server;
										[ Conversation.RPRNPrinterInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ] = 4 ]
										RPRNConfByteBufferPtr PrinterEnum;
										Align4 Pad;
										UINT32 CbBuf;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Structure Count = %u, Status = %s", PcbNeeded, PcReturned, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfCustomPrinterInfoPtr( TRUE ) PrinterEnum;
										Align4 Pad;
										UINT32 PcbNeeded;
										UINT32 PcReturned;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 88:
			_Struct RpcXcvData
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Data Name = %s, Buffer Size = %u, Status = %s", DataName.ToString, CbInputData, WinErrorCodeNameTable( Status ) ) ]
									Struct
									{
										ContextHandle Xcv;
										NdrWideString DataName = RPRNRpcXcvDataDataNameTable(this.Array.ToString);
										RPRNConfByteBuffer InputData;
										Align4 Pad;
										UINT32 CbInputData;
										UINT32 CbOutputData;
										UINT32 Status = WinErrorCodeTable( this );
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcbOutputNeeded, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNConfByteBuffer OutputData;
										Align4 Pad;
										UINT32 PcbOutputNeeded;
										UINT32 Status = WinErrorCodeTable( this );
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 89:
			_Struct RpcAddPrinterDriverEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Name = %s, FileCopyFlag = %s", Name.ToString, FileCopyFlag.ToString ) ]
									Struct
									{
										NdrWideStringPtr Name;
										NdrALign Pad1;
										RPRNDriverContainer DriverContainer = RPRNDriverInfoTable(this);
										Align4 Pad2;
										RPRNFileCopyFlags FileCopyFlag;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 96:
			_Struct RpcFlushPrinter
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Szie = %u, Sleep Time = %u", CbBuf, CSleep ) ]
									Struct
									{
										ContextHandle Printer;
										RPRNConfByteBuffer Buf;
										Align4 Pad;
										UINT32 CbBuf;
										UINT32 CSleep = FormatString( "%u milliseconds", this );
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", PcWritten, WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										UINT32 PcWritten;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 97:
			_Struct RpcSendRecvBidiData
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Action = %s", Action.ToString ) ]
									Struct
									{
										ContextHandle Printer;
										NdrWideStringPtr Action = RPRNRpcSendRecvBidiDataActionTable( this.stringValue.ToString );
										RPRNRpcBidiRequestContainer ReqData;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", WinErrorCodeNameTable( ReturnValue ) ) ]
									Struct
									{
										RPRNRpcBidiResponseContainerPtr RespData;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}

		Case 102:
			_Struct RpcGetCorePrinterDrivers
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString("Server = %s, Environment = %s", Server.ToString, Environment.ToString) ]
									Struct
									{
										NdrWideStringPtr Server;
										NdrWideString Environment;
										Align4 Pad1;
										UINT32 CoreDrivers;
										RPRNConfMultiStringArray CoreDriverDependencies;
										Align4 Pad2;
										UINT32 CorePrinterDrivers;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Status = %s", ReturnValue.ToString) ]
									Struct
									{
										RPRNConfCorePrinterDriver CorePrinterDrivers;
										Align4 Pad;
										HRESULT ReturnValue;
									}
							}
						}
				}
			}

		Case 104:
			_Struct RpcGetPrinterDriverPackagePath
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString("Server = %s, Environment = %s", Server.ToString, Environment.ToString) ]
									Struct
									{
										NdrWideStringPtr Server;
										NdrWideString Environment;
										NdrWideStringPtr Language;
										NdrWideString PackageID;
										RPRNConfMultiStringArrayPtr PszDriverPackageCab;
										Align4 Pad;
										UINT32 CchDriverPackageCab;
									}
							}
						}

					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									[ RPRNSummary = FormatString( "Buffer Size = %u, Status = %s", RequiredSize, ReturnValue.ToString) ]
									Struct
									{
										RPRNConfMultiStringArrayPtr DriverPackageCab;
										Align4 Pad;
										UINT32 RequiredSize;
										HRESULT ReturnValue;
									}
							}
						}
				}
			}

		Case 37:
		Case 38:
		Case 43:
		Case 44:
		Case 45:
		Case 49:
		Case 50:
		Case 54:
		Case 55:
		Case 57:
		Case 63:
		Case 64:
		Case 68:
		Case 74:
		Case 75:
		Case 76:
		Case 83:
		Case 90:
		Case 91:
		Case 92:
		Case 93:
		Case 94:
		Case 95:
		Case 98:
		Case 99:
		Case 100:
		Case 101:
		Case 103:
		Case 105:
		Case 106:
		Case 107:
		Case 108:
		Case 109:
			Struct NotUsedOnWire
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						[RPRNSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						_Struct Request
						{
							ReportParserWarning("RPRN", "Invalid RPRN method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}

					Case 0x02: //RESPONSE
						[RPRNSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						_Struct Response
						{
							ReportParserWarning("RPRN", "Invalid RPRN method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
				}
			}

		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown RPRN method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
	}
}

//------------- Start of Table -------------

Table RPRNMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "RpcEnumPrinters";
		Case 1: "RpcOpenPrinter";
		Case 2: "RpcSetJob";
		Case 3: "RpcGetJob";
		Case 4: "RpcEnumJobs";
		Case 5: "RpcAddPrinter";
		Case 6: "RpcDeletePrinter";
		Case 7: "RpcSetPrinter";
		Case 8: "RpcGetPrinter";
		Case 9: "RpcAddPrinterDriver";
		Case 10: "RpcEnumPrinterDrivers";
		Case 11: "RpcGetPrinterDriver";
		Case 12: "RpcGetPrinterDriverDirectory";
		Case 13: "RpcDeletePrinterDriver";
		Case 14: "RpcAddPrintProcessor";
		Case 15: "RpcEnumPrintProcessors";
		Case 16: "RpcGetPrintProcessorDirectory";
		Case 17: "RpcStartDocPrinter";
		Case 18: "RpcStartPagePrinter";
		Case 19: "RpcWritePrinter";
		Case 20: "RpcEndPagePrinter";
		Case 21: "RpcAbortPrinter";
		Case 22: "RpcReadPrinter";
		Case 23: "RpcEndDocPrinter";
		Case 24: "RpcAddJob";
		Case 25: "RpcScheduleJob";
		Case 26: "RpcGetPrinterData";
		Case 27: "RpcSetPrinterData";
		Case 28: "RpcWaitForPrinterChange";
		Case 29: "RpcClosePrinter";
		Case 30: "RpcAddForm";
		Case 31: "RpcDeleteForm";
		Case 32: "RpcGetForm";
		Case 33: "RpcSetForm";
		Case 34: "RpcEnumForms";
		Case 35: "RpcEnumPorts";
		Case 36: "RpcEnumMonitors";
		Case 37: "Opnum37NotUsedOnWire";
		Case 38: "Opnum38NotUsedOnWire";
		Case 39: "RpcDeletePort";
		Case 40: "RpcCreatePrinterIC";
		Case 41: "RpcPlayGdiScriptOnPrinterIC";
		Case 42: "RpcDeletePrinterIC";
		Case 43: "Opnum43NotUsedOnWire";
		Case 44: "Opnum44NotUsedOnWire";
		Case 45: "Opnum45NotUsedOnWire";
		Case 46: "RpcAddMonitor";
		Case 47: "RpcDeleteMonitor";
		Case 48: "RpcDeletePrintProcessor";
		Case 49: "Opnum49NotUsedOnWire";
		Case 50: "Opnum50NotUsedOnWire";
		Case 51: "RpcEnumPrintProcessorDatatypes";
		Case 52: "RpcResetPrinter";
		Case 53: "RpcGetPrinterDriver2";
		Case 54: "Opnum54NotUsedOnWire";
		Case 55: "Opnum55NotUsedOnWire";
		Case 56: "RpcFindClosePrinterChangeNotification";
		Case 57: "Opnum57NotUsedOnWire";
		Case 58: "RpcReplyOpenPrinter";
		Case 59: "RpcRouterReplyPrinter";
		Case 60: "RpcReplyClosePrinter";
		Case 61: "RpcAddPortEx";
		Case 62: "RpcRemoteFindFirstPrinterChangeNotification";
		Case 63: "Opnum63NotUsedOnWire";
		Case 64: "Opnum64NotUsedOnWire";
		Case 65: "RpcRemoteFindFirstPrinterChangeNotificationEx";
		Case 66: "RpcRouterReplyPrinterEx";
		Case 67: "RpcRouterRefreshPrinterChangeNotification";
		Case 68: "Opnum68NotUsedOnWire";
		Case 69: "RpcOpenPrinterEx";
		Case 70: "RpcAddPrinterEx";
		Case 71: "RpcSetPort";
		Case 72: "RpcEnumPrinterData";
		Case 73: "RpcDeletePrinterData";
		Case 74: "Opnum74NotUsedOnWire";
		Case 75: "Opnum75NotUsedOnWire";
		Case 76: "Opnum76NotUsedOnWire";
		Case 77: "RpcSetPrinterDataEx";
		Case 78: "RpcGetPrinterDataEx";
		Case 79: "RpcEnumPrinterDataEx";
		Case 80: "RpcEnumPrinterKey";
		Case 81: "RpcDeletePrinterDataEx";
		Case 82: "RpcDeletePrinterKey";
		Case 83: "Opnum83NotUsedOnWire";
		Case 84: "RpcDeletePrinterDriverEx";
		Case 85: "RpcAddPerMachineConnection";
		Case 86: "RpcDeletePerMachineConnection";
		Case 87: "RpcEnumPerMachineConnections";
		Case 88: "RpcXcvData";
		Case 89: "RpcAddPrinterDriverEx";
		Case 90: "Opnum90NotUsedOnWire";
		Case 91: "Opnum91NotUsedOnWire";
		Case 92: "Opnum92NotUsedOnWire";
		Case 93: "Opnum93NotUsedOnWire";
		Case 94: "Opnum94NotUsedOnWire";
		Case 95: "Opnum95NotUsedOnWire";
		Case 96: "RpcFlushPrinter";
		Case 97: "RpcSendRecvBidiData";
		Case 98: "Opnum98NotUsedOnWire";
		Case 99: "Opnum99NotUsedOnWire";
		Case 100: "Opnum100NotUsedOnWire";
		Case 101: "Opnum101NotUsedOnWire";
		Case 102: "RpcGetCorePrinterDrivers";
		Case 103: "Opnum103NotUsedOnWire";
		Case 104: "RpcGetPrinterDriverPackagePath";
		Case 105: "Opnum105NotUsedOnWire";
		Case 106: "Opnum106NotUsedOnWire";
		Case 107: "Opnum107NotUsedOnWire";
		Case 108: "Opnum108NotUsedOnWire";
		Case 109: "Opnum109NotUsedOnWire";
		Default: FormatString( "Unknown Opnum (%u) ", Opnum );
	}
}

Table RPRNPrinterInfoTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "PrinterInfoStress";
		Case 0x00000001: "PrinterInfo1";
		Case 0x00000002: "PrinterInfo2";
		Case 0x00000003: "PrinterInfo3";
		Case 0x00000004: "PrinterInfo4";
		Case 0x00000005: "PrinterInfo5";
		Case 0x00000006: "PrinterInfo6";
		Case 0x00000007: "PrinterInfo7";
		Case 0x00000008: "PrinterInfo8";
		Case 0x00000009: "PrinterInfo9";
		Default: FormatString("Unknown Value (%u)", Value );
	}
}

Table RPRNJobInfoTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "JobInfo1";
		Case 0x00000002: "JobInfo2";
		Case 0x00000003: "JobInfo3";
		Case 0x00000004: "JobInfo4";
		Default: FormatString("Unknown Value (%u)", Value );
	}
}

Table RPRNDriverInfoTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "DriverInfo1";
		Case 0x00000002: "DriverInfo2";
		Case 0x00000003: "DriverInfo3";
		Case 0x00000004: "DriverInfo4";
		Case 0x00000005: "DriverInfo5";
		Case 0x00000006: "DriverInfo6";
		Case 0x00000008: "DriverInfo8";
		Case 0x00000065: "DriverInfo101";
		Default: FormatString("Unknown Value (%u)", Value );
	}
}

Table RPRNMonitorInfoTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "MonitorInfo1";
		Case 0x00000002: "MonitorInfo2";
		Default: FormatString("Unknown Value (%u)", Value );
	}
}

Table RPRNPortInfoTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "PortInfo1";
		Case 0x00000002: "PortInfo2";
		Default: FormatString("Unknown Value (%u)", Value );
	}
}

Table RPRNFormInfoTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "FormInfo1";
		Case 0x00000002: "FormInfo2";
		Default: FormatString("Unknown Value (%u)", Value );
	}
}

Table RPRNJobControlValuesTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "Perform no additional action.";
		Case 0x00000001: "JOB_CONTROL_PAUSE - Pause the print job.";
		Case 0x00000002: "JOB_CONTROL_RESUME - Resume a paused print job.";
		Case 0x00000003: "JOB_CONTROL_CANCEL - Delete a print job.";
		Case 0x00000004: "JOB_CONTROL_RESTART - Restart a print job.";
		Case 0x00000005: "JOB_CONTROL_DELETE - Delete a print job.";
		Case 0x00000006: "JOB_CONTROL_SENT_TO_PRINTER -  A print job has been sent to the printer.";
		Case 0x00000007: "JOB_CONTROL_LAST_PAGE_EJECTED -  The last page of a print job has been ejected from the printer.";
		Case 0x00000008: "JOB_CONTROL_RETAIN - Keep the print job in the print queue after it prints.";
		Case 0x00000009: "JOB_CONTROL_RELEASE - Release the print job, undoing the effect of a JOB_CONTROL_RETAIN action.";
		Default: FormatString( "Unknown Value (%u) ", Value);
	}
}

Table RPRNRpcSetPrinterCommandTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "PRINTER_CONTROL_PAUSE - Pauses the printer object.";
		Case 0x00000002: "PRINTER_CONTROL_RESUME - Resumes a paused printer object.";
		Case 0x00000003: "PRINTER_CONTROL_PURGE - Deletes all print jobs queued for the printer object.";
		Default: FormatString( "Unknown Value (%u) ", Value);
	}
}

Table RPRNRegistryTypeValuesTable( Value )
{
	Switch( Value )
	{
		Case 0 : "REG_NONE - No Value type is defined.";
		Case 1 : "REG_SZ - A string";
		Case 2 : "REG_EXPAND_SZ - A string that may contain unexpanded references to environment variables.";
		Case 3 : "REG_BINARY - Binary data in any form.";
		Case 4 : "REG_DWORD / REG_DWORD_LITTLE_ENDIAN - A 32-bit number in little-endian format.";
		Case 5 : "REG_DWORD_BIG_ENDIAN - A 32-bit number in big-endian format.";
		Case 6 : "REG_LINK - Symbolic link to a registry key.";
		Case 7 : "REG_MULTI_SZ - A multi-string: an array of null-terminated 16-bit unicode strings with an ending null.";
		Case 8 : "REG_RESOURCE_LIST - Device-driver resource list.";
		Case 11: "REG_QWORD - A 64-bit number.";
		Default: "Unknown Value";
	}
}

Table RPRNRpcXcvDataDataNameTable( Value )
{
	Switch( Value )
	{
		Case "AddPort": "AddPort - Add an instance of a specific port type controlled by the port monitor.";
		Case "DeletePort": "DeletePort - Delete an instance of a specific port type controlled by the port monitor.";
		Case "MonitorUI": "MonitorUI - The action SHOULD return the name of the associated port monitor client-side executable configuration module in the buffer that is referenced by the pOutputData parameter.";
		Default: "Unknown";
	}
}

Table RPRNRpcSendRecvBidiDataActionTable( Value )
{
	Switch( Value )
	{
		Case "EnumSchema": "EnumSchema - The method MUST enumerate the supported schemas.";
		Case "Get": "Get - The method MUST return the specific Value item requested.";
		Case "Set": "Set - The method MUST store the supplied data in a single Value item in the schema.";
		Case "GetAll": "GetAll - The method MUST return one or more Value items that are reachable from the requested schema item.";
		Default: "Unknown";
	}
}

//-------------- End of Table --------------

//------ Start of Flag Fields Structs ------

Struct RPRNPrinterEnumFlags = FormatString( "0x%08X", Flags )
{
	UINT32 Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32  Unused1:1 = FormatString( "    (%s)", this.ToBitString );
					UINT32  Local:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Enumerate local printer objects" : "Local printer option not set" );
					UINT32  Connections:1 = FormatString( "(%s) %s", this.ToBitString, this? "Enumerate printer connections" : "Printer connections option not set" );
					UINT32  Name:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Enumerate printers specified by Name" : "Printer Name option not set" );

					UINT32  Remote:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Enumerate printers and print servers in same domain" : "Domain printer and server option not set" );
					UINT32  Shared:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Only enumerate shared printers" : "Shared printers option not set" );
					UINT32  Network:1 = FormatString( "    (%s) %s", this.ToBitString, this? "Enumerate printers in same domain" : "Domain printer option not set" );
					UINT32  Unused2:7 = FormatString( "    (%s)", this.ToBitString );
					UINT32  Expand:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Contains further enumerable child objects" : "Printer Expand option not set" );
					UINT32  Container:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Capable of containing enumerable objects" : "Printer Container option not set" );

					UINT32  Icon1:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Treat printer as a top-level network name" : "Printer Icon1 option not set" );
					UINT32  Icon2:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Treat an object as a network domain name" : "Printer Icon2 option not set" );
					UINT32  Icon3:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Treat an object as a print server" : "Printer Icon3 option not set" );
					UINT32  Unused3:4 = FormatString( "    (%s)", this.ToBitString );
					UINT32  Icon8:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Treat an object as a print server" : "Printer Icon8 option not set" );

					UINT32  Hide:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Enumerate printers are not displayed" : "Printer Hide option not set" );
					UINT32  Unused4:7 = FormatString( "    (%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32  Unused4:7 = FormatString( "    (%s)", this.ToBitString );
					UINT32  Hide:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Enumerate printers are not displayed" : "Printer Hide option not set" );

					UINT32  Icon8:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Treat an object as a print server" : "Printer Icon8 option not set" );
					UINT32  Unused3:4 = FormatString( "    (%s)", this.ToBitString );
					UINT32  Icon3:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Treat an object as a print server" : "Printer Icon3 option not set" );
					UINT32  Icon2:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Treat an object as a network domain name" : "Printer Icon2 option not set" );
					UINT32  Icon1:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Treat printer as a top-level network name" : "Printer Icon1 option not set" );

					UINT32  Container:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Capable of containing enumerable objects" : "Printer Container option not set" );
					UINT32  Expand:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Contains further enumerable child objects" : "Printer Expand option not set" );
					UINT32  Unused2:7 = FormatString( "    (%s)", this.ToBitString );
					UINT32  Network:1 = FormatString( "    (%s) %s", this.ToBitString, this? "Enumerate printers in same domain" : "Domain printer option not set" );
					UINT32  Shared:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Only enumerate shared printers" : "Shared printers option not set" );
					UINT32  Remote:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Enumerate printers and print servers in same domain" : "Domain printer and server option not set" );

					UINT32  Name:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Enumerate printers specified by Name" : "Printer Name option not set" );
					UINT32  Connections:1 = FormatString( "(%s) %s", this.ToBitString, this? "Enumerate printer connections" : "Printer connections option not set" );
					UINT32  Local:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Enumerate local printer objects" : "Local printer option not set" );
					UINT32  Unused1:1 = FormatString( "    (%s)", this.ToBitString );
				}
		}
	}
}

Table RPRNAccessValueTable( Value )
{
	Switch
	{
		Case (Value & 0x00020002) == 0x00020002: "ServerExecute and ServerRead - Access rights for print servers";
		Case (Value & 0x00020003) == 0x00020003: "ServerWrite - Access rights for print servers";
		Case (Value & 0x00020008) == 0x00020008: "PrinterExecute, PrinterRead and PrinterWrite - Access rights for printers";
		Case (Value & 0x00020020) == 0x00020020: "JobRead - Access rights for jobs";
		Case (Value & 0x000F0000) == 0x000F0000: "StandardRightsRequired - Standard rights";
		Case (Value & 0x000F0003) == 0x000F0003: "ServerAllAccess - Access rights for print servers to perform all administrative tasks and basic printing operations except synchronization";
		Case (Value & 0x000F000C) == 0x000F000C: "PrinterAllAccess - Access rights for printers to perform all administrative tasks and basic printing operations except synchronization";
		Case (Value & 0x000F0030) == 0x000F0030: "JobAllAccess - Access rights for printers to perform all administrative tasks and basic printing operations except Synchronize";
		Default: FormatString("0x%08X", Value);
	}
}

Struct RPRNAccessMaskFlags = RPRNAccessValueTable( Flags )
{
	UINT32 Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32  ServerAccessAdminister:1 = FormatString( " (%s) %s", this.ToBitString, this ? "Access rights to administer print servers" : "Not Set" );
					UINT32  ServerAccessEnumerate:1 = FormatString( "  (%s) %s", this.ToBitString, this ? "Access rights to enumerate print servers" : "Not Set" );
					UINT32  PrinterAccessAdminister:1 = FormatString( "(%s) %s", this.ToBitString, this ? "Access rights for printers to perform administrative tasks" : "Not Set" );
					UINT32  PrinterAccessUse:1 = FormatString( "       (%s) %s", this.ToBitString, this ? "Access rights for printers to perform basic printing operations" : "Not Set" );

					UINT32  JobAccessAdminister:1 = FormatString( "    (%s) %s", this.ToBitString, this ? "Authorization to cancel, pause, resume, or restart the job" : "Not Set" );
					UINT32  JobAccessRead:1 = FormatString( "          (%s) %s", this.ToBitString, this ? "Read rights for the spool file" : "Not Set" );
					UINT32  Reserved1:10 = FormatString( "              (%s)", this.ToBitString );

					UINT32  Delete:1 = FormatString( "                 (%s) %s", this.ToBitString, this ? "Right to delete an object" : "Not Set" );
					UINT32  StandardRightsExecute:1 = FormatString( "  (%s) %s", this.ToBitString, this ? "Standard rights to Execute, Read and Write control" : "Not Set" );
					UINT32  WriteDAC:1 = FormatString( "               (%s) %s", this.ToBitString, this ? "The right to modify the discretionary access control list (DACL) in the object's security descriptor" : "Not Set" );
					UINT32  WriteOwner:1 = FormatString( "             (%s) %s", this.ToBitString, this ? "The right to change the owner in the object's security descriptor" : "Not Set" );

					UINT32  Synchronize:1 = FormatString( "            (%s) %s", this.ToBitString, this ? "The right to use the object for synchronization" : "Not Set" );
					UINT32  Reserved2:3 = FormatString( "              (%s)", this.ToBitString );

					UINT32  GenericAll:1 = FormatString( "             (%s) %s", this.ToBitString, this ? "Access rights for server or printer , or job to perform all adminstrative tasks and basic printing operations except Synchronize" : "Not Set" );
					UINT32  GenericExecute:1 = FormatString( "         (%s) %s", this.ToBitString, this ? "Access rights for server execute or printer execute, or job execute" : "Not Set" );
					UINT32  GenericWrite:1 = FormatString( "           (%s) %s", this.ToBitString, this ? "Access rights for server write or printer write, or job write" : "Not Set" );
					UINT32  GenericRead:1 = FormatString( "            (%s) %s", this.ToBitString, this ? "Access rights for server read or printer read, or job read" : "Not Set" );
				}
			Default:
				Struct
				{
					UINT32  GenericRead:1 = FormatString( "            (%s) %s", this.ToBitString, this ? "Access rights for server read or printer read, or job read" : "Not Set" );
					UINT32  GenericWrite:1 = FormatString( "           (%s) %s", this.ToBitString, this ? "Access rights for server write or printer write, or job write" : "Not Set" );
					UINT32  GenericExecute:1 = FormatString( "         (%s) %s", this.ToBitString, this ? "Access rights for server execute or printer execute, or job execute" : "Not Set" );
					UINT32  GenericAll:1 = FormatString( "             (%s) %s", this.ToBitString, this ? "Access rights for server or printer , or job to perform all adminstrative tasks and basic printing operations except Synchronize" : "Not Set" );

					UINT32  Reserved2:3 = FormatString( "               (%s)", this.ToBitString );
					UINT32  Synchronize:1 = FormatString( "            (%s) %s", this.ToBitString, this ? "The right to use the object for synchronization" : "Not Set" );

					UINT32  WriteOwner:1 = FormatString( "             (%s) %s", this.ToBitString, this ? "The right to change the owner in the object's security descriptor" : "Not Set" );
					UINT32  WriteDAC:1 = FormatString( "               (%s) %s", this.ToBitString, this ? "The right to modify the discretionary access control list (DACL) in the object's security descriptor" : "Not Set" );
					UINT32  StandardRightsExecute:1 = FormatString( "  (%s) %s", this.ToBitString, this ? "Standard rights to Execute, Read and Write control" : "Not Set" );
					UINT32  Delete:1 = FormatString( "                 (%s) %s", this.ToBitString, this ? "Right to delete an object" : "Not Set" );

					UINT32  Reserved1:10 = FormatString( "              (%s)", this.ToBitString );
					UINT32  JobAccessRead:1 = FormatString( "          (%s) %s", this.ToBitString, this ? "Read rights for the spool file" : "Not Set" );
					UINT32  JobAccessAdminister:1 = FormatString( "   (%s) %s", this.ToBitString, this ? "Authorization to cancel, pause, resume, or restart the job" : "Not Set" );

					UINT32  PrinterAccessUse:1 = FormatString( "       (%s) %s", this.ToBitString, this ? "Access rights for printers to perform basic printing operations" : "Not Set" );
					UINT32  PrinterAccessAdminister:1 = FormatString( "(%s) %s", this.ToBitString, this ? "Access rights for printers to perform administrative tasks" : "Not Set" );
					UINT32  ServerAccessEnumerate:1 = FormatString( "  (%s) %s", this.ToBitString, this ? "Access rights to enumerate print servers" : "Not Set" );
					UINT32  ServerAccessAdminister:1 = FormatString( " (%s) %s", this.ToBitString, this ? "Access rights to administer print servers" : "Not Set" );
				}
		}
	}
}

Struct RPRNPrinterStatusFlags = FormatString( "0x%08X", Flags )
{
	UINT32  Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32	Paused:1 = FormatString( "          (%s) %s", this.ToBitString, this? "The printer is paused" : "Not set" );
					UINT32  Error:1 = FormatString( "           (%s) %s", this.ToBitString, this? "The printer is in an error state" : "Not set" );
					UINT32  Deletion:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer is being deleted" : "Not set" );
					UINT32  PaperJam:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Paper is stuck in the printer" : "Not set" );

					UINT32  PaperOut:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer is out of paper" : "Not set" );
					UINT32  ManualFeed:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The printer is in a manual feed state" : "Not set" );
					UINT32  PaperProblem:1 = FormatString( "    (%s) %s", this.ToBitString, this? "The printer has an unspecified paper problem" : "Not set" );
					UINT32  Offline:1 = FormatString( "         (%s) %s", this.ToBitString, this? "The printer is offline" : "Not set" );

					UINT32  IOActive:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer is in an active input or output state" : "Not set" );
					UINT32  Busy:1 = FormatString( "            (%s) %s", this.ToBitString, this? "The printer is busy" : "Not set" );
					UINT32  Printing:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer is printing" : "Not set" );
					UINT32  OutputBinFull:1 = FormatString( "   (%s) %s", this.ToBitString, this? "The printer is initializing" : "Not set" );

					UINT32  NotAvailable:1 = FormatString( "    (%s) %s", this.ToBitString, this? "The printer is not available for printing" : "Not set" );
					UINT32  Waiting:1 = FormatString( "         (%s) %s", this.ToBitString, this? "The printer is waiting" : "Not set" );
					UINT32  Processing:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The printer is processing a print job" : "Not set" );
					UINT32  Initializing:1 = FormatString( "    (%s) %s", this.ToBitString, this? "The printer is initializing" : "Not set" );

					UINT32  WarmingUp:1 = FormatString( "       (%s) %s", this.ToBitString, this? "The printer is warming up" : "Not set" );
					UINT32  TonerLow:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer is out of toner" : "Not set" );
					UINT32  NoToner:1 = FormatString( "         (%s) %s", this.ToBitString, this? "The printer is out of toner" : "Not set" );
					UINT32  PagePunt:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer cannot print the current page" : "Not set" );

					UINT32  UserIntervention:1 = FormatString( "(%s) %s", this.ToBitString, this? "The printer has an error that requires the user to do something" : "Not set" );
					UINT32  OutOfMemory:1 = FormatString( "     (%s) %s", this.ToBitString, this? "The printer has run out of memory" : "Not set" );
					UINT32  StatusDoorOpen:1 = FormatString( "  (%s) %s", this.ToBitString, this? "The printer door is open." : "Not set" );
					UINT32  ServerUnknown:1 = FormatString( "   (%s) %s", this.ToBitString, this? "PThe printer status is unknown" : "Not set" );

					UINT32  PowerSave:1 = FormatString( "       (%s) %s", this.ToBitString, this? "The printer is in power-save mode" : "Not set" );
					UINT32  ServerOffline:1 = FormatString( "   (%s) %s", this.ToBitString, this? "The printer is offline" : "Not set" );
					UINT32  Unused:6 = FormatString( "          (%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32  Reserved:6 = FormatString( "        (%s)", this.ToBitString );
					UINT32  ServerOffline:1 = FormatString( "   (%s) %s", this.ToBitString, this? "The printer is offline" : "Not set" );
					UINT32  PowerSave:1 = FormatString( "       (%s) %s", this.ToBitString, this? "The printer is in power-save mode" : "Not set" );

					UINT32  ServerUnknown:1 = FormatString( "   (%s) %s", this.ToBitString, this? "PThe printer status is unknown" : "Not set" );
					UINT32  StatusDoorOpen:1 = FormatString( "  (%s) %s", this.ToBitString, this? "The printer door is open." : "Not set" );
					UINT32  OutOfMemory:1 = FormatString( "     (%s) %s", this.ToBitString, this? "The printer has run out of memory" : "Not set" );
					UINT32  UserIntervention:1 = FormatString( "(%s) %s", this.ToBitString, this? "The printer has an error that requires the user to do something" : "Not set" );

					UINT32  PagePunt:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer cannot print the current page" : "Not set" );
					UINT32  NoToner:1 = FormatString( "         (%s) %s", this.ToBitString, this? "The printer is out of toner" : "Not set" );
					UINT32  TonerLow:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer is out of toner" : "Not set" );
					UINT32  WarmingUp:1 = FormatString( "       (%s) %s", this.ToBitString, this? "The printer is warming up" : "Not set" );

					UINT32  Initializing:1 = FormatString( "    (%s) %s", this.ToBitString, this? "The printer is initializing" : "Not set" );
					UINT32  Processing:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The printer is processing a print job" : "Not set" );
					UINT32  Waiting:1 = FormatString( "         (%s) %s", this.ToBitString, this? "The printer is waiting" : "Not set" );
					UINT32  NotAvailable:1 = FormatString( "    (%s) %s", this.ToBitString, this? "The printer is not available for printing" : "Not set" );

					UINT32  OutputBinFull:1 = FormatString( "   (%s) %s", this.ToBitString, this? "The printer is initializing" : "Not set" );
					UINT32  Printing:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer is printing" : "Not set" );
					UINT32  Busy:1 = FormatString( "            (%s) %s", this.ToBitString, this? "The printer is busy" : "Not set" );
					UINT32  IOActive:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer is in an active input or output state" : "Not set" );

					UINT32  Offline:1 = FormatString( "         (%s) %s", this.ToBitString, this? "The printer is offline" : "Not set" );
					UINT32  PaperProblem:1 = FormatString( "    (%s) %s", this.ToBitString, this? "The printer has an unspecified paper problem" : "Not set" );
					UINT32  ManualFeed:1 = FormatString( "      (%s) %s", this.ToBitString, this? "The printer is in a manual feed state" : "Not set" );
					UINT32  PaperOut:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer is out of paper" : "Not set" );

					UINT32  PaperJam:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Paper is stuck in the printer" : "Not set" );
					UINT32  Deletion:1 = FormatString( "        (%s) %s", this.ToBitString, this? "The printer is being deleted" : "Not set" );
					UINT32  Error:1 = FormatString( "           (%s) %s", this.ToBitString, this? "The printer is in an error state" : "Not set" );
					UINT32  Paused:1 = FormatString( "          (%s) %s", this.ToBitString, this? "The printer is paused" : "Not set" );
				}
		}
	}
}

Struct RPRNJobStatusFlags = FormatString( "0x%08X", Flags )
{
	UINT32  Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32	Paused:1 = FormatString( "          (%s) %s", this.ToBitString, this? "Job is paused" : " Not set" );
					UINT32	Error:1 = FormatString( "           (%s) %s", this.ToBitString, this? "An error is associated with the job" : " Not set" );
					UINT32	Deleting:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Job is being deleted" : " Not set" );
					UINT32	Spooling:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Job is spooling" : " Not set" );

					UINT32	Printing:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Job is printing" : " Not set" );
					UINT32	Offline:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Printer is offline" : " Not set" );
					UINT32	Paperout:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Printer is out of paper" : " Not set" );
					UINT32	Printed:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Job has printed" : " Not set" );

					UINT32	Deleted:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Job has been deleted" : " Not set" );
					UINT32	BlockedDevq:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Printer driver cannot print the job" : " Not set" );
					UINT32	UserIntervention:1 = FormatString( "(%s) %s", this.ToBitString, this? "Printer has an error that requires the user to do something" : " Not set" );
					UINT32	Restart:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Job has been restarted" : " Not set" );

					UINT32	Complete:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Job has been delivered to the printer" : " Not set" );
					UINT32  Unused:19 = FormatString( "          (%s)", this.ToBitString );
				}

			Default:
				Struct
				{
					UINT32  Unused:19 = FormatString( "          (%s)", this.ToBitString );
					UINT32	Complete:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Job has been delivered to the printer" : " Not set" );

					UINT32	Restart:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Job has been restarted" : " Not set" );
					UINT32	UserIntervention:1 = FormatString( "(%s) %s", this.ToBitString, this? "Printer has an error that requires the user to do something" : " Not set" );
					UINT32	BlockedDevq:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Printer driver cannot print the job" : " Not set" );
					UINT32	Deleted:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Job has been deleted" : " Not set" );

					UINT32	Printed:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Job has printed" : " Not set" );
					UINT32	Paperout:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Printer is out of paper" : " Not set" );
					UINT32	Offline:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Printer is offline" : " Not set" );
					UINT32	Printing:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Job is printing" : " Not set" );

					UINT32	Spooling:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Job is spooling" : " Not set" );
					UINT32	Deleting:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Job is being deleted" : " Not set" );
					UINT32	Error:1 = FormatString( "           (%s) %s", this.ToBitString, this? "An error is associated with the job" : " Not set" );
					UINT32	Paused:1 = FormatString( "          (%s) %s", this.ToBitString, this? "Job is paused" : " Not set" );
				}
		}
	}
}

Struct RPRNPrinterAttributeFlags = FormatString( "0x%08X", Flags )
{
	UINT32 Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32  Queued:1 = FormatString( "         (%s) %s", this.ToBitString, this? "The printer spools and starts printing after the last page is spooled" : "Not set" );
					UINT32  Direct:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Job is sent directly to the printer" : "Not set" );
					UINT32  Default:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Indicates the printer is the default printer in the system" : "Not set" );
					UINT32  Shared:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Printer is shared" : "Not set" );

					UINT32  Network:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Printer is a network printer connection" : "Not set" );
					UINT32  Unused1:1 = FormatString( "        (%s)", this.ToBitString );
					UINT32  Local:1 = FormatString( "          (%s) %s", this.ToBitString, this? "Printer is a local printer" : "Not set" );
					UINT32  DevQ:1 = FormatString( "           (%s) %s", this.ToBitString, this? " Mismatched documents to be held in the queue" : "Not set" );

					UINT32  KeepPrintedJobs:1 = FormatString( "(%s) %s", this.ToBitString, this? "Jobs are kept after they are printed. If cleared, jobs are deleted" : "Not set" );
					UINT32  DoCompleteFirst:1 = FormatString( "(%s) %s", this.ToBitString, this? "Any jobs that have completed spooling are scheduled to print before jobs that have not completed spooling" : "Not set" );
					UINT32  WorkOffline:1 = FormatString( "    (%s) %s", this.ToBitString, this? "Indicates whether the printer is currently connected" : "Not set" );
					UINT32  EnableBIDI:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Indicates whether bidirectional communications are enabled for the printer" : "Not set" );

					UINT32  RawOnly:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Indicates that only RAW datatype print jobs MUST be spooled." : "Not set" );
					UINT32  Published:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Indicates whether the printer is published in the directory service" : "Not set" );
					UINT32  Fax:1 = FormatString( "            (%s) %s", this.ToBitString, this? "Printer is a fax printer" : "Not set" );
					UINT32  TS:1 = FormatString( "             (%s) %s", this.ToBitString, this? "Printer is a redirected terminal server printer" : "Not set" );

					UINT32  Unused2:16 = FormatString( "        (%s)", this.ToBitString);
				}
			Default:
				Struct
				{
					UINT32  Unused2:16 = FormatString( "        (%s)", this.ToBitString);

					UINT32  TS:1 = FormatString( "             (%s) %s", this.ToBitString, this? "Printer is a redirected terminal server printer" : "Not set" );
					UINT32  Fax:1 = FormatString( "            (%s) %s", this.ToBitString, this? "Printer is a fax printer" : "Not set" );
					UINT32  Published:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Indicates whether the printer is published in the directory service" : "Not set" );
					UINT32  RawOnly:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Indicates that only RAW datatype print jobs MUST be spooled." : "Not set" );

					UINT32  EnableBIDI:1 = FormatString( "     (%s) %s", this.ToBitString, this? "Indicates whether bidirectional communications are enabled for the printer" : "Not set" );
					UINT32  WorkOffline:1 = FormatString( "    (%s) %s", this.ToBitString, this? "Indicates whether the printer is currently connected" : "Not set" );
					UINT32  DoCompleteFirst:1 = FormatString( "(%s) %s", this.ToBitString, this? "Any jobs that have completed spooling are scheduled to print before jobs that have not completed spooling" : "Not set" );
					UINT32  KeepPrintedJobs:1 = FormatString( "(%s) %s", this.ToBitString, this? "Jobs are kept after they are printed. If cleared, jobs are deleted" : "Not set" );

					UINT32  DevQ:1 = FormatString( "           (%s) %s", this.ToBitString, this? " Mismatched documents to be held in the queue" : "Not set" );
					UINT32  Local:1 = FormatString( "          (%s) %s", this.ToBitString, this? "Printer is a local printer" : "Not set" );
					UINT32  Unused1:1 = FormatString( "        (%s)", this.ToBitString );
					UINT32  Network:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Printer is a network printer connection" : "Not set" );

					UINT32  Shared:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Printer is shared" : "Not set" );
					UINT32  Default:1 = FormatString( "        (%s) %s", this.ToBitString, this? "Indicates the printer is the default printer in the system" : "Not set" );
					UINT32  Direct:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Job is sent directly to the printer" : "Not set" );
					UINT32  Queued:1 = FormatString( "         (%s) %s", this.ToBitString, this? "The printer spools and starts printing after the last page is spooled" : "Not set" );
				}
		}
	}
}

Struct RPRNPrinterInfoActionFlags = FormatString( "0x%08X", Flags )
{
	UINT32		Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 Publish:1 = FormatString( "  (%s) %s", this.ToBitString, "DSPRINT_PUBLISH" );
					UINT32 Update:1 = FormatString( "   (%s) %s", this.ToBitString, "DSPRINT_UPDATE" );
					UINT32 Unpublish:1 = FormatString( "(%s) %s", this.ToBitString, "DSPRINT_UNPUBLISH" );
					UINT32 Republish:1 = FormatString( "(%s) %s", this.ToBitString, "DSPRINT_REPUBLISH" );
					UINT32 Reserved:27 = FormatString( " (%s)", this.ToBitString);
					UINT32 Pending:1 = FormatString( "  (%s) %s", this.ToBitString, "DSPRINT_PENDING" );
				}
			Default:
				Struct
				{
					UINT32 Pending:1 = FormatString( "  (%s) %s", this.ToBitString, "DSPRINT_PENDING" );
					UINT32 Reserved:27 = FormatString( " (%s)", this.ToBitString);
					UINT32 Republish:1 = FormatString( "(%s) %s", this.ToBitString, "DSPRINT_REPUBLISH" );
					UINT32 Unpublish:1 = FormatString( "(%s) %s", this.ToBitString, "DSPRINT_UNPUBLISH" );
					UINT32 Update:1 = FormatString( "   (%s) %s", this.ToBitString, "DSPRINT_UPDATE" );
					UINT32 Publish:1 = FormatString( "  (%s) %s", this.ToBitString, "DSPRINT_PUBLISH" );
				}
		}
	}
}

Struct RPRNDevModeFieldsInitializedFlags = FormatString( "0x%08X", Flags )
{
	UINT32  Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32  OR:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Orientation field MUST be initialized." : "Orientation field SHOULD be set to zero and MUST be ignored on receipt." );
					//This bit MUST NOT be set if either DM_PAPERLENGTH or DM_PAPERWIDTH are set.
					UINT32  PS:1 = FormatString( "  (%s) %s", this.ToBitString, this? "PaperSize field MUST be initialized." : "PaperSize field SHOULD be set to zero and MUST be ignored on receipt." );
					//This bit MUST NOT be set if DM_PAPERSIZE is set.
					UINT32  PL:1 = FormatString( "  (%s) %s", this.ToBitString, this? "PaperLength field MUST be initialized." : "PaperLength field SHOULD be set to zero and MUST be ignored on receipt." );
					//This bit MUST NOT be set if DM_PAPERSIZE is set.
					UINT32  PW:1 = FormatString( "  (%s) %s", this.ToBitString, this? "PaperWidth field MUST be initialized. " : "PaperWidth field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  SC:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Scale field MUST be initialized." : "Scale field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  Res1:1 = FormatString( "(%s) Reserved", this.ToBitString );
					UINT32  UP:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Nup field MUST be initialized." : "Nup field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  Res2:1 = FormatString( "(%s) Reserved", this.ToBitString );

					UINT32  CP:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Copies field MUST be initialized." : "Copies field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  DS:1 = FormatString( "  (%s) %s", this.ToBitString, this? "DefaultSource field MUST be initialized." : "DefaultSource field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  PQ:1 = FormatString( "  (%s) %s", this.ToBitString, this? "PrintQuality field MUST be initialized." : "PrintQuality field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  CR:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Color field MUST be initialized." : "Color field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  DX:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Duplex field MUST be initialized." : "Duplex field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  Y:1 = FormatString( "   (%s) %s", this.ToBitString, this? "YResolution field MUST be initialized." : "YResolution field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  TT:1 = FormatString( "  (%s) %s", this.ToBitString, this? "TTOption field MUST be initialized." : "TTOption field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  CL:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Collate field MUST be initialized." : "Collate field SHOULD be set to zero and MUST be ignored on receipt." );
					
					UINT32  FM:1 = FormatString( "  (%s) %s", this.ToBitString, this? "FormName field MUST be initialized." : "FormName field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  Res3:6 = FormatString( "(%s) Reserved", this.ToBitString );
					UINT32  CM:1 = FormatString( "  (%s) %s", this.ToBitString, this? "ICMMethod field MUST be initialized." : "ICMMethod field SHOULD be set to zero and MUST be ignored on receipt." );

					UINT32  CI:1 = FormatString( "  (%s) %s", this.ToBitString, this? "ICMIntent field MUST be initialized." : "ICMIntent field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  MT:1 = FormatString( "  (%s) %s", this.ToBitString, this? "MediaType field MUST be initialized." : "MediaType field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  DT:1 = FormatString( "  (%s) %s", this.ToBitString, this? "DitherType field MUST be initialized." : "DitherType field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  Res4:5 = FormatString( "(%s) Reserved", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32  Res1:1 = FormatString( "(%s) Reserved", this.ToBitString );
					UINT32  UP:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Nup field MUST be initialized." : "Nup field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  Res2:1 = FormatString( "(%s) Reserved", this.ToBitString );
					UINT32  SC:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Scale field MUST be initialized." : "Scale field SHOULD be set to zero and MUST be ignored on receipt." );
					//This bit MUST NOT be set if DM_PAPERSIZE is set.
					UINT32  PW:1 = FormatString( "  (%s) %s", this.ToBitString, this? "PaperWidth field MUST be initialized. " : "PaperWidth field SHOULD be set to zero and MUST be ignored on receipt." );
					//This bit MUST NOT be set if DM_PAPERSIZE is set.
					UINT32  PL:1 = FormatString( "  (%s) %s", this.ToBitString, this? "PaperLength field MUST be initialized." : "PaperLength field SHOULD be set to zero and MUST be ignored on receipt." );
					//This bit MUST NOT be set if either DM_PAPERLENGTH or DM_PAPERWIDTH are set.
					UINT32  PS:1 = FormatString( "  (%s) %s", this.ToBitString, this? "PaperSize field MUST be initialized." : "PaperSize field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  OR:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Orientation field MUST be initialized." : "Orientation field SHOULD be set to zero and MUST be ignored on receipt." );

					UINT32  CL:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Collate field MUST be initialized." : "Collate field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  TT:1 = FormatString( "  (%s) %s", this.ToBitString, this? "TTOption field MUST be initialized." : "TTOption field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  Y:1 = FormatString( "   (%s) %s", this.ToBitString, this? "YResolution field MUST be initialized." : "YResolution field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  DX:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Duplex field MUST be initialized." : "Duplex field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  CR:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Color field MUST be initialized." : "Color field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  PQ:1 = FormatString( "  (%s) %s", this.ToBitString, this? "PrintQuality field MUST be initialized." : "PrintQuality field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  DS:1 = FormatString( "  (%s) %s", this.ToBitString, this? "DefaultSource field MUST be initialized." : "DefaultSource field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  CP:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Copies field MUST be initialized." : "Copies field SHOULD be set to zero and MUST be ignored on receipt." );

					UINT32  CM:1 = FormatString( "  (%s) %s", this.ToBitString, this? "ICMMethod field MUST be initialized." : "ICMMethod field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  Res3:6 = FormatString( "(%s) Reserved", this.ToBitString );
					UINT32  FM:1 = FormatString( "	(%s) %s", this.ToBitString, this? "FormName field MUST be initialized." : "FormName field SHOULD be set to zero and MUST be ignored on receipt." );

					UINT32  Res4:5 = FormatString( "(%s) Reserved", this.ToBitString );
					UINT32  DT:1 = FormatString( "  (%s) %s", this.ToBitString, this? "DitherType field MUST be initialized." : "DitherType field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  MT:1 = FormatString( "  (%s) %s", this.ToBitString, this? "MediaType field MUST be initialized." : "MediaType field SHOULD be set to zero and MUST be ignored on receipt." );
					UINT32  CI:1 = FormatString( "  (%s) %s", this.ToBitString, this? "ICMIntent field MUST be initialized." : "ICMIntent field SHOULD be set to zero and MUST be ignored on receipt." );
				}
		}
	}
}

Struct RPRNDriverInfoPrinterDriverAttributesFlags  = FormatString( "0x%08X", Flags )
{
	UINT32 Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 PackageAware:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Printer driver is part of a driver package" : "Not set" );
					UINT32 Unused1:1 = FormatString( "       (%s)", this.ToBitString);
					UINT32 SandboxEnabled:1 = FormatString( "(%s) %s", this.ToBitString, this? "Printer driver is compatible with printer driver isolation" : "Not set" );
					UINT32 Unused2:29 = FormatString( "       (%s)", this.ToBitString);
				}
			Default:
				Struct
				{
					UINT32 Unused2:29 = FormatString( "       (%s)", this.ToBitString);
					UINT32 SandboxEnabled:1 = FormatString( "(%s) %s", this.ToBitString, this? "Printer driver is compatible with printer driver isolation" : "Not Set" );
					UINT32 Unused1:1 = FormatString( "       (%s)", this.ToBitString);
					UINT32 PackageAware:1 = FormatString( "  (%s) %s", this.ToBitString, this? "Printer driver is part of a driver package" : "Not set" );
				}
		}
	}
}

Struct RPRNDriverInfo5DriverAttributesFlags = FormatString( "0x%08X", Flags )
{
	UINT32 Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 Unused1:7 = FormatString( "     (%s)", this.ToBitString);
					UINT32 PackageAware:1 = FormatString( "(%s) %s", this.ToBitString, this? "The printer driver is part of a driver package." : "Not set" );
					UINT32 Unused2:24 = FormatString( "     (%s)", this.ToBitString);
				}
			Default:
				Struct
				{
					UINT32 Unused2:24 = FormatString( "     (%s)", this.ToBitString);
					UINT32 PackageAware:1 = FormatString( "(%s) %s", this.ToBitString, this? "The printer driver is part of a driver package." : "Not set" );
					UINT32 Unused1:7 = FormatString( "     (%s)", this.ToBitString);
				}
		}
	}

}

Struct RPRNDeletePrinterDriverFlags = FormatString( "0x%08X", Flags )
{
	UINT32	Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32  DeleteUnusedfiles:1 = FormatString( "    (%s) %s", this.ToBitString, this? "Delete unused printer driver files" : "Delete unused files option not set" );
					UINT32  DeleteSpecificVersion:1 = FormatString( "(%s) %s", this.ToBitString, this? "Delete specific driver version" : "Delete specific version option not set" );
					UINT32  DeleteAllFiles:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Delete the printer driver only if all its associated files can be removed." : "Delete all files option not set" );
					UINT32  Unused:29 = FormatString( "               (%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32  Unused:29 = FormatString( "               (%s)", this.ToBitString );
					UINT32  DeleteUnusedfiles:1 = FormatString( "    (%s) %s", this.ToBitString, this? "Delete unused printer driver files" : "Delete unused files option not set" );
					UINT32  DeleteSpecificVersion:1 = FormatString( "(%s) %s", this.ToBitString, this? "Delete specific driver version" : "Delete specific version option not set" );
					UINT32  DeleteAllFiles:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Delete the printer driver only if all its associated files can be removed." : "Delete all files option not set" );
				}
		}
	}
}

Struct RPRNFileCopyFlags = FormatString( "0x%08X", Flags )
{
	UINT32  Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32  StrictUpgrade:1 = FormatString( "           (%s) %s", this.ToBitString, this? "Add the replacement printer driver only if none of the files of the replacement driver are older than any corresponding files of the currently installed driver." : "Not set" );
					UINT32  StrictDowngrade:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Add the replacement printer driver only if none of the files of the currently installed driver are older than any corresponding files of the replacement driver." : "Not set"  );
					UINT32  CopyAllFiles:1 = FormatString( "            (%s) %s", this.ToBitString, this? "Add the printer driver and copy all the files in the driver directory. File time stamps MUST be ignored." : "Not set" );
					UINT32  CopyNewFiles:1 = FormatString( "            (%s) %s", this.ToBitString, this? "Add the printer driver and copy the files in the driver directory that are newer than any of the corresponding files that are currently in use." : "Not set" );

					UINT32  CopyFromDirectory:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Add the printer driver by using the fully qualified file names that are specified in the _DRIVER_INFO_6 Structure. If this flag is specified, one of the other copy flags in this bitfield MUST be specified." : "Not set" );
					UINT32  Unused1:7 = FormatString( "                 (%s)", this.ToBitString);

					UINT32  CopyFilesToCluster:1 = FormatString( "      (%s) %s", this.ToBitString, this? "When adding a printer driver to a print server cluster, do not copy the driver files to the shared cluster disk." : "Not Set" );
					UINT32  CopyToAllSpoolers:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Add the printer driver to cluster spooler servers." : "Not set" );
					UINT32  Unused2:2 = FormatString( "                 (%s)", this.ToBitString);

					UINT32  ReturnBlockingStatusCode:1 = FormatString( "(%s) %s", this.ToBitString, this? "ERROR_PRINTER_DRIVER_BLOCKED is returned." : "ERROR_PRINTER_DRIVER_BLOCKED is not returned." );
					UINT32  Unused3:15 = FormatString( "                 (%s)", this.ToBitString);
				}
			Default:
				Struct
				{
					UINT32  Unused3:15 = FormatString( "                 (%s)", this.ToBitString);
					UINT32  ReturnBlockingStatusCode:1 = FormatString( "(%s) %s", this.ToBitString, this? "ERROR_PRINTER_DRIVER_BLOCKED is returned." : "ERROR_PRINTER_DRIVER_BLOCKED is not returned." );

					UINT32  Unused2:2 = FormatString( "                 (%s)", this.ToBitString);
					UINT32  CopyToAllSpoolers:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Add the printer driver to cluster spooler servers." : "Not set" );
					UINT32  CopyFilesToCluster:1 = FormatString( "      (%s) %s", this.ToBitString, this? "When adding a printer driver to a print server cluster, do not copy the driver files to the shared cluster disk." : "Not Set" );

					UINT32  Unused1:7 = FormatString( "                 (%s)", this.ToBitString);
					UINT32  CopyFromDirectory:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Add the printer driver by using the fully qualified file names that are specified in the _DRIVER_INFO_6 Structure. If this flag is specified, one of the other copy flags in this bitfield MUST be specified." : "Not set" );

					UINT32  CopyNewFiles:1 = FormatString( "            (%s) %s", this.ToBitString, this? "Add the printer driver and copy the files in the driver directory that are newer than any of the corresponding files that are currently in use." : "Not set" );
					UINT32  CopyAllFiles:1 = FormatString( "            (%s) %s", this.ToBitString, this? "Add the printer driver and copy all the files in the driver directory. File time stamps MUST be ignored." : "Not set" );
					UINT32  StrictDowngrade:1 = FormatString( "         (%s) %s", this.ToBitString, this? "Add the replacement printer driver only if none of the files of the currently installed driver are older than any corresponding files of the replacement driver." : "Not set"  );
					UINT32  StrictUpgrade:1 = FormatString( "           (%s) %s", this.ToBitString, this? "Add the replacement printer driver only if none of the files of the replacement driver are older than any corresponding files of the currently installed driver." : "Not set" )
				}
		}
	}
}

Table RPRNPrinterChangeFlagsTable( Value )
{
	Switch
	{
		Case ( Value & 0x000000FF ) == 0x000000FF: "ChangePrinter - A printer object changed in some way";
		Case ( Value & 0x0000FF00 ) == 0x0000FF00: "ChangeJob - A print job changed in some way";
		Case ( Value & 0x00070000 ) == 0x00070000: "ChangeForm - A form was changed in some way";
		Case ( Value & 0x00700000 ) == 0x00700000: "ChangePort - A port was changed in some way";
		Case ( Value & 0x07000000 ) == 0x07000000: "ChangePrintProcessor - The properties for a print processor were updated";
		Case ( Value & 0x70000000 ) == 0x70000000: "ChangePrinterDriver - A printer driver was changed in some way";
		Case ( Value & 0x7777FFFF ) == 0x7777FFFF: "ChangeAll  - A change was made to one or more printer-related objects";
		Default: FormatString("0x%08X", Value);
	}
}

Struct RPRNPrinterChangeFlags = RPRNPrinterChangeFlagsTable( Flags )
{
	UINT32  Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32  AddPrinter:1 = FormatString( "          (%s) %s", this.ToBitString, this? "A printer object was added.": "No printer object was added." );
					UINT32  SetPrinter:1 = FormatString( "          (%s) %s", this.ToBitString, this? "Printer object properties were configured." : "No printer object properties were configured." );
					UINT32  DeletePrinter:1 = FormatString( "       (%s) %s", this.ToBitString, this? "A printer object was deleted." : "No printer object was deleted" );
					UINT32  ChangeFailed:1 = FormatString( "        (%s) %s", this.ToBitString, this? "A connection to a printer object failed." : "Not set");
					UINT32  Unused1:4 = FormatString( "             (%s)", this.ToBitString);

					UINT32  AddJob:1 = FormatString( "              (%s) %s", this.ToBitString, this? "A print job was added." : "No print job was added." );
					UINT32  SetJob:1 = FormatString( "              (%s) %s", this.ToBitString, this? "Print job properties were configured." : "No Print job properties were configured." );
					UINT32  DeleteJob:1 = FormatString( "           (%s) %s", this.ToBitString, this? "A print job was deleted." : "No print job was deleted." );
					UINT32  WriteJob:1 = FormatString( "            (%s) %s", this.ToBitString, this? "A print job was written." : "No print job was written." );
					UINT32  Unused2:4 = FormatString( "             (%s)", this.ToBitString);

					UINT32  AddForm:1 = FormatString( "             (%s) %s", this.ToBitString, this? "A form was added." : "No form was added." );
					UINT32  SetForm:1 = FormatString( "             (%s) %s", this.ToBitString, this? "Form properties were configured." : "No form properties were configured." );
					UINT32  DeleteForm:1 = FormatString( "          (%s) %s", this.ToBitString, this? "A form was deleted." : "No form was deleted." );
					UINT32  Unused3:1 = FormatString( "             (%s)", this.ToBitString);
					UINT32  AddPort:1 = FormatString( "             (%s) %s", this.ToBitString, this? "A port was added.": "No port was added." );
					UINT32  ConfigurePort:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Port properties were configured.": "No port properties were configured.");
					UINT32  DeletePort:1 = FormatString( "          (%s) %s", this.ToBitString, this? "A port was deleted.": "No port was deleted." );
					UINT32  Unused4:1 = FormatString( "             (%s)", this.ToBitString);

					UINT32  AddPrintProcessor:1 = FormatString( "   (%s) %s", this.ToBitString, this? "A print processor was added.": "No print processor was added." );
					UINT32  Unused5:1 = FormatString( "             (%s)", this.ToBitString);
					UINT32  DeletePrintProcessor:1 = FormatString( "(%s) %s", this.ToBitString, this? "A print processor was deleted.": "No print processor was deleted." );
					UINT32  Server:1 = FormatString( "              (%s)", this.ToBitString, this? "A change was made to one or more of the monitored server configuration settings.": "No change was made to one or more of the monitored server configuration settings.");
					UINT32  AddPrinterDriver:1 = FormatString( "    (%s) %s", this.ToBitString, this? "A printer driver was added.": "No printer driver was added." );
					UINT32  SetPrinterDriver:1 = FormatString( "    (%s) %s", this.ToBitString, this? "A printer driver was specified.": "No printer driver was specified." );
					UINT32  DeletePrinterDriver:1 = FormatString( " (%s) %s", this.ToBitString, this? "A printer driver was deleted.": "No printer driver was deleted.");
					UINT32  Timeout:1 = FormatString( "             (%s) %s", this.ToBitString, this? "Returned by RpcWaitForPrinterChange if the implementation-specific timeout has expired.": "Not set" );
				}
			Default:
				Struct
				{
					UINT32  Timeout:1 = FormatString( "             (%s) %s", this.ToBitString, this? "Returned by RpcWaitForPrinterChange if the implementation-specific timeout has expired.": "Not set" );
					UINT32  DeletePrinterDriver:1 = FormatString( " (%s) %s", this.ToBitString, this? "A printer driver was deleted.": "No printer driver was deleted.");
					UINT32  SetPrinterDriver:1 = FormatString( "    (%s) %s", this.ToBitString, this? "A printer driver was specified.": "No printer driver was specified." );
					UINT32  AddPrinterDriver:1 = FormatString( "    (%s) %s", this.ToBitString, this? "A printer driver was added.": "No printer driver was added." );
					UINT32  Server:1 = FormatString( "              (%s)", this.ToBitString, this? "A change was made to one or more of the monitored server configuration settings.": "No change was made to one or more of the monitored server configuration settings.");
					UINT32  DeletePrintProcessor:1 = FormatString( "(%s) %s", this.ToBitString, this? "A print processor was deleted.": "No print processor was deleted." );
					UINT32  Unused5:1 = FormatString( "             (%s)", this.ToBitString);
					UINT32  AddPrintProcessor:1 = FormatString( "   (%s) %s", this.ToBitString, this? "A print processor was added.": "No print processor was added." );

					UINT32  Unused4:1 = FormatString( "             (%s)", this.ToBitString);
					UINT32  DeletePort:1 = FormatString( "          (%s) %s", this.ToBitString, this? "A port was deleted.": "No port was deleted." );
					UINT32  ConfigurePort:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Port properties were configured.": "No port properties were configured.");
					UINT32  AddPort:1 = FormatString( "             (%s) %s", this.ToBitString, this? "A port was added.": "No port was added." );
					UINT32  Unused3:1 = FormatString( "             (%s)", this.ToBitString);
					UINT32  DeleteForm:1 = FormatString( "          (%s) %s", this.ToBitString, this? "A form was deleted." : "No form was deleted." );
					UINT32  SetForm:1 = FormatString( "             (%s) %s", this.ToBitString, this? "Form properties were configured." : "No form properties were configured." );
					UINT32  AddForm:1 = FormatString( "             (%s) %s", this.ToBitString, this? "A form was added." : "No form was added." );

					UINT32  Unused2:4 = FormatString( "             (%s)", this.ToBitString);
					UINT32  WriteJob:1 = FormatString( "            (%s) %s", this.ToBitString, this? "A print job was written." : "No print job was written." );
					UINT32  DeleteJob:1 = FormatString( "           (%s) %s", this.ToBitString, this? "A print job was deleted." : "No print job was deleted." );
					UINT32  SetJob:1 = FormatString( "              (%s) %s", this.ToBitString, this? "Print job properties were configured." : "No Print job properties were configured." );
					UINT32  AddJob:1 = FormatString( "              (%s) %s", this.ToBitString, this? "A print job was added." : "No print job was added." );

					UINT32  Unused1:4 = FormatString( "             (%s)", this.ToBitString);
					UINT32  ChangeFailed:1 = FormatString( "        (%s) %s", this.ToBitString, this? "A connection to a printer object failed." : "Not set");
					UINT32  DeletePrinter:1 = FormatString( "       (%s) %s", this.ToBitString, this? "A printer object was deleted." : "No printer object was deleted" );
					UINT32  SetPrinter:1 = FormatString( "          (%s) %s", this.ToBitString, this? "Printer object properties were configured." : "No printer object properties were configured." );
					UINT32  AddPrinter:1 = FormatString( "          (%s) %s", this.ToBitString, this? "A printer object was added.": "No printer object was added." );
				}
		}
	}
}

Struct RPRNChangeNotificationInfoFlags = FormatString( "0x%08X", Flags )
{
	UINT32  Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32  Discarded:1 = FormatString( "    (%s) %s", this.ToBitString, this ? "An overflow or error has occurred, and notifications have been lost.": "Not set" );
					UINT32  Unused1:15 = FormatString( "      (%s)", this.ToBitString);
					UINT32  DiscardNoted:1 = FormatString( " (%s) %s", this.ToBitString, this? "The client acknowledges receiving and processing the PRINTER_NOTIFY_INFO_DISCARDED notification." : "Not set" );
					UINT32	Unused2:2 = FormatString( "      (%s)", this.ToBitString);
					UINT32  ColorMisMatch:1 = FormatString( "(%s) %s", this.ToBitString, this? "The value of the dwColor parameter in a call to RpcRouterReplyPrinterEx does not match the value the client previously passed to the server in a call to RpcRouterRefreshPrinterChangeNotification." : "Not Set" );
					UINT32	Unused3: 12 = FormatString( "     (%s)", this.ToBitString);

				}
			Default:
				Struct
				{
					UINT32	Unused3: 12 = FormatString( "     (%s)", this.ToBitString);
					UINT32  ColorMisMatch:1 = FormatString( "(%s) %s", this.ToBitString, this? "The value of the dwColor parameter in a call to RpcRouterReplyPrinterEx does not match the value the client previously passed to the server in a call to RpcRouterRefreshPrinterChangeNotification." : "Not Set" );
					UINT32	Unused2:2 = FormatString( "      (%s)", this.ToBitString);
					UINT32  DiscardNoted:1 = FormatString( " (%s) %s", this.ToBitString, this? "The client acknowledges receiving and processing the PRINTER_NOTIFY_INFO_DISCARDED notification." : "Not set" );
					UINT32  Unused1:15 = FormatString( "      (%s)", this.ToBitString);
					UINT32  Discarded:1 = FormatString( "    (%s) %s", this.ToBitString, this ? "An overflow or error has occurred, and notifications have been lost.": "Not set" );
				}
		}
	}
}

Struct RPRNPortInfo2PortTypeFlags = FormatString( "0x%08X", Flags )
{
	UINT32  Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32  Write:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Port can be written to" : "Port can not be written to");
					UINT32  Read:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Port can be read from" : "Port can not be read from");
					UINT32  ReDirected:1 = FormatString( " (%s) %s", this.ToBitString, this? "Port is a terminal services redirected port" : "Port is not a terminal services redirected port");
					UINT32  NetAttached:1 = FormatString( "(%s) %s", this.ToBitString, this? "Port is a network TCP/IP port" : "Port is a not terminal services redirected port");
					UINT32  Unused:28 = FormatString( "   (%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32  Unused:28 = FormatString( "   (%s)", this.ToBitString );
					UINT32  NetAttached:1 = FormatString( "(%s) %s", this.ToBitString, this? "Port is a network TCP/IP port" : "Port is a not terminal services redirected port");
					UINT32  ReDirected:1 = FormatString( " (%s) %s", this.ToBitString, this? "Port is a terminal services redirected port": "Port is not a terminal services redirected port");
					UINT32  Read:1 = FormatString( "       (%s) %s", this.ToBitString, this? "Port can be read from" : "Port can not be read from");
					UINT32  Write:1 = FormatString( "      (%s) %s", this.ToBitString, this? "Port can be written to" : "Port can not be written to");
				}
		}
	}
}


Struct RPRNRpcV2NotifyOptionsReservedFlags = FormatString( "0x%08X", Flags )
{
	UINT32 Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 Refresh:1 = FormatString( "(%s) %s", this.ToBitString, this? "Refreshed data is requested from the server for all monitored members" : "Refresh option is not set");
					UINT32 Unused:31 = FormatString( " (%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 Unused:31 = FormatString( " (%s)", this.ToBitString );
					UINT32 Refresh:1 = FormatString( "(%s) %s", this.ToBitString, this? "Refreshed data is requested from the server for all monitored members" : "Refresh option is not set");
				}
		}
	}
}

Struct RPRNRpcV2NotifyInfoFlags = FormatString( "0x%08X", Flags )
{
	UINT32 Flags
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
				Struct
				{
					UINT32 Discarded:1 = FormatString( "(%s) %s", this.ToBitString, this? "An overflow or error has occurred, and notifications have been lost" : "Discarded option is not set");
					UINT32 Unused:31 = FormatString( " (%s)", this.ToBitString );
				}
			Default:
				Struct
				{
					UINT32 Unused:31 = FormatString( " (%s)", this.ToBitString );
					UINT32 Discarded:1 = FormatString( "(%s) %s", this.ToBitString, this? "An overflow or error has occurred, and notifications have been lost" : "Discarded option is not set");
				}
		}
	}
}

//------- End of Flag Fields Structs -------

//------ Start of Common IDL Data Types ------

//
//	RECTL
//
Struct RPRNRectl = FormatString( "Left = %d, Top = %d, Right = %d, Bottom = %d micrometers", Left, Top, Right, Bottom )
{
	INT32		Left;
	INT32		Top;
	INT32		Right;
	INT32		Bottom;
}

//
//	SIZE
//
Struct RPRNSize = FormatString( "Width = %d, Height = %d micrometers", Cx, Cy )
{
	INT32 Cx;
	INT32 Cy;
}

//------ End of Common IDL Data Types ------

Struct RPRNConfByteBuffer = "Size = " + Size.MaxCount
{
	NdrConformant Size;
	Switch
	{
		Case Size.MaxCount > 0:
			Switch
			{
				Case ( FrameLength - FrameOffset ) < Size.MaxCount:
					BLOB( FrameLength - FrameOffset ) UnparsedData = "Parsed after Reassmebly";
				Default:
					BLOB( Size.MaxCount ) Buffer;
			}
	}
}

Struct RPRNConfByteBufferPtr
{
	NdrPtr Ptr;
	Switch
	{
		Case Ptr.ReferentID > 0:
			RPRNConfByteBuffer Buffer;
	}
}

Struct RPRNMultiStringArray
{
	While[ !(UINT16( FrameData, FrameOffset ) == 0) ]
	{
		UnicodeString		Value;
	}
	UINT16					Terminator;
}

Struct RPRNConfMultiStringArray
{
	NdrConformant			Size;
	Switch
	{
		Case Size.MaxCount > 0:
			[ Property.RPRNConfMultiStringArrayEndOffset = FrameOffset + Size.MaxCount * 2 ]
			Struct
			{
				While[ !( UINT16( FrameData, FrameOffset ) == 0 ) && ( FrameOffset < Property.RPRNConfMultiStringArrayEndOffset ) ]
				{
					UnicodeString		Value;
				}
				UINT16					Terminator;
			}
	}
}

Struct RPRNConfMultiStringArrayPtr
{
	NdrPtr									MultiStringArrayPtr;
	Switch
	{
		Case MultiStringArrayPtr.ReferentID > 0:
			RPRNConfMultiStringArray		MultiStringArray;
	}
}

Struct RPRNWideString = Size.Maxcount > 0 ? String : "<Empty>"
{
	NdrConformant				Size;
	Switch
	{
		Case Size.MaxCount > 0:
			[ Property.RPRNWidestringBegin = FrameOffset ]
			Struct
			{
				UnicodeString		String;
				Switch
				{
					Case FrameOffset < Property.RPRNWidestringBegin + Size.MaxCount * 2:
						BLOB( Property.RPRNWidestringBegin + Size.MaxCount * 2 - FrameOffset ) ExtraBuffer;
				}
			}
	}
}

Struct RPRNConfStringQuery( IsMulti )
{
	NdrConformant			Size
	Switch
	{
		Case Size.MaxCount > 0:
			Struct
			{
				[
					Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount ) % 4 ) % 4,
					Property.RPRNConfStringQueryBufferEnd = Size.MaxCount + FrameOffset,
					Local.StringQueryReturnedOffset = FrameOffset + Size.MaxCount + 4 + Local.AlignPaddingSize,
					Property.RPRNConfStringQueryNumber = IsMulti ? UINT32( FrameData, Local.StringQueryReturnedOffset ) : 1
				]
				Switch
				{
					Case ( FrameLength - FrameOffset ) < Size.MaxCount :
						BLOB(FrameLength - FrameOffset)						UnparsedData = "Parsed after reassembly";

					Case Property.RPRNConfStringQueryNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
						BLOB( Size.MaxCount )	UnusedData;

					Default:
						UnicodeString 		String[ Property.RPRNConfStringQueryNumber ];
				}
				Switch
				{
					Case FrameOffset < Property.RPRNConfStringQueryBufferEnd :
						BLOB( Property.RPRNConfStringQueryBufferEnd - FrameOffset ) Pad;
				}
			}
	}
}

Struct RPRNConfStringQuery2( IsMulti )
{
	NdrConformant			Size
	Switch
	{
		Case Size.MaxCount > 0:
			Struct
			{
				[
					Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount * 2 ) % 4 ) % 4,
					Property.RPRNConfStringQueryBufferEnd = Size.MaxCount * 2 + FrameOffset,
					Local.StringQueryReturnedOffset = FrameOffset + Size.MaxCount * 2 + 4 + Local.AlignPaddingSize,
					Property.RPRNConfStringQueryNumber = IsMulti ? UINT32( FrameData, Local.StringQueryReturnedOffset ) : 1
				]
				Switch
				{
					Case ( FrameLength - FrameOffset ) < Size.MaxCount :
						BLOB(FrameLength - FrameOffset)						UnparsedData = "Parsed after reassembly";

					Case Property.RPRNConfStringQueryNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
						BLOB( Size.MaxCount * 2 )	UnusedData;

					Default:
						RPRNMultiStringArray 	String[ Property.RPRNConfStringQueryNumber ];
				}
				Switch
				{
					Case FrameOffset < Property.RPRNConfStringQueryBufferEnd :
						BLOB( Property.RPRNConfStringQueryBufferEnd - FrameOffset ) Pad;
				}
			}
	}
}

Struct RPRNConfStringQueryPtr( IsMulti ) = FormatString( "%s", StringQuery.ToString )
{
	NdrPtr	Ptr;
	Switch
	{
		Case Ptr.ReferentID > 0:
			RPRNConfStringQuery( IsMulti )  StringQuery;
	}
}

Struct RPRNWritePrinterBuffer
{
	[Property.RPRNSize = Size.MaxCount]
	NdrConformant Size;
	Switch
	{
		Case FrameLength - FrameOffset < Size.MaxCount:
			BLOB(FrameLength - FrameOffset) UnparsedData = "Parsed after Reassmebly";
		Default:
			[Local.EMFDataLength = FrameOffset + Size.MaxCount]
			while[FrameOffset < Local.EMFDataLength]
			{
				Switch UINT32( FrameData, FrameOffset )
				{
					//EMF (Enhanced Meta File data)
					Case 0x00000001:  EMFSpoolPageContentRecord				EMFSpoolEMRIMetaFileRecord;
					Case 0x00000002:  EMFSpoolEMRIEngineFontRecord			EMFSpoolEMRIEngineFontRecord;
					Case 0x00000003:  EMFSpoolEMRIDevModeRecord				EMFSpoolEMRIDevModeRecord;
					Case 0x00000004:  EMFSpoolEMRIType1FontRecord			EMFSpoolEMRIType1FontRecord;
					Case 0x00000005:  EMFSpoolEMRIPreStartPageRecord		EMFSpoolEMRIPreStartPageRecord;
					Case 0x00000006:  EMFSpoolEMRIDesignVectorRecord		EMFSpoolEMRIDesignVectorRecord;
					Case 0x00000007:  EMFSpoolEMRISubSetFontRecord			EMFSpoolEMRISubSetFontRecord;
					Case 0x00000008:  EMFSpoolEMRIDeltaFontRecord			EMFSpoolEMRIDeltaFontRecord;
					Case 0x00000009:  EMFSpoolPageContentRecord				EMFSpoolEMRIFormMetaFileRecord;
					Case 0x0000000A:  EMFSpoolPageContentRecord				EMFSpoolEMRIBwMetaFileRecord;
					Case 0x0000000B:  EMFSpoolPageContentRecord				EMFSpoolEMRIBwFormMetaFileRecord;
					Case 0x0000000C:  EMFSpoolPageContentRecord				EMFSpoolEMRIMetaFileDataRecord;
					Case 0x0000000D:  EMFSpoolPageOffsetRecord				EMFSpoolEMRIMetaFileExtRecord;
					Case 0x0000000E:  EMFSpoolPageOffsetRecord				EMFSpoolEMRIBwMetaFileExtRecord;
					Case 0x0000000F:  EMFSpoolFontOffsetRecord				EMFSpoolEMRIEngineFontExtRecord;
					Case 0x00000010:  EMFSpoolFontOffsetRecord				EMFSpoolEMRIType1FontExtRecord;
					Case 0x00000011:  EMFSpoolFontOffsetRecord				EMFSpoolEMRIDesignVectorExtRecord;
					Case 0x00000012:  EMFSpoolFontOffsetRecord				EMFSpoolEMRISubSetFontExtRecord;
					Case 0x00000013:  EMFSpoolFontOffsetRecord				EMFSpoolEMRIDeltaFontExtRecord;
					Case 0x00000014:  EMFSpoolEMRIPSJOBDATARecord			EMFSpoolEMRIPsJobDataRecord;
					Case 0x00000015:  EMFSpoolFontOffsetRecord				EMFSpoolEMRIEmbedFontExtRecord;
					Case 0x00010000:  EMFSpoolHeaderRecord					EMFSpoolHeaderRecord;
					Default:BLOB( Size.MaxCount < (FrameLength - FrameOffset) ? Size.MaxCount : (FrameLength - FrameOffset)) Buffer;
				}
			}
	}
}

Struct RPRNDynamicallyTypedQuery( InputType )
{
	NdrConformant Size;
	Switch
	{
		Case Size.MaxCount > 0:
			[ Property.RPRNDynamicallyTypedQueryEndOffset = FrameOffset + Size.MaxCount ]
			Struct
			{
				Switch
				{
					Case ( FrameLength - FrameOffset ) < Size.MaxCount :
						BLOB(FrameLength - FrameOffset)							UnparsedData = "Parsed after reassembly";

					Case Property.RPRNConfStringQueryNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
						BLOB( Size.MaxCount )									UnusedData;

					Default:
						RPRNDynamicallyTypedData( InputType , Size.MaxCount )	Data;
				}
				Switch
				{
					Case FrameOffset < Property.RPRNDynamicallyTypedQueryEndOffset :
						BLOB( Property.RPRNDynamicallyTypedQueryEndOffset - FrameOffset )	Pad;
				}
			}
	}
}

Struct RPRNDynamicallyTypedData( InputType, BufferSize )
{
	Switch( InputType )
	{
		Case 0: //REG_None
			BLOB( BufferSize )				NoneType;
		Case 1: //REG_SZ
			UnicodeString					String;
		Case 2: //REG_EXPAND_SZ
			UnicodeString					ExpandString;
		Case 3: //REG_BINARY
			BLOB( BufferSize )		    	Binary;
		Case 4: //REG_DWORD / REG_DWORD_LITTLE_ENDIAN
			[ DataFieldByteOrder = LittleEndian ]
			UINT32							LeNumber;
		Case 5:	//REG_DWORD_BIG_ENDIAN
			UINT32							BeNumber;
		Case 6: //REG_LINK
			BLOB( BufferSize )				RegistryKeySymbol;
		Case 7: //REG_MULTI_SZ
			RPRNMultiStringArray			  MultiStringArray;
		Case 8: //REG_RESOURCE_LIST
			BLOB( BufferSize )		DeviceDriverResourceList;
		Case 11://REG_QWORD / REG_QWORD_LITTLE_ENDIAN
			[ DataFieldByteOrder = LittleEndian ]
			UINT64							QWord;
		Default:
			BLOB( BufferSize )				UnknownType;
	}
}

//----- Start of CUSTOM DevMode Structs -----

Table RPRNDevModeSpecVersionTable( Value )
{
	Switch( Value )
	{
		Case 0x0320: "Windows NT 3.1, Windows NT 3.5, and Windows NT 3.51.";
		Case 0x0400: "Windows 95, Windows 98, and Windows Me.";
		Case 0x0401: "Windows NT 4.0, Windows 2000, Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, and Windows Server 7.";
		Default: FormatString( "Unknown Value (%x) ", Value);
	}
}

Table RPRNDevModeDriverVersionTable( Value )
{
	Switch
	{
		Case Value >= 0x0301 && Value <= 0x03FF: "Windows NT 3.1, Windows NT 3.5, and Windows NT 3.51 user-mode printer drivers, and Windows NT 4.0 kernel-mode printer drivers.";
		Case Value >= 0x0500 && Value <= 0x05FF: "Windows 2000, Windows XP, and Windows Server 2003 user-mode printer drivers.";
		Case Value >= 0x0600 && Value <= 0x06FF: "Windows Vista, Windows Server 2008, Windows 7, and Windows Server 2008 R2 printer drivers.";
		Default: FormatString( "Unknown Value (%x) ", Value);
	}
}

Table RPRNDevModeOrientationTable( Value )
{
	Switch( Value )
	{
		Case 1 : "DMORIENT_POTRAIT - 'Portrait' orientation.";
		Case 2 : "DMORIENT_LANDSCAPE - 'Landscape' orientation.";
		Default: FormatString( "Unknown Value (%u) ", Value);
	}
}

Table RPRNDevModePaperSizeTable( Value )
{
	Switch( Value )
	{
		Case 1: "DMPAPER_LETTER - Letter, 8 1/2 x 11 inches";
		Case 2: "DMPAPER_LETTERSMALL - Letter Small, 8 1/2 x 11 inches";
		Case 3: "DMPAPER_TABLOID - Tabloid, 11 x 17 inches";
		Case 4: "DMPAPER_LEDGER - Ledger, 17 x 11 inches";
		Case 5: "DMPAPER_LEGAL - Legal, 8 1/2 x 14 inches";
		Case 6: "DMPAPER_STATEMENT - Statement, 5 1/2 x 8 1/2 inches";
		Case 7: "DMPAPER_EXECUTIVE - Executive, 7 1/4 x 10 1/2 inches";
		Case 8: "DMPAPER_A3 - A3 sheet, 297 x 420 millimeters";
		Case 9: "DMPAPER_A4 - A4 sheet, 210 x 297 millimeters";
		Case 10: "DMPAPER_A4SMALL - A4 small sheet, 210 x 297 millimeters";
		Case 11: "DMPAPER_A5 - A5 sheet, 148 x 210 millimeters";
		Case 12: "DMPAPER_B4 - B4 sheet, 250 x 354 millimeters";
		Case 13: "DMPAPER_B5 - B5 sheet, 182 x 257-millimeter paper";
		Case 14: "DMPAPER_FOLIO - Folio, 8 1/2 x 13-inch paper";
		Case 15: "DMPAPER_QUARTO - Quarto, 215 x 275 millimeter paper";
		Case 16: "DMPAPER_10X14 - 10 x 14-inch sheet";
		Case 17: "DMPAPER_11X17 - 11 x 17-inch sheet";
		Case 18: "DMPAPER_NOTE - Note, 8 1/2 x 11-inches";
		Case 19: "DMPAPER_ENV_9 - #9 Envelope, 3 7/8 x 8 7/8 inches";
		Case 20: "DMPAPER_ENV_10 - #10 Envelope, 4 1/8 x 9 1/2 inches";
		Case 21: "DMPAPER_ENV_11 - #11 Envelope, 4 1/2 x 10 3/8 inches";
		Case 22: "DMPAPER_ENV_12 - #12 Envelope, 4 3/4 x 11 inches";
		Case 23: "DMPAPER_ENV_14 - #14 Envelope, 5 x 11 1/2 inches";
		Case 24: "DMPAPER_CSHEET - C Sheet, 17 x 22 inches";
		Case 25: "DMPAPER_DSHEET - D Sheet, 22 x 34 inches";
		Case 26: "DMPAPER_ESHEET - E Sheet, 34 x 44 inches";
		Case 27: "DMPAPER_ENV_DL - DL Envelope, 110 x 220 millimeters";
		Case 28: "DMPAPER_ENV_C5 - C5 Envelope, 162 x 229 millimeters";
		Case 29: "DMPAPER_ENV_C3 - C3 Envelope, 324 x 458 millimeters";
		Case 30: "DMPAPER_ENV_C4 - C4 Envelope, 229 x 324 millimeters";
		Case 31: "DMPAPER_ENV_C6 - C6 Envelope, 114 x 162 millimeters";
		Case 32: "DMPAPER_ENV_C65 - C65 Envelope, 114 x 229 millimeters";
		Case 33: "DMPAPER_ENV_B4 - B4 Envelope, 250 x 353 millimeters";
		Case 34: "DMPAPER_ENV_B5 - B5 Envelope, 176 x 250 millimeters";
		Case 35: "DMPAPER_ENV_B6 - B6 Envelope, 176 x 125 millimeters";
		Case 36: "DMPAPER_ENV_ITALY - Italy Envelope, 110 x 230 millimeters";
		Case 37: "DMPAPER_ENV_MONARCH - Monarch Envelope, 3 7/8 x 7 1/2 inches";
		Case 38: "DMPAPER_ENV_PERSONAL - 6 3/4 Envelope, 3 5/8 x 6 1/2 inches";
		Case 39: "DMPAPER_FANFOLD_US - US Std Fanfold, 14 7/8 x 11 inches";
		Case 40: "DMPAPER_FANFOLD_STD_GERMAN - German Std Fanfold, 8 1/2 x 12 inches";
		Case 41: "DMPAPER_FANFOLD_LGL_GERMAN - German Legal Fanfold, 8 x 13 inches";

		Case 69: "DMPAPER_DBL_JAPANESE_POSTCARD - Double Japanese Postcard, 200 x 148 millimeters";
		Case 70: "DMPAPER_A6 - A6 sheet, 105 x 148 millimeters";
		Case 71: "DMPAPER_JENV_KAKU2 - Japanese Envelope Kaku #2";
		Case 72: "DMPAPER_JENV_KAKU3 - Japanese Envelope Kaku #3";
		Case 73: "DMPAPER_JENV_CHOU3 - Japanese Envelope Chou #3";
		Case 74: "DMPAPER_JENV_CHOU4 - Japanese Envelope Chou #4";
		Case 75: "DMPAPER_LETTER_ROTATED - Letter Rotated, 11 by 8 1/2 inches";
		Case 76: "DMPAPER_A3_ROTATED - A3 rotated sheet, 420 x 297 millimeters";
		Case 77: "DMPAPER_A4_ROTATED - A4 rotated sheet, 297 x 210 millimeters";
		Case 78: "DMPAPER_A5_ROTATED - A5 rotated sheet, 210 x 148 millimeters";
		Case 79: "DMPAPER_B4_JIS_ROTATED - B4 (JIS) rotated sheet, 364 x 257 millimeters";
		Case 80: "DMPAPER_B5_JIS_ROTATED - B5 (JIS) rotated sheet, 257 x 182 millimeters";
		Case 81: "DMPAPER_JAPANESE_POSTCARD_ROTATED - Japanese Postcard Rotated, 148 x 100 millimeters";
		Case 82: "DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED  - Double Japanese Postcard Rotated, 148 x 200 millimeters";
		Case 83: "DMPAPER_A6_ROTATED - A6 rotated sheet, 148 x 105 millimeters";
		Case 84: "DMPAPER_JENV_KAKU2_ROTATED - Japanese Envelope Kaku #2 Rotated";
		Case 85: "DMPAPER_JENV_KAKU3_ROTATED - Japanese Envelope Kaku #3 Rotated";
		Case 86: "DMPAPER_JENV_CHOU3_ROTATED - Japanese Envelope Chou #3 Rotated";
		Case 87: "DMPAPER_JENV_CHOU4_ROTATED - Japanese Envelope Chou #4 Rotated";
		Case 88: "DMPAPER_B6_JIS - B6 (JIS) sheet, 128 x 182 millimeters";
		Case 89: "DMPAPER_B6_JIS_ROTATED - B6 (JIS) rotated sheet, 182 x 128 millimeters";
		Case 90: "DMPAPER_12X11 - 12 x 11-inch sheet";
		Case 91: "DMPAPER_JENV_YOU4 - Japanese Envelope You #4";
		Case 92: "DMPAPER_JENV_YOU4_ROTATED  - Japanese Envelope You #4";
		Case 93: "DMPAPER_P16K - PRC 16K, 146 x 215 millimeters";
		Case 94: "DMPAPER_P32K - PRC 32K, 97 x 151 millimeters";
		Case 95: "DMPAPER_P32KBIG - PRC 32K(Big) 97 x 151 millimeters";
		Case 96: "DMPAPER_PENV_1 - PRC Envelope #1, 102 by 165 millimeters";
		Case 97: "DMPAPER_PENV_2 - PRC Envelope #2, 102 x 176 millimeters";
		Case 98: "DMPAPER_PENV_3 - PRC Envelope #3, 125 x 176 millimeters";
		Case 99: "DMPAPER_PENV_4 - PRC Envelope #4, 110 x 208 millimeters";
		Case 100: "DMPAPER_PENV_5 - PRC Envelope #5, 110 x 220 millimeters";
		Case 101: "DMPAPER_PENV_6 - PRC Envelope #6, 120 x 230 millimeters";
		Case 102: "DMPAPER_PENV_7 - PRC Envelope #7, 160 x 230 millimeters";
		Case 103: "DMPAPER_PENV_8 - PRC Envelope #8, 120 x 309 millimeters";
		Case 104: "DMPAPER_PENV_9 - PRC Envelope #9, 229 x 324 millimeters";
		Case 105: "DMPAPER_PENV_10 - PRC Envelope #10, 324 x 458 millimeters";
		Case 106: "DMPAPER_P16K_ROTATED - PRC 16K Rotated, 215 x 146 millimeters";
		Case 107: "DMPAPER_P32K_ROTATED - PRC 32K Rotated, 151 x 97 millimeters";
		Case 108: "DMPAPER_P32KBIG_ROTATED - PRC 32K(Big) Rotated, 151 x 97 millimeters";
		Case 109: "DMPAPER_PENV_1_ROTATED - PRC Envelope #1 Rotated, 165 x 102 millimeters";
		Case 110: "DMPAPER_PENV_2_ROTATED - PRC Envelope #2 Rotated, 176 x 102 millimeters";
		Case 111: "DMPAPER_PENV_3_ROTATED - PRC Envelope #3 Rotated, 176 x 125 millimeters";
		Case 112: "DMPAPER_PENV_4_ROTATED - PRC Envelope #4 Rotated, 208 x 110 millimeters";
		Case 113: "DMPAPER_PENV_5_ROTATED - PRC Envelope #5 Rotated, 220 x 110 millimeters";
		Case 114: "DMPAPER_PENV_6_ROTATED - PRC Envelope #6 Rotated, 230 x 120 millimeters";
		Case 115: "DMPAPER_PENV_7_ROTATED - PRC Envelope #7 Rotated, 230 x 160 millimeters";
		Case 116: "DMPAPER_PENV_8_ROTATED - PRC Envelope #8 Rotated, 309 x 120 millimeters";
		Case 117: "DMPAPER_PENV_9_ROTATED - PRC Envelope #9 Rotated, 324 x 229 millimeters";
		Case 118: "DMPAPER_PENV_10_ROTATED - PRC Envelope #10 Rotated, 458 x 324 millimeters";
		Default: FormatString( "%s (%u)", Value > 255 ? "Device-specific Value" : "Unknow Value", Value);
	}
}

Table RPRNDevModeDefaultSourceTable( Value )
{
	Switch( Value )
	{
		Case 1 : "DMBIN_UPPER - Select the upper bin, or only bin";
		Case 2 : "DMBIN_LOWER - Select the lower bin";
		Case 3 : "DMBIN_MIDDLED - Select the middle paper bin";
		Case 4 : "DMBIN_MANUAL - Manually select the paper bin";
		Case 5 : "DMBIN_ENVELOPE - Select the envelope bin";
		Case 6 : "DMBIN_ENVMANUAL - Select the manual envelope bin";
		Case 7 : "DMBIN_AUTO - Auto-select the bin";
		Case 8 : "DMBIN_TRACTOR - Select the bin with the tractor paper";
		Case 9 : "DMBIN_SMALLFMT - Select the bin with the smaller paper format";
		Case 10 : "DMBIN_LARGEFMT - Select the bin with the larger paper format";
		Case 11 : "DMBIN_LARGECAPACITY - Select the bin with large capacity";
		Case 14 : "DMBIN_CASSETTE - Select the cassette bin";
		Case 15 : "DMBIN_FORMSOURCE - Select the bin with the required form";
		Default: FormatString( "%s (%u)", Value > 255 ? "Device-specific Value" : "Unknow Value", Value);
	}
}

Table RPRNDevModePrintQualityTable( Value )
{
	Switch( Value )
	{
		Case 0xFFFC : "DMRES_HIGH - High-resolution printouts";
		Case 0xFFFD : "DMRES_MEDIUM - Medium-resolution printouts";
		Case 0xFFFE : "DMRES_LOW - Low-resolution printouts";
		Case 0xFFFF : "DMRES_DRAFT - Draft-resolution printouts";
		Default: FormatString( "Unknown Value (%x) ", Value);
	}
}

Table RPRNDevModeColorTable( Value )
{
	Switch( Value )
	{
		Case 1 : "DMRES_MONOCHROME - Use monochrome printing mode";
		Case 2 : "DMRES_COLOR - Use color printing mode";
		Default: FormatString( "Unknown Value (%u) ", Value);
	}
}

Table RPRNDevModeDuplexTable( Value )
{
	Switch( Value )
	{
		Case 1 : "DMDUP_SIMPLEX - Normal (non-duplex) printing";
		Case 2 : "DMDUP_VERTICAL - Long-edge binding; that is, the long edge of the page is vertical";
		Case 3 : "DMDUP_HORIZONTAL - Short-edge binding; that is, the long edge of the page is horizontal";
		Default: FormatString( "Unknown Value (%u) ", Value);
	}
}

Table RPRNDevModeTTOptionTable( Value )
{
	Switch( Value )
	{
		Case 1 : "DMTT_BITMAP - Prints TrueType fonts as graphics; Default for dot-matrix printers";
		Case 2 : "DMTT_DOWNLOAD - Downloads TrueType fonts as soft fonts; Default for HP-PCL printers";
		Case 3 : "DMTT_SUBDEV - Substitutes device fonts for TrueType fonts; Default for PostScript printers";
		Case 4 : "DMTT_DOWNLOAD_OUTLINE - Windows 95, 98, ME, NT4.0, and later downloads TrueType fonts as outline fonts";
		Default: FormatString( "Unknown Value (%u) ", Value);
	}
}

Table RPRNDevModeCollateTable( Value )
{
	Switch( Value )
	{
		Case 0 : "DMCOLLATE_FALSE - Do not collate when printing multiple copies";
		Case 1 : "DMCOLLATE_TRUE - Collate when printing multiple copies";
		Default: FormatString( "Unknown Value (%u) ", Value);
	}
}

Table RPRNDevModeNupModeTable( Value )
{
	Switch( Value )
	{
		Case 1 : "DMNUP_SYSTEM - The print server does the page layout";
		Case 2 : "DMNUP_ONEUP - The application does the page layout";
		Default: FormatString( "Unknown Value (%u) ", Value);
	}
}

Table RPRNDevModeICMMethodTable( Value )
{
	Switch( Value )
	{
		Case 1 : "DMICMMETHOD_NONE - Image Color Management is disabled";
		Case 2 : "DMICMMETHOD_SYSTEM - Image Color Management is handled by the system where the PDL data is generated";
		Case 3 : "DMICMMETHOD_DRIVER - Image Color Management is handled by the printer driver";
		Case 4 : "DMICMMETHOD_DEVICE - Image Color Management is handled by the destination device";
		Default: FormatString( "%s (%u)", Value > 255 ? "Device-specific Value" : "Unknow Value", Value);
	}
}

Table RPRNDevModeICMIntentTable( Value )
{
	Switch( Value )
	{
		Case 1 : "DMICM_SATURATE - Color matching should optimize for color saturation";
		Case 2 : "DMICM_CONTRAST - Color matching should optimize for color contrast";
		Case 3 : "DMICM_COLORIMETRIC - Color matching should optimize to match the exact color requested";
		Case 4 : "DMICM_ABS_COLORIMETRIC - Color matching should optimize to match the exact color requested without white point mapping";
		Default: FormatString( "%s (%u)", Value > 255 ? "Device-specific Value" : "Unknow Value", Value);
	}
}

Table RPRNDevModeMediaTypeTable( Value )
{
	Switch( Value )
	{
		Case 1 : "DMMEDIA_STANDARD - Plain paper";
		Case 2 : "DMMEDIA_TRANSPARENCY - Transparent film";
		Case 3 : "DMMEDIA_GLOSSY - Glossy paper";
		Default: FormatString( "%s (%u)", Value > 255 ? "Device-specific Value" : "Unknow Value", Value);
	}
}

Table RPRNDevModeDitherTypeTable( Value )
{
	Switch( Value )
	{
		Case 1 : "DMDITHER_NONE - No dithering";
		Case 2 : "DMDITHER_COARSE - Dithering with a coarse brush";
		Case 3 : "DMDITHER_FINE - Dithering with a fine brush";
		Case 4 : "DMDITHER_LINEART - Line art dithering to produce well defined borders between black, white, and grayscaling";
		Case 5 : "DMDITHER_ERRORDIFFUSION - Windows 95/98/ME error diffusion dithering";
		Case 6 : "DMDITHER_RESERVED6 - Same as DmDitherLineArt";
		Case 7 : "DMDITHER_RESERVED7 - Same as DmDitherLineArt";
		Case 8 : "DMDITHER_RESERVED8 - Same as DmDitherLineArt";
		Case 9 : "DMDITHER_RESERVED9 - Same as DmDitherLineArt";
		Case 10 : "DMDITHER_GRAYSCALE - Grayscaling";
		Default: FormatString( "%s (%u)", Value > 255 ? "Device-specific Value" : "Unknow Value", Value);
	}
}

//
//	_DEVMODE
//
Struct RPRNDevMode = DeviceName
{
	[ DataFieldFrameLength = FrameOffset + UINT16( FrameData, FrameOffset + 68 ) ]
	_Struct DevModePublicInformation
	{
		UnicodeString(32)							DeviceName;
		UINT16										SpecVersion = RPRNDevModeSpecVersionTable( this );
		UINT16										DriverVersion = RPRNDevModeDriverVersionTable( this );
		UINT16										Size;
		[ Local.DriverExtra ]
		UINT16										DriverExtra = FormatString( "Extra data size %u bytes", this );
		RPRNDevModeFieldsInitializedFlags			FieldFlags;
		INT16	Orientation = FormatString( "%d, %s", this, FieldFlags.Flags.OR ? RPRNDevModeOrientationTable( this ) : "MUST be ignored on receipt" );
		INT16	PaperSize = FormatString( "%d, %s", this, FieldFlags.Flags.PS ? RPRNDevModePaperSizeTable( this ) : "MUST be ignored on receipt" );
		INT16	PaperLength = FormatString( "%d millimeters%s", this/10, FieldFlags.Flags.PL ? "": ", MUST be ignored on receipt" );
		INT16	PaperWidth = FormatString( "%d millimeters%s", this/10, FieldFlags.Flags.PW ? "" : ", MUST be ignored on receipt");	
		INT16	Scale = FormatString( "%d percent", this, FieldFlags.Flags.SC ? "" : ", MUST be ignored on receipt" );
		INT16	Copies = FormatString( "Copies to print = %d%s", this, FieldFlags.Flags.CP ? "": ", MUST be ignored on receipt" );
		INT16	DefaultSource = FormatString( "%d, %s", this, FieldFlags.Flags.DS ? RPRNDevModeDefaultSourceTable( this ) : "MUST be ignored on receipt" );
		INT16	PrintQuality = FormatString( "%d dpi, %s", this, FieldFlags.Flags.PQ ? RPRNDevModePrintQualityTable( this ) : "MUST be ignored on receipt" );
		INT16	Color = FormatString( "%d, %s", this, FieldFlags.Flags.CR ? RPRNDevModeColorTable( this ) : "MUST be ignored on receipt" );
		INT16	Duplex = FormatString( "%d, %s", this, FieldFlags.Flags.DX ? RPRNDevModeDuplexTable( this ) : "MUST be ignored on receipt" );
		INT16	YResolution = FormatString( "%d dpi vertical resolution%s", this, FieldFlags.Flags.Y ? "": ", MUST be ignored on receipt" );
		INT16	TTOption = FormatString( "%d, %s", this,FieldFlags.Flags.TT ? RPRNDevModeTTOptionTable( this ) : "MUST be ignored on receipt");
		INT16	Collate  = FormatString( "%d, %s", this, FieldFlags.Flags.CL ? RPRNDevModeCollateTable( this) : "MUST be ignored on receipt" );
		UnicodeString(32)	FormName = this.ToString + FieldFlags.Flags.FM ? "" : ", MUST be ignored on receipt" ;
		UINT16	Reserved0;
		UINT32	Reserved1;
		UINT32	Reserved2;
		UINT32	Reserved3;
		UINT32	NUp = FormatString( "%u, %s", this, FieldFlags.Flags.UP ? RPRNDevModeNupModeTable( this ) : "MUST be ignored on receipt" );
		UINT32	Reserved4;
		UINT32	ICMMethod = FormatString( "%u, %s", this, FieldFlags.Flags.CM ? RPRNDevModeICMMethodTable( this ) : "MUST be ignored on receipt" );				
		UINT32	ICMIntent = FormatString( "%u, %s", this, FieldFlags.Flags.CI ? RPRNDevModeICMIntentTable( this ) : "MUST be ignored on receipt" );
		UINT32	MediaType = FormatString( "%u, %s", this, FieldFlags.Flags.MT ? RPRNDevModeMediaTypeTable( this ) : "MUST be ignored on receipt" );
		UINT32	DitherType = FormatString( "%u, %s", this, FieldFlags.Flags.DT ? RPRNDevModeDitherTypeTable( this ) : "MUST be ignored on receipt" );
		UINT32										Reserved5;
		UINT32										Reserved6;
		UINT32										Reserved7;
		UINT32										Reserved8;
	}
	// Private, printer driver-specific data
	Switch
	{
		Case Local.DriverExtra > 0:
			BLOB(Local.DriverExtra)				   Extra;
	}
}

//------- End of CUSTOM DevMode Struct -------

[
	Conversation.RPRNPerFrameDataTypesInfoLevel$[ FrameNumber ] = Conversation.RPRNDataTypesInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ],
	Property.RPRNInfoLevel = Conversation.RPRNPerFrameDataTypesInfoLevel$[ FrameNumber]
]
Struct RPRNConfCustomDataTypesInfoPtr( IsMulti ) = "Level = " + Property.RPRNInfoLevel
{
	NdrPtr							Ptr;
	Switch
	{
		Case Ptr.ReferentID > 0:
			Struct
			{
				NdrConformant		Size;
				Switch
				{
					Case Size.MaxCount > 0:
						Struct
						{
							[
								Property.RPRNCustomInfoBufferEndOffset = FrameOffset + Size.MaxCount,
								Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount ) % 4 ) % 4,
								Local.InfoStructReturnedOffset = FrameOffset + Size.MaxCount + 4 + Local.AlignPaddingSize,
								Property.RPRNCustomInfoStructNumber = IsMulti ? UINT32( FrameData, Local.InfoStructReturnedOffset ) : 1
							]
							Switch
							{
								Case ( FrameLength - FrameOffset ) < Size.MaxCount :
									BLOB(FrameLength - FrameOffset) UnparsedData = "Parsed after reassembly";

								Case Property.RPRNCustomInfoStructNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
									BLOB( Size.MaxCount )			UnusedData;

								Default:
									Switch( Property.RPRNInfoLevel )
									{
										Case 1: RPRNCustomDataTypesInfo1							DataTypesInfo1;
										Default: ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Value" ) Unknown;
									}
							}
							Switch
							{
								Case FrameOffset < Property.RPRNCustomInfoBufferEndOffset:
									Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset ) Pad;
							}
						}
				}
			}
	}
}

//
//	_DATATYPES_INFO_1
//
Struct RPRNCustomDataTypesInfo1
{
	RPRNNestedDataTypesInfo1FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNDataTypesInfo1OffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNDataTypesInfo1OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNDataTypesInfo1OffsetTable$[ FrameOffset ]:
					UnicodeString			NameArray;
			}
		}
	}
}

//
//	__nested__DATATYPES_INFO_1_Fixed_Portion
//
Struct RPRNNestedDataTypesInfo1FixedPortion
{
	[ Property.RPRNDataTypesInfo1OffsetTable$[ FrameOffset + this ] = TRUE ]
	UINT32						NameOffset;
}

//---- Start of CUSTOM PrinterInfo Structs ---

[
	Conversation.RPRNPerFramePrinterInfoLevel$[ FrameNumber ] = Conversation.RPRNPrinterInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ],
	Property.RPRNInfoLevel = Conversation.RPRNPerFramePrinterInfoLevel$[ FrameNumber ]
]
Struct RPRNConfCustomPrinterInfoPtr( IsMulti ) = "Level = " + Property.RPRNInfoLevel
{
	NdrPtr							Ptr;
	Switch
	{
		Case Ptr.ReferentID > 0:
			Struct
			{
				NdrConformant		Size;
				Switch
				{
					Case Size.MaxCount > 0:
						Struct
						{
							[
								Property.RPRNCustomInfoBufferEndOffset = FrameOffset + Size.MaxCount,
								Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount ) % 4 ) % 4,
								Local.InfoStructReturnedOffset = FrameOffset + Size.MaxCount + 4 + Local.AlignPaddingSize,
								Property.RPRNCustomInfoStructNumber = IsMulti ? UINT32( FrameData, Local.InfoStructReturnedOffset ) : 1
							]
							Switch
							{
								Case ( FrameLength - FrameOffset ) < Size.MaxCount :
									BLOB(FrameLength - FrameOffset) UnparsedData = "Parsed after reassembly";

								Case Property.RPRNCustomInfoStructNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
									BLOB( Size.MaxCount )			UnusedData;

								Default:
									Switch( Property.RPRNInfoLevel )
									{
										Case 0: RPRNCustomPrinterInfoStress						PrinterInfoStress;
										Case 1: RPRNCustomPrinterInfo1							PrinterInfo1;
										Case 2: RPRNCustomPrinterInfo2							PrinterInfo2;
										Case 3: RPRNCustomPrinterInfo3							PrinterInfo3;
										Case 4: RPRNCustomPrinterInfo4							PrinterInfo4;
										Case 5: RPRNCustomPrinterInfo5							PrinterInfo5;
										Case 6: RPRNCustomPrinterInfo6							PrinterInfo6;
										Case 7: RPRNCustomPrinterInfo7							PrinterInfo7;
										Case 8: RPRNCustomPrinterInfo8							PrinterInfo8;
										Case 9: RPRNCustomPrinterInfo9							PrinterInfo9;
										Default: ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Value" ) Unknown;
									}
							}
							Switch
							{
								Case FrameOffset < Property.RPRNCustomInfoBufferEndOffset:
									Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset ) Pad;
							}
						}
				}
			}
	}
}

//
//	_PRINTER_INFO_STRESS
//
Struct RPRNCustomPrinterInfoStress
{
	RPRNNestedPrinterInfoStressFixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			While[ Local.Count < Property.RPRNPrinterInfoStressFixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNPrinterInfoStressOffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNPrinterInfoStressOffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}

					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNPrinterInfoStressOffsetTable$[ FrameOffset ] )
						{
							//when Frameoffset used as the key is equal to the calculated PrinterNameOffset in FixedPortion and Property.RPRNPrinterInfoStressOffsetTable$[key] is equal to 1, it comes a PrinterNameArray
							Case 1: UnicodeString					PrinterNameArray;
							//when Frameoffset used as the key is equal to the calculated ServerNameOffset in FixedPortion and Property.RPRNPrinterInfoStressOffsetTable$[key] is equal to 2, it comes a ServerNameArray
							Case 2: UnicodeString					ServerNameArray;
						}
				}
			}
		}
	}
}

Table RPRNPrinterInfoStressProcessorTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000182: "PROCESSOR_INTEL_386 - Intel 80386 compatible";
		Case 0x000001E6: "PROCESSOR_INTEL_486 - PROCESSOR_INTEL_486";
		Case 0x0000024A: "PROCESSOR_INTEL_PENTIUM - Intel Pentium compatible";
		Case 0x00000898: "PROCESSOR_INTEL_IA64 - Intel Itanium-based compatible";
		Case 0x000022A0: "PROCESSOR_AMD_X8664 - AMD x64 compatible";
		Default: FormatString("Unknow Value( 0x%8x )", Value);
	}
}

Table RPRNPrinterInfoStressProcessorArchitectureTable( Value )
{
	Switch( Value )
	{
		Case 0x0000: "PROCESSOR_ARCHITECTURE_INTEL - X86 architecture";
		Case 0x0006: "PROCESSOR_ARCHITECTURE_IA64 - Itanium architecture";
		Case 0x0009: "PROCESSOR_ARCHITECTURE_AMD64 - AMD64 architecture ";
		Default: FormatString("Unknow Value( 0x%8x )", Value);
	}
}

//
//	nested__PRINTER_INFO_Stress_Fixed_Portion
//
[ Post.Property.RPRNPrinterInfoStressFixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedPrinterInfoStressFixedPortion
{
		// set value 1 to Property.RPRNPrinterInfoStressOffsetTable$[key] to identify a PrinterNameArray and use the calculated PrinterNameOffset as the key.
		[
			Property.RPRNCustInfoBufFixedPortionBeginOffset = FrameOffset,
			Property.RPRNPrinterInfoStressOffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
			Local.FixedPortionCount = this ? 1 : 0
		]
		UINT32							PrinterNameOffset;
		// set value 2 to Property.RPRNPrinterInfoStressOffsetTable$[key] to identify a ServerNameArray and use the calculated ServerNameOffset as the key.
		[
			Property.RPRNPrinterInfoStressOffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
			Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
		]
		UINT32							ServerNameOffset;
		UINT32							Jobs;
		UINT32							TotalJobs;
		UINT32							TotalBytes;
		SystemTime						UpTime;
		UINT32							MaxcRef;
		UINT32							TotalPagesPrinted;
		Struct							GetVersion = BuildVersion.ToString + ReleaseNumber.ToString
		{
			UINT16 BuildVersion = FormatString( "XP bulid %u ", this );
			UINT16 ReleaseNumber = FormatString( "R %u", this );
		}
		UINT32							FreeBuild;
		UINT32							Spooling;
		UINT32							MaxSpooling;
		UINT32							ReferenceCount;
		UINT32							ErrorOutOfPaper;
		UINT32							ErrorNotReady;
		UINT32							JobError;
		UINT32							NumberOfProcessors;
		UINT32							ProcessorType = RPRNPrinterInfoStressProcessorTypeTable( this );
		UINT32							HighPartTotalBytes = FormatString( "Total Bytes Printed = %u", TotalBytes + (this * 4294967296) );
		UINT32							ChangeID;
		UINT32							LastError;
		RPRNPrinterStatusFlags			Status;
		UINT32							EnumerateNetworkPrinters;
		UINT32							AddNetPrinters;
		UINT16							ProcessorArchitecture = RPRNPrinterInfoStressProcessorArchitectureTable( this );
		UINT16							ProcessorLevel;
		UINT32							RefIC;
		UINT32							Reserved2;
		UINT32							Reserved3;
}

//
//	_PRINTER_INFO_1
//
Struct RPRNCustomPrinterInfo1
{
	RPRNNestedPrinterInfo1FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNPrinterInfo1FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNPrinterInfo1OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNPrinterInfo1OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNPrinterInfo1OffsetTable$[ FrameOffset ] )
						{
							Case 1 :UnicodeString			DescriptionArray;
							Case 2: UnicodeString			NameArray;
							Case 3: UnicodeString			CommentArray;
						}
				}
			}
		}
	}
}

//
//	nested__PRINTER_INFO_1_Fixed_Portion
//
[ Post.Property.RPRNPrinterInfo1FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedPrinterInfo1FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	RPRNPrinterEnumFlags		Flags;
	[
		Property.RPRNPrinterInfo1OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32						DescriptionOffset;
	[
		Property.RPRNPrinterInfo1OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32						NameOffset;
	[
		Property.RPRNPrinterInfo1OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32						CommentOffset;
}

//
//	_PRINTER_INFO_2
//
Struct RPRNCustomPrinterInfo2
{
	RPRNNestedPrinterInfo2FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNPrinterInfo2FixedPortionCount[ Local.Index - 1 ] ]
			{

				Switch
				{
					Case !Property.RPRNPrinterInfo2OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNPrinterInfo2OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}

					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNPrinterInfo2OffsetTable$[ FrameOffset ] )
						{
							Case 1: UnicodeString			ServerNameArray;
							Case 2:	UnicodeString			PrinterNameArray;
							Case 3:	UnicodeString			ShareNameArray ;
							Case 4:	UnicodeString			PortNameArray;
							Case 5:	UnicodeString			DriverNameArray;
							Case 6: UnicodeString			CommentArray;
							Case 7:	UnicodeString			LocationArray;
							Case 8: RPRNDevMode				DevModeArray;
							Case 9: UnicodeString			SepFileArray;
							Case 10: UnicodeString			PrintProcessorArray;
							Case 11: UnicodeString			DatatypeArray;
							Case 12: UnicodeString			ParametersArray;
							Case 13: NdrSecurityDescriptor	SecurityDescriptorArray;
						}
				}
			}
		}
	}
}

//
//	nested__PRINTER_INFO_2_Fixed_Portion
//
[ Post.Property.RPRNPrinterInfo2FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedPrinterInfo2FixedPortion
{
	[
		Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset,
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32								ServerNameOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								PrinterNameOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								ShareNameOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								PortNameOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								DriverNameOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 6,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								CommentOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 7,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								LocationOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 8,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								DevModeOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 9,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								SepFileOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 10,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								PrintProcessorOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 11,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								DatatypeOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 12,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								ParametersOffset;
	[
		Property.RPRNPrinterInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 13,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								SecurityDescriptorOffset;
	RPRNPrinterAttributeFlags			Attributes;
	UINT32								Priority;
	UINT32								DefaultPriority;
	UINT32								StartTime = FormatString( "%u minutes", this );
	UINT32								UntilTime = FormatString( "%u minutes", this );
	RPRNPrinterStatusFlags				Status;
	UINT32								Jobs;
	UINT32								AveragePPM;
}

//
//	_PRINTER_INFO_3
//
Struct RPRNCustomPrinterInfo3
{
	RPRNNestedPrinterInfo3FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNPrinterInfo3OffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNPrinterInfo3OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNPrinterInfo3OffsetTable$[ FrameOffset ]:
					NdrSecurityDescriptor			SecurityDescriptorArray;
			}
		}
	}
}

//
//	nested__PRINTER_INFO_3_Fixed_Portion
//
Struct RPRNNestedPrinterInfo3FixedPortion
{
	[ Property.RPRNPrinterInfo3OffsetTable$[ FrameOffset + this ] = TRUE ]
	UINT32 SecurityDescriptorOffset;
}

//
//	_PRINTER_INFO_4
//
Struct RPRNCustomPrinterInfo4
{
	RPRNNestedPrinterInfo4FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNPrinterInfo4FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNPrinterInfo4OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNPrinterInfo4OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}

					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNPrinterInfo4OffsetTable$[ FrameOffset ] )
						{
							Case 1: UnicodeString					PrinterNameArray;
							Case 2: UnicodeString					ServerNameArray;
						}
				}
			}
		}
	}
}

//
//	nested__PRINTER_INFO_4_Fixed_Portion
//
[ Post.Property.RPRNPrinterInfo4FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedPrinterInfo4FixedPortion
{
	[
		Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset,
		Property.RPRNPrinterInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0,
	]
	UINT32								PrinterNameOffset;
	[
		Property.RPRNPrinterInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							   ServerNameOffset;
	RPRNPrinterAttributeFlags			Attributes;
}

//
//	_PRINTER_INFO_5
//
Struct RPRNCustomPrinterInfo5
{
	RPRNNestedPrinterInfo5FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNPrinterInfo5FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case ! Property.RPRNPrinterInfo5OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNPrinterInfo5OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}

					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNPrinterInfo5OffsetTable$[ FrameOffset ] )
						{
							Case 1 : UnicodeString					PrinterNameArray;
							Case 2 : UnicodeString					PortNameArray;
						}
				}
			}
		}
	}
}

//
//	nested__PRINTER_INFO_5_Fixed_Portion
//
[ Post.Property.RPRNPrinterInfo5FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedPrinterInfo5FixedPortion
{
	[
		Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset,
		Property.RPRNPrinterInfo5OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32									PrinterNameOffset;
	[
		Property.RPRNPrinterInfo5OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									PortNameOffset;
	RPRNPrinterAttributeFlags				Attributes;
	UINT32									DeviceNotSelectedTimeout = FormatString( "%u milliseconds", this );
	UINT32									TransmissionRetryTimeout = FormatString( "%u milliseconds", this );
}

//
//	_PRINTER_INFO_6
//
Struct RPRNCustomPrinterInfo6
{
	RPRNNestedPrinterInfo6FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];
	Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset) UnusedData;
}

//
//	nested__PRINTER_INFO_6_Fixed_Portion
//
Struct RPRNNestedPrinterInfo6FixedPortion
{
	RPRNPrinterStatusFlags			Status;
}

//
//	_PRINTER_INFO_7
//
Struct RPRNCustomPrinterInfo7
{
	RPRNNestedPrinterInfo7FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNPrinterInfo7OffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNPrinterInfo7OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNPrinterInfo7OffsetTable$[ FrameOffset ]:
					GUID(True)				ObjectGUIDArray;
			}
		}
	}
}

//
//	nested__PRINTER_INFO_7_Fixed_Portion
//
Struct RPRNNestedPrinterInfo7FixedPortion
{
	[ Property.RPRNPrinterInfo7OffsetTable$[ FrameOffset  + this ] = TRUE ]
	UINT32								ObjectGUIDOffset;
	RPRNPrinterInfoActionFlags			Action;
}

//
//	_PRINTER_INFO_8
//
Struct RPRNCustomPrinterInfo8
{
	RPRNNestedPrinterInfo8FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNPrinterInfo8OffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNPrinterInfo8OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNPrinterInfo8OffsetTable$[ FrameOffset ]:
					RPRNDevMode				DevModeArray;
			}
		}
	}
}

//
//	nested__PRINTER_INFO_8_Fixed_Portion
//
Struct RPRNNestedPrinterInfo8FixedPortion
{
	[ Property.RPRNPrinterInfo8OffsetTable$[ FrameOffset  + this ] = TRUE ]
	UINT32						DevModeOffset;
}

//
//	_PRINTER_INFO_9
//
Struct RPRNCustomPrinterInfo9
{
	RPRNNestedPrinterInfo9FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNPrinterInfo9OffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNPrinterInfo9OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNPrinterInfo9OffsetTable$[ FrameOffset ]:
					RPRNDevMode				DevModeArray;
			}
		}
	}
}

//
//	nested__PRINTER_INFO_9_Fixed_Portion
//
Struct RPRNNestedPrinterInfo9FixedPortion
{
	[ Property.RPRNPrinterInfo9OffsetTable$[ FrameOffset  + this ] = TRUE ]
	UINT32						DevModeOffset;
}

//------ End of CUSTOM PrinterInfo Structs ----

//------ Start of CUSTOM JobInfo Structs ------

[
	Conversation.RPRNPerFrameJobInfoLevel$[ FrameNumber ] = Conversation.RPRNJobInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ],
	Property.RPRNInfoLevel = Conversation.RPRNPerFrameJobInfoLevel$[ FrameNumber ]
]
Struct RPRNConfCustomJobInfoPtr( IsMulti ) = "Level = " + Property.RPRNInfoLevel
{
	NdrPtr							Ptr;
	Switch
	{
		Case Ptr.ReferentID > 0:
			Struct
			{
				NdrConformant		Size;
				Switch
				{
					Case Size.MaxCount > 0:
						Struct
						{
							[
								Property.RPRNCustomInfoBufferEndOffset = FrameOffset + Size.MaxCount,
								Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount ) % 4 ) % 4,
								Local.InfoStructReturnedOffset = FrameOffset + Size.MaxCount + 4 + Local.AlignPaddingSize,
								Property.RPRNCustomInfoStructNumber = IsMulti ? UINT32( FrameData, Local.InfoStructReturnedOffset ) : 1
							]
							Switch
							{
								Case ( FrameLength - FrameOffset ) < Size.MaxCount :
									BLOB(FrameLength - FrameOffset) UnparsedData = "Parsed after reassembly";

								Case Property.RPRNCustomInfoStructNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
									BLOB( Size.MaxCount )			UnusedData;

								Default:
									Switch( Property.RPRNInfoLevel )
									{
										Case 1: RPRNCustomJobInfo1							JobInfo1;
										Case 2: RPRNCustomJobInfo2							JobInfo2;
										Case 3: RPRNCustomJobInfo3							JobInfo3;
										Case 4: RPRNCustomJobInfo4							JobInfo4;
										Default: ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Value" ) Unknown;
									}
							}
							Switch
							{
								Case FrameOffset < Property.RPRNCustomInfoBufferEndOffset:
									Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset ) Pad;
							}
						}
				}
			}
	}
}

//
//	_JOB_INFO_1
//
Struct RPRNCustomJobInfo1
{
	RPRNNestedJobInfo1FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNJobInfo1FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNJobInfo1OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNJobInfo1OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNJobInfo1OffsetTable$[ FrameOffset ] )
						{
							Case 1 :UnicodeString			PrinterNameArray;
							Case 2: UnicodeString			MachineNameArray;
							Case 3: UnicodeString			UserNameArray;
							Case 4 :UnicodeString			DocumentArray;
							Case 5: UnicodeString			DatatypeArray;
							Case 6: UnicodeString			StatusArray;
						}
				}
			}
		}
	}
}

//
//	__nested__JOB_INFO_1_Fixed_Portion
//
[ Post.Property.RPRNJobInfo1FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedJobInfo1FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32							JobId;
	[
		Property.RPRNJobInfo1OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32 							PrinterNameOffset;
	[
		Property.RPRNJobInfo1OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32 							MachineNameOffset;
	[
		Property.RPRNJobInfo1OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32 							UserNameOffset;
	[
		Property.RPRNJobInfo1OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32 							DocumentOffset;
	[
		Property.RPRNJobInfo1OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32 							DatatypeOffset;
	[
		Property.RPRNJobInfo1OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 6,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32 							StatusOffset;
	RPRNJobStatusFlags 				Status;
	UINT32 							Priority;
	UINT32 							Position;
	UINT32 							TotalPages;
	UINT32 							PagesPrinted;
	SYSTEMTIME						Submitted;
}

//
//	_JOB_INFO_2
//
Struct RPRNCustomJobInfo2
{
	RPRNNestedJobInfo2FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNJobInfo2FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNJobInfo2OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNJobInfo2OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNJobInfo2OffsetTable$[ FrameOffset ] )
						{
							Case 1:	UnicodeString 				PrinterNameArray;
							Case 2:	UnicodeString 				MachineNameArray;
							Case 3:	UnicodeString 				UserNameArray;
							Case 4:	UnicodeString 				DocumentArray;
							Case 5:	UnicodeString 				NotifyNameArray;
							Case 6:	UnicodeString 				DatatypeArray;
							Case 7:	UnicodeString 				PrintProcessorArray;
							Case 8:	UnicodeString 				ParametersArray;
							Case 9:	UnicodeString 				DriverNameArray;
							Case 10: RPRNDevMode 				DevModeArray;
							Case 11: UnicodeString 				StatusArray;
							Case 12: NdrSecurityDescriptor		SecurityDescriptorArray;
						}
				}
			}
		}
	}
}

//
//	__nested__JOB_INFO_2_Fixed_Portion
//
[ Post.Property.RPRNJobInfo2FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedJobInfo2FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32							JobId;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32							PrinterNameOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							MachineNameOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							UserNameOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							DocumentOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							NotifyNameOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 6,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							DatatypeOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 7,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							PrintProcessorOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 8,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							ParametersOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 9,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							DriverNameOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 10,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							DevModeOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 11,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							StatusOffset;
	[
		Property.RPRNJobInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 12,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32						SecurityDescriptorOffset;
	RPRNJobStatusFlags			Status;
	UINT32						Priority;
	UINT32						Position;
	UINT32						StartTime;
	UINT32						UntilTime;
	UINT32						TotalPages;
	UINT32						Size;
	SYSTEMTIME					Submitted;
	UINT32						Time;
	UINT32						PagesPrinted;
}

//
//	_JOB_INFO_3
//
Struct RPRNCustomJobInfo3
{
	RPRNNestedJobInfo3FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];
	Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset) UnusedData;
}

//
//	__nested__Job_INFO_3_Fixed_Portion
//
Struct RPRNNestedJobInfo3FixedPortion
{
	UINT32				JobId;
	UINT32				NextJobId;
	UINT32				Reserved;
}

//
//	_JOB_INFO_4
//
Struct RPRNCustomJobInfo4
{
	RPRNNestedJobInfo4FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNJobInfo4FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNJobInfo4OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNJobInfo4OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNJobInfo4OffsetTable$[ FrameOffset ] )
						{
							Case 1:	UnicodeString 				PrinterNameArray;
							Case 2:	UnicodeString 				MachineNameArray;
							Case 3:	UnicodeString 				UserNameArray;
							Case 4:	UnicodeString 				DocumentArray;
							Case 5:	UnicodeString 				NotifyNameArray;
							Case 6:	UnicodeString 				DatatypeArray;
							Case 7:	UnicodeString 				PrintProcessorArray;
							Case 8:	UnicodeString 				ParametersArray;
							Case 9:	UnicodeString 				DriverNameArray;
							Case 10: RPRNDevMode 				DevModeArray;
							Case 11: UnicodeString 				StatusArray;
							Case 12: NdrSecurityDescriptor		SecurityDescriptorArray;

						}
				}
			}
		}
	}
}

//
//	__nested__JOB_INFO_4_Fixed_Portion
//
[ Post.Property.RPRNJobInfo4FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedJobInfo4FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32							JobId;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32							PrinterNameOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							MachineNameOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							UserNameOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							DocumentOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							NotifyNameOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 6,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							DatatypeOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 7,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							PrintProcessorOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 8,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							ParametersOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 9,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							DriverNameOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 10,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							DevModeOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 11,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							StatusOffset;
	[
		Property.RPRNJobInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 12,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32							SecurityDescriptorOffset;
	RPRNJobStatusFlags				Status;
	UINT32							Priority;
	UINT32							Position;
	UINT32							StartTime;
	UINT32							UntilTime;
	UINT32							TotalPages;
	UINT32							Size;
	SYSTEMTIME						Submitted;
	UINT32							Time;
	UINT32							PagesPrinted;
	INT32							SizeHigh = FormatString( "Total Job Size Bytes = %u", Size + (this * 4294967296) );
}
//------- End of CUSTOM JobInfo Structs -------

//------ Start of CUSTOM DriverInfo Structs ------

[
	Conversation.RPRNPerFrameDriverInfoLevel$[ FrameNumber ] = Conversation.RPRNDriverInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ],
	Property.RPRNInfoLevel = Conversation.RPRNPerFrameDriverInfoLevel$[ FrameNumber ]
]
Struct RPRNConfCustomDriverInfoPtr( IsMulti ) = "Level = " + Property.RPRNInfoLevel
{
	NdrPtr							Ptr;
	Switch
	{
		Case Ptr.ReferentID > 0:
			Struct
			{
				NdrConformant		Size;
				Switch
				{
					Case Size.MaxCount > 0:
						Struct
						{
							[
								Property.RPRNCustomInfoBufferEndOffset = FrameOffset + Size.MaxCount,
								Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount ) % 4 ) % 4,
								Local.InfoStructReturnedOffset = FrameOffset + Size.MaxCount + 4 + Local.AlignPaddingSize,
								Property.RPRNCustomInfoStructNumber = IsMulti ? UINT32( FrameData, Local.InfoStructReturnedOffset ) : 1
							]
							Switch
							{
								Case ( FrameLength - FrameOffset ) < Size.MaxCount :
									BLOB(FrameLength - FrameOffset) UnparsedData = "Parsed after reassembly";

								Case Property.RPRNCustomInfoStructNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
									BLOB( Size.MaxCount )			UnusedData;

								Default:
									Switch( Property.RPRNInfoLevel )
									{
											Case 1: RPRNCustomDriverInfo1			DriverInfo1;
											Case 2: RPRNCustomDriverInfo2			DriverInfo2;
											Case 3: RPRNCustomDriverInfo3			DriverInfo3;
											Case 4: RPRNCustomDriverInfo4			DriverInfo4;
											Case 5: RPRNCustomDriverInfo5			DriverInfo5;
											Case 6: RPRNCustomDriverInfo6			DriverInfo6;
											Case 7: RPRNCustomDriverInfo7			DriverInfo7;
											Case 8: RPRNCustomDriverInfo8			DriverInfo8;
											Case 101: RPRNCustomDriverInfo101		DriverInfo101;
											Default: ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Value" ) Unknown;
									}
							}
							Switch
							{
								Case FrameOffset < Property.RPRNCustomInfoBufferEndOffset:
									Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset ) Pad;
							}
						}
				}
			}
	}
}

//
//	_DRIVER_INFO_1
//
Struct RPRNCustomDriverInfo1
{
	RPRNNestedDriverInfo1FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNDriverInfo1OffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNDriverInfo1OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNDriverInfo1OffsetTable$[ FrameOffset ]:  UnicodeString				NameArray;
			}
		}
	}
}

//
// __nested_DRIVER_INFO_1_Fixed_Portion
//
Struct RPRNNestedDriverInfo1FixedPortion
{
	[ Property.RPRNDriverInfo1OffsetTable$[ FrameOffset  + this ] = TRUE ]
	UINT32						NameOffset;
}

//
//	_DRIVER_INFO_2
//
Struct RPRNCustomDriverInfo2
{
	RPRNNestedDriverInfo2FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNDriverInfo2FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNDriverInfo2OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNDriverInfo2OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNDriverInfo2OffsetTable$[ FrameOffset ] )
						{
							Case 1 :UnicodeString			NameArray;
							Case 2: UnicodeString			EnvironmentArray;
							Case 3: UnicodeString			DriverPathArray;
							Case 4: UnicodeString			DataFileArray;
							Case 5: UnicodeString			ConfigFileArray;
						}
				}
			}
		}
	}
}

//
//	__nested__Driver_INFO_2_Fixed_Portion
//
[ Post.Property.RPRNDriverInfo2FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedDriverInfo2FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32									Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	[
		Property.RPRNDriverInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32 									NameOffset;
	[
		Property.RPRNDriverInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32 									EnvironmentOffset;
	[
		Property.RPRNDriverInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32 									DriverPathOffset;
	[
		Property.RPRNDriverInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32 									DataFileOffset;
	[
		Property.RPRNDriverInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32 									ConfigFileOffset;
}

//
//	_DRIVER_INFO_3
//
Struct RPRNCustomDriverInfo3
{
	RPRNNestedDriverInfo3FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNDriverInfo3FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNDriverInfo3OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNDriverInfo3OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNDriverInfo3OffsetTable$[ FrameOffset ] )
						{
							Case 1 :UnicodeString				NameArray;
							Case 2: UnicodeString				EnvironmentArray;
							Case 3: UnicodeString				DriverPathArray;
							Case 4: UnicodeString				DataFileArray;
							Case 5: UnicodeString				ConfigFileArray;
							Case 6: UnicodeString				HelpFileArray;
							Case 7: RPRNConfMultiStringArray		DependentFilesArray;
							Case 8: UnicodeString				MonitorNameArray;
							Case 9: UnicodeString				DefaultDataTypeArray;
						}
				}
			}
		}
	}
}

//
//	__nested__Driver_INFO_3_Fixed_Portion
//
[ Post.Property.RPRNDriverInfo3FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedDriverInfo3FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32									Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	[
		Property.RPRNDriverInfo3OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32									NameOffset;
	[
		Property.RPRNDriverInfo3OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									EnvironmentOffset;
	[
		Property.RPRNDriverInfo3OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DriverPathOffset;
	[
		Property.RPRNDriverInfo3OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DataFileOffset;
	[
		Property.RPRNDriverInfo3OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									ConfigFileOffset;
	[
		Property.RPRNDriverInfo3OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 6,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									HelpFileOffset;
	[
		Property.RPRNDriverInfo3OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 7,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DependentFilesOffset;
	[
		Property.RPRNDriverInfo3OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 8,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									MonitorNameOffset;
	[
		Property.RPRNDriverInfo3OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 9,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DefaultDataTypeOffset;
}

//
//	_DRIVER_INFO_4
//
Struct RPRNCustomDriverInfo4
{
	RPRNNestedDriverInfo4FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNDriverInfo4FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNDriverInfo4OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNDriverInfo4OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNDriverInfo4OffsetTable$[ FrameOffset ] )
						{
							Case 1 :UnicodeString				NameArray;
							Case 2: UnicodeString				EnvironmentArray;
							Case 3: UnicodeString				DriverPathArray;
							Case 4: UnicodeString				DataFileArray;
							Case 5: UnicodeString				ConfigFileArray;
							Case 6: UnicodeString				HelpFileArray;
							Case 7: RPRNConfMultiStringArray		DependentFilesArray;
							Case 8: UnicodeString				MonitorNameArray;
							Case 9: UnicodeString				DefaultDataTypeArray;
							Case 10: RPRNConfMultiStringArray		PreviousNamesArray;
						}
				}
			}
		}
	}
}

//
//	__nested__Driver_INFO_4_Fixed_Portion
//
[ Post.Property.RPRNDriverInfo4FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedDriverInfo4FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32									Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	[
		Property.RPRNDriverInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32									NameOffset;
	[
		Property.RPRNDriverInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									EnvironmentOffset;
	[
		Property.RPRNDriverInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DriverPathOffset;
	[
		Property.RPRNDriverInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DataFileOffset;
	[
		Property.RPRNDriverInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									ConfigFileOffset;
	[
		Property.RPRNDriverInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 6,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									HelpFileOffset;
	[
		Property.RPRNDriverInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 7,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DependentFilesOffset;
	[
		Property.RPRNDriverInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 8,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									MonitorNameOffset;
	[
		Property.RPRNDriverInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 9,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DefaultDataTypeOffset;
	[
		Property.RPRNDriverInfo4OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 10,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									PreviousNamesOffset;
}

//
//	_DRIVER_INFO_5
//
Struct RPRNCustomDriverInfo5
{
	RPRNNestedDriverInfo5FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNDriverInfo5FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNDriverInfo5OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNDriverInfo5OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNDriverInfo5OffsetTable$[ FrameOffset ] )
						{
							Case 1 :UnicodeString				NameArray;
							Case 2: UnicodeString				EnvironmentArray;
							Case 3: UnicodeString				DriverPathArray;
							Case 4: UnicodeString				DataFileArray;
							Case 5: UnicodeString				ConfigFileArray;
						}
				}
			}
		}
	}
}

//
//	__nested__Driver_INFO_5_Fixed_Portion
//
[ Post.Property.RPRNDriverInfo5FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedDriverInfo5FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32									Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	[
		Property.RPRNDriverInfo5OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32									NameOffset;
	[
		Property.RPRNDriverInfo5OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									EnvironmentOffset;
	[
		Property.RPRNDriverInfo5OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DriverPathOffset;
	[
		Property.RPRNDriverInfo5OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DataFileOffset;
	[
		Property.RPRNDriverInfo5OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									ConfigFileOffset;
	RPRNDriverInfo5DriverAttributesFlags	DriverAttributes;
	UINT32									ConfigVersion;
	UINT32									DriverVersion;
}

//
//	_DRIVER_INFO_6
//
Struct RPRNCustomDriverInfo6
{
	RPRNNestedDriverInfo6FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNDriverInfo6FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNDriverInfo6OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNDriverInfo6OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNDriverInfo6OffsetTable$[ FrameOffset ] )
						{
							Case 1 :UnicodeString				NameArray;
							Case 2: UnicodeString				EnvironmentArray;
							Case 3: UnicodeString				DriverPathArray;
							Case 4: UnicodeString				DataFileArray;
							Case 5: UnicodeString				ConfigFileArray;
							Case 6: UnicodeString				HelpFileArray;
							Case 7: RPRNConfMultiStringArray		DependentFilesArray;
							Case 8: UnicodeString				MonitorNameArray;
							Case 9: UnicodeString				DefaultDataTypeArray;
							Case 10: RPRNConfMultiStringArray		PreviousNamesArray;
							Case 11: UnicodeString				MfgNameArray;
							Case 12: UnicodeString				OEMUrlArray;
							Case 13: UnicodeString				HardwareIDArray;
							Case 14: UnicodeString				ProviderArray;

						}
				}
			}
		}
	}
}

//
//	__nested__Driver_INFO_6_Fixed_Portion
//
[ Post.Property.RPRNDriverInfo6FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedDriverInfo6FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32									Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32									NameOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									EnvironmentOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DriverPathOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DataFileOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									ConfigFileOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 6,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									HelpFileOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 7,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DependentFilesOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 8,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									MonitorNameOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 9,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									DefaultDataTypeOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 10,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									PreviousNamesOffset;
	FILETIME								DriverDate;
	BLOB(4)									PaddingForAlignment;
	RPRNDriverInfoDriverVersion				DriverVersion;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 11,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									MfgNameOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 12,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									OEMUrlOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 13,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									HardwareIDOffset;
	[
		Property.RPRNDriverInfo6OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 14,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									ProviderOffset;
}

//
//	_DRIVER_INFO_7
//
Struct RPRNCustomDriverInfo7
{
	RPRNNestedDriverInfo7FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNDriverInfo7FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNDriverInfo7OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNDriverInfo7OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNDriverInfo7OffsetTable$[ FrameOffset ] )
						{
							Case 1 :UnicodeString				DriverNameArray;
							Case 2: UnicodeString				InfNameArray;
							Case 3: UnicodeString				InstallSourceRootArray;
						}
				}
			}
		}
	}
}

//
//	__nested__Driver_INFO_7_Fixed_Portion
//
[ Post.Property.RPRNDriverInfo7FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedDriverInfo7FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32									Size;
	UINT32									Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	[
		Property.RPRNDriverInfo7OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32									DriverNameOffset;
	[
		Property.RPRNDriverInfo7OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									InfNameOffset;
	[
		Property.RPRNDriverInfo7OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32									InstallSourceRootOffset;
}

//
//	_DRIVER_INFO_8
//
Struct RPRNCustomDriverInfo8
{
	RPRNNestedDriverInfo8FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNDriverInfo8FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNDriverInfo8OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNDriverInfo8OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNDriverInfo8OffsetTable$[ FrameOffset ] )
						{
							Case 1 :UnicodeString				NameArray;
							Case 2: UnicodeString				EnvironmentArray;
							Case 3: UnicodeString				DriverPathArray;
							Case 4: UnicodeString				DataFileArray;
							Case 5: UnicodeString				ConfigFileArray;
							Case 6: UnicodeString				HelpFileArray;
							Case 7: RPRNConfMultiStringArray		DependentFilesArray;
							Case 8: UnicodeString				MonitorNameArray;
							Case 9: UnicodeString				DefaultDataTypeArray;
							Case 10: RPRNConfMultiStringArray		PreviousNamesArray;
							Case 11: UnicodeString				MfgNameArray;
							Case 12: UnicodeString				OEMUrlArray;
							Case 13: UnicodeString				HardwareIDArray;
							Case 14: UnicodeString				ProviderArray;
							Case 15: UnicodeString				PrintProcessorArray;
							Case 16: UnicodeString				VendorSetupArray;
							Case 17: RPRNConfMultiStringArray		ColorProfilesArray;
							Case 18: UnicodeString				InfPathArray;
							Case 19: RPRNConfMultiStringArray		CoreDependenciesArray;
						}
				}
			}
		}
	}
}

//
//	__nested__Driver_INFO_8_Fixed_Portion
//
[ Post.Property.RPRNDriverInfo8FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedDriverInfo8FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32											Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32											NameOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											EnvironmentOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											DriverPathOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											DataFileOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											ConfigFileOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 6,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											HelpFileOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 7,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											DependentFilesOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 8,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											MonitorNameOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 9,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											DefaultDataTypeOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 10,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											PreviousNamesOffset;
	FILETIME										DriverDate;
	BLOB(4)											PaddingForAlignment;
	RPRNDriverInfoDriverVersion						DriverVersion;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 11,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											MfgNameOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 12,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											OEMUrlOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 13,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											HardwareIDOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 14,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											ProviderOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 15,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											PrintProcessorOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 16,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											VendorSetupOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 17,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											ColorProfilesOffset;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 18,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											InfPathOffset;
	RPRNDriverInfoPrinterDriverAttributesFlags		PrinterDriverAttributes;
	[
		Property.RPRNDriverInfo8OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 19,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32											CoreDependenciesOffset;
	FILETIME										MinInboxDriverVerDate;
	UINT64											MinInboxDriverVerVersion;
}

//
//	_DRIVER_INFO_101
//
Struct RPRNCustomDriverInfo101
{
	RPRNNestedDriverInfo101FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNDriverInfo101FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNDriverInfo101OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNDriverInfo101OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNDriverInfo101OffsetTable$[ FrameOffset ] )
						{
							Case 1: UnicodeString				NameArray;
							Case 2: UnicodeString				EnvironmentArray;
							Case 3: RPRNCustomDriverFileInfo	FileInfoArray;
							Case 4: UnicodeString				MonitorNameArray;
							Case 5: UnicodeString				DefaultDataTypeArray;
							Case 6: RPRNConfMultiStringArray		PreviousNamesArray;
							Case 7: UnicodeString				MfgNameArray;
							Case 8: UnicodeString				OEMUrlArray;
							Case 9: UnicodeString				HardwareIDArray;
							Case 10:UnicodeString				ProviderArray;
						}
				}
			}
		}
	}
}

//
//	__nested__Driver_INFO_101_Fixed_Portion
//
[ Post.Property.RPRNDriverInfo101FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedDriverInfo101FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32								Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	[
		Property.RPRNDriverInfo101OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32								NameOffset;
	[
		Property.RPRNDriverInfo101OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								EnvironmentOffset;
	[
		Property.RPRNDriverInfo101OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								FileInfoOffset;
	[ Property.RPRNDriverInfo101FileCount ]
	UINT32								FileCount;
	[
		Property.RPRNDriverInfo101OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								MonitorNameOffset;
	[
		Property.RPRNDriverInfo101OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 5,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								DefaultDataTypeOffset;
	[
		Property.RPRNDriverInfo101OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 6,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								PreviousNamesOffset;
	FILETIME							DriverDate;
	BLOB(4)								PaddingForAlignment;
	RPRNDriverInfoDriverVersion			DriverVersion;
	[
		Property.RPRNDriverInfo101OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 7,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								MfgNameOffset;
	[
		Property.RPRNDriverInfo101OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 8,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								OEMUrlOffset;
	[
		Property.RPRNDriverInfo101OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 9,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								HardwareIDOffset;
	[
		Property.RPRNDriverInfo101OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 10,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								ProviderOffset;
}

Struct RPRNDriverInfoDriverVersion = FormatString( "OS Major Version = %u, OS Minor Version = %u, Build Number = %u, Revision = %u", OSMajorVersion, OSMinorVersion, BuildNumber, Revision )
{
	UINT16 OSMajorVersion;
	UINT16 OSMinorVersion;
	UINT16 BuildNumber;
	UINT16 Revision;
}

//
//	_DRIVER_FILE_INFO
//
Struct RPRNCustomDriverFileInfo
{
	RPRNNestedDriverFileInfoFixedPortion FixedPortion[ Property.RPRNDriverInfo101FileCount ];

	[ Local.Index = Property.RPRNDriverInfo101FileCount ]
	While[ Local.Index ]
	{

		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNDriverFileInfoOffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNDriverFileInfoOffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNDriverFileInfoOffsetTable$[ FrameOffset ]:
					UnicodeString				FileNameArray;
			}
		}
	}
}

//
//	__nested__DRIVER_FILE_INFO_Fixed_Portion
//
Struct RPRNNestedDriverFileInfoFixedPortion
{
	[ Property.RPRNDriverFileInfoOffsetTable$[ FrameOffset  + this ] = TRUE ]
	UINT32		FileNameOffset;
	UINT32		FileType;
	UINT32		FileVersion;
}

//------ End of CUSTOM DriverInfo Structs ------

//------ Start of CUSTOM FormInfo Structs ------
[
	Conversation.RPRNPerFrameFormInfoLevel$[ FrameNumber ] = Conversation.RPRNFormInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ],
	Property.RPRNInfoLevel = Conversation.RPRNPerFrameFormInfoLevel$[ FrameNumber ]
]
Struct RPRNConfCustomFormInfoPtr( IsMulti ) = "Level = " + Property.RPRNInfoLevel
{
	NdrPtr							Ptr;
	Switch
	{
		Case Ptr.ReferentID > 0:
			Struct
			{
				NdrConformant		Size;
				Switch
				{
					Case Size.MaxCount > 0:
						Struct
						{
							[
								Property.RPRNCustomInfoBufferEndOffset = FrameOffset + Size.MaxCount,
								Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount ) % 4 ) % 4,
								Local.InfoStructReturnedOffset = FrameOffset + Size.MaxCount + 4 + Local.AlignPaddingSize,
								Property.RPRNCustomInfoStructNumber = IsMulti ? UINT32( FrameData, Local.InfoStructReturnedOffset ) : 1
							]
							Switch
							{
								Case ( FrameLength - FrameOffset ) < Size.MaxCount :
									BLOB(FrameLength - FrameOffset) UnparsedData = "Parsed after reassembly";

								Case Property.RPRNCustomInfoStructNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
									BLOB( Size.MaxCount )			UnusedData;

								Default:
									Switch( Property.RPRNInfoLevel )
									{
											Case 1: RPRNCustomFormInfo1							FormInfo1;
											Case 2: RPRNCustomFormInfo2							FormInfo2;
											Default: ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Value" ) Unknown;
									}
							}
							Switch
							{
								Case FrameOffset < Property.RPRNCustomInfoBufferEndOffset:
									Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset ) Pad;
							}
						}
				}
			}
	}
}

//
//	_FORM_INFO_1
//
Struct RPRNCustomFormInfo1
{
	RPRNNestedFormInfo1FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNFormInfo1OffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNFormInfo1OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNFormInfo1OffsetTable$[ FrameOffset ]:
					UnicodeString				NameArray;
			}
		}
	}
}

Table RPRNFormInfoFlagsTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "FORM_USER - Form defined by user and in the registry";
		Case 0x00000001: "FORM_BUILTIN - Form is part of the spooler and does not appear in the registry";
		Case 0x00000002: "FORM_PRINTER - Form is assocated with a particular printer and its definition is in the registry";
		Default: FormatString( "Unknown Value (%u)", Value );
	}
}

//
//	__nested__FORM_INFO_1_Fixed_Portion
//
Struct RPRNNestedFormInfo1FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32								Flags = RPRNFormInfoFlagsTable( this );
	[ Property.RPRNFormInfo1OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = TRUE ]
	UINT32								NameOffset;
	RPRNSize							Size;
	RPRNRectl							ImageableArea;
}

//
//	_FORM_INFO_2
//
Struct RPRNCustomFormInfo2
{
	RPRNNestedFormInfo2FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNFormInfo2FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNFormInfo2OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNFormInfo2OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNFormInfo2OffsetTable$[ FrameOffset ] )
						{
							Case 1: UnicodeString				NameArray;
							Case 2: AsciiString					KeywordArray;
							Case 3: UnicodeString				MuiDllArray;
							Case 4: UnicodeString				DisplayNameArray;
						}
				}
			}
		}
	}
}

//
//	__nested__FORM_INFO_2_Fixed_Portion
//
[ Post.Property.RPRNFormInfo2FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedFormInfo2FixedPortion
{
	[ Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset ]
	UINT32								Flags = RPRNFormInfoFlagsTable( this );
	[
		Property.RPRNFormInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32								NameOffset;
	RPRNSize							Size;
	RPRNRectl							ImageableArea;
	[
		Property.RPRNFormInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								KeywordOffset;
	UINT32								StringType = RPRNRpcFormInfo2StringTypeTable(this);
	[
		Property.RPRNFormInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								MuiDllOffset;
	UINT32								ResourceID;
	[
		Property.RPRNFormInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 4,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								DisplayNameOffset;
	InetLangID							LangID;
	UINT16								Unused;
}

//------- End of CUSTOM FormInfo Structs -------

//----- Start of CUSTOM PortInfo structs -------

[
	Conversation.RPRNPerFramePortInfoLevel$[ FrameNumber ] = Conversation.RPRNPortInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ],
	Property.RPRNInfoLevel = Conversation.RPRNPerFramePortInfoLevel$[ FrameNumber ]
]
Struct RPRNConfCustomPortInfoPtr( IsMulti ) = "Level = " + Property.RPRNInfoLevel
{
	NdrPtr							Ptr;
	Switch
	{
		Case Ptr.ReferentID > 0:
			Struct
			{
				NdrConformant		Size;
				Switch
				{
					Case Size.MaxCount > 0:
						Struct
						{
							[
								Property.RPRNCustomInfoBufferEndOffset = FrameOffset + Size.MaxCount,
								Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount ) % 4 ) % 4,
								Local.InfoStructReturnedOffset = FrameOffset + Size.MaxCount + 4 + Local.AlignPaddingSize,
								Property.RPRNCustomInfoStructNumber = IsMulti ? UINT32( FrameData, Local.InfoStructReturnedOffset ) : 1
							]
							Switch
							{
								Case ( FrameLength - FrameOffset ) < Size.MaxCount :
									BLOB(FrameLength - FrameOffset) UnparsedData = "Parsed after reassembly";

								Case Property.RPRNCustomInfoStructNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
									BLOB( Size.MaxCount )			UnusedData;

								Default:
									Switch( Property.RPRNInfoLevel )
									{
											Case 1: RPRNCustomPortInfo1							PortInfo1;
											Case 2: RPRNCustomPortInfo2							PortInfo2;
											Default: ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Value" ) Unknown;
									}
							}
							Switch
							{
								Case FrameOffset < Property.RPRNCustomInfoBufferEndOffset:
									Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset ) Pad;
							}
						}
				}
			}
	}
}

//
//	_PORT_INFO_1
//
Struct RPRNCustomPortInfo1
{
	RPRNNestedPortInfo1FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{

		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNPortInfo1OffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNPortInfo1OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNPortInfo1OffsetTable$[ FrameOffset ]:
					UnicodeString				NameArray;
			}
		}
	}
}

//
//	__nested__PORT_INFO_1_Fixed_Portion
//
Struct RPRNNestedPortInfo1FixedPortion
{
	[ Property.RPRNPortInfo1OffsetTable$[ FrameOffset  + this ] = TRUE ]
	UINT32 NameOffset;
}

//
//	_PORT_INFO_2
//
Struct RPRNCustomPortInfo2
{
	RPRNNestedPortInfo2FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNPortInfo2FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNPortInfo2OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNPortInfo2OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNPortInfo2OffsetTable$[ FrameOffset ] )
						{
							Case 1: UnicodeString				PortNameArray;
							Case 2: UnicodeString				MonitorNameArray;
							Case 3: UnicodeString				DescriptionArray;
						}
				}
			}
		}
	}
}

//
//	__nested__PORT_INFO_2_Fixed_Portion
//
[ Post.Property.RPRNPortInfo2FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedPortInfo2FixedPortion
{
	[
		Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset,
		Property.RPRNPortInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32								PortNameOffset;
	[
		Property.RPRNPortInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								MonitorNameOffset;
	[
		Property.RPRNPortInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								DescriptionOffset;
	RPRNPortInfo2PortTypeFlags 			PortType;
	UINT32								Reserved;
}

//-------- End of CUSTOM PortInfo Structs -------

//----- Start of CUSTOM MonitorInfo Structs -----

[
	Conversation.RPRNPerFrameMonitorInfoLevel$[ FrameNumber ] = Conversation.RPRNMonitorInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ],
	Property.RPRNInfoLevel = Conversation.RPRNPerFrameMonitorInfoLevel$[ FrameNumber ]
]
Struct RPRNConfCustomMonitorInfoPtr( IsMulti ) = "Level = " + Property.RPRNInfoLevel
{
	NdrPtr							Ptr;
	Switch
	{
		Case Ptr.ReferentID > 0:
			Struct
			{
				NdrConformant		Size;
				Switch
				{
					Case Size.MaxCount > 0:
						Struct
						{
							[
								Property.RPRNCustomInfoBufferEndOffset = FrameOffset + Size.MaxCount,
								Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount ) % 4 ) % 4,
								Local.InfoStructReturnedOffset = FrameOffset + Size.MaxCount + 4 + Local.AlignPaddingSize,
								Property.RPRNCustomInfoStructNumber = IsMulti ? UINT32( FrameData, Local.InfoStructReturnedOffset ) : 1
							]
							Switch
							{
								Case ( FrameLength - FrameOffset ) < Size.MaxCount :
									BLOB(FrameLength - FrameOffset) UnparsedData = "Parsed after reassembly";

								Case Property.RPRNCustomInfoStructNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
									BLOB( Size.MaxCount )			UnusedData;

								Default:
									Switch( Property.RPRNInfoLevel )
									{
											Case 1: RPRNCustomMonitorInfo1							MonitorInfo1;
											Case 2: RPRNCustomMonitorInfo2							MonitorInfo2;
											Default: ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Value" ) Unknown;
									}
							}
							Switch
							{
								Case FrameOffset < Property.RPRNCustomInfoBufferEndOffset:
									Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset ) Pad;
							}
						}
				}
			}
	}
}

//
//	_MONITOR_INFO_1
//
Struct RPRNCustomMonitorInfo1
{
	RPRNNestedMonitorInfo1FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{

		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNMonitorInfo1OffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNMonitorInfo1OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNMonitorInfo1OffsetTable$[ FrameOffset ]:
					UnicodeString				NameArray;
			}
		}
	}
}

//
//	__nested__MONITOR_INFO_1_Fixed_Portion
//
Struct RPRNNestedMonitorInfo1FixedPortion
{
	[ Property.RPRNMonitorInfo1OffsetTable$[ FrameOffset  + this ] = TRUE ]
	UINT32 NameOffset;
}

//
//	_MONITOR_INFO_2
//
Struct RPRNCustomMonitorInfo2
{
	RPRNNestedMonitorInfo2FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{
		[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index  )
		{
			While[ Local.Count < Property.RPRNMonitorInfo2FixedPortionCount[ Local.Index - 1 ] ]
			{
				Switch
				{
					Case !Property.RPRNMonitorInfo2OffsetTable$[ FrameOffset ] :
						Struct Unused
							{
								While[ !Property.RPRNMonitorInfo2OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
								{
									UINT8		Pad;
								}
							}
					Default:
						[ Local.Count = Local.Count + 1 ]
						Switch( Property.RPRNMonitorInfo2OffsetTable$[ FrameOffset ] )
						{
							Case 1: UnicodeString				NameArray;
							Case 2: UnicodeString				EnvironmentArray;
							Case 3: UnicodeString				DLLNameOffset;
						}
				}
			}
		}
	}
}

//
//	__nested__MonitorInfo_INFO_2_Fixed_Portion
//
[ Post.Property.RPRNMonitorInfo2FixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct RPRNNestedMonitorInfo2FixedPortion
{
	[
		Property.RPRNCustInfoBufFixedPortionBeginOffset  = FrameOffset,
		Property.RPRNMonitorInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32								NameOffset;
	[
		Property.RPRNMonitorInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								EnvironmentOffset;
	[
		Property.RPRNMonitorInfo2OffsetTable$[ Property.RPRNCustInfoBufFixedPortionBeginOffset  + this ] = 3,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32								DLLNameOffset;
}

//------ End of CUSTOM MonitorInfo Structs ------

//---- Start of CUSTOM PrintProcessorInfo Structs ----

[
	Conversation.RPRNPerFramePrintProcessorInfoLevel$[ FrameNumber ] = Conversation.RPRNPrintProcessorInfoLevel$[ MakeByteArray( Property.MSRPCCallId, Property.MSRPCPContId ) ],
	Property.RPRNInfoLevel = Conversation.RPRNPerFramePrintProcessorInfoLevel$[ FrameNumber ]
]
Struct RPRNConfCustomPrintProcessorInfoPtr( IsMulti ) = "Level = " + Property.RPRNInfoLevel
{
	NdrPtr							Ptr;
	Switch
	{
		Case Ptr.ReferentID > 0:
			Struct
			{
				NdrConformant		Size;
				Switch
				{
					Case Size.MaxCount > 0:
						Struct
						{
							[
								Property.RPRNCustomInfoBufferEndOffset = FrameOffset + Size.MaxCount,
								Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount ) % 4 ) % 4,
								Local.InfoStructReturnedOffset = FrameOffset + Size.MaxCount + 4 + Local.AlignPaddingSize,
								Property.RPRNCustomInfoStructNumber = IsMulti ? UINT32( FrameData, Local.InfoStructReturnedOffset ) : 1
							]
							Switch
							{
								Case ( FrameLength - FrameOffset ) < Size.MaxCount :
									BLOB(FrameLength - FrameOffset) UnparsedData = "Parsed after reassembly";

								Case Property.RPRNCustomInfoStructNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
									BLOB( Size.MaxCount )			UnusedData;

								Default:
									Switch( Property.RPRNInfoLevel )
									{
											Case 1: RPRNCustomPrintProcessorInfo1			PrintProcessorInfo1;
											Default: ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Value" ) Unknown;
									}
							}
							Switch
							{
								Case FrameOffset < Property.RPRNCustomInfoBufferEndOffset:
									Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset ) Pad;
							}
						}
				}
			}
	}
}

//
//	PRINTPROCESSOR_INFO_1
//
Struct RPRNCustomPrintProcessorInfo1
{
	RPRNNestedPrintProcessorInfo1FixedPortion FixedPortion[ Property.RPRNCustomInfoStructNumber ];

	[ Local.Index = Property.RPRNCustomInfoStructNumber ]
	While[ Local.Index ]
	{

		[ Post.Local.Index = Local.Index - 1 ]
		Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
		{
			Switch
			{
				Case !Property.RPRNPrintProcessorInfo1OffsetTable$[ FrameOffset ]:
					Struct Unused
						{
							While[ !Property.RPRNPrintProcessorInfo1OffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
							{
								UINT8		Pad;
							}
						}
			}
			Switch
			{
				Case Property.RPRNPrintProcessorInfo1OffsetTable$[ FrameOffset ]:
					UnicodeString				FileNameArray;
			}
		}
	}
}

//
//	__nested__PRINTPROCESSOR_INFO_1_Fixed_Portion
//
Struct RPRNNestedPrintProcessorInfo1FixedPortion
{
	[ Property.RPRNPrintProcessorInfo1OffsetTable$[ FrameOffset  + this ] = TRUE ]
	UINT32		FileNameOffset;
}

//---- End of CUSTOM PrintProcessorInfo Structs ----

//
//	PRINTER_ENUM_VALUES
//
Struct RPRNConfCustomMultiPrinterEnumValues
{
	NdrConformant		Size;
	Switch
	{
		Case Size.MaxCount > 0:
			[
				Property.RPRNCustomPrinterEnumValuesEndOffset = FrameOffset + Size.MaxCount,
				Local.AlignPaddingSize = ( 4 - ( CurrentProtocolOffset + Size.MaxCount ) % 4 ) % 4,
				Local.PrinterEnumValuesNumberOffset = FrameOffset + Size.MaxCount + 4 + Local.AlignPaddingSize,
				Property.RPRNCustomPrinterEnumValuesNumber = UINT32( FrameData, Local.PrinterEnumValuesNumberOffset )
			]
			Switch
			{
				Case ( FrameLength - FrameOffset ) < Size.MaxCount :
					BLOB(FrameLength - FrameOffset) UnparsedData = "Parsed after reassembly";

				Case Property.RPRNCustomPrinterEnumValuesNumber == 0 || UINT32( FrameData, FrameLength - 4 ) == 0x7A :
					BLOB( Size.MaxCount )			UnusedData;

				Default:
					Struct
					{
						RPRNPrinterEnumValuesFixedPortion	PrinterEnumValues[ Property.RPRNCustomPrinterEnumValuesNumber ];

						[ Local.Index = Property.RPRNCustomPrinterEnumValuesNumber ]
						While[ Local.Index ]
						{

							[ Local.Count = 0 , Post.Local.Index = Local.Index - 1 ]
							Struct VariableData = FormatString( "Data block corresponding to FixedPortion - %u", Local.Index )
							{
								Switch
								{
									Case !Property.RPRNPrinterEnumValuesOffsetTable$[ FrameOffset ]:
										Struct Unused
											{
												While[ !Property.RPRNPrinterEnumValuesOffsetTable$[ FrameOffset ] && ( FrameOffset < Property.RPRNCustomInfoBufferEndOffset ) ]
												{
													UINT8		Pad;
												}
											}
									Default:
										[ Local.Count = Local.Count + 1 ]
										Switch( Property.RPRNPrinterEnumValuesOffsetTable$[ FrameOffset ] )
										{
											Case 1:  UnicodeString( Property.RPRNPrinterEnumValuesValueName)	ValueNameArray;
											Case 2:	 RPRNDynamicallyTypedData( Property.RPRNPrinterEnumValuesType, Property.RPRNPrinterEnumValuesData  ) DataArray;
										}
								}
							}
						}

						Switch
						{
							Case FrameOffset < Property.RPRNCustomInfoBufferEndOffset:
								Blob( Property.RPRNCustomInfoBufferEndOffset - FrameOffset ) Pad;
						}
					}
			}
	}
}

[ Post.Property.RPRNDPrinterEnumValuesFixedPortionCount.AddToProperty( Local.FixedPortionCount, 0 ) ]
Struct	RPRNPrinterEnumValuesFixedPortion
{
	[
		Property.RPRNPrinterEnumValuesFixedPortionBeginOffset  = FrameOffset,
		Property.RPRNPrinterEnumValuesOffsetTable$[ Property.RPRNPrinterEnumValuesFixedPortionBeginOffset  + this ] = 1,
		Local.FixedPortionCount = this ? 1 : 0
	]
	UINT32					ValueNameOffset;
	[ Property.RPRNPrinterEnumValuesValueName ]
	UINT32					ValueName;
	[ Property.RPRNPrinterEnumValuesType ]
	UINT32					Type = RPRNRegistryTypeValuesTable( this );
	[
		Property.RPRNPrinterEnumValuesOffsetTable$[ Property.RPRNPrinterEnumValuesFixedPortionBeginOffset  + this ] = 2,
		Local.FixedPortionCount = this ? Local.FixedPortionCount + 1 : Local.FixedPortionCount
	]
	UINT32					DataOffset;
	[ Property.RPRNPrinterEnumValuesData ]
	UINT32					Data;
}

Struct RPRNConfUniversalFontIDArray
{
	NdrConformant Size;
	[ Local.Start = FrameOffset ]
	Switch
	{
		Case Size.MaxCount > 0:
		Struct
		{
			Switch
			{
				Case Size.MaxCount >= 4:
					UINT32					FontCount;
			}
			Switch
			{
				Case Size.MaxCount > 4:
					RPRNUniversalFontID		FontID[ FontCount ];
			}
		}
	}
	Switch
	{
		Case local.Start + Size.MaxCount > FrameOffset:
			BLOB( local.Start + Size.MaxCount - FrameOffset ) ExtraBuffer;
	}
}

Struct RPRNUniversalFontID
{
	UINT32 CheckSum;
	UINT32 Index;
}

//
//	_DEVMODE_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNDevmodeContainer
{
	UINT32	CbBuf;
	NdrPtr	DevModePtr;
	Switch
	{
		Case DevModePtr.ReferentId > 0:
			Struct
			{
				NdrConformant	Size;
				Switch
				{
					Case Size.MaxCount > 0:
						RPRNDevMode	DevMode;
				}
			}
	}
}

//
//	_DEVMODE_CONTAINER - Pointer part
//	Alignment: NdrAlign
//
Struct RPRNDevmodeContainerHeader
{
	UINT32	CbBuf;
	[ Property.RPRNDevmodeContainerDevModePtrCount = Property.RPRNDevmodeContainerDevModePtrCount + (this.ReferentID ? 1 : 0) ]
	NdrPtr	DevModePtr;
}

//-------- Start of DocInfo structs --------

//
//	_DOC_INFO_CONTAINER
//	Alignment: NDRAlign
//
Struct RPRNDocInfoContainer
{
	UINT32 Level;
	NdrAlign Pad;
	RPRNDocInfoUnion DocInfo;
}

//
//	__nested_DocInfo__DOC_INFO_CONTAINER
//	Alignment: NDRAlign
//
Struct RPRNDocInfoUnion
{
	UINT32	SwitchValue;
	NdrPtr	DocInfoPtr;
	Switch
	{
		Case DocInfoPtr.ReferentID > 0:
			Struct
			{
				Switch( SwitchValue )
				{
					Case 1:
						RPRNDocInfo1	DocInfo1;
					Default:
						ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" ) Unknown;
				}
			}
	}
}

//
//	DOC_INFO_1
//  Alignment: None
//
Struct RPRNDocInfo1
{
	NdrPtr	DocNamePtr;
	NdrPtr	OutputFilePtr;
	NdrPtr	DatatypePtr;
	Switch
	{
		Case DocNamePtr.ReferentId > 0:
			NdrWideString	DocName;
	}
	Switch
	{
		Case OutputFilePtr.ReferentId > 0:
			NdrWideString	OutputFile;
	}
	Switch
	{
		Case DatatypePtr.ReferentId > 0:
			NdrWideString	Datatype;
	}
}

//-------- End of DocInfo structs --------

//------ Start of DriverInfo structs -------

//
//	DRIVER_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNDriverContainer
{
	UINT32	  Level;
	NdrAlign	Pad;
	RPRNDriverInfoUnion DriverInfo;
}

//
//	__nested_DriverInfo__DRIVER_CONTAINER
//
Struct RPRNDriverInfoUnion
{
	UINT32	SwitchValue;
	NdrPtr	DriverInfoPtr;
	Switch
	{
		Case DriverInfoPtr.ReferentID > 0:
			Struct
			{
				Switch( SwitchValue )
				{
					Case 1:  RPRNDriverInfo1		Level1;
					Case 2:  RPRNDriverInfo2		Level2;
					Case 3:  RPRNRpcDriverInfo3		Level3;
					Case 4:  RPRNRpcDriverInfo4		Level4;
					Case 6:
						Struct
						{
							Align8 Pad;
							RPRNRpcDriverInfo6		Level6;
						}
					Case 8:
						Struct
						{
							Align8 Pad;
							RPRNRpcDriverInfo8		Level8;
						}
					Default:
						ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" ) Unknown;
				}
			}
	}
}

//
//  DRIVER_INFO_1
//  Alignment: None
//
Struct RPRNDriverInfo1
{
	NdrPtr		NamePtr;
	Switch
	{
		Case NamePtr.ReferentID > 0:
			NdrWideString	Name;
	}
}

Table RPRNDriverInfoOSVersionTable( value )
{
	Switch( value )
	{
		Case 0x00000000: "The printer driver for Windows 95, Windows 98, and Windows Me.";
		Case 0x00000001: "The printer driver for Windows NT 3.51.";
		Case 0x00000002: "Kernel-mode printer driver for Windows NT 4.0.";
		Case 0x00000003: "User-mode printer driver for Windows 2000, Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, and Windows Server 7.";
		Default: FormatString( " Unknow Value (%u)", Value );
	}
}

//
//  DRIVER_INFO_2
//  Alignment: NdrAlign
//
Struct RPRNDriverInfo2
{
	UINT32					Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	NdrPtr					NamePtr;
	NdrPtr					EnvironmentPtr;
	NdrPtr					DriverPathPtr;
	NdrPtr					DataFilePtr;
	NdrPtr					ConfigFilePtr;
	Switch
	{
		Case NamePtr.ReferentID > 0:
			NdrWideString	Name;
	}
	Switch
	{
		Case EnvironmentPtr.ReferentID	> 0:
			NdrWideString	Environment;
	}
	Switch
	{
		Case DriverPathPtr.ReferentID > 0:
			NdrWideString	DriverPath;
	}
	Switch
	{
		Case DataFilePtr.ReferentID > 0:
			NdrWideString	DataFile;
	}
	Switch
	{
		Case ConfigFilePtr.ReferentID > 0:
			NdrWideString	ConfigFile;
	}
}

//
//	RPC_DRIVER_INFO_3
//	Alignment: NdrAlign
//
Struct RPRNRpcDriverInfo3
{
	UINT32					Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	NdrPtr					NamePtr;
	NdrPtr					EnvironmentPtr;
	NdrPtr					DriverPathPtr;
	NdrPtr					DataFilePtr;
	NdrPtr					ConfigFilePtr;
	NdrPtr					HelpFilePtr;
	NdrPtr					MonitorNamePtr;
	NdrPtr					DefaultDataTypePtr;
	UINT32					DependentFilesLength;
	NdrPtr					DependentFilesPtr;
	Switch
	{
		Case NamePtr.ReferentID > 0:
			NdrWideString	Name;
	}
	Switch
	{
		Case EnvironmentPtr.ReferentID> 0:
			NdrWideString	Environment;
	}
	Switch
	{
		Case DriverPathPtr.ReferentID > 0 :
			NdrWideString	DriverPath;
	}
	Switch
	{
		Case DataFilePtr.ReferentID > 0 :
			NdrWideString	DataFile;
	}
	Switch
	{
		Case ConfigFilePtr.ReferentID > 0 :
			NdrWideString	ConfigFile;
	}
	Switch
	{
		Case HelpFilePtr.ReferentID > 0:
			NdrWideString	HelpFile;
	}
	Switch
	{
		Case MonitorNamePtr.ReferentID > 0:
			NdrWideString	MonitorName;
	}
	Switch
	{
		Case DefaultDataTypePtr.ReferentID	> 0:
			NdrWideString	DefaultDataType;
	}
	Switch
	{
		Case DependentFilesPtr.ReferentID > 0:
			RPRNConfMultiStringArray	DependentFiles;
	}
}

//
//	RPC_DRIVER_INFO_4
//  Alignment: NdrAlign
//
Struct RPRNRpcDriverInfo4
{
	UINT32					Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	NdrPtr					NamePtr;
	NdrPtr					EnvironmentPtr;
	NdrPtr					DriverPathPtr;
	NdrPtr					DataFilePtr;
	NdrPtr					ConfigFilePtr;
	NdrPtr					HelpFilePtr;
	NdrPtr					MonitorNamePtr;
	NdrPtr					DefaultDataTypePtr;
	UINT32					DependentFilesLength;
	NdrPtr					DependentFilesPtr;
	UINT32					PreviousNamesLength;
	NdrPtr					PreviousNamesPtr;
	Switch
	{
		Case NamePtr.ReferentID > 0:
			NdrWideString	Name;
	}
	Switch
	{
		Case EnvironmentPtr.ReferentID> 0:
			NdrWideString	Environment;
	}
	Switch
	{
		Case DriverPathPtr.ReferentID > 0 :
			NdrWideString	DriverPath;
	}
	Switch
	{
		Case DataFilePtr.ReferentID > 0 :
			NdrWideString	DataFile;
	}
	Switch
	{
		Case ConfigFilePtr.ReferentID > 0 :
			NdrWideString	ConfigFile;
	}
	Switch
	{
		Case HelpFilePtr.ReferentID > 0:
			NdrWideString	HelpFile;
	}
	Switch
	{
		Case MonitorNamePtr.ReferentID > 0:
			NdrWideString	MonitorName;
	}
	Switch
	{
		Case DefaultDataTypePtr.ReferentID > 0:
			NdrWideString	DefaultDataType;
	}
	Switch
	{
		Case DependentFilesPtr.ReferentID > 0:
			RPRNConfMultiStringArray	DependentFiles;
	}
	Switch
	{
		Case PreviousNamesPtr.ReferentID > 0:
			RPRNConfMultiStringArray	PreviousNames;
	}
}

//
//	RPC_DRIVER_INFO_6
//  Alignment: Align8
//
Struct RPRNRpcDriverInfo6
{
	UINT32					Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	NdrPtr					NamePtr;
	NdrPtr					EnvironmentPtr;
	NdrPtr					DriverPathPtr;
	NdrPtr					DataFilePtr;
	NdrPtr					ConfigFilePtr;
	NdrPtr					HelpFilePtr;
	NdrPtr					MonitorNamePtr;
	NdrPtr					DefaultDataTypePtr;
	UINT32					DependentFilesLength;
	NdrPtr					DependentFilesPtr;
	UINT32					PreviousNamesLength;
	NdrPtr					PreviousNamesPtr;
	FILETIME				DriverDate;
	Align8					Pad;
	UINT64					DriverVersion;
	NdrPtr					MfgNamePtr;
	NdrPtr					OEMUrlPtr;
	NdrPtr					HardwareIDPtr;
	NdrPtr					ProviderPtr;
	Switch
	{
		Case NamePtr.ReferentID > 0:
			NdrWideString	Name;
	}
	Switch
	{
		Case EnvironmentPtr.ReferentID> 0:
			NdrWideString	Environment;
	}
	Switch
	{
		Case DriverPathPtr.ReferentID > 0 :
			NdrWideString	DriverPath;
	}
	Switch
	{
		Case DataFilePtr.ReferentID > 0 :
			NdrWideString	DataFile;
	}
	Switch
	{
		Case ConfigFilePtr.ReferentID > 0 :
			NdrWideString	ConfigFile;
	}
	Switch
	{
		Case HelpFilePtr.ReferentID > 0:
			NdrWideString	HelpFile;
	}
	Switch
	{
		Case MonitorNamePtr.ReferentID > 0:
			NdrWideString	MonitorName;
	}
	Switch
	{
		Case DefaultDataTypePtr.ReferentID > 0:
			NdrWideString	DefaultDataType;
	}
	Switch
	{
		Case DependentFilesPtr.ReferentID > 0:
			RPRNConfMultiStringArray	DependentFiles;
	}
	Switch
	{
		Case PreviousNamesPtr.ReferentID > 0:
			RPRNConfMultiStringArray	PreviousNames;
	}
	Switch
	{
		Case MfgNamePtr.ReferentID > 0:
			NdrWideString	MfgName;
	}
	Switch
	{
		Case OEMUrlPtr.ReferentID > 0:
			NdrWideString	OEMUrl;
	}
	Switch
	{
		Case HardwareIDPtr.ReferentID > 0:
			NdrWideString	HardwareID;
	}
	Switch
	{
		Case ProviderPtr.ReferentID > 0:
			NdrWideString	Provider;
	}
}

//
//	RPC_DRIVER_INFO_8
//	Alignment: Align8
//
Struct RPRNRpcDriverInfo8
{
	UINT32											Version = FormatString( "%s", RPRNDriverInfoOSVersionTable( this ) );
	NdrPtr											NamePtr;
	NdrPtr											EnvironmentPtr;
	NdrPtr											DriverPathPtr;
	NdrPtr											DataFilePtr;
	NdrPtr											ConfigFilePtr;
	NdrPtr											HelpFilePtr;
	NdrPtr											MonitorNamePtr;
	NdrPtr											DefaultDataTypePtr;
	UINT32											DependentFilesLength;
	NdrPtr											DependentFiles1Ptr;
	UINT32											PreviousNamesLength;
	NdrPtr											PreviousNamesPtr;
	FILETIME										DriverDate;
	Align8											Pad1;
	UINT64											DriverVersion;
	NdrPtr											MfgNamePtr;
	NdrPtr											OEMUrlPtr;
	NdrPtr											HardwareIDPtr;
	NdrPtr											ProviderPtr;
	NdrPtr											PrintProcessorPtr;
	NdrPtr											VendorSetupPtr;
	UINT32											ColorProfilesLength;
	NdrPtr											ColorProfilesPtr;
	NdrPtr											InfPathPtr;
	RPRNDriverInfoPrinterDriverAttributesFlags		PrinterDriverAttributes;
	UINT32											CoreDependenciesLength;
	NdrPtr											CoreDriverDependenciesPtr;
	FILETIME										MinInboxDriverVerDate;
	Align8											Pad2;
	UINT64											MinInboxDriverVerVersion;
	Switch
	{
		Case NamePtr.ReferentID > 0:
			NdrWideString	Name;
	}
	Switch
	{
		Case EnvironmentPtr.ReferentID > 0:
			NdrWideString	Environment;
	}
	Switch
	{
		Case DriverPathPtr.ReferentID > 0 :
			NdrWideString	DriverPath;
	}
	Switch
	{
		Case DataFilePtr.ReferentID > 0 :
			NdrWideString	DataFile;
	}
	Switch
	{
		Case ConfigFilePtr.ReferentID > 0 :
			NdrWideString	ConfigFile;
	}
	Switch
	{
		Case HelpFilePtr.ReferentID > 0:
			NdrWideString	HelpFile;
	}
	Switch
	{
		Case MonitorNamePtr.ReferentID > 0:
			NdrWideString	MonitorName;
	}
	Switch
	{
		Case DefaultDataTypePtr.ReferentID > 0:
			NdrWideString	DefaultDataType;
	}
	Switch
	{
		Case DependentFiles1Ptr.ReferentID > 0:
			RPRNConfMultiStringArray	DependentFiles;
	}
	Switch
	{
		Case PreviousNamesPtr.ReferentID > 0:
			RPRNConfMultiStringArray	PreviousNames;
	}
	Switch
	{
		Case MfgNamePtr.ReferentID > 0:
			NdrWideString	MfgName;
	}
	Switch
	{
		Case OEMUrlPtr.ReferentID > 0:
			NdrWideString	OEMUrl;
	}
	Switch
	{
		Case HardwareIDPtr.ReferentID > 0:
			NdrWideString	HardwareID;
	}
	Switch
	{
		Case ProviderPtr.ReferentID > 0:
			NdrWideString	Provider;
	}
	Switch
	{
		Case PrintProcessorPtr.ReferentID > 0:
			NdrWideString	PrintProcessor;
	}
	Switch
	{
		Case VendorSetupPtr.ReferentID > 0:
			NdrWideString	VendorSetup;
	}
	Switch
	{
		Case ColorProfilesPtr.ReferentID > 0:
			RPRNConfMultiStringArray	ColorProfiles;
	}
	Switch
	{
		Case InfPathPtr.ReferentID > 0:
			NdrWideString	InfPath;
	}
	Switch
	{
		Case CoreDriverDependenciesPtr.ReferentID > 0:
			RPRNConfMultiStringArray	CoreDriverDependencies;
	}
}

//------- End of DriverInfo structs --------

//------- Start of FormInfo structs -------
//
//	FORM_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNFormContainer
{
	UINT32				Level;
	NdrAlign			Pad;
	RPRNFormInfoUnion	FormInfo;
}

//
//	__nested_FormInfo__FORM_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNFormInfoUnion
{
	UINT32		SwitchValue;
	NdrPtr		FormInfoPtr;
	Switch
	{
		Case FormInfoPtr.ReferentID > 0:
			Struct
			{
				Switch( SwitchValue )
				{
					Case 1:
						RPRNFormInfo1	FormInfo1;
					Case 2:
						RPRNRpcFormInfo2	FormInfo2;
					Default:
						ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" )	Unknown;
				}
			}
	}
}

//
//	FORM_INFO_1
//	Alignment: NdrAlign
//
Struct RPRNFormInfo1
{
	UINT32		Flags = RPRNFormInfoFlagsTable( this );
	NdrPtr		NamePtr;
	RPRNSize	Size;
	RPRNRectl	ImageableArea;
	Switch
	{
		Case NamePtr.ReferentId > 0:
			NdrWideString	Name;
	}
}

Table RPRNRpcFormInfo2StringTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "STRING_NONE - Use the Default display name, a string that is pointed to by the pName member. No localized display name exists.";
		Case 0x00000002: "STRING_MUIDLL - Load the form name from the library of string resources that is identified by the pMuiDll member. The dwResourceId member specifies the ID of the form name string in that library.";
		Case 0x00000004: "STRING_LANGPAIR - Use the form name, a string that is pointed to by the pDisplayName member, and the language that is identified by the wLangID member.";
		Default: "Unknown Value";
	}
}

//
//	RPC_FORM_INFO_2
//	Alignment: NdrAlign
//
Struct RPRNRpcFormInfo2
{
	UINT32			Flags = RPRNFormInfoFlagsTable( this );
	NdrPtr			NamePtr;
	RPRNSize	  	Size;
	RPRNRectl	 	ImageableArea;
	NdrPtr			KeywordPtr;
	UINT32			StringType = RPRNRpcFormInfo2StringTypeTable(this);
	NdrPtr			MuiDllPtr;
	UINT32			ResourceId;
	NdrPtr			DisplayNamePtr;
	InetLangID		LangID;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	Switch
	{
		Case NamePtr.ReferentId > 0:
			NdrWideString	Name;
	}
	Switch
	{
		Case KeywordPtr.ReferentId > 0:
			NdrString		Keyword;
	}
	Switch
	{
		Case MuiDllPtr.ReferentId > 0:
			NdrWideString	MuiDll;
	}
	Switch
	{
		Case DisplayNamePtr.ReferentId > 0:
			NdrWideString	DisplayName;
	}
}

//------- End of FormInfo structs ------

//------ Start of JobInfo structs ------

//
//	JOB_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNJobContainer = RPRNJobInfoTable( Level )
{
	UINT32				Level;
	NdrAlign			Pad;
	RPRNJobInfoUnion	JobInfo;
}

//
//	__nested_JobInfo__JOB_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNJobInfoUnion
{
	UINT32	SwitchValue;
	NdrPtr	JobInfoPtr;
	Switch
	{
		Case JobInfoPtr.ReferentID > 0:
			Struct
			{
				Switch( SwitchValue )
				{
					Case 1:
						RPRNJobInfo1		Level1;
					Case 2:
						RPRNJobInfo2		Level2;
					Case 3:
						RPRNJobInfo3		Level3;
					Case 4:
						RPRNJobInfo4		Level4;
					Default:
						ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" ) Unknown;
				}
			}
	}
}

Struct RPRNJobContainerPtr
{
	NdrPtr	JobContainerPtr;
	Switch
	{
		Case JobContainerPtr.ReferentID != 0:
			RPRNJobContainer		JobContainer;
	}
}

//
//	JOB_INFO_1
//	Alignment: NdrAlign
//
Struct RPRNJobInfo1
{
	UINT32							JobId;
	NdrPtr							PrinterNamePtr;
	NdrPtr							MachineNamePtr;
	NdrPtr							UserNamePtr;
	NdrPtr							DocumentPtr;
	NdrPtr							DatatypePtr;
	NdrPtr							StatusPtr;
	RPRNJobStatusFlags				Status;
	UINT32							Priority;
	UINT32							Position;
	UINT32							TotalPages;
	UINT32							PagesPrinted;
	SystemTime						Submitted;
	Switch
	{
		Case PrinterNamePtr.ReferentId > 0:
			NdrWideString		PrinterName;
	}
	Switch
	{
		Case MachineNamePtr.ReferentId  > 0:
			NdrWideString		MachineName;
	}
	Switch
	{
		Case UserNamePtr.ReferentId  > 0:
			NdrWideString		UserName;
	}
	Switch
	{
		Case DocumentPtr.ReferentId > 0:
			NdrWideString		Document;
	}
	Switch
	{
		Case DatatypePtr.ReferentId > 0:
			NdrWideString		Datatype;
	}
	Switch
	{
		Case StatusPtr.ReferentId > 0:
			NdrWideString		Status;
	}
}

//
//	JOB_INFO_2
//	Alignment: NdrAlign
//
Struct RPRNJobInfo2
{
	UINT32							JobId;
	NdrPtr							PrinterNamePtr;
	NdrPtr							MachineNamePtr;
	NdrPtr							UserNamePtr;
	NdrPtr							DocumentPtr;
	NdrPtr							NotifyNamePtr;
	NdrPtr							DatatypePtr;
	NdrPtr							PrintProcessorPtr;
	NdrPtr							ParametersPtr;
	NdrPtr							DriverNamePtr;
	NdrPtr							DevModePtr; //ULONG_PTR, used for pointer precision not a pointer actually.
	NdrPtr							StatusPtr;
	NdrPtr							SecurityDescriptorPtr; //ULONG_PTR, used for pointer precision not a pointer actually.
	RPRNJobStatusFlags				Status;
	UINT32							Priority;
	UINT32							Position;
	UINT32							StartTime;
	UINT32							UntilTime;
	UINT32							TotalPages;
	UINT32							Size;
	SystemTime						Submitted;
	UINT32							Time;
	UINT32							PagesPrinted;
	Switch
	{
		Case PrinterNamePtr.ReferentId > 0:
			NdrWideString		PrinterName;
	}
	Switch
	{
		Case MachineNamePtr.ReferentId > 0:
			NdrWideString		MachineName;
	}
	Switch
	{
		Case UserNamePtr.ReferentId > 0:
			NdrWideString		UserName;
	}
	Switch
	{
		Case DocumentPtr.ReferentId > 0:
			NdrWideString		Document;
	}
	Switch
	{
		Case NotifyNamePtr.ReferentId > 0:
			NdrWideString		NotifyName;
	}
	Switch
	{
		Case DatatypePtr.ReferentId > 0:
			NdrWideString		Datatype;
	}
	Switch
	{
		Case PrintProcessorPtr.ReferentId > 0:
			NdrWideString		PrintProcessor;
	}
	Switch
	{
		Case ParametersPtr.ReferentId > 0:
			NdrWideString		Parameters;
	}
	Switch
	{
		Case DriverNamePtr.ReferentId > 0:
			NdrWideString		DriverName;
	}
	Switch
	{
		Case StatusPtr.ReferentId > 0:
			NdrWideString		Status;
	}
}

//
//	JOB_INFO_3
//	Alignment: Align4
//
Struct RPRNJobInfo3
{
	UINT32		JobId;
	UINT32		NextJobId;
	UINT32		Reserved;
}

//
//	JOB_INFO_4
//	Alignment: NdrAlign
//
Struct RPRNJobInfo4
{
	UINT32						JobId;
	NdrPtr						PrinterNamePtr;
	NdrPtr						MachineNamePtr;
	NdrPtr						UserNamePtr;
	NdrPtr						DocumentPtr;
	NdrPtr						NotifyNamePtr;
	NdrPtr 						DatatypePtr;
	NdrPtr 						PrintProcessorPtr;
	NdrPtr 						ParametersPtr;
	NdrPtr 						DriverNamePtr;
	NdrPtr 						DevModePtr;//ULONG_PTR, used for pointer precision not a pointer actually.
	NdrPtr 						StatusPtr;
	NdrPtr 						SecurityDescriptorPtr;//ULONG_PTR, used for pointer precision not a pointer actually.
	RPRNJobStatusFlags			Status;
	UINT32 						Priority;
	UINT32 						Position;
	UINT32 						StartTime;
	UINT32 						UntilTime;
	UINT32 						TotalPages;
	UINT32						Size;
	SYSTEMTIME					Submitted;
	UINT32						Time;
	UINT32						PagesPrinted;
	INT32						SizeHigh = FormatString( "Total Job Size Bytes = %u", Size + (this * 4294967296) );

	Switch
	{
		Case PrinterNamePtr.ReferentId > 0:
			NdrWideString		PrinterName;
	}
	Switch
	{
		Case MachineNamePtr.ReferentId > 0:
			NdrWideString		MachineName;
	}
	Switch
	{
		Case UserNamePtr.ReferentId > 0:
			NdrWideString		UserName;
	}
	Switch
	{
		Case DocumentPtr.ReferentId > 0:
			NdrWideString		Document;
	}
	Switch
	{
		Case NotifyNamePtr.ReferentId  > 0:
			NdrWideString		NotifyName;
	}
	Switch
	{
		Case DatatypePtr.ReferentId  > 0:
			NdrWideString		Datatype;
	}
	Switch
	{
		Case PrintProcessorPtr.ReferentId  > 0:
			NdrWideString		PrintProcessor;
	}
	Switch
	{
		Case ParametersPtr.ReferentId  > 0:
			NdrWideString		Parameters;
	}
	Switch
	{
		Case DriverNamePtr.ReferentId  > 0:
			NdrWideString		DriverName;
	}
	Switch
	{
		Case StatusPtr.ReferentId > 0:
			NdrWideString	Status;
	}
}

//----------- End of JobInfo structs ----------

//-------- Start of MonitorInfo structs -------

//
//	MONITOR_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNMonitorContainer
{
	UINT32					Level;
	NdrAlign				Pad;
	RPRNMonitorInfoUnion	MonitorInfo;
}

//
//	__nested_MonitorInfo__MONITOR_CONTAINER
//
Struct RPRNMonitorInfoUnion
{
	UINT32	SwitchValue;
	NdrPtr	MonitorInfoPtr;
	Switch
	{
		Case MonitorInfoPtr.ReferentId > 0:
			Struct
			{
				Switch( SwitchValue )
				{
					Case 1:
						RPRNMonitorInfo1 MonitorInfo1;
					Case 2:
						RPRNMonitorInfo2 MonitorInfo2;
					Default:
						ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" ) Unknown;
				}
			}
	}
}

//
//	MONITOR_INFO_1
//	Alignment: None
//
Struct RPRNMonitorInfo1
{
	NdrPtr					NamePtr;
	Switch
	{
		Case NamePtr.ReferentID > 0:
			NdrWideString	Name;
	}
}

//
//	MONITOR_INFO_2
//	Alignment: None
//
Struct RPRNMonitorInfo2
{
	NdrPtr		NamePtr;
	NdrPtr		EnvironmentPtr;
	NdrPtr		DLLNamePtr;
	Switch
	{
		Case NamePtr.ReferentId > 0:
			NdrWideString	Name;
	}
	Switch
	{
		Case EnvironmentPtr.ReferentId > 0:
			NdrWideString	Environment;
	}
	Switch
	{
		Case DLLNamePtr.ReferentId > 0:
			NdrWideString	DLLName;
	}
}

//--------- End of MonitorInfo structs --------

//--------- Start of PortInfo structs ---------

//
//	PORT_CONTAINER
//
Struct RPRNPortContainer
{
	UINT32						Level;
	NdrAlign					Pad;
	RPRNPortInfoUnion			PortInfo;
}

//
//	__nested_PortInfo__PORT_CONTAINER
//
Struct RPRNPortInfoUnion
{
	UINT32	SwitchValue;
	NdrPtr	PortInfoPtr;
	Switch
	{
		Case PortInfoPtr.ReferentId > 0:
			Struct
			{
				Switch( SwitchValue & 0x00FFFFFF )
				{
					Case 1: RPRNPortInfo1		PortInfo1;
					Case 2: RPRNPortInfo2		PortInfo2;
					Case 3: RPRNPortInfo3		PortInfo3;
					Case 0x00FFFFFF: RPRNPortInfoFF		PortInfoFF;
					Default:
						ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" ) Unknown;
				}
			}
	}
}

Struct RPRNPortInfo1
{
	NdrPtr				PortNamePtr;
	Switch
	{
		Case PortNamePtr.ReferentID > 0:
			NdrWideString	PortName;
	}
}

Struct RPRNPortInfo2
{
	NdrPtr						PortNamePtr;
	NdrPtr						MonitorNamePtr;
	NdrPtr						DescriptionPtr;
	RPRNPortInfo2PortTypeFlags 	PortType;
	UINT32						Reserved;
	Switch
	{
		Case PortNamePtr.ReferentId > 0 :
			NdrWideString	PortName;
	}
	Switch
	{
		Case MonitorNamePtr.ReferentId > 0:
			NdrWideString	MonitorName;
	}
	Switch
	{
		Case DescriptionPtr.ReferentId > 0:
			NdrWideString	Description;
	}
}

Table RPRNPortStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "PORT_STATUS_CLEAR - Clears the printer port status";
		Case 0x00000001: "PORT_STATUS_OFFLINE - Port's printer is offline";
		Case 0x00000002: "PORT_STATUS_PAPER_JAM - Port's printer has a paper jam";
		Case 0x00000003: "PORT_STATUS_PAPER_OUT - Port's printer is out of paper";
		Case 0x00000004: "PORT_STATUS_OUTPUT_BIN_FULL - Port's printer's output bin is full";
		Case 0x00000005: "PORT_STATUS_PAPER_PROBLEM - Port's printer has a paper problem";
		Case 0x00000006: "PORT_STATUS_NO_TONER - Port's printer is out of toner";
		Case 0x00000007: "PORT_STATUS_DOOR_OPEN - Door of the port's printer is open";
		Case 0x00000008: "PORT_STATUS_USER_INTERVENTION - Port's printer requires user intervention";
		Case 0x00000009: "PORT_STATUS_OUT_OF_MEMORY - Port's printer is out of memory";
		Case 0x0000000A: "PORT_STATUS_TONER_LOW - Port's printer is low on toner";
		Case 0x0000000B: "PORT_STATUS_WARMING_UP - Port's printer is warming up";
		Case 0x0000000C: "PORT_STATUS_POWER_SAVE - Port's printer is in a powe r- conservation mode";
		Default: FormatString( "Unknown Value (%u) ", Value );
	}
}

Table RPRNPortSeverityTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "PORT_STATUS_TYPE_ERROR - Indicates an error";
		Case 0x00000002: "PORT_STATUS_TYPE_WARNING - A warning";
		Case 0x00000003: "PORT_STATUS_TYPE_INFO - Informational";
		Default: FormatString( "Unknown Value (%u) ", Value );
	}
}

Struct RPRNPortInfo3
{
	UINT32				Status = RPRNPortStatusTable( this );
	NdrPtr				StatusDescriptionPtr;
	UINT32				Severity = RPRNPortSeverityTable( this );
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	Switch
	{
		Case StatusDescriptionPtr.ReferentID > 0:
			NdrWideString	Status;
	}
}

Struct RPRNPortInfoFF
{
	NdrPtr				NamePtr;
	UINT32				CbMonitorData;
	NdrPtr				MonitorDataPtr;
	Switch
	{
		Case NamePtr.ReferentID > 0:
			NdrWideString	PortName;
	}
}

//---------- End of PortInfo structs ----------

//
//	PORT_VAR_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNPortVarContainer
{
	UINT32 		MonitorData;
	NdrPtr		MonitorDataPtr;
	Switch
	{
		Case MonitorDataPtr.ReferentID > 0:
			Struct
			{
				NdrConformant		Size;
				Switch
				{
					Case Size.MaxCount > 0:
						BLOB( Size.MaxCount )		MonitorData;
				}
			}
	}
}

//------ Start of PrinterInfo structs ------

//
//	PRINTER_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNPrinterContainer
{
	UINT32 Level;
	NdrAlign Pad;
	RPRNPrinterInfoUnion PrinterInfo;
}

//
//	__nested_PrinterInfo__PRINTER_CONTAINER
//	Alignment: NDR
//
Struct RPRNPrinterInfoUnion
{
	UINT32		SwitchValue;
	NdrPtr		PrinterInfoPtr;
	Switch
	{
		Case PrinterInfoPtr.ReferentID > 0:
			Struct
			{
				Switch( SwitchValue )
				{
					Case 0:
						RPRNPrinterInfoStress		PrinterInfoStress;
					Case 1:
						RPRNPrinterInfo1			PrinterInfo1;
					Case 2:
						RPRNPrinterInfo2			PrinterInfo2;
					Case 3:
						RPRNPrinterInfo3			PrinterInfo3;
					Case 4:
						RPRNPrinterInfo4			PrinterInfo4;
					Case 5:
						RPRNPrinterInfo5			PrinterInfo5;
					Case 6:
						RPRNPrinterInfo6			PrinterInfo6;
					Case 7:
						RPRNPrinterInfo7			PrinterInfo7;
					Case 8:
						RPRNPrinterInfo8			PrinterInfo8;
					Case 9:
						RPRNPrinterInfo9			PrinterInfo9;
					Default:
						ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" ) Unknown;
				}
			}
	}
}

//
//	_PRINTER_INFO_STRESS
//	Alignment: None
//
Struct RPRNPrinterInfoStress
{
	NdrPtr 			PrinterNamePtr;
	NdrPtr 			ServerNamePtr;
	UINT32 			Jobs;
	UINT32 			TotalJobs;
	UINT32 			TotalBytes;
	SYSTEMTIME 		StUpTime;
	UINT32 			MaxcRef;
	UINT32 			TotalPagesPrinted;
	UINT32 			GetVersion;
	UINT32 			FreeBuild;
	UINT32 			Spooling;
	UINT32 			MaxSpooling;
	UINT32 			Ref;
	UINT32 			ErrorOutOfPaper;
	UINT32 			ErrorNotReady;
	UINT32 			JobError;
	UINT32 			NumberOfProcessors;
	UINT32 			ProcessorType;
	UINT32 			HighPartTotalBytes = FormatString( "Total Bytes Printed = %u", TotalBytes + (this * 4294967296) );
	UINT32 			ChangeID;
	UINT32 			LastError;
	UINT32 			Status;
	UINT32 			EnumerateNetworkPrinters;
	UINT32 			AddNetPrinters;
	UINT16 			WProcessorArchitecture;
	UINT16 			WProcessorLevel;
	UINT32 			RefIC;
	UINT32 			Reserved2;
	UINT32 			Reserved3;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	Switch
	{
		Case PrinterNamePtr.ReferentId > 0:
			NdrWideString	PrinterName;
	}
	Switch
	{
		Case ServerNamePtr.ReferentId > 0:
			NdrWideString	ServerName;
	}
}


//
//	_PRINTER_INFO_1
//	Alignment: NdrAlign
//
Struct RPRNPrinterInfo1
{
	UINT32 Flags;
	NdrPtr DescriptionPtr;
	NdrPtr NamePtr;
	NdrPtr CommentPtr;
	Switch
	{
		Case DescriptionPtr.ReferentID > 0:
			NdrWideString	Description;
	}
	Switch
	{
		Case NamePtr.ReferentID > 0:
			NdrWideString	Name;
	}
	Switch
	{
		Case CommentPtr.ReferentID > 0:
			NdrWideString	Comment;
	}
}

//
//	PRINTER_INFO_2
//	Alignment: None
//
Struct RPRNPrinterInfo2
{
	NdrPtr								ServerNamePtr;
	NdrPtr								PrinterNamePtr;
	NdrPtr								ShareNamePtr;
	NdrPtr								PortNamePtr;
	NdrPtr								DriverNamePtr;
	NdrPtr								CommentPtr;
	NdrPtr								LocationPtr;
	NdrPtr								DevModePtr; //ULONG_PTR, used for pointer precision not a pointer actually.
	NdrPtr								SepFilePtr;
	NdrPtr								PrintProcessorPtr;
	NdrPtr								DatatypePtr;
	NdrPtr								ParametersPtr;
	NdrPtr								SecurityDescriptorPtr; //ULONG_PTR, used for pointer precision not a pointer actually.
	RPRNPrinterAttributeFlags			Attributes;
	UINT32								Priority;
	UINT32								DefaultPriority;
	UINT32								StartTime;
	UINT32								UntilTime;
	RPRNPrinterStatusFlags				Status;
	UINT32								Jobs;
	UINT32								AveragePPM;
	Switch
	{
		Case ServerNamePtr.ReferentID > 0:
			NdrWideString	ServerName;
	}
	Switch
	{
		Case PrinterNamePtr.ReferentID > 0:
			NdrWideString	PrinterName;
	}
	Switch
	{
		Case ShareNamePtr.ReferentID > 0:
			NdrWideString	ShareName;
	}
	Switch
	{
		Case PortNamePtr.ReferentID > 0:
			NdrWideString	PortName;
	}
	Switch
	{
		Case DriverNamePtr.ReferentID > 0:
			NdrWideString	DriverName;
	}
	Switch
	{
		Case CommentPtr.ReferentID > 0:
			NdrWideString	Comment;
	}
	Switch
	{
		Case LocationPtr.ReferentID > 0:
			NdrWideString	Location;
	}
	Switch
	{
		Case SepFilePtr.ReferentID	> 0:
			NdrWideString	SepFile;
	}
	Switch
	{
		Case PrintProcessorPtr.ReferentID > 0:
			NdrWideString	PrintProcessor;
	}
	Switch
	{
		Case DatatypePtr.ReferentID > 0:
			NdrWideString	Datatype;
	}
	Switch
	{
		Case ParametersPtr.ReferentID > 0:
			NdrWideString	Parameters;
	}
}

//
//	PRINTER_INFO_3
//	Alignment: None
//
Struct RPRNPrinterInfo3
{
	NdrPtr SecurityDescriptorPtr; //ULONG_PTR, used for pointer precision not a pointer actually.
}

//
//	PRINTER_INFO_4
//	Alignment: None
//
Struct RPRNPrinterInfo4
{
	NdrPtr								PrinterNamePtr;
	NdrPtr 								ServerNamePtr;
	RPRNPrinterAttributeFlags			Attributes;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	Switch
	{
		Case PrinterNamePtr.ReferentID > 0:
			NdrWideString	PrinterName;
	}
	Switch
	{
		Case ServerNamePtr.ReferentID > 0:
			NdrWideString	ServerName;
	}
}

//
//	PRINTER_INFO_5
//	Alignment: None
//
Struct RPRNPrinterInfo5
{
	NdrPtr								PrinterNamePtr;
	NdrPtr								PortNamePtr;
	RPRNPrinterAttributeFlags		 	Attributes;
	UINT32								DeviceNotSelectedTimeout = FormatString( "%u Milliseconds", this );
	UINT32								TransmissionRetryTimeout = FormatString( "%u Milliseconds", this );
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	Switch
	{
		Case PrinterNamePtr.ReferentID > 0:
			NdrWideString	PrinterName;
	}
	Switch
	{
		Case PortNamePtr.ReferentID > 0:
			NdrWideString	PortName;
	}
}

//
//	PRINTER_INFO_6
//	Alignment: Align4
//
Struct RPRNPrinterInfo6
{
	RPRNPrinterStatusFlags			Status;
}

//
//	PRINTER_INFO_7
//	Alignment: None
//
Struct RPRNPrinterInfo7
{
	NdrPtr							ObjectGUIDPtr;
	RPRNPrinterInfoActionFlags		Action;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	Switch
	{
		Case ObjectGUIDPtr.ReferentID > 0:
			NdrWideString	ObjectGUID;
	}
}

//
//	PRINTER_INFO_8
//	Alignment: None
//
Struct RPRNPrinterInfo8
{
	NdrPtr					DevModePtr; //ULONG_PTR, used for pointer precision not a pointer actually.
}

//
//	PRINTER_INFO_9
//	Alignment: None
//
Struct RPRNPrinterInfo9
{
	NdrPtr					DevModePtr; //ULONG_PTR, used for pointer precision not a pointer actually.
}

//------- End of PrinterInfo structs -------

//--------- Start of BiDi structs ----------

//
//	RPC_BIDI_REQUEST_CONTAINER
//	Alignment: None
//
Struct RPRNRpcBidiRequestContainer
{
	NdrConformant				  RequestContainerConf;
	// The Version field MUST be 0x00000001	
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad1;
	}
	UINT32 						Version = MustBeSetToTable(this, "1");
	UINT32 						Flags;
	UINT32 						Count;
	[ Property.RPRNContainerCount = 0, MaxLoopCount = RequestContainerConf.MaxCount ]
	while[ Property.RPRNContainerCount < RequestContainerConf.MaxCount ]
	{
		[ Property.RPRNContainerCount = Property.RPRNContainerCount + 1 ]
		RPRNRpcBidiRequestData Data;
	}
	[ Property.RPRNContainerRefCount = 0, MaxLoopCount = RequestContainerConf.MaxCount ]
	while[ Property.RPRNContainerRefCount < RequestContainerConf.MaxCount ]
	{
		[ Property.RPRNContainerRefCount = Property.RPRNContainerRefCount + 1 ]
		RPRNRpcBidiRequestDataRef DataRef;
	}
}

Struct RPRNRpcBidiRequestDataRef
{
	Switch
	{
		Case Property.RPRNSchemaPtr$[ Property.RPRNContainerRefCount ] > 0:
			NdrWideString	Schema;
	}
	RPRNNRpcBidiDataUnionRef BidiDataRef;
}

//
//	RPC_BIDI_REQUEST_DATA
//	Alignment: None
//
Struct RPRNRpcBidiRequestData
{
	NdrAlign			Pad;
	UINT32				ReqNumber;
	[ Property.RPRNSchemaPtr$[ Property.RPRNContainerCount ] = this.ReferentID ]
	NdrPtr				SchemaPtr;
	RPRNRpcBidiData		Data;
}

//
//	RPC_BIDI_RESPONSE_CONTAINER
//	Alignment: None
//
Struct RPRNRpcBidiResponseContainer
{
	NdrConformant				ResponseContainerConf;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad1;
	}
	UINT32 						Version;
	UINT32 						Flags;
	UINT32 						Count;
	[ Property.RPRNContainerCount = 0, MaxLoopCount = ResponseContainerConf.MaxCount ]
	while[ Property.RPRNContainerCount < ResponseContainerConf.MaxCount ]
	{
		[ Property.RPRNContainerCount = Property.RPRNContainerCount + 1 ]
		RPRNRpcBidiResponseData Data;
	}
	[ Property.RPRNContainerRefCount = 0, MaxLoopCount = ResponseContainerConf.MaxCount ]
	while[ Property.RPRNContainerRefCount < ResponseContainerConf.MaxCount ]
	{
		[ Property.RPRNContainerRefCount = Property.RPRNContainerRefCount + 1 ]
		RPRNRpcBidiRequestDataRef DataRef;
	}
}

Struct RPRNRpcBidiResponseContainerPtr
{
	NdrPtr RpcBidiResponseContainerPtr;
	Switch
	{
		Case RpcBidiResponseContainerPtr.ReferentID > 0:
			RPRNRpcBidiResponseContainer RpcBidiResponseContainer;
	}
}

//
//	RPC_BIDI_RESPONSE_DATA
//	Alignment: None
//
Struct RPRNRpcBidiResponseData
{
	NdrAlign			Pad;
	UINT32				Result;
	UINT32				ReqNumber;
	[ Property.RPRNSchemaPtr$[ Property.RPRNContainerCount ] = this.ReferentID ]
	NdrPtr				SchemaPtr;
	RPRNRpcBidiData		Data;
}


Table RPRNBidiTypeTable( Value )
{
	Switch( Value )
	{
		Case 0: "BIDI_NULL - No bidirectional data";
		Case 1: "BIDI_INT - Bidirectional data is an integer";
		Case 2: "BIDI_FLOAT - Bidirectional data is a floating-point number";
		Case 3: "BIDI_BOOL - Bidirectional data is a boolean Value";
		Case 4: "BIDI_STRING - Bidirectional data is a string";
		Case 5: "BIDI_TEXT - Bidirectional data is text data";
		Case 6: "BIDI_ENUM - Bidirectional data is an enumeration";
		Case 7: "BIDI_BLOB - Bidirectional data is a data blob";
		Default: FormatString( "Unknown Value (%u) ", Value );
	}
}

//
//	RPC_BIDI_DATA
//
Struct RPRNRpcBidiData
{
	UINT32					BidiType = FormatString( "%u = %s", this, RPRNBidiTypeTable( this ) );	
	RPRNNRpcBidiDataUnion 	BidiData;
}

//
//	__nested_u__RPC_BIDI_DATA
//
Struct RPRNNRpcBidiDataUnion
{
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	UINT32 SwitchValue;
	NdrAlign Pad1;
	Switch( SwitchValue )
	{
		Case 0:
			Struct
			{
				INT32					DataNull;
				Switch
				{
					case Property.MSRPCNdr64:
					Align8 pad;
				}
			}
		Case 1:
			Struct
			{
				INT32					DataInt;
				Switch
				{
					case Property.MSRPCNdr64:
					Align8 pad;
				}
			}
		Case 2:
			Struct
			{
				FLOAT					DataFloat;
				Switch
				{
					case Property.MSRPCNdr64:
					Align8 pad;
				}
			}
			
		Case 3:
			Struct
			{
				BOOL					 DataBool;
				Switch
				{
					case Property.MSRPCNdr64:
					Align8 pad;
				}

			}
			
		Case 4:
			[ Property.DataStringPtr$[ Property.RPRNContainerCount ] = this.ReferentID ]
			NdrPtr				   DataStringPtr;
		Case 5:
			[ Property.DataTextPtr$[ Property.RPRNContainerCount ] = this.ReferentID ]
			NdrPtr 				  DataTextPtr;
		Case 6:
			[ Property.DataEnumPtr$[ Property.RPRNContainerCount ] = this.ReferentID ]
			NdrPtr				   DataEnumPtr;
		Case 7:
			[ Property.BiDataPtr$[ Property.RPRNContainerCount ] = this.StringPtr.ReferentID ]
			RPRNRpcBinaryContainer   BiData;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" ) Unknown;
	}
}

Struct RPRNNRpcBidiDataUnionRef
{
	Switch
	{
		Case Property.DataStringPtr$[ Property.RPRNContainerRefCount ] > 0:
			NdrWideString	DataString;
	}
	Switch
	{
		Case Property.DataTextPtr$[ Property.RPRNContainerRefCount ]> 0:
			NdrWideString	DataText;
	}
	Switch
	{
		Case Property.DataEnumPtr$[ Property.RPRNContainerRefCount ]> 0:
			NdrWideString	DataEnum;
	}
	Switch
	{
		Case Property.BiDataPtr$[ Property.RPRNContainerRefCount ] > 0:
			Struct
			{
				NdrConformant			Size;
				Blob( Size.MaxCount)	String;
			}
	}
}

//
//	_RPC_BINARY_CONTAINER
//Alignment:NdrAlign
//
Struct RPRNRpcBinaryContainer
{

	UINT32			CbBuf;
	NDrPtr			StringPtr;
	Switch
	{
		Case StringPtr.ReferentID > 0 :
			Struct
			{
				NdrConformant			Size;
				Blob( Size.MaxCount)	String;
			}
	}
}

//---------- End of BiDi structs -----------

//
//	SECURITY_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNSecurityContainer
{
	UINT32		BufferSize;
	NdrPtr		SecurityPtr;
	Switch
	{
		Case SecurityPtr.ReferentID > 0:
		Struct
		{
			NdrConformant Size;
			Switch
			{
				Case Size.Maxcount > 0 :
					NdrSecurityDescriptor Security;
			}
		}
	}
}

//
//	SECURITY_CONTAINER - Pointer Part
//	Alignment: NdrAlign
//
Struct RPRNSecurityContainerHeader
{
	UINT32		BufferSize;
	[ Property.RPRNRpcV2NotifyInfoDataDataPtrCount = Property.RPRNRpcV2NotifyInfoDataDataPtrCount + (this.ReferentID ? 1 : 0) ]
	NdrPtr		SecurityPtr;
}

//------ Start of SplClientInfo structs ------

//
//	SPLClient_CONTAINER
//	Alignment: NdrAlign
//
Struct RPRNSplClientContainer
{
	UINT32							Level;
	NdrAlign						Pad;
	RPRNSplClientInfoUnion			ClientInfo;
}

//
//	__nested_ClientInfo__SPLClient_CONTAINER
//
Struct RPRNSplClientInfoUnion
{
	UINT32	SwitchValue;
	NdrPtr	ClientInfoPtr;
	Switch
	{
		Case ClientInfoPtr.ReferentID > 0:
			Struct
			{
				Switch( SwitchValue )
				{
					Case 1:
						RPRNSplClientInfo1		ClientInfo1;
					Case 3:
						RPRNSplClientInfo3		ClientInfo3;
					Default:
						ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" ) Unknown;
				}
			}
	}
}

//
//	SPLClient_INFO_1
//	Alignment: NdrAlign
//
Struct RPRNSplClientInfo1
{
	UINT32 			Size;
	NdrPtr 			MachineNamePtr;
	NdrPtr 			UserNamePtr;
	UINT32 			BuildNum;
	UINT32 			MajorVersion;
	UINT32 			MinorVersion;
	UINT16 			ProcessorArchitecture;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	Switch
	{
		Case MachineNamePtr.ReferentID > 0:
			NdrWideString MachineName;
	}
	Switch
	{
		Case UserNamePtr.ReferentID > 0:
			NdrWideString UserName;
	}
}

//
//	SPLClient_INFO_3
//	Alignment: NdrAlign
//
Struct RPRNSplClientInfo3
{
	UINT32 			Size;
	UINT32 			Flags;
	UINT32 			ReservedSize;
	NdrPtr 			MachineNamePtr;
	NdrPtr 			UserNamePtr;
	UINT32 			BuildNum;
	UINT32 			MajorVersion;
	UINT32 			MinorVersion;
	UINT16 			WProcessorArchitecture;
	Align8 Pad1;
	UINT64 			SplPrinter;
	Switch
	{
		Case MachineNamePtr.ReferentID > 0:
			NdrWideString MachineName;
	}
	Switch
	{
		Case UserNamePtr.ReferentID > 0:
			NdrWideString UserName;
	}
}

//------ end of SplClientInfo structs ------

//
//	STRING_CONTAINER - Pointer part
//	Alignment: NdrAlign
//
Struct RPRNStringContainerHeader
{
	UINT32					CbBuf;
	[ Property.RPRNRpcV2NotifyInfoDataDataPtrCount = Property.RPRNRpcV2NotifyInfoDataDataPtrCount + ( this.ReferentID ? 1 : 0 ) ]
	NdrPtr					StringPtr;
}

//
//	SYSTEMTIME_CONTAINER
//
Struct RPRNSystemtimeContainer
{
	UINT32 CbBuf;
	NdrPtr SystemTimePtr;
	Switch
	{
		Case SystemTimePtr.ReferentID > 0 :
			SystemTime        SystemTime;
	}
}

//
//	SYSTEMTIME_CONTAINER - Pointer part
//
Struct RPRNSystemtimeContainerHeader
{
	UINT32 CbBuf;
	[ Property.RPRNRpcV2NotifyInfoDataDataPtrCount = Property.RPRNRpcV2NotifyInfoDataDataPtrCount + ( this.ReferentID ? 1 : 0 ) ]
	NdrPtr SystemTimePtr;
}

//
//	_RPC_V2_NOTIFY_OPTIONS
//
Struct RPRNRpcV2NotifyOptions
{
	//The Version field MUST be 0x00000002.
	UINT32									Version = MustBeSetToTable(this, "2");
	RPRNRpcV2NotifyOptionsReservedFlags		Reserved;
	UINT32									Count;
	NdrPtr									TypesPtr;
	Switch
	{
		Case TypesPtr.ReferentId > 0 :
			Struct
			{
				NdrConformant				Size;
				Switch
				{
					Case Size.MaxCount > 0:
					Struct Types
					{
						RPRNRpcV2NotifyOptionsType  Type[ Size.MaxCount ];
						[ Local.Loop = 0 ]
						While[ Local.Loop < Size.MaxCount ]
						{
							[ Post.Local.Loop = Local.Loop + 1 ]
							Switch
							{
								Case Property.RPRNRpcV2NotifyOptionsTypeFieldsPtr[ Local.Loop ] > 0:
									Struct Fields
									{
										NdrConformant		Size;
										Switch
										{
											Case Size.MaxCount > 0:
												[ Local.FieldsLoop = 0 ]
												While[ Local.FieldsLoop < Size.MaxCount ]
												{
													[ Local.FieldsLoop = Local.FieldsLoop + 1 ]
													UINT16	Field = Property.RPRNRpcV2NotifyOptionsTypeType[ Local.Loop ] == 0 ?
																	 RPRNPrinterNotificationValuesTable( this ) :
																	( Property.RPRNRpcV2NotifyOptionsTypeType[ Local.Loop ] == 1 ? RPNRJobNotificationValuesTable( this ) : this ) ;
												}
										}
									}
							}
						}
					}
				}
			}
	}
}

Table RPRNRpcV2NotifyOptionsTypeTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x0000: "PRINTER_NOTIFY_TYPE - Indicates that the members specified in the array that is pointed to by the pFields member are printer notification constants.";
		Case 0x0001: "JOB_NOTIFY_TYPE - Indicates that the members specified in the array that is pointed to by the pFields member are job notification constants.";
		Case 0x0002: "SERVER_NOTIFY_TYPE - Indicates that the members specified in the array that is pointed to by the pFields member are server notification constants.";
		Default: FormatString("Unknown Value (%u)", Value);
	}
}

Table RPRNPrinterNotificationValuesTable( Value )
{
	Switch( Value )
	{
		Case 0x0000: "PRINTER_NOTIFY_FIELD_SERVER_NAME - The server name for the printer has changed.";
		Case 0x0001: "PRINTER_NOTIFY_FIELD_PRINTER_NAME - The printer name has changed.";
		Case 0x0002: "PRINTER_NOTIFY_FIELD_SHARE_NAME - The printer share name has changed.";
		Case 0x0003: "PRINTER_NOTIFY_FIELD_PORT_NAME - The default port name for the printer has changed.";
		Case 0x0004: "PRINTER_NOTIFY_FIELD_DRIVER_NAME - The printer driver for the printer has changed.";
		Case 0x0005: "PRINTER_NOTIFY_FIELD_COMMENT - The printer comment has changed.";
		Case 0x0006: "PRINTER_NOTIFY_FIELD_LOCATION - The printer location has changed.";
		Case 0x0007: "PRINTER_NOTIFY_FIELD_DEVMODE - The default _DEVMODE structure for the printer has changed.";
		Case 0x0008: "PRINTER_NOTIFY_FIELD_SEPFILE - The separator page for the printer has changed.";
		Case 0x0009: "PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR - The print processor associated with the printer has changed.";
		Case 0x000A: "PRINTER_NOTIFY_FIELD_PARAMETERS - The default print processor parameters for the printer have changed.";
		Case 0x000B: "PRINTER_NOTIFY_FIELD_DATATYPE - The printer default datatype has changed.";
		Case 0x000C: "PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR - The security descriptor for the printer has changed.";
		Case 0x000D: "PRINTER_NOTIFY_FIELD_ATTRIBUTES - The printer attributes have changed.";
		Case 0x000E: "PRINTER_NOTIFY_FIELD_PRIORITY - The current priority for the printer has changed.";
		Case 0x000F: "PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY - The default priority for the printer has changed.";
		Case 0x0010: "PRINTER_NOTIFY_FIELD_START_TIME - The earliest start time for the printer has changed.";
		Case 0x0011: "PRINTER_NOTIFY_FIELD_UNTIL_TIME - The latest print time for the printer has changed.";
		Case 0x0012: "PRINTER_NOTIFY_FIELD_STATUS - The status for the printer has changed.";
		Case 0x0014: "PRINTER_NOTIFY_FIELD_CJOBS - The number of print jobs that are queued for the printer has changed.";
		Case 0x0015: "PRINTER_NOTIFY_FIELD_AVERAGE_PPM - the average pages per minute for the printer has changed.";
		Case 0x0016: "PRINTER_NOTIFY_FIELD_TOTAL_PAGES - The total number of pages that have been printed on the printer has changed.";
		Case 0x0017: "PRINTER_NOTIFY_FIELD_PAGES_PRINTED - The number of pages that have been printed for the printer has changed.";
		Case 0x0018: "PRINTER_NOTIFY_FIELD_TOTAL_BYTES - The total number of bytes that have been printed on the printer has changed.";
		Case 0x0019: "PRINTER_NOTIFY_FIELD_BYTES_PRINTED - The number of bytes that have been printed has changed.";
		Case 0x001A: "PRINTER_NOTIFY_FIELD_OBJECT_GUID - The printer object GUID has changed.";
		Default: FormatString( "Unknown Value (%u)", Value );
	}
}

Table RPNRJobNotificationValuesTable( Value )
{
	Switch( Value )
	{
		Case 0x0000:  "JOB_NOTIFY_FIELD_PRINTER_NAME - The printer name for the print job has changed.";
		Case 0x0001:  "JOB_NOTIFY_FIELD_MACHINE_NAME - The server name for the job has changed.";
		Case 0x0002:  "JOB_NOTIFY_FIELD_PORT_NAME - The port for the job has changed.";
		Case 0x0003:  "JOB_NOTIFY_FIELD_USER_NAME - The user name for the job has changed.";
		Case 0x0004:  "JOB_NOTIFY_FIELD_NOTIFY_NAME - The notify name for the job has changed.";
		Case 0x0005:  "JOB_NOTIFY_FIELD_DATATYPE - The default datatype for the job has changed.";
		Case 0x0006:  "JOB_NOTIFY_FIELD_PRINT_PROCESSOR - The print processor associated with the job has changed.";
		Case 0x0007:  "JOB_NOTIFY_FIELD_PARAMETERS - The default print processor parameters for the job have changed.";
		Case 0x0008:  "JOB_NOTIFY_FIELD_DRIVER_NAME - The printer driver for the job has changed.";
		Case 0x0009:  "JOB_NOTIFY_FIELD_DEVMODE - The default _DEVMODE structure for the job has changed.";
		Case 0x000A:  "JOB_NOTIFY_FIELD_STATUS - The status for the job has changed.";
		Case 0x000B:  "JOB_NOTIFY_FIELD_STATUS_STRINGThe textual representation for the job status has changed.";
		Case 0x000C:  "JOB_NOTIFY_FIELD_SECURITY_DESCRIPTORSecurity descriptor for the job has changed.";
		Case 0x000D:  "JOB_NOTIFY_FIELD_DOCUMENT - The document name for the job has changed.";
		Case 0x000E:  "JOB_NOTIFY_FIELD_PRIORITY - The current priority for the job has changed.";
		Case 0x000F:  "JOB_NOTIFY_FIELD_POSITION - The position in the queue for the job has changed.";
		Case 0x0010:  "JOB_NOTIFY_FIELD_SUBMITTED - The submitted time for the job has changed.";
		Case 0x0011:  "JOB_NOTIFY_FIELD_START_TIME - The earliest start time for the job has changed.";
		Case 0x0012:  "JOB_NOTIFY_FIELD_UNTIL_TIME - The latest print time for the job has changed.";
		Case 0x0013:  "JOB_NOTIFY_FIELD_TIME - The total print time for the job has changed.";
		Case 0x0014:  "JOB_NOTIFY_FIELD_TOTAL_PAGES - The total number of pages of the job has changed.";
		Case 0x0015:  "JOB_NOTIFY_FIELD_PAGES_PRINTED - The number of pages that have been printed has changed.";
		Case 0x0016:  "JOB_NOTIFY_FIELD_TOTAL_BYTES - The total number of bytes of the job has changed.";
		Case 0x0017:  "JOB_NOTIFY_FIELD_BYTES_PRINTED - The total number of bytes that have been printed has changed.";
		Default: FormatString( "Unknown Value (%u)", Value );
	}
}

//
//	_RPC_V2_NOTIFY_OPTIONS_TYPE
//
Struct RPRNRpcV2NotifyOptionsType
{
	[ Property.RPRNRpcV2NotifyOptionsTypeType.AddTOProperty( this, 0 ) ]
	UINT16			Type = RPRNRpcV2NotifyOptionsTypeTypeTable(this);
	UINT16			Reserved0;
	UINT32			Reserved1;
	UINT32			Reserved2;
	UINT32			Count;
	[ Property.RPRNRpcV2NotifyOptionsTypeFieldsPtr.AddTOProperty( this.ReferentID, 0 ) ]
	NdrPtr			FieldsPtr;
}

Struct RPRNRpcV2NotifyOptionsPtr
{
	NdrPtr RpcV2NotifyOptionsPtr;
	Switch
	{
		Case RpcV2NotifyOptionsPtr.ReferentID > 0:
			RPRNRpcV2NotifyOptions RpcV2NotifyOptions;
	}
}

//
//	RPC_V2_NOTIFY_INFO
//
Struct RPRNRpcV2NotifyInfo
{
	NdrConformant				Size;
	//The Version field MUST be 0x00000002	
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	UINT32						Version = MustBeSetToTable(this, "2");
	RPRNRpcV2NotifyInfoFlags	Flags;
	UINT32						Count;
	[ MaxLoopCount = Size.MaxCount, Property.RPRNRpcV2NotifyInfoDataDataPtrCount = 0 ]
	While[ true ]
	{
		RPRNRpcV2NotifyInfoData	   Data;
	}
	[  Property.RPRNRpcV2NotifyInfoDataDataLoop = 0 ]
	While [ Property.RPRNRpcV2NotifyInfoDataDataLoop < Property.RPRNRpcV2NotifyInfoDataDataPtrCount ]
	{
		[ Property.RPRNRpcV2NotifyInfoDataDataLoop = Property.RPRNRpcV2NotifyInfoDataDataLoop + 1 ]
		RPRNRpcV2NotifyInfoDataDataRef DataRef;
	}
}

Table RPRNRpcV2NotifyInfoDataTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x0000: "PRINTER_NOTIFY_TYPE - Printer-related notifications";
		Case 0x0001: "JOB_NOTIFY_TYPE - Job-related notifications";
		Default: FormatString( "Unknown Value (%u)", Value );
	}
}

//
//	RPC_V2_NOTIFY_INFO_DATA
//Alignment:NDR
//
Struct RPRNRpcV2NotifyInfoData
{
	NdrAlign Pad1;
	UINT16				Type = RPRNRpcV2NotifyInfoDataTypeTable(this);
	UINT16				Fields = ( Type == 0 ) ? RPRNPrinterNotificationValuesTable( this ) :( Type ==  1 ? RPNRJobNotificationValuesTable( this ) : this );
	UINT32				Reserved;
	UINT32				Id = ( Type == 1 ) ? this : "Ignored";
	RPRNRpcV2NotifyInfoDataData Data;
}

//	2.2.3.5   Notification Data Type Values
Table RPRNNotificationDataTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x0001: "TABLE_DWORD - A two-DWORD array.";
		Case 0x0002: "TABLE_STRING - A string.";
		Case 0x0003: "TABLE_DEVMODE - A _DEVMODE structure.";
		Case 0x0004: "TABLE_TIME - A SYSTEMTIME_CONTAINER structure.";
		Case 0x0005: "TABLE_SECURITYDESCRIPTOR - A SECURITY_CONTAINER structure.";
		Default: FormatString( "Unknown Value (%u)", Value );
	}
}

//
//	RPC_V2_NOTIFY_INFO_DATA_DATA
//
Struct RPRNRpcV2NotifyInfoDataData = RPRNNotificationDataTypeTable( SwitchValue & 0x0000FFFF )
{
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad1;
	}
	[ Post.Property.RPRNRpcV2NotifyInfoDataDataSwitchValueArray$[ Property.RPRNRpcV2NotifyInfoDataDataPtrCount ]  = this & 0x0000FFFF ]
	UINT32 SwitchValue = RPRNNotificationDataTypeTable( this & 0x0000FFFF );
	NdrAlign Pad;
	Switch( SwitchValue & 0x0000FFFF )
	{
		Case 1:
			UINT32 DWData[2];
		Case 2:
			RPRNStringContainerHeader String;
		Case 4:
			RPRNSystemtimeContainerHeader SystemTime;
		Case 3:
			RPRNDevmodeContainerHeader DevMode;
		Case 5:
			RPRNSecurityContainerHeader SecurityDescriptor;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" ) Unknown;
	}
}

Struct RPRNRpcV2NotifyInfoDataDataRef = RPRNNotificationDataTypeTable( Property.RPRNRpcV2NotifyInfoDataDataSwitchValueArray$[ Property.RPRNRpcV2NotifyInfoDataDataLoop - 1 ] )
{
	Switch( Property.RPRNRpcV2NotifyInfoDataDataSwitchValueArray$[ Property.RPRNRpcV2NotifyInfoDataDataLoop - 1 ] )
	{
		Case 2: 
			Struct
			{
				NdrConformant					Size;
				UnicodeString( Size.MaxCount )	String;
			}

		Case 3:
			Struct
			{
				NdrConformant	Size;
				Switch
				{
					Case Size.MaxCount > 0:
						RPRNDevMode	DevMode;
				}
			}

		Case 4:
			SystemTime        SystemTime;

		Case 5:
			Struct
			{
				NdrConformant Size;
				Switch
				{
					Case Size.Maxcount > 0 :
						NdrSecurityDescriptor Security;
				}
			} 
	}
}

Struct RPRNRpcV2NotifyInfoPtr
{
	NdrPtr RpcV2NotifyInfoPtr;
	Switch
	{
		Case RpcV2NotifyInfoPtr.ReferentID > 0:
			RPRNRpcV2NotifyInfo RpcV2NotifyInfo;
	}
}

//
//	RPC_V2_UREPLY_PRINTER
//
Struct RPRNRpcV2UreplyPrinter
{
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad1;
	}
	UINT32 SwitchValue;
	Switch( SwitchValue )
	{
		Case 0:
			RPRNRpcV2NotifyInfoPtr InfoPtr;
		Default:
			ReportParserError( ParserErrorProtocolClassWindows, "RPRN", "Unknown Union Switch Value" ) Unknown;
	}
}

//
//	CORE_PRINTER_DRIVER
//	Alignment: None
//
Struct RPRNCorePrinterDriver
{
	Align8					Pad;
	GUID( TRUE )			CoreDriverGUID;
	FILETIME				DriverDate;
	UINT64					DriverVersion;
	UnicodeString(260)		PackageID;
}

Struct	RPRNConfCorePrinterDriver
{
	NdrConformant			Size;
	Switch
	{
		Case Size.MaxCount > 0:
			RPRNCorePrinterDriver	CorePrinterDriver[ Size.MaxCount ];
	}
}
