//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Network Load Balancing Cluster Membership Heartbeat
//#
//#  Details:                
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 2/20/2009
//#
//####

[DataTypeByteOrder = LittleEndian]
Protocol NLBHB = NLBHBType + "ClusterIPAdress : " + ClusterIPAddressCode.tostring + " ; DedicatedIPAddress : " + DedicatedIPAddressCode.tostring
{
	UINT32 Signature = FormatString("0x%X - %s",this,NLBSignatureTable(this));
	UINT32 Version = FormatString("%X.%X", this[1],this[0]);
	UINT32 UniqueHostID =  FormatString("%X", this);
	[DataFieldByteOrder = BigEndian]
	IPv4Address ClusterIPAddressCode;
	[DataFieldByteOrder = BigEndian]
	IPv4Address DedicatedIPAddressCode;

	switch(Signature)
	{
		case 0xC0DE01BF :
			[NLBHBType = "Memberhip; "]
			NLBHBMemberhip NLBMemberShipHB;
		case 0xC0DE01C0 : 
			[NLBHBType = "Extended; "]
			NLBHBExtended  NLBHBExtended;
		default         : 
			[NLBHBType = "Error; "]
			NLBError       NLBErrorhb;
	}
}

UnsignedNumber NLBLongLong
{
	size = 8,	
	DisplayFormat = FormatString("%02X %02X %02X %02X %02X %02X %02X %02X",this[0],this[1],this[2],this[3],this[4],this[5],this[6],this[7]);
}

Table NLBSignatureTable(value)
{
	switch(value)
	{
		case 0xC0DE01BF: "NLB Cluster Membership HeartBeat";
		case 0xC0DE01C0: "NLB Extended HeartBeat";
		default        : "NLB Error HB";
	}
}

struct NLBLongArrayData 
{
	UINT32 Data1;
	UINT32 Data2;
	UINT32 Data3;
	UINT32 Data4;
	UINT32 Data5;
	UINT32 Data6;
	UINT32 Data7;
	UINT32 Data8;
	UINT32 Data9;
	UINT32 Data10;
	UINT32 Data11;
	UINT32 Data12;
	UINT32 Data13;
	UINT32 Data14;
	UINT32 Data15;
	UINT32 Data16;
	UINT32 Data17;
	UINT32 Data18;
	UINT32 Data19;
	UINT32 Data20;
	UINT32 Data21;
	UINT32 Data22;
	UINT32 Data23;
	UINT32 Data24;
	UINT32 Data25;
	UINT32 Data26;
	UINT32 Data27;
	UINT32 Data28;
	UINT32 Data29;
	UINT32 Data30;
	UINT32 Data31;
	UINT32 Data32;
	UINT32 Data33;
}

struct NLBMapData
{
	NLBLongLong Map1;
	NLBLongLong Map2;
	NLBLongLong Map3;
	NLBLongLong Map4;
	NLBLongLong Map5;
	NLBLongLong Map6;
	NLBLongLong Map7;
	NLBLongLong Map8;
	NLBLongLong Map9;
	NLBLongLong Map10;
	NLBLongLong Map11;
	NLBLongLong Map12;
	NLBLongLong Map13;
	NLBLongLong Map14;
	NLBLongLong Map15;
	NLBLongLong Map16;
	NLBLongLong Map17;
	NLBLongLong Map18;
	NLBLongLong Map19;
	NLBLongLong Map20;
	NLBLongLong Map21;
	NLBLongLong Map22;
	NLBLongLong Map23;
	NLBLongLong Map24;
	NLBLongLong Map25;
	NLBLongLong Map26;
	NLBLongLong Map27;
	NLBLongLong Map28;
	NLBLongLong Map29;
	NLBLongLong Map30;
	NLBLongLong Map31;
	NLBLongLong Map32;
	NLBLongLong Map33;
}


struct NLBHBMemberhip  = "NLB Cluster Membership HeartBeat"
{
	UINT16 MyHostID;
	UINT16 DefaultHostID;
	UINT16 ConvergenceState;
	[NumberOfPortRules]
	UINT16 NumberOfPortRules;
	UINT32 UniqueHostCode;
	UINT32 PacketsHandled;
	BDATeamingConfiguration BDATeamingConfig;
	UINT32 Reserved1;
	NLBLongArrayData PortRuleConfiguration;
	NLBMapData CurrentMap;
	NLBMapData NewMap;
	NLBMapData IdleMap;
	NLBMapData ReadyMap;
	NLBLongArrayData LoadWeights;
	NLBLongArrayData Reserved2;
}

/* Teaming configuration/state code, which is of the form:

   -------------------------------------
   |XXXXXXXX|PPPPPPPP|PPPPPPPP|NNNNNHMA|
   -------------------------------------

   X: Reserved
   P: XOR of the least significant 16 bits of each participant's cluster IP address
   N: Number of participants
   H: Hashing (Reverse=1, Normal=0)
   M: Master (Yes=1, No=0)
   A: Teaming active (Yes=1, No=0)
*/

struct BDATeamingConfiguration
{
	UINT8  Reserved;
	UINT16 LSBofParticipantsclusip;
	UINT8  Config
	{	
		UINT8 TeamActive:1 = FormatString("(%s) %s",this.ToBitString,this ? "Yes" : "No");
		UINT8 Master:1 = FormatString("    (%s) %s",this.ToBitString,this ? "Yes" : "No");
		UINT8 Hashing:1 = FormatString("   (%s) %s",this.ToBitString,this ? "Reverse" : "Normal");
		UINT8 Unused:5 = FormatString("    (%s)",this.ToBitString);
	};
}

struct NLBHBExtended = "NLB Extended HeartBeat"
{
	while Option[FrameOffset < FrameLength]
	{
		switch(UINT8(FrameData,FrameOffset))
		{
			case 1 : NLBHBFQDN NLBHBFQDN;
			case 2 : NLBHBDIP  NLBHBDIP;
		}
	}
}


struct NLBHBFQDN = FQDN
{
	UINT8  PayloadType = FormatString("%u FQDN",this);
	UINT8  Length8;
	UINT16 Reserved1;
	UINT32 Reserved2;
	UnicodeString((Length8-1)*8/2) FQDN;
	 	
}

struct NLBHBDIP = NLBHBDIPValue
{
	UINT8  PayloadType = FormatString("%u DIP",this);
	UINT8  Length8;
	UINT16 Reserved1;
	UINT32 Reserved2;
	UINT16 Addressfamily;
	switch(Addressfamily)
	{	
		case 0x2 :
			[ByteOrder = BigEndian,NLBHBDIPValue = this.tostring]
			IPv4Address ClusterIPAdress;
		case 0x17: 
			[ByteOrder = BigEndian,NLBHBDIPValue = this.tostring]
			Ipv6Address dip6;
		default  : 
			AsciiString(FrameLength - FrameOffset) donthang;
	}
	BLOB(FrameLength - FrameOffset) Padding; 	
}

struct NLBError = "NLB Error HB"
{
	UINT32  Version =  FormatString("%X", this);
}
