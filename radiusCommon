//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Remote Authentication Dial-In User Service
//#
//#  Details:                
//#
//#  Public References:      RFC 3548, 2865, 2866, 2868, 2869, 2882, 3162, 3579
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 1/29/2010
//#
//####

// [RFC 2866    Page 5    3.  Packet Format]
[DefaultTimeOut = RADIUSConversationTimeout]
Protocol RADIUS = FormatString( "%s, Id = %d, Length = %u%s", 
								RADIUSCodeTable(MessageType), 
								Identifier, 
								AllLength, 
								Property.SoHSummary ? ", SOH:" + Property.SoHSummary : "")
{
	UINT8 MessageType = FormatString("%s, %d(0x%02X)", RADIUSCodeTable( this ), this, this);
	[RADIUSId, BuildConversationWithParent ( Identifier)]
	UINT8 Identifier;
	[ Conversation.ConversationDescription = FormatString("(ID: %u) ConvID = %d", RADIUSId,ConvID) ]
	UINT16 AllLength;
	RADIUSAuth Authenticator;
	while Attributes[ CurrentProtocolOffset < AllLength]
	{
		[Property.RADIUSAttributeFrameOffset = FrameOffset]
		switch 
		{
			case Property.RADIUSTLVLength == 255:
				[Property.RADIUSTLVLength = UINT8( Framedata, Offset + 1 )]
				struct RADIUSAttributeContinuation
				{
					UINT8 Type;
					UINT8 Length;
					BLOB(Length - 2) Continuation;
				}
			default:
				[Property.RADIUSTLVLength = UINT8( Framedata, Offset + 1 )]
				[DataFieldFrameLength = FrameOffset + Property.RADIUSTLVLength]
				switch(UINT8( Framedata, Offset ))
				{
					case   1: RADIUSAttributeUserName  AttributeUserName;
					case   2: RADIUSAttributeUserPassword  AttributeUserPassword;
					case   3: RADIUSAttributeChapPassword AttributeChapPassword;
					case   4: RADIUSAttributeIPv4Address AttributeNasIPAddress;
					case   5: RADIUSAttributeNasPort AttributeNasPort;
					case   6: RADIUSAttributeServiceType AttributeServiceType;
					case   7: RADIUSAttributeFramedProtocol AttributeFramedProtocol;
					case   8: RADIUSAttributeFramedIPAddress AttributeFramedIPAddress;
					case   9: RADIUSAttributeFramedIPNetmask AttributeFramedIPNetmask;
					case  10: RADIUSAttributeFramedRouting  AttributeFramedRouting;
					case  11: RADIUSAttributeFilterID  AttributeFilterID;
					case  12: RADIUSAttributeFramedMTU  AttributeFramedMTU;
					case  13: RADIUSAttributeFramedCompression AttributeFramedCompression;
					case  14: RADIUSAttributeLoginIPHost AttributeLoginIPHost;
					case  15: RADIUSAttributeLoginService AttributeLoginService;
					case  16: RADIUSAttributeLoginTCPPort AttributeLoginTCPPort;
					case  18: RADIUSAttributeReplyMessage AttributeReplyMessage;
					case  19: RADIUSAttributeCallbackNumber AttributeCallbackNumber;
					case  20: RADIUSAttributeCallbackId AttributeCallbackId;
					case  22: RADIUSAttributeFramedRoute AttributeFramedRoute;
					case  23: RADIUSAttributeFramedIPXNetwork AttributeFramedIPXNetwork;
					case  24: RADIUSAttributeState  AttributeState;
					case  25: RADIUSAttributeClass AttributeClass;
					case  26: RADIUSAttributeVendorSpecific AttributeVendorSpecific;
					case  27: RADIUSAttributeSessionTimeout AttributeSessionTimeout;
					case  28: RADIUSAttributeIdleTimeout AttributeIdleTimeout;
					case  29: RADIUSAttributeTerminationAction AttributeTerminationAction;
					case  30: RADIUSAttributeCalledStationID AttributeCalledStationID;
					case  31: RADIUSAttributeCallingStationID AttributeStationID;
					case  32: RADIUSAttributeNASIdentifier AttributeNASIdentifier;
					case  33: RADIUSAttributeProxyState AttributeProxyState;
					case  34: RADIUSAttributeLoginLATService AttributeLoginLATService;
					case  35: RADIUSAttributeLoginLATNode  AttributeLoginLATNode;
					case  36: RADIUSAttributeLoginLATGroup AttributeLoginLATGroup;
					case  37: RADIUSAttributeFramedAppleTalkLink AttributeFramedAppleTalkLink;
					case  38: RADIUSAttributeFramedAppleTalkNetwork AttributeFramedAppleTalkNetwork;
					case  39: RADIUSAttributeFramedAppleTalkZone AttributeFramedAppleTalkZone;
					case  40: RADIUSAttributeAcctStatusType AttributeAcctStatusType;
					case  41: RADIUSAttributeAcctDelayTime AttributeAcctDelayTime;
					case  42: RADIUSAttributeAcctInputOctets AttributeAcctInputOctets;
					case  43: RADIUSAttributeAcctOutputOctets AttributeAcctOutputOctets;
					case  44: RADIUSAttributeAcctSessionID AttributeAcctSessionID;
					case  45: RADIUSAttributeAcctAuthentic AttributeAcctAuthentic;
					case  46: RADIUSAttributeAcctSessionTime AttributeAcctSessionTime;
					case  47: RADIUSAttributeAcctInputPackets AttributeInputPackets;
					case  48: RADIUSAttributeAcctOutputPackets AttributeOutputPackets;
					case  49: RADIUSAttributeRadiusAcctTerminateCause AttributeRadiusAcctTerminateCause;
					case  50: RADIUSAttributeAcctMultiSessionID AttributeAcctMultiSessionID;
					case  51: RADIUSAttributeAcctLinkCount AttributeAcctLinkCount;
					case  52: RADIUSAttributeAcctInputGigawords AttributeInputGigawords;
					case  53: RADIUSAttributeAcctOutputGigawords AttributeOutputGigawords;
					case  55: RADIUSAttributeEventTimestamp AttributeEventTimestamp;
					case  60: RADIUSAttributeCHAPChallenge AttributeCHAPChallenge;
					case  61: RADIUSAttributeRadiusNASPortType AttributeRadiusNASPortType;
					case  62: RADIUSAttributePortLimit AttributePortLimit;
					case  63: RADIUSAttributeLoginLATPort AttributeLoginLATPort;
					case  64: RADIUSAttributeTunnelType AttributeTunnelType;
					case  65: RADIUSAttributeTunnelMediumType AttributeTunnelMediumType;
					case  66: RADIUSAttributeTunnelClientEndpoint AttributeTunnelClientEndpoint;
					case  67: RADIUSAttributeTunnelServerEndpoint AttributeTunnelServerEndpoint;
					case  69: RADIUSAttributeTunnelPassword AttributeTunnelPassword;
					case  70: RADIUSAttributeARAPPassword AttributeARAPPassword;
					case  71: RADIUSAttributeARAPFeatures AttributeARAPFeatures;
					case  72: RADIUSAttributeARAPZoneAccess AttributeARAPZoneAccess;
					case  73: RADIUSAttributeARAPSecurity AttributeARAPSecurity;
					case  74: RADIUSAttributeARAPSecurityData AttributeARAPSecurityData;
					case  75: RADIUSAttributePasswordRetry AttributePasswordRetry;
					case  76: RADIUSAttributePrompt AttributePrompt;
					case  77: RADIUSAttributeConnectInfo AttributeConnectInfo;
					case  78: RADIUSAttributeConfigurationToken AttributeConfigurationToken;
					case  79: RADIUSAttributeEAPMessage AttributeEAPMessage;
					case  80: RADIUSAttributeMessageAuthenticator AttributeMessageAuthenticator;
					case  81: RADIUSAttributeTunnelPrivateGroupID AttributeTunnelPrivateGroupID;
					case  82: RADIUSAttributeTunnelAssignmentID AttributeTunnelAssignmentID;
					case  83: RADIUSAttributeTunnelPreference  AttributeTunnelPreference;
					case  84: RADIUSAttributeARAPChallengeResponse AttributeARAPChallengeResponse;
					case  85: RADIUSAttributeAcctInterimInterval AttributeAcctInterimInterval;
					case  87: RADIUSAttributeNASPortID AttributeNASPortID;
					case  88: RADIUSAttributeFramedPool AttributeFramedPool;
					case  90: RADIUSAttributeTunnelClientAuthID AttributeTunnelClientAuthID;
					case  91: RADIUSAttributeTunnelServerAuthID AttributeTunnelServerAuthID;
					case  95: RADIUSAttributeNASIPv6Address AttributeNASIPv6Address;
					case  96: RADIUSAttributeInterfaceID AttributeInterfaceID;
					case  97: RADIUSAttributeFramedIPv6Prefix AttributeFramedIPv6Prefix;
					case  98: RADIUSAttributeLoginIPv6Host AttributeLoginIPv6Host;
					case  99: RADIUSAttributeFramedIPv6Route AttributeFramedIPv6Route;
					case 100: RADIUSAttributeFramedIPv6Pool AttributeFramedIPv6Pool;
					default : RADIUSAttributeDefault Attribute;
				}
		}
	}
}
// [RFC 2866    Page 5    3.  Packet Format]
// [http://www.networksorcery.com/enp/default0701.htm RADIUS Protocol]
Table RADIUSCodeTable( value )
{
	switch( value )
	{
		case   1:"Access Request";
		case   2:"Access Accept";
		case   3:"Access Reject";
		case   4:"Accounting Request";
		case   5:"Accounting Response";
		case   6:"Accounting Status, Interim Accounting ";
		case   7:"Password Request";
		case   8:"Password Ack";
		case   9:"Password Reject";
		case  10:"Accounting Message";
		case  11:"Access Challenge";
		case  12:"Status Server (experimental)";
		case  13:"Status Client (experimental)";
		case  21:"Resource Free Request";
		case  22:"Resource Free Response";
		case  23:"Resource Query Request";
		case  24:"Resource Query Response";
		case  25:"Alternate Resource  Reclaim Request";
		case  26:"NAS Reboot Request ";
		case  27:"NAS Reboot Response";
		case  29:"Next Passcode";
		case  30:"New Pin";
		case  31:"Terminate Session";
		case  32:"Password Expired";
		case  33:"Event Request";
		case  34:"Event Response";
		case  40:"Disconnect Request";
		case  41:"Disconnect ACK";
		case  42:"Disconnect NAK";
		case  43:"CoA Request";
		case  44:"CoA ACK";
		case  45:"CoA NAK";
		case  50:"IP Address Allocate";
		case  51:"IP Address Release";
		case 250:"Experimental use ";
		case 251:"Experimental use ";
		case 252:"Experimental use ";
		case 253:"Experimental use ";
		case 254:"Reserved";
		case 255:"Reserved";
		default :"UndefinedValue";
	}
}

// [RFC 2866    Page 10    5.  Attributes]
// [RFC 2865    Page 23    5.  Attributes]
Table RADIUSAttributeTypeTable( value )
{
	switch
	{
		case  value ==   1:"User Name";
		case  value ==   2:"User Password";
		case  value ==   3:"CHAP Password";
		case  value ==   4:"NAS IP Address";
		case  value ==   5:"NAS Port";
		case  value ==   6:"Service Type";
		case  value ==   7:"Framed Protocol";
		case  value ==   8:"Framed IP Address";
		case  value ==   9:"Framed IP Netmask";
		case  value ==  10:"Framed Routing";
		case  value ==  11:"Filter Id";
		case  value ==  12:"Framed MTU";
		case  value ==  13:"Framed Compression";
		case  value ==  14:"Login IP Host";
		case  value ==  15:"Login Service";
		case  value ==  16:"Login TCP Port";
		case  value ==  17:"unassigned";
		case  value ==  18:"Reply Message";
		case  value ==  19:"Callback Number";
		case  value ==  20:"Callback Id";
		case  value ==  21:"unassigned";
		case  value ==  22:"Framed Route";
		case  value ==  23:"Framed IPX Network";
		case  value ==  24:"State";
		case  value ==  25:"Class";
		case  value ==  26:"Vendor Specific";
		case  value ==  27:"Session Timeout";
		case  value ==  28:"Idle Timeout";
		case  value ==  29:"Termination Action";
		case  value ==  30:"Called Station Id";
		case  value ==  31:"Calling Station Id";
		case  value ==  32:"NAS Identifier";
		case  value ==  33:"Proxy State";
		case  value ==  34:"Login LAT Service";
		case  value ==  35:"Login LAT Node";
		case  value ==  36:"Login LAT Group";
		case  value ==  37:"Framed AppleTalk Link";
		case  value ==  38:"Framed AppleTalk Network";
		case  value ==  39:"Framed AppleTalk Zone";
		//      case  40 -- 59   (reserved for accounting)
		// [RFC 2866    Page 10    5.  Attributes]
		case  value ==  40:"Acct Status Type";
		case  value ==  41:"Acct Delay Time";
		case  value ==  42:"Acct Input Octets";
		case  value ==  43:"Acct Output Octets";
		case  value ==  44:"Acct Session Id";
		case  value ==  45:"Acct Authentic";
		case  value ==  46:"Acct Session Time";
		case  value ==  47:"Acct Input Packets";
		case  value ==  48:"Acct Output Packets";
		case  value ==  49:"Acct Terminate Cause";
		case  value ==  50:"Acct Multi Session Id";
		case  value ==  51:"Acct Link Count";
		case  value ==  52:"Acct Input Gigawords";
		case  value ==  53:"Acct Output Gigawords";
		case  value ==  54:"reserved for accounting";
		case  value ==  55:"Event Timestamp";
		case  value ==  56:"reserved for accounting";
		case  value ==  57:"reserved for accounting";
		case  value ==  58:"reserved for accounting";
		case  value ==  59:"reserved for accounting";
		case  value ==  60:"CHAP Challenge";
		case  value ==  61:"NAS Port Type";
		case  value ==  62:"Port Limit";
		case  value ==  63:"Login LAT Port";
		case  value ==  64:"Tunnel Type";
		case  value ==  65:"Tunnel Medium Type";
		case  value ==  66:"Tunnel Client Endpoint";
		case  value ==  67:"Tunnel Server Endpoint";
		case  value ==  68:"Acct Tunnel Connection";
		case  value ==  69:"Tunnel Password";
		case  value ==  70:"ARAP Password";
		case  value ==  71:"ARAP Features";
		case  value ==  72:"ARAP Zone Access";
		case  value ==  73:"ARAP Security";
		case  value ==  74:"ARAP Security Data";
		case  value ==  75:"Password Retry";
		case  value ==  76:"Prompt";
		case  value ==  77:"Connect Info";
		case  value ==  78:"Configuration Token";
		case  value ==  79:"EAP Message";
		case  value ==  80:"Message Authenticator";
		case  value ==  81:"Tunnel Private Group ID";
		case  value ==  82:"Tunnel Assignment ID";
		case  value ==  83:"Tunnel Preference";
		case  value ==  84:"ARAP Challenge Response";
		case  value ==  85:"Acct Interim Interval";
		case  value ==  86:"Acct Tunnel Packets Lost";
		case  value ==  87:"NAS Port Id";
		case  value ==  88:"Framed Pool";
		case  value ==  90:"Tunnel Client Auth ID";
		case  value ==  91:"Tunnel Server Auth ID";
		case  value ==  94:"Originating Line Info";
		case  value ==  95:"NAS IPv6 Address";
		case  value ==  96:"Framed Interface Id";
		case  value ==  97:"Framed IPv6 Prefix";
		case  value ==  98:"Login IPv6 Host";
		case  value ==  99:"Framed IPv6 Route";
		case  value == 100:"Framed-IPv6-Pool";
		case  value == 101:"Error-Cause Attribute";
		case  value == 102:"EAP-Key-Name";
		
		case  value >= 192 && value <= 223:"Experimental";
		case  value >= 224 && value <= 240:"Implementation specific";
		case  value >= 241 && value <= 255:"Reserved";
		
		default           :"UndefinedValue";
	
	}

}

// [RFC 2865    Page 30    5.6.  Service-Type]
Table RadiusServiceTypeTable( value )
{
	switch( value )
	{
		case  1:FormatString("Login, %d(%#x)",value,value);
		case  2:FormatString("Framed, %d(%#x)",value,value);
		case  3:FormatString("Callback Login, %d(%#x)",value,value);
		case  4:FormatString("Callback Framed, %d(%#x)",value,value);
		case  5:FormatString("Outbound, %d(%#x)",value,value);
		case  6:FormatString("Administrative, %d(%#x)",value,value);
		case  7:FormatString("NAS Prompt, %d(%#x)",value,value);
		case  8:FormatString("Authenticate Only, %d(%#x)",value,value);
		case  9:FormatString("Callback NAS Prompt, %d(%#x)",value,value);
		case 10:FormatString("Call Check, %d(%#x)",value,value);
		case 11:FormatString("Callback Administrative, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}



// [RFC 2865    Page 32    5.7.  Framed-Protocol]
Table RadiusFramedProtocolTable( value )
{
	switch( value )
	{
		case  1:FormatString("PPP, %d(%#x)",value,value);
		case  2:FormatString("SLIP, %d(%#x)",value,value);
		case  3:FormatString("AppleTalk Remote Access Protocol (ARAP), %d(%#x)",value,value);
		case  4:FormatString("Gandalf proprietary SingleLink/MultiLink protocol, %d(%#x)",value,value);
		case  5:FormatString("Xylogics proprietary IPX/SLIP, %d(%#x)",value,value);
		case  6:FormatString("X.75 Synchronous, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}


// [RFC 2865    Page 35    5.7.  Framed-Protocol]
Table RadiusFrameRoutingTable( value )
{
	switch( value )
	{
		case  0:FormatString("None, %d(%#x)",value,value);
		case  1:FormatString("Send routing packets, %d(%#x)",value,value);
		case  2:FormatString("Listen for routing packets, %d(%#x)",value,value);
		case  3:FormatString("Send and Listen, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}


// [RFC 2865    Page 37    5.13.  Framed-Compression]
Table RadiusFramedCompressionTable( value )
{
	switch( value )
	{
		case  0:FormatString("None, %d(%#x)",value,value);
		case  1:FormatString("VJ TCP/IP header compression, %d(%#x)",value,value);
		case  2:FormatString("IPX header compression, %d(%#x)",value,value);
		case  3:FormatString("Stac-LZS compression, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}

//# rfc 2865 page 39
Table IPv4AddressTable(value)
{
	switch(FormatString("%#x",value))
	{
		case "0"         :
			FormatString("%d.%d.%d.%d - Nas should select a host to connect the user to",
						value[3],value[2],value[1],value[0]);
		case "0xffffffff":
			FormatString("%d.%d.%d.%d - Nas should allowed the user to select an address",
						value[3],value[2],value[1],value[0]);
		default          :
			FormatString("%d.%d.%d.%d - The address the NAS SHOULD connect the user to",
						value[3],value[2],value[1],value[0]);
	}
}

Table RadiusTerminationActionTable(value)
{
	switch(value)
	{
		case  0:FormatString("Default, %d(%#x)",value,value);
		case  1:FormatString("RADIUS-Request, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}


// [RFC 2865    Page 38    5.15.  Login-Service]
Table RadiusLoginServiceTable( value )
{
	switch( value )
	{
		case  0:FormatString("Telnet, %d(%#x)",value,value);
		case  1:FormatString("Rlogin, %d(%#x)",value,value);
		case  2:FormatString("TCP Clear, %d(%#x)",value,value);
		case  3:FormatString("PortMaster (proprietary), %d(%#x)",value,value);
		case  4:FormatString("LAT, %d(%#x)",value,value);
		case  5:FormatString("X25-PAD, %d(%#x)",value,value);
		case  6:FormatString("X25-T3POS, %d(%#x)",value,value);
		case  8:FormatString("TCP Clear Quiet (suppresses any NAS-generated connect string), %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}

// [RFC 2865    Page 60    5.41.  NAS-Port-Type]
Table RadiusNASPortTypeTable( value )
{
	switch( value )
	{
		case  0:FormatString("Async, %d(%#x)",value,value);
		case  1:FormatString("Sync, %d(%#x)",value,value);
		case  2:FormatString("ISDN Sync, %d(%#x)",value,value);
		case  3:FormatString("ISDN Async V.120, %d(%#x)",value,value);
		case  4:FormatString("ISDN Async V.110, %d(%#x)",value,value);
		case  5:FormatString("Virtual, %d(%#x)",value,value);
		case  6:FormatString("PIAFS, %d(%#x)",value,value);
		case  7:FormatString("HDLC Clear Channel, %d(%#x)",value,value);
		case  8:FormatString("X.25, %d(%#x)",value,value);
		case  9:FormatString("X.75, %d(%#x)",value,value);
		case 10:FormatString("G.3 Fax, %d(%#x)",value,value);
		case 11:FormatString("SDSL - Symmetric DSL, %d(%#x)",value,value);
		case 12:FormatString("ADSL-CAP - Asymmetric DSL, Carrierless Amplitude Phase Modulation, %d(%#x)",value,value);
		case 13:FormatString("ADSL-DMT - Asymmetric DSL, Discrete Multi-Tone, %d(%#x)",value,value);
		case 14:FormatString("IDSL - ISDN Digital Subscriber Line, %d(%#x)",value,value);
		case 15:FormatString("Ethernet, %d(%#x)",value,value);
		case 16:FormatString("xDSL - Digital Subscriber Line of unknown type, %d(%#x)",value,value);
		case 17:FormatString("Cable, %d(%#x)",value,value);
		case 18:FormatString("Wireless - Other, %d(%#x)",value,value);
		case 19:FormatString("Wireless - IEEE 802.11, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}

// [RFC 2866    Page 12    5.1.  Acct-Status-Type]
Table RadiusAcctStatusTypeTable( value )
{
	switch( value )
	{
		case  1:FormatString("Start, %d(%#x)",value,value);
		case  2:FormatString("Stop, %d(%#x)",value,value);
		case  3:FormatString("Interim Update, %d(%#x)",value,value);
		case  7:FormatString("Accounting On, %d(%#x)",value,value);
		case  8:FormatString("Accounting Off, %d(%#x)",value,value);
		case  9:FormatString("Reserved for Tunnel Accounting, %d(%#x)",value,value);
		case 10:FormatString("Reserved for Tunnel Accounting, %d(%#x)",value,value);
		case 11:FormatString("Reserved for Tunnel Accounting, %d(%#x)",value,value);
		case 12:FormatString("Reserved for Tunnel Accounting, %d(%#x)",value,value);
		case 13:FormatString("Reserved for Tunnel Accounting, %d(%#x)",value,value);
		case 14:FormatString("Reserved for Tunnel Accounting, %d(%#x)",value,value);
		case 15:FormatString("Reserved for Failed, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}


// [RFC 2866    Page 16    5.6.  Acct-Authentic]
Table RadiusAcctAuthenticTable( value )
{
	switch( value )
	{
		case  1:FormatString("RADIUS, %d(%#x)",value,value);
		case  2:FormatString("Local, %d(%#x)",value,value);
		case  3:FormatString("Remote, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}


// [RFC 2866    Page 19    5.10.  Acct-Terminate-Cause]
Table RadiusAcctTerminateCauseTable( value )
{
	switch( value )
	{
		case  1:FormatString("User Request, %d(%#x)",value,value);
		case  2:FormatString("Lost Carrier, %d(%#x)",value,value);
		case  3:FormatString("Lost Service, %d(%#x)",value,value);
		case  4:FormatString("Idle Timeout, %d(%#x)",value,value);
		case  5:FormatString("Session Timeout, %d(%#x)",value,value);
		case  6:FormatString("Admin Reset, %d(%#x)",value,value);
		case  7:FormatString("Admin Reboot, %d(%#x)",value,value);
		case  8:FormatString("Port Error, %d(%#x)",value,value);
		case  9:FormatString("NAS Error, %d(%#x)",value,value);
		case 10:FormatString("NAS Request, %d(%#x)",value,value);
		case 11:FormatString("NAS Reboot, %d(%#x)",value,value);
		case 12:FormatString("Port Unneeded, %d(%#x)",value,value);
		case 13:FormatString("Port Preempted, %d(%#x)",value,value);
		case 14:FormatString("Port Suspended, %d(%#x)",value,value);
		case 15:FormatString("Service Unavailable, %d(%#x)",value,value);
		case 16:FormatString("Callback, %d(%#x)",value,value);
		case 17:FormatString("User Error, %d(%#x)",value,value);
		case 18:FormatString("Host Request, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}

// [RFC 2868    Page 2    3.1.  Tunnel-Type]
Table RadiusTunnelTypeTable( value )
{
	switch( value )
	{
		case  1:FormatString("Point-to-Point Tunneling Protocol (PPTP), %d(%#x)",value,value);
		case  2:FormatString("Layer Two Forwarding (L2F), %d(%#x)",value,value);
		case  3:FormatString("Layer Two Tunneling Protocol (L2TP), %d(%#x)",value,value);
		case  4:FormatString("Ascend Tunnel Management Protocol (ATMP), %d(%#x)",value,value);
		case  5:FormatString("Virtual Tunneling Protocol (VTP), %d(%#x)",value,value);
		case  6:FormatString("IP Authentication Header in the Tunnel-mode (AH), %d(%#x)",value,value);
		case  7:FormatString("IP-in-IP Encapsulation (IP-IP), %d(%#x)",value,value);
		case  8:FormatString("Minimal IP-in-IP Encapsulation (MIN-IP-IP), %d(%#x)",value,value);
		case  9:FormatString("IP Encapsulating Security Payload in the Tunnel-mode (ESP), %d(%#x)",value,value);
		case 10:FormatString("Generic Route Encapsulation (GRE), %d(%#x)",value,value);
		case 11:FormatString("Bay Dial Virtual Services (DVS), %d(%#x)",value,value);
		case 12:FormatString("IP-in-IP Tunneling, %d(%#x)",value,value);
		case 79617: FormatString("Vendor-Specific Value for Tunnel-Type RADIUS Attribute., %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}

// [RFC 2868    Page 3    3.2.  Tunnel-Medium-Type]
Table RadiusTunnelMediumTypeTable( value )
{
	switch( value )
	{
		case  1:FormatString("IPv4, %d(%#x)",value,value);
		case  2:FormatString("IPv6, %d(%#x)",value,value);
		case  3:FormatString("NSAP, %d(%#x)",value,value);
		case  4:FormatString("HDLC, %d(%#x)",value,value);
		case  5:FormatString("BBN 1822, %d(%#x)",value,value);
		case  6:FormatString("802, %d(%#x)",value,value);
		case  7:FormatString("E.163 (POTS), %d(%#x)",value,value);
		case  8:FormatString("E.164 (SMDS, Frame Relay, ATM), %d(%#x)",value,value);
		case  9:FormatString("F.69 (Telex), %d(%#x)",value,value);
		case 10:FormatString("X.121 (X.25, Frame Relay), %d(%#x)",value,value);
		case 11:FormatString("IPX, %d(%#x)",value,value);
		case 12:FormatString("Appletalk, %d(%#x)",value,value);
		case 13:FormatString("Decnet IV, %d(%#x)",value,value);
		case 14:FormatString("Banyan Vines, %d(%#x)",value,value);
		case 15:FormatString("E.164 with NSAP format subaddress, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}


// [RFC 2869    Page 26    5.6.  ARAP-Zone-Access]
Table RadiusARAPZoneAccessTable( value )
{
	switch( value )
	{
		case  1:FormatString("Only allow access to default zone, %d(%#x)",value,value);
		case  2:FormatString("Use zone filter inclusively, %d(%#x)",value,value);
		case  4:FormatString("Use zone filter exclusively, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}


// [RFC 2869    Page 29    5.10.  Prompt]
Table RadiusPromptTable( value )
{
	switch( value )
	{
		case  0:FormatString("No Echo, %d(%#x)",value,value);
		case  1:FormatString("Echo, %d(%#x)",value,value);
		default:"UndefinedValue";
	}
}

Table RadiusVendorTypePublicTable( value )
{
	switch( value )
	{
		case 1:  "MS-CHAP-Response";
		case 2:  "MS-CHAP-Error";
		case 3:  "MS-CHAP-CPW-1";
		case 4:  "MS-CHAP-CPW-2";
		case 5:  "MS-CHAP-LM-Enc-PW";
		case 6:  "MS-CHAP-NT-Enc-PW";
		case 7:  "MS-MPPE-Encryption-Policy";
		case 8:  "MS-MPPE-Encryption-Type";
		case 9:  "MS-RAS-Vendor";
		case 10: "MS-CHAP-Domain";
		case 11: "MS-CHAP-Challenge";
		case 12: "MS-CHAP-MPPE-Keys";
		case 13: "MS-BAP-Usage";
		case 14: "MS-Link-Utilization-Threshold";
		case 15: "MS-Link-Drop-Time-Limit";
		case 16: "MS-MPPE-Send-Key";
		case 17: "MS-MPPE-Recv-Key";
		case 18: "MS-RAS-Version";
		case 19: "MS-Old-ARAP-Password";
		case 20: "MS-New-ARAP-Password";
		case 21: "MS-ARAP-PW-Change-Reason";
		case 22: "MS-Filter";
		case 23: "MS-Acct-Auth-Type";
		case 24: "MS-Acct-EAP-Type";
		case 25: "MS-CHAP2-Response";
		case 26: "MS-CHAP2-Success";
		case 27: "MS-CHAP2-CPW";
		case 28: "MS-Primary-DNS-Server";
		case 29: "MS-Secondary-DNS-Server";
		case 30: "MS-Primary-NBNS-Server";
		case 31: "MS-Secondary-NBNS-Server";
		case 33: "MS-ARAP-Challenge";
		default: "UndefinedValue";
	}
}

Table RadiusMSAttrCHAPResponseFlagTable( value )
{
	switch( value )
	{
		case 0: "NT-Response field MUST be ignored and the LM-Response field used";
		case 1: "NT-Response SHOULD be tried first";
		default:"UndefinedValue";
	}
}

Table RadiusMSAttrMPPEEncryptionPolicyTable( value )
{
	switch( value )
	{
		case 1: "Encryption-Allowed";
		case 2: "Encryption-Required";
		default:"UndefinedValue";
	}
}

Table RadiusMSAttrBAPUsageTable( value )
{
	switch( value )
	{
		case 0: "BAP usage not allowed";
		case 1: "BAP usage allowed";
		case 2: "BAP usage required";
		default:"UndefinedValue";
	}
}

Table RadiusMSAttrARAPPasswordChangeReasonTable( value )
{
	switch( value )
	{
		case 1: "Just-Change-Password";
		case 2: "Expired-Password";
		case 3: "Admin-Requires-Password-Change";
		case 4: "Password-Too-Short";
		default:"UndefinedValue";
	}
}

Table RadiusMSAttrAcctAuthTypeTable( value )
{
	switch( value )
	{
		case 1: "PAP";
		case 2: "CPAP";
		case 3: "MS-CHAP-1";
		case 4: "MS-CHAP-2";
		case 5: "EAP";
		default:"UndefinedValue";
	}
}

Table RadiusMSAttrAcctEAPTypeTable( value )
{
	switch( value )
	{
		case 4: "MD5";
		case 5: "OTP";
		case 6: "Generic Token Card";
		case 13: "TLS";
		default:"UndefinedValue";
	}
}

struct RADIUSAttributeUserName=this.UserName  //1
{
	UINT8 Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8 Length;
	[Post.conversation.ConversationDescription = FormatString("((ID: %u) - %s) ConvID = %d", RADIUSId, this, ConvID)]
	AsciiString(Length-2) UserName;
}

struct  RADIUSAttributeUserPassword  //2
{
	UINT8 Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8 Length;
	BLOB(Length-2) UserPassword;
}

struct RADIUSAttributeChapPassword  //3
{
	UINT8 Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8 Length;
	UINT8 ChapIdent;
	BLOB(Length-3) ChapIdentValue;
};


struct RADIUSAttributeIPv4Address=this.NasIPAddress.ToString  //4
{
	UINT8 Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8 Length;
	IPv4Address NasIPAddress;
}

struct RADIUSAttributeNasPort=FormatString("%u", this.NasPort)  //5
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 NasPort;
}

struct RADIUSAttributeServiceType=this.ServiceType.ToString  //6
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 ServiceType = RadiusServiceTypeTable( this );
}

struct RADIUSAttributeFramedProtocol=this.FramedProtocol.ToString  //7
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 FramedProtocol = RadiusFramedProtocolTable( this );
}

struct RADIUSAttributeFramedIPAddress=this.FramedIPAddress.ToString  //8
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	IPv4Address FramedIPAddress;
}

struct RADIUSAttributeFramedIPNetmask=this.FramedIPNetmask.ToString  //9
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	IPv4Address FramedIPNetmask;
}

struct RADIUSAttributeFramedRouting=this.FramedRouting.ToString  //10
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 FramedRouting = RadiusFrameRoutingTable( this ) ;
}

struct RADIUSAttributeFilterID=this.FilterID.ToString  //11
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) FilterID;
}

struct RADIUSAttributeFramedMTU=FormatString("%u", this.FramedMTU) //12
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 FramedMTU;
}

struct RADIUSAttributeFramedCompression=this.FramedCompression.ToString //13
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 FramedCompression = RadiusFramedCompressionTable( this );
}

struct RADIUSAttributeLoginIPHost=this.LoginIPHost.ToString //14
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	IPv4Address LoginIPHost=IPv4AddressTable(this);
}

struct RADIUSAttributeLoginService=this.LoginService.ToString//15
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 LoginService = RadiusLoginServiceTable( this );
}

struct RADIUSAttributeLoginTCPPort=FormatString("%u", LoginTCPPort)//16
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 LoginTCPPort;
}

struct RADIUSAttributeReplyMessage//18
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) ReplyMessage;
}

struct RADIUSAttributeCallbackNumber//19
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) CallbackNumber;
}

struct RADIUSAttributeCallbackId //20
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) CallbackId;
}

struct RADIUSAttributeFramedRoute //22
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) FramedRoute;
}

//# rfc 2865 page 45
Table RADIUSAttrFramedIPXNetworkTable(value)
{
	switch(FormatString("%#x",value))
	{
		case "0xfffffffe":FormatString("%02X%02X%02X%02X - NAS should select an IPX network for the user ",value[3],value[2],value[1],value[0]);
		default          :FormatString("%02X%02X%02X%02X - Used as the IPX network for the link to the user",value[3],value[2],value[1],value[0]);
	}
}

struct RADIUSAttributeFramedIPXNetwork=this.FramedIPXNetwork.ToString //23
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 FramedIPXNetwork = RADIUSAttrFramedIPXNetworkTable(this);
}

struct RADIUSAttributeState //24
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) State;
}

struct RADIUSAttributeClass //25
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) Class;
}

struct RADIUSAttributeVendorSpecific //26
{
	UINT8 Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8 Length;
	UINT32 VendorID = FormatString("%s, %u(0x%X)", EnterpriseNumberTable(this), this, this);
	switch (VendorID)
	{
		//# http://netweb/sites/Network%20Infrastructure%20Services/Network%20Infrastructure%20Services/IAS/DEV/W2k3%20IAS%20General/EAP-TLV.txt
		case 311:
			switch
			{
				case UINT8(FrameData, FrameOffset) <= 0x21:
					// RFC 2548
					struct RadiusMSSpecificPublicTLV= FormatString("%s, %u(0x%X)", RadiusVendorTypePublicTable( VendorType ), this, this)
					{
						UINT8 VendorType = FormatString("%s, %u(0x%X)", RadiusVendorTypePublicTable( this ), this, this);
						UINT8 VendorLength;
						switch (VendorType)
						{
							case 11:
								_struct MSCHAPChallenge
								{
									AsciiString(VendorLength - 2) ChallengeString;
								}
							case 1:
								_struct MSCHAPResponse
								{
									UINT8 Ident;
									UINT8 Flags = FormatString("%s, %u(0x%X)", RadiusMSAttrCHAPResponseFlagTable(this), this, this);
									BLOB(24) LMResponse;
									BLOB(24) NTResponse;
								}
							case 10:
								_struct MSCHAPDomain
								{
									UINT8 Ident;
									AsciiString(VendorLength - 3) DomainName;
								}
							case 2:
								_struct MSCHAPError
								{
									UINT8 Ident;
									AsciiString(VendorLength - 3) ErrorString;
								}
							case 3:
								_struct MSCHAPCPW1
								{
									UINT8 Code = "Set to 5";
									UINT8 Ident;
									BLOB(16) LMOldPassword;
									BLOB(16) LMNewPassword;
									BLOB(16) NTOldPassword;
									BLOB(16) NTNewPassword;
									UINT16 NewLMPasswordLength;
									UINT16 Flags
									{
										UINT16 Unused:15 = FormatString("(%s)", this.ToBitString);
										UINT16 Flag:1 = FormatString("  (%s) %s", this.ToBitString, this ? "NT-New-Password and NT-Old-Password SHOULD be  used" : 
																											"LM-New-Password and LM-Old-Password fields MUST be used");
									};
								}
							case 4:
								_struct MSCHAPCPW2
								{
									UINT8 Code = "Set to 6";
									UINT8 Ident;
									BLOB(16) OldNTHash;
									BLOB(16) OldLMHash;
									BLOB(24) LMResponse;
									BLOB(24) NTResponse;
									UINT16 Flags
									{
										UINT16 Unused:15 = FormatString("(%s)", this.ToBitString);
										UINT16 Flag:1 = FormatString("  (%s) %s", this.ToBitString, this ? "NT-Response field is to be used in preference to the LM-Response field for authentication" : 
																											"NT-Response field MUST be ignored and the LM-Response field used instead");
									};
								}
							case 5:
								_struct MSCHAPLMEncPW
								{
									UINT8 Code = "Set to 6";
									UINT8 Ident;
									UINT16 SequenceNumber;
									AsciiString(VendorLength - 6) PortionOfEncryptedPwd;
								}
							case 6:
								_struct MSCHAPNTEncPW
								{
									UINT8 Code = "Set to 6";
									UINT8 Ident;
									UINT16 SequenceNumber;
									AsciiString(VendorLength - 6) PortionOfEncryptedPwd;
								}
							case 25:
								_struct MSCHAP2Response
								{
									UINT8 Ident;
									UINT8 Flags = "Reserved, Must be 0";
									BLOB(16) PeerChallenge;
									BLOB(8) Reserved = "Must be 0";
									BLOB(24) Response;
								}
							case 26:
								_struct MSCHAP2Success
								{
									UINT8 Ident;
									AsciiString(42) AuthenticatorString;
								}
							case 27:
								_struct MSCHAP2PW
								{
									UINT8 Code;
									UINT8 Ident;
									BLOB(16) EncryptedHash;
									BLOB(24) NTResponse;
									UINT16 Flags = "Reserved, Must be 0";
								}
							case 12:
								_struct MSCHAPMPPEKeys
								{
									BLOB(32) Keys
									{
										BLOB(8) LMKey;
										BLOB(16) NTKey;
										BLOB(8) Padding;
									};
								}
							case 16:
								_struct MSMPPESendKey
								{
									UINT16 Salt;
									BLOB(VendorLength - 4) EncryptedKey;
									
								}
							case 17:
								_struct MSMPPERecvKey
								{
									UINT16 Salt;
									BLOB(VendorLength - 4) EncryptedKey;
								}
							case 7:
								_struct MSMPPEEncryptionPolicy
								{
									UINT32 Policy = FormatString("%s, %u(0x%X)", RadiusMSAttrMPPEEncryptionPolicyTable(this), this, this);
								}
							case 8:
								_struct MSMPPEEncryptionTypes
								{
									UINT32 Types
									{
										UINT32 Unused1:29 = FormatString("(%s)", this.ToBitString);
										UINT32 S:1 = FormatString("      (%s) %s", this.ToBitString, this ? "RC4 using 128-bit key is allowed" : "RC4 using 128-bit key is NOT allowed");
										UINT32 L:1 = FormatString("      (%s) %s", this.ToBitString, this ? "RC4 using 40-bit key is allowed" : "RC4 using 40-bit key is NOT allowed");
										UINT32 Unused2:29 = FormatString("(%s)", this.ToBitString);
									};
								}
							case 13:
								_struct MSBAPUsage
								{
									UINT32 Value = FormatString("%s, %u(0x%X)", RadiusMSAttrBAPUsageTable(this), this, this);
								}
							case 14:
								_struct MSLinkUtilizationThreshold
								{
									UINT32 Value;
								}
							case 15:
								_struct MSLinkDropTimeLimit
								{
									UINT32 Value;
								}
							case 19:
								_struct MSOldARAPPassword
								{
									BLOB(VendorLength - 2) EncryptedOldARAPPwd;
								}
							case 20:
								_struct MSNewARAPPassword
								{
									BLOB(VendorLength - 2) EncryptedNewARAPPwd;
								}
							case 21:
								_struct MSARAPPasswordChangeReason
								{
									UINT32 Why = FormatString("%s, %u(0x%X)", RadiusMSAttrARAPPasswordChangeReasonTable(this), this, this);
								}
							case 33:
								_struct MSARAPChallenge
								{
									BLOB(8) Challenge;
								}
							case 9:
								_struct MSRASVendor
								{
									UINT32 VendorID = FormatString("%s, %u(0x%X)", EnterpriseNumberTable(this), this, this);
								}
							case 18:
								_struct MSRASVersion
								{
									BLOB(VendorLength - 2) VendorSpecific;
								}
							case 22:
								_struct MSFilter
								{
									BLOB(VendorLength - 2) Filter;
								}
							case 23:
								_struct MSAcctAuthType
								{
									UINT32 AuthType = FormatString("%s, %u(0x%X)", RadiusMSAttrAcctAuthTypeTable(this), this, this);
								}
							case 24:
								_struct MSAcctEAPType
								{
									UINT32 AuthType = FormatString("%s, %u(0x%X)", RadiusMSAttrAcctEAPTypeTable(this), this, this);
								}
							case 28:
								_struct MSPrimaryDNSServer
								{
									IPv4Address IPAddress;
								}
							case 29:
								_struct MSSecondaryDNSServer
								{
									IPv4Address IPAddress;
								}
							case 30:
								_struct MSPrimaryNBNSServer
								{
									IPv4Address IPAddress;
								}
							case 31:
								_struct MSSecondaryNBNSServer
								{
									IPv4Address IPAddress;
								}
						}
					}
				default:
					RNAP(Length) RNAP;
			}
		default:
			BLOB(Length - 6) VendorSpecificData;
	}
}

struct RADIUSAttributeSessionTimeout = FormatString("%u", this.SessionTimeout) //27
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 SessionTimeout;
}

struct RADIUSAttributeIdleTimeout = FormatString("%u", this.IdleTimeout) //28
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 IdleTimeout;
}

struct RADIUSAttributeTerminationAction = this.TerminationAction.ToString //29
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 TerminationAction=RadiusTerminationActionTable(this);
}

struct RADIUSAttributeCalledStationID = CalledStationID //30
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	AsciiString(Length-2) CalledStationID;
}


struct RADIUSAttributeCallingStationID = CallingStationID //31
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	AsciiString(Length-2) CallingStationID;
}

struct RADIUSAttributeNASIdentifier = NASIdentifier //32
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	AsciiString(Length-2) NASIdentifier;
}

struct RADIUSAttributeProxyState //33
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) ProxyState;
}

struct RADIUSAttributeLoginLATService //34
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) LoginLATService;
}

struct RADIUSAttributeLoginLATNode//35
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) LoginLATNode;
}

struct RADIUSAttributeLoginLATGroup//36
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) LoginLATGroup;
}

struct RADIUSAttributeFramedAppleTalkLink//37
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 FramedAppleTalkLink;
}

struct RADIUSAttributeFramedAppleTalkNetwork//38
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 FramedAppleTalkNetwork;
}

struct RADIUSAttributeFramedAppleTalkZone//39
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) FramedAppleTalkZone;
}

struct RADIUSAttributeAcctStatusType = this.AcctStatusType.ToString//40
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctStatusType = RadiusAcctStatusTypeTable( this );
}

struct RADIUSAttributeAcctDelayTime = FormatString("%u", this.AcctDelayTime)//41
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctDelayTime;
}

struct RADIUSAttributeAcctInputOctets = FormatString("%u", this.AcctInputOctets)//42
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctInputOctets;
}

struct RADIUSAttributeAcctOutputOctets = FormatString("%u", this.AcctOutputOctets)//43
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctOutputOctets;
}

struct RADIUSAttributeAcctSessionID = AcctSessionID//44
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	AsciiString(Length-2) AcctSessionID;
}

struct RADIUSAttributeAcctAuthentic = this.AcctAuthentic.ToString//45
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctAuthentic = RadiusAcctAuthenticTable( this );
}

struct RADIUSAttributeAcctSessionTime = FormatString("%u", this.AcctSessionTime)//46
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctSessionTime;
}

struct RADIUSAttributeAcctInputPackets = FormatString("%u", this.AcctInputPackets)//47
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctInputPackets;
}

struct RADIUSAttributeAcctOutputPackets = FormatString("%u", this.AcctOutputPackets)//48
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctOutputPackets;
}

struct RADIUSAttributeRadiusAcctTerminateCause = this.AcctTerminateCause.ToString//49
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctTerminateCause = RadiusAcctTerminateCauseTable( this );
}

struct RADIUSAttributeAcctMultiSessionID = AcctMultiSessionID//50
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	AsciiString(Length-2) AcctMultiSessionID;
}

struct RADIUSAttributeAcctLinkCount = FormatString("%u", this.AcctLinkCount)//51
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctLinkCount;
}

struct RADIUSAttributeAcctInputGigawords = FormatString("%u", this.AcctInputGigawords) //52
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctInputGigawords;
}

struct RADIUSAttributeAcctOutputGigawords = FormatString("%u", this.AcctOutputGigawords) //53
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctOutputGigawords;
}
struct RADIUSAttributeEventTimestamp = FormatString("%u", this.EventTimestamp) //55
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 EventTimestamp;
}
struct RADIUSAttributeCHAPChallenge  //60
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) CHAPChallenge;
}
struct RADIUSAttributeRadiusNASPortType = this.NASPortType.ToString //61
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 NASPortType = RadiusNASPortTypeTable( this );
}

struct RADIUSAttributePortLimit = FormatString("%u", this.PortLimit)  //62
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 PortLimit;
}

struct RADIUSAttributeLoginLATPort //63
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) LoginLATPort;
}

struct RADIUSAttributeTunnelType = this.Value.ToString //64
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Tag;
	UINT24 Value = RadiusTunnelTypeTable( this );
}

struct RADIUSAttributeTunnelMediumType = this.Value.ToString //65
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Tag;
	UINT24 Value = RadiusTunnelMediumTypeTable( this );
}

struct RADIUSAttributeTunnelClientEndpoint  //66
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Tag;
	BLOB(Length-3) Value;
}

struct RADIUSAttributeTunnelServerEndpoint //67
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Tag;
	BLOB(Length-3) Value;
}

struct RADIUSAttributeTunnelPassword //69
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Tag;
	UINT16 Salt;
	BLOB(Length-5) Value;
}


struct RADIUSAttributeARAPPassword  //70
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	struct UserChallenge
	{
		UINT32 Value1 = FormatString("%X %X %X %X ", this[3], this[2], this[1], this[0]);
		UINT32 Value2 = FormatString("%X %X %X %X ", this[3], this[2], this[1], this[0]);
	}
	struct UserResponse
	{
		UINT32 Value1 = FormatString("%X %X %X %X ", this[3], this[2], this[1], this[0]);
		UINT32 Value2 = FormatString("%X %X %X %X ", this[3], this[2], this[1], this[0]);
	}

}


struct RADIUSAttributeARAPFeatures //71
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  WhetherUserCanChangePassword;
	UINT8  MinimumPasswordLength;
	UINT32 PasswordCreationDateInMacFormat;
	UINT32 PasswordExpirationDateInMacFormat;
	UINT32 CurrentRADIUSTimeInMacFormat;
}

struct RADIUSAttributeARAPZoneAccess = this.ARAPZoneAccess.ToString //72
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 ARAPZoneAccess = RadiusARAPZoneAccessTable( this );
}

struct RADIUSAttributeARAPSecurity //73
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 ARAPSecurity;
}

struct RADIUSAttributeARAPSecurityData //74
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) ARAPSecurityData;
}

struct RADIUSAttributePasswordRetry //75
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 PasswordRetry;
}

struct RADIUSAttributePrompt = this.Prompt.ToString //76
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 Prompt = RadiusPromptTable( this );
}

struct RADIUSAttributeConnectInfo //77
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) ConnectInfo;
}

struct RADIUSAttributeConfigurationToken //78
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) ConfigurationToken;
}

struct RADIUSAttributeEAPMessage //79
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	[Post.RADIUS_SeenEAP=TRUE]
	switch
	{
		case !RADIUS_SeenEAP:
			[DataFieldFrameLength = frameOffset + Length - 2, EmbeddedProtocol]
			EAP EAPMessage;
		default:
			Blob(Length-2) EAPContinuationMessage;
	}
}

struct RADIUSAttributeMessageAuthenticator //80
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) MessageAuthenticator;
}

struct RADIUSAttributeTunnelPrivateGroupID //81
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Tag;
	BLOB(Length-3) Value;
}

struct RADIUSAttributeTunnelAssignmentID //82
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Tag;
	BLOB(Length-3) Value;
}

struct RADIUSAttributeTunnelPreference //83
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Tag;
	UINT24 Value;
}


struct RADIUSAttributeARAPChallengeResponse //84
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) ARAPChallengeResponse;
}

struct RADIUSAttributeAcctInterimInterval = FormatString("%u", this.AcctInterimInterval) //85
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT32 AcctInterimInterval;
}

struct RADIUSAttributeNASPortID //87
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) NASPortID;
}

struct RADIUSAttributeFramedPool //88
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) FramedPool;
}

struct RADIUSAttributeTunnelClientAuthID //90
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Tag;
	BLOB(Length-3) Value;
}

struct RADIUSAttributeTunnelServerAuthID //91
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Tag;
	BLOB(Length-3) Value;
}

struct RADIUSAttributeNASIPv6Address = this.NASIPv6Address.ToString//95
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	IPv6Address NASIPv6Address;
}

struct RADIUSAttributeInterfaceID //96
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	RADIUSInterface InterfaceID;
}

struct RADIUSAttributeFramedIPv6Prefix //97
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	UINT8  Reserved;
	UINT8  PrefixLength;
	BLOB(Length-4) Prefix;
}

struct RADIUSAttributeLoginIPv6Host = this.LoginIPv6Host.ToString //98
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	IPv6Address LoginIPv6Host;
}

struct RADIUSAttributeFramedIPv6Route //99
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) FramedIPv6Route;
}

struct RADIUSAttributeFramedIPv6Pool //100
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) FramedIPv6Pool;
}

struct RADIUSAttributeDefault = FormatString("Type: %s", RADIUSAttributeTypeTable(this.Type))
{
	UINT8  Type = FormatString("%s, %d(%#x)",RADIUSAttributeTypeTable( this ),this,this);
	UINT8  Length;
	BLOB(Length-2) Content;
}

// [RFC 2866    Page 13    3.  Packet Format]
UnsignedNumber RADIUSAuth
{
	size = 16;
	DisplayFormat = FormatString("%02X %02X %02X %02X  %02X %02X %02X %02X  %02X %02X %02X %02X  %02X %02X %02X %02X",
								this[15],this[14],this[13],this[12],this[11],this[10],this[9],this[8],
								this[7], this[6], this[5], this[4], this[3], this[2], this[1],this[0]
								);
}

// [RFC 3612    Page 2    3.2.  Framed-Interface-Id]
UnsignedNumber RADIUSInterface
{
	size = 8;
	DisplayFormat = FormatString("%02X %02X %02X %02X  %02X %02X %02X %02X ",
								this[7],this[6],this[5],this[4],this[3],this[2],this[1],this[0]
								);
}


