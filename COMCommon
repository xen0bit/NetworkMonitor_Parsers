//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Distributed Component Object Model (DCOM) Remote Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-COM]: Component Object Model Plus (COM+) Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 3/2/2010
//#
//####

///////////////////////////////////////////////////////////////////////////////////
[Property.COMSummary]
Protocol COM
	= FormatString( "%s%s%s",
	COMITransactionStreamMethodTable( Property.MSRPCOpnum ),
	Property.MSRPCPType ? " Response" : " Request",
	Property.COMSummary ? ", " + Property.COMSummary : "" )
{
	switch( Property.MSRPCopnum )
	{
	case 0x03:
		_struct DCOMGetSeqAndTxViaExport
		{
			switch( Property.MSRPCptype )
			{
			case 0x00:
				_struct Request
				{
					switch 
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							Struct
							{
								UINT32						KnownSequence;
								UINT32						WhereaboutsSize;
								NdrConformant size;
								DTCOSWhereabouts Whereabouts;
							}
					}
				}
			case 0x02:
				_struct Response
				{
					switch 
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							Struct
							{
								UINT32							CurrentSequence;
								UINT32							ExportCookieSize;
								NdrPtr		ExportCookiePtr;
								switch
								{
									case ExportCookiePtr.ReferentId:
									struct
									{
										NdrConformant size;
										DTCOSTxInfo ExportCookie;
									}
								}
								Align4 Pad;
								HResult							ReturnValue;
							}
					}
				}
			}
		}
	case 0x04:
		_struct DCOMGetSeqAndTxViaTransmitter
		{
			switch( Property.MSRPCptype )
			{
			case 0x00:
				_struct Request
				{
					switch 
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							Struct
							{
								UINT32					KnownSequence;
							}
					}
				}
			case 0x02:
				_struct Response
				{
					switch 
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							Struct
							{
								UINT32							CurrentSequence;
								UINT32							TransmitterBufferSize;
								NdrPtr		TransmitterBufferPtr;
								switch
								{
									case TransmitterBufferPtr.ReferentId:
									struct
									{
										NdrConformant size;
										DTCOPropagationToken TransmitterBuffer;
									}
								}
								Align4 Pad;					
								HResult							ReturnValue;
							}
					}
				}
			}
		}
	case 0x05:
		_struct DCOMGetTxViaExport
		{
			switch( Property.MSRPCptype )
			{
			case 0x00:
				_struct Request
				{
					switch 
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							Struct
							{
								UINT32						RequestSequence;
								UINT32						WhereaboutsSize;
								NdrConformant size;
								DTCOSWhereabouts Whereabouts;
							}
					}
				}
			case 0x02:
				_struct Response
				{
					switch 
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							Struct
							{
								UINT32							ExportCookieSize;
								NdrPtr		ExportCookiePtr;
								switch
								{
									case ExportCookiePtr.ReferentId:
									struct
									{
										NdrConformant size;
										DTCOSTxInfo ExportCookie;
									}
								}
								Align4 Pad;
								HResult							ReturnValue;
							}
					}
				}
			}
		}
	case 0x06:
		_struct DCOMGetTxViaTransmitter
		{
			switch( Property.MSRPCptype )
			{
			case 0x00:
				_struct Request
				{
					switch 
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							Struct
							{
								UINT32					RequestSequence;
							}
					}
				}
			case 0x02:
				_struct Response
				{
					switch 
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							Struct
							{
								UINT32							TransmitterBufferSize;
								NdrPtr		TransmitterBufferPtr;
								switch
								{
									case TransmitterBufferPtr.ReferentId:
									struct
									{
										NdrConformant size;
										DTCOPropagationToken TransmitterBuffer;
									}
								}
								Align4 Pad;
								HResult							ReturnValue;
							}
					}
				}
			}
		}
	}
}
//========= TABLES ==========================================================================================

table COMITransactionStreamMethodTable( value )
{
	switch( value )
	{
	case 3: "ITransactionStream:GetSeqAndTxViaExport";
	case 4: "ITransactionStream:GetSeqAndTxViaTransmitter";
	case 5: "ITransactionStream:GetTxViaExport";
	case 6: "ITransactionStream:GetTxViaTransmitter";
	}
}

table COMPlusUserPropTypeTable( value )
{
	switch( value )
	{
	case 0x0008: "Length Prefixed Name";
	case 0x0009: "Object Reference";
	case 0x000D: "Object Reference";
	}
}

table COMPLusTransEnvPropDtcCapsTable( value )
{
	switch( value )
	{
	case 0x0001: "Can Export - Transaction export/import functionality supported";
	case 0x0002: "Can Transmit - Transaction transmitter/receiver functionality supported";
	}
}

//===== COM+ struct TYPES ==============================================================================================
struct COMPlusLengthPrefixedName = Length > 0 ? UnicodeString( Name, 0, Length ) : "EMPTY"
{ // NO null terminator.
	UINT32		Length;
	WCHAR		Name[ Length ];
}

struct COMPLusTransactionContextPropertyHeader
{
	[Property.DCOMTransactionContextPropertyHeaderMaxVersion]
	UINT16			MaxVersion;
	UINT16			MinVersion;
	UINT16			Variant;
	GUID(TRUE)		StreamID;
	UINT16			StreamVariant;
	switch( StreamVariant )
	{
	case 1:
		COMPlusTransactionStream		Stream;
	case 2:
		COMPlusTransactionBuffer		Buffer;	
	}
}

struct COMPlusTransactionStream
{
	UINT16			DTCOCapabilities;
	UINT32			MarshalSize;
	DCOMObjRef		TransactionStream;
	switch
	{
	case Property.DCOMTransactionContextPropertyHeaderMaxVersion == 2:
		UINT32		IsolationLevel;
	}
}

struct COMPlusTransactionBuffer
{
	UINT32			BufferSize;
	UINT8			TransactionBuffer[ BufferSize ];
	switch
	{
	case Property.DCOMTransactionContextPropertyHeaderMaxVersion == 2:
		UINT32		IsolationLevel;
	}
}

struct COMPlusActivityContextProperty
{
	UINT16			MaxVersion;
	UINT16			MinVersion;
	GUID(TRUE)		ActivityID;
	UINT32			Timeout;
}

struct COMPlusUserDefinedContextProperty
{
	UINT16					MaxVersion;
	UINT16					MinVersion;
	UINT16					PropertyCount;
	COMPlusUserProperty	Properties[ PropertyCount ];
}

struct COMPlusUserProperty
{
	UINT16							MaxVersion;
	UINT16							MinVersion;
	COMPlusLengthPrefixedName		Name;
	UINT16							PropertyType = COMPlusUserPropTypeTable( this );
	BLOB(14)						Unused;
	switch( PropertyType )
	{
	case 0x0008:
		COMPlusLengthPrefixedName		NameValue;
	case 0x0009:
		DCOMConformantObjRef			ObjRefValue1;
	case 0x000D:
		DCOMConformantObjRef			ObjRefValue2;
	}
}

struct COMPlusTransactionPropCallOrpcExtension
{
	UINT16			MaxVersion;
	UINT16			MinVersion;
	UINT32			SequenceNumber;
	UINT16			Flags;
	UINT16			Variant;
	switch( Variant )
	{
	case 2:
		COMPlusTransactionPropCallExportCookie			Cookie;
	case 3:
		COMPlusTransactionPropCallTransmitterBuffer	Buffer;	
	}
}

struct COMPlusTransactionPropCallExportCookie
{
	UINT16			ExportCookieCount;
	UINT8			ExportCookie[ ExportCookieCount ]; // Defined in MS-DTCO
}

struct COMPlusTransactionPropCallTransmitterBuffer
{
	UINT16								TransmitterBufferCount;
	BLOB( TransmitterBufferCount )		TransmitterBuffer; // Defined in MS-DTCO
}

struct COMPlusTransactionPropRetOrpcExtension
{
	UINT16			MaxVersion;
	UINT16			MinVersion;
	UINT16			Flags;
	UINT16			Variant;
	switch
	{
	case Variant == 1:
		COMPlusTransactionPropRetWhereabouts		Whereabouts;
	}
}

struct COMPlusTransactionPropRetWhereabouts
{
	UINT16			WhereaboutsCount;
	UINT8			Whereabouts[ WhereaboutsCount ]; // Defined in MS-DTCO
}

struct COMPlusSecurityOrpcExtension
{
	UINT16			MaxVersion;
	UINT16			MinVersion;
	UINT16			Style;
	switch
	{
	case Style == 0:
		_struct
		{
			UINT16									CollectionsCount;
			COMPlusSecurityPropertyCollection		Collections[ CollectionsCount ];
		}
	}
}

struct COMPlusSecurityPropertyCollection
{
	COMPlusSecurityPropertyCollectionHeader	Header;
	COMPlusSecurityProperty					Properties[ Header.PropertiesCount ];
}

struct COMPlusSecurityPropertyCollectionHeader
{
	UINT16		CollectionType;
	UINT16		PropertiesCount;
}

struct COMPlusSecurityProperty
{
	UINT16					PropertyType;
	UINT16					Size;
	switch( PropertyType )
	{
	case 0xB01:
	case 0xB06:		
		SID( Size )		SecurityID1;
	case 0xB02:
	case 0xB07:
		WCHAR			AccountName[ Size/2 ];
	case 0xB03:
		UINT32			AuthenticationService = DCOMAuthenticationServiceTable( this );
	case 0xB04:
		UINT32			AuthenticationLevel = DCOMRpccAuthenticationTable( this );
	case 0xB05:
		UINT32			ImpersonationLevel = DCOMClientImpersonationLevelTable( this );
	case 0xB10:
		UINT32			MinimumAuthenticationLevel = DCOMRpccAuthenticationTable( this );
	default:
		BLOB( Size )	UnknownProperty;
	}
}

struct COMPlusTransactionEnvoyProperty
{
	UINT16			MaxVersion;
	UINT16			MinVersion;
	GUID(TRUE)		SreamID;
	GUID(TRUE)		WhereaboutsID;
	UINT16			DTCOCapabilities = COMPLusTransEnvPropDtcCapsTable( this );
}

struct COMPlusSecurityEnvoyProperty
{
	UINT16			MaxVersion;
	UINT16			MinVersion;
	GUID(TRUE)		ServerDomainID;
	GUID(TRUE)		ServerMachineID;
}

struct COMPlusClassFactory
{
	UINT16										MaxVersion;
	UINT16										MinVersion;
	GUID(TRUE)									ClassID;
	COMPlusLengthPrefixedName					ServerName;
	switch
	{
	case MaxVersion > 1: // Version 2 and later.
		_struct
		{
			UINT32							ShortNameCount;
			COMPlusLengthPrefixedName		ShortName[ ShortNameCount ];
		}
	}
	switch
	{
	case MaxVersion > 2: // Version 3 and later.
		GUID(TRUE)							PartitionID;
	}
	switch
	{
	case MaxVersion > 3: // Version 4 and later.
		UINT32								ClassContext;
	}
	switch
	{
	case MaxVersion > 4: // Version 5 and later.
		_struct
		{
			UINT32							BytesRemaining;
			UINT32							LongNameCount;
			UINT32							LongNameByteCount;
			UnicodeString					LongNames[ LongNameCount ];
		}
	}
}


 
