//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  DirectPlay 8 Protocol: Reliable
//#
//#  Details:                
//#
//#  Microsoft References:   [MC-DPL8R]: DirectPlay 8 Reliable Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 3/3/2010
//#                          Minor, 3/31/2010
//#
//####

[DataTypeByteOrder=LittleEndian]
Protocol DPL8R = DPDXSummary
{
	[Conversation.ConnectSignedMVS$[Framenumber] = Conversation.ConnectSignedConv]
	[Property.DPL8RConnectSigned = Conversation.ConnectSignedMVS$[Framenumber]]
	Switch( UINT8( Framedata, Offset + 1 ) )
	{
		Case 0x01: [DPDXSummary = this.ToString] DPL8RConnect Connect;
		Case 0x02: [DPDXSummary = this.ToString] DPL8RConnected Connected;
		Case 0x03: [DPDXSummary = this.ToString] DPL8RConnectedSigned ConnectedSigned;
		Case 0x04: [DPDXSummary = this.ToString] DPL8RHardDisconnect HardDisconnect;
		Case 0x06: [DPDXSummary = this.ToString] DPL8RSack Sack;
	}
}

[ Conversation.ConnectSignedConv = false ]
Struct DPL8RConnect = Property.DPL8RMessageType
{
	UINT8 Command
	{
		UINT8 Reserved1:3 = FormatString("            (%s)",this.ToBitString);
		UINT8 PACKET_COMMAND_POLL:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Acknowledge immediately." : "NOT acknowledge immediately.");
		UINT8 Reserved2:3 = FormatString("            (%s)",this.ToBitString);
		UINT8 PACKET_COMMAND_CFRAME:1 = FormatString("(%s) %s", this.ToBitString, this ? "Command frame (CFRAME)." : "NOT command frame (CFRAME).");
	};
	[ Property.DPL8RMessageType = DPL8RExtOpCodeTable(this) ]
	UINT8 ExtOpCode = DPL8RExtOpCodeTable(this);
	UINT8 MsgId;
	UINT8 RspId;
	UINT32 CurrentProtocolVersion = CurrentProtocolVersionTable(this);
	UINT32 SessId;
	UINT32 Timestamp;
}

Struct DPL8RConnected = Property.DPL8RMessageType
{
	UINT8 Command
	{
		UINT8 Reserved1:3 = FormatString("            (%s)",this.ToBitString);
		UINT8 PACKET_COMMAND_POLL:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Acknowledge immediately." : "NOT acknowledge immediately.");
		UINT8 Reserved2:3 = FormatString("            (%s)",this.ToBitString);
		UINT8 PACKET_COMMAND_CFRAME:1 = FormatString("(%s) %s", this.ToBitString, this ? "Command frame (CFRAME)." : "NOT command frame (CFRAME).");
	};
	[ Property.DPL8RMessageType = DPL8RExtOpCodeTable(this) ]
	UINT8 ExtOpCode = DPL8RExtOpCodeTable(this);
	UINT8 MsgId;
	UINT8 RspId;
	UINT32 CurrentProtocolVersion = CurrentProtocolVersionTable(this);
	UINT32 SessId;
	UINT32 Timestamp;
}

[ Conversation.ConnectSignedConv = True ]
Struct DPL8RConnectedSigned = Property.DPL8RMessageType
{
	UINT8 Command
	{
		UINT8 Reserved1:3 = FormatString("            (%s)",this.ToBitString);
		UINT8 PACKET_COMMAND_POLL:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Acknowledge immediately." : "NOT acknowledge immediately.");
		UINT8 Reserved2:3 = FormatString("            (%s)",this.ToBitString);
		UINT8 PACKET_COMMAND_CFRAME:1 = FormatString("(%s) %s", this.ToBitString, this ? "Command frame (CFRAME)." : "NOT command frame (CFRAME).");
	};
	[ Property.DPL8RMessageType = DPL8RExtOpCodeTable(this) ]
	UINT8 ExtOpCode = DPL8RExtOpCodeTable(this);
	UINT8 MsgId;
	UINT8 RspId;
	UINT32 CurrentProtocolVersion = CurrentProtocolVersionTable(this);
	UINT32 SessId;
	UINT32 Timestamp;
	UINT64 ConnectSig;
	UINT64 SenderSecret;
	UINT64 ReceiverSecret;
	UINT32 SigningOpts = DPL8RSigningOptsTable(this);
	UINT32 EchoTimestamp;
}

Struct DPL8RHardDisconnect = Property.DPL8RMessageType
{
	UINT8 Command
	{
		UINT8 Reserved1:3 = FormatString("            (%s)",this.ToBitString);
		UINT8 PACKET_COMMAND_POLL:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Acknowledge immediately." : "NOT acknowledge immediately.");
		UINT8 Reserved2:3 = FormatString("            (%s)",this.ToBitString);
		UINT8 PACKET_COMMAND_CFRAME:1 = FormatString("(%s) %s", this.ToBitString, this ? "Command frame (CFRAME)." : "NOT command frame (CFRAME).");
	};
	[ Property.DPL8RMessageType = DPL8RExtOpCodeTable(this) ]
	UINT8 ExtOpCode = DPL8RExtOpCodeTable(this);
	UINT8 MsgId;
	UINT8 RspId;
	UINT32 CurrentProtocolVersion = CurrentProtocolVersionTable(this);
	UINT32 SessId;
	UINT32 Timestamp;
	Switch
	{
		Case Property.DPL8RConnectSigned == True:
			UINT64 Signature;
	}
}

Struct DPL8RSack = Property.DPL8RMessageType
{
	UINT8 Command
	{
		UINT8 Reserved1:3 = FormatString("(%s)",this.ToBitString);
		UINT8 PACKET_COMMAND_POLL:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Acknowledge immediately." : "NOT acknowledge immediately.");
		UINT8 Reserved2:3 = FormatString("(%s)",this.ToBitString);
		UINT8 PACKET_COMMAND_CFRAME:1 = FormatString("(%s) %s", this.ToBitString, this ? "Command frame (CFRAME)." : "NOT command frame (CFRAME).");
	};
	[ Property.DPL8RMessageType = DPL8RExtOpCodeTable(this) ]
	UINT8 ExtOpCode = DPL8RExtOpCodeTable(this);
	UINT8 Flags
	{
		UINT8 SACK_FLAGS_RESPONSE:1 = FormatString("  (%s) %s", this.ToBitString, this ? "bRetry field is valid.": "bRetry field is not valid.");
		UINT8 SACK_FLAGS_SACK_MASK1:1 = FormatString("(%s) %s", this.ToBitString, this ? "Low 32 bits of the SACK mask are present." : "Low 32 bits of the SACK mask are not present.");  
		UINT8 SACK_FLAGS_SACK_MASK2:1 = FormatString("(%s) %s", this.ToBitString, this ? "High 32 bits of the SACK mask are present." : "High 32 bits of the SACK mask are not present.");   
		UINT8 SACK_FLAGS_SEND_MASK1:1 = FormatString("(%s) %s", this.ToBitString, this ? "Low 32 bits of the send mask are present." : "Low 32 bits of the send mask are not present."); 
		UINT8 SACK_FLAGS_SEND_MASK2:1 = FormatString("(%s) %s", this.ToBitString, this ? "High 32 bits of the send mask are present." : "High 32 bits of the send mask are not present."); 
		UINT8 Reserved:3 = FormatString("             (%s) %s", this.ToBitString, this );
	};
	BOOLEAN Retry;
	UINT8 NSeq;
	UINT8 NRcv;
	UINT16 Padding;
	UINT32 Timestamp;
	switch 
	{
		case (Flags&0x02):
			UINT32 SackMask1;
	}
	switch 
	{
		case (Flags&0x04):
			UINT32 SackMask2;
	}
	switch 
	{
		case (Flags&0x08):
			UINT32 SendMask1;
	}
	switch 
	{
		case (Flags&0x10):
			UINT32 SendMask2;
	}
	Switch
	{
		Case Property.DPL8RConnectSigned == True:
			UINT64 Signature;
	}
}

[ Property.DPL8RDataFramesOffset = Offset ]
Struct DPL8RDataFrames = "Directplay data frames"
{
	UINT8 Command
	{
		UINT8 PACKET_COMMAND_DATA:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Frame contains user data." : "Frame does NOT contain user data.");
		UINT8 PACKET_COMMAND_RELIABLE:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Frame SHOULD be delivered reliably." : "Frame SHOULD NOT be delivered reliably.");
		UINT8 PACKET_COMMAND_SEQUENTIAL:1 = FormatString("(%s) %s", this.ToBitString, this ? "Frame SHOULD be indicated sequentially." : "Frame SHOULD NOT be indicated sequentially.");
		UINT8 PACKET_COMMAND_POLL:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Partner SHOULD acknowledge immediately." : "Partner SHOULD NOT acknowledge immediately.");
		[ Property.DPL8RDataFirst ]
		UINT8 PACKET_COMMAND_NEW_MSG:1 = FormatString("   (%s) %s", this.ToBitString, this ? "DFRAME is first in message." : "DFRAME is NOT first in message.");
		[ Property.DPL8RDataLast ]
		UINT8 PACKET_COMMAND_END_MSG:1 = FormatString("   (%s) %s", this.ToBitString, this ? "DFRAME is last in message." : "DFRAME is NOT last in message.");
		UINT8 PACKET_COMMAND_USER_1:1 = FormatString("    (%s) %s", this.ToBitString, this ? "First consumer-controlled flag." : "First consumer-controlled flag.");
		UINT8 PACKET_COMMAND_USER_2:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Second consumer-controlled flag." : "Second consumer-controlled flag.");
	};
	UINT8 Control
	{
		[Property.PacketControlRetry]
		UINT8 PACKET_CONTROL_RETRY:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "Frame is a retry for this sequence number." : "Frame is NOT a retry for this sequence number.");
		UINT8 PACKET_CONTROL_KEEPALIVE_OR_CORRELATE:1 = FormatString("(%s) %s", this.ToBitString, this ? "Protocol version levels of 0x00010005 and higher indicate that the frame is a keep-alive frame; version levels of less than 0x00010005 indicate a request for a dedicated acknowledgment (ACK) from the receiver." : "Protocol version levels of 0x00010005 and higher indicate that the frame is NOT a keep-alive frame; version levels of less than 0x00010005 DO NOT indicate a request for a dedicated acknowledgment (ACK) from the receiver.");
		UINT8 PACKET_CONTROL_COALESCE:1 = FormatString("              (%s) %s", this.ToBitString, this ? "Protocol version levels of 0x00010005 and higher indicate that the packet contains multiple payloads." : "Protocol version levels of 0x00010005 and higher indicate that the packet DOES NOT contain multiple payloads.");
		UINT8 PACKET_CONTROL_END_STREAM:1 = FormatString("            (%s) %s", this.ToBitString, this ? "Last packet in the stream." : "NOT last packet in the stream.");
		UINT8 PACKET_CONTROL_SACK1:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "Low 32 bits of the SACK mask are present." : "Low 32 bits of the SACK mask are present.");
		UINT8 PACKET_CONTROL_SACK2:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "High 32 bits of the SACK mask are present." : "High 32 bits of the SACK mask are present.");
		UINT8 PACKET_CONTROL_SEND1:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "Low 32 bits of the cancel-send mask are present." : "Low 32 bits of the cancel-send mask are present.");
		UINT8 PACKET_CONTROL_SEND2:1 = FormatString("                 (%s) %s", this.ToBitString, this ? "High 32 bits of the cancel-send mask are present." : "High 32 bits of the cancel-send mask are present.");
	};
	UINT8 Seq;
	UINT8 NRcv;
	switch 
	{
		case (Control & 0x10):
			UINT32 SackMask1;
	}
	switch 
	{
		case (Control & 0x20):
			UINT32 SackMask2;
	}
	switch 
	{
		case (Control & 0x40):
			UINT32 SendMask1;
	}
	switch 
	{
		case (Control & 0x80):
			UINT32 SendMask2;
	}
	Switch
	{
		Case Property.DPL8RConnectSigned == True:
			UINT64 Signature;
	}
	switch 
	{
		case (Control & 0x02):
			UINT32 SessID;
	}
	[
		payloadstart(
			NetworkDirection, /* direction */
			0, /* id */
			Seq, /* sequence token */
			NRcv, /* next sequence token */
			0, /* total payload length */
			Property.DPL8RDataFirst, /* is first */
			Property.DPL8RDataLast, /* is last */
			RssmblyIndStartBit + RssmblyIndEndBit + RssmblySequenceBit
		)
	]
	Switch
	{
		case (Control & 0x04):
			DPL8RCoalescedPayloads CoalescedPayloads;
		case (Command & 0x80):
			Dplvp Dplvp;
	}
}

Struct DPL8RCoalescedPayloads
{
	[ Local.DPCoalescedPayloadsCount = 0 ]
	while [ !(UINT8( Framedata, Offset + 1 ) & 0x01) ]
	{
		[ Property.DPCoalescedPayloadsCount = Property.DPCoalescedPayloadsCount + 1 ]
		[ Property.DPCoalescedPayloadSize$[ Property.DPCoalescedPayloadsCount ] ]
		UINT8 Size;
		[ Property.DPCoalescedPayloadCommand$[ Property.DPCoalescedPayloadsCount] ]
		UINT8 Command
		{
			UINT8 PACKET_COMMAND_END_COALESCE:1 = FormatString("  (%s) %s", this.ToBitString, this ? "This is the final coalesced payload in the frame." : "This is NOT the final coalesced payload in the frame.");
			UINT8 PACKET_COMMAND_RELIABLE:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Payload SHOULD be delivered reliably." : "Payload SHOULD NOT be delivered reliably.");
			UINT8 PACKET_COMMAND_SEQUENTIAL:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Payload SHOULD be indicated sequentially." : "Payload SHOULD NOT be indicated sequentially.");
			UINT8 PACKET_COMMAND_COALESCE_BIG_1:1 = FormatString("(%s) %s", this.ToBitString, this ? "Bit 9 of the coalesced payload size." : "Bit 9 of the coalesced payload size.");
			UINT8 PACKET_COMMAND_COALESCE_BIG_2:1 = FormatString("(%s) %s", this.ToBitString, this ? "Bit 10 of the coalesced payload size." : "Bit 10 of the coalesced payload size.");
			UINT8 PACKET_COMMAND_COALESCE_BIG_3:1 = FormatString("(%s) %s", this.ToBitString, this ? "Bit 11 of the coalesced payload size, the most significant bit." : "Bit 11 of the coalesced payload size, the most significant bit.");
			UINT8 PACKET_COMMAND_USER_1:1 = FormatString("        (%s) %s", this.ToBitString, this ? "First consumer-controlled flag." : "First consumer-controlled flag.");
			UINT8 PACKET_COMMAND_USER_2:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Second consumer-controlled flag." : "Second consumer-controlled flag.");
		};
	}
	
	[ Local.DPCoalescedPayloadsCountTemp = 0 ]
	while[ Local.DPCoalescedPayloadsCountTemp < Local.DPCoalescedPayloadsCount ]
	{
		[ Local.DPCoalescedPayloadsCountTemp = Local.DPCoalescedPayloadsCountTemp + 1 ]
		ALIGN4 Padding;
		Switch
		{
			Case Property.DPCoalescedPayloadCommand$[ Local.DPCoalescedPayloadsCountTemp ] & 0x80:
				Dplvp Dplvp;
			Default:
				Blob(Property.DPCoalescedPayloadSize$[ Local.DPCoalescedPayloadsCountTemp ]) Payload;
		}
		
	}
}

Table DPL8RSigningOptsTable(value)
{
	Switch(value)
	{
		case 0x00000001: "PACKET_SIGNING_FAST (use signing cookie only)";
		case 0x00000002: "PACKET_SIGNING_FULL (sign a digest of packet contents)";
		default:"Unkown value";
	}
}

Table DPL8RExtOpCodeTable(OpCode)
{
	switch(OpCode)
	{
		case 0x01: "FRAME_EXOPCODE_CONNECT - Request a connection";
		case 0x02: "FRAME_EXOPCODE_CONNECTED - Accept a connection request or complete a connection handshake when signing is not enabled";
		case 0x03: "FRAME_EXOPCODE_CONNECTED_SIGNED - Accept a connection request or complete a connection handshake when signing is enabled";
		case 0x04: "FRAME_EXOPCODE_HARD_DISCONNECT - Quickly disconnect or acknowledge quick disconnection without waiting for remaining packets to be delivered";
		case 0x06: "FRAME_EXOPCODE_SACK - Acknowledge Outstanding Packet";
		default:"Unkown operation code";
	}
}
