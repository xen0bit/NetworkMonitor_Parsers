//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Active Directory Federation Services
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-MWBE]: Microsoft Web Browser Federated Sign-On Protocol Extensions
//#                          [MS-MWBF]: Microsoft Web Browser Federated Sign-On Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 11/26/2009
//#
//####

Protocol ADFS
{
	While [ FrameOffset < FrameLength  ]
	{
		DynamicSwitch AsciiStringTerm( "=" )
		{
			case "wa" :
				URLStringTerm( 0x26 ) wa;
			case "wresult" :
				URLStringTerm( 0x26 ) wresult;
			case "wctx" :
				URLStringTerm( 0x26 ) wctx;
			default:
				URLStringTerm( 0x26 )  DefaultName;
	    }
	}
}

Table TablePercentEncodedChar( Char )
{
	switch( char )
	{
		case 0x253030 : "*NUL*";
		case 0x253031 : "*SOH*";
		case 0x253032 : "*STX*";
		case 0x253033 : "*ETX*";
		case 0x253034 : "*EOT*";
		case 0x253035 : "*ENQ*";
		case 0x253036 : "*ACK*";
		case 0x253037 : "*BEL*";
		case 0x253038 : "*BS*";
		case 0x253039 : "*HT*";
		case 0x253041 : "*LF*";
		case 0x253042 : "*VT*";
		case 0x253043 : "*FF*";
		case 0x253044 : "*CR*";
		case 0x253045 : "*SO*";
		case 0x253046 : "*SI*";
		case 0x253130 : "*DLE*";
		case 0x253131 : "*DC1*";
		case 0x253132 : "*DC2*";
		case 0x253133 : "*DC3*";
		case 0x253134 : "*DC4*";
		case 0x253135 : "*NAK*";
		case 0x253136 : "*SYN*";
		case 0x253137 : "*ETB*";
		case 0x253138 : "*CAN*";
		case 0x253139 : "*EM*";
		case 0x253141 : "*SUB*";
		case 0x253142 : "*ESC*";
		case 0x253143 : "*FS*";
		case 0x253144 : "*GS*";
		case 0x253145 : "*RS*";
		case 0x253146 : "*US*";
		case 0x253230 : " ";
		case 0x253231 : "!";
		case 0x253232 : "\"";
		case 0x253233 : "#";
		case 0x253234 : "$";
		case 0x253235 : "%";
		case 0x253236 : "&";
		case 0x253237 : "'";
		case 0x253238 : "(";
		case 0x253239 : ")";
		case 0x253241 : "*";
		case 0x253242 : "+";
		case 0x253243 : ",";
		case 0x253244 : "-";
		case 0x253245 : ".";
		case 0x253246 : "/";
		case 0x253330 : "0";
		case 0x253331 : "1";
		case 0x253332 : "2";
		case 0x253333 : "3";
		case 0x253334 : "4";
		case 0x253335 : "5";
		case 0x253336 : "6";
		case 0x253337 : "7";
		case 0x253338 : "8";
		case 0x253339 : "9";
		case 0x253341 : ":";
		case 0x253342 : ";";
		case 0x253343 : "<";
		case 0x253344 : "=";
		case 0x253345 : ">";
		case 0x253346 : "?";
		case 0x253430 : "@";
		case 0x253431 : "A";
		case 0x253432 : "B";
		case 0x253433 : "C";
		case 0x253434 : "D";
		case 0x253435 : "E";
		case 0x253436 : "F";
		case 0x253437 : "G";
		case 0x253438 : "H";
		case 0x253439 : "I";
		case 0x253441 : "J";
		case 0x253442 : "K";
		case 0x253443 : "L";
		case 0x253444 : "M";
		case 0x253445 : "N";
		case 0x253446 : "O";
		case 0x253530 : "P";
		case 0x253531 : "Q";
		case 0x253532 : "R";
		case 0x253533 : "S";
		case 0x253534 : "T";
		case 0x253535 : "U";
		case 0x253536 : "V";
		case 0x253537 : "W";
		case 0x253538 : "X";
		case 0x253539 : "Y";
		case 0x253541 : "Z";
		case 0x253542 : "[";
		case 0x253543 : "\\";
		case 0x253544 : "]";
		case 0x253545 : "^";
		case 0x253546 : "_";
		case 0x253630 : "`";
		case 0x253631 : "a";
		case 0x253632 : "b";
		case 0x253633 : "c";
		case 0x253634 : "d";
		case 0x253635 : "e";
		case 0x253636 : "f";
		case 0x253637 : "g";
		case 0x253638 : "h";
		case 0x253639 : "i";
		case 0x253641 : "j";
		case 0x253642 : "k";
		case 0x253643 : "l";
		case 0x253644 : "m";
		case 0x253645 : "n";
		case 0x253646 : "o";
		case 0x253730 : "p";
		case 0x253731 : "q";
		case 0x253732 : "r";
		case 0x253733 : "s";
		case 0x253734 : "t";
		case 0x253735 : "u";
		case 0x253736 : "v";
		case 0x253737 : "w";
		case 0x253738 : "x";
		case 0x253739 : "y";
		case 0x253741 : "z";
		case 0x253742 : "{";
		case 0x253743 : "|";
		case 0x253744 : "}";
		case 0x253745 : "~";
		case 0x253746 : "*DEL*";
		default: "*Unknown URL encoding*";
	}
}

Number PercentEncodedCharacter
{
	size = 3;
	DisplayFormat = FormatString( "%s", TablePercentEncodedChar( this ) );
}

[ URLEncodeSummary = "" ]
struct URLStringTerm( Terminator ) = URLEncodeSummary
{	
	while [ !(CHAR( Framedata, offset) == Terminator) ]
	{
		//[ URLCharacterCount = URLCharacterCount + 1 ]
		switch( UINT8( Framedata, Offset ) )
		{
			// 0x25 = '%'
				
			case 0x25:
				[ URLEncodeSummary =  URLEncodeSummary + this.ToString ]
				PercentEncodedCharacter PEC;
			default: 
				[ URLEncodeSummary = URLEncodeSummary + this.ToString ]
				CHAR Data;
		}
	}
	switch (CHAR( Framedata, offset))
	{
		case 0x26:
			CHAR Terminator;
	}
}


