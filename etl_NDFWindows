//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-NetworkDiagnosticsFramework
//#
//#  Details:                
//#
//#  Public References:      NetworkDiagnosticsFramework.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 9/17/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsDiagnosticsNetworking, "{36c23e18-0e66-11d9-bbeb-505054503030}")]
Protocol NDF_MicrosoftWindowsDiagnosticsNetworking = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1000: [property.ETLSummary = this.ToString] NDF_NDFStartEvtDesc NDFStartEvtDesc;
		case 2000: [property.ETLSummary = this.ToString] NDF_NDFStopSuccessDiagEvtDesc NDFStopSuccessDiagEvtDesc;
		case 2100: [property.ETLSummary = this.ToString] NDF_NDFStopSuccessRepairEvtDesc NDFStopSuccessRepairEvtDesc;
		case 2200: [property.ETLSummary = this.ToString] NDF_NDFStopFailDiagEvtDesc NDFStopFailDiagEvtDesc;
		case 2300: [property.ETLSummary = this.ToString] NDF_NDFStopFailRepairEvtDesc NDFStopFailRepairEvtDesc;
		case 2400: [property.ETLSummary = this.ToString] NDF_NDFStopCancelDiagEvtDesc NDFStopCancelDiagEvtDesc;
		case 2500: [property.ETLSummary = this.ToString] NDF_NDFStopCancelRepairEvtDesc NDFStopCancelRepairEvtDesc;
		case 3000: [property.ETLSummary = this.ToString] NDF_NDFFailInFrameworkEvtDesc NDFFailInFrameworkEvtDesc;
		case 3100: [property.ETLSummary = this.ToString] NDF_NDFFailInHelperEvtDesc NDFFailInHelperEvtDesc;
		case 4000:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]NDF_NDFDiagSuccessEvtDescV0 NDFDiagSuccessEvtDescV0;
				case 1: [property.ETLSummary = this.ToString]NDF_NDFDiagSuccessEvtDesc NDFDiagSuccessEvtDesc;
			}
		case 4100: [property.ETLSummary = this.ToString] NDF_NDFDiagSuccessNPEvtDesc NDFDiagSuccessNPEvtDesc;
		case 4200: [property.ETLSummary = this.ToString] NDF_NDFDiagFailEvtDesc NDFDiagFailEvtDesc;
		case 5000:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]NDF_NDFValidationSuccessEvtDescV0 NDFValidationSuccessEvtDescV0;
				case 1: [property.ETLSummary = this.ToString]NDF_NDFValidationSuccessEvtDesc NDFValidationSuccessEvtDesc;
			}
		case 5100:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]NDF_NDFValidationFailEvtDescV0 NDFValidationFailEvtDescV0;
				case 1: [property.ETLSummary = this.ToString]NDF_NDFValidationFailEvtDesc NDFValidationFailEvtDesc;
			}
		case 5200:
			Switch(property.EventVersion)
			{
				case 0: [property.ETLSummary = this.ToString]NDF_NDFRepairOptFailEvtDescV0 NDFRepairOptFailEvtDescV0;
				case 1: [property.ETLSummary = this.ToString]NDF_NDFRepairOptFailEvtDesc NDFRepairOptFailEvtDesc;
			}
		case 5300: [property.ETLSummary = this.ToString] NDF_NDFRepairFailEvtDesc NDFRepairFailEvtDesc;
		case 7000: [property.ETLSummary = this.ToString] NDF_NDFDiagnosticsDebugEvtDesc NDFDiagnosticsDebugEvtDesc;
		case 7010: [property.ETLSummary = this.ToString] NDF_NDFHypothesisDebugEvtDesc NDFHypothesisDebugEvtDesc;
		case 7020: [property.ETLSummary = this.ToString] NDF_NDFRepairDebugEvtDesc NDFRepairDebugEvtDesc;
		case 7030: [property.ETLSummary = this.ToString] NDF_NDFValidationDebugEvtDesc NDFValidationDebugEvtDesc;
		case 7040: [property.ETLSummary = this.ToString] NDF_NDFCacheHitDebugEvtDesc NDFCacheHitDebugEvtDesc;
		case 7050: [property.ETLSummary = this.ToString] NDF_NDFRegistryDebugEvtDesc NDFRegistryDebugEvtDesc;
		case 7100: [property.ETLSummary = this.ToString] NDF_NDFUnclassifiedDebugEvtDesc NDFUnclassifiedDebugEvtDesc;
		case 6000: [property.ETLSummary = this.ToString] NDF_NDFHelperClassOperationalEvtDesc NDFHelperClassOperationalEvtDesc;
		case 6100: [property.ETLSummary = this.ToString] NDF_NDFHelperClassAdminEvtDesc NDFHelperClassAdminEvtDesc;
		case 6200: [property.ETLSummary = this.ToString] NDF_NDFHelperClassDebugEvtDesc NDFHelperClassDebugEvtDesc;
		case 8001: [property.ETLSummary = this.ToString] NDF_StartNDFIncident StartNDFIncident;
		case 8002: [property.ETLSummary = this.ToString] NDF_StopNDFIncident StopNDFIncident;
		case 8003: [property.ETLSummary = this.ToString] NDF_StartNDFDiagnose StartNDFDiagnose;
		case 8004: [property.ETLSummary = this.ToString] NDF_StopNDFDiagnose StopNDFDiagnose;
		case 8005: [property.ETLSummary = this.ToString] NDF_StartNDFRepair StartNDFRepair;
		case 8006: [property.ETLSummary = this.ToString] NDF_StopNDFRepair StopNDFRepair;
		case 8007: [property.ETLSummary = this.ToString] NDF_StartNDFValidate StartNDFValidate;
		case 8008: [property.ETLSummary = this.ToString] NDF_StopNDFValidate StopNDFValidate;
		case 8009: [property.ETLSummary = this.ToString] NDF_StartNDFReproFailure StartNDFReproFailure;
		case 8010: [property.ETLSummary = this.ToString] NDF_StopNDFReproFailure StopNDFReproFailure;
		case 8103: [property.ETLSummary = this.ToString] NDF_StartNDFHCDiagnose StartNDFHCDiagnose;
		case 8104: [property.ETLSummary = this.ToString] NDF_StopNDFHCDiagnose StopNDFHCDiagnose;
		case 8107: [property.ETLSummary = this.ToString] NDF_StartNDFHCValidate StartNDFHCValidate;
		case 8108: [property.ETLSummary = this.ToString] NDF_StopNDFHCValidate StopNDFHCValidate;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct NDF_NDFStartEvtDesc = FormatString("Network Diagnostics Framework started because the user requested a diagnostics session.   Helper Class Name: %s   Number of parameters: %s   Attributes passed to helper class:  %s", HelperClassName.ToString, NumberOfAttributes.ToString, HelperClassAttributes.ToString)
{
	UnicodeString HelperClassName;
	UINT32 NumberOfAttributes;
	UnicodeString HelperClassAttributes;
}
Struct NDF_NDFStopSuccessDiagEvtDesc = FormatString("Network Diagnostics Framework stopped because it completed the user initiated diagnostics session.   Result: Success, no problems found. [%s]", ResultHR.ToString)
{
	UINT32 ResultHR;
}
Struct NDF_NDFStopSuccessRepairEvtDesc = FormatString("Network Diagnostics Framework stopped because it completed the user initiated diagnostics session.   Result: Success, problems repaired. [%s]", ResultHR.ToString)
{
	UINT32 ResultHR;
}
Struct NDF_NDFStopFailDiagEvtDesc = FormatString("Network Diagnostics Framework stopped because it completed the user initiated diagnostics session.   Result: Failed during diagnosis. [%s]", ResultHR.ToString)
{
	UINT32 ResultHR;
}
Struct NDF_NDFStopFailRepairEvtDesc = FormatString("Network Diagnostics Framework stopped because it completed the user initiated diagnostics session.   Result: Failed during repair. [%s]", ResultHR.ToString)
{
	UINT32 ResultHR;
}
Struct NDF_NDFStopCancelDiagEvtDesc = FormatString("Network Diagnostics Framework stopped because it completed the user initiated diagnostics session.   Result: Cancelled during diagnosis. [%s]", ResultHR.ToString)
{
	UINT32 ResultHR;
}
Struct NDF_NDFStopCancelRepairEvtDesc = FormatString("Network Diagnostics Framework stopped because it completed the user initiated diagnostics session.   Result: Cancelled during repair. [%s]", ResultHR.ToString)
{
	UINT32 ResultHR;
}
Struct NDF_NDFFailInFrameworkEvtDesc = FormatString("An error occurred. The Network Diagnostics Framework failed to complete operation. A Windows Error Report was generated. [%s].", ResultHR.ToString)
{
	UINT32 ResultHR;
}
Struct NDF_NDFFailInHelperEvtDesc = FormatString("An error occurred. The Network Diagnostics Framework failed to complete operation. A Windows Error Report was generated. [%s].", ResultHR.ToString)
{
	UINT32 ResultHR;
}
Struct NDF_NDFDiagSuccessEvtDescV0 = FormatString("This event is not emitted, it remains manifested for AppCompat")
{
	UnicodeString RepairOption;
	GUID(true) RepairGUID;
	UINT32 SecondsRequired;
	UINT32 SIDTypeRequired;
}
Struct NDF_NDFValidationSuccessEvtDescV0 = FormatString("This event is not emitted, it remains manifested for AppCompat")
{
	UnicodeString RepairOption;
	GUID(true) RepairGUID;
	UINT32 SecondsRequired;
	UINT32 SIDTypeRequired;
	UnicodeString HelperClassName;
}
Struct NDF_NDFValidationFailEvtDescV0 = FormatString("This event is not emitted, it remains manifested for AppCompat")
{
	UnicodeString RepairOption;
	GUID(true) RepairGUID;
	UINT32 SecondsRequired;
	UINT32 SIDTypeRequired;
	UnicodeString HelperClassName;
}
Struct NDF_NDFRepairOptFailEvtDescV0 = FormatString("This event is not emitted, it remains manifested for AppCompat")
{
	UnicodeString RepairOption;
	GUID(true) RepairGUID;
	UINT32 SecondsRequired;
	UINT32 SIDTypeRequired;
}
Struct NDF_NDFDiagSuccessEvtDesc = FormatString("The Network Diagnostics Framework has completed the diagnosis phase of operation. The following repair option was offered:   Helper Class Name: %s  Root Cause: %s   Root Cause Guid: %s   Repair option: %s   RepairGuid: %s   Seconds required for repair: %s   Security context required for repair: %s  Interface: %s (%s)", HelperClassName.ToString, RootCause.ToString, RootCauseGUID.ToString, RepairOption.ToString, RepairGUID.ToString, SecondsRequired.ToString, SIDTypeRequired.ToString, InterfaceDesc.ToString, InterfaceGUID.ToString)
{
	UnicodeString RootCause;
	GUID(true) RootCauseGUID;
	UnicodeString RepairOption;
	GUID(true) RepairGUID;
	UINT32 SecondsRequired;
	UINT32 SIDTypeRequired;
	UnicodeString HelperClassName;
	UnicodeString InterfaceDesc;
	GUID(true) InterfaceGUID;
}
Struct NDF_NDFDiagSuccessNPEvtDesc = FormatString("The Network Diagnostics Framework has completed the diagnosis phase of operation, but no network problem was identified.")
{
	_struct Empty{};
}
Struct NDF_NDFDiagFailEvtDesc = FormatString("An error occurred. The Network Diagnostics Framework failed to complete the diagnosis phase of operation. A Windows Error Report was generated. [%s]", ResultHR.ToString)
{
	UINT32 ResultHR;
}
Struct NDF_NDFValidationSuccessEvtDesc = FormatString("The Network Diagnostics Framework has completed the repair phase of operation. The following repair option or work-around was executed:   Helper Class Name: %s   Repair option: %s   RepairGuid: %s   The repair option appears to have successfully fixed the diagnosed problem.", HelperClassName.ToString, RepairOption.ToString, RepairGUID.ToString)
{
	UnicodeString RootCause;
	GUID(true) RootCauseGUID;
	UnicodeString RepairOption;
	GUID(true) RepairGUID;
	UINT32 SecondsRequired;
	UINT32 SIDTypeRequired;
	UnicodeString HelperClassName;
	UnicodeString InterfaceDesc;
	GUID(true) InterfaceGUID;
}
Struct NDF_NDFValidationFailEvtDesc = FormatString("The Network Diagnostics Framework (NDF) has completed the repair phase of operation. The following repair option or work-around was executed:   Helper Class Name: %s   Repair option: %s   RepairGuid: %s   The repair option appears to have successfully fixed the diagnosed problem. But NDF has detected the existence of other network problems. NDF should be re-run to diagnose these problems.", HelperClassName.ToString, RepairOption.ToString, RepairGUID.ToString)
{
	UnicodeString RootCause;
	GUID(true) RootCauseGUID;
	UnicodeString RepairOption;
	GUID(true) RepairGUID;
	UINT32 SecondsRequired;
	UINT32 SIDTypeRequired;
	UnicodeString HelperClassName;
	UnicodeString InterfaceDesc;
	GUID(true) InterfaceGUID;
}
Struct NDF_NDFRepairOptFailEvtDesc = FormatString("The Network Diagnostics Framework failed to execute the following repair:   Repair option: %s   RepairGuid: %s", RepairOption.ToString, RepairGUID.ToString)
{
	UnicodeString RootCause;
	GUID(true) RootCauseGUID;
	UnicodeString RepairOption;
	GUID(true) RepairGUID;
	UINT32 SecondsRequired;
	UINT32 SIDTypeRequired;
	UnicodeString HelperClassName;
	UnicodeString InterfaceDesc;
	GUID(true) InterfaceGUID;
}
Struct NDF_NDFRepairFailEvtDesc = FormatString("An error occurred. The Network Diagnostics Framework failed to complete the repair phase of operation. A Windows Error Report was generated. [%s]", ResultHR.ToString)
{
	UINT32 ResultHR;
}
Struct NDF_NDFDiagnosticsDebugEvtDesc = FormatString("%s", UnicodeString(Property.DebugMessage, 0, 200))
{
	while [frameoffset < frameLength]
	{
		[Property.DebugMessage = Property.DebugMessage + this]
		UnicodeString(50) DebugMessage;
	}
}
Struct NDF_NDFHypothesisDebugEvtDesc = FormatString("%s", UnicodeString(Property.DebugMessage, 0, 200))
{
	while [frameoffset < frameLength]
	{
		[Property.DebugMessage = Property.DebugMessage + this]
		UnicodeString(50) DebugMessage;
	}
}
Struct NDF_NDFRepairDebugEvtDesc = FormatString("%s", UnicodeString(Property.DebugMessage, 0, 200))
{
	while [frameoffset < frameLength]
	{
		[Property.DebugMessage = Property.DebugMessage + this]
		UnicodeString(50) DebugMessage;
	}
}
Struct NDF_NDFValidationDebugEvtDesc = FormatString("%s", UnicodeString(Property.DebugMessage, 0, 200))
{
	while [frameoffset < frameLength]
	{
		[Property.DebugMessage = Property.DebugMessage + this]
		UnicodeString(50) DebugMessage;
	}
}
Struct NDF_NDFCacheHitDebugEvtDesc = FormatString("%s", UnicodeString(Property.DebugMessage, 0, 200))
{
	while [frameoffset < frameLength]
	{
		[Property.DebugMessage = Property.DebugMessage + this]
		UnicodeString(50) DebugMessage;
	}
}
Struct NDF_NDFRegistryDebugEvtDesc = FormatString("%s", UnicodeString(Property.DebugMessage, 0, 200))
{
	while [frameoffset < frameLength]
	{
		[Property.DebugMessage = Property.DebugMessage + this]
		UnicodeString(50) DebugMessage;
	}
}
Struct NDF_NDFUnclassifiedDebugEvtDesc = FormatString("%s", UnicodeString(Property.DebugMessage, 0, 200))
{
	while [frameoffset < frameLength]
	{
		[Property.DebugMessage = Property.DebugMessage + this]
		UnicodeString(50) DebugMessage;
	}
}
Struct NDF_NDFHelperClassOperationalEvtDesc = FormatString("Details about %s diagnosis:   %s", HelperClassName.ToString, EventDescription.ToString)
{
	UnicodeString HelperClassName;
	UnicodeString EventDescription;
	UINT16 EventVerbosity;
}
Struct NDF_NDFHelperClassAdminEvtDesc = FormatString("Details about %s diagnosis:   %s", HelperClassName.ToString, EventDescription.ToString)
{
	UnicodeString HelperClassName;
	UnicodeString EventDescription;
	UINT16 EventVerbosity;
}
Struct NDF_NDFHelperClassDebugEvtDesc = FormatString("Details about %s diagnosis:   %s", HelperClassName.ToString, EventDescription.ToString)
{
	UnicodeString HelperClassName;
	UnicodeString EventDescription;
	UINT16 EventVerbosity;
}
Struct NDF_StartNDFIncident = "Start NDF Incident" {}; // Empty Struct
Struct NDF_StopNDFIncident = "Stop NDF Incident" {}; // Empty Struct
Struct NDF_StartNDFDiagnose = "Start NDF Diagnose" {}; // Empty Struct
Struct NDF_StopNDFDiagnose = "Stop NDF Diagnose" {}; // Empty Struct
Struct NDF_StartNDFRepair = "Start NDF Repair" {}; // Empty Struct
Struct NDF_StopNDFRepair = "Stop NDF Repair" {}; // Empty Struct
Struct NDF_StartNDFValidate = "Start NDF Validate" {}; // Empty Struct
Struct NDF_StopNDFValidate = "Stop NDF Validate" {}; // Empty Struct
Struct NDF_StartNDFReproFailure = "Start NDF Reproduce Failure" {}; // Empty Struct
Struct NDF_StopNDFReproFailure = "Stop NDF Reproduce Failure" {}; // Empty Struct
Struct NDF_StartNDFHCDiagnose = FormatString("Start NDF Helper Class '%s' Diagnose", HelperClassName.ToString)
{
	UnicodeString HelperClassName;
}
Struct NDF_StopNDFHCDiagnose = FormatString("Stop NDF Helper Class '%s' Diagnose", HelperClassName.ToString)
{
	UnicodeString HelperClassName;
}
Struct NDF_StartNDFHCValidate = FormatString("Start NDF Helper Class '%s' Validate", HelperClassName.ToString)
{
	UnicodeString HelperClassName;
}
Struct NDF_StopNDFHCValidate = FormatString("Stop NDF Helper Class '%s' Validate", HelperClassName.ToString)
{
	UnicodeString HelperClassName;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsNDFHelperClassDiscovery, "{FC3BC8A7-2F61-449C-A8B4-22AC22058F92}")]
Protocol NDF_MicrosoftWindowsNDFHelperClassDiscovery = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1001: [property.ETLSummary = this.ToString] NDF_DuplicateFirstPartyHCComponent DuplicateFirstPartyHCComponent;
		case 1002: [property.ETLSummary = this.ToString] NDF_DuplicateExtHCComponent DuplicateExtHCComponent;
		case 1003: [property.ETLSummary = this.ToString] NDF_DuplicateThirdPartyHC DuplicateThirdPartyHC;
		case 1004: [property.ETLSummary = this.ToString] NDF_DuplicateFirstPartyExtHC DuplicateFirstPartyExtHC;
		case 1005: [property.ETLSummary = this.ToString] NDF_DuplicateFirstPartyHC DuplicateFirstPartyHC;
		case 1006: [property.ETLSummary = this.ToString] NDF_DuplicateExtHCReplaced DuplicateExtHCReplaced;
		case 1007: [property.ETLSummary = this.ToString] NDF_DuplicateHCReplaced DuplicateHCReplaced;
		case 1008: [property.ETLSummary = this.ToString] NDF_DuplicateHCComponentReplaced DuplicateHCComponentReplaced;
		case 1009: [property.ETLSummary = this.ToString] NDF_ComponentError ComponentError;
		case 1010: [property.ETLSummary = this.ToString] NDF_ExtensionError ExtensionError;
		case 1011: [property.ETLSummary = this.ToString] NDF_HelperClassError HelperClassError;
		case 1012: [property.ETLSummary = this.ToString] NDF_ThirdPartyNonExtensionHC ThirdPartyNonExtensionHC;
		case 1100: [property.ETLSummary = this.ToString] NDF_RegistryError RegistryError;
		case 1101: [property.ETLSummary = this.ToString] NDF_RegistryWarning RegistryWarning;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct NDF_DuplicateFirstPartyHCComponent = FormatString("The component name '%s' for the first party helper class '%s' is a duplicate", ComponentName.ToString, HelperClassName.ToString)
{
	UnicodeString HelperClassName;
	UnicodeString ComponentName;
}
Struct NDF_DuplicateExtHCComponent = FormatString("The component name '%s' for the extension helper class '%s' is a duplicate", ComponentName.ToString, HelperClassName.ToString)
{
	UnicodeString HelperClassName;
	UnicodeString ComponentName;
}
Struct NDF_DuplicateThirdPartyHC = FormatString("'%s' is a duplicate third party helper class", HelperClassName.ToString)
{
	UnicodeString HelperClassName;
}
Struct NDF_DuplicateFirstPartyExtHC = FormatString("'%s' is a duplicate first party extension helper class", HelperClassName.ToString)
{
	UnicodeString HelperClassName;
}
Struct NDF_DuplicateFirstPartyHC = FormatString("'%s' is a duplicate first party helper class", HelperClassName.ToString)
{
	UnicodeString HelperClassName;
}
Struct NDF_DuplicateExtHCReplaced = FormatString("The duplicate '%s' extension helper class was replaced", HelperClassName.ToString)
{
	UnicodeString HelperClassName;
}
Struct NDF_DuplicateHCReplaced = FormatString("The duplicate '%s' helper class was replaced", HelperClassName.ToString)
{
	UnicodeString HelperClassName;
}
Struct NDF_DuplicateHCComponentReplaced = FormatString("Helper class '%s' with the duplicate component name '%s' was replaced", HelperClassName.ToString, ComponentName.ToString)
{
	UnicodeString HelperClassName;
	UnicodeString ComponentName;
}
Struct NDF_ComponentError = FormatString("Encountered error '%s' loading helper class with component name '%s' (location=%s)", ErrorCode.ToString, Name.ToString, Location.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UnicodeString Name;
}
Struct NDF_ExtensionError = FormatString("Encountered error '%s' loading extension helper class '%s' (location=%s)", ErrorCode.ToString, Name.ToString, Location.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UnicodeString Name;
}
Struct NDF_HelperClassError = FormatString("Encountered error '%s' loading helper class '%s' (location=%s)", ErrorCode.ToString, Name.ToString, Location.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UnicodeString Name;
}
Struct NDF_ThirdPartyNonExtensionHC = FormatString("Encountered error '%s' loading third party non-extension helper class '%s' (location=%s)", ErrorCode.ToString, Name.ToString, Location.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UnicodeString Name;
}
Struct NDF_RegistryError = FormatString("Failed to load '%s' value '%s' (error=%s location=%s)", Name.ToString, KeyOrValue.ToString, ErrorCode.ToString, Location.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UnicodeString Name;
	UnicodeString KeyOrValue;
}
Struct NDF_RegistryWarning = FormatString("Warning: Could not load '%s' value '%s' (error=%s location=%s)", Name.ToString, KeyOrValue.ToString, ErrorCode.ToString, Location.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UnicodeString Name;
	UnicodeString KeyOrValue;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsDiagnosticsNetworking_Keyword, "{36c23e18-0e66-11d9-bbeb-505054503030}")]
struct NDF_MicrosoftWindowsDiagnosticsNetworking_Keyword
{
	UINT64 Reserved1:32 = FormatString("              (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("             (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("          (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("            (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("               (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("              (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("           (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("               (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("              (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 utDiagnostic:1 = FormatString("           (%s) %s", this.ToBitString, this? "KW_DIAGNOSTIC":"");
	UINT64 Reserved2:1 = FormatString("              (%s)", this.ToBitString);
	UINT64 ndfNDFCoreEvents:1 = FormatString("       (%s) %s", this.ToBitString, this? "NA": "");
	UINT64 Reserved3:1 = FormatString("              (%s)", this.ToBitString);
	UINT64 ndfNDFHelperClassEvents:1 = FormatString("(%s) %s", this.ToBitString, this? "NA": "");
	UINT64 Reserved4:1 = FormatString("              (%s)", this.ToBitString);
	UINT64 ndfPerformance:1 = FormatString("         (%s) %s", this.ToBitString, this? "NA": "");
	UINT64 Reserved5:11 = FormatString("              (%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsNDFHelperClassDiscovery_Keyword, "{FC3BC8A7-2F61-449C-A8B4-22AC22058F92}")]
struct NDF_MicrosoftWindowsNDFHelperClassDiscovery_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
