//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  RDP - Print Virtual Channel Extension
//#
//#  Details:                Remote Desktop Protocol parser family
//#
//#  Microsoft References:   [MS-RDPEPC]: Remote Desktop Protocol: Print Virtual Channel Extension
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/8/2009
//#
//####


struct RDPEPCClientDeviceListAnnounceRequest
{
	UINT32 Flags
	{
		[conversation.RDPEPCDriverNameEncode]
		UINT32 ANSI:1 = FormatString("          (%s) %s", this.ToBitString, this? "ANSI DriverName": "Unicode DriverName");
		UINT32 DEFAULTPRINTER:1 = FormatString("(%s) %s", this.ToBitString, this? "Default Printer": "");
		UINT32 NETWORKPRINTER:1 = FormatString("(%s) %s", this.ToBitString, this? "Netwrok Printer": "");
		UINT32 TSPRINTER:1 = FormatString("     (%s) %s", this.ToBitString, this? "This printer has already redirected the terminal server printer on the client": "");
		UINT32 XPSFORMAT:1 = FormatString("     (%s) %s", this.ToBitString, this? "This client/printer supports XPS format": "");
		UINT32 Reserved:27 = FormatString("      (%s)", this.ToBitString);
	}
	UINT32 CodePage = FormatString("%d (Set to 0)", this);
	UINT32 PnPNameLen;
	UINT32 DriverNameLen;
	UINT32 PrintNameLen;
	UINT32 CachedFieldsLen;
	UnicodeString(PnPNameLen / 2) PnPName;
	switch(conversation.RDPEPCDriverNameEncode)
	{
		case 1: AsciiString(DriverNameLen) AnsiDriverName;
		case 0: UnicodeString(DriverNameLen / 2) UnicodeDriverName; 
	}
	UnicodeString(PrintNameLen / 2) PrintName;
	BLOB(CachedFieldsLen) CachedPrinterConfigData;	
}

struct RDPEPCServerPrinterSetXPSMode
{
	UINT32 PrinterId;
	UINT32 Flags = FormatString("%d (Unused)", this);
}

struct RDPEPCAddPrinterCachedata
{
	
	AsciiString(8) PortDosName;
	UINT32 PnPNameLen;
	UINT32 DriverNameLen;
	UINT32 PrintNameLen;
	UINT32 CachedFieldsLen;
	UnicodeString(PnPNameLen / 2) PnPName;
	switch 
	{
		case conversation.RDPEPCDriverNameEncode:
				AsciiString(DriverNameLen) AnsiDriverName;
		default:
				UnicodeString(DriverNameLen / 2) UnicodeDriverName; 
	}
	UnicodeString(PrintNameLen / 2) PrintName;
	BLOB(CachedFieldsLen) CachedPrinterConfigData;
	
}

struct RDPEPCUpdatePrinterCachedata
{
	
	UINT32 PrinterNameLen;
	UINT32 ConfigDataLen;
	UnicodeString(PrinterNameLen / 2) PrinterName;
	BLOB(ConfigDataLen<FrameLength-Offset?ConfigDataLen:FrameLength-OffSet) CachedPrinterConfigData;	
}

struct RDPEPCDeletePrinterCachedata
{
	
	UINT32 PrinterNameLen;
	UnicodeString(PrinterNameLen / 2) PrinterName;
}

struct RDPEPCRenamePrinterCacheData
{
	
	UINT32 OldPrinterNameLen;
	UINT32 NewPrinterNameLen;
	UnicodeString(OldPrinterNameLen / 2) OldPrinterName;
	UnicodeString(NewPrinterNameLen / 2) NewPrinterName;	
}

//struct RDPEPCServerCreaterequest
//{
//	UINT32 DesiredAccess = FormatString("%d (Unused)", this);
//	UINT64 AllocationSize = FormatString("%I64d (Unused)", this);
//	UINT32 FileAttributes = FormatString("%d (Unused)", this);
//	UINT32 SharedAccess = FormatString("%d (Unused)", this);
//	UINT32 Disposition = FormatString("%d (Unused)", this);
//	UINT32 CreateOptions = FormatString("%d (Unused)", this);
//	UINT32 PathLength = FormatString("%d (Set to 0)", this);
//}
//
//struct RDPEPCServerPrinterClose
//{
//	//empty, all RDPEFS msg
//}
//
//struct RDPEPCServerPrinterWriteRequest
//{
//	//empty, all RDPEFS msg	
//}
//
//struct RDPEPCClientPrinterCreateResponse
//{
//	UINT32 FileId;
//}
//
//struct RDPEPCClientPrinterCloseResponse
//{
//	UINT32 Pad;
//}
//
//struct RDPEPCClientPrinterWriteResponse
//{
//	//empty, all RDPEFS msg		
//}