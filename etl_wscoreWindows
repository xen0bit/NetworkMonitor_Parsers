//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-wscore
//#
//#  Details:                
//#
//#  Public References:      wscore.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 1/28/2010
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWinsockWS2HELP, "{d5c25f9a-4d47-493e-9184-40dd397a004d}")]
Protocol Wscore_MicrosoftWindowsWinsockWS2HELP = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] Wscore_WINSOCK_WS2HELP_LSP_INSTALL WINSOCK_WS2HELP_LSP_INSTALL;
		case 2: [property.ETLSummary = this.ToString] Wscore_WINSOCK_WS2HELP_LSP_REMOVE WINSOCK_WS2HELP_LSP_REMOVE;
		case 3: [property.ETLSummary = this.ToString] Wscore_WINSOCK_WS2HELP_LSP_DISABLE WINSOCK_WS2HELP_LSP_DISABLE;
		case 4: [property.ETLSummary = this.ToString] Wscore_WINSOCK_WS2HELP_LSP_RESET WINSOCK_WS2HELP_LSP_RESET;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct Wscore_WINSOCK_WS2HELP_LSP_INSTALL = FormatString("LSP %s was installed in the %s-bit catalog by %s (GUID=%s, Category ID=%s)", LSPName.ToString, Catalog.ToString, Installer.ToString, GUID.ToString, Category.ToString)
{
	UnicodeString LSPName;
	UINT32 Catalog;
	AsciiString Installer;
	GUID(true) GUID;
	UINT32 Category;
}
Struct Wscore_WINSOCK_WS2HELP_LSP_REMOVE = FormatString("LSP %s was removed from the %s-bit catalog by %s (GUID=%s, Category ID=%s)", LSPName.ToString, Catalog.ToString, Installer.ToString, GUID.ToString, Category.ToString)
{
	UnicodeString LSPName;
	UINT32 Catalog;
	AsciiString Installer;
	GUID(true) GUID;
	UINT32 Category;
}
Struct Wscore_WINSOCK_WS2HELP_LSP_DISABLE = FormatString("LSP %s was disabled in the %s-bit catalog by %s (GUID=%s, Category ID=%s)", LSPName.ToString, Catalog.ToString, Installer.ToString, GUID.ToString, Category.ToString)
{
	UnicodeString LSPName;
	UINT32 Catalog;
	AsciiString Installer;
	GUID(true) GUID;
	UINT32 Category;
}
Struct Wscore_WINSOCK_WS2HELP_LSP_RESET = FormatString("The %s-bit catalog was reset by the administrator", Catalog.ToString)
{
	UINT32 Catalog;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWinsockAFD, "{e53c6823-7bb8-44bb-90dc-3f86090d48a6}")]
Protocol Wscore_MicrosoftWindowsWinsockAFD = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1000: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_CREATE AFD_EVENT_CREATE;
		case 1001: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_CLOSE AFD_EVENT_CLOSE;
		case 1002: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_CLEANUP AFD_EVENT_CLEANUP;
		case 1003: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_SEND AFD_EVENT_SEND;
		case 1004: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_RECV AFD_EVENT_RECV;
		case 1005: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_SENDTO AFD_EVENT_SENDTO;
		case 1006: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_RECVFROM AFD_EVENT_RECVFROM;
		case 1007: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_SENDTO_ADDR AFD_EVENT_SENDTO_ADDR;
		case 1009: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_RECVFROM_ADDR AFD_EVENT_RECVFROM_ADDR;
		case 1011: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_SENDMSG AFD_EVENT_SENDMSG;
		case 1012: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_RECVMSG AFD_EVENT_RECVMSG;
		case 1013: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_SENDMSG_ADDR AFD_EVENT_SENDMSG_ADDR;
		case 1015: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_RECVMSG_ADDR AFD_EVENT_RECVMSG_ADDR;
		case 1017: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_CONNECT AFD_EVENT_CONNECT;
		case 1018: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_CONNECT_ADDR AFD_EVENT_CONNECT_ADDR;
		case 1020: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_CONNECTEX AFD_EVENT_CONNECTEX;
		case 1021: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_CONNECTEX_ADDR AFD_EVENT_CONNECTEX_ADDR;
		case 1023: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_ACCEPT AFD_EVENT_ACCEPT;
		case 1024: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_ACCEPT_ADDR AFD_EVENT_ACCEPT_ADDR;
		case 1026: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_ACCEPTEX AFD_EVENT_ACCEPTEX;
		case 1027: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_ACCEPTEX_ADDR AFD_EVENT_ACCEPTEX_ADDR;
		case 1029: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_BIND AFD_EVENT_BIND;
		case 1030: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_BIND_ADDR AFD_EVENT_BIND_ADDR;
		case 1032: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_ABORT AFD_EVENT_ABORT;
		case 1033: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_DATAGRAM_DROP_ADDR AFD_EVENT_DATAGRAM_DROP_ADDR;
		case 1035: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OPTION AFD_EVENT_OPTION;
		case 1036: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_WAITFORLISTEN AFD_EVENT_WAITFORLISTEN;
		case 1037: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_LISTEN AFD_EVENT_LISTEN;
		case 3000: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_CONNECT_INDICATION AFD_EVENT_CONNECT_INDICATION;
		case 3001: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_CONNECT_INDICATION_ADDR AFD_EVENT_CONNECT_INDICATION_ADDR;
		case 3003: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_DATA_INDICATION AFD_EVENT_DATA_INDICATION;
		case 3004: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_DATA_INDICATION_ADDR AFD_EVENT_DATA_INDICATION_ADDR;
		case 3006: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_DISCONNECT AFD_EVENT_DISCONNECT;
		case 3007: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_SENDBACKLOG AFD_EVENT_SENDBACKLOG;
		case 1: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_CREATE AFD_EVENT_OLD_CREATE;
		case 2: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_BIND_V4 AFD_EVENT_OLD_BIND_V4;
		case 3: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_BIND_V6 AFD_EVENT_OLD_BIND_V6;
		case 40: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_BIND_ERR AFD_EVENT_OLD_BIND_ERR;
		case 4: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_CONNECT_V4 AFD_EVENT_OLD_CONNECT_V4;
		case 5: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_CONNECT_V6 AFD_EVENT_OLD_CONNECT_V6;
		case 6: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_CONNECT_DONE AFD_EVENT_OLD_CONNECT_DONE;
		case 7: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_ABORT AFD_EVENT_OLD_ABORT;
		case 8: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_ABORT_IND AFD_EVENT_OLD_ABORT_IND;
		case 9: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SEND_ERR AFD_EVENT_OLD_SEND_ERR;
		case 10: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SENDMSG_ERR AFD_EVENT_OLD_SENDMSG_ERR;
		case 11: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_RECV_ERR AFD_EVENT_OLD_RECV_ERR;
		case 12: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_RECVFROM_ERR AFD_EVENT_OLD_RECVFROM_ERR;
		case 13: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_CLOSE AFD_EVENT_OLD_CLOSE;
		case 14: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_CLEANUP AFD_EVENT_OLD_CLEANUP;
		case 15: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_ACCEPT_V4 AFD_EVENT_OLD_ACCEPT_V4;
		case 16: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_ACCEPT_V6 AFD_EVENT_OLD_ACCEPT_V6;
		case 17: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_ACCEPT_ERR AFD_EVENT_OLD_ACCEPT_ERR;
		case 18: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SEND AFD_EVENT_OLD_SEND;
		case 19: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_RECV AFD_EVENT_OLD_RECV;
		case 20: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_RECVFROM AFD_EVENT_OLD_RECVFROM;
		case 21: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SENDTO_V4 AFD_EVENT_OLD_SENDTO_V4;
		case 22: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SENDTO_V6 AFD_EVENT_OLD_SENDTO_V6;
		case 23: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_RECV_DONE AFD_EVENT_OLD_RECV_DONE;
		case 24: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SEND_DONE AFD_EVENT_OLD_SEND_DONE;
		case 25: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SENDMSG_DONE AFD_EVENT_OLD_SENDMSG_DONE;
		case 26: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_RECVFROM_DONE_V4 AFD_EVENT_OLD_RECVFROM_DONE_V4;
		case 27: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_RECVFROM_DONE_V6 AFD_EVENT_OLD_RECVFROM_DONE_V6;
		case 28: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SENDTO_DONE AFD_EVENT_OLD_SENDTO_DONE;
		case 29: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SOCKET_OPTION AFD_EVENT_OLD_SOCKET_OPTION;
		case 30: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SELECT_POLL AFD_EVENT_OLD_SELECT_POLL;
		case 31: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_SELECT_POLL_DONE AFD_EVENT_OLD_SELECT_POLL_DONE;
		case 32: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_EVENTSELECT AFD_EVENT_OLD_EVENTSELECT;
		case 33: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_DROP_DGRAM_V4 AFD_EVENT_OLD_DROP_DGRAM_V4;
		case 34: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_DROP_DGRAM_V6 AFD_EVENT_OLD_DROP_DGRAM_V6;
		case 35: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_CONNECT_IND_V4 AFD_EVENT_OLD_CONNECT_IND_V4;
		case 36: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_CONNECT_IND_V6 AFD_EVENT_OLD_CONNECT_IND_V6;
		case 37: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_DATA_INDICATED AFD_EVENT_OLD_DATA_INDICATED;
		case 38: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_DATAFROM_INDICATED_V4 AFD_EVENT_OLD_DATAFROM_INDICATED_V4;
		case 39: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_DATAFROM_INDICATED_V6 AFD_EVENT_OLD_DATAFROM_INDICATED_V6;
		case 41: [property.ETLSummary = this.ToString] Wscore_AFD_EVENT_OLD_DISCONNECT_INDICATED AFD_EVENT_OLD_DISCONNECT_INDICATED;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table Wscore_WINSOCK_SocketType_ValueMap(value)
{
	switch(value)
	{
		case 1: "SOCK_STREAM";
		case 2: "SOCK_DGRAM";
		case 3: "SOCK_RAW";
		case 4: "SOCK_RDM";
		case 5: "SOCK_SEQPACKET";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Wscore_AFD_ABORT_ValueMap(value)
{
	switch(value)
	{
		case 1: "Attempt to flush pending receive requests failed";
		case 2: "Abortive disconnect requested on endpoint";
		case 3: "Shutdown with SD_RECEIVE posted with receive data pending";
		case 4: "Transport indicated abortive disconnect";
		case 5: "Error on accepted connection not associated with listening socket";
		case 6: "Disconnect failed";
		case 7: "Pending data on connection when disconnect called";
		case 8: "Invalid buffer specified on fastio receive";
		case 9: "Accept operation failed";
		case 10: "Unable to allocate buffer";
		case 11: "Counter overflow";
		case 12: "Data arrives after shutting down receive path";
		case 13: "Data arrives during endpoint cleanup";
		case 14: "Receive request failed";
		case 15: "Send request failed";
		case 16: "Send request cancelled";
		case 17: "TransmitPackets/TransmitFile request cancelled";
		case 18: "Abort indicated during connection request";
		case 19: "Plug and play event caused abort";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Wscore_AFD_DGRAM_DROP_ValueMap(value)
{
	switch(value)
	{
		case 1: "Datagram source address does not match connected address";
		case 2: "Insufficient local buffer space";
		case 3: "Buffer allocation failed";
		case 4: "Insufficient local buffer space - circular queueing enabled";
		case 5: "Indicated datagram too large - integer overflow";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Wscore_AFD_OPTION_ValueMap(value)
{
	switch(value)
	{
		case 1: "SO_OOBINLINE";
		case 2: "FIONBIO";
		case 6: "SO_RCVBUF";
		case 7: "SO_SNDBUF";
		case 9: "SIO_ENABLE_CIRCULAR_QUEUEING";
		case 11: "SIO_UDP_CONNRESET";
		case 13: "AFD_IPV6_V6ONLY";
		case 15: "SIO_UDP_NETRESET";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct Wscore_AFD_EVENT_CREATE = FormatString("socket: %s: Process %s (%s), Endpoint %s, Family %s, Type %s, Protocol %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, ProcessId.ToString, Endpoint.ToString, AddressFamily.ToString, SocketType.ToString, Protocol.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 AddressFamily;
	UINT32 SocketType = Wscore_WINSOCK_SocketType_ValueMap(this);
	UINT32 Protocol;
	EtlPtr ProcessId;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_CLOSE = FormatString("closesocket: %s: Process %s, Endpoint %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_CLEANUP = FormatString("socket cleanup: %s: Process %s, Endpoint %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_SEND = FormatString("send: %s: Process %s, Endpoint %s, Buffer Count %s, Buffer %s, Length %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_RECV = FormatString("recv: %s: Process %s, Endpoint %s, Buffer Count %s, Buffer %s, Length %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_SENDTO = FormatString("sendto: %s: Process %s, Endpoint %s, Buffer Count %s, Buffer %s, Length %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_RECVFROM = FormatString("recvfrom: %s: Process %s, Endpoint %s, Buffer Count %s, Buffer %s, Length %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_SENDTO_ADDR = FormatString("sendto: %s: Process %s, Endpoint %s, Buffer Count %s, Buffer %s, Length %s, Addr %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, IsValueNone(Address) ? "Null" : Address.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct Wscore_AFD_EVENT_RECVFROM_ADDR = FormatString("recvfrom: %s: Process %s, Endpoint %s, Buffer Count %s, Buffer %s, Length %s, Addr %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, IsValueNone(Address) ? "Null" : Address.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct Wscore_AFD_EVENT_SENDMSG = FormatString("sendmsg: %s: Process %s, Endpoint %s, Buffer Count %s, Buffer %s, Length %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_RECVMSG = FormatString("recvmsg: %s: Process %s, Endpoint %s, Buffer Count %s, Buffer %s, Length %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_SENDMSG_ADDR = FormatString("sendmsg: %s: Process %s, Endpoint %s, Buffer Count %s, Buffer %s, Length %s, Addr %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, IsValueNone(Address) ? "Null" : Address.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct Wscore_AFD_EVENT_RECVMSG_ADDR = FormatString("recvmsg: %s: Process %s, Endpoint %s, Buffer Count %s, Buffer %s, Length %s, Addr %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, IsValueNone(Address) ? "Null" : Address.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct Wscore_AFD_EVENT_CONNECT = FormatString("connect: %s: Process %s, Endpoint %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_CONNECT_ADDR = FormatString("connect: %s: Process %s, Endpoint %s, Address %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, IsValueNone(Address) ? "Null" : Address.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct Wscore_AFD_EVENT_CONNECTEX = FormatString("ConnectEx: %s: Process %s, Endpoint %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_CONNECTEX_ADDR = FormatString("ConnectEx: %s: Process %s, Endpoint %s, Buffer %s, Length %s, Address %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Buffer.ToString, BufferLength.ToString, IsValueNone(Address) ? "Null" : Address.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Destination = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct Wscore_AFD_EVENT_ACCEPT = FormatString("accept: %s: Process %s, Endpoint %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_ACCEPT_ADDR = FormatString("accept: %s: Process %s, Endpoint %s, Address %s, Accept Endpoint %s, Current Backlog %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, IsValueNone(Address) ? "Null" : Address.ToString, AcceptEndpoint.ToString, CurrentBacklog.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
	EtlPtr AcceptEndpoint;
	UINT32 CurrentBacklog;
}
Struct Wscore_AFD_EVENT_ACCEPTEX = FormatString("AcceptEx: %s: Process %s, Endpoint %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_ACCEPTEX_ADDR = FormatString("AcceptEx: %s: Process %s, Endpoint %s, Buffer %s, Length %s, Address %s, Accept Endpoint %s, Current Backlog %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Buffer.ToString, BufferLength.ToString, IsValueNone(Address) ? "Null" : Address.ToString, AcceptEndpoint.ToString, CurrentBacklog.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
	NTSTATUS Status;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
	EtlPtr AcceptEndpoint;
	UINT32 CurrentBacklog;
}
Struct Wscore_AFD_EVENT_BIND = FormatString("bind: %s: Process %s, Endpoint %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_BIND_ADDR = FormatString("bind: %s: Process %s, Endpoint %s, Address %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, IsValueNone(Address) ? "Null" : Address.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct Wscore_AFD_EVENT_ABORT = FormatString("connection aborted: %s: Process %s, Endpoint %s, Seq %s, Reason %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString, Reason.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 Reason = Wscore_AFD_ABORT_ValueMap(this);
}
Struct Wscore_AFD_EVENT_DATAGRAM_DROP_ADDR = FormatString("datagram dropped: %s: Process %s, Endpoint %s, Buffer %s, Length %s, Address %s, Seq %s, Reason %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Buffer.ToString, BufferLength.ToString, IsValueNone(Address) ? "Null" : Address.ToString, Location.ToString, Reason.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			ETL_SOCKADDR_STORAGE Address;
	}
	UINT32 Reason = Wscore_AFD_DGRAM_DROP_ValueMap(this);
}
Struct Wscore_AFD_EVENT_OPTION = FormatString("Socket option: %s: Process %s, Endpoint %s, Option %s, Value %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Option.ToString, Value.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 Option = Wscore_AFD_OPTION_ValueMap(this);
	UINT32 Value;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_WAITFORLISTEN = FormatString("Wait for listen: %s: Process %s, Endpoint %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_LISTEN = FormatString("Listen: %s: Process %s, Endpoint %s, Backlog %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Backlog.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 Backlog;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_CONNECT_INDICATION = FormatString("Connect indication: %s: Process %s, Endpoint %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_CONNECT_INDICATION_ADDR = FormatString("Connect indication: %s: Process %s, Endpoint %s, Address %s, Backlog Count %s, Seq %s, Status %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, IsValueNone(Address) ? "Null" : Address.ToString, CurrentBacklog.ToString, Location.ToString, Status.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
	UINT32 CurrentBacklog;
}
Struct Wscore_AFD_EVENT_DATA_INDICATION = FormatString("Data indication: %s: Process %s, Endpoint %s, Buffer %s, Length %s, Seq %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Buffer.ToString, BufferLength.ToString, Location.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
}
Struct Wscore_AFD_EVENT_DATA_INDICATION_ADDR = FormatString("Data indication: %s: Process %s, Endpoint %s, Buffer %s, Length %s, Address %s, Seq %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Buffer.ToString, BufferLength.ToString, IsValueNone(Address) ? "Null" : Address.ToString, Location.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
	UINT32 AddressLen;
	switch
	{
		case AddressLen > 0 :
			[post.Property.Source = Property.UTAddress]
			ETL_SOCKADDR_STORAGE Address;
	}
}
Struct Wscore_AFD_EVENT_DISCONNECT = FormatString("disconnect indicated: %s: Process %s, Endpoint %s, Seq %s", EnterExit.ToString, Process.ToString, Endpoint.ToString, Location.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_SENDBACKLOG = FormatString("Transport send backlog: Process %s, Endpoint %s, Send Backlog %s", EnterExit.ToString, Location.ToString, SendBacklog.ToString)
{
	UINT32 EnterExit;
	UINT32 Location;
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 SendBacklog;
}
Struct Wscore_AFD_EVENT_OLD_CREATE = FormatString("Socket creation: %s %s %s %s %s", Process.ToString, Endpoint.ToString, AddressFamily.ToString, SocketType.ToString, Protocol.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 AddressFamily;
	UINT32 SocketType = Wscore_WINSOCK_SocketType_ValueMap(this);
	UINT32 Protocol;
	EtlPtr UserModePid;
}
Struct Wscore_AFD_EVENT_OLD_BIND_V4 = FormatString("Socket bind: %s %s %s %s %s", Process.ToString, Endpoint.ToString, Address.ToString, Port.ToString, Status.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_OLD_BIND_V6 = FormatString("Socket bind: %s %s %s %s %s", Process.ToString, Endpoint.ToString, Address.ToString, Port.ToString, Status.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_OLD_BIND_ERR = FormatString("Failed bind: %s %s %s", Process.ToString, Endpoint.ToString, Error.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	WinErrorCode Error;
}
Struct Wscore_AFD_EVENT_OLD_CONNECT_V4 = FormatString("Socket connect: %s %s %s %s", Process.ToString, Endpoint.ToString, Address.ToString, Port.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
}
Struct Wscore_AFD_EVENT_OLD_CONNECT_V6 = FormatString("Socket connect: %s %s %s %s", Process.ToString, Endpoint.ToString, Address.ToString, Port.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
}
Struct Wscore_AFD_EVENT_OLD_CONNECT_DONE = FormatString("Connect completed: %s %s %s", Process.ToString, Endpoint.ToString, Error.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	WinErrorCode Error;
}
Struct Wscore_AFD_EVENT_OLD_ABORT = FormatString("AFD initiated abort: %s %s %s", Process.ToString, Endpoint.ToString, Reason.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	INT32 Reason;
}
Struct Wscore_AFD_EVENT_OLD_ABORT_IND = FormatString("Transport initiated abort: %s %s %s", Process.ToString, Endpoint.ToString, Reason.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	INT32 Reason;
}
Struct Wscore_AFD_EVENT_OLD_SEND_ERR = FormatString("Failed send request: %s %s %s", Process.ToString, Endpoint.ToString, Error.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	WinErrorCode Error;
}
Struct Wscore_AFD_EVENT_OLD_SENDMSG_ERR = FormatString("Failed WSASendMsg request: %s %s %s", Process.ToString, Endpoint.ToString, Error.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	WinErrorCode Error;
}
Struct Wscore_AFD_EVENT_OLD_RECV_ERR = FormatString("Failed recv request: %s %s %s", Process.ToString, Endpoint.ToString, Error.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	WinErrorCode Error;
}
Struct Wscore_AFD_EVENT_OLD_RECVFROM_ERR = FormatString("Failed recvfrom request: %s %s %s", Process.ToString, Endpoint.ToString, Error.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	WinErrorCode Error;
}
Struct Wscore_AFD_EVENT_OLD_CLOSE = FormatString("Socket close: %s %s %s", Process.ToString, Endpoint.ToString, Error.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	WinErrorCode Error;
}
Struct Wscore_AFD_EVENT_OLD_CLEANUP = FormatString("Socket cleanup (all references removed): %s %s %s", Process.ToString, Endpoint.ToString, Error.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	WinErrorCode Error;
}
Struct Wscore_AFD_EVENT_OLD_ACCEPT_V4 = FormatString("Socket accept: %s %s %s %s %s", Process.ToString, Endpoint.ToString, Address.ToString, Port.ToString, Status.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_OLD_ACCEPT_V6 = FormatString("Socket accept: %s %s %s %s %s", Process.ToString, Endpoint.ToString, Address.ToString, Port.ToString, Status.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
	NTSTATUS Status;
}
Struct Wscore_AFD_EVENT_OLD_ACCEPT_ERR = FormatString("Accept failed: %s %s %s", Process.ToString, Endpoint.ToString, Error.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	WinErrorCode Error;
}
Struct Wscore_AFD_EVENT_OLD_SEND = FormatString("Send posted: %s %s %s %s %s %s", Process.ToString, Endpoint.ToString, FastPath.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	BOOL FastPath;
	INT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
}
Struct Wscore_AFD_EVENT_OLD_RECV = FormatString("Receive posted: %s %s %s %s %s %s", Process.ToString, Endpoint.ToString, FastPath.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	BOOL FastPath;
	INT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
}
Struct Wscore_AFD_EVENT_OLD_RECVFROM = FormatString("RecvFrom posted: %s %s %s %s %s %s", Process.ToString, Endpoint.ToString, FastPath.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	BOOL FastPath;
	INT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
}
Struct Wscore_AFD_EVENT_OLD_SENDTO_V4 = FormatString("SendTo posted: %s %s %s %s %s %s %s %s", Process.ToString, Endpoint.ToString, FastPath.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, Address.ToString, Port.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	BOOL FastPath;
	INT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
}
Struct Wscore_AFD_EVENT_OLD_SENDTO_V6 = FormatString("SendTo posted: %s %s %s %s %s %s %s %s", Process.ToString, Endpoint.ToString, FastPath.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, Address.ToString, Port.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	BOOL FastPath;
	INT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
}
Struct Wscore_AFD_EVENT_OLD_RECV_DONE = FormatString("Recv completed: %s %s %s %s", Process.ToString, Endpoint.ToString, Buffer.ToString, BufferLength.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
}
Struct Wscore_AFD_EVENT_OLD_SEND_DONE = FormatString("Send completed: %s %s %s %s", Process.ToString, Endpoint.ToString, Buffer.ToString, BufferLength.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
}
Struct Wscore_AFD_EVENT_OLD_SENDMSG_DONE = FormatString("SendMsg completed: %s %s %s %s", Process.ToString, Endpoint.ToString, Buffer.ToString, BufferLength.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
}
Struct Wscore_AFD_EVENT_OLD_RECVFROM_DONE_V4 = FormatString("RecvFrom completed: %s %s %s %s %s %s %s", Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, Address.ToString, Port.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	INT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
}
Struct Wscore_AFD_EVENT_OLD_RECVFROM_DONE_V6 = FormatString("RecvFrom completed: %s %s %s %s %s %s %s", Process.ToString, Endpoint.ToString, BufferCount.ToString, Buffer.ToString, BufferLength.ToString, Address.ToString, Port.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	INT32 BufferCount;
	EtlPtr Buffer;
	UINT32 BufferLength;
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
}
Struct Wscore_AFD_EVENT_OLD_SENDTO_DONE = FormatString("SendTo completed: %s %s %s %s", Process.ToString, Endpoint.ToString, Buffer.ToString, BufferLength.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	EtlPtr Buffer;
	UINT32 BufferLength;
}
Struct Wscore_AFD_EVENT_OLD_SOCKET_OPTION = FormatString("Socket option set: %s %s %s %s", Process.ToString, Endpoint.ToString, Option.ToString, Value.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 Option = Wscore_AFD_OPTION_ValueMap(this);
	UINT32 Value;
}
Struct Wscore_AFD_EVENT_OLD_SELECT_POLL = FormatString("Select/Poll posted: %s %s %s", Process.ToString, HandleCount.ToString, Timeout.ToString)
{
	EtlPtr Process;
	INT32 HandleCount;
	INT32 Timeout;
}
Struct Wscore_AFD_EVENT_OLD_SELECT_POLL_DONE = FormatString("Select/Poll completed: %s %s %s", Process.ToString, Endpoint.ToString, Error.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	WinErrorCode Error;
}
Struct Wscore_AFD_EVENT_OLD_EVENTSELECT = FormatString("WSAEventSelect: %s %s %s", Process.ToString, Endpoint.ToString, EventMask.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	UINT32 EventMask;
}
Struct Wscore_AFD_EVENT_OLD_DROP_DGRAM_V4 = FormatString("Datagram dropped: %s %s %s %s %s %s", Process.ToString, Endpoint.ToString, PacketSize.ToString, Address.ToString, Port.ToString, Reason.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	INT32 PacketSize;
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
	INT32 Reason;
}
Struct Wscore_AFD_EVENT_OLD_DROP_DGRAM_V6 = FormatString("Datagram dropped: %s %s %s %s %s %s", Process.ToString, Endpoint.ToString, PacketSize.ToString, Address.ToString, Port.ToString, Reason.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	INT32 PacketSize;
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
	INT32 Reason;
}
Struct Wscore_AFD_EVENT_OLD_CONNECT_IND_V4 = FormatString("Connection indicated: %s %s %s %s", Process.ToString, ListenEndpoint.ToString, Address.ToString, Port.ToString)
{
	EtlPtr Process;
	EtlPtr ListenEndpoint;
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
}
Struct Wscore_AFD_EVENT_OLD_CONNECT_IND_V6 = FormatString("Connection indicated: %s %s %s %s", Process.ToString, ListenEndpoint.ToString, Address.ToString, Port.ToString)
{
	EtlPtr Process;
	EtlPtr ListenEndpoint;
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
}
Struct Wscore_AFD_EVENT_OLD_DATA_INDICATED = FormatString("Data indicated from transport: %s %s %s", Process.ToString, Endpoint.ToString, BytesIndicated.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	INT32 BytesIndicated;
}
Struct Wscore_AFD_EVENT_OLD_DATAFROM_INDICATED_V4 = FormatString("Data indicated from transport: %s %s %s %s %s", Process.ToString, Endpoint.ToString, Address.ToString, Port.ToString, BytesIndicated.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
	INT32 BytesIndicated;
}
Struct Wscore_AFD_EVENT_OLD_DATAFROM_INDICATED_V6 = FormatString("Data indicated from transport: %s %s %s %s %s", Process.ToString, Endpoint.ToString, Address.ToString, Port.ToString, BytesIndicated.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	[DataFieldByteOrder = BigEndian]UINT16 Port;
	INT32 BytesIndicated;
}
Struct Wscore_AFD_EVENT_OLD_DISCONNECT_INDICATED = FormatString("Disconnect indicated from transport: %s %s", Process.ToString, Endpoint.ToString)
{
	EtlPtr Process;
	EtlPtr Endpoint;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsNetworkManagerTriggerProvider, "{9b307223-4e4d-4bf5-9be8-995cd8e7420b}")]
Protocol Wscore_MicrosoftWindowsNetworkManagerTriggerProvider = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] Wscore_Symbol_FirstAddressArrivalEvent Symbol_FirstAddressArrivalEvent;
		case 2: [property.ETLSummary = this.ToString] Wscore_Symbol_LastAddressRemovalEvent Symbol_LastAddressRemovalEvent;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct Wscore_Symbol_FirstAddressArrivalEvent = FormatString("Symbol_FirstAddressArrivalEvent - NetworkChangeGuid : %s", NetworkChangeGuid.ToString)
{
	GUID(true) NetworkChangeGuid;
}
Struct Wscore_Symbol_LastAddressRemovalEvent = FormatString("Symbol_LastAddressRemovalEvent - NetworkChangeGuid : %s", NetworkChangeGuid.ToString)
{
	GUID(true) NetworkChangeGuid;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWinsockSQM, "{093da50c-0bb9-4d7d-b95c-3bb9fcda5ee8}")]
Protocol Wscore_MicrosoftWindowsWinsockSQM = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 5: [property.ETLSummary = this.ToString] Wscore_WINSOCK_SQM_SET_DWORD WINSOCK_SQM_SET_DWORD;
		case 10: [property.ETLSummary = this.ToString] Wscore_WINSOCK_SQM_SET_STRING WINSOCK_SQM_SET_STRING;
		case 11: [property.ETLSummary = this.ToString] Wscore_WINSOCK_SQM_ADD_STREAMROW WINSOCK_SQM_ADD_STREAMROW;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct Wscore_WINSOCK_SQM_SET_DWORD = FormatString("WINSOCK_SQM_SET_DWORD - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmDWORDDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmDWORDDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmDWORDDatapointValue;
}
Struct Wscore_WINSOCK_SQM_SET_STRING = FormatString("WINSOCK_SQM_SET_STRING - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmStringDatapointValue : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmStringDatapointValue.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UnicodeString SqmStringDatapointValue;
}
Struct Wscore_WINSOCK_SQM_ADD_STREAMROW = FormatString("WINSOCK_SQM_ADD_STREAMROW - SqmType : %s, SqmSessionGuid : %s, SqmID : %s, SqmStreamRowLength : %s, SqmStreamRow : %s", SqmType.ToString, SqmSessionGuid.ToString, SqmID.ToString, SqmStreamRowLength.ToString, SqmStreamRow.ToString)
{
	UINT32 SqmType;
	GUID(true) SqmSessionGuid;
	UINT32 SqmID;
	UINT32 SqmStreamRowLength;
	Wscore_SqmStreamRow SqmStreamRow[SqmStreamRowLength]; // Struct Array
}
struct Wscore_SqmStreamRow //Array Struct
{
	UINT32 SqmTypeEntry;
	UINT32 SqmDWORDEntry;
	UnicodeString SqmStringEntry;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWinsockWS2HELP_Keyword, "{d5c25f9a-4d47-493e-9184-40dd397a004d}")]
struct Wscore_MicrosoftWindowsWinsockWS2HELP_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWinsockAFD_Keyword, "{e53c6823-7bb8-44bb-90dc-3f86090d48a6}")]
struct Wscore_MicrosoftWindowsWinsockAFD_Keyword
{
	UINT64 AFD_KW_DATAGRAM:1 = FormatString("        (%s) %s", this.ToBitString, this? "AFD_KW_DATAGRAM":"");
	UINT64 AFD_KW_STREAM:1 = FormatString("          (%s) %s", this.ToBitString, this? "AFD_KW_STREAM":"");
	UINT64 AFD_KW_SOURCE_WINSOCK:1 = FormatString("  (%s) %s", this.ToBitString, this? "AFD_KW_SOURCE_WINSOCK":"");
	UINT64 AFD_KW_SOURCE_TRANSPORT:1 = FormatString("(%s) %s", this.ToBitString, this? "AFD_KW_SOURCE_TRANSPORT":"");
	UINT64 AFD_KW_FASTPATH:1 = FormatString("        (%s) %s", this.ToBitString, this? "AFD_KW_FASTPATH":"");
	UINT64 AFD_KW_BUFFERED:1 = FormatString("        (%s) %s", this.ToBitString, this? "AFD_KW_BUFFERED":"");
	UINT64 Reserved1:58 = FormatString("              (%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsNetworkManagerTriggerProvider_Keyword, "{9b307223-4e4d-4bf5-9be8-995cd8e7420b}")]
struct Wscore_MicrosoftWindowsNetworkManagerTriggerProvider_Keyword
{
	UINT64 Keyword_FirstAddressArrivalEvent:1 = FormatString("(%s) %s", this.ToBitString, this? "Symbol_FirstAddressArrivalKeyword":"");
	UINT64 Keyword_LastAddressRemovalEvent:1 = FormatString(" (%s) %s", this.ToBitString, this? "Symbol_LastAddressRemovalKeyword":"");
	UINT64 Reserved1:62 = FormatString("                       (%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWinsockSQM_Keyword, "{093da50c-0bb9-4d7d-b95c-3bb9fcda5ee8}")]
struct Wscore_MicrosoftWindowsWinsockSQM_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
