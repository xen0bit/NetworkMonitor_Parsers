//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-ndis
//#
//#  Details:                
//#
//#  Public References:      ndis.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsNDIS, "{CDEAD503-17F5-4a3e-B7AE-DF8CC2902EB9}")]
Protocol NDIS_MicrosoftWindowsNDIS = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 60001: [property.ETLSummary = this.ToString] NDIS_NetError NetError;
		case 60002: [property.ETLSummary = this.ToString] NDIS_NetWarning NetWarning;
		case 60003: [property.ETLSummary = this.ToString] NDIS_StateTransition StateTransition;
		case 60004: [property.ETLSummary = this.ToString] NDIS_ContextUpdate ContextUpdate;
		case 60101: [property.ETLSummary = this.ToString] NDIS_V4Tuple V4Tuple;
		case 60102: [property.ETLSummary = this.ToString] NDIS_V6Tuple V6Tuple;
		case 60103: [property.ETLSummary = this.ToString] NDIS_InterfaceInfo InterfaceInfo;
		case 10000: [property.ETLSummary = this.ToString] NDIS_AbortFilterRequest AbortFilterRequest;
		case 10001: [property.ETLSummary = this.ToString] NDIS_AbortMiniportRequest AbortMiniportRequest;
		case 10002: [property.ETLSummary = this.ToString] NDIS_AddDevice AddDevice;
		case 10003: [property.ETLSummary = this.ToString] NDIS_AddDeviceFailed AddDeviceFailed;
		case 10004: [property.ETLSummary = this.ToString] NDIS_AddPnPDevice AddPnPDevice;
		case 10005: [property.ETLSummary = this.ToString] NDIS_AllocateAdapterChannelFailed AllocateAdapterChannelFailed;
		case 10006: [property.ETLSummary = this.ToString] NDIS_ProtocolBindStatus ProtocolBindStatus;
		case 10007: [property.ETLSummary = this.ToString] NDIS_CallMiniportReset CallMiniportReset;
		case 10008: [property.ETLSummary = this.ToString] NDIS_CancelFilterOidRequest CancelFilterOidRequest;
		case 10009: [property.ETLSummary = this.ToString] NDIS_CancelledWakeIrp CancelledWakeIrp;
		case 10010: [property.ETLSummary = this.ToString] NDIS_CancelMiniportOidRequest CancelMiniportOidRequest;
		case 10011: [property.ETLSummary = this.ToString] NDIS_ChangeInformationFailed ChangeInformationFailed;
		case 10012: [property.ETLSummary = this.ToString] NDIS_ChangeNotificationCompartment ChangeNotificationCompartment;
		case 10013: [property.ETLSummary = this.ToString] NDIS_ChangeNotificationInterfaceInfo ChangeNotificationInterfaceInfo;
		case 10014: [property.ETLSummary = this.ToString] NDIS_ChangeNotificationInterfaceEnum ChangeNotificationInterfaceEnum;
		case 10015: [property.ETLSummary = this.ToString] NDIS_ChangeNotificationNetwork ChangeNotificationNetwork;
		case 10016: [property.ETLSummary = this.ToString] NDIS_ClearingOidRequest ClearingOidRequest;
		case 10017: [property.ETLSummary = this.ToString] NDIS_CloseAdapter CloseAdapter;
		case 10018: [property.ETLSummary = this.ToString] NDIS_CompletingOidRequestFilter CompletingOidRequestFilter;
		case 10019: [property.ETLSummary = this.ToString] NDIS_CreatedWakeIrp CreatedWakeIrp;
		case 10020: [property.ETLSummary = this.ToString] NDIS_DefaultPortActivated DefaultPortActivated;
		case 10021: [property.ETLSummary = this.ToString] NDIS_DefaultPortDeactivated DefaultPortDeactivated;
		case 10022: [property.ETLSummary = this.ToString] NDIS_DeregisterInterfaceFailed DeregisterInterfaceFailed;
		case 10023: [property.ETLSummary = this.ToString] NDIS_DevicePowerStateChange DevicePowerStateChange;
		case 10024: [property.ETLSummary = this.ToString] NDIS_DispatchPnPIrp DispatchPnPIrp;
		case 10025: [property.ETLSummary = this.ToString] NDIS_DispatchWMIIrp DispatchWMIIrp;
		case 10026: [property.ETLSummary = this.ToString] NDIS_ExecuteMethodFailed ExecuteMethodFailed;
		case 10027: [property.ETLSummary = this.ToString] NDIS_FilterArrivalIndicationFailed FilterArrivalIndicationFailed;
		case 10028: [property.ETLSummary = this.ToString] NDIS_FilterChangedMediaType FilterChangedMediaType;
		case 10029: [property.ETLSummary = this.ToString] NDIS_FilterRegistrationFailed FilterRegistrationFailed;
		case 10030: [property.ETLSummary = this.ToString] NDIS_FilterRemovalIndicationFailed FilterRemovalIndicationFailed;
		case 10031: [property.ETLSummary = this.ToString] NDIS_IndicateAdapterRemovalFailed IndicateAdapterRemovalFailed;
		case 10032: [property.ETLSummary = this.ToString] NDIS_InitializeAdapterInfo InitializeAdapterInfo;
		case 10033: [property.ETLSummary = this.ToString] NDIS_InitializeAdapterFailed InitializeAdapterFailed;
		case 10034: [property.ETLSummary = this.ToString] NDIS_InitializeConfigurationFailed InitializeConfigurationFailed;
		case 10035: [property.ETLSummary = this.ToString] NDIS_InvalidSystemPowerState InvalidSystemPowerState;
		case 10037: [property.ETLSummary = this.ToString] NDIS_IoSetDeviceInterfaceStateFailed IoSetDeviceInterfaceStateFailed;
		case 10038: [property.ETLSummary = this.ToString] NDIS_IoWMIWriteEventFailed IoWMIWriteEventFailed;
		case 10039: [property.ETLSummary = this.ToString] NDIS_IrpSetPowerFailed IrpSetPowerFailed;
		case 10040: [property.ETLSummary = this.ToString] NDIS_KeptFilterFakeHandlers KeptFilterFakeHandlers;
		case 10041: [property.ETLSummary = this.ToString] NDIS_KeptMiniportFakeHandlers KeptMiniportFakeHandlers;
		case 10042: [property.ETLSummary = this.ToString] NDIS_MapOpenByNameFailed MapOpenByNameFailed;
		case 10043: [property.ETLSummary = this.ToString] NDIS_NotifyMiniportAction NotifyMiniportAction;
		case 10044: [property.ETLSummary = this.ToString] NDIS_MiniportInitializeHandlerFailed MiniportInitializeHandlerFailed;
		case 10045: [property.ETLSummary = this.ToString] NDIS_MiniportMacAddress MiniportMacAddress;
		case 10046: [property.ETLSummary = this.ToString] NDIS_MiniportPowerDeviceState MiniportPowerDeviceState;
		case 10047: [property.ETLSummary = this.ToString] NDIS_MiniportPoweringUp MiniportPoweringUp;
		case 10048: [property.ETLSummary = this.ToString] NDIS_MiniportPowerStates MiniportPowerStates;
		case 10049: [property.ETLSummary = this.ToString] NDIS_MiniportPowerSystemState MiniportPowerSystemState;
		case 10050: [property.ETLSummary = this.ToString] NDIS_MiniportRestartFailed MiniportRestartFailed;
		case 10052: [property.ETLSummary = this.ToString] NDIS_OidQueryFailed OidQueryFailed;
		case 10053: [property.ETLSummary = this.ToString] NDIS_OpenFailedMiniportNotStarted OpenFailedMiniportNotStarted;
		case 10054: [property.ETLSummary = this.ToString] NDIS_PnPPortActivationFailed PnPPortActivationFailed;
		case 10055: [property.ETLSummary = this.ToString] NDIS_PowerDisableWakeup PowerDisableWakeup;
		case 10056: [property.ETLSummary = this.ToString] NDIS_PowerDownFailed PowerDownFailed;
		case 10057: [property.ETLSummary = this.ToString] NDIS_PowerDownFailedCannotReinitialize PowerDownFailedCannotReinitialize;
		case 10058: [property.ETLSummary = this.ToString] NDIS_PowerHaltMiniport PowerHaltMiniport;
		case 10059: [property.ETLSummary = this.ToString] NDIS_PowerHibernateOrShutdown PowerHibernateOrShutdown;
		case 10060: [property.ETLSummary = this.ToString] NDIS_PowerIrpComplete PowerIrpComplete;
		case 10061: [property.ETLSummary = this.ToString] NDIS_PowerOnMiniportNotStarted PowerOnMiniportNotStarted;
		case 10062: [property.ETLSummary = this.ToString] NDIS_PowerOnMiniportRemoved PowerOnMiniportRemoved;
		case 10063: [property.ETLSummary = this.ToString] NDIS_PowerPolicyPatternNotEnabled PowerPolicyPatternNotEnabled;
		case 10064: [property.ETLSummary = this.ToString] NDIS_PowerPolicySetD3 PowerPolicySetD3;
		case 10065: [property.ETLSummary = this.ToString] NDIS_PowerPolicyStates PowerPolicyStates;
		case 10066: [property.ETLSummary = this.ToString] NDIS_PowerShutdownMiniport PowerShutdownMiniport;
		case 10067: [property.ETLSummary = this.ToString] NDIS_PowerWakeNotEnabled PowerWakeNotEnabled;
		case 10068: [property.ETLSummary = this.ToString] NDIS_PowerWakeUpDevice PowerWakeUpDevice;
		case 10069: [property.ETLSummary = this.ToString] NDIS_ProtocolBind ProtocolBind;
		case 10070: [property.ETLSummary = this.ToString] NDIS_ProtocolUnbind ProtocolUnbind;
		case 10071: [property.ETLSummary = this.ToString] NDIS_QueryPnPDeviceStateFailed QueryPnPDeviceStateFailed;
		case 10072: [property.ETLSummary = this.ToString] NDIS_QueryPowerComplete QueryPowerComplete;
		case 10073: [property.ETLSummary = this.ToString] NDIS_QueryPowerCompleteSystemState QueryPowerCompleteSystemState;
		case 10074: [property.ETLSummary = this.ToString] NDIS_QuerySetMiniportDeviceStateFailed QuerySetMiniportDeviceStateFailed;
		case 10075: [property.ETLSummary = this.ToString] NDIS_ReferenceProtocolFailed ReferenceProtocolFailed;
		case 10076: [property.ETLSummary = this.ToString] NDIS_RegisterInterruptFailed RegisterInterruptFailed;
		case 10077: [property.ETLSummary = this.ToString] NDIS_RegisterMiniportDriverFailed RegisterMiniportDriverFailed;
		case 10078: [property.ETLSummary = this.ToString] NDIS_SendPacketCompleteToOpen SendPacketCompleteToOpen;
		case 10079: [property.ETLSummary = this.ToString] NDIS_SetEnableWakeUpCompleted SetEnableWakeUpCompleted;
		case 10080: [property.ETLSummary = this.ToString] NDIS_SetMiniportEthMulticastListFailed SetMiniportEthMulticastListFailed;
		case 10081: [property.ETLSummary = this.ToString] NDIS_SetMiniportRSSCapsFailed SetMiniportRSSCapsFailed;
		case 10082: [property.ETLSummary = this.ToString] NDIS_SetOpenEthAddDeleteMulticastFailed SetOpenEthAddDeleteMulticastFailed;
		case 10083: [property.ETLSummary = this.ToString] NDIS_SetOpenEthMulticastListFailed SetOpenEthMulticastListFailed;
		case 10084: [property.ETLSummary = this.ToString] NDIS_SetOpenFunctionalInvalidMediaType SetOpenFunctionalInvalidMediaType;
		case 10085: [property.ETLSummary = this.ToString] NDIS_SetOpenGroupAddressInvalidMediaType SetOpenGroupAddressInvalidMediaType;
		case 10086: [property.ETLSummary = this.ToString] NDIS_SetOpenRSSCapsFailed SetOpenRSSCapsFailed;
		case 10087: [property.ETLSummary = this.ToString] NDIS_SystemPowerOnComplete SystemPowerOnComplete;
		case 10088: [property.ETLSummary = this.ToString] NDIS_TransportFailedPnPEvent TransportFailedPnPEvent;
		case 10089: [property.ETLSummary = this.ToString] NDIS_UnsupportedMiniportMediaType UnsupportedMiniportMediaType;
		case 10090: [property.ETLSummary = this.ToString] NDIS_Validate60ProtocolFailed Validate60ProtocolFailed;
		case 10091: [property.ETLSummary = this.ToString] NDIS_WaitWakeComplete WaitWakeComplete;
		case 10092: [property.ETLSummary = this.ToString] NDIS_WaitWakeIrpFailed WaitWakeIrpFailed;
		case 10093: [property.ETLSummary = this.ToString] NDIS_WakeByMiniport WakeByMiniport;
		case 10094: [property.ETLSummary = this.ToString] NDIS_NdisErrorLogEntry NdisErrorLogEntry;
		case 10095: [property.ETLSummary = this.ToString] NDIS_AbortingRequest AbortingRequest;
		case 10096: [property.ETLSummary = this.ToString] NDIS_PnPPortDeactivationFailed PnPPortDeactivationFailed;
		case 10097: [property.ETLSummary = this.ToString] NDIS_QueryPowerCompleteSystemStatePoRequest QueryPowerCompleteSystemStatePoRequest;
		case 10098: [property.ETLSummary = this.ToString] NDIS_QueryPowerFailed QueryPowerFailed;
		case 10099: [property.ETLSummary = this.ToString] NDIS_DevicePowerOnFailed DevicePowerOnFailed;
		case 10100: [property.ETLSummary = this.ToString] NDIS_PowerPolicyError PowerPolicyError;
		case 10101: [property.ETLSummary = this.ToString] NDIS_DoOidRequest DoOidRequest;
		case 10102: [property.ETLSummary = this.ToString] NDIS_CompletingOidRequestMiniport CompletingOidRequestMiniport;
		case 10103: [property.ETLSummary = this.ToString] NDIS_FilterStateChange FilterStateChange;
		case 10104: [property.ETLSummary = this.ToString] NDIS_MiniportStatusIndicationConnect MiniportStatusIndicationConnect;
		case 10105: [property.ETLSummary = this.ToString] NDIS_MiniportStatusIndicationDisconnect MiniportStatusIndicationDisconnect;
		case 10106: [property.ETLSummary = this.ToString] NDIS_MiniportStatusIndicationOperStatusUp MiniportStatusIndicationOperStatusUp;
		case 10107: [property.ETLSummary = this.ToString] NDIS_MiniportStatusIndicationOperStatusNotUp MiniportStatusIndicationOperStatusNotUp;
		case 10108: [property.ETLSummary = this.ToString] NDIS_MiniportStatusIndicationNetworkChange MiniportStatusIndicationNetworkChange;
		case 10200: [property.ETLSummary = this.ToString] NDIS_DpcStart DpcStart;
		case 10201: [property.ETLSummary = this.ToString] NDIS_DpcEnd DpcEnd;
		case 10202: [property.ETLSummary = this.ToString] NDIS_QueuedReceiveStart QueuedReceiveStart;
		case 10203: [property.ETLSummary = this.ToString] NDIS_QueuedReceiveEnd QueuedReceiveEnd;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table NDIS_utOpcodeMap(value)
{
	switch(value)
	{
		case 180: "Start State";
		case 181: "End State";
		case 182: "Closed State";
		case 183: "Open State";
		case 184: "Connect State";
		case 185: "Listen State";
		case 186: "Association State";
		case 187: "Authentication State";
		case 188: "Established State";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapInitializeReason(value)
{
	switch(value)
	{
		case 1: "InitializeHandler";
		case 2: "Error creating Ndis Supported Oid List";
		case 3: "WOL not possible on this miniport";
		case 4: "Error creating the Ethernet filter database";
		case 5: "Error creating the Token Ring filter database";
		case 6: "Error creating the NULL filter database";
		case 7: "Error creating the NULL bottom most filter database";
		case 8: "IoWMIRegistrationControl failed";
		case 10: "IoRegisterDeviceClassAssociation failed";
		case 11: "ndisIfUpdateInterfaceOnInitialize failed";
		case 12: "ndisQueryOidList failed";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapWMIIrpMinorFunction(value)
{
	switch(value)
	{
		case 0x00: "IRP_MN_QUERY_ALL_DATA";
		case 0x01: "IRP_MN_QUERY_SINGLE_INSTANCE";
		case 0x02: "IRP_MN_CHANGE_SINGLE_INSTANCE";
		case 0x03: "IRP_MN_CHANGE_SINGLE_ITEM";
		case 0x04: "IRP_MN_ENABLE_EVENTS";
		case 0x05: "IRP_MN_DISABLE_EVENTS";
		case 0x06: "IRP_MN_ENABLE_COLLECTION";
		case 0x07: "IRP_MN_DISABLE_COLLECTION";
		case 0x08: "IRP_MN_REGINFO";
		case 0x09: "IRP_MN_EXECUTE_METHOD";
		case 0x0b: "IRP_MN_REGINFO_EX";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapPnPIrpMinorFunction(value)
{
	switch(value)
	{
		case 0x00: "IRP_MN_START_DEVICE";
		case 0x01: "IRP_MN_QUERY_REMOVE_DEVICE";
		case 0x02: "IRP_MN_REMOVE_DEVICE";
		case 0x03: "IRP_MN_CANCEL_REMOVE_DEVICE";
		case 0x04: "IRP_MN_STOP_DEVICE";
		case 0x05: "IRP_MN_QUERY_STOP_DEVICE";
		case 0x06: "IRP_MN_CANCEL_STOP_DEVICE";
		case 0x07: "IRP_MN_QUERY_DEVICE_RELATIONS";
		case 0x08: "IRP_MN_QUERY_INTERFACE";
		case 0x09: "IRP_MN_QUERY_CAPABILITIES";
		case 0x0A: "IRP_MN_QUERY_RESOURCES";
		case 0x0B: "IRP_MN_QUERY_RESOURCE_REQUIREMENTS";
		case 0x0C: "IRP_MN_QUERY_DEVICE_TEXT";
		case 0x0D: "IRP_MN_FILTER_RESOURCE_REQUIREMENTS";
		case 0x0F: "IRP_MN_READ_CONFIG";
		case 0x10: "IRP_MN_WRITE_CONFIG";
		case 0x11: "IRP_MN_EJECT";
		case 0x12: "IRP_MN_SET_LOCK";
		case 0x13: "IRP_MN_QUERY_ID";
		case 0x14: "IRP_MN_QUERY_PNP_DEVICE_STATE";
		case 0x15: "IRP_MN_QUERY_BUS_INFORMATION";
		case 0x16: "IRP_MN_DEVICE_USAGE_NOTIFICATION";
		case 0x17: "IRP_MN_SURPRISE_REMOVAL";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapMiniportAction(value)
{
	switch(value)
	{
		case 0: "Halting";
		case 1: "Reset Requested";
		case 2: "Reset Pending";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapProtocolInvalidReason(value)
{
	switch(value)
	{
		case 0: "SendNetBufferListsCompleteHandler is invalid";
		case 1: "ReceiveNetBufferListsHandler is invalid";
		case 2: "OidRequestCompleteHandler is invalid";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapPnPActivationFailureReason(value)
{
	switch(value)
	{
		case 0: "NULL Port List";
		case 1: "invalid port activation request for default port";
		case 2: "default port is already activated";
		case 3: "port is not found";
		case 4: "port is not in allocated state";
		case 5: "invalid deactivation request for default port";
		case 6: "default port is already deactivated";
		case 7: "port is not in activated state";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapRegistrationFailureReason(value)
{
	switch(value)
	{
		case 0: "Filter Driver version number is invalid";
		case 1: "Filter Driver is missing the required Handlers";
		case 2: "Filter Driver should either register both a Request and RequestComplete Handler or neither of them";
		case 3: "Filter Driver can only register Cancel Request handler when registering the Request Handler";
		case 4: "Filter Driver should either register both a DirectRequest and DirectRequestComplete Handler or neither of them";
		case 5: "Filter Driver can only register Cancel Direct Request handler when registering the Direct request Handler";
		case 6: "Filter Driver can only register Cancel Send handler when registering the Send Handler";
		case 7: "Filter Driver names are too long";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapOid(value)
{
	switch(value)
	{
		case 0x00010105: "OID_GEN_MAXIMUM_LOOKAHEAD";
		case 0x00010106: "OID_GEN_MAXIMUM_FRAME_SIZE";
		case 0x00010113: "OID_GEN_MAC_OPTIONS";
		case 0x00010115: "OID_GEN_MAXIMUM_SEND_PACKETS";
		case 0x01010101: "OID_802_3_PERMANENT_ADDRESS";
		case 0x01010102: "OID_802_3_CURRENT_ADDRESS";
		case 0x01010104: "OID_802_3_MAXIMUM_LIST_SIZE";
		case 0x02010101: "OID_802_5_PERMANENT_ADDRESS";
		case 0x02010102: "OID_802_5_CURRENT_ADDRESS";
		case 0x04010101: "OID_WAN_PERMANENT_ADDRESS";
		case 0x04010102: "OID_WAN_CURRENT_ADDRESS";
		case 0xFD010101: "OID_PNP_SET_POWER";
		case 0xFD010102: "OID_PNP_QUERY_POWER";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapNdisFilterState(value)
{
	switch(value)
	{
		case 0: "Detached";
		case 1: "Attaching";
		case 2: "Paused";
		case 3: "Restarting";
		case 4: "Running";
		case 5: "Pausing";
		case 6: "Detaching";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapNetIfOperStatus(value)
{
	switch(value)
	{
		case 1: "UP";
		case 2: "DOWN";
		case 3: "TESTING";
		case 4: "UNKNOWN";
		case 5: "DORMANT";
		case 6: "NOT_PRESENT";
		case 7: "LOWER_LAYER_DOWN";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table NDIS_mapNetChangeType(value)
{
	switch(value)
	{
		case 1: "PossibleNetworkChange";
		case 2: "DefinitelyNetworkChange";
		case 3 : "NetworkChangeFromMediaConnect";
		default:
			FormatString("Unknown value: %d", value);
	}
}
struct NDIS_mapNetIfOperStatusFlags = Local.BitMapSummary
{
	UINT32 BitfieldDOWN_NOT_AUTHENTICATED:1 = FormatString("  (%s) %s", this.ToBitString, this? "DOWN_NOT_AUTHENTICATED":"");
	UINT32 BitfieldDOWN_NOT_MEDIA_CONNECTED:1 = FormatString("(%s) %s", this.ToBitString, this? "DOWN_NOT_MEDIA_CONNECTED":"");
	UINT32 BitfieldDORMANT_PAUSED:1 = FormatString("          (%s) %s", this.ToBitString, this? "DORMANT_PAUSED":"");
	UINT32 BitfieldDORMANT_LOW_POWER:1 = FormatString("       (%s) %s", this.ToBitString, this? "DORMANT_LOW_POWER":"");
	UINT32 Reserved1:28 = FormatString("                       (%s)", this.ToBitString);
	[Local.BitMapSummary =
		(BitfieldDOWN_NOT_AUTHENTICATED? "DOWN_NOT_AUTHENTICATED" + " " : "") +
		(BitfieldDOWN_NOT_MEDIA_CONNECTED? "DOWN_NOT_MEDIA_CONNECTED" + " " : "") +
		(BitfieldDORMANT_PAUSED? "DORMANT_PAUSED" + " " : "") +
		(BitfieldDORMANT_LOW_POWER? "DORMANT_LOW_POWER" + " " : "") +
		""]
	struct{}
}
Struct NDIS_NetError = FormatString("Error: %s Location: %s Context: %s", ErrorCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_NetWarning = FormatString("Warning: %s Location: %s Context: %s", WarningCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode WarningCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_StateTransition = FormatString("Transitioned to State: %s Context: %s", NextState.ToString, Context.ToString)
{
	UINT8 NextState = NDIS_utOpcodeMap(this);
	UINT32 Context;
}
Struct NDIS_ContextUpdate = FormatString("Updated Context: %s Update Reason: %s", Context.ToString, UpdateReasonCode.ToString)
{
	UINT32 Context;
	UINT32 UpdateReasonCode;
}
Struct NDIS_V4Tuple = FormatString("SourceAddress: %s SourcePort: %s DestinationAddress: %s DestinationPort: %s Protocol: %s ReferenceContext: %s", SourceAddress.ToString, SourcePort.ToString, DestinationAddress.ToString, DestinationPort.ToString, Protocol.ToString, ReferenceContext.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address SourceAddress;
	UINT32 SourcePort;
	[DataFieldByteOrder = BigEndian]IPv4Address DestinationAddress;
	UINT32 DestinationPort;
	UINT32 Protocol;
	UINT32 ReferenceContext;
}
Struct NDIS_V6Tuple = FormatString("SourceAddress: %s SourcePort: %s DestinationAddress: %s DestinationPort: %s Protocol: %s ReferenceContext: %s", SourceAddress.ToString, SourcePort.ToString, DestinationAddress.ToString, DestinationPort.ToString, Protocol.ToString, ReferenceContext.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv6Address SourceAddress;
	UINT32 SourcePort;
	[DataFieldByteOrder = BigEndian]IPv6Address DestinationAddress;
	UINT32 DestinationPort;
	UINT32 Protocol;
	UINT32 ReferenceContext;
}
Struct NDIS_InterfaceInfo = FormatString("Interface Guid: %s IfIndex: %s Interface Luid: %s ReferenceContext: %s", IfGuid.ToString, IfIndex.ToString, IfLuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_AbortFilterRequest = FormatString("Aborting Request %s on Filter %s", Request.ToString, LowerIf.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	EtlPtr Request;
	GUID(true) LowerIf;
}
Struct NDIS_AbortMiniportRequest = FormatString("Aborting Request %s on Miniport %s", Request.ToString, LowerIf.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	EtlPtr Request;
	GUID(true) LowerIf;
}
Struct NDIS_AddDevice = FormatString("Add Device Miniport %s", DeviceName.ToString)
{
	UnicodeString DeviceName;
}
Struct NDIS_AddDeviceFailed = FormatString("Add Device Failed %s", ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_AddPnPDevice = FormatString("Add PnP Device: %s", DeviceName.ToString)
{
	UnicodeString DeviceName;
}
Struct NDIS_AllocateAdapterChannelFailed = FormatString("Allocate Adapter Channel Failed %s", ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_ProtocolBindStatus = FormatString("Initialize Binding - Protocol: %s, Adapter: %s, Result: %s", NetLuid.ToString, IfGuid.ToString, ProtocolName.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UnicodeString ProtocolName;
	UINT32 Status;
}
Struct NDIS_CallMiniportReset = FormatString("Miniport %s, Calling miniport reset", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_CancelFilterOidRequest = FormatString("Filter %s, Aborting Request %s", IfGuid.ToString, Request.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	EtlPtr Request;
	UINT32 Status;
	UINT32 Location;
}
Struct NDIS_CancelledWakeIrp = FormatString("Miniport %s, Successfully canceled wake irp", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_CancelMiniportOidRequest = FormatString("Filter %s, Aborting Request %s", IfGuid.ToString, Request.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	EtlPtr Request;
	UINT32 Status;
	UINT32 Location;
}
Struct NDIS_ChangeInformationFailed = FormatString("Miniport %s, Failed to set the new information on the miniport", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_ChangeNotificationCompartment = FormatString("Compartment change notification, compartment %s", CompartmentId.ToString)
{
	UINT32 CompartmentId;
}
Struct NDIS_ChangeNotificationInterfaceInfo = FormatString("Interface change notification, interface IfType %s, NetLuid index %s", IfType.ToString, NetLuid.ToString)
{
	UINT32 IfType;
	UINT64 NetLuid;
	UINT32 StructType;
	UINT32 ParameterLen;
	UINT32 ParameterOffset;
}
Struct NDIS_ChangeNotificationInterfaceEnum = FormatString("Interface change notification, interface IfType %s, NetLuid index %s", IfType.ToString, NetLuid.ToString)
{
	UINT32 IfType;
	UINT64 NetLuid;
}
Struct NDIS_ChangeNotificationNetwork = FormatString("Network change notification, network %s", NetworkId.ToString)
{
	GUID(true) NetworkId;
}
Struct NDIS_ClearingOidRequest = FormatString("Request Clearing Processing Request Miniport %s", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_CloseAdapter = FormatString("Protocol %s is closing Miniport %s", ProtocolName.ToString, IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UnicodeString ProtocolName;
}
Struct NDIS_CompletingOidRequestFilter = FormatString("Completing Request %s to Filter %s", Request.ToString, IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	EtlPtr Request;
	UINT32 Status;
	UINT32 Location;
}
Struct NDIS_CreatedWakeIrp = FormatString("Miniport %s, WaitWakeIrp %s", IfGuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_DefaultPortActivated = FormatString("Miniport %s, activating default port", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_DefaultPortDeactivated = FormatString("Miniport %s, deactivating default port", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_DeregisterInterfaceFailed = FormatString("Failed to deregister interface IfBlock %s", Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_DevicePowerStateChange = FormatString("DevicePowerStateChange Miniport %s, Going to device state %s", IfGuid.ToString, State.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Type;
	UINT32 State;
}
Struct NDIS_DispatchPnPIrp = FormatString("Dispatch PnP Irp Miniport %s, MinorFunction: %s", IfGuid.ToString, IrpMinorFunction.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 IrpMinorFunction = NDIS_mapPnPIrpMinorFunction(this);
}
Struct NDIS_DispatchWMIIrp = FormatString("Dispatch WMI Irp Miniport %s, MinorFunction %s", IfGuid.ToString, IrpMinorFunction.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 IrpMinorFunction = NDIS_mapWMIIrpMinorFunction(this);
}
Struct NDIS_ExecuteMethodFailed = FormatString("Miniport %s, Failed to execute WMI method (%s) on the miniport", IfGuid.ToString, Context.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_FilterArrivalIndicationFailed = FormatString("Failed to indicate filter arrival")
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_FilterChangedMediaType = FormatString("Miniport %s, Filter %s changed media type from %s to %s", MiniportIfGuid.ToString, FilterIfGuid.ToString, OriginalMediaType.ToString, NewMediaType.ToString)
{
	GUID(true) MiniportIfGuid;
	UINT32 MiniportIfIndex;
	UINT64 MiniportNetLuid;
	GUID(true) FilterIfGuid;
	UINT32 FilterIfIndex;
	UINT64 FilterNetLuid;
	UINT32 OriginalMediaType;
	UINT32 NewMediaType;
}
Struct NDIS_FilterRegistrationFailed = FormatString("Filter Registration Failed %s - %s", FilterName.ToString, Reason.ToString)
{
	UnicodeString FilterName;
	UINT32 Reason = NDIS_mapRegistrationFailureReason(this);
}
Struct NDIS_FilterRemovalIndicationFailed = FormatString("Failed to indicate filter removal")
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_IndicateAdapterRemovalFailed = FormatString("Failed to indicate adapter removal")
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_InitializeAdapterInfo = FormatString("Miniport %s, InitializeAdapter status - %s (%s)", IfGuid.ToString, Reason.ToString, State.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Reason = NDIS_mapInitializeReason(this);
	UINT32 State;
}
Struct NDIS_InitializeAdapterFailed = FormatString("Miniport %s, InitializeAdapter error - %s (%s)", IfGuid.ToString, Reason.ToString, State.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Reason = NDIS_mapInitializeReason(this);
	UINT32 State;
}
Struct NDIS_InitializeConfigurationFailed = FormatString("Could not read Bind/Export for %s: %s", DeviceName.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
	UnicodeString DeviceName;
}
Struct NDIS_InvalidSystemPowerState = FormatString("Miniport %s, Not a system state! Type: %s. State: %s.", IfGuid.ToString, Type.ToString, State.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Type;
	UINT32 State;
}
Struct NDIS_IoSetDeviceInterfaceStateFailed = FormatString("IoSetDeviceInterfaceState failed: Miniport %s, Status %s", IfGuid.ToString, Error.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_IoWMIWriteEventFailed = FormatString("IoWMIWriteEvent failed %s", ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_IrpSetPowerFailed = FormatString("DeviceObject %s, IRP_MN_SET_POWER failed!", Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_KeptFilterFakeHandlers = FormatString("Keeping the fake handlers on Filter %s, State flags %s", IfGuid.ToString, StateFlags.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 StateFlags;
}
Struct NDIS_KeptMiniportFakeHandlers = FormatString("Keeping the fake handlers on Miniport %s, State flags %s", IfGuid.ToString, StateFlags.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 StateFlags;
}
Struct NDIS_MapOpenByNameFailed = FormatString("Open %s is already getting unbind", Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_NotifyMiniportAction = FormatString("Miniport %s is %s", IfGuid.ToString, Action.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Action = NDIS_mapMiniportAction(this);
}
Struct NDIS_MiniportInitializeHandlerFailed = FormatString("Miniport %s - MiniportInitialize handler failed, Status %s", IfGuid.ToString, Error.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_MiniportMacAddress = FormatString("Miniport %s, Ethernet Address %s", IfGuid.ToString, MacAddress.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	BLOB(6) MacAddress;
}
Struct NDIS_MiniportPowerDeviceState = FormatString("Miniport %s, DeviceState[%s]", IfGuid.ToString, State.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Type;
	UINT32 State;
}
Struct NDIS_MiniportPoweringUp = FormatString("Miniport %s, Powering up the Miniport", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_MiniportPowerStates = FormatString("Miniport %s, SystemPowerState[%s] DevicePowerState[%s]", IfGuid.ToString, SystemState.ToString, DeviceState.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 SystemState;
	UINT32 DeviceState;
}
Struct NDIS_MiniportPowerSystemState = FormatString("Miniport %s, SystemState[%s]", IfGuid.ToString, State.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Type;
	UINT32 State;
}
Struct NDIS_MiniportRestartFailed = FormatString("Failed to restart miniport %s. Status %s", IfGuid.ToString, Error.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_OidQueryFailed = FormatString("Error querying %s : %s", Oid.ToString, Status.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Oid = NDIS_mapOid(this);
	UINT32 Status;
	UINT32 Location;
}
Struct NDIS_OpenFailedMiniportNotStarted = FormatString("Failing open because the miniport is not started, Miniport %s, Open %s", IfGuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_PnPPortActivationFailed = FormatString("Port Activation Failed Miniport %s %s", IfGuid.ToString, Reason.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Reason = NDIS_mapPnPActivationFailureReason(this);
	UINT32 Port;
}
Struct NDIS_PowerDisableWakeup = FormatString("Miniport %s, Disabling wake-up on the miniport", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_PowerDownFailed = FormatString("Miniport %s, Failed to power the device down", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_PowerDownFailedCannotReinitialize = FormatString("Miniport %s, failed to power down but we are not able to reinitialize it.", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_PowerHaltMiniport = FormatString("Miniport %s, Halt the miniport", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_PowerHibernateOrShutdown = FormatString("Miniport %s, System is either entering hibernate or shutting down.", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_PowerIrpComplete = FormatString("DeviceObject %s, Going to system power state %s", Context.ToString, State.ToString)
{
	UINT32 Context;
	UINT32 State;
}
Struct NDIS_PowerOnMiniportNotStarted = FormatString("Miniport %s is not started yet.", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_PowerOnMiniportRemoved = FormatString("Miniport %s is being removed", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_PowerPolicyPatternNotEnabled = FormatString("Miniport %s, MagicPacket and pattern match are not enabled.", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_PowerPolicySetD3 = FormatString("Miniport %s, Place legacy or PM disabled device in D3", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_PowerPolicyStates = FormatString("Miniport %s, SystemState %s, DeviceState %s", IfGuid.ToString, SystemState.ToString, DeviceState.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 SystemState;
	UINT32 DeviceState;
}
Struct NDIS_PowerShutdownMiniport = FormatString("Miniport %s, shutting down", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_PowerWakeNotEnabled = FormatString("Miniport %s, Device power wake is not enabled (%s)", IfGuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_PowerWakeUpDevice = FormatString("Miniport %s, Waking up the device", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_ProtocolBind = FormatString("BIND (%s) %s to %s", Layer.ToString, ProtocolName.ToString, DeviceName.ToString)
{
	UINT32 Layer;
	UnicodeString ProtocolName;
	UnicodeString DeviceName;
}
Struct NDIS_ProtocolUnbind = FormatString("UNBIND(%s) %s to %s", Layer.ToString, ProtocolName.ToString, DeviceName.ToString)
{
	UINT32 Layer;
	UnicodeString ProtocolName;
	UnicodeString DeviceName;
}
Struct NDIS_QueryPnPDeviceStateFailed = FormatString("Miniport %s, IRP_MN_QUERY_PNP_DEVICE_STATE device failed", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_QueryPowerComplete = FormatString("Miniport %s, Bus Driver returned %s for QueryPower.", IfGuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_QueryPowerCompleteSystemState = FormatString("Miniport %s, Bus Driver returned %s for QueryPower.", IfGuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_QuerySetMiniportDeviceStateFailed = FormatString("Miniport %s, failed power Oid %s, Set = %s with error %s", IfGuid.ToString, Oid.ToString, Set.ToString, Error.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Oid;
	BOOL Set;
}
Struct NDIS_ReferenceProtocolFailed = FormatString("ndisReferenceProtocolByName failed %s", ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_RegisterInterruptFailed = FormatString("Miniport %s failed to register for interrupts", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_RegisterMiniportDriverFailed = FormatString("DriverObject %s, Miniport Driver should register both a DirectRequest and CancelDirectRequest handler or neither one", Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_SendPacketCompleteToOpen = FormatString("SendPacketCompleteToOpen Open %s, Packet %s", OpenRef.ToString, Packet.ToString)
{
	EtlPtr OpenRef;
	EtlPtr Packet;
}
Struct NDIS_SetEnableWakeUpCompleted = FormatString("ndisSetEnableWakeUp Completed")
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	BOOL CompletedAtOpen;
	EtlPtr Open;
	EtlPtr Request;
}
Struct NDIS_SetMiniportEthMulticastListFailed = FormatString("SetMiniportEthMulticastList Failed Miniport %s, Request %s", IfGuid.ToString, Context.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_SetMiniportRSSCapsFailed = FormatString("SetMiniportRSSCaps Failed Miniport %s, Request %s, Status %s", IfGuid.ToString, Context.ToString, Error.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_SetOpenEthAddDeleteMulticastFailed = FormatString("SetOpenEthAddDeleteMulticast Failed, Miniport = %s, Open = %s, Status = %s", IfGuid.ToString, Context.ToString, Error.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_SetOpenEthMulticastListFailed = FormatString("SetOpenEthMulticastList failed - Miniport %s, Open %s", IfGuid.ToString, Context.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_SetOpenFunctionalInvalidMediaType = FormatString("SetOpenFunctional - Invalid media type")
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	EtlPtr Open;
	UINT32 OriginalMediaType;
	UINT32 ExpectedMediaType;
}
Struct NDIS_SetOpenGroupAddressInvalidMediaType = FormatString("SetOpenGroupAddress - Invalid media type")
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	EtlPtr Open;
	UINT32 OriginalMediaType;
	UINT32 ExpectedMediaType;
}
Struct NDIS_SetOpenRSSCapsFailed = FormatString("SetOpenRSSCaps: Miniport %s, Open %s, Status %s", IfGuid.ToString, Context.ToString, Error.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_SystemPowerOnComplete = FormatString("Miniport %s, Going to system power state %s", IfGuid.ToString, State.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Type;
	UINT32 State;
}
Struct NDIS_TransportFailedPnPEvent = FormatString("Transport %s failed the PnP event: %s for Miniport %s with Status %s", Transport.ToString, PnPEvent.ToString, IfGuid.ToString, Status.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UnicodeString Transport;
	UINT32 PnPEvent;
	UINT32 Status;
}
Struct NDIS_UnsupportedMiniportMediaType = FormatString("Miniport %s, This version of NDIS does not support Arcnet, FDDI or IP1394", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_Validate60ProtocolFailed = FormatString("%s, %s", ProtocolName.ToString, Reason.ToString)
{
	UnicodeString ProtocolName;
	UINT32 Reason = NDIS_mapProtocolInvalidReason(this);
}
Struct NDIS_WaitWakeComplete = FormatString("Miniport %s, Wake irp was complete due to wake event", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_WaitWakeIrpFailed = FormatString("WaitWakeIrpFailed Miniport %s, WAIT_WAKE irp failed or cancelled. Status %s", IfGuid.ToString, Error.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_WakeByMiniport = FormatString("Miniport %s woke up the system.", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_NdisErrorLogEntry = FormatString("Error Log Entry : Miniport %s (%s) Error %s", IfGuid.ToString, NetLuid.ToString, AdapterName.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UnicodeString AdapterName;
	UINT32 Error;
	UINT32 ErrorValueCount;
	UINT32 ErrorValues[ErrorValueCount];
}
Struct NDIS_AbortingRequest = FormatString("Aborting Request %s", Request.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	EtlPtr Request;
}
Struct NDIS_PnPPortDeactivationFailed = FormatString("Port Deactivation Failed Miniport %s %s", IfGuid.ToString, Reason.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Reason = NDIS_mapPnPActivationFailureReason(this);
	UINT32 Port;
}
Struct NDIS_QueryPowerCompleteSystemStatePoRequest = FormatString("Miniport %s, PoRequestPowerIrp for device state returned %s", IfGuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_QueryPowerFailed = FormatString("Miniport %s, failed query power", IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_DevicePowerOnFailed = FormatString("DevicePowerOn failed Miniport %s, status %s", IfGuid.ToString, Error.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Error;
	UINT32 Location;
	UINT32 Context;
}
Struct NDIS_PowerPolicyError = FormatString("Power policy - Unable to enter requested state")
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
Struct NDIS_DoOidRequest = FormatString("Miniport %s: Request %s, bComplete %s, Status %s", IfGuid.ToString, Request.ToString, CompleteRequest.ToString, Status.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	EtlPtr Request;
	BOOL CompleteRequest;
	UINT32 Status;
}
Struct NDIS_CompletingOidRequestMiniport = FormatString("Completing Request %s to Miniport %s", Request.ToString, IfGuid.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	EtlPtr Request;
	UINT32 Status;
	UINT32 Location;
}
Struct NDIS_FilterStateChange = FormatString("Filter %s entering state %s", IfGuid.ToString, State.ToString)
{
	GUID(true) IfGuid;
	UINT8 State = NDIS_mapNdisFilterState(this);
	UINT32 Location;
}
Struct NDIS_MiniportStatusIndicationConnect = FormatString("Miniport %s, NDIS_STATUS_MEDIA_CONNECT, Flags: %s, PnpFlags %s, DevicePowerState %s", IfGuid.ToString, Flags.ToString, PnPFlags.ToString, DevicePowerState.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Flags;
	UINT32 PnPFlags;
	UINT32 DevicePowerState;
}
Struct NDIS_MiniportStatusIndicationDisconnect = FormatString("Miniport %s, NDIS_STATUS_MEDIA_DISCONNECT, Flags: %s, PnpFlags %s, DevicePowerState %s", IfGuid.ToString, Flags.ToString, PnPFlags.ToString, DevicePowerState.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 Flags;
	UINT32 PnPFlags;
	UINT32 DevicePowerState;
}
Struct NDIS_MiniportStatusIndicationOperStatusUp = FormatString("Miniport %s, NDIS_STATUS_OPER_STATUS, OperationalStatus: %s, OperationalStatusFlags: %s", IfGuid.ToString, OperationalStatus.ToString, OperationalStatusFlags.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 OperationalStatus = NDIS_mapNetIfOperStatus(this);
	NDIS_mapNetIfOperStatusFlags OperationalStatusFlags;
}
Struct NDIS_MiniportStatusIndicationOperStatusNotUp = FormatString("Miniport %s, NDIS_STATUS_OPER_STATUS, OperationalStatus: %s, OperationalStatusFlags: %s", IfGuid.ToString, OperationalStatus.ToString, OperationalStatusFlags.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 OperationalStatus = NDIS_mapNetIfOperStatus(this);
	NDIS_mapNetIfOperStatusFlags OperationalStatusFlags;
}
Struct NDIS_MiniportStatusIndicationNetworkChange = FormatString("Miniport %s, NDIS_STATUS_NETWORK_CHANGE, Change Type: %s", IfGuid.ToString, ChangeType.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 NetLuid;
	UINT32 ChangeType = NDIS_mapNetChangeType(this);
}
Struct NDIS_DpcStart = FormatString("DPC/OtherDispatchRoutine Start")
{
	UINT32 NetLuidIndex;
	UINT32 FunctionType;
}
Struct NDIS_DpcEnd = FormatString("DPC/OtherDispatchRoutine End")
{
	UINT32 NetLuidIndex;
	UINT32 FunctionType;
	UINT64 Duration;
}
Struct NDIS_QueuedReceiveStart = FormatString("Queued Receive Indication Start")
{
	UINT32 NetLuidIndex;
}
Struct NDIS_QueuedReceiveEnd = FormatString("Queued Receive Indication End")
{
	UINT32 NetLuidIndex;
	UINT64 Duration;
	UINT32 NumberOfNbls;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsNDIS_Keyword, "{CDEAD503-17F5-4a3e-B7AE-DF8CC2902EB9}")]
struct NDIS_MicrosoftWindowsNDIS_Keyword
{
	UINT64 Request:1 = FormatString("          (%s) %s", this.ToBitString, this? "KW_REQUEST":"");
	UINT64 PnP:1 = FormatString("              (%s) %s", this.ToBitString, this? "KW_PNP":"");
	UINT64 Init:1 = FormatString("             (%s) %s", this.ToBitString, this? "KW_INIT":"");
	UINT64 Bind:1 = FormatString("             (%s) %s", this.ToBitString, this? "KW_BIND":"");
	UINT64 Power:1 = FormatString("            (%s) %s", this.ToBitString, this? "KW_POWER":"");
	UINT64 WMI:1 = FormatString("              (%s) %s", this.ToBitString, this? "KW_WMI":"");
	UINT64 Interface:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_INTERFACE":"");
	UINT64 Port:1 = FormatString("             (%s) %s", this.ToBitString, this? "KW_PORT":"");
	UINT64 WorkItem:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_WORKITEM":"");
	UINT64 Indication:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_INDICATION":"");
	UINT64 SendM:1 = FormatString("            (%s) %s", this.ToBitString, this? "KW_SENDM":"");
	UINT64 Protocol:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PROTOCOL":"");
	UINT64 Log:1 = FormatString("              (%s) %s", this.ToBitString, this? "KW_LOG":"");
	UINT64 ReceiveThrottling:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_RST":"");
	UINT64 Reserved1:18 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 Reserved2:18 = FormatString("        (%s)", this.ToBitString);
}
