//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-IPv4IPv6CoexistenceMigration
//#
//#  Details:                
//#
//#  Public References:      IPv4IPv6CoexistenceMigration.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 1/28/2010
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsIphlpsvcTrace, "{6600e712-c3b6-44a2-8a48-935c511f28c8}")]
Protocol Ipv4Ipv6Co_MicrosoftWindowsIphlpsvcTrace = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 4051: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_RELAY_PACKET EVENT_IPHLPSVC_ETW_TEREDO_RELAY_PACKET;
		case 4052: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_SERVER_PACKET EVENT_IPHLPSVC_ETW_TEREDO_SERVER_PACKET;
		case 4053: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_4TO6_BOUNCE_PACKET EVENT_IPHLPSVC_ETW_TEREDO_4TO6_BOUNCE_PACKET;
		case 4054: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_BAD_OR_INVALID_PACKET EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_BAD_OR_INVALID_PACKET;
		case 4055: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_STATE_CHANGE EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_STATE_CHANGE;
		case 4056: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_SEND_PACKET EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_SEND_PACKET;
		case 4057: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_START_OFFLOAD EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_START_OFFLOAD;
		case 4058: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_IO EVENT_IPHLPSVC_ETW_TEREDO_IO;
		case 4059: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_BAD_OR_INVALID_PACKET EVENT_IPHLPSVC_ETW_TEREDO_BAD_OR_INVALID_PACKET;
		case 4060: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_MAPPING EVENT_IPHLPSVC_ETW_TEREDO_MAPPING;
		case 4061: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_SEND_PACKET EVENT_IPHLPSVC_ETW_TEREDO_SEND_PACKET;
		case 4062: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_RECV_V6_PACKET EVENT_IPHLPSVC_ETW_TEREDO_RECV_V6_PACKET;
		case 4063: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_BOUNCE_PACKET EVENT_IPHLPSVC_ETW_TEREDO_BOUNCE_PACKET;
		case 4064: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_BOUNCE_V4_PACKET EVENT_IPHLPSVC_ETW_TEREDO_BOUNCE_V4_PACKET;
		case 4065: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_RECV_V4_PACKET EVENT_IPHLPSVC_ETW_TEREDO_RECV_V4_PACKET;
		case 4066: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_RECV_V6_PACKETEX EVENT_IPHLPSVC_ETW_TEREDO_RECV_V6_PACKETEX;
		case 4067: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_SENDV6_PACKET EVENT_IPHLPSVC_ETW_TEREDO_SENDV6_PACKET;
		case 4150: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_INTERFACE_STATE EVENT_IPHLPSVC_ETW_INTERFACE_STATE;
		case 4151: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ISATAP_LINKLOCALADDRESS_CHANGE EVENT_IPHLPSVC_ETW_ISATAP_LINKLOCALADDRESS_CHANGE;
		case 4152: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ISATAP_PRL_CHANGED EVENT_IPHLPSVC_ETW_ISATAP_PRL_CHANGED;
		case 4153: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ROUTE_FOUND EVENT_IPHLPSVC_ETW_ROUTE_FOUND;
		case 4154: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ROUTER_REACHABLE EVENT_IPHLPSVC_ETW_ROUTER_REACHABLE;
		case 4155: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ISATAP_ROUTER_RESOLVED EVENT_IPHLPSVC_ETW_ISATAP_ROUTER_RESOLVED;
		case 4157: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_PROTOCOL_START EVENT_IPHLPSVC_ETW_PROTOCOL_START;
		case 4158: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_PROTOCOL_STOP EVENT_IPHLPSVC_ETW_PROTOCOL_STOP;
		case 4159: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_PROTOCOL_INITIALIZED EVENT_IPHLPSVC_ETW_PROTOCOL_INITIALIZED;
		case 4160: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_PROTOCOL_UNINITIALIZED EVENT_IPHLPSVC_ETW_PROTOCOL_UNINITIALIZED;
		case 4161: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ISATAP_INTERFACE_REUSE EVENT_IPHLPSVC_ETW_ISATAP_INTERFACE_REUSE;
		case 4162: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_CONFIGURE_ADDRESS EVENT_IPHLPSVC_ETW_CONFIGURE_ADDRESS;
		case 4163: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_UPDATE_ROUTE_TABLE EVENT_IPHLPSVC_ETW_6TO4_UPDATE_ROUTE_TABLE;
		case 4164: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_INTERFACE_UPDATE EVENT_IPHLPSVC_ETW_6TO4_INTERFACE_UPDATE;
		case 4165: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_ROUTING_STATE_CHANGE EVENT_IPHLPSVC_ETW_6TO4_ROUTING_STATE_CHANGE;
		case 4166: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_LINKLAYER_ADDRESS EVENT_IPHLPSVC_ETW_6TO4_LINKLAYER_ADDRESS;
		case 4167: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_COMPARTMENT_CHANGE_NOTIFICATION EVENT_IPHLPSVC_ETW_COMPARTMENT_CHANGE_NOTIFICATION;
		case 4168: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_UPDATE_INTERFACE_ROUTING_STATE EVENT_IPHLPSVC_ETW_6TO4_UPDATE_INTERFACE_ROUTING_STATE;
		case 4169: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_CONFIGURE_ADDRESS_UPDATE EVENT_IPHLPSVC_ETW_CONFIGURE_ADDRESS_UPDATE;
		case 4170: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_PROTOCOL_CALLBACK_LOG EVENT_IPHLPSVC_ETW_PROTOCOL_CALLBACK_LOG;
		case 4171: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_START_FAILED EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_START_FAILED;
		case 4172: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_STOP EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_STOP;
		case 4173: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_START_FAILED EVENT_IPHLPSVC_ETW_6TO4_START_FAILED;
		case 4174: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ISATAP_ROUTER_SET EVENT_IPHLPSVC_ETW_ISATAP_ROUTER_SET;
		case 4175: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_NLM_DOMAIN_DETECTION EVENT_IPHLPSVC_ETW_NLM_DOMAIN_DETECTION;
		case 5000: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_ENUMERATE_INTERFACES EVENT_IPHLPSVC_ETW_IPHTTPS_ENUMERATE_INTERFACES;
		case 5001: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_INSTALLATION_FAILED EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_INSTALLATION_FAILED;
		case 5002: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_LINKADDRUPDATE EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_LINKADDRUPDATE;
		case 5003: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_CERTIFICATE_ADDED EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_CERTIFICATE_ADDED;
		case 5004: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DESTROY_COMPLETE EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DESTROY_COMPLETE;
		case 5005: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_FIREWALL_EXCEPTION EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_FIREWALL_EXCEPTION;
		case 5006: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_GLOBAL_PERFCOUNTER EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_GLOBAL_PERFCOUNTER;
		case 5007: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_MEMORY_FAILURE EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_MEMORY_FAILURE;
		case 5008: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_TUNNEL_IO_FAILED EVENT_IPHLPSVC_ETW_IPHTTPS_TUNNEL_IO_FAILED;
		case 5009: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_REUSING_INTERFACE EVENT_IPHLPSVC_ETW_IPHTTPS_REUSING_INTERFACE;
		case 5010: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DELETED EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DELETED;
		case 5011: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_MEDIA_CONNECT EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_MEDIA_CONNECT;
		case 5012: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_MEDIA_DISCONNECT EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_MEDIA_DISCONNECT;
		case 5013: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DEACTIVATED EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DEACTIVATED;
		case 5014: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_UNINSTALLED EVENT_IPHLPSVC_ETW_IPHTTPS_UNINSTALLED;
		case 5015: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_V6_ADDRESS_CHANGE_CALLBACK EVENT_IPHLPSVC_ETW_IPHTTPS_V6_ADDRESS_CHANGE_CALLBACK;
		case 5016: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_UPDATE_GLOBAL_CONNECTIVITY_STATE EVENT_IPHLPSVC_ETW_IPHTTPS_UPDATE_GLOBAL_CONNECTIVITY_STATE;
		case 5017: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_CHANGE_CALLBACK EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_CHANGE_CALLBACK;
		case 5018: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_ACTIVATED EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_ACTIVATED;
		case 5019: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CORP_CONNECTIVITY_TIMER_STARTED EVENT_IPHLPSVC_ETW_IPHTTPS_CORP_CONNECTIVITY_TIMER_STARTED;
		case 5020: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CORP_CONNECTIVITY_TIMEOUT EVENT_IPHLPSVC_ETW_IPHTTPS_CORP_CONNECTIVITY_TIMEOUT;
		case 5021: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_NETWORK_CHANGE EVENT_IPHLPSVC_ETW_IPHTTPS_NETWORK_CHANGE;
		case 5022: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_TEREDO_DORMANCY_CHANGE EVENT_IPHLPSVC_ETW_IPHTTPS_TEREDO_DORMANCY_CHANGE;
		case 5023: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INIT_FAILED EVENT_IPHLPSVC_ETW_IPHTTPS_INIT_FAILED;
		case 5024: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_ND_PACKET EVENT_IPHLPSVC_ETW_IPHTTPS_ND_PACKET;
		case 5025: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SHUTDOWN EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SHUTDOWN;
		case 5026: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_IO_REFERENCE EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_IO_REFERENCE;
		case 5027: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_IO_DEREFERENCE EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_IO_DEREFERENCE;
		case 5028: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SEND_HTTP_REQUEST EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SEND_HTTP_REQUEST;
		case 5029: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RECEIVE_HTTP_RESPONSE EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RECEIVE_HTTP_RESPONSE;
		case 5030: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_HTTP_STATUS_CODE EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_HTTP_STATUS_CODE;
		case 5031: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RECEIVE_ENTITY EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RECEIVE_ENTITY;
		case 5032: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SEND_ENTITY EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SEND_ENTITY;
		case 5033: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SCHEDULING_RECONNECT EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SCHEDULING_RECONNECT;
		case 5034: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RESTARTING_CLIENT EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RESTARTING_CLIENT;
		case 5035: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RESTARTING_CLIENT_ON_INTERNET EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RESTARTING_CLIENT_ON_INTERNET;
		case 5036: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_ADD_CLIENT_ADDRESS_MAPPING EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_ADD_CLIENT_ADDRESS_MAPPING;
		case 5037: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_REMOVE_CLIENT_ADDRESS_MAPPING EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_REMOVE_CLIENT_ADDRESS_MAPPING;
		case 5038: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_ADD_PENDING_PACKET EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_ADD_PENDING_PACKET;
		case 5039: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_REMOVE_PENDING_PACKET EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_REMOVE_PENDING_PACKET;
		case 5040: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_RECEIVE_CLIENT_CERT EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_RECEIVE_CLIENT_CERT;
		case 5041: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_SEND_RESPONSE EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_SEND_RESPONSE;
		case 5042: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_RECEIVE_REQUEST EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_RECEIVE_REQUEST;
		case 5043: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_RECEIVE_ENTITY EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_RECEIVE_ENTITY;
		case 5044: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_SEND_ENTITY EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_SEND_ENTITY;
		case 5045: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_NEIGHBOR_DISCOVERY_PACKET_DROP EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_NEIGHBOR_DISCOVERY_PACKET_DROP;
		case 5046: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_NEIGHBOR_DISCOVERY EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_NEIGHBOR_DISCOVERY;
		case 5047: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_REFERENCE EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_REFERENCE;
		case 5048: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DEREFERENCE EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DEREFERENCE;
		case 5049: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_INTERFACE_REFERENCE EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_INTERFACE_REFERENCE;
		case 5050: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_INTERFACE_DEREFERENCE EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_INTERFACE_DEREFERENCE;
		case 5051: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_INTERFACE_REFERENCE EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_INTERFACE_REFERENCE;
		case 5052: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_INTERFACE_DEREFERENCE EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_INTERFACE_DEREFERENCE;
		case 5053: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_CLIENT_CONTEXT_REFERENCE EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_CLIENT_CONTEXT_REFERENCE;
		case 5054: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_CLIENT_CONTEXT_DEREFERENCE EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_CLIENT_CONTEXT_DEREFERENCE;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(value)
{
	switch(value)
	{
		case 0: "Router Solicitation";
		case 1: "Router Advertisement";
		case 2: "Neighbor Solicitation";
		case 3: "Neighbor Advertisement";
		case 4: "Direct Bubble";
		case 5: "Indirect Bubble";
		case 6: "Multicast Bubble";
		case 7: "Bubble";
		case 8: "Data";
		case 9: "Echo Request";
		case 10: "Port Prediction Direct Bubble";
		case 11: "Port Prediction Echo Packet";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_BadParameter_ValueMap(value)
{
	switch(value)
	{
		case 0: "Bad Checksum";
		case 1: "Invalid Source Address";
		case 2: "Invalid Destination Address";
		case 3: "Invalid Peer";
		case 4: "Bad Protocol Header";
		case 5: "Bad Authentation";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_TeredoState_ValueMap(value)
{
	switch(value)
	{
		case 0: "Offline";
		case 1: "Stop Pending";
		case 2: "Start Pending";
		case 3: "Probe Restricted Primary";
		case 4: "Probe Restricted Secondary";
		case 5: "Qualified";
		case 6: "Firewall";
		case 7: "Online";
		case 8: "Dormant";
		case 9: "Bad State";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ServiceType_ValueMap(value)
{
	switch(value)
	{
		case 0: "Client";
		case 1: "Server";
		case 2: "Peer";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_TeredoPortMapping_ValueMap(value)
{
	switch(value)
	{
		case 0: "Local";
		case 1: "Global";
		case 2: "External";
		case 3: "Random";
		case 4: "Source";
		case 5: "Advertised";
		case 6: "Current";
		case 7: "New";
		case 8: "Parsed";
		case 9: "Mapping";
		case 10: "Bad Mapping";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_InterfaceState_ValueMap(value)
{
	switch(value)
	{
		case 0: "Installed";
		case 1: "UnInstalled";
		case 2: "Reusable";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_AddressUpdate_ValueMap(value)
{
	switch(value)
	{
		case 0: "Added";
		case 1: "Deleted";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(value)
{
	switch(value)
	{
		case 0: "6to4";
		case 1: "Isatap";
		case 2: "Teredo";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_RouteReach_ValueMap(value)
{
	switch(value)
	{
		case 0: "Reachable";
		case 1: "Unreachable";
		case 2: "resolved";
		case 3: "not resolved";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_RoutingState_ValueMap(value)
{
	switch(value)
	{
		case 0: "Default";
		case 1: "Automatic";
		case 2: "Enabled";
		case 3: "Disabled";
		case 4: "Invalid";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolCallback_ValueMap(value)
{
	switch(value)
	{
		case 0: "Address Arrival";
		case 1: "Address Deletion";
		case 2: "Address Change";
		case 3: "Interface Arrival";
		case 4: "Interface Deletion";
		case 5: "Interface Change";
		case 6: "Compartment Arrival";
		case 7: "Compartment Deletion";
		case 8: "Configuration Change";
		case 9: "Route Change";
		case 10: "IPv4 Address Change";
		case 11: "IPv6 Address Change";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_NetworkType_ValueMap(value)
{
	switch(value)
	{
		case 0: "managed";
		case 1: "not managed";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_AuthenticationType_ValueMap(value)
{
	switch(value)
	{
		case 0: "none";
		case 1: "certificates";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_RELAY_PACKET = FormatString("Teredo %s: Forwarding %s packet from %s to %s.", ServiceType.ToString, TeredoPacketType.ToString, IsValueNone(SourceIPAddress) ? "Null" : SourceIPAddress.ToString, IsValueNone(DestinationIPAddress) ? "Null" : DestinationIPAddress.ToString)
{
	UINT32 IpAddrLength;
	UINT32 ServiceType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ServiceType_ValueMap(this);
	UINT32 TeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address SourceIPAddress;
	}
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address DestinationIPAddress;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_SERVER_PACKET = FormatString("Teredo server: Received %s from %s , Sending %s to %s.", ReceivedTeredoPacketType.ToString, IsValueNone(SourceIPAddress) ? "Null" : SourceIPAddress.ToString, SentTeredoPacketType.ToString, IsValueNone(DestinationIPAddress) ? "Null" : DestinationIPAddress.ToString)
{
	UINT32 IpAddrLength;
	UINT32 ReceivedTeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address SourceIPAddress;
	}
	UINT32 SentTeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address DestinationIPAddress;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_4TO6_BOUNCE_PACKET = FormatString("Teredo %s received %s, Mapping to %s.  source: %s, destination: %s, target: %s.", ServiceType.ToString, ReceivedTeredoPacketType.ToString, MappedTeredoPacketType.ToString, IsValueNone(SourceIPAddress) ? "Null" : SourceIPAddress.ToString, IsValueNone(DestinationIPAddress) ? "Null" : DestinationIPAddress.ToString, IsValueNone(TargetIPAddress) ? "Null" : TargetIPAddress.ToString)
{
	UINT32 IpAddrLength;
	UINT32 ServiceType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ServiceType_ValueMap(this);
	UINT32 ReceivedTeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	UINT32 MappedTeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address SourceIPAddress;
	}
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address DestinationIPAddress;
	}
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address TargetIPAddress;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_BAD_OR_INVALID_PACKET = FormatString("Teredo client in state %s,received bad or invalid packet with %s.", TeredoProtocolState.ToString, BadorInvalidPacket.ToString)
{
	UINT32 TeredoProtocolState = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_TeredoState_ValueMap(this);
	UINT32 BadorInvalidPacket = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_BadParameter_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_STATE_CHANGE = FormatString("Teredo client state change: Previous state %s, Current state %s.", PreviousTeredoProtocolState.ToString, CurrentTeredoProtocolState.ToString)
{
	UINT32 PreviousTeredoProtocolState = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_TeredoState_ValueMap(this);
	UINT32 CurrentTeredoProtocolState = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_TeredoState_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_SEND_PACKET = FormatString("Teredo client Sending %s packet.", TeredoPacketType.ToString)
{
	UINT32 TeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_START_OFFLOAD = FormatString("Starting Teredo Offload with:  LocalV6:%s RemoteV6:%s  LocalV4:%s RemoteV4:%s  LocalPort:%s RemotePort:%s.", IsValueNone(SourceIpv6Address) ? "Null" : SourceIpv6Address.ToString, IsValueNone(DestinationIPv6Address) ? "Null" : DestinationIPv6Address.ToString, SourceIPv4Address.ToString, DestinationIPv4Address.ToString, SourcePort.ToString, DestinationPort.ToString)
{
	UINT32 IpAddrV4Length;
	UINT32 IpAddrV6Length;
	switch
	{
		case IpAddrV6Length > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address SourceIpv6Address;
	}
	switch
	{
		case IpAddrV6Length > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address DestinationIPv6Address;
	}
	[DataFieldByteOrder = BigEndian]IPv4Address SourceIPv4Address;
	[DataFieldByteOrder = BigEndian]IPv4Address DestinationIPv4Address;
	UINT16 SourcePort;
	UINT16 DestinationPort;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_IO = FormatString("%s", Description.ToString)
{
	UnicodeString Description;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_BAD_OR_INVALID_PACKET = FormatString("Teredo server received bad or invalid packet with %s.", BadorInvalidPacket.ToString)
{
	UINT32 BadorInvalidPacket = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_BadParameter_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_MAPPING = FormatString("%s %s mapping: %s.", ServiceType.ToString, MappingType.ToString, IsValueNone(SocketAddress) ? "Null" : SocketAddress.ToString)
{
	UINT32 SockAddrLength;
	UINT32 ServiceType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ServiceType_ValueMap(this);
	UINT32 MappingType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_TeredoPortMapping_ValueMap(this);
	switch
	{
		case SockAddrLength > 0 :
			ETL_SOCKADDR_STORAGE SocketAddress;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_SEND_PACKET = FormatString("Teredo %s transmitting packet to %s.", PrimaryorSecondary.ToString, IsValueNone(DestinationAddress) ? "Null" : DestinationAddress.ToString)
{
	UINT32 AddrLength;
	UnicodeString PrimaryorSecondary;
	switch
	{
		case AddrLength > 0 :
			ETL_SOCKADDR_STORAGE DestinationAddress;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_RECV_V6_PACKET = FormatString("Teredo %s received %s packet from %s.", ServiceType.ToString, TeredoPacketType.ToString, IsValueNone(SourceIpv6Address) ? "Null" : SourceIpv6Address.ToString)
{
	UINT32 AddrLength;
	UINT32 ServiceType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ServiceType_ValueMap(this);
	UINT32 TeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	switch
	{
		case AddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address SourceIpv6Address;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_BOUNCE_PACKET = FormatString("Teredo %s received %s, sending %s to %s.", ServiceType.ToString, ReceivedTeredoPacketType.ToString, MappedTeredoPacketType.ToString, IsValueNone(DestinationIPAddress) ? "Null" : DestinationIPAddress.ToString)
{
	UINT32 IpAddrLength;
	UINT32 ServiceType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ServiceType_ValueMap(this);
	UINT32 ReceivedTeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	UINT32 MappedTeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	switch
	{
		case IpAddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address DestinationIPAddress;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_BOUNCE_V4_PACKET = FormatString("Teredo %s received %s, sending %s to %s.", ServiceType.ToString, ReceivedTeredoPacketType.ToString, MappedTeredoPacketType.ToString, IsValueNone(DestinationIPAddress) ? "Null" : DestinationIPAddress.ToString)
{
	UINT32 AddrLength;
	UINT32 ServiceType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ServiceType_ValueMap(this);
	UINT32 ReceivedTeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	UINT32 MappedTeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	switch
	{
		case AddrLength > 0 :
			ETL_SOCKADDR_STORAGE DestinationIPAddress;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_RECV_V4_PACKET = FormatString("Teredo %s received packet from %s.", PrimaryorSecondary.ToString, IsValueNone(SocketAddress) ? "Null" : SocketAddress.ToString)
{
	UINT32 AddrLength;
	UnicodeString PrimaryorSecondary;
	switch
	{
		case AddrLength > 0 :
			ETL_SOCKADDR_STORAGE SocketAddress;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_RECV_V6_PACKETEX = FormatString("Teredo %s received packet type %s;  with source %s destination %s target %s.", ServiceType.ToString, TeredoPacketType.ToString, IsValueNone(SourceIpv6Address) ? "Null" : SourceIpv6Address.ToString, IsValueNone(DestinationIPAddress) ? "Null" : DestinationIPAddress.ToString, IsValueNone(TargetIPAddress) ? "Null" : TargetIPAddress.ToString)
{
	UINT32 AddrLength;
	UINT32 ServiceType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ServiceType_ValueMap(this);
	UINT32 TeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	switch
	{
		case AddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address SourceIpv6Address;
	}
	switch
	{
		case AddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address DestinationIPAddress;
	}
	switch
	{
		case AddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address TargetIPAddress;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_SENDV6_PACKET = FormatString("Teredo %s transmitting %s packet to %s.", ServiceType.ToString, TeredoPacketType.ToString, IsValueNone(DestinationAddress) ? "Null" : DestinationAddress.ToString)
{
	UINT32 AddrLength;
	UINT32 ServiceType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ServiceType_ValueMap(this);
	UINT32 TeredoPacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	switch
	{
		case AddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address DestinationAddress;
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_INTERFACE_STATE = FormatString("%s interface %s %s.", ProtocolType.ToString, Interface.ToString, InterfaceState.ToString)
{
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
	UnicodeString Interface;
	UINT32 InterfaceState = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_InterfaceState_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ISATAP_LINKLOCALADDRESS_CHANGE = FormatString("ISATAP link local address for interface %s was %s, is %s.", Interface.ToString, CurrentIPv4Address.ToString, NewIPv4Address.ToString)
{
	UINT32 AddrLength;
	UnicodeString Interface;
	[DataFieldByteOrder = BigEndian]IPv4Address CurrentIPv4Address;
	[DataFieldByteOrder = BigEndian]IPv4Address NewIPv4Address;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ISATAP_PRL_CHANGED = FormatString("ISATAP potential router interface list has changed.")
{
	_struct Empty{};
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ROUTE_FOUND = FormatString("%s: Found route to %s from interface %s. Source = %s, Next Hop = %s.", ProtocolType.ToString, DestinationIPv4Address.ToString, Interface.ToString, SourceIPv4Address.ToString, NextHopIPv4Address.ToString)
{
	UINT32 AddrLength;
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address DestinationIPv4Address;
	UnicodeString Interface;
	[DataFieldByteOrder = BigEndian]IPv4Address SourceIPv4Address;
	[DataFieldByteOrder = BigEndian]IPv4Address NextHopIPv4Address;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ROUTER_REACHABLE = FormatString("%s: For %s, router %s is %s.", ProtocolType.ToString, InterfaceName.ToString, RouterIPv4Address.ToString, Reachable.ToString)
{
	UINT32 AddrLength;
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
	UnicodeString InterfaceName;
	[DataFieldByteOrder = BigEndian]IPv4Address RouterIPv4Address;
	UINT32 Reachable = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_RouteReach_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ISATAP_ROUTER_RESOLVED = FormatString("For %s, router name: %s, is %s. %s.", InterfaceName.ToString, RouterName.ToString, Resolved.ToString, RouterIPv4Address.ToString)
{
	UINT32 AddrLength;
	UnicodeString InterfaceName;
	UnicodeString RouterName;
	UINT32 Resolved = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_RouteReach_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address RouterIPv4Address;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_PROTOCOL_START = FormatString("%s protocol started.", ProtocolType.ToString)
{
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_PROTOCOL_STOP = FormatString("%s protocol stopped.", ProtocolType.ToString)
{
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_PROTOCOL_INITIALIZED = FormatString("%s protocol initialized.", ProtocolType.ToString)
{
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_PROTOCOL_UNINITIALIZED = FormatString("%s protocol uninitialized.", ProtocolType.ToString)
{
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ISATAP_INTERFACE_REUSE = FormatString("ISATAP found interface %s to reuse.", InterfaceName.ToString)
{
	UnicodeString InterfaceName;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_CONFIGURE_ADDRESS = FormatString("%s: interface %s address %s %s.", ProtocolType.ToString, InterfaceName.ToString, IPv4Address.ToString, AddedorDeleted.ToString)
{
	UINT32 AddrLength;
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
	UINT32 AddedorDeleted = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_AddressUpdate_ValueMap(this);
	[DataFieldByteOrder = BigEndian]IPv4Address IPv4Address;
	UnicodeString InterfaceName;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_UPDATE_ROUTE_TABLE = FormatString("6to4: Updating route %s/%s interface %s metric %s lifetime %s/%s publish %s.", IsValueNone(IPAddress) ? "Null" : IPAddress.ToString, PrefixLen.ToString, InterfaceAlias.ToString, Metric.ToString, PreferredLifetime.ToString, ValidLifeTime.ToString, Publish.ToString)
{
	UINT32 AddrLength;
	switch
	{
		case AddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPAddress;
	}
	UINT64 PrefixLen;
	UnicodeString InterfaceAlias;
	UINT32 Metric;
	UINT32 PreferredLifetime;
	UINT32 ValidLifeTime;
	BOOL Publish;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_INTERFACE_UPDATE = FormatString("6to4: Configuring interface %s with following parameters: ICS PrivateInterface = %s AdvertiseDefaultRoute = %s Advertises = %s Forwards = %s NTStatus = %s.", InterfaceAlias.ToString, IcsPrivateInterface.ToString, AdvertiseDefaultRoute.ToString, Advertises.ToString, Forwards.ToString, Status.ToString)
{
	UnicodeString InterfaceAlias;
	BOOL IcsPrivateInterface;
	BOOL AdvertiseDefaultRoute;
	BOOL Advertises;
	BOOL Forwards;
	UINT64 Status;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_ROUTING_STATE_CHANGE = FormatString("6to4: Routing State changed to %s from %s.", NewRoutingState.ToString, OldRoutingState.ToString)
{
	UINT32 NewRoutingState = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_RoutingState_ValueMap(this);
	UINT32 OldRoutingState = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_RoutingState_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_LINKLAYER_ADDRESS = FormatString("6to4: For interface %s, IPv4 address %s was chosen for link layer address.", InterfaceAlias.ToString, IPAddress.ToString)
{
	UnicodeString InterfaceAlias;
	[DataFieldByteOrder = BigEndian]IPv4Address IPAddress;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_COMPARTMENT_CHANGE_NOTIFICATION = FormatString("%s:Change notification for compartment %s, HaveGlobalIPv6Address = %s, ICS Enabled =  %s, GlobalIPv4AddressCount = %s.", ProtocolType.ToString, CompartmentId.ToString, HaveGlobalIpv6Address.ToString, ICSEnabled.ToString, GlobalIPv4AddressCount.ToString)
{
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
	UINT32 CompartmentId;
	BOOL HaveGlobalIpv6Address;
	BOOL ICSEnabled;
	UINT64 GlobalIPv4AddressCount;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_UPDATE_INTERFACE_ROUTING_STATE = FormatString("6to4: Configuring interface %s in compartment %s with routing state %s.", InterfaceIndex.ToString, CompartmentId.ToString, RoutingState.ToString)
{
	UINT64 InterfaceIndex;
	UINT32 CompartmentId;
	UINT32 RoutingState = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_RoutingState_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_CONFIGURE_ADDRESS_UPDATE = FormatString("Configuring interface %s with address %s, lifetime %s, prefix %s suffix %s.", InterfaceAlias.ToString, IsValueNone(IPAddress) ? "Null" : IPAddress.ToString, Lifetime.ToString, PrefixConf.ToString, SuffixConf.ToString)
{
	UINT32 AddrLength;
	UnicodeString InterfaceAlias;
	switch
	{
		case AddrLength > 0 :
			[DataFieldByteOrder = BigEndian]IPv6Address IPAddress;
	}
	UINT64 Lifetime;
	UINT64 PrefixConf;
	UINT64 SuffixConf;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_PROTOCOL_CALLBACK_LOG = FormatString("%s Callback for %s.", ProtocolCallback.ToString, ProtocolType.ToString)
{
	UINT32 ProtocolCallback = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolCallback_ValueMap(this);
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_START_FAILED = FormatString("Teredo Client failed to start due to the following reason: %s.", TeredoReasonCode.ToString)
{
	UINT32 TeredoReasonCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_TEREDO_CLIENT_STOP = FormatString("Teredo Client stopped due to the following reason: %s.", TeredoReasonCode.ToString)
{
	UINT32 TeredoReasonCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_6TO4_START_FAILED = FormatString("6TO4 failed to start due to the following reason: %s.", WindowsErrorCode.ToString)
{
	UINT32 WindowsErrorCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_ISATAP_ROUTER_SET = FormatString("ISATAP router address %s was set with status %s.", IsatapRouter.ToString, ErrorCode.ToString)
{
	UnicodeString IsatapRouter;
	WinErrorCode ErrorCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_NLM_DOMAIN_DETECTION = FormatString("NLM found that the network is %s.", NetworkType.ToString)
{
	UINT32 NetworkType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_NetworkType_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_ENUMERATE_INTERFACES = FormatString("IPHTTPS: InterfaceName:%s InterfaceType:%s RegistryState:%s CurrentState:%s URL:%s AuthenticationMode:%s", InterfaceName.ToString, InterfaceType.ToString, RegistryState.ToString, CurrentState.ToString, URL.ToString, AuthenticationMode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 InterfaceType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ServiceType_ValueMap(this);
	UINT32 RegistryState = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_RoutingState_ValueMap(this);
	UINT32 CurrentState = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_RoutingState_ValueMap(this);
	UnicodeString URL;
	UINT32 AuthenticationMode = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_AuthenticationType_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_INSTALLATION_FAILED = FormatString("IPHTTPS: Interface %s installation failed. Status = %s", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_LINKADDRUPDATE = FormatString("IPHTTPS: Interface %s update link address. Status = %s", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_CERTIFICATE_ADDED = FormatString("IPHTTPS: Client interface %s configured to use certificate %s with preference = %s", InterfaceName.ToString, CertificateCN.ToString, Preference.ToString)
{
	UnicodeString InterfaceName;
	UnicodeString CertificateCN;
	UINT32 Preference;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DESTROY_COMPLETE = FormatString("IPHTTPS: Interface %s cleanup complete", InterfaceName.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_FIREWALL_EXCEPTION = FormatString("IPHTTPS: Interface %s firewall exception added. Status = %s", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_GLOBAL_PERFCOUNTER = FormatString("IPHTTPS: Interface %s performance counters added. Status = %s", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_MEMORY_FAILURE = FormatString("IPHTTPS: Interface %s Memory allocation failed", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_TUNNEL_IO_FAILED = FormatString("IPHTTPS: Interface %s Tunnel device IO failed: %s", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_REUSING_INTERFACE = FormatString("IPHTTPS: Interface %s reusing an previously installed interface", InterfaceName.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DELETED = FormatString("IPHTTPS: Interface %s deleted", InterfaceName.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_MEDIA_CONNECT = FormatString("IPHTTPS: Interface %s media connect indication: Status= %s", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_MEDIA_DISCONNECT = FormatString("IPHTTPS: Interface %s media disconnect indication: Status= %s", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DEACTIVATED = FormatString("IPHTTPS: Interface %s deactivated.", InterfaceName.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_UNINSTALLED = FormatString("IPHTTPS: Adapter %s uninstalled as it does not have associated registry configuration.Status = %s", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_V6_ADDRESS_CHANGE_CALLBACK = FormatString("IPHTTPS: V6 Address change callback. Address = %s Added = %s LimitedConnectivity = %s", Address.ToString, Added.ToString, LimitedConnectivity.ToString)
{
	UINT32 InterfaceIndex;
	UnicodeString Address;
	BOOL Added;
	BOOL LimitedConnectivity;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_UPDATE_GLOBAL_CONNECTIVITY_STATE = FormatString("IPHTTPS: Global connectivity state change. GlobalAddressCount = %s Ipv4Connectivity = %s Ipv6Connectivity = %s CorpConnectivity = %s", GlobalIpv6AddressCount.ToString, Ipv4Connectivity.ToString, Ipv6Connectivity.ToString, CorpConnectivity.ToString)
{
	UINT32 GlobalIpv6AddressCount;
	BOOL Ipv4Connectivity;
	BOOL Ipv6Connectivity;
	BOOL CorpConnectivity;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_CHANGE_CALLBACK = FormatString("IPHTTPS: Interface callback. Index = %s Added = %s LimitedConnectivity = %s", InterfaceIndex.ToString, Added.ToString, LimitedConnectivity.ToString)
{
	UINT32 InterfaceIndex;
	UnicodeString Address;
	BOOL Added;
	BOOL LimitedConnectivity;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_ACTIVATED = FormatString("IPHTTPS: Interface %s activated.", InterfaceName.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CORP_CONNECTIVITY_TIMER_STARTED = FormatString("IPHTTPS: Corp connectivity timer started. Due time = %s (100ns units).", DueTime.ToString)
{
	UINT32 DueTime;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CORP_CONNECTIVITY_TIMEOUT = FormatString("IPHTTPS: Corp connectivity timeout.")
{
	UINT32 DueTime;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_NETWORK_CHANGE = FormatString("IPHTTPS: Network change. Network GUID = %s Added = %s", NetworkGuid.ToString, Added.ToString)
{
	GUID(true) NetworkGuid;
	BOOL Added;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_TEREDO_DORMANCY_CHANGE = FormatString("IPHTTPS: Teredo dormancy change. New State = %s", CurrentTeredoProtocolState.ToString)
{
	UINT32 CurrentTeredoProtocolState = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_TeredoState_ValueMap(this);
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INIT_FAILED = FormatString("IPHTTPS: Initialization failed. Status = %s", InterfaceName.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_ND_PACKET = FormatString("IPHTTPS: ND Packet. Packet type = %s, Target Address = %s, Prefix = %s, Default Router = %s.", PacketType.ToString, TargetAddress.ToString, Prefix.ToString, DefaultRouter.ToString)
{
	UINT32 PacketType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_PacketType_ValueMap(this);
	UnicodeString TargetAddress;
	UnicodeString Prefix;
	BOOL DefaultRouter;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SHUTDOWN = "IPHTTPS: Client interface is being shutdown." {}; // Empty Struct
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_IO_REFERENCE = FormatString("IPHTTPS: Client IO Reference %s.", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_IO_DEREFERENCE = FormatString("IPHTTPS: Client IO Dereference %s.", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SEND_HTTP_REQUEST = FormatString("IPHTTPS: %s Client Send Http Request: Status = %s.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RECEIVE_HTTP_RESPONSE = FormatString("IPHTTPS: %s Client Send Receive Response: Status = %s.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_HTTP_STATUS_CODE = FormatString("IPHTTPS: %s Client Send Http Status Code = %s.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RECEIVE_ENTITY = FormatString("IPHTTPS: %s Client Receive Entity Completion Status = %s.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SEND_ENTITY = FormatString("IPHTTPS: %s Client Send Entity Completion Status = %s.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_SCHEDULING_RECONNECT = FormatString("IPHTTPS: %s Client Scheduling a reconnect after %s seconds.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RESTARTING_CLIENT = FormatString("IPHTTPS: %s Client restarting.", InterfaceName.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_RESTARTING_CLIENT_ON_INTERNET = FormatString("IPHTTPS: %s Client restarting due to internet connectivity.", InterfaceName.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_ADD_CLIENT_ADDRESS_MAPPING = FormatString("IPHTTPS: %s Adding Client address mapping for address %s.", InterfaceName.ToString, Address.ToString)
{
	UnicodeString InterfaceName;
	UnicodeString Address;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_REMOVE_CLIENT_ADDRESS_MAPPING = FormatString("IPHTTPS: %s Removing Client address mapping for address %s.", InterfaceName.ToString, Address.ToString)
{
	UnicodeString InterfaceName;
	UnicodeString Address;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_ADD_PENDING_PACKET = FormatString("IPHTTPS: %s Adding Pending packet for address %s.", InterfaceName.ToString, Address.ToString)
{
	UnicodeString InterfaceName;
	UnicodeString Address;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_REMOVE_PENDING_PACKET = FormatString("IPHTTPS: %s Removing Pending packet for address %s.", InterfaceName.ToString, Address.ToString)
{
	UnicodeString InterfaceName;
	UnicodeString Address;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_RECEIVE_CLIENT_CERT = FormatString("IPHTTPS: %s Receive client certificate completed. Status = %s.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_SEND_RESPONSE = FormatString("IPHTTPS: %s Send HTTP response completed. Status = %s.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_RECEIVE_REQUEST = FormatString("IPHTTPS: %s Receive request completed. Status = %s.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_RECEIVE_ENTITY = FormatString("IPHTTPS: %s Receive entity completed. Status = %s.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_SEND_ENTITY = FormatString("IPHTTPS: %s Send entity completed. Status = %s.", InterfaceName.ToString, StatusCode.ToString)
{
	UnicodeString InterfaceName;
	UINT32 StatusCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_NEIGHBOR_DISCOVERY_PACKET_DROP = FormatString("IPHTTPS: %s Dropped packet destined to %s due to neighbor discovery timeout.", InterfaceName.ToString, DestinationAddress.ToString)
{
	UnicodeString InterfaceName;
	UnicodeString DestinationAddress;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_NEIGHBOR_DISCOVERY = FormatString("IPHTTPS: %s Sending neighbor solicitation for %s.", InterfaceName.ToString, DestinationAddress.ToString)
{
	UnicodeString InterfaceName;
	UnicodeString DestinationAddress;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_REFERENCE = FormatString("IPHTTPS: IPHTTPS Interface Reference %s", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_INTERFACE_DEREFERENCE = FormatString("IPHTTPS: IPHTTPS Interface Dereference %s", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_INTERFACE_REFERENCE = FormatString("IPHTTPS: IPHTTPS Client Interface Reference %s", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_CLIENT_INTERFACE_DEREFERENCE = FormatString("IPHTTPS: IPHTTPS Client Interface Dereference %s", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_INTERFACE_REFERENCE = FormatString("IPHTTPS: IPHTTPS Server Interface Reference %s", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_INTERFACE_DEREFERENCE = FormatString("IPHTTPS: IPHTTPS Server Interface Dereference %s", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_CLIENT_CONTEXT_REFERENCE = FormatString("IPHTTPS: IPHTTPS Client Context Reference %s", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ETW_IPHTTPS_SERVER_CLIENT_CONTEXT_DEREFERENCE = FormatString("IPHTTPS: IPHTTPS Client Context Dereference %s", Object.ToString)
{
	EtlPtr Object;
	AsciiString FileName;
	UINT32 LineNumber;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsIphlpsvc, "{66a5c15c-4f8e-4044-bf6e-71d896038977}")]
Protocol Ipv4Ipv6Co_MicrosoftWindowsIphlpsvc = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 4000: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_STARTED EVENT_IPHLPSVC_TEREDO_SERVER_STARTED;
		case 4001: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_START_FAILED EVENT_IPHLPSVC_TEREDO_SERVER_START_FAILED;
		case 4002: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_ADDRESS_INVALID EVENT_IPHLPSVC_TEREDO_SERVER_ADDRESS_INVALID;
		case 4003: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_NAME_INVALID EVENT_IPHLPSVC_TEREDO_SERVER_NAME_INVALID;
		case 4004: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_INITIALIZATION_FAILED EVENT_IPHLPSVC_TEREDO_SERVER_INITIALIZATION_FAILED;
		case 4005: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_STOPPED EVENT_IPHLPSVC_TEREDO_SERVER_STOPPED;
		case 4100: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_ISATAP_ROUTER_SET EVENT_IPHLPSVC_ISATAP_ROUTER_SET;
		case 4200: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_INTERFACE_UP EVENT_IPHLPSVC_INTERFACE_UP;
		case 4201: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_INTERFACE_DOWN EVENT_IPHLPSVC_INTERFACE_DOWN;
		case 4202: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_INTERFACE_ADDRESS_UPDATE_FAILED EVENT_IPHLPSVC_INTERFACE_ADDRESS_UPDATE_FAILED;
		case 4300: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_IPHTTPS_SERVER_STARTED EVENT_IPHLPSVC_IPHTTPS_SERVER_STARTED;
		case 4301: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_IPHTTPS_SERVER_STOPPED EVENT_IPHLPSVC_IPHTTPS_SERVER_STOPPED;
		case 4302: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_IPHTTPS_SERVER_START_FAILED EVENT_IPHLPSVC_IPHTTPS_SERVER_START_FAILED;
		case 4303: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_IPHTTPS_CLIENT_CONNECTED EVENT_IPHLPSVC_IPHTTPS_CLIENT_CONNECTED;
		case 4304: [property.ETLSummary = this.ToString] Ipv4Ipv6Co_EVENT_IPHLPSVC_IPHTTPS_CLIENT_DISCONNECTED EVENT_IPHLPSVC_IPHTTPS_CLIENT_DISCONNECTED;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_STARTED = FormatString("Teredo server has successfully started.")
{
	_struct Empty{};
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_START_FAILED = FormatString("Teredo server has failed to start with the following error: %s. Teredo Reason Code: %s.", ErrorCode.ToString, TeredoReasonCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 TeredoReasonCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_ADDRESS_INVALID = FormatString("Teredo server primary or secondary IPv4 address is invalid. Primary IPv4 address: %s. Error Code: %s.", Interface.ToString, ErrorCode.ToString)
{
	UnicodeString Interface;
	WinErrorCode ErrorCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_NAME_INVALID = FormatString("Configured Teredo server name %s is invalid. Error Code: %s.", ServerName.ToString, ErrorCode.ToString)
{
	UnicodeString ServerName;
	WinErrorCode ErrorCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_INITIALIZATION_FAILED = FormatString("Teredo server initialization has failed with the following error code %s.", ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_TEREDO_SERVER_STOPPED = FormatString("Teredo server has stopped.")
{
	_struct Empty{};
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_ISATAP_ROUTER_SET = FormatString("ISATAP router address %s was set with status %s.", IsatapRouter.ToString, ErrorCode.ToString)
{
	UnicodeString IsatapRouter;
	WinErrorCode ErrorCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_INTERFACE_UP = FormatString("%s interface %s with address %s has been brought up.", ProtocolType.ToString, Interface.ToString, Address.ToString)
{
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
	UnicodeString Interface;
	UnicodeString Address;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_INTERFACE_DOWN = FormatString("%s interface %s is no longer active.", ProtocolType.ToString, Interface.ToString)
{
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
	UnicodeString Interface;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_INTERFACE_ADDRESS_UPDATE_FAILED = FormatString("Unable to update the IP address on %s interface %s. Update Type: %s. Error Code: %s.", ProtocolType.ToString, Interface.ToString, UpdateType.ToString, ErrorCode.ToString)
{
	UINT32 ProtocolType = Ipv4Ipv6Co_IPHLPSVC_ETW_LOGGING_ProtocolType_ValueMap(this);
	UnicodeString Interface;
	UINT32 UpdateType;
	WinErrorCode ErrorCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_IPHTTPS_SERVER_STARTED = FormatString("IP-HTTPS server has successfully started using the server URL %s.", ServerUrl.ToString)
{
	UnicodeString ServerUrl;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_IPHTTPS_SERVER_STOPPED = FormatString("IP-HTTPS server has stopped.")
{
	_struct Empty{};
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_IPHTTPS_SERVER_START_FAILED = FormatString("IP-HTTPS server has failed to start with the following error: %s.   IP HTTPS reason code %s.", ErrorCode.ToString, IpHTTPSReasonCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 IpHTTPSReasonCode;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_IPHTTPS_CLIENT_CONNECTED = FormatString("IP-HTTPS client %s (%s) is associated with IP address %s.", ClientMachineName.ToString, TunnelSourceIP.ToString, RemoteIP.ToString)
{
	UnicodeString ClientMachineName;
	UnicodeString TunnelSourceIP;
	UnicodeString RemoteIP;
}
Struct Ipv4Ipv6Co_EVENT_IPHLPSVC_IPHTTPS_CLIENT_DISCONNECTED = FormatString("IP-HTTPS client %s (%s) is disassociated from IP address %s.", ClientMachineName.ToString, TunnelSourceIP.ToString, RemoteIP.ToString)
{
	UnicodeString ClientMachineName;
	UnicodeString TunnelSourceIP;
	UnicodeString RemoteIP;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsIphlpsvcTrace_Keyword, "{6600e712-c3b6-44a2-8a48-935c511f28c8}")]
struct Ipv4Ipv6Co_MicrosoftWindowsIphlpsvcTrace_Keyword
{
	UINT64 isatap:1 = FormatString("   (%s) %s", this.ToBitString, this? "KW_IPHLPSVC_ISATAP":"");
	UINT64 sixto4:1 = FormatString("   (%s) %s", this.ToBitString, this? "KW_IPHLPSVC_6TO4":"");
	UINT64 iphttps:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_IPHLPSVC_IPHTTPS":"");
	UINT64 teredo:1 = FormatString("   (%s) %s", this.ToBitString, this? "KW_IPHLPSVC_TEREDO":"");
	UINT64 Reserved1:60 = FormatString("(%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsIphlpsvc_Keyword, "{66a5c15c-4f8e-4044-bf6e-71d896038977}")]
struct Ipv4Ipv6Co_MicrosoftWindowsIphlpsvc_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
