//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-WinINet.ETW
//#
//#  Details:                
//#
//#  Public References:      WinINet.ETW.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 6/22/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWinINet, "{43D1A55C-76D6-4f7e-995C-64C711E5CAFE}")]
Protocol WinINet_MicrosoftWindowsWinINet = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 101: [property.ETLSummary = this.ToString] WinINet_WININET_ROOT_HANDLE_CREATED WININET_ROOT_HANDLE_CREATED;
		case 102: [property.ETLSummary = this.ToString] WinINet_WININET_OPEN_URL_HANDLE_CREATED WININET_OPEN_URL_HANDLE_CREATED;
		case 103: [property.ETLSummary = this.ToString] WinINet_WININET_CONNECT_HANDLE_CREATED WININET_CONNECT_HANDLE_CREATED;
		case 104: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_REQUEST_HANDLE_CREATED WININET_HTTP_REQUEST_HANDLE_CREATED;
		case 105: [property.ETLSummary = this.ToString] WinINet_WININET_HANDLE_CLOSED WININET_HANDLE_CLOSED;
		case 106: [property.ETLSummary = this.ToString] WinINet_WININET_HANDLE_CREATE_FAILED WININET_HANDLE_CREATE_FAILED;
		case 107: [property.ETLSummary = this.ToString] WinINet_WININET_HANDLE_CLOSE_FAILED WININET_HANDLE_CLOSE_FAILED;
		case 108: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_REQUEST_HANDLE_CREATED_SERVER_DETAILS WININET_HTTP_REQUEST_HANDLE_CREATED_SERVER_DETAILS;
		case 200: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_REQUEST_API_CALL WININET_HTTP_REQUEST_API_CALL;
		case 201: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_REQUEST_SENT WININET_HTTP_REQUEST_SENT;
		case 202: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_REQUEST_FAILED WININET_HTTP_REQUEST_FAILED;
		case 203: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_RESPONSE_RECEIVED WININET_HTTP_RESPONSE_RECEIVED;
		case 204: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_RESPONSE_FAILED WININET_HTTP_RESPONSE_FAILED;
		case 205: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_CONNECTION_CLOSED WININET_HTTP_CONNECTION_CLOSED;
		case 206: [property.ETLSummary = this.ToString] WinINet_WININET_KEEP_ALIVE_CONNECTION_REUSED WININET_KEEP_ALIVE_CONNECTION_REUSED;
		case 207: [property.ETLSummary = this.ToString] WinINet_WININET_KEEP_ALIVE_CONNECTION_POOLED WININET_KEEP_ALIVE_CONNECTION_POOLED;
		case 208: [property.ETLSummary = this.ToString] WinINet_WININET_KEEP_ALIVE_CONNECTION_CLOSED WININET_KEEP_ALIVE_CONNECTION_CLOSED;
		case 209: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_RESPONSE_BODY_RECEIVED WININET_HTTP_RESPONSE_BODY_RECEIVED;
		case 210: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_REQUEST_HEADERS WININET_HTTP_REQUEST_HEADERS;
		case 211: [property.ETLSummary = this.ToString] WinINet_WININET_HTTP_RESPONSE_HEADERS WININET_HTTP_RESPONSE_HEADERS;
		case 301: [property.ETLSummary = this.ToString] WinINet_WININET_TCP_CONNECTION_ESTABLISHED WININET_TCP_CONNECTION_ESTABLISHED;
		case 302: [property.ETLSummary = this.ToString] WinINet_WININET_TCP_CONNECTION_FAILED WININET_TCP_CONNECTION_FAILED;
		case 303: [property.ETLSummary = this.ToString] WinINet_WININET_TCP_CONNECTION_CLOSED WININET_TCP_CONNECTION_CLOSED;
		case 304: [property.ETLSummary = this.ToString] WinINet_WININET_DNS_QUERY_SENT WININET_DNS_QUERY_SENT;
		case 305: [property.ETLSummary = this.ToString] WinINet_WININET_DNS_QUERY_COMPLETE WININET_DNS_QUERY_COMPLETE;
		case 306: [property.ETLSummary = this.ToString] WinINet_WININET_DNS_QUERY_FAILED WININET_DNS_QUERY_FAILED;
		case 307: [property.ETLSummary = this.ToString] WinINet_WININET_DNS_CACHE_QUERY_COMPLETE WININET_DNS_CACHE_QUERY_COMPLETE;
		case 308: [property.ETLSummary = this.ToString] WinINet_WININET_NETWORK_CHANGE_DETECTED WININET_NETWORK_CHANGE_DETECTED;
		case 501: [property.ETLSummary = this.ToString] WinINet_WININET_COOKIE_HEADER_RECEIVED WININET_COOKIE_HEADER_RECEIVED;
		case 502: [property.ETLSummary = this.ToString] WinINet_WININET_COOKIE_STORED WININET_COOKIE_STORED;
		case 503: [property.ETLSummary = this.ToString] WinINet_WININET_COOKIE_DELETED WININET_COOKIE_DELETED;
		case 504: [property.ETLSummary = this.ToString] WinINet_WININET_COOKIE_BLOCKED WININET_COOKIE_BLOCKED;
		case 505: [property.ETLSummary = this.ToString] WinINet_WININET_COOKIE_P3P_REJECTED WININET_COOKIE_P3P_REJECTED;
		case 506: [property.ETLSummary = this.ToString] WinINet_WININET_COOKIE_REQUEST_HEADER_CREATED WININET_COOKIE_REQUEST_HEADER_CREATED;
		case 507: [property.ETLSummary = this.ToString] WinINet_WININET_COOKIE_ADDED_TO_HEADER WININET_COOKIE_ADDED_TO_HEADER;
		case 601: [property.ETLSummary = this.ToString] WinINet_WININET_AUTH_RESPONSE_RECEIVED WININET_AUTH_RESPONSE_RECEIVED;
		case 602: [property.ETLSummary = this.ToString] WinINet_WININET_AUTH_CLIENT_SETS_USERNAME WININET_AUTH_CLIENT_SETS_USERNAME;
		case 603: [property.ETLSummary = this.ToString] WinINet_WININET_AUTH_CLIENT_SETS_PASSWORD WININET_AUTH_CLIENT_SETS_PASSWORD;
		case 604: [property.ETLSummary = this.ToString] WinINet_WININET_AUTH_USING_CACHED_CREDS WININET_AUTH_USING_CACHED_CREDS;
		case 605: [property.ETLSummary = this.ToString] WinINet_WININET_AUTH_USING_DEFAULT_CREDS WININET_AUTH_USING_DEFAULT_CREDS;
		case 606: [property.ETLSummary = this.ToString] WinINet_WININET_AUTH_CLIENT_ADD_HEADERS WININET_AUTH_CLIENT_ADD_HEADERS;
		case 701: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_NEGOTIATION_STARTED WININET_HTTPS_NEGOTIATION_STARTED;
		case 702: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_NEGOTIATION_COMPLETED WININET_HTTPS_NEGOTIATION_COMPLETED;
		case 703: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_NEGOTIATION_FAILED WININET_HTTPS_NEGOTIATION_FAILED;
		case 704: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_SERVER_CERT_ERROR WININET_HTTPS_SERVER_CERT_ERROR;
		case 705: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_SERVER_CERT_VALIDATED WININET_HTTPS_SERVER_CERT_VALIDATED;
		case 706: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_CLIENT_CERT_REQUIRED WININET_HTTPS_CLIENT_CERT_REQUIRED;
		case 707: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_CLIENT_CERT_UNAVAILABLE WININET_HTTPS_CLIENT_CERT_UNAVAILABLE;
		case 708: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_CLIENT_CERT_SELECTED WININET_HTTPS_CLIENT_CERT_SELECTED;
		case 711: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_RENEGOTIATION_STARTED WININET_HTTPS_RENEGOTIATION_STARTED;
		case 712: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_RENEGOTIATION_COMPLETED WININET_HTTPS_RENEGOTIATION_COMPLETED;
		case 713: [property.ETLSummary = this.ToString] WinINet_WININET_HTTPS_RENEGOTIATION_FAILED WININET_HTTPS_RENEGOTIATION_FAILED;
		case 801: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_SEARCH_START WININET_AUTOPROXY_SEARCH_START;
		case 802: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_DHCP_SEARCH_START WININET_AUTOPROXY_DHCP_SEARCH_START;
		case 803: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_DHCP_SEARCH_COMPLETE WININET_AUTOPROXY_DHCP_SEARCH_COMPLETE;
		case 804: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_DHCP_SEARCH_FAILED WININET_AUTOPROXY_DHCP_SEARCH_FAILED;
		case 805: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_DNS_SEARCH_START WININET_AUTOPROXY_DNS_SEARCH_START;
		case 806: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_DNS_SEARCH_COMPLETE WININET_AUTOPROXY_DNS_SEARCH_COMPLETE;
		case 807: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_DNS_SEARCH_FAILED WININET_AUTOPROXY_DNS_SEARCH_FAILED;
		case 808: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_SEARCH_FAILED WININET_AUTOPROXY_SEARCH_FAILED;
		case 809: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_DOWNLOAD_START WININET_AUTOPROXY_DOWNLOAD_START;
		case 810: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_DOWNLOAD_COMPLETE WININET_AUTOPROXY_DOWNLOAD_COMPLETE;
		case 811: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_DOWNLOAD_FAILED WININET_AUTOPROXY_DOWNLOAD_FAILED;
		case 812: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_DOWNLOAD_UNACCEPTABLE WININET_AUTOPROXY_DOWNLOAD_UNACCEPTABLE;
		case 813: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_FIND_INFO_FOR_URL WININET_AUTOPROXY_FIND_INFO_FOR_URL;
		case 814: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_FIND_INFO_FOR_URL_COMPLETE WININET_AUTOPROXY_FIND_INFO_FOR_URL_COMPLETE;
		case 815: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_FIND_INFO_FOR_FAILED WININET_AUTOPROXY_FIND_INFO_FOR_FAILED;
		case 816: [property.ETLSummary = this.ToString] WinINet_WININET_BLOCKING_AUTOPROXY_DETERMINATION_START WININET_BLOCKING_AUTOPROXY_DETERMINATION_START;
		case 817: [property.ETLSummary = this.ToString] WinINet_WININET_BLOCKING_AUTOPROXY_DETERMINATION_STOP WININET_BLOCKING_AUTOPROXY_DETERMINATION_STOP;
		case 818: [property.ETLSummary = this.ToString] WinINet_WININET_TRANSFER WININET_TRANSFER;
		case 819: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_SWPAD WININET_AUTOPROXY_SWPAD;
		case 820: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_HOST_IP_LOOKUP_START WININET_AUTOPROXY_PERFTRACK_HOST_IP_LOOKUP_START;
		case 821: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_HOST_IP_LOOKUP_STOP WININET_AUTOPROXY_PERFTRACK_HOST_IP_LOOKUP_STOP;
		case 822: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_SWPAD_LOOKUP_START WININET_AUTOPROXY_PERFTRACK_SWPAD_LOOKUP_START;
		case 823: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_SWPAD_LOOKUP_STOP WININET_AUTOPROXY_PERFTRACK_SWPAD_LOOKUP_STOP;
		case 824: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_KNOWN_DETECTION_START WININET_AUTOPROXY_PERFTRACK_KNOWN_DETECTION_START;
		case 825: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_KNOWN_DETECTION_STOP WININET_AUTOPROXY_PERFTRACK_KNOWN_DETECTION_STOP;
		case 826: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_UNKNOWN_DETECTION_START WININET_AUTOPROXY_PERFTRACK_UNKNOWN_DETECTION_START;
		case 827: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_UNKNOWN_DETECTION_STOP WININET_AUTOPROXY_PERFTRACK_UNKNOWN_DETECTION_STOP;
		case 828: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_SCRIPT_DOWNLOAD_START WININET_AUTOPROXY_PERFTRACK_SCRIPT_DOWNLOAD_START;
		case 829: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_SCRIPT_DOWNLOAD_STOP WININET_AUTOPROXY_PERFTRACK_SCRIPT_DOWNLOAD_STOP;
		case 834: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_ALL_START WININET_AUTOPROXY_PERFTRACK_ALL_START;
		case 835: [property.ETLSummary = this.ToString] WinINet_WININET_AUTOPROXY_PERFTRACK_ALL_STOP WININET_AUTOPROXY_PERFTRACK_ALL_STOP;
		case 1000: [property.ETLSummary = this.ToString] WinINet_WININET_TEST_EVENT WININET_TEST_EVENT;
		case 1007: [property.ETLSummary = this.ToString] WinINet_WININET_SENDREQUEST_START WININET_SENDREQUEST_START;
		case 1008: [property.ETLSummary = this.ToString] WinINet_WININET_SENDREQUEST_STOP WININET_SENDREQUEST_STOP;
		case 1009: [property.ETLSummary = this.ToString] WinINet_WININET_OFFLINECACHELOOKUP_INFO WININET_OFFLINECACHELOOKUP_INFO;
		case 1011: [property.ETLSummary = this.ToString] WinINet_WININET_OFFLINECACHEHIT_INFO WININET_OFFLINECACHEHIT_INFO;
		case 1013: [property.ETLSummary = this.ToString] WinINet_WININET_OFFLINECACHEMISS_INFO WININET_OFFLINECACHEMISS_INFO;
		case 1015: [property.ETLSummary = this.ToString] WinINet_WININET_PRENET_CACHELOOKUP_INFO WININET_PRENET_CACHELOOKUP_INFO;
		case 1017: [property.ETLSummary = this.ToString] WinINet_WININET_PRENET_CACHEHIT_INFO WININET_PRENET_CACHEHIT_INFO;
		case 1019: [property.ETLSummary = this.ToString] WinINet_WININET_PRENET_CACHEMISS_INFO WININET_PRENET_CACHEMISS_INFO;
		case 1021: [property.ETLSummary = this.ToString] WinINet_WININET_POSTNET_CACHELOOKUP_INFO WININET_POSTNET_CACHELOOKUP_INFO;
		case 1023: [property.ETLSummary = this.ToString] WinINet_WININET_POSTNET_CACHEHIT_INFO WININET_POSTNET_CACHEHIT_INFO;
		case 1025: [property.ETLSummary = this.ToString] WinINet_WININET_POSTNET_CACHEMISS_INFO WININET_POSTNET_CACHEMISS_INFO;
		case 1027: [property.ETLSummary = this.ToString] WinINet_WININET_AUTODIALIFNOTLOCALHOST_START WININET_AUTODIALIFNOTLOCALHOST_START;
		case 1028: [property.ETLSummary = this.ToString] WinINet_WININET_AUTODIALIFNOTLOCALHOST_STOP WININET_AUTODIALIFNOTLOCALHOST_STOP;
		case 1029: [property.ETLSummary = this.ToString] WinINet_WININET_RESOLVEHOST_START WININET_RESOLVEHOST_START;
		case 1030: [property.ETLSummary = this.ToString] WinINet_WININET_RESOLVEHOST_STOP WININET_RESOLVEHOST_STOP;
		case 1031: [property.ETLSummary = this.ToString] WinINet_WININET_SENDREQUEST_MAIN_INFO WININET_SENDREQUEST_MAIN_INFO;
		case 1033: [property.ETLSummary = this.ToString] WinINet_WININET_SENDREQUEST_EXTRA_INFO WININET_SENDREQUEST_EXTRA_INFO;
		case 1035: [property.ETLSummary = this.ToString] WinINet_WININET_SENDREQUEST_CRLF_INFO WININET_SENDREQUEST_CRLF_INFO;
		case 1037: [property.ETLSummary = this.ToString] WinINet_WININET_READDATA_INFO WININET_READDATA_INFO;
		case 1039: [property.ETLSummary = this.ToString] WinINet_WININET_READDATAPOSTRECEIVEBUF_INFO WININET_READDATAPOSTRECEIVEBUF_INFO;
		case 1041: [property.ETLSummary = this.ToString] WinINet_WININET_SENDREQUEST_POSTRECEIVEBUF_INFO WININET_SENDREQUEST_POSTRECEIVEBUF_INFO;
		case 1043: [property.ETLSummary = this.ToString] WinINet_WININET_DRAINRESPONSEPOSTRECEIVEBUF_INFO WININET_DRAINRESPONSEPOSTRECEIVEBUF_INFO;
		case 1045: [property.ETLSummary = this.ToString] WinINet_WININET_CONNECT_START WININET_CONNECT_START;
		case 1046: [property.ETLSummary = this.ToString] WinINet_WININET_CONNECT_STOP WININET_CONNECT_STOP;
		case 1047: [property.ETLSummary = this.ToString] WinINet_WININET_LOOKUPCONNECTION_START WININET_LOOKUPCONNECTION_START;
		case 1048: [property.ETLSummary = this.ToString] WinINet_WININET_LOOKUPCONNECTION_STOP WININET_LOOKUPCONNECTION_STOP;
		case 1049: [property.ETLSummary = this.ToString] WinINet_WININET_REDIRECT_INFO WININET_REDIRECT_INFO;
		case 1051: [property.ETLSummary = this.ToString] WinINet_WININET_GETADDRINFO_START WININET_GETADDRINFO_START;
		case 1052: [property.ETLSummary = this.ToString] WinINet_WININET_GETADDRINFO_STOP WININET_GETADDRINFO_STOP;
		case 1053: [property.ETLSummary = this.ToString] WinINet_WININET_DHCP_I252WPAD_START WININET_DHCP_I252WPAD_START;
		case 1054: [property.ETLSummary = this.ToString] WinINet_WININET_DHCP_I252WPAD_STOP WININET_DHCP_I252WPAD_STOP;
		case 1055: [property.ETLSummary = this.ToString] WinINet_WININET_SELECT_START WININET_SELECT_START;
		case 1056: [property.ETLSummary = this.ToString] WinINet_WININET_SELECT_STOP WININET_SELECT_STOP;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table WinINet_mapWPADNetworkDecision(value)
{
	switch(value)
	{
		case 0: "WPAD_NETWORK_DECISION_OFF";
		case 1: "WPAD_NETWORK_DECISION_ON";
		case 2: "WPAD_NETWORK_DECISION_UNKNOWN";
		case 3: "WPAD_NETWORK_DECISION_UNKNOWN";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct WinINet_WININET_ROOT_HANDLE_CREATED = FormatString("Session handle %s created: UserAgent=%s, AccessType=%s, ProxyList=%s, ProxyBypassList=%s, Flags=%s", HINTERNET.ToString, UserAgent.ToString, AccessType.ToString, ProxyList.ToString, ProxyBypassList.ToString, Flags.ToString)
{
	EtlPtr HINTERNET;
	UINT16 _UserAgentLength;
	AsciiString(_UserAgentLength) UserAgent;
	UINT16 _AccessTypeLength;
	AsciiString(_AccessTypeLength) AccessType;
	UINT16 _ProxyListLength;
	AsciiString(_ProxyListLength) ProxyList;
	UINT16 _ProxyBypassListLength;
	AsciiString(_ProxyBypassListLength) ProxyBypassList;
	UINT32 Flags;
}
Struct WinINet_WININET_OPEN_URL_HANDLE_CREATED = FormatString("Handle %s created by InternetOpenURL: SessionHandle=%s,URL=%s, Headers=%s, Flags=%s", ConnectionHandle.ToString, ParentHandle.ToString, URL.ToString, Headers.ToString, Flags.ToString)
{
	EtlPtr ConnectionHandle;
	EtlPtr ParentHandle;
	UINT16 _URLLength;
	AsciiString(_URLLength) URL;
	UINT16 _HeadersLength;
	AsciiString(_HeadersLength) Headers;
	UINT32 Flags;
}
Struct WinINet_WININET_CONNECT_HANDLE_CREATED = FormatString("Handle %s created by InternetConnect: SessionHandle=%s, Server=%s:%s, %s, Flags=%s", ConnectionHandle.ToString, ParentHandle.ToString, ServerName.ToString, ServerPort.ToString, Service.ToString, Flags.ToString)
{
	EtlPtr ConnectionHandle;
	EtlPtr ParentHandle;
	UINT16 _ServerNameLength;
	AsciiString(_ServerNameLength) ServerName;
	UINT32 ServerPort;
	UINT16 _ServiceLength;
	AsciiString(_ServiceLength) Service;
	UINT32 Flags;
}
Struct WinINet_WININET_HTTP_REQUEST_HANDLE_CREATED = FormatString("Request handle %s created by HttpOpenRequest: ConnectionHandle=%s, %s, Target=%s, Ver=%s, Referrer=%s, Media types=%s, Flags=%s", ConnectionHandle.ToString, ParentHandle.ToString, Verb.ToString, ObjectName.ToString, Version.ToString, Referrer.ToString, AcceptTypes.ToString, Flags.ToString)
{
	EtlPtr ConnectionHandle;
	EtlPtr ParentHandle;
	UINT16 _VerbLength;
	AsciiString(_VerbLength) Verb;
	UINT16 _ObjectNameLength;
	AsciiString(_ObjectNameLength) ObjectName;
	UINT16 _VersionLength;
	AsciiString(_VersionLength) Version;
	UINT32 _ReferrerLength;
	AsciiString(_ReferrerLength) Referrer;
	UINT16 _AcceptTypesLength;
	AsciiString(_AcceptTypesLength) AcceptTypes;
	UINT32 Flags;
}
Struct WinINet_WININET_HANDLE_CLOSED = FormatString("Handle %s closed successfully", HINTERNET.ToString)
{
	EtlPtr HINTERNET;
}
Struct WinINet_WININET_HANDLE_CREATE_FAILED = FormatString("Failed to create handle: ParentHandle=%s, Error=%s", HINTERNET.ToString, Error.ToString)
{
	EtlPtr HINTERNET;
	UINT32 Error;
}
Struct WinINet_WININET_HANDLE_CLOSE_FAILED = FormatString("Handle %s failed to close: Error=%s", HINTERNET.ToString, Error.ToString)
{
	EtlPtr HINTERNET;
	UINT32 Error;
}
Struct WinINet_WININET_HTTP_REQUEST_HANDLE_CREATED_SERVER_DETAILS = FormatString("Request handle %s Server Details: Server=%s Port=%s Service=%s", ConnectionHandle.ToString, ServerName.ToString, ServerPort.ToString, Service.ToString)
{
	EtlPtr ConnectionHandle;
	UINT16 _ServerNameLength;
	AsciiString(_ServerNameLength) ServerName;
	UINT32 ServerPort;
	UINT16 _ServiceLength;
	AsciiString(_ServiceLength) Service;
}
Struct WinINet_WININET_HTTP_REQUEST_API_CALL = FormatString("HTTP request was received from API: RequestHandle=%s", HINTERNET.ToString)
{
	EtlPtr HINTERNET;
}
Struct WinINet_WININET_HTTP_REQUEST_SENT = FormatString("HTTP request was sent successfully: RequestHandle=%s, SocketHandle=%s, %s, CookieSent= %s", RequestHandle.ToString, SocketHandle.ToString, Verb.ToString, Cookie.ToString)
{
	EtlPtr RequestHandle;
	EtlPtr SocketHandle;
	UINT16 _VerbLength;
	AsciiString(_VerbLength) Verb;
	BOOL Cookie;
}
Struct WinINet_WININET_HTTP_REQUEST_FAILED = FormatString("HTTP request send failed: Handle=%s, Error=%s", Handle.ToString, Error.ToString)
{
	EtlPtr Handle;
	UINT32 Error;
}
Struct WinINet_WININET_HTTP_RESPONSE_RECEIVED = FormatString("HTTP response (%s) received: RequestHandle=%s, SocketHandle=%s, %s, ContentLength=%s", ResponseCode.ToString, RequestHandle.ToString, SocketHandle.ToString, Verb.ToString, ContentLength.ToString)
{
	INT32 ResponseCode;
	EtlPtr RequestHandle;
	EtlPtr SocketHandle;
	UINT16 _VerbLength;
	AsciiString(_VerbLength) Verb;
	UINT16 _ContentLengthStrLength;
	AsciiString(_ContentLengthStrLength) ContentLength;
}
Struct WinINet_WININET_HTTP_RESPONSE_FAILED = FormatString("HTTP response failed: Handle=%s, Error=%s", Handle.ToString, Error.ToString)
{
	EtlPtr Handle;
	UINT32 Error;
}
Struct WinINet_WININET_HTTP_CONNECTION_CLOSED = FormatString("HTTP connection (Handle=%s, SocketHandle=%s) closed due to the following reason: %s", ConnectionHandle.ToString, SocketHandle.ToString, Reason.ToString)
{
	EtlPtr ConnectionHandle;
	EtlPtr SocketHandle;
	UINT16 _ReasonLength;
	AsciiString(_ReasonLength) Reason;
}
Struct WinINet_WININET_KEEP_ALIVE_CONNECTION_REUSED = FormatString("Keep-alive connection is re-used: ConnectionHandle=%s, SocketHandle=%s", ConnectionHandle.ToString, SocketHandle.ToString)
{
	EtlPtr ConnectionHandle;
	EtlPtr SocketHandle;
}
Struct WinINet_WININET_KEEP_ALIVE_CONNECTION_POOLED = FormatString("Connection is returned to keep-alive pool: RequestHandle=%s, SocketHandle=%s", ConnectionHandle.ToString, SocketHandle.ToString)
{
	EtlPtr ConnectionHandle;
	EtlPtr SocketHandle;
}
Struct WinINet_WININET_KEEP_ALIVE_CONNECTION_CLOSED = FormatString("Keep-alive connection is closed: ConnectionHandle=%s, SocketHandle=%s", ConnectionHandle.ToString, SocketHandle.ToString)
{
	EtlPtr ConnectionHandle;
	EtlPtr SocketHandle;
}
Struct WinINet_WININET_HTTP_RESPONSE_BODY_RECEIVED = FormatString("HTTP response entity body received: RequestHandle=%s", RequestHandle.ToString)
{
	EtlPtr RequestHandle;
}
Struct WinINet_WININET_HTTP_REQUEST_HEADERS = FormatString("HTTP Request Headers RequestHandle=%s %s", RequestHandle.ToString, Headers.ToString)
{
	EtlPtr RequestHandle;
	UINT16 Length;
	AsciiString(Length) Headers;
}
Struct WinINet_WININET_HTTP_RESPONSE_HEADERS = FormatString("HTTP Response Headers RequestHandle=%s %s", RequestHandle.ToString, Headers.ToString)
{
	EtlPtr RequestHandle;
	UINT16 Length;
	AsciiString(Length) Headers;
}
Struct WinINet_WININET_TCP_CONNECTION_ESTABLISHED = FormatString("TCP connection to server %s established: ConnectionHandle=%s, SocketHandle=%s, LocalPort=%s", ServerName.ToString, ConnectionHandle.ToString, SocketHandle.ToString, LocalPort.ToString)
{
	UINT16 _ServerNameLength;
	AsciiString(_ServerNameLength) ServerName;
	EtlPtr ConnectionHandle;
	EtlPtr SocketHandle;
	UINT32 LocalPort;
}
Struct WinINet_WININET_TCP_CONNECTION_FAILED = FormatString("TCP connection to %s for connection handle %s failed: Error=%s", ServerName.ToString, ConnectionHandle.ToString, Error.ToString)
{
	UINT16 _ServerNameLength;
	AsciiString(_ServerNameLength) ServerName;
	EtlPtr ConnectionHandle;
	UINT32 Error;
}
Struct WinINet_WININET_TCP_CONNECTION_CLOSED = FormatString("TCP connection closed successfully: SocketHandle=%s", SocketHandle.ToString)
{
	EtlPtr SocketHandle;
}
Struct WinINet_WININET_DNS_QUERY_SENT = FormatString("DNS query for %s hostname is sent: Handle=%s", HostName.ToString, RequestHandle.ToString)
{
	UINT16 _HostNameLength;
	AsciiString(_HostNameLength) HostName;
	EtlPtr RequestHandle;
}
Struct WinINet_WININET_DNS_QUERY_COMPLETE = FormatString("DNS query for %s hostname is complete: Handle=%s, Addresses=%s", HostName.ToString, RequestHandle.ToString, AddressList.ToString)
{
	UINT16 _HostNameLength;
	AsciiString(_HostNameLength) HostName;
	EtlPtr RequestHandle;
	UINT16 _AddressListLength;
	AsciiString(_AddressListLength) AddressList;
}
Struct WinINet_WININET_DNS_QUERY_FAILED = FormatString("DNS query for %s hostname failed: Handle=%s Error=%s", HostName.ToString, RequestHandle.ToString, Error.ToString)
{
	UINT16 _HostNameLength;
	AsciiString(_HostNameLength) HostName;
	EtlPtr RequestHandle;
	UINT32 Error;
}
Struct WinINet_WININET_DNS_CACHE_QUERY_COMPLETE = FormatString("Re-used DNS cache, query for %s hostname is complete: Handle=%s, Addresses=%s", HostName.ToString, RequestHandle.ToString, AddressList.ToString)
{
	UINT16 _HostNameLength;
	AsciiString(_HostNameLength) HostName;
	EtlPtr RequestHandle;
	UINT16 _AddressListLength;
	AsciiString(_AddressListLength) AddressList;
}
Struct WinINet_WININET_NETWORK_CHANGE_DETECTED = FormatString("A network change was detected: Handle=%s", Handle.ToString)
{
	EtlPtr Handle;
}
Struct WinINet_WININET_COOKIE_HEADER_RECEIVED = FormatString("Received response including a cookie header: URL=%s", URL.ToString)
{
	UINT32 URLLength;
	AsciiString(URLLength) URL;
}
Struct WinINet_WININET_COOKIE_STORED = FormatString("Client has stored a cookie in the cookie jar: Domain=%s, Path=%s, Name=%s, Value=%s", Domain.ToString, Path.ToString, Name.ToString, Value.ToString)
{
	UINT16 _DomainLength;
	AsciiString(_DomainLength) Domain;
	UINT16 _PathLength;
	AsciiString(_PathLength) Path;
	UINT16 _NameLength;
	AsciiString(_NameLength) Name;
	UINT16 _ValueLength;
	AsciiString(_ValueLength) Value;
}
Struct WinINet_WININET_COOKIE_DELETED = FormatString("Client has deleted a cookie in the cookie jar: Domain=%s, Path=%s, Name=%s, Value=%s", Domain.ToString, Path.ToString, Name.ToString, Value.ToString)
{
	UINT16 _DomainLength;
	AsciiString(_DomainLength) Domain;
	UINT16 _PathLength;
	AsciiString(_PathLength) Path;
	UINT16 _NameLength;
	AsciiString(_NameLength) Name;
	UINT16 _ValueLength;
	AsciiString(_ValueLength) Value;
}
Struct WinINet_WININET_COOKIE_BLOCKED = FormatString("Client has rejected a cookie sent by the server: Domain=%s, Path=%s, Name=%s, Value=%s", Domain.ToString, Path.ToString, Name.ToString, Value.ToString)
{
	UINT16 _DomainLength;
	AsciiString(_DomainLength) Domain;
	UINT16 _PathLength;
	AsciiString(_PathLength) Path;
	UINT16 _NameLength;
	AsciiString(_NameLength) Name;
	UINT16 _ValueLength;
	AsciiString(_ValueLength) Value;
}
Struct WinINet_WININET_COOKIE_P3P_REJECTED = FormatString("Server cookie was rejected by the client's P3P policy: Domain=%s, Path=%s, Name=%s, Value=%s", Domain.ToString, Path.ToString, Name.ToString, Value.ToString)
{
	UINT16 _DomainLength;
	AsciiString(_DomainLength) Domain;
	UINT16 _PathLength;
	AsciiString(_PathLength) Path;
	UINT16 _NameLength;
	AsciiString(_NameLength) Name;
	UINT16 _ValueLength;
	AsciiString(_ValueLength) Value;
}
Struct WinINet_WININET_COOKIE_REQUEST_HEADER_CREATED = FormatString("A cookie header was created for the request: URL=%s", URL.ToString)
{
	UINT32 URLLength;
	AsciiString(URLLength) URL;
}
Struct WinINet_WININET_COOKIE_ADDED_TO_HEADER = FormatString("Cookie added to the request header: Domain=%s, Path=%s, Name=%s, Value=%s", Domain.ToString, Path.ToString, Name.ToString, Value.ToString)
{
	UINT16 _DomainLength;
	AsciiString(_DomainLength) Domain;
	UINT16 _PathLength;
	AsciiString(_PathLength) Path;
	UINT16 _NameLength;
	AsciiString(_NameLength) Name;
	UINT16 _ValueLength;
	AsciiString(_ValueLength) Value;
}
Struct WinINet_WININET_AUTH_RESPONSE_RECEIVED = FormatString("Auth response received: RequestHandle=%s, Scheme=%s, IsProxy=%s", RequestHandle.ToString, Scheme.ToString, IsProxy.ToString)
{
	EtlPtr RequestHandle;
	UINT16 _SchemeLength;
	AsciiString(_SchemeLength) Scheme;
	BOOL IsProxy;
}
Struct WinINet_WININET_AUTH_CLIENT_SETS_USERNAME = FormatString("Client sets username: RequestHandle=%s, IsProxy=%s", RequestHandle.ToString, IsProxy.ToString)
{
	EtlPtr RequestHandle;
	BOOL IsProxy;
}
Struct WinINet_WININET_AUTH_CLIENT_SETS_PASSWORD = FormatString("Client sets password: RequestHandle=%s, IsProxy=%s", RequestHandle.ToString, IsProxy.ToString)
{
	EtlPtr RequestHandle;
	BOOL IsProxy;
}
Struct WinINet_WININET_AUTH_USING_CACHED_CREDS = FormatString("Using cached credentials: RequestHandle=%s, IsProxy=%s", RequestHandle.ToString, IsProxy.ToString)
{
	EtlPtr RequestHandle;
	BOOL IsProxy;
}
Struct WinINet_WININET_AUTH_USING_DEFAULT_CREDS = FormatString("Using default credentials: RequestHandle=%s, IsProxy=%s", RequestHandle.ToString, IsProxy.ToString)
{
	EtlPtr RequestHandle;
	BOOL IsProxy;
}
Struct WinINet_WININET_AUTH_CLIENT_ADD_HEADERS = FormatString("Client adds authorization headers to an HTTP request: RequestHandle=%s, Scheme=%s, IsProxy=%s", RequestHandle.ToString, Scheme.ToString, IsProxy.ToString)
{
	EtlPtr RequestHandle;
	UINT16 _SchemeLength;
	AsciiString(_SchemeLength) Scheme;
	BOOL IsProxy;
}
Struct WinINet_WININET_HTTPS_NEGOTIATION_STARTED = FormatString("Client begins SSL negotiation: RequestHandle=%s", RequestHandle.ToString)
{
	EtlPtr RequestHandle;
}
Struct WinINet_WININET_HTTPS_NEGOTIATION_COMPLETED = FormatString("SSL negotiation between client and server has completed successfully: RequestHandle=%s", RequestHandle.ToString)
{
	EtlPtr RequestHandle;
}
Struct WinINet_WININET_HTTPS_NEGOTIATION_FAILED = FormatString("SSL negotiation failed: RequestHandle=%s, Error=%s", RequestHandle.ToString, Error.ToString)
{
	EtlPtr RequestHandle;
	UINT32 Error;
}
Struct WinINet_WININET_HTTPS_SERVER_CERT_ERROR = FormatString("Error validating server certificate (SCHANNEL error): RequestHandle=%s, Error=%s", RequestHandle.ToString, Error.ToString)
{
	EtlPtr RequestHandle;
	UINT32 Error;
}
Struct WinINet_WININET_HTTPS_SERVER_CERT_VALIDATED = FormatString("Server certificate validated: RequestHandle=%s, CertHash=%s, WarningFlags=%s", RequestHandle.ToString, CertHash.ToString, WarningFlags.ToString)
{
	EtlPtr RequestHandle;
	UINT16 _CertHashLength;
	AsciiString(_CertHashLength) CertHash;
	UINT32 WarningFlags;
}
Struct WinINet_WININET_HTTPS_CLIENT_CERT_REQUIRED = FormatString("Server requires a client certificate for client authorization: RequestHandle=%s", RequestHandle.ToString)
{
	EtlPtr RequestHandle;
}
Struct WinINet_WININET_HTTPS_CLIENT_CERT_UNAVAILABLE = FormatString("There is no client certificate available: RequestHandle=%s", RequestHandle.ToString)
{
	EtlPtr RequestHandle;
	UINT32 Error;
}
Struct WinINet_WININET_HTTPS_CLIENT_CERT_SELECTED = FormatString("The selected client certificate will be used for the SSL transaction: RequestHandle=%s, CertHash=%s", RequestHandle.ToString, CertHash.ToString)
{
	EtlPtr RequestHandle;
	UINT16 _CertHashLength;
	AsciiString(_CertHashLength) CertHash;
}
Struct WinINet_WININET_HTTPS_RENEGOTIATION_STARTED = FormatString("Client begins SSL renegotiation: RequestHandle=%s", RequestHandle.ToString)
{
	EtlPtr RequestHandle;
}
Struct WinINet_WININET_HTTPS_RENEGOTIATION_COMPLETED = FormatString("SSL renegotiation between client and server has completed successfully: RequestHandle=%s", RequestHandle.ToString)
{
	EtlPtr RequestHandle;
}
Struct WinINet_WININET_HTTPS_RENEGOTIATION_FAILED = FormatString("SSL renegotiation failed: RequestHandle=%s, Error=%s", RequestHandle.ToString, Error.ToString)
{
	EtlPtr RequestHandle;
	UINT32 Error;
}
Struct WinINet_WININET_AUTOPROXY_SEARCH_START = FormatString("Client begins attempts to locate the WPAD configuration file: ConnectionName=%s, DetectFlags=%s", ConnectionName.ToString, DetectFlags.ToString)
{
	UINT16 _ConnectionNameLength;
	AsciiString(_ConnectionNameLength) ConnectionName;
	UINT32 DetectFlags;
}
Struct WinINet_WININET_AUTOPROXY_DHCP_SEARCH_START = FormatString("Begin search for configuration file using DHCP: Interface=%s", Interface.ToString)
{
	UINT16 _InterfaceLength;
	AsciiString(_InterfaceLength) Interface;
}
Struct WinINet_WININET_AUTOPROXY_DHCP_SEARCH_COMPLETE = FormatString("WPAD configuration file found using DHCP: Interface=%s, ConfigurationURL=%s", Interface.ToString, ConfigurationURL.ToString)
{
	UINT16 _InterfaceLength;
	AsciiString(_InterfaceLength) Interface;
	UINT16 _ConfigurationURLLength;
	AsciiString(_ConfigurationURLLength) ConfigurationURL;
}
Struct WinINet_WININET_AUTOPROXY_DHCP_SEARCH_FAILED = FormatString("Search for WPAD configuration file using DHCP failed: Interface=%s, ConfigurationURL=%s, Error=%s", Interface.ToString, ConfigurationURL.ToString, Error.ToString)
{
	UINT16 _InterfaceLength;
	AsciiString(_InterfaceLength) Interface;
	UINT16 _ConfigurationURLLength;
	AsciiString(_ConfigurationURLLength) ConfigurationURL;
	UINT32 Error;
}
Struct WinINet_WININET_AUTOPROXY_DNS_SEARCH_START = FormatString("Begin search for configuration file using DNS: DetectFlags=%s", DetectFlags.ToString)
{
	UINT32 DetectFlags;
}
Struct WinINet_WININET_AUTOPROXY_DNS_SEARCH_COMPLETE = FormatString("WPAD configuration file found using DNS: ConfigurationURL=%s, DetectFlags=%s", ConfigurationURL.ToString, DetectFlags.ToString)
{
	UINT16 _ConfigurationURLLength;
	AsciiString(_ConfigurationURLLength) ConfigurationURL;
	UINT32 DetectFlags;
}
Struct WinINet_WININET_AUTOPROXY_DNS_SEARCH_FAILED = FormatString("Search for WPAD configuration file using DNS failed: DetectFlags=%s, Error=%s", DetectFlags.ToString, Error.ToString)
{
	UINT32 DetectFlags;
	UINT32 Error;
}
Struct WinINet_WININET_AUTOPROXY_SEARCH_FAILED = FormatString("Search for WPAD configruation file failed: Error=%s", Error.ToString)
{
	UINT32 Error;
}
Struct WinINet_WININET_AUTOPROXY_DOWNLOAD_START = FormatString("Begin downloading the configuration file from the configuration URL: ConfigurationURL=%s", ConfigurationURL.ToString)
{
	UINT16 _ConfigurationURLLength;
	AsciiString(_ConfigurationURLLength) ConfigurationURL;
}
Struct WinINet_WININET_AUTOPROXY_DOWNLOAD_COMPLETE = FormatString("Client successfully downloaded the configuration file from the configuration URL: ConfigurationURL=%s", ConfigurationURL.ToString)
{
	UINT16 _ConfigurationURLLength;
	AsciiString(_ConfigurationURLLength) ConfigurationURL;
}
Struct WinINet_WININET_AUTOPROXY_DOWNLOAD_FAILED = FormatString("Downloading the configuration file from the configuration URL failed: ConfigurationURL=%s, Error=%s", ConfigurationURL.ToString, Error.ToString)
{
	UINT16 _ConfigurationURLLength;
	AsciiString(_ConfigurationURLLength) ConfigurationURL;
	UINT32 Error;
}
Struct WinINet_WININET_AUTOPROXY_DOWNLOAD_UNACCEPTABLE = FormatString("The downloaded configuration file could not be used: ConfigurationURL=%s, MIMEType=%s, Error=%s", ConfigurationURL.ToString, MIMEType.ToString, Error.ToString)
{
	UINT16 _ConfigurationURLLength;
	AsciiString(_ConfigurationURLLength) ConfigurationURL;
	UINT16 _MIMETypeLength;
	AsciiString(_MIMETypeLength) MIMEType;
	UINT32 Error;
}
Struct WinINet_WININET_AUTOPROXY_FIND_INFO_FOR_URL = FormatString("Searching for Proxy Information for the URL: URL=%s", URL.ToString)
{
	UINT16 _URLLength;
	AsciiString(_URLLength) URL;
}
Struct WinINet_WININET_AUTOPROXY_FIND_INFO_FOR_URL_COMPLETE = FormatString("Client has successfully retrieved proxy data for accessing a specified resource: URL=%s, ProxyString=%s", URL.ToString, ProxyString.ToString)
{
	UINT16 _URLLength;
	AsciiString(_URLLength) URL;
	UINT16 _ProxyStringLength;
	AsciiString(_ProxyStringLength) ProxyString;
}
Struct WinINet_WININET_AUTOPROXY_FIND_INFO_FOR_FAILED = FormatString("Error locating proxy information for the URL: URL=%s, Error=%s", URL.ToString, Error.ToString)
{
	UINT16 _URLLength;
	AsciiString(_URLLength) URL;
	UINT32 Error;
}
Struct WinINet_WININET_BLOCKING_AUTOPROXY_DETERMINATION_START = "Blocking autoproxy determination started" {}; // Empty Struct
Struct WinINet_WININET_BLOCKING_AUTOPROXY_DETERMINATION_STOP = "Blocking autoproxy determination stopped" {}; // Empty Struct
Struct WinINet_WININET_TRANSFER = "WinInet Activity Transfer Event" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_SWPAD = FormatString("AutoProxy SWPAD Decision (%s) NumConnections (%s)", WPADNetworkDecision.ToString, NetworkCount.ToString)
{
	UINT32 WPADNetworkDecision = WinINet_mapWPADNetworkDecision(this);
	UINT32 NetworkCount;
}
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_HOST_IP_LOOKUP_START = "Autoproxy host IP lookup started" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_HOST_IP_LOOKUP_STOP = "Autoproxy host IP lookup stopped" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_SWPAD_LOOKUP_START = "Autoproxy SWPAD lookup started" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_SWPAD_LOOKUP_STOP = "Autoproxy SWPAD lookup stopped" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_KNOWN_DETECTION_START = "Autoproxy Detection with SWPAD ON started" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_KNOWN_DETECTION_STOP = "Autoproxy Detection with SWPAD ON stopped" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_UNKNOWN_DETECTION_START = "Autoproxy Detection with SWPAD UNKNOWN started" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_UNKNOWN_DETECTION_STOP = "Autoproxy Detection with SWPAD UNKNOWN stopped" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_SCRIPT_DOWNLOAD_START = "Autoproxy Script Download Started" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_SCRIPT_DOWNLOAD_STOP = "Autoproxy Script Download Stopped" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_ALL_START = "Autoproxy full scenario started" {}; // Empty Struct
Struct WinINet_WININET_AUTOPROXY_PERFTRACK_ALL_STOP = "Autoproxy full scenario stopped" {}; // Empty Struct
Struct WinINet_WININET_TEST_EVENT = FormatString("WININET_TEST_EVENT - _TestStr0Length : %s, TestStr0 : %s, _TestStr1Length : %s, TestStr1 : %s, _TestStr2Length : %s, TestStr2 : %s, _TestStr0WLength : %s, TestStr0W : %s, _TestStr1WLength : %s, TestStr1W : %s, _TestStr2WLength : %s, TestStr2W : %s, TestStrLength : %s, TestStr : %s, TestStrWLength : %s, TestStrW : %s", _TestStr0Length.ToString, TestStr0.ToString, _TestStr1Length.ToString, TestStr1.ToString, _TestStr2Length.ToString, TestStr2.ToString, _TestStr0WLength.ToString, TestStr0W.ToString, _TestStr1WLength.ToString, TestStr1W.ToString, _TestStr2WLength.ToString, TestStr2W.ToString, TestStrLength.ToString, TestStr.ToString, TestStrWLength.ToString, TestStrW.ToString)
{
	UINT8 _TestStr0Length;
	AsciiString(_TestStr0Length) TestStr0;
	UINT16 _TestStr1Length;
	AsciiString(_TestStr1Length) TestStr1;
	UINT32 _TestStr2Length;
	AsciiString(_TestStr2Length) TestStr2;
	UINT8 _TestStr0WLength;
	UnicodeString(_TestStr0WLength) TestStr0W;
	UINT16 _TestStr1WLength;
	UnicodeString(_TestStr1WLength) TestStr1W;
	UINT32 _TestStr2WLength;
	UnicodeString(_TestStr2WLength) TestStr2W;
	UINT16 TestStrLength;
	AsciiString(TestStrLength) TestStr;
	UINT16 TestStrWLength;
	UnicodeString(TestStrWLength) TestStrW;
}
Struct WinINet_WININET_SENDREQUEST_START = FormatString("WININET_SENDREQUEST_START - Request : %s, AddressName : %s", Request.ToString, AddressName.ToString)
{
	EtlPtr Request;
	AsciiString AddressName;
}
Struct WinINet_WININET_SENDREQUEST_STOP = FormatString("WININET_SENDREQUEST_STOP - Request : %s, StatusLineLength : %s, StatusLine : %s", Request.ToString, StatusLineLength.ToString, StatusLine.ToString)
{
	EtlPtr Request;
	UINT32 StatusLineLength;
	AsciiString(StatusLineLength) StatusLine;
}
Struct WinINet_WININET_OFFLINECACHELOOKUP_INFO = FormatString("WININET_OFFLINECACHELOOKUP_INFO - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_OFFLINECACHEHIT_INFO = FormatString("WININET_OFFLINECACHEHIT_INFO - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_OFFLINECACHEMISS_INFO = FormatString("WININET_OFFLINECACHEMISS_INFO - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_PRENET_CACHELOOKUP_INFO = FormatString("WININET_PRENET_CACHELOOKUP_INFO - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_PRENET_CACHEHIT_INFO = FormatString("WININET_PRENET_CACHEHIT_INFO - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_PRENET_CACHEMISS_INFO = FormatString("WININET_PRENET_CACHEMISS_INFO - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_POSTNET_CACHELOOKUP_INFO = FormatString("WININET_POSTNET_CACHELOOKUP_INFO - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_POSTNET_CACHEHIT_INFO = FormatString("WININET_POSTNET_CACHEHIT_INFO - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_POSTNET_CACHEMISS_INFO = FormatString("WININET_POSTNET_CACHEMISS_INFO - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_AUTODIALIFNOTLOCALHOST_START = FormatString("WININET_AUTODIALIFNOTLOCALHOST_START - Request : %s, HostName : %s", Request.ToString, HostName.ToString)
{
	EtlPtr Request;
	AsciiString HostName;
}
Struct WinINet_WININET_AUTODIALIFNOTLOCALHOST_STOP = FormatString("WININET_AUTODIALIFNOTLOCALHOST_STOP - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_RESOLVEHOST_START = FormatString("WININET_RESOLVEHOST_START - Request : %s, HostName : %s", Request.ToString, HostName.ToString)
{
	EtlPtr Request;
	AsciiString HostName;
}
Struct WinINet_WININET_RESOLVEHOST_STOP = FormatString("WININET_RESOLVEHOST_STOP - Request : %s, HostName : %s", Request.ToString, HostName.ToString)
{
	EtlPtr Request;
	AsciiString HostName;
}
Struct WinINet_WININET_SENDREQUEST_MAIN_INFO = FormatString("WININET_SENDREQUEST_MAIN_INFO - Request : %s, Size : %s", Request.ToString, Size.ToString)
{
	EtlPtr Request;
	UINT32 Size;
}
Struct WinINet_WININET_SENDREQUEST_EXTRA_INFO = FormatString("WININET_SENDREQUEST_EXTRA_INFO - Request : %s, Size : %s", Request.ToString, Size.ToString)
{
	EtlPtr Request;
	UINT32 Size;
}
Struct WinINet_WININET_SENDREQUEST_CRLF_INFO = FormatString("WININET_SENDREQUEST_CRLF_INFO - Request : %s, Size : %s", Request.ToString, Size.ToString)
{
	EtlPtr Request;
	UINT32 Size;
}
Struct WinINet_WININET_READDATA_INFO = FormatString("WININET_READDATA_INFO - Request : %s, Size : %s", Request.ToString, Size.ToString)
{
	EtlPtr Request;
	UINT32 Size;
}
Struct WinINet_WININET_READDATAPOSTRECEIVEBUF_INFO = FormatString("WININET_READDATAPOSTRECEIVEBUF_INFO - Request : %s, Size : %s", Request.ToString, Size.ToString)
{
	EtlPtr Request;
	UINT32 Size;
}
Struct WinINet_WININET_SENDREQUEST_POSTRECEIVEBUF_INFO = FormatString("WININET_SENDREQUEST_POSTRECEIVEBUF_INFO - Request : %s, Size : %s", Request.ToString, Size.ToString)
{
	EtlPtr Request;
	UINT32 Size;
}
Struct WinINet_WININET_DRAINRESPONSEPOSTRECEIVEBUF_INFO = FormatString("WININET_DRAINRESPONSEPOSTRECEIVEBUF_INFO - Request : %s, Size : %s", Request.ToString, Size.ToString)
{
	EtlPtr Request;
	UINT32 Size;
}
Struct WinINet_WININET_CONNECT_START = FormatString("WININET_CONNECT_START - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_CONNECT_STOP = FormatString("WININET_CONNECT_STOP - Request : %s, Socket : %s", Request.ToString, Socket.ToString)
{
	EtlPtr Request;
	UINT32 Socket;
}
Struct WinINet_WININET_LOOKUPCONNECTION_START = FormatString("WININET_LOOKUPCONNECTION_START - Request : %s", Request.ToString)
{
	EtlPtr Request;
}
Struct WinINet_WININET_LOOKUPCONNECTION_STOP = FormatString("WININET_LOOKUPCONNECTION_STOP - Request : %s, Socket : %s", Request.ToString, Socket.ToString)
{
	EtlPtr Request;
	UINT32 Socket;
}
Struct WinINet_WININET_REDIRECT_INFO = FormatString("WININET_REDIRECT_INFO - Request : %s, AddressName : %s", Request.ToString, AddressName.ToString)
{
	EtlPtr Request;
	AsciiString AddressName;
}
Struct WinINet_WININET_GETADDRINFO_START = FormatString("WININET_GETADDRINFO_START - Flags : %s, AddressName : %s", Flags.ToString, AddressName.ToString)
{
	UINT32 Flags;
	AsciiString AddressName;
}
Struct WinINet_WININET_GETADDRINFO_STOP = FormatString("WININET_GETADDRINFO_STOP - error : %s, Flags : %s, AddressName : %s", error.ToString, Flags.ToString, AddressName.ToString)
{
	UINT32 error;
	UINT32 Flags;
	AsciiString AddressName;
}
Struct WinINet_WININET_DHCP_I252WPAD_START = FormatString("WININET_DHCP_I252WPAD_START - Order : %s, AddressName : %s", Order.ToString, AddressName.ToString)
{
	UINT32 Order;
	AsciiString AddressName;
}
Struct WinINet_WININET_DHCP_I252WPAD_STOP = FormatString("WININET_DHCP_I252WPAD_STOP - error : %s, AddressName : %s", error.ToString, AddressName.ToString)
{
	UINT32 error;
	AsciiString AddressName;
}
Struct WinINet_WININET_SELECT_START = FormatString("WININET_SELECT_START - Request : %s, Flags : %s", Request.ToString, Flags.ToString)
{
	EtlPtr Request;
	UINT32 Flags;
}
Struct WinINet_WININET_SELECT_STOP = FormatString("WININET_SELECT_STOP - Request : %s, Flags : %s", Request.ToString, Flags.ToString)
{
	EtlPtr Request;
	UINT32 Flags;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWinINet_Keyword, "{43D1A55C-76D6-4f7e-995C-64C711E5CAFE}")]
struct WinINet_MicrosoftWindowsWinINet_Keyword
{
	UINT64 Reserved1:41 = FormatString("                  (%s)", this.ToBitString);
	UINT64 WININET_KEYWORD_PII_PRESENT:1 = FormatString("(%s) %s", this.ToBitString, this? "WININET_KEYWORD_PII_PRESENT": "");
	UINT64 Reserved2:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 WININET_KEYWORD_HANDLES:1 = FormatString("    (%s) %s", this.ToBitString, this? "WININET_KEYWORD_HANDLES": "");
	UINT64 Reserved3:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 WININET_KEYWORD_HTTPS:1 = FormatString("      (%s) %s", this.ToBitString, this? "WININET_KEYWORD_HTTPS": "");
	UINT64 Reserved4:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 WININET_KEYWORD_HTTP:1 = FormatString("       (%s) %s", this.ToBitString, this? "WININET_KEYWORD_HTTP": "");
	UINT64 Reserved5:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 WININET_KEYWORD_AUTOPROXY:1 = FormatString("  (%s) %s", this.ToBitString, this? "WININET_KEYWORD_AUTOPROXY": "");
	UINT64 Reserved6:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 WININET_KEYWORD_CONNECTION:1 = FormatString(" (%s) %s", this.ToBitString, this? "WININET_KEYWORD_CONNECTION": "");
	UINT64 Reserved7:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 WININET_KEYWORD_COOKIES:1 = FormatString("    (%s) %s", this.ToBitString, this? "WININET_KEYWORD_COOKIES": "");
	UINT64 Reserved8:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 WININET_KEYWORD_AUTH:1 = FormatString("       (%s) %s", this.ToBitString, this? "WININET_KEYWORD_AUTH": "");
	UINT64 Reserved9:1 = FormatString("                  (%s)", this.ToBitString);
	UINT64 WININET_KEYWORD_IE:1 = FormatString("         (%s) %s", this.ToBitString, this? "WININET_KEYWORD_IE": "");
	UINT64 Reserved10:6 = FormatString("                 (%s)", this.ToBitString);
}
