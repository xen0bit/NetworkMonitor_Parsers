//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  COM+ Event System Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-COMEV]: Component Object Model Plus (COM+) Event System Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/21/2010
//#
//####

Protocol COMPES = FormatString( "%s %s%s%s%s%s", 
	Property.COMPESMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	(Property.MSRPCPfcFlags & 0x03) == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? ", *Un-Interpreted*": "",
	Property.COMPESSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.COMPESSummary : "" )
{
	[Property.COMPESSummary = ""]
	switch( Property.MSRPCIfUuid )
	{
	case "{F4A07D63-2E25-11D1-9964-00C04FBBB345}":
		[Property.COMPESMethodName = "IEnumEventObject:" + COMPESIEnumEventObjectMethodNameTable( Property.MSRPCOpnum )]
		_struct IEnumEventObject
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct Clone
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										DCOMMInterfacePointerPtr Interface;
										Align4 Pad;
										HRESULT ReturnValue;
									}
								}
						}
					}
				}
			case 4:
				_struct Next
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						[COMPESSummary = FormatString( "CReqElem=0x%X", CReqElem )]
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										UINT32 CReqElem;
									}
							}
						}
					case 0x02: //RESPONSE
						[COMPESSummary = FormatString( "CRetElem=0x%X", CRetElem )]
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										DCOMPMInterfacePointerArray Interface;
										Align4 Pad;
										UINT32 CRetElem;
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 5:
				_struct Reset
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 6:
				_struct Skip
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						[COMPESSummary = FormatString( "CSkipElem=0x%X", CSkipElem )]
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										UINT32 CSkipElem;
									}
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEnumEventObject method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{FB2B72A0-7A68-11D1-88F9-0080C7D771BF}":
		[Property.COMPESMethodName = "IEventClass:" + COMPESIEventClassMethodNameTable( Property.MSRPCOpnum )]
		_struct IEventClass
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct GetTypeInfoCount
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 pctInfo;
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 4:
				_struct GetTypeInfo
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 iTInfo;
											OLEAUTLCID Lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
											{
												NdrPtr pTInfo;
												switch
												{
													case pTInfo.ReferentID:
														DCOMMInterfacePointer TInfo;
												}
												[RAPRDecomResult = HResult.ToString]
												HRESULT HResult;
											}
								}
								
							}
					}
				}
			case 5:
				_struct GetIDsOfNames
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											OLEAUTRefIId riid;
											NdrConformant NamesCount;
											OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
											Align4 pad;
											UINT32 cNames;
											OLEAUTLCID lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrConformant prgDispId;
											OLEAUTDISPID rgDispId[prgDispId.MaxCount];
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 6:
				_struct Invoke
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
						_struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTDISPID dispIdMember;
										OLEAUTRefIId riid;
										OLEAUTLCID lcid;
										switch( Property.MSRPCByteOrder )
										{
											case LittleEndian:
												_struct LittleEndian
												{
													UINT32 dwFlags
													{
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
													}
												}
											default:
												_struct BigEndian
												{
													UINT32 dwFlags
													{
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
													}
												}
										}
										[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
										OLEAUTDISPPARAMS DispParams;
										UINT32 cVarRef;
										NdrConformant VarRefIdxConformant;
										UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
										OLEAUTSafeArrVariant VarRef;
									}
							}
							
						}
						case 0x02:
						_struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTVariant VarResult;
										NdrAlign pad;
										OLEAUTExcepInfo ExcepInfo;
										UINT32 Argerr;
										OLEAUTSafeArrVariant rgVarRef;
										Align4 padding;
										[RAPRDecomResult = HResult.ToString]
										HRESULT HResult;
									}
							}
						}
					}
				}
			case 7:
				COMPESIEventClassGetEventClassID GetEventClassID;
			case 8:
				COMPESIEventClassPutEventClassID PutEventClassID;
			case 9:
				COMPESIEventClassGetEventClassName GetEventClassName;
			case 10:
				COMPESIEventClassPutEventClassName PutEventClassName;
			case 11:
				COMPESIEventClassGetOwnerSID GetOwnerSID;
			case 12:
				COMPESIEventClassPutOwnerSID PutOwnerSID;
			case 13:
				COMPESIEventClassGetFiringInterfaceID GetFiringInterfaceID;
			case 14:
				COMPESIEventClassPutFiringInterfaceID PutFiringInterfaceID;
			case 15:
				COMPESIEventClassGetDescription GetDescription;
			case 16:
				COMPESIEventClassPutDescription PutDescription;
			case 19:
				COMPESIEventClassGetTypeLib GetTypeLib;
			case 20:
				COMPESIEventClassPutTypeLib PutTypeLib;
			case 17:
			case 18:
				struct NotUsedOnWire
				{
					switch (property.MSRPCPType)
					{
						case 0x00: // REQUEST
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						struct Request 
						{
							ReportParserWarning("COMPES", "Invalid compes method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
						case 0x02: // RESPONSE
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						struct Response
						{
							ReportParserWarning("COMPES", "Invalid compes method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
					}
				};
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEventClass method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{FB2B72A1-7A68-11D1-88F9-0080C7D771BF}":
		[Property.COMPESMethodName = "IEventClass2::" + COMPESIEventClass2MethodNameTable( Property.MSRPCOpnum )]
		_struct IEventClass2
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct GetTypeInfoCount
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 pctInfo;
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 4:
				_struct GetTypeInfo
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch 
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 iTInfo;
											OLEAUTLCID Lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrPtr pTInfo;
											switch
											{
												case pTInfo.ReferentID:
													DCOMMInterfacePointer TInfo;
											}
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 5:
				_struct GetIDsOfNames
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											OLEAUTRefIId riid;
											NdrConformant NamesCount;
											OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
											Align4 pad;
											UINT32 cNames;
											OLEAUTLCID lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrConformant prgDispId;
											OLEAUTDISPID rgDispId[prgDispId.MaxCount];
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 6:
				_struct Invoke
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
						_struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTDISPID dispIdMember;
										OLEAUTRefIId riid;
										OLEAUTLCID lcid;
										switch( Property.MSRPCByteOrder )
										{
											case LittleEndian:
												_struct LittleEndian
												{
													UINT32 dwFlags
													{
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
													}
												}
											default:
												_struct BigEndian
												{
													UINT32 dwFlags
													{
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
													}
												}
										}
										[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
										OLEAUTDISPPARAMS DispParams;
										UINT32 cVarRef;
										NdrConformant VarRefIdxConformant;
										UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
										OLEAUTSafeArrVariant VarRef;
									}
							}
						}
						case 0x02:
						_struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTVariant VarResult;
										NdrAlign pad;
										OLEAUTExcepInfo ExcepInfo;
										UINT32 Argerr;
										OLEAUTSafeArrVariant rgVarRef;
										Align4 padding;
										[RAPRDecomResult = HResult.ToString]
										HRESULT HResult;
									}
							}
						}
					}
				}
			case 7:
				COMPESIEventClassGetEventClassID GetEventClassID;
			case 8:
				COMPESIEventClassPutEventClassID PutEventClassID;
			case 9:
				COMPESIEventClassGetEventClassName GetEventClassName;
			case 10:
				COMPESIEventClassPutEventClassName PutEventClassName;
			case 11:
				COMPESIEventClassGetOwnerSID GetOwnerSID;
			case 12:
				COMPESIEventClassPutOwnerSID PutOwnerSID;
			case 13:
				COMPESIEventClassGetFiringInterfaceID GetFiringInterfaceID;
			case 14:
				COMPESIEventClassPutFiringInterfaceID PutFiringInterfaceID;
			case 15:
				COMPESIEventClassGetDescription GetDescription;
			case 16:
				COMPESIEventClassPutDescription PutDescription;
			case 19:
				COMPESIEventClassGetTypeLib GetTypeLib;
			case 20:
				COMPESIEventClassPutTypeLib PutTypeLib;
			case 21:
				COMPESIEventClassGetPublisherID GetPublisherID;
			case 22:
				COMPESIEventClassPutPublisherID PutPublisherID;
			case 23:
				COMPESIEventClassGetMultiInterfacePublisherFilterCLSID GetMultiInterfacePublisherFilterCLSID;
			case 24:
				COMPESIEventClassPutMultiInterfacePublisherFilterCLSID PutMultiInterfacePublisherFilterCLSID;
			case 25:
				COMPESIEventClassGetAllowInprocActivation GetAllowInprocActivation;
			case 26:
				COMPESIEventClassPutAllowInprocActivation PutAllowInprocActivation;
			case 27:
				COMPESIEventClassGetFireInParallel GetFireInParallel;
			case 28:
				COMPESIEventClassPutFireInParallel PutFireInParallel;
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEventClass2 method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{7FB7EA43-2D76-4EA8-8CD9-3DECC270295E}":
		[Property.COMPESMethodName = "IEventClass3::" + COMPESIEventClass3MethodNameTable( Property.MSRPCOpnum )]
		_struct IEventClass3
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct GetTypeInfoCount
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 pctInfo;
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 4:
				_struct GetTypeInfo
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 iTInfo;
											OLEAUTLCID Lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrPtr pTInfo;
											switch
											{
												case pTInfo.ReferentID:
													DCOMMInterfacePointer TInfo;
											}
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 5:
				_struct GetIDsOfNames
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											OLEAUTRefIId riid;
											NdrConformant NamesCount;
											OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
											Align4 pad;
											UINT32 cNames;
											OLEAUTLCID lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrConformant prgDispId;
											OLEAUTDISPID rgDispId[prgDispId.MaxCount];
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 6:
				_struct Invoke
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
						_struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTDISPID dispIdMember;
										OLEAUTRefIId riid;
										OLEAUTLCID lcid;
										switch( Property.MSRPCByteOrder )
										{
											case LittleEndian:
												_struct LittleEndian
												{
													UINT32 dwFlags
													{
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
													}
												}
											default:
												_struct BigEndian
												{
													UINT32 dwFlags
													{
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
													}
												}
										}
										[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
										OLEAUTDISPPARAMS DispParams;
										UINT32 cVarRef;
										NdrConformant VarRefIdxConformant;
										UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
										OLEAUTSafeArrVariant VarRef;
									}
							}
						}
						case 0x02:
						_struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTVariant VarResult;
										NdrAlign pad;
										OLEAUTExcepInfo ExcepInfo;
										UINT32 Argerr;
										OLEAUTSafeArrVariant rgVarRef;
										Align4 padding;
										[RAPRDecomResult = HResult.ToString]
										HRESULT HResult;
									}
							}
						}
					}
				}
			case 7:
				COMPESIEventClassGetEventClassID GetEventClassID;
			case 8:
				COMPESIEventClassPutEventClassID PutEventClassID;
			case 9:
				COMPESIEventClassGetEventClassName GetEventClassName;
			case 10:
				COMPESIEventClassPutEventClassName PutEventClassName;
			case 11:
				COMPESIEventClassGetOwnerSID GetOwnerSID;
			case 12:
				COMPESIEventClassPutOwnerSID PutOwnerSID;
			case 13:
				COMPESIEventClassGetFiringInterfaceID GetFiringInterfaceID;
			case 14:
				COMPESIEventClassPutFiringInterfaceID PutFiringInterfaceID;
			case 15:
				COMPESIEventClassGetDescription GetDescription;
			case 16:
				COMPESIEventClassPutDescription PutDescription;
			case 19:
				COMPESIEventClassGetTypeLib GetTypeLib;
			case 20:
				COMPESIEventClassPutTypeLib PutTypeLib;
			case 21:
				COMPESIEventClassGetPublisherID GetPublisherID;
			case 22:
				COMPESIEventClassPutPublisherID PutPublisherID;
			case 23:
				COMPESIEventClassGetMultiInterfacePublisherFilterCLSID GetMultiInterfacePublisherFilterCLSID;
			case 24:
				COMPESIEventClassPutMultiInterfacePublisherFilterCLSID PutMultiInterfacePublisherFilterCLSID;
			case 25:
				COMPESIEventClassGetAllowInprocActivation GetAllowInprocActivation;
			case 26:
				COMPESIEventClassPutAllowInprocActivation PutAllowInprocActivation;
			case 27:
				COMPESIEventClassGetFireInParallel GetFireInParallel;
			case 28:
				COMPESIEventClassPutFireInParallel PutFireInParallel;
			case 29:
				_struct GetEventClassPartitionID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR PbstrEventClassPartitionID;
										Align4 Pad;
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 30:
				_struct PutEventClassPartitionID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR BstrEventClassPartitionID;
									}
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 31:
				_struct GetEventClassApplicationID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR PbstrEventClassApplicationID;
										Align4 Pad;
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 32:
				_struct PutEventClassApplicationID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR BstrEventClassApplicationID;
									}
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEventClass3 method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{F89AC270-D4EB-11D1-B682-00805FC79216}":
		[Property.COMPESMethodName = "IEventObjectCollection:" + COMPESIEventObjectCollectionMethodNameTable( Property.MSRPCOpnum )]
		_struct IEventObjectCollection
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct GetTypeInfoCount
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 pctInfo;
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 4:
				_struct GetTypeInfo
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 iTInfo;
											OLEAUTLCID Lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrPtr pTInfo;
											switch
											{
												case pTInfo.ReferentID:
													DCOMMInterfacePointer TInfo;
											}
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 5:
				_struct GetIDsOfNames
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											OLEAUTRefIId riid;
											NdrConformant NamesCount;
											OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
											Align4 pad;
											UINT32 cNames;
											OLEAUTLCID lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrConformant prgDispId;
											OLEAUTDISPID rgDispId[prgDispId.MaxCount];
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 6:
				_struct Invoke
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
						_struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTDISPID dispIdMember;
										OLEAUTRefIId riid;
										OLEAUTLCID lcid;
										switch( Property.MSRPCByteOrder )
										{
											case LittleEndian:
												_struct LittleEndian
												{
													UINT32 dwFlags
													{
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
													}
												}
											default:
												_struct BigEndian
												{
													UINT32 dwFlags
													{
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
													}
												}
										}
										[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
										OLEAUTDISPPARAMS DispParams;
										UINT32 cVarRef;
										NdrConformant VarRefIdxConformant;
										UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
										OLEAUTSafeArrVariant VarRef;
									}
							}
						}
						case 0x02:
						_struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTVariant VarResult;
										NdrAlign pad;
										OLEAUTExcepInfo ExcepInfo;
										UINT32 Argerr;
										OLEAUTSafeArrVariant rgVarRef;
										Align4 padding;
										[RAPRDecomResult = HResult.ToString]
										HRESULT HResult;
									}
							}
						}
					}
				}
			case 7:
				_struct Get_NewEnum
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										DCOMMInterfacePointerPtr UnkEnum;
										Align4 Pad;
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 8:
				_struct GetItem
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR ObjectID;
									}
								}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										OLEAUTVariant Item;
										Align4 Pad;
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 9:
				_struct GetNewEnum
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										DCOMMInterfacePointerPtr Enum;
										Align4 Pad;
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 10:
				_struct GetCount
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						[COMPESSummary = FormatString( "Count=0x%X", Count )]
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										INT32 Count;
										HRESULT ReturnValue;
									}
								}
						}
					}
				}
			case 11:
				_struct Add
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										OLEAUTVariant Item;
										BSTR ObjectID;
									}
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
								}
						}
					}
				}
			case 12:
				_struct Remove
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR ObjectID;
									}
								}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
								}
						}
					}
				}
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEventObjectCollection method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{4A6B0E15-2E38-11D1-9965-00C04FBBB345}":
		[Property.COMPESMethodName = "IEventSubscription:" + COMPESIEventSubscriptionMethodNameTable( Property.MSRPCOpnum )]
		_struct IEventSubscription
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct GetTypeInfoCount
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 pctInfo;
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 4:
				_struct GetTypeInfo
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 iTInfo;
											OLEAUTLCID Lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrPtr pTInfo;
											switch
											{
												case pTInfo.ReferentID:
													DCOMMInterfacePointer TInfo;
											}
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 5:
				_struct GetIDsOfNames
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											OLEAUTRefIId riid;
											NdrConformant NamesCount;
											OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
											Align4 pad;
											UINT32 cNames;
											OLEAUTLCID lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrConformant prgDispId;
											OLEAUTDISPID rgDispId[prgDispId.MaxCount];
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 6:
				_struct Invoke
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
						_struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTDISPID dispIdMember;
										OLEAUTRefIId riid;
										OLEAUTLCID lcid;
										switch( Property.MSRPCByteOrder )
										{
											case LittleEndian:
												_struct LittleEndian
												{
													UINT32 dwFlags
													{
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
													}
												}
											default:
												_struct BigEndian
												{
													UINT32 dwFlags
													{
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
													}
												}
										}
										[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
										OLEAUTDISPPARAMS DispParams;
										UINT32 cVarRef;
										NdrConformant VarRefIdxConformant;
										UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
										OLEAUTSafeArrVariant VarRef;
									}
							}
						}
						case 0x02:
						_struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTVariant VarResult;
										NdrAlign pad;
										OLEAUTExcepInfo ExcepInfo;
										UINT32 Argerr;
										OLEAUTSafeArrVariant rgVarRef;
										Align4 padding;
										[RAPRDecomResult = HResult.ToString]
										HRESULT HResult;
									}
							}
						}
					}
				}
			case 7:
				COMPESIEventSubscriptionGetSubscriptionID GetSubscriptionID;
			case 8:
				COMPESIEventSubscriptionPutSubscriptionID PutSubscriptionID;
			case 9:
				COMPESIEventSubscriptionGetSubscriptionName GetSubscriptionName;
			case 10:
				COMPESIEventSubscriptionPutSubscriptionName PutSubscriptionName;
			case 11:
				COMPESIEventSubscriptionGetPublisherID GetPublisherID;
			case 12:
				COMPESIEventSubscriptionPutPublisherID PutPublisherID;
			case 13:
				COMPESIEventSubscriptionGetEventClassID GetEventClassID;
			case 14:
				COMPESIEventSubscriptionPutEventClassID PutEventClassID;
			case 15:
				COMPESIEventSubscriptionGetMethodName GetMethodName;
			case 16:
				COMPESIEventSubscriptionPutMethodName PutMethodName;
			case 17:
				COMPESIEventSubscriptionGetSubscriberCLSID GetSubscriberCLSID;
			case 18:
				COMPESIEventSubscriptionPutSubscriberCLSID PutSubscriberCLSID;
			case 19:
				COMPESIEventSubscriptionGetSubscriberInterface GetSubscriberInterface;
			case 20:
				COMPESIEventSubscriptionPutSubscriberInterface PutSubscriberInterface;
			case 21:
				COMPESIEventSubscriptionGetPerUser GetPerUser;
			case 22:
				COMPESIEventSubscriptionPutPerUser PutPerUser;
			case 23:
				COMPESIEventSubscriptionGetOwnerSID GetOwnerSID;
			case 24:
				COMPESIEventSubscriptionPutOwnerSID PutOwnerSID;
			case 25:
				COMPESIEventSubscriptionGetEnabled GetEnabled;
			case 26:
				COMPESIEventSubscriptionPutEnabled PutEnabled;
			case 27:
				COMPESIEventSubscriptionGetDescription GetDescription;
			case 28:
				COMPESIEventSubscriptionPutDescription PutDescription;
			case 29:
				COMPESIEventSubscriptionGetMachineName GetMachineName;
			case 30:
				COMPESIEventSubscriptionPutMachineName PutMachineName;
			case 31:
				COMPESIEventSubscriptionGetPublisherProperty GetPublisherProperty;
			case 32:
				COMPESIEventSubscriptionPutPublisherProperty PutPublisherProperty;
			case 33:
				COMPESIEventSubscriptionRemovePublisherProperty RemovePublisherProperty;
			case 34:
				COMPESIEventSubscriptionGetPublisherPropertyCollection GetPublisherPropertyCollection;
			case 35:
				COMPESIEventSubscriptionGetSubscriberProperty GetSubscriberProperty;
			case 36:
				COMPESIEventSubscriptionPutSubscriberProperty PutSubscriberProperty;
			case 37:
				COMPESIEventSubscriptionRemoveSubscriberProperty RemoveSubscriberProperty;
			case 38:
				COMPESIEventSubscriptionGetSubscriberPropertyCollection GetSubscriberPropertyCollection;
			case 39:
				COMPESIEventSubscriptionGetInterfaceID GetInterfaceID;
			case 40:
				COMPESIEventSubscriptionPutInterfaceID PutInterfaceID;
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEventSubscription method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{4A6B0E16-2E38-11D1-9965-00C04FBBB345}":
		[Property.COMPESMethodName = "IEventSubscription2::" + COMPESIEventSubscription2MethodNameTable( Property.MSRPCOpnum )]
		_struct IEventSubscription2
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct GetTypeInfoCount
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 pctInfo;
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 4:
				_struct GetTypeInfo
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 iTInfo;
											OLEAUTLCID Lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrPtr pTInfo;
											switch
											{
												case pTInfo.ReferentID:
													DCOMMInterfacePointer TInfo;
											}
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 5:
				_struct GetIDsOfNames
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											OLEAUTRefIId riid;
											NdrConformant NamesCount;
											OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
											Align4 pad;
											UINT32 cNames;
											OLEAUTLCID lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrConformant prgDispId;
											OLEAUTDISPID rgDispId[prgDispId.MaxCount];
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 6:
				_struct Invoke
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
						_struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTDISPID dispIdMember;
										OLEAUTRefIId riid;
										OLEAUTLCID lcid;
										switch( Property.MSRPCByteOrder )
										{
											case LittleEndian:
												_struct LittleEndian
												{
													UINT32 dwFlags
													{
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
													}
												}
											default:
												_struct BigEndian
												{
													UINT32 dwFlags
													{
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
													}
												}
										}
										[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
										OLEAUTDISPPARAMS DispParams;
										UINT32 cVarRef;
										NdrConformant VarRefIdxConformant;
										UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
										OLEAUTSafeArrVariant VarRef;
									}
							}
						}
						case 0x02:
						_struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTVariant VarResult;
										NdrAlign pad;
										OLEAUTExcepInfo ExcepInfo;
										UINT32 Argerr;
										OLEAUTSafeArrVariant rgVarRef;
										Align4 padding;
										[RAPRDecomResult = HResult.ToString]
										HRESULT HResult;
									}
							}
						}
					}
				}
			case 7:
				COMPESIEventSubscriptionGetSubscriptionID GetSubscriptionID;
			case 8:
				COMPESIEventSubscriptionPutSubscriptionID PutSubscriptionID;
			case 9:
				COMPESIEventSubscriptionGetSubscriptionName GetSubscriptionName;
			case 10:
				COMPESIEventSubscriptionPutSubscriptionName PutSubscriptionName;
			case 11:
				COMPESIEventSubscriptionGetPublisherID GetPublisherID;
			case 12:
				COMPESIEventSubscriptionPutPublisherID PutPublisherID;
			case 13:
				COMPESIEventSubscriptionGetEventClassID GetEventClassID;
			case 14:
				COMPESIEventSubscriptionPutEventClassID PutEventClassID;
			case 15:
				COMPESIEventSubscriptionGetMethodName GetMethodName;
			case 16:
				COMPESIEventSubscriptionPutMethodName PutMethodName;
			case 17:
				COMPESIEventSubscriptionGetSubscriberCLSID GetSubscriberCLSID;
			case 18:
				COMPESIEventSubscriptionPutSubscriberCLSID PutSubscriberCLSID;
			case 19:
				COMPESIEventSubscriptionGetSubscriberInterface GetSubscriberInterface;
			case 20:
				COMPESIEventSubscriptionPutSubscriberInterface PutSubscriberInterface;
			case 21:
				COMPESIEventSubscriptionGetPerUser GetPerUser;
			case 22:
				COMPESIEventSubscriptionPutPerUser PutPerUser;
			case 23:
				COMPESIEventSubscriptionGetOwnerSID GetOwnerSID;
			case 24:
				COMPESIEventSubscriptionPutOwnerSID PutOwnerSID;
			case 25:
				COMPESIEventSubscriptionGetEnabled GetEnabled;
			case 26:
				COMPESIEventSubscriptionPutEnabled PutEnabled;
			case 27:
				COMPESIEventSubscriptionGetDescription GetDescription;
			case 28:
				COMPESIEventSubscriptionPutDescription PutDescription;
			case 29:
				COMPESIEventSubscriptionGetMachineName GetMachineName;
			case 30:
				COMPESIEventSubscriptionPutMachineName PutMachineName;
			case 31:
				COMPESIEventSubscriptionGetPublisherProperty GetPublisherProperty;
			case 32:
				COMPESIEventSubscriptionPutPublisherProperty PutPublisherProperty;
			case 33:
				COMPESIEventSubscriptionRemovePublisherProperty RemovePublisherProperty;
			case 34:
				COMPESIEventSubscriptionGetPublisherPropertyCollection GetPublisherPropertyCollection;
			case 35:
				COMPESIEventSubscriptionGetSubscriberProperty GetSubscriberProperty;
			case 36:
				COMPESIEventSubscriptionPutSubscriberProperty PutSubscriberProperty;
			case 37:
				COMPESIEventSubscriptionRemoveSubscriberProperty RemoveSubscriberProperty;
			case 38:
				COMPESIEventSubscriptionGetSubscriberPropertyCollection GetSubscriberPropertyCollection;
			case 39:
				COMPESIEventSubscriptionGetInterfaceID GetInterfaceID;
			case 40:
				COMPESIEventSubscriptionPutInterfaceID PutInterfaceID;
			case 41:
				COMPESIEventSubscriptionGetFilterCriteria GetFilterCriteria;
			case 42:
				COMPESIEventSubscriptionPutFilterCriteria PutFilterCriteria;
			case 43:
				COMPESIEventSubscriptionGetSubscriberMoniker GetSubscriberMoniker;
			case 44:
				COMPESIEventSubscriptionPutSubscriberMoniker PutSubscriberMoniker;
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEventSubscription2 method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{FBC1D17D-C498-43A0-81AF-423DDD530AF6}":
		[Property.COMPESMethodName = "IEventSubscription3::" + COMPESIEventSubscription3MethodNameTable( Property.MSRPCOpnum )]
		_struct IEventSubscription3
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct GetTypeInfoCount
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 pctInfo;
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 4:
				_struct GetTypeInfo
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 iTInfo;
											OLEAUTLCID Lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrPtr pTInfo;
											switch
											{
												case pTInfo.ReferentID:
													DCOMMInterfacePointer TInfo;
											}
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 5:
				_struct GetIDsOfNames
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											OLEAUTRefIId riid;
											NdrConformant NamesCount;
											OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
											Align4 pad;
											UINT32 cNames;
											OLEAUTLCID lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrConformant prgDispId;
											OLEAUTDISPID rgDispId[prgDispId.MaxCount];
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 6:
				_struct Invoke
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
						_struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTDISPID dispIdMember;
										OLEAUTRefIId riid;
										OLEAUTLCID lcid;
										switch( Property.MSRPCByteOrder )
										{
											case LittleEndian:
												_struct LittleEndian
												{
													UINT32 dwFlags
													{
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
													}
												}
											default:
												_struct BigEndian
												{
													UINT32 dwFlags
													{
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
													}
												}
										}
										[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
										OLEAUTDISPPARAMS DispParams;
										UINT32 cVarRef;
										NdrConformant VarRefIdxConformant;
										UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
										OLEAUTSafeArrVariant VarRef;
									}
							}
						}
						case 0x02:
						_struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTVariant VarResult;
										NdrAlign pad;
										OLEAUTExcepInfo ExcepInfo;
										UINT32 Argerr;
										OLEAUTSafeArrVariant rgVarRef;
										Align4 padding;
										[RAPRDecomResult = HResult.ToString]
										HRESULT HResult;
									}
							}
						}
					}
				}
			case 7:
				COMPESIEventSubscriptionGetSubscriptionID GetSubscriptionID;
			case 8:
				COMPESIEventSubscriptionPutSubscriptionID PutSubscriptionID;
			case 9:
				COMPESIEventSubscriptionGetSubscriptionName GetSubscriptionName;
			case 10:
				COMPESIEventSubscriptionPutSubscriptionName PutSubscriptionName;
			case 11:
				COMPESIEventSubscriptionGetPublisherID GetPublisherID;
			case 12:
				COMPESIEventSubscriptionPutPublisherID PutPublisherID;
			case 13:
				COMPESIEventSubscriptionGetEventClassID GetEventClassID;
			case 14:
				COMPESIEventSubscriptionPutEventClassID PutEventClassID;
			case 15:
				COMPESIEventSubscriptionGetMethodName GetMethodName;
			case 16:
				COMPESIEventSubscriptionPutMethodName PutMethodName;
			case 17:
				COMPESIEventSubscriptionGetSubscriberCLSID GetSubscriberCLSID;
			case 18:
				COMPESIEventSubscriptionPutSubscriberCLSID PutSubscriberCLSID;
			case 19:
				COMPESIEventSubscriptionGetSubscriberInterface GetSubscriberInterface;
			case 20:
				COMPESIEventSubscriptionPutSubscriberInterface PutSubscriberInterface;
			case 21:
				COMPESIEventSubscriptionGetPerUser GetPerUser;
			case 22:
				COMPESIEventSubscriptionPutPerUser PutPerUser;
			case 23:
				COMPESIEventSubscriptionGetOwnerSID GetOwnerSID;
			case 24:
				COMPESIEventSubscriptionPutOwnerSID PutOwnerSID;
			case 25:
				COMPESIEventSubscriptionGetEnabled GetEnabled;
			case 26:
				COMPESIEventSubscriptionPutEnabled PutEnabled;
			case 27:
				COMPESIEventSubscriptionGetDescription GetDescription;
			case 28:
				COMPESIEventSubscriptionPutDescription PutDescription;
			case 29:
				COMPESIEventSubscriptionGetMachineName GetMachineName;
			case 30:
				COMPESIEventSubscriptionPutMachineName PutMachineName;
			case 31:
				COMPESIEventSubscriptionGetPublisherProperty GetPublisherProperty;
			case 32:
				COMPESIEventSubscriptionPutPublisherProperty PutPublisherProperty;
			case 33:
				COMPESIEventSubscriptionRemovePublisherProperty RemovePublisherProperty;
			case 34:
				COMPESIEventSubscriptionGetPublisherPropertyCollection GetPublisherPropertyCollection;
			case 35:
				COMPESIEventSubscriptionGetSubscriberProperty GetSubscriberProperty;
			case 36:
				COMPESIEventSubscriptionPutSubscriberProperty PutSubscriberProperty;
			case 37:
				COMPESIEventSubscriptionRemoveSubscriberProperty RemoveSubscriberProperty;
			case 38:
				COMPESIEventSubscriptionGetSubscriberPropertyCollection GetSubscriberPropertyCollection;
			case 39:
				COMPESIEventSubscriptionGetInterfaceID GetInterfaceID;
			case 40:
				COMPESIEventSubscriptionPutInterfaceID PutInterfaceID;
			case 41:
				COMPESIEventSubscriptionGetFilterCriteria GetFilterCriteria;
			case 42:
				COMPESIEventSubscriptionPutFilterCriteria PutFilterCriteria;
			case 43:
				COMPESIEventSubscriptionGetSubscriberMoniker GetSubscriberMoniker;
			case 44:
				COMPESIEventSubscriptionPutSubscriberMoniker PutSubscriberMoniker;
			case 45:
				_struct GetEventClassPartitionID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR PbstrEventClassPartitionID;
										Align4 Pad;
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 46:
				_struct PutEventClassPartitionID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR BstrEventClassPartitionID;
									}
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 47:
				_struct GetEventClassApplicationID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR PbstrEventClassApplicationID;
										Align4 Pad;
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 48:
				_struct PutEventClassApplicationID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR BstrEventClassApplicationID;
									}
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 49:
				_struct GetSubscriberPartitionID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR PbstrSubscriberPartitionID;
										Align4 Pad;
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 50:
				_struct PutSubscriberPartitionID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR BstrSubscriberPartitionID;
									}
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 51:
				_struct GetSubscriberApplicationID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR PbstrSubscriberApplicationID;
										Align4 Pad;
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 52:
				_struct PutSubscriberApplicationID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BSTR BstrSubscriberApplicationID;
									}
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEventSubscription3 method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{4E14FB9F-2E22-11D1-9964-00C04FBBB345}":
		[Property.COMPESMethodName = "IEventSystem:" + COMPESIEventSystemMethodNameTable( Property.MSRPCOpnum )]
		_struct IEventSystem
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct GetTypeInfoCount
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 pctInfo;
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 4:
				_struct GetTypeInfo
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 iTInfo;
											OLEAUTLCID Lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrPtr pTInfo;
											switch
											{
												case pTInfo.ReferentID:
													DCOMMInterfacePointer TInfo;
											}
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 5:
				_struct GetIDsOfNames
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											OLEAUTRefIId riid;
											NdrConformant NamesCount;
											OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
											Align4 pad;
											UINT32 cNames;
											OLEAUTLCID lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrConformant prgDispId;
											OLEAUTDISPID rgDispId[prgDispId.MaxCount];
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 6:
				_struct Invoke
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
						_struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTDISPID dispIdMember;
										OLEAUTRefIId riid;
										OLEAUTLCID lcid;
										switch( Property.MSRPCByteOrder )
										{
											case LittleEndian:
												_struct LittleEndian
												{
													UINT32 dwFlags
													{
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
													}
												}
											default:
												_struct BigEndian
												{
													UINT32 dwFlags
													{
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
													}
												}
										}
										[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
										OLEAUTDISPPARAMS DispParams;
										UINT32 cVarRef;
										NdrConformant VarRefIdxConformant;
										UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
										OLEAUTSafeArrVariant VarRef;
									}
							}
						}
						case 0x02:
						_struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTVariant VarResult;
										NdrAlign pad;
										OLEAUTExcepInfo ExcepInfo;
										UINT32 Argerr;
										OLEAUTSafeArrVariant rgVarRef;
										Align4 padding;
										[RAPRDecomResult = HResult.ToString]
										HRESULT HResult;
									}
							}
						}
					}
				}
			case 7:
				COMPESIEventSystemQuery Query;
			case 8:
				COMPESIEventSystemStore Store;
			case 9:
				COMPESIEventSystemRemove Remove;
			case 10:
				COMPESIEventSystemGetEventObjectChangeEventClassID GetEventObjectChangeEventClassID;
			case 11:
				COMPESIEventSystemQueryS QueryS;
			case 12:
				COMPESIEventSystemRemoveS RemoveS;
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEventSystem method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{99CC098F-A48A-4e9c-8E58-965C0AFC19D5}":
		[Property.COMPESMethodName = "IEventSystem2::" + COMPESIEventSystem2MethodNameTable( Property.MSRPCOpnum )]
		_struct IEventSystem2
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct GetTypeInfoCount
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 pctInfo;
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 4:
				_struct GetTypeInfo
				{
					switch(property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											UINT32 iTInfo;
											OLEAUTLCID Lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrPtr pTInfo;
											switch
											{
												case pTInfo.ReferentID:
													DCOMMInterfacePointer TInfo;
											}
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 5:
				_struct GetIDsOfNames
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
							_struct Request
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											OLEAUTRefIId riid;
											NdrConformant NamesCount;
											OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
											Align4 pad;
											UINT32 cNames;
											OLEAUTLCID lcid;
										}
								}
							}
						case 0x02:
							_struct Response
							{
								Switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									Default:
										struct
										{
											NdrConformant prgDispId;
											OLEAUTDISPID rgDispId[prgDispId.MaxCount];
											[RAPRDecomResult = HResult.ToString]
											HRESULT HResult;
										}
								}
							}
					}
				}
			case 6:
				_struct Invoke
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
						_struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTDISPID dispIdMember;
										OLEAUTRefIId riid;
										OLEAUTLCID lcid;
										switch( Property.MSRPCByteOrder )
										{
											case LittleEndian:
												_struct LittleEndian
												{
													UINT32 dwFlags
													{
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
													}
												}
											default:
												_struct BigEndian
												{
													UINT32 dwFlags
													{
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
													}
												}
										}
										[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
										OLEAUTDISPPARAMS DispParams;
										UINT32 cVarRef;
										NdrConformant VarRefIdxConformant;
										UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
										OLEAUTSafeArrVariant VarRef;
									}
							}
						}
						case 0x02:
						_struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTVariant VarResult;
										NdrAlign pad;
										OLEAUTExcepInfo ExcepInfo;
										UINT32 Argerr;
										OLEAUTSafeArrVariant rgVarRef;
										Align4 padding;
										[RAPRDecomResult = HResult.ToString]
										HRESULT HResult;
									}
							}
						}
					}
				}
			case 7:
				COMPESIEventSystemQuery Query;
			case 8:
				COMPESIEventSystemStore Store;
			case 9:
				COMPESIEventSystemRemove Remove;
			case 10:
				COMPESIEventSystemGetEventObjectChangeEventClassID GetEventObjectChangeEventClassID;
			case 11:
				COMPESIEventSystemQueryS QueryS;
			case 12:
				COMPESIEventSystemRemoveS RemoveS;
			case 13:
				_struct GetVersion
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						[COMPESSummary = "No Parameters"]
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						[COMPESSummary = FormatString( "PnVersion=0x%X", PnVersion )]
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										INT32 PnVersion = COMPESGetVersionPnVersionTable( this );
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			case 14:
				_struct VerifyTransientSubscribers
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEventSystem2 method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{A0E8F27A-888C-11D1-B763-00C04FB926AF}":
		[Property.COMPESMethodName = "IEventSystemInitialize:" + COMPESIEventSystemInitializeMethodNameTable( Property.MSRPCOpnum )]
		_struct IEventSystemInitialize
		{
			switch( Property.MSRPCOpnum )
			{
			case 3:
				_struct SetCOMCatalogBehaviour
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										BOOL bRetainSubkeys;
									}
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPES", "Unknown IEventSystemInitialize method, opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	}
}

table COMPESIEnumEventObjectMethodNameTable( opnum )
{
	switch( opnum )
	{
	case 3: "Clone";
	case 4: "Next";
	case 5: "Reset";
	case 6: "Skip";
	default: "unknown";
	}
}

table COMPESIEventClassMethodNameTable( opnum )
{
	switch( opnum )
	{
	case 7: "GetEventClassID";
	case 8: "PutEventClassID";
	case 9: "GetEventClassName";
	case 10: "PutEventClassName";
	case 11: "GetOwnerSID";
	case 12: "PutOwnerSID";
	case 13: "GetFiringInterfaceID";
	case 14: "PutFiringInterfaceID";
	case 15: "GetDescription";
	case 16: "PutDescription";
	case 17: "Opnum17NotUsedOnWire";
	case 18: "Opnum18NotUsedOnWire";
	case 19: "GetTypeLib";
	case 20: "PutTypeLib";
	default: "unknown";
	}
}

table COMPESIEventClass2MethodNameTable( opnum )
{
	switch( opnum )
	{
	case 21: "GetPublisherID";
	case 22: "PutPublisherID";
	case 23: "GetMultiInterfacePublisherFilterCLSID";
	case 24: "PutMultiInterfacePublisherFilterCLSID";
	case 25: "GetAllowInprocActivation";
	case 26: "PutAllowInprocActivation";
	case 27: "GetFireInParallel";
	case 28: "PutFireInParallel";
	default: "IEventClass::"+COMPESIEventClassMethodNameTable( opnum );//"unknown";
	}
}

table COMPESIEventClass3MethodNameTable( opnum )
{
	switch( opnum )
	{
	case 29: "GetEventClassPartitionID";
	case 30: "PutEventClassPartitionID";
	case 31: "GetEventClassApplicationID";
	case 32: "PutEventClassApplicationID";
	default: "IEventClass2::"+COMPESIEventClass2MethodNameTable( opnum );
	}
}

table COMPESIEventObjectCollectionMethodNameTable( opnum )
{
	switch( opnum )
	{
	case 7: "Get_NewEnum";
	case 8: "GetItem";
	case 9: "GetNewEnum";
	case 10: "GetCount";
	case 11: "Add";
	case 12: "Remove";
	default: "unknown";
	}
}

table COMPESIEventSubscriptionMethodNameTable( opnum )
{
	switch( opnum )
	{
	case 7: "GetSubscriptionID";
	case 8: "PutSubscriptionID";
	case 9: "GetSubscriptionName";
	case 10: "PutSubscriptionName";
	case 11: "GetPublisherID";
	case 12: "PutPublisherID";
	case 13: "GetEventClassID";
	case 14: "PutEventClassID";
	case 15: "GetMethodName";
	case 16: "PutMethodName";
	case 17: "GetSubscriberCLSID";
	case 18: "PutSubscriberCLSID";
	case 19: "GetSubscriberInterface";
	case 20: "PutSubscriberInterface";
	case 21: "GetPerUser";
	case 22: "PutPerUser";
	case 23: "GetOwnerSID";
	case 24: "PutOwnerSID";
	case 25: "GetEnabled";
	case 26: "PutEnabled";
	case 27: "GetDescription";
	case 28: "PutDescription";
	case 29: "GetMachineName";
	case 30: "PutMachineName";
	case 31: "GetPublisherProperty";
	case 32: "PutPublisherProperty";
	case 33: "RemovePublisherProperty";
	case 34: "GetPublisherPropertyCollection";
	case 35: "GetSubscriberProperty";
	case 36: "PutSubscriberProperty";
	case 37: "RemoveSubscriberProperty";
	case 38: "GetSubscriberPropertyCollection";
	case 39: "GetInterfaceID";
	case 40: "PutInterfaceID";
	default: "unknown";
	}
}

table COMPESIEventSubscription2MethodNameTable( opnum )
{
	switch( opnum )
	{
	case 41: "GetFilterCriteria";
	case 42: "PutFilterCriteria";
	case 43: "GetSubscriberMoniker";
	case 44: "PutSubscriberMoniker";
	default: "IEventSubscription::"+COMPESIEventSubscriptionMethodNameTable( opnum );
	}
}

table COMPESIEventSubscription3MethodNameTable( opnum )
{
	switch( opnum )
	{
	case 45: "GetEventClassPartitionID";
	case 46: "PutEventClassPartitionID";
	case 47: "GetEventClassApplicationID";
	case 48: "PutEventClassApplicationID";
	case 49: "GetSubscriberPartitionID";
	case 50: "PutSubscriberPartitionID";
	case 51: "GetSubscriberApplicationID";
	case 52: "PutSubscriberApplicationID";
	default: "IEventSubscription2::"+COMPESIEventSubscription2MethodNameTable( opnum );
	}
}

table COMPESIEventSystemMethodNameTable( opnum )
{
	switch( opnum )
	{
	case 7: "Query";
	case 8: "Store";
	case 9: "Remove";
	case 10: "GetEventObjectChangeEventClassID";
	case 11: "QueryS";
	case 12: "RemoveS";
	default: "unknown";
	}
}

table COMPESIEventSystem2MethodNameTable( opnum )
{
	switch( opnum )
	{
	case 13: "GetVersion";
	case 14: "VerifyTransientSubscribers";
	default: "IEventSystem::"+COMPESIEventSystemMethodNameTable( opnum );
	}
}

table COMPESIEventSystemInitializeMethodNameTable( opnum )
{
	switch( opnum )
	{
	case 3: "SetCOMCatalogBehaviour";
	default: "unknown";
	}
}

table COMPESQueryProgIDTable( value )
{
	switch( value )
	{
	case "EventSystem.EventClassCollection": "The store for event classes  (as specified in section ).";
	case "EventSystem.EventSubscriptionCollection": "The store for subscriptions (as specified in section ).";
	default: "unknown";
	}
}

table COMPESStoreProgIDTable( value )
{
	switch( value )
	{
	case "EventSystem.EventClass": "The store for event classes  (as specified in section ).";
	case "EventSystem.EventSubscription": "The store for subscriptions (as specified in section ).";
	default: "unknown";
	}
}

table COMPESRemoveProgIDTable( value )
{
	switch( value )
	{
	case "EventSystem.EventClassCollection": "The store for event classes  (as specified in section ).";
	case "EventSystem.EventSubscriptionCollection": "The store for subscriptions (as specified in section ).";
	default: "unknown";
	}
}

table COMPESQuerySProgIDTable( value )
{
	switch( value )
	{
	case "EventSystem.EventClassCollection": "The store for event classes  (as specified in section ).";
	case "EventSystem.EventSubscriptionCollection": "The store for subscriptions (as specified in section ).";
	default: "unknown";
	}
}

table COMPESRemoveSProgIDTable( value )
{
	switch( value )
	{
	case "EventSystem.EventClassCollection": "The store for event classes  (as specified in section ).";
	case "EventSystem.EventSubscriptionCollection": "The store for subscriptions (as specified in section ).";
	default: "unknown";
	}
}

table COMPESGetVersionPnVersionTable( value )
{
	switch( value )
	{
	case 0x00000001: "The server does not support the IEventSubscription3 and IEventClass3 interfaces, nor does it support the PartitionID and ApplicationID properties on the subscription (section ) and event class (section ) objects.";
	case 0x00000002: "The server supports the IEventSubscription3 and IEventClass3 interfaces. It also supports the PartitionID and ApplicationID properties on the subscription (section ) and event class (section ) objects.";
	default: "unknown";
	}
}


//--- IEventClass Methods ---------------------------------------------
struct COMPESIEventClassGetEventClassID
{ //IEventClass Opnum 7
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrEventClassID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassPutEventClassID
{ //IEventClass Opnum 8
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrEventClassID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassGetEventClassName
{ //IEventClass Opnum 9
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrEventClassName;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassPutEventClassName
{ //IEventClass Opnum 10
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrEventClassName;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassGetOwnerSID
{ //IEventClass Opnum 11
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrOwnerSID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassPutOwnerSID
{ //IEventClass Opnum 12
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrOwnerSID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassGetFiringInterfaceID
{ //IEventClass Opnum 13
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrFiringInterfaceID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassPutFiringInterfaceID
{ //IEventClass Opnum 14
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrFiringInterfaceID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassGetDescription
{ //IEventClass Opnum 15
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrDescription;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassPutDescription
{ //IEventClass Opnum 16
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrDescription;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassGetTypeLib
{ //IEventClass Opnum 19
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrTypeLib;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassPutTypeLib
{ //IEventClass Opnum 20
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrTypeLib;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

//--- IEventClass2 Methods ---------------------------------------------
struct COMPESIEventClassGetPublisherID
{ //IEventClass2 Opnum 21
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrPublisherID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassPutPublisherID
{ //IEventClass2 Opnum 22
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrPublisherID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassGetMultiInterfacePublisherFilterCLSID
{ //IEventClass2 Opnum 23
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrPubFilCLSID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassPutMultiInterfacePublisherFilterCLSID
{ //IEventClass2 Opnum 24
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrPubFilCLSID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassGetAllowInprocActivation
{ //IEventClass2 Opnum 25
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		[COMPESSummary = FormatString( "PfAllowInprocActivation=0x%X", PfAllowInprocActivation )]
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						INT32 PfAllowInprocActivation;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassPutAllowInprocActivation
{ //IEventClass2 Opnum 26
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = FormatString( "AllowInprocActivation=0x%X", AllowInprocActivation )]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						INT32 AllowInprocActivation;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassGetFireInParallel
{ //IEventClass2 Opnum 27
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		[COMPESSummary = FormatString( "PfFireInParallel=0x%X", PfFireInParallel )]
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						INT32 PfFireInParallel;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventClassPutFireInParallel
{ //IEventClass2 Opnum 28
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = FormatString( "FireInParallel=0x%X", FireInParallel )]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						INT32 FireInParallel;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

//--- IEventSubscription Methods ---------------------------------------------
struct COMPESIEventSubscriptionGetSubscriptionID
{ //IEventSubscription Opnum 7
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrSubscriptionID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutSubscriptionID
{ //IEventSubscription Opnum 8
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrSubscriptionID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetSubscriptionName
{ //IEventSubscription Opnum 9
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrSubscriptionName;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutSubscriptionName
{ //IEventSubscription Opnum 10
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrSubscriptionName;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetPublisherID
{ //IEventSubscription Opnum 11
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrPublisherID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutPublisherID
{ //IEventSubscription Opnum 12
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrPublisherID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetEventClassID
{ //IEventSubscription Opnum 13
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrEventClassID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutEventClassID
{ //IEventSubscription Opnum 14
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrEventClassID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetMethodName
{ //IEventSubscription Opnum 15
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrMethodName;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutMethodName
{ //IEventSubscription Opnum 16
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrMethodName;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetSubscriberCLSID
{ //IEventSubscription Opnum 17
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrSubscriberCLSID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutSubscriberCLSID
{ //IEventSubscription Opnum 18
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrSubscriberCLSID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetSubscriberInterface
{ //IEventSubscription Opnum 19
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						DCOMMInterfacePointerPtr SubscriberInterface;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutSubscriberInterface
{ //IEventSubscription Opnum 20
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						DCOMMInterfacePointerPtr SubscriberInterface;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetPerUser
{ //IEventSubscription Opnum 21
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		[COMPESSummary = FormatString( "PfPerUser=0x%X", PerUser )]
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BOOL PerUser;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutPerUser
{ //IEventSubscription Opnum 22
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = FormatString( "PerUser=0x%X", PerUser )]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						Bool PerUser;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetOwnerSID
{ //IEventSubscription Opnum 23
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrOwnerSID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutOwnerSID
{ //IEventSubscription Opnum 24
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrOwnerSID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetEnabled
{ //IEventSubscription Opnum 25
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		[COMPESSummary = FormatString( "PfEnabled=0x%X", Enabled )]
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BOOL Enabled;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutEnabled
{ //IEventSubscription Opnum 26
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = FormatString( "Enabled=0x%X", Enabled )]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BOOL Enabled;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetDescription
{ //IEventSubscription Opnum 27
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrDescription;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutDescription
{ //IEventSubscription Opnum 28
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
					default:
						struct
						{
							BSTR BstrDescription;
						}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetMachineName
{ //IEventSubscription Opnum 29
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrMachineName;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutMachineName
{ //IEventSubscription Opnum 30
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrMachineName;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetPublisherProperty
{ //IEventSubscription Opnum 31
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrPropertyName;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						OLEAUTVariant PropertyValue;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutPublisherProperty
{ //IEventSubscription Opnum 32
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrPropertyName;
						Align8 Pad;
						OLEAUTVariant PropertyValue;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionRemovePublisherProperty
{ //IEventSubscription Opnum 33
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrPropertyName;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetPublisherPropertyCollection
{ //IEventSubscription Opnum 34
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						DCOMMInterfacePointerPtr Collection;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetSubscriberProperty
{ //IEventSubscription Opnum 35
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrPropertyName;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						OLEAUTVariant PropertyValue;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutSubscriberProperty
{ //IEventSubscription Opnum 36
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrPropertyName;
						Align8 Pad;
						OLEAUTVariant PropertyValue;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionRemoveSubscriberProperty
{ //IEventSubscription Opnum 37
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrPropertyName;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetSubscriberPropertyCollection
{ //IEventSubscription Opnum 38
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						DCOMMInterfacePointerPtr Collection;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetInterfaceID
{ //IEventSubscription Opnum 39
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		[COMPESSummary = "No Parameters"]
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrInterfaceID;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutInterfaceID
{ //IEventSubscription Opnum 40
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrInterfaceID;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

//--- IEventSubscription2 Methods ---------------------------------------------
struct COMPESIEventSubscriptionGetFilterCriteria
{ //IEventSubscription2 Opnum 41
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrFilterCriteria;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutFilterCriteria
{ //IEventSubscription2 Opnum 42
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrFilterCriteria;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionGetSubscriberMoniker
{ //IEventSubscription2 Opnum 43
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrMoniker;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSubscriptionPutSubscriberMoniker
{ //IEventSubscription2 Opnum 44
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR BstrMoniker;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

//--- IEventSystem Methods ---------------------------------------------
struct COMPESIEventSystemQuery
{ //IEventSystem Opnum 7
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR ProgID = COMPESQueryProgIDTable( this );
						BSTR QueryCriteria;
					}
			}
		}
	case 0x02: //RESPONSE
		[COMPESSummary = FormatString( "ErrorIndex=0x%X", ErrorIndex )]
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						INT32 ErrorIndex;
						DCOMMInterfacePointerPtr Interface;
						Align4 Pad2;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSystemStore
{ //IEventSystem Opnum 8
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR ProgID = COMPESStoreProgIDTable( this );
						DCOMMInterfacePointerPtr Interface;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSystemRemove
{ //IEventSystem Opnum 9
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR ProgID = COMPESRemoveProgIDTable( this );
						BSTR QueryCriteria;
					}
			}
		}
	case 0x02: //RESPONSE
		[COMPESSummary = FormatString( "ErrorIndex=0x%X", ErrorIndex )]
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						INT32 ErrorIndex;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSystemGetEventObjectChangeEventClassID
{ //IEventSystem Opnum 10
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR PbstrEventClassID;
						Align4	Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSystemQueryS
{ //IEventSystem Opnum 11
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR ProgID = COMPESQuerySProgIDTable( this );
						BSTR QueryCriteria;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						DCOMMInterfacePointerPtr Interface;
						Align4 Pad;
						HRESULT ReturnValue;
					}
			}
		}
	}
}

struct COMPESIEventSystemRemoveS
{ //IEventSystem Opnum 12
	switch( Property.MSRPCPType )
	{
	case 0x00: //REQUEST
		_struct Request
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						BSTR ProgID = COMPESRemoveSProgIDTable( this );
						BSTR QueryCriteria;
					}
			}
		}
	case 0x02: //RESPONSE
		_struct Response
		{
			switch
			{
				Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
				Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
				default:
					struct
					{
						HRESULT ReturnValue;
					}
			}
		}
	}
}
