//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Rights Management Services (RMS): Server-to-Server Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-RMPRS]: Rights Management Services (RMS): Server-to-Server Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 12/09/2009
//#                          Minor, 3/11/2010
//#
//####

[Property.SoapBodySummary = "RMPRS Payload"]
[RegisterBefore(SoapBody.DefaultSoapBody, RMPRS, RMPRSSoapActionTable(Property.SOAPAction))]
Protocol RMPRS = Property.RMPRSSummary
{
	Switch(Property.SOAPAction)
	{
		Case "http://microsoft.com/DRM/ServerService/FindServiceLocations":
			[Property.RMPRSSummary = this.ToString]
			RMPRSFindServiceLocations RMPRSFindServiceLocations;
		Case "http://microsoft.com/DRM/SubEnrollmentService/SubEnroll":
			[Property.RMPRSSummary = this.ToString]
			RMPRSSubEnroll RMPRSSubEnroll;
		Case "http://microsoft.com/DRM/ServerService/GetLicensorCertificate":
			[Property.RMPRSSummary = this.ToString]
			RMPRSGetLicensorCertificate RMPRSGetLicensorCertificate;
		Case "http://microsoft.com/DRM/GroupExpansionWebService/IsPrincipalMemberOf":
			[Property.RMPRSSummary = this.ToString]
			RMPRSIsPrincipalMemberOf RMPRSIsPrincipalMemberOf;
		Default:
			While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
			{
				XmlElement(true) AnyNode;
			}
	}
	
}

struct RMPRSFindServiceLocations = FormatString("%s Message", Property.RMPRSFindServiceLocationsSummary)
{
	[Post.Local.RMPRSFindServiceLocations_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.RMPRSFindServiceLocations_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "FindServiceLocationsResponse"):
						[Property.RMPRSFindServiceLocationsSummary = "FindServiceLocations Response"]
						RMPRSssFindServiceLocationsResponseElement FindServiceLocationsResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "FindServiceLocations"):
						[Property.RMPRSFindServiceLocationsSummary = "FindServiceLocations Request"]
						RMPRSssFindServiceLocationsElement FindServiceLocations;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.RMPRSFindServiceLocationsSummary = "Fault FindServiceLocations Response"]
						SoapFaultElement FaultFindServiceLocationsElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.RMPRSFindServiceLocationsSummary = "Encrypted FindServiceLocations Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct RMPRSSubEnroll = FormatString("%s Message", Property.RMPRSSubEnrollSummary)
{
	[Post.Local.RMPRSSubEnroll_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.RMPRSSubEnroll_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "SubEnrollResponse"):
						[Property.RMPRSSubEnrollSummary = "SubEnroll Response"]
						RMPRSsesSubEnrollResponseElement SubEnrollResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "SubEnroll"):
						[Property.RMPRSSubEnrollSummary = "SubEnroll Request"]
						RMPRSsesSubEnrollElement SubEnroll;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.RMPRSSubEnrollSummary = "Fault SubEnroll Response"]
						SoapFaultElement FaultSubEnrollElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.RMPRSSubEnrollSummary = "Encrypted SubEnroll Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct RMPRSGetLicensorCertificate = FormatString("%s Message", Property.RMPRSGetLicensorCertificateSummary)
{
	[Post.Local.RMPRSGetLicensorCertificate_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.RMPRSGetLicensorCertificate_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetLicensorCertificateResponse"):
						[Property.RMPRSGetLicensorCertificateSummary = "GetLicensorCertificate Response"]
						RMPRSssGetLicensorCertificateResponseElement GetLicensorCertificateResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetLicensorCertificate"):
						[Property.RMPRSGetLicensorCertificateSummary = "GetLicensorCertificate Request"]
						RMPRSssGetLicensorCertificateElement GetLicensorCertificate;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.RMPRSGetLicensorCertificateSummary = "Fault GetLicensorCertificate Response"]
						SoapFaultElement FaultGetLicensorCertificateElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.RMPRSGetLicensorCertificateSummary = "Encrypted GetLicensorCertificate Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct RMPRSIsPrincipalMemberOf = FormatString("%s Message", Property.RMPRSIsPrincipalMemberOfSummary)
{
	[Post.Local.RMPRSIsPrincipalMemberOf_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.RMPRSIsPrincipalMemberOf_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "IsPrincipalMemberOfResponse"):
						[Property.RMPRSIsPrincipalMemberOfSummary = "IsPrincipalMemberOf Response"]
						RMPRSgewsIsPrincipalMemberOfResponseElement IsPrincipalMemberOfResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "IsPrincipalMemberOf"):
						[Property.RMPRSIsPrincipalMemberOfSummary = "IsPrincipalMemberOf Request"]
						RMPRSgewsIsPrincipalMemberOfElement IsPrincipalMemberOf;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.RMPRSIsPrincipalMemberOfSummary = "Fault IsPrincipalMemberOf Response"]
						SoapFaultElement FaultIsPrincipalMemberOfElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.RMPRSIsPrincipalMemberOfSummary = "Encrypted IsPrincipalMemberOf Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

//
// Element VersionData
//
[RegisterBefore(SoapHeader.SoapHeaderNodes.Node, VersionData, Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "VersionData"))]
struct RMPRSssVersionDataElement = this.STag.ToString
{
	[Post.Local.RMPRSssVersionDataElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("VersionData") STag;
	switch
	{
		Case !Local.RMPRSssVersionDataElement_IsEmpty:
			struct
			{
				RMPRSssVersionData VersionData;
				XmlTag("VersionData") ETag;
			}
	}
}

//
// ComplexType VersionData
//
Struct RMPRSssVersionData
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MinimumVersion") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct MinimumVersion = this.MinimumVersion
			{
				[Post.Local.MinimumVersion_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("MinimumVersion") STag;
				switch
				{
					Case !Local.MinimumVersion_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) MinimumVersion;
							XmlTag("MinimumVersion") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MaximumVersion") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct MaximumVersion = this.MaximumVersion
			{
				[Post.Local.MaximumVersion_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("MaximumVersion") STag;
				switch
				{
					Case !Local.MaximumVersion_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) MaximumVersion;
							XmlTag("MaximumVersion") ETag;
						}
				}
			}
			
	}
	
}

//
// Element FindServiceLocations
// Embedded ComplexType 
//
struct RMPRSssFindServiceLocationsElement = this.STag.ToString
{
	[Post.Local.RMPRSssFindServiceLocationsElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("FindServiceLocations") STag;
	switch
	{
		Case !Local.RMPRSssFindServiceLocationsElement_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ServiceNames") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct ServiceNames = this.STag.ToString
						{
							[Post.Local.ServiceNames_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("ServiceNames") STag;
							switch
							{
								Case !Local.ServiceNames_IsEmpty:
									struct
									{
										RMPRSssArrayOfServiceLocationRequest ServiceNames;
										XmlTag("ServiceNames") ETag;
									}
							}
						}
						
				}
				
				XmlTag("FindServiceLocations") ETag;
			}
	}
}

//
// ComplexType ArrayOfServiceLocationRequest
//
Struct RMPRSssArrayOfServiceLocationRequest
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ServiceLocationRequest") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct ServiceLocationRequest = this.STag.ToString
		{
			[Post.Local.ServiceLocationRequest_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("ServiceLocationRequest") STag;
			switch
			{
				Case !Local.ServiceLocationRequest_IsEmpty:
					struct
					{
						RMPRSssServiceLocationRequest ServiceLocationRequest;
						XmlTag("ServiceLocationRequest") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType ServiceLocationRequest
//
Struct RMPRSssServiceLocationRequest
{
	struct Type = this.STag.ToString
	{
		[Post.Local.Type_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Type") STag;
		switch
		{
			Case !Local.Type_IsEmpty:
				struct
				{
					RMPRSssServiceType Type;
					XmlTag("Type") ETag;
				}
		}
	}
	
}

//
// Element FindServiceLocationsResponse
// Embedded ComplexType 
//
struct RMPRSssFindServiceLocationsResponseElement = this.STag.ToString
{
	[Post.Local.RMPRSssFindServiceLocationsResponseElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("FindServiceLocationsResponse") STag;
	switch
	{
		Case !Local.RMPRSssFindServiceLocationsResponseElement_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "FindServiceLocationsResult") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct FindServiceLocationsResult = this.STag.ToString
						{
							[Post.Local.FindServiceLocationsResult_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("FindServiceLocationsResult") STag;
							switch
							{
								Case !Local.FindServiceLocationsResult_IsEmpty:
									struct
									{
										RMPRSssArrayOfServiceLocationResponse FindServiceLocationsResult;
										XmlTag("FindServiceLocationsResult") ETag;
									}
							}
						}
						
				}
				
				XmlTag("FindServiceLocationsResponse") ETag;
			}
	}
}

//
// ComplexType ArrayOfServiceLocationResponse
//
Struct RMPRSssArrayOfServiceLocationResponse
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ServiceLocationResponse") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct ServiceLocationResponse = this.STag.ToString
		{
			[Post.Local.ServiceLocationResponse_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("ServiceLocationResponse") STag;
			switch
			{
				Case !Local.ServiceLocationResponse_IsEmpty:
					struct
					{
						RMPRSssServiceLocationResponse ServiceLocationResponse;
						XmlTag("ServiceLocationResponse") ETag;
					}
			}
		}
		
	}
}

//
// ComplexType ServiceLocationResponse
//
Struct RMPRSssServiceLocationResponse
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "URL") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct URL = this.URL
			{
				[Post.Local.URL_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("URL") STag;
				switch
				{
					Case !Local.URL_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) URL;
							XmlTag("URL") ETag;
						}
				}
			}
			
	}
	
	struct Type = this.STag.ToString
	{
		[Post.Local.Type_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Type") STag;
		switch
		{
			Case !Local.Type_IsEmpty:
				struct
				{
					RMPRSssServiceType Type;
					XmlTag("Type") ETag;
				}
		}
	}
	
}

//
// SimpleType ServiceType
//
Struct RMPRSssServiceType
{
	StringTerm(Property.XMLEncoding, "<", true, false, false) Service;
}

//
// Element SubEnroll
// Embedded ComplexType 
//
struct RMPRSsesSubEnrollElement = this.STag.ToString
{
	[Post.Local.RMPRSsesSubEnrollElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("SubEnroll") STag;
	switch
	{
		Case !Local.RMPRSsesSubEnrollElement_IsEmpty:
			struct
			{
				struct OInput = this.STag.ToString
				{
					[Post.Local.OInput_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("oInput") STag;
					switch
					{
						Case !Local.OInput_IsEmpty:
							struct
							{
								RMPRSsesSubEnrollParameters OInput;
								XmlTag("oInput") ETag;
							}
					}
				}
				
				XmlTag("SubEnroll") ETag;
			}
	}
}

//
// ComplexType SubEnrollParameters
//
Struct RMPRSsesSubEnrollParameters
{
	struct CertificatePublicKey = this.STag.ToString
	{
		[Post.Local.CertificatePublicKey_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("CertificatePublicKey") STag;
		switch
		{
			Case !Local.CertificatePublicKey_IsEmpty:
				struct
				{
					RMPRSsesEnrolleeCertificatePublicKey CertificatePublicKey;
					XmlTag("CertificatePublicKey") ETag;
				}
		}
	}
	
	struct EnrolleeInformation = this.STag.ToString
	{
		[Post.Local.EnrolleeInformation_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("EnrolleeInformation") STag;
		switch
		{
			Case !Local.EnrolleeInformation_IsEmpty:
				struct
				{
					RMPRSsesEnrolleeServerInformation EnrolleeInformation;
					XmlTag("EnrolleeInformation") ETag;
				}
		}
	}
	
}

//
// ComplexType EnrolleeCertificatePublicKey
//
Struct RMPRSsesEnrolleeCertificatePublicKey
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "aPublicKeyBytes") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct APublicKeyBytes = this.APublicKeyBytes
			{
				[Post.Local.APublicKeyBytes_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("aPublicKeyBytes") STag;
				switch
				{
					Case !Local.APublicKeyBytes_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) APublicKeyBytes;
							XmlTag("aPublicKeyBytes") ETag;
						}
				}
			}
			
	}
	
	struct Guid = this.Guid
	{
		[Post.Local.Guid_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("Guid") STag;
		switch
		{
			Case !Local.Guid_IsEmpty:
				struct
				{
					StringTerm(Property.XMLEncoding, "<", true, false, false) Guid;
					XmlTag("Guid") ETag;
				}
		}
	}
	
}

//
// ComplexType EnrolleeServerInformation
//
Struct RMPRSsesEnrolleeServerInformation
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "SKU") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct SKU = this.SKU
			{
				[Post.Local.SKU_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("SKU") STag;
				switch
				{
					Case !Local.SKU_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) SKU;
							XmlTag("SKU") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Version") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct Version = this.Version
			{
				[Post.Local.Version_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Version") STag;
				switch
				{
					Case !Local.Version_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Version;
							XmlTag("Version") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Name") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct Name = this.Name
			{
				[Post.Local.Name_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Name") STag;
				switch
				{
					Case !Local.Name_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Name;
							XmlTag("Name") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "URL") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct URL = this.URL
			{
				[Post.Local.URL_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("URL") STag;
				switch
				{
					Case !Local.URL_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) URL;
							XmlTag("URL") ETag;
						}
				}
			}
			
	}
	
}

//
// Element SubEnrollResponse
// Embedded ComplexType 
//
struct RMPRSsesSubEnrollResponseElement = this.STag.ToString
{
	[Post.Local.RMPRSsesSubEnrollResponseElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("SubEnrollResponse") STag;
	switch
	{
		Case !Local.RMPRSsesSubEnrollResponseElement_IsEmpty:
			struct
			{
				struct SubEnrollResult = this.STag.ToString
				{
					[Post.Local.SubEnrollResult_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("SubEnrollResult") STag;
					switch
					{
						Case !Local.SubEnrollResult_IsEmpty:
							struct
							{
								RMPRSsesSubEnrollResponse SubEnrollResult;
								XmlTag("SubEnrollResult") ETag;
							}
					}
				}
				
				XmlTag("SubEnrollResponse") ETag;
			}
	}
}

//
// ComplexType SubEnrollResponse
//
Struct RMPRSsesSubEnrollResponse
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "LicensorCertificateChain") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct LicensorCertificateChain = this.STag.ToString
			{
				[Post.Local.LicensorCertificateChain_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("LicensorCertificateChain") STag;
				switch
				{
					Case !Local.LicensorCertificateChain_IsEmpty:
						struct
						{
							RMPRSsesArrayOfString LicensorCertificateChain;
							XmlTag("LicensorCertificateChain") ETag;
						}
				}
			}
			
	}
	
}

//
// ComplexType ArrayOfString
//
Struct RMPRSsesArrayOfString
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "string") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct String = this.String
		{
			[Post.Local.String_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("string") STag;
			switch
			{
				Case !Local.String_IsEmpty:
					struct
					{
						StringTerm(Property.XMLEncoding, "<", true, false, false) String;
						XmlTag("string") ETag;
					}
			}
		}
		
	}
}

//
// Element VersionData
//
[RegisterBefore(SoapHeader.SoapHeaderNodes.Node, VersionData, Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "VersionData"))]
struct RMPRSsesVersionDataElement = this.STag.ToString
{
	[Post.Local.RMPRSsesVersionDataElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("VersionData") STag;
	switch
	{
		Case !Local.RMPRSsesVersionDataElement_IsEmpty:
			struct
			{
				RMPRSsesVersionData VersionData;
				XmlTag("VersionData") ETag;
			}
	}
}

//
// ComplexType VersionData
//
Struct RMPRSsesVersionData
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MinimumVersion") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct MinimumVersion = this.MinimumVersion
			{
				[Post.Local.MinimumVersion_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("MinimumVersion") STag;
				switch
				{
					Case !Local.MinimumVersion_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) MinimumVersion;
							XmlTag("MinimumVersion") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MaximumVersion") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct MaximumVersion = this.MaximumVersion
			{
				[Post.Local.MaximumVersion_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("MaximumVersion") STag;
				switch
				{
					Case !Local.MaximumVersion_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) MaximumVersion;
							XmlTag("MaximumVersion") ETag;
						}
				}
			}
			
	}
	
}

//
// Element GetLicensorCertificate
// Embedded ComplexType 
//
struct RMPRSssGetLicensorCertificateElement = this.STag.ToString
{
	[Post.Local.RMPRSssGetLicensorCertificateElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("GetLicensorCertificate") STag;
	switch
	{
		Case !Local.RMPRSssGetLicensorCertificateElement_IsEmpty:
			struct
			{
				XmlTag("GetLicensorCertificate") ETag;
			}
	}
}

//
// Element GetLicensorCertificateResponse
// Embedded ComplexType 
//
struct RMPRSssGetLicensorCertificateResponseElement = this.STag.ToString
{
	[Post.Local.RMPRSssGetLicensorCertificateResponseElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("GetLicensorCertificateResponse") STag;
	switch
	{
		Case !Local.RMPRSssGetLicensorCertificateResponseElement_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetLicensorCertificateResult") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct GetLicensorCertificateResult = this.STag.ToString
						{
							[Post.Local.GetLicensorCertificateResult_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("GetLicensorCertificateResult") STag;
							switch
							{
								Case !Local.GetLicensorCertificateResult_IsEmpty:
									struct
									{
										RMPRSssLicensorCertChain GetLicensorCertificateResult;
										XmlTag("GetLicensorCertificateResult") ETag;
									}
							}
						}
						
				}
				
				XmlTag("GetLicensorCertificateResponse") ETag;
			}
	}
}

//
// ComplexType LicensorCertChain
//
Struct RMPRSssLicensorCertChain
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "CertificateChain") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct CertificateChain = this.STag.ToString
			{
				[Post.Local.CertificateChain_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("CertificateChain") STag;
				switch
				{
					Case !Local.CertificateChain_IsEmpty:
						struct
						{
							RMPRSssArrayOfXmlNode CertificateChain;
							XmlTag("CertificateChain") ETag;
						}
				}
			}
			
	}
	
}

//
// ComplexType ArrayOfXmlNode
//
Struct RMPRSssArrayOfXmlNode
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Certificate") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		//
		// Embedded ComplexType 
		//
		struct Certificate = this.STag.ToString
		{
			[Post.Local.Certificate_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("Certificate") STag;
			switch
			{
				Case !Local.Certificate_IsEmpty:
					struct
					{
						XmlElement(true) OtherElement;
						XmlTag("Certificate") ETag;
					}
			}
		}
		
	}
}

//
// Element IsPrincipalMemberOf
// Embedded ComplexType 
//
struct RMPRSgewsIsPrincipalMemberOfElement = this.STag.ToString
{
	[Post.Local.RMPRSgewsIsPrincipalMemberOfElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("IsPrincipalMemberOf") STag;
	switch
	{
		Case !Local.RMPRSgewsIsPrincipalMemberOfElement_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "principalName") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct PrincipalName = this.PrincipalName
						{
							[Post.Local.PrincipalName_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("principalName") STag;
							switch
							{
								Case !Local.PrincipalName_IsEmpty:
									struct
									{
										StringTerm(Property.XMLEncoding, "<", true, false, false) PrincipalName;
										XmlTag("principalName") ETag;
									}
							}
						}
						
				}
				
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "principalCrossForest") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct PrincipalCrossForest = this.PrincipalCrossForest
						{
							[Post.Local.PrincipalCrossForest_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("principalCrossForest") STag;
							switch
							{
								Case !Local.PrincipalCrossForest_IsEmpty:
									struct
									{
										StringTerm(Property.XMLEncoding, "<", true, false, false) PrincipalCrossForest;
										XmlTag("principalCrossForest") ETag;
									}
							}
						}
						
				}
				
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "targetGroups") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct TargetGroups = this.STag.ToString
						{
							[Post.Local.TargetGroups_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("targetGroups") STag;
							switch
							{
								Case !Local.TargetGroups_IsEmpty:
									struct
									{
										RMPRSgewsArrayOfString TargetGroups;
										XmlTag("targetGroups") ETag;
									}
							}
						}
						
				}
				
				struct CrossForestCallsSoFar = this.CrossForestCallsSoFar
				{
					[Post.Local.CrossForestCallsSoFar_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("crossForestCallsSoFar") STag;
					switch
					{
						Case !Local.CrossForestCallsSoFar_IsEmpty:
							struct
							{
								StringTerm(Property.XMLEncoding, "<", true, false, false) CrossForestCallsSoFar;
								XmlTag("crossForestCallsSoFar") ETag;
							}
					}
				}
				
				XmlTag("IsPrincipalMemberOf") ETag;
			}
	}
}

//
// ComplexType ArrayOfString
//
Struct RMPRSgewsArrayOfString
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "string") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct String = this.String
		{
			[Post.Local.String_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("string") STag;
			switch
			{
				Case !Local.String_IsEmpty:
					struct
					{
						StringTerm(Property.XMLEncoding, "<", true, false, false) String;
						XmlTag("string") ETag;
					}
			}
		}
		
	}
}

//
// Element IsPrincipalMemberOfResponse
// Embedded ComplexType 
//
struct RMPRSgewsIsPrincipalMemberOfResponseElement = this.STag.ToString
{
	[Post.Local.RMPRSgewsIsPrincipalMemberOfResponseElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("IsPrincipalMemberOfResponse") STag;
	switch
	{
		Case !Local.RMPRSgewsIsPrincipalMemberOfResponseElement_IsEmpty:
			struct
			{
				struct IsPrincipalMemberOfResult = this.IsPrincipalMemberOfResult
				{
					[Post.Local.IsPrincipalMemberOfResult_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("IsPrincipalMemberOfResult") STag;
					switch
					{
						Case !Local.IsPrincipalMemberOfResult_IsEmpty:
							struct
							{
								StringTerm(Property.XMLEncoding, "<", true, false, false) IsPrincipalMemberOfResult;
								XmlTag("IsPrincipalMemberOfResult") ETag;
							}
					}
				}
				
				XmlTag("IsPrincipalMemberOfResponse") ETag;
			}
	}
}

//
// Element VersionData
//
[RegisterBefore(SoapHeader.SoapHeaderNodes.Node, VersionData, Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "VersionData"))]
struct RMPRSgewsVersionDataElement = this.STag.ToString
{
	[Post.Local.RMPRSgewsVersionDataElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("VersionData") STag;
	switch
	{
		Case !Local.RMPRSgewsVersionDataElement_IsEmpty:
			struct
			{
				RMPRSgewsVersionData VersionData;
				XmlTag("VersionData") ETag;
			}
	}
}

//
// ComplexType VersionData
//
Struct RMPRSgewsVersionData
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MinimumVersion") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct MinimumVersion = this.MinimumVersion
			{
				[Post.Local.MinimumVersion_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("MinimumVersion") STag;
				switch
				{
					Case !Local.MinimumVersion_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) MinimumVersion;
							XmlTag("MinimumVersion") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MaximumVersion") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct MaximumVersion = this.MaximumVersion
			{
				[Post.Local.MaximumVersion_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("MaximumVersion") STag;
				switch
				{
					Case !Local.MaximumVersion_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) MaximumVersion;
							XmlTag("MaximumVersion") ETag;
						}
				}
			}
			
	}
	
}

Table RMPRSSoapActionTable(value)
{
	Switch(value)
	{
		Case "http://microsoft.com/DRM/ServerService/FindServiceLocations":
		Case "http://microsoft.com/DRM/SubEnrollmentService/SubEnroll":
		Case "http://microsoft.com/DRM/ServerService/GetLicensorCertificate":
		Case "http://microsoft.com/DRM/GroupExpansionWebService/IsPrincipalMemberOf":
			true;
		Default:false;
	}
}

