//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Web Services Enumeration (WS-Enumeration)
//#
//#  Details:                
//#
//#  Public References:      http://specs.xmlsoap.org/ws/2004/09/enumeration/WS-Enumeration.pdf
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 3/11/2010
//#
//####

[Property.SoapBodySummary = "WS-Enumeration Payload"]
[RegisterBefore(SoapBody.DefaultSoapBody, WSEnumeration, WSEnumerationSoapActionTable(Property.SOAPAction))]
Protocol WSEnumeration = Property.WSEnumerationSummary
{
	Switch(Property.SOAPAction)
	{
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/Enumerate":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/EnumerateResponse":
			[Property.WSEnumerationSummary = this.ToString]
			WSEnumerationEnumerate Enumerate;
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/Pull":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/PullResponse":
			[Property.WSEnumerationSummary = this.ToString]
			WSEnumerationPull Pull;
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/Renew":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/RenewResponse":
			[Property.WSEnumerationSummary = this.ToString]
			WSEnumerationRenew Renew;
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/Release":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/ReleaseResponse":
			[Property.WSEnumerationSummary = this.ToString]
			WSEnumerationRelease Release;
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/EnumerationEnd":
			[Property.WSDeleteSummary = this.ToString]
			WSEnumerationEnumerationEnd EnumerationEnd;
		Default:
			[Property.WSEnumerationSummary = "The other Message"]
			While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
			{
				XmlElement(true) AnyNode;
			}
	}
}

struct WSEnumerationEnumerateElement = this.STag.ToString
{
	[Post.Local.WSEnumerationEnumerateElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Enumerate") STag;
	switch
	{
		Case !Local.WSEnumerationEnumerateElement_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EndTo") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct EndTo = this.STag.ToString
						{
							[Post.Local.EndTo_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("EndTo") STag;
							switch
							{
								Case !Local.EndTo_IsEmpty:
									struct
									{
										WSADDREndpointReferenceType EndTo;
										XmlTag("EndTo") ETag;
									}
							}
						}
						
				}
				
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Expires") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct Expires = this.STag.ToString
						{
							[Post.Local.Expires_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("Expires") STag;
							switch
							{
								Case !Local.Expires_IsEmpty:
									struct
									{
										StringTerm(Property.XMLEncoding, "<", true, false, false) Expires;
										XmlTag("Expires") ETag;
									}
							}
						}
						
				}
				
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Filter") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct Filter = this.STag.ToString
						{
							[Post.Local.Filter_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("Filter") STag;
							switch
							{
								Case !Local.Filter_IsEmpty:
									struct
									{
										Switch
										{
											case String(FrameData, FrameOffset, Property.XMLEncoding, 1) != "<":
													XmlElemContent FilterContent;
											Default:
												While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
												{
													XmlElement(true) OtherElement;
												}
										}
										XmlTag("Filter") ETag;
									}
							}
						}
				}
				
				While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
				{
					Switch
					{
						Default:
							XmlElement(true) OtherElement;
					}
				}
				XmlTag("Enumerate") ETag;
			}
	}
}

struct WSEnumerationEnumerateResponseElement = this.STag.ToString
{
	[Post.Local.WSEnumerationEnumerateResponseElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("EnumerateResponse") STag;
	switch
	{
		Case !Local.WSEnumerationEnumerateResponseElement_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Expires") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct Expires = this.STag.ToString
						{
							[Post.Local.Expires_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("Expires") STag;
							switch
							{
								Case !Local.Expires_IsEmpty:
									struct
									{
										StringTerm(Property.XMLEncoding, "<", true, false, false) Expires;
										XmlTag("Expires") ETag;
									}
							}
						}
						
				}
				
				struct EnumerationContext = this.STag.ToString
				{
					[Post.Local.EnumerationContext_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("EnumerationContext") STag;
					switch
					{
						Case !Local.EnumerationContext_IsEmpty:
							struct
							{
								WSEnumerationEnumerationContextType EnumerationContext;
								XmlTag("EnumerationContext") ETag;
							}
					}
				}
				
				While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
				{
					Switch
					{
						Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Items") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
							WSEnumerationItemsElement ItemsElement;
						Default:
							XmlElement(true) OtherElement;
					}
				}
				XmlTag("EnumerateResponse") ETag;
			}
	}
}

struct WSEnumerationEnumerate = FormatString("%s Message", Property.WSEnumerationEnumerateSummary)
{
	[Post.Local.WSEnumerationEnumerate_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.WSEnumerationEnumerate_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EnumerateResponse"):
						[Property.WSEnumerationEnumerateSummary = "Enumerate Response"]
						WSEnumerationEnumerateResponseElement EnumerateResponseElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Enumerate"):
						[Property.WSEnumerationEnumerateSummary = "Enumerate Request"]
						WSEnumerationEnumerateElement EnumerateElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSEnumerationEnumerateSummary = "Fault Enumerate Response"]
						SoapFaultElement FaultResourceCreatedElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSEnumerationEnumerateSummary = "Encrypted Enumerate Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						[Property.WSEnumerationEnumerateSummary = "Enumerate"]
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

//
// ComplexType EnumerationContextType
// Restricted as StringTerm(Property.XMLEncoding, "<", true, false, false)
//
Struct WSEnumerationEnumerationContextType
{
	Switch
	{
		case String(FrameData, FrameOffset, Property.XMLEncoding, 1) != "<":
				XmlElemContent value;
		Default:
			While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
			{
				XmlElement(true) OtherElement;
			}
	}
}

struct WSEnumerationPullElement= this.STag.ToString
{
	[Post.Local.WSEnumerationPullElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Pull") STag;
	switch
	{
		Case !Local.WSEnumerationPullElement_IsEmpty:
			struct
			{
				struct EnumerationContext= this.STag.ToString
				{
					[Post.Local.EnumerationContext_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("EnumerationContext") STag;
					switch
					{
						Case !Local.EnumerationContext_IsEmpty:
							struct
							{
								WSEnumerationEnumerationContextType EnumerationContext;
								XmlTag("EnumerationContext") ETag;
							}
					}
				}
				
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MaxTime") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct MaxTime=this.MaxTime
						{
							[Post.Local.MaxTime_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("MaxTime") STag;
							switch
							{
								Case !Local.MaxTime_IsEmpty:
									struct
									{
										StringTerm(Property.XMLEncoding, "<", true, false, false) MaxTime;
										XmlTag("MaxTime") ETag;
									}
							}
						}
				}
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MaxElements") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct MaxElements=this.MaxTime
						{
							[Post.Local.MaxElements_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("MaxElements") STag;
							switch
							{
								Case !Local.MaxElements_IsEmpty:
									struct
									{
										StringTerm(Property.XMLEncoding, "<", true, false, false) MaxElements;
										XmlTag("MaxElements") ETag;
									}
							}
						}
				}
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MaxCharacters") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct MaxCharacters=this.MaxCharacters
						{
							[Post.Local.MaxCharacters_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("MaxCharacters") STag;
							switch
							{
								Case !Local.MaxCharacters_IsEmpty:
									struct
									{
										StringTerm(Property.XMLEncoding, "<", true, false, false) MaxCharacters;
										XmlTag("MaxCharacters") ETag;
									}
							}
						}
				}
				
				While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
				{
					XmlElement(true) OtherElement;
				}
				XmlTag("Pull") ETag;
			}
	}
}

struct WSEnumerationPullResponseElement= this.STag.ToString
{
	[Post.Local.WSEnumerationPullResponseElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("PullResponse") STag;
	switch
	{
		Case !Local.WSEnumerationPullResponseElement_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EnumerationContext") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						struct EnumerationContext= this.STag.ToString
						{
							[Post.Local.EnumerationContext_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("EnumerationContext") STag;
							switch
							{
								Case !Local.EnumerationContext_IsEmpty:
									struct
									{
										WSEnumerationEnumerationContextType EnumerationContext;
										XmlTag("EnumerationContext") ETag;
									}
							}
						}
						
				}
				
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Items") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						WSEnumerationItemsElement ItemsElement;
				}
				
				Switch
				{
					Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EndOfSequence") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
						Struct WSEnumerationEndOfSequence
						{
							[Post.Local.EndOfSequenceElement_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("EndOfSequence") STag;
							switch
							{
								Case !Local.EndOfSequenceElement_IsEmpty:
									XmlTag("EndOfSequence") ETag;
							}
						}
				}
				XmlTag("PullResponse") ETag;
			}
	}
}

Struct WSEnumerationItemsElement
{
	[Post.Local.Items_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Items") STag;
	switch
	{
		Case !Local.Items_IsEmpty:
			Struct
			{
				While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
				{
					Switch
					{
						default:
							XmlElement(true) ElementNodes;
					}
				}
				XmlTag("Items") ETag;
			}
	}
}

struct WSEnumerationPull = FormatString("%s Message", Property.WSEnumerationPullSummary)
{
	[Post.Local.WSEnumerationPull_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.WSEnumerationPull_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "PullResponse"):
						[Property.WSEnumerationPullSummary = "Pull Response"]
						WSEnumerationPullResponseElement PullResponseElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Pull"):
						[Property.WSEnumerationPullSummary = "Pull Request"]
						WSEnumerationPullElement PullElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSEnumerationPullSummary = "Fault Pull Response"]
						SoapFaultElement FaultResourceCreatedElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSEnumerationPullSummary = "Encrypted Pull Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						[Property.WSEnumerationPullSummary = "Pull"]
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct WSEnumerationReleaseElement= this.STag.ToString
{
	[Post.Local.WSEnumerationReleaseElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Release") STag;
	switch
	{
		Case !Local.WSEnumerationReleaseElement_IsEmpty:
			struct
			{
				struct EnumerationContext= this.STag.ToString
				{
					[Post.Local.EnumerationContext_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("EnumerationContext") STag;
					switch
					{
						Case !Local.EnumerationContext_IsEmpty:
							struct
							{
								WSEnumerationEnumerationContextType EnumerationContext;
								XmlTag("EnumerationContext") ETag;
							}
					}
				}
				
				XmlTag("Release") ETag;
			}
	}
}

struct WSEnumerationRelease = FormatString("%s Message", Property.WSEnumerationReleaseSummary)
{
	[Post.Local.WSEnumerationRelease_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.WSEnumerationRelease_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Release"):
						[Property.WSEnumerationReleaseSummary = "Release Request"]
						WSEnumerationReleaseElement ReleaseElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSEnumerationReleaseSummary = "Fault Release Response"]
						SoapFaultElement FaultReleaseElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSEnumerationReleaseSummary = "Encrypted Release Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						[Property.WSEnumerationReleaseSummary = "Release"]
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct WSEnumerationRenew = FormatString("%s Message", Property.WSEnumerationRenewSummary)
{
	[Post.Local.WSEnumerationRenew_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.WSEnumerationRenew_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSEnumerationRenewSummary = "Fault Renew Response"]
						SoapFaultElement FaultReleaseElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSEnumerationRenewSummary = "Encrypted Renew Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						[Property.WSEnumerationRenewSummary = "Renew"]
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct WSEnumerationEnumerationEnd = FormatString("%s Message", Property.WSEnumerationEnumerationEndSummary)
{
	[Post.Local.WSEnumerationEnumerationEnd_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.WSEnumerationEnumerationEnd_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.WSEnumerationEnumerationEndSummary = "Fault EnumerationEnd Response"]
						SoapFaultElement FaultReleaseElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.WSEnumerationEnumerationEndSummary = "Encrypted EnumerationEnd Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						[Property.WSEnumerationEnumerationEndSummary = "EnumerationEnd"]
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

table WSEnumerationSoapActionTable(value)
{
	switch(value)
	{
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/Enumerate":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/EnumerateResponse":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/Pull":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/PullResponse":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/Renew":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/RenewResponse":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/Release":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/ReleaseResponse":
		Case "http://schemas.xmlsoap.org/ws/2004/09/enumeration/EnumerationEnd":true;
		default : false;
	}
}