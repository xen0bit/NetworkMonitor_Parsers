//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  T.127 Protocol
//#
//#  Details:                www.ITU.org specification
//#
//#  OEM References:         T.127 Multipoint Binary File Transfer Protocol.pdf
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 7/10/2009
//#
//####

//Application Sharing Structs

[DataTypeBitAlign]
struct T127FilenameAttribute
{
  [post.FileNameAttrSize = PERLengthValue]
  AsnPerLengthDeterminant Length;
  AsnPerGraphicString(-1,-1) nameAttribute[FileNameAttrSize];
}

[DataTypeBitAlign]
struct T127PermittedActionsAttribute
{
  AsnPerBitString(3,3) action;
}

[DataTypeBitAlign]
struct ISO85712Parameters
{
	UINT8 universalclassnumberPresent:1;
	UINT8 maximumstringlengthPresent:1;
	UINT8 stringsignificancePresent:1;
	switch
	{
		case universalclassnumberPresent : AsnPerInteger universalclassnumber;
	}
	switch
	{
		case maximumstringlengthPresent : AsnPerInteger maximumstringlength;
	}
	switch
	{
		case stringsignificancePresent : AsnPerInteger stringsignificance;
	}
}

[DataTypeBitAlign]
struct T127documenttype
{
	UINT8 parameterPresent:1;
	switch
	{
		case parameterPresent : ISO85712Parameters parameter;
	}
	AsnPerObjectIdentifier documenttypename;   
}

Table ContentsTypeAttributeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "document_type";
	}
}

[DataTypeBitAlign]
struct T127ContentsTypeAttribute  = ContentsTypeAttributeTable(0, Property.ContentsTypeAttributeChoice)		// CHOICE
{
	_struct NoneExtension
	{
		[Post.ContentsTypeAttributeChoice = ConstrainedValue]
		AsnPerConstrainedInteger(0, 0) ChoiceValue = ContentsTypeAttributeTable(0, Property.ConstrainedValue);
		switch (ContentsTypeAttributeChoice)
		{
			case 0: T127documenttype documenttype;
		}
	}
}

[DataTypeBitAlign]
struct T127ConcurrencyKey
{
  AsnPerBitString(2,2) key;
}

[DataTypeBitAlign]
struct T127ConcurrencyAccess	//Sequence
{
	T127ConcurrencyKey read;
	T127ConcurrencyKey insert;
	T127ConcurrencyKey replace;
	T127ConcurrencyKey extend;
	T127ConcurrencyKey erase;
	T127ConcurrencyKey readattribute;
	T127ConcurrencyKey changeattribute;
	T127ConcurrencyKey deletefile;   
}

[DataTypeBitAlign]
struct T127AccessPasswords	//Sequence
{
	T124Password readpassword;
	T124Password insertpassword;
	T124Password replacepassword;
	T124Password extendpassword;
	T124Password erasepassword;
	T124Password readattributepassword;
	T124Password changeattributepassword;
	T124Password deletepassword;   
}

struct T127AccessRequest
{
  AsnPerBitString(3,3) AccessRequestValue;
}

[DataTypeBitAlign]
struct T127AccessControlElement	//Sequence
{	
	UINT8 concurrencyaccessPresent:1;
	UINT8 identityPresent:1;
	UINT8 passwordsPresent:1;
	T127AccessRequest actionlist;
	switch
	{
		case concurrencyaccessPresent : T127ConcurrencyAccess concurrencyaccess;
	}
	switch
	{
		case identityPresent : AsnPerGraphicString(-1,-1) UserIDentity;
	}
	switch
	{
		case passwordsPresent : T127AccessPasswords passwords;
	}   
}

Table T127AccessControlAttributeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "simple-password";
		case (ExtensionBit == 0) && (Choice== 1): "actual-values";
	}
}

[DataTypeBitAlign]
struct T127AccessControlAttribute  = T127AccessControlAttributeTable(0, Property.AccessControlAttributeChoice)		// CHOICE
{
	_struct NoneExtension
	{
		[Post.AccessControlAttributeChoice = ConstrainedValue]
		AsnPerConstrainedInteger(0, 1) ChoiceValue = T127AccessControlAttributeTable(0, Property.ConstrainedValue);
		switch (AccessControlAttributeChoice)
		{
			case 0: AsnPerOctetString(-1, -1) simplepassword;
			case 1: 
				_struct actualvaluesstruct
				{
				[Post.PERArraySize = PERLengthValue]
				AsnPerLengthDeterminant Size;
				T127AccessControlElement actualvalues[PERArraySize];
				};
		}
	}
}

[DataTypeBitAlign]
struct T127PrivateUseAttribute	//Sequence
{
	UINT8 manufacturervaluesPresent:1;
	switch
	{
		case manufacturervaluesPresent : AsnPerExternal manufacturervalues;
	}   
}

[DataTypeBitAlign]
struct T127FileHeader
{
  UINT8 FileHeaderExtension:1;
  UINT8 protocolVersionPresent:1;
  UINT8 filenamePresent:1;
  UINT8 permittedactionsPresent:1;
  UINT8 contentstypePresent:1;
  UINT8 storageaccountPresent:1;
  UINT8 dateandtimeofcreationPresent:1;
  UINT8 dateandtimeoflastmodificationPresent:1;
  UINT8 dateandtimeoflastreadaccessPresent:1;
  
  UINT8 identityofcreatorPresent:1;
  UINT8 identityoflastmodifierPresent:1;
  UINT8 identityoflastreaderPresent:1;
  
  UINT8 filesizePresent:1;
  UINT8 futurefilesizePresent:1;
  UINT8 accesscontrolPresent:1;
  UINT8 legalqualificationsPresent:1;
  UINT8 privateusePresent:1;
  UINT8 structurePresent:1;
  UINT8 applicationreferencePresent:1;
  UINT8 machinePresent:1;
  UINT8 operatingsystemPresent:1;
  UINT8 recipientPresent:1;
  UINT8 charactersetPresent:1;
  UINT8 compressionPresent:1;
  UINT8 environmentPresent:1;
  UINT8 pathnamePresent:1;
  UINT8 uservisiblestringPresent:1;
  
  switch
  {
  	case protocolVersionPresent: AsnPerBitString(1,1) protocolVersion;
  }
  switch
  {
  	case filenamePresent: T127FilenameAttribute filename;
  }
  switch
  {
    case permittedactionsPresent: T127PermittedActionsAttribute permittedaction;
  }
  switch
  {
  	case contentstypePresent: T127ContentsTypeAttribute contentstype;
  }
  switch
  {
  	case storageaccountPresent: AsnPerGraphicString (-1,-1) storageaccount;
  }
  switch
  {
  	case dateandtimeofcreationPresent: AsnPerGeneralizedTime dateandtimeofcreation;
  }
  switch
  {
  	case dateandtimeoflastmodificationPresent: AsnPerGeneralizedTime dateandtimeoflastmodification;
  }
  switch
  {
  	case dateandtimeoflastreadaccessPresent: AsnPerGeneralizedTime dateandtimeoflastreadaccess;
  }
  switch
  {
  	case identityofcreatorPresent: AsnPerGraphicString (-1,-1) identityofcreator;
  }
  switch
  {
		case identityoflastmodifierPresent: AsnPerGraphicString (-1,-1) identityoflastmodifier;
	}
	switch
	{
		case identityoflastreaderPresent: AsnPerGraphicString (-1,-1) identityoflastreader;
	}
	switch
	{
		case filesizePresent: AsnPerInteger filesize;
	}
	switch
	{
		case futurefilesizePresent: AsnPerInteger futurefilesize;
	}
	switch
	{
		case accesscontrolPresent: T127AccessControlAttribute accesscontrol;
	}
	switch
	{
		case legalqualificationsPresent: AsnPerGraphicString (-1,-1) legalqualifications;
	}
	switch
	{
		case privateusePresent: T127PrivateUseAttribute privateuse;
	}
	switch
	{
		case structurePresent: AsnPerObjectIdentifier structure;
	}
	switch
	{
		case applicationreferencePresent: 
		_struct applicationreferencestruct
		{
			[Post.PERArraySize = PERLengthValue]
			AsnPerLengthDeterminant Size;
			AsnPerGraphicString (-1,-1) applicationreference[PERArraySize];
		};
	}
	switch
	{
		case machinePresent:
		_struct machinestruct
		{
			[Post.PERArraySize = PERLengthValue]
			AsnPerLengthDeterminant Size;
			AsnPerGraphicString (-1,-1) applicationreference[PERArraySize];
		};
	}
	switch
	{
		case operatingsystemPresent: AsnPerObjectIdentifier operatingsystem;
	}
	switch
	{
		case recipientPresent:
		_struct recipientstruct
		{
			[Post.PERArraySize = PERLengthValue]
			AsnPerLengthDeterminant Size;
			AsnPerGraphicString (-1,-1) recipient[PERArraySize];
		};
	}
	switch
	{
		case charactersetPresent: AsnPerObjectIdentifier characterset;
	}
	switch
	{
		case compressionPresent:
		_struct compressionstruct
		{
			[Post.PERArraySize = PERLengthValue]
			AsnPerLengthDeterminant Size;
			AsnPerGraphicString (-1,-1) compression[PERArraySize];			
		};
	}
	switch
	{
		case environmentPresent:
		_struct environmentstruct
		{
			[Post.PERArraySize = PERLengthValue]
			AsnPerLengthDeterminant Size;
			AsnPerGraphicString (-1,-1) environment[PERArraySize];				
		};
	}
	switch
	{
		case pathnamePresent:
		_struct pathnamestruct
		{
			[Post.PERArraySize = PERLengthValue]
			AsnPerLengthDeterminant Size;
			AsnPerGraphicString (-1,-1) pathname[PERArraySize];				
		};
	}
	switch
	{
		case uservisiblestringPresent:
		_struct uservisiblestringstruct
		{
			[Post.PERArraySize = PERLengthValue]
			AsnPerLengthDeterminant Size;
			AsnPerGraphicString (-1,-1) uservisiblestring[PERArraySize];				
		};
	}
}

[DataTypeBitAlign]
struct T127V42bisParameterList	//Sequence
{
	UINT8 ExtensionBit:1;
	AsnPerConstrainedInteger(512, 65535) p1;
	AsnPerConstrainedInteger(6, 250) p2;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T127CompressionSpecifierTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "v42bisparameters";
		case (ExtensionBit == 0) && (Choice== 1): "nonstandardcompressionparameters";

	}
}

[DataTypeBitAlign]
struct T127CompressionSpecifier = T127CompressionSpecifierTable(ExtensionBit, CompressionSpecifierChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.CompressionSpecifierChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T127CompressionSpecifierTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.CompressionSpecifierChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = T127CompressionSpecifierTable(ExtensionBit, ConstrainedValue);
				switch (CompressionSpecifierChoice)
				{
					case 0: T127V42bisParameterList v42bisparameters;
					case 1: 
						_struct nonstandardcompressionparametersstruct
						{
							[Post.PERArraySize = PERLengthValue]
							AsnPerLengthDeterminant Size;
							NonStandardParameter nonstandardcompressionparameters[PERArraySize];
						};
				}
			}
	}
}


[DataTypeBitAlign]
struct T127FileOfferPDU = FormatString ("DataChannelID=%s,ackflag=%s",datachannelid.ToString,ackflag.ToString)
{
	UINT8 ExtensionBit:1;
	
	UINT8 rosterinstancePresent:1;
	UINT8 filetransmittokenPresent:1;
	
	UINT8 fileOfferPDUfilerequesttokenPresent:1;
	UINT8 filerequesttokenPresent:1;
	
	UINT8 mbftIDPresent:1;
	UINT8 compressionspecifierPresent:1;
	UINT8 compressedfilesizePresent:1;
	T127FileHeader fileheader;
	[Post.Global.T124DynamicChannel$[SourceNetworkAddress < DestinationNetworkAddress ? MakeByteArray(SourceNetworkAddress, DestinationNetworkAddress, ChannelIdValue) 
																																										: MakeByteArray(DestinationNetworkAddress, SourceNetworkAddress, ChannelIdValue)] 
		= "0.0.20.127.0.1"]
	T124ChannelId datachannelid;
	T124Handle filehandle;
	switch
	{
		case rosterinstancePresent : AsnPerConstrainedInteger(0, 65535) rosterinstance;
	}
	switch
	{
		case filetransmittokenPresent : T124TokenID filetransmittoken;
	}
	switch
	{
		case filerequesttokenPresent : T124TokenID filerequesttoken;
	}
	switch
	{
		case compressionspecifierPresent : T127CompressionSpecifier compressionspecifier;
	}
	switch
	{
		case compressedfilesizePresent : AsnPerInteger compressedfilesize;
	}
	AsnPerBoolean(0) ackflag;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber; 
			}
	}
}

[DataTypeBitAlign]
struct T127FileAcceptPDU
{
	UINT8 ExtensionBit:1;
	T124Handle filehandle;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}


[DataTypeBitAlign]
struct T127FileRequestPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 filerequesttokenPresent:1;
	T127FileHeader fileheader;
	T124ChannelId datachannelid;
	T124Handle requesthandle;
	AsnPerConstrainedInteger(0, 65535) rosterinstance;
	T124TokenID filetransmittoken;
	switch
	{
		case filerequesttokenPresent : T124TokenID filerequesttoken;
	}
	AsnPerInteger dataoffset;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}


[DataTypeBitAlign]
struct T127DirectoryRequestPDU
{
	UINT8 ExtensionBit:1;
	UINT8 pathnamePresent:1;
	switch
	{
		case pathnamePresent : 
			_struct TestPer
			{
				AsnPerLengthDeterminant Size; 
				AsnPerOctetString(-1,-1) pathname[PERLengthValue];
			}
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}


[DataTypeBitAlign]
struct T127FileStartPDU	= FormatString ("eofflag=%s,crcflag=%s",eofflag.ToString,crcflag.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 compressionspecifierPresent:1;
	UINT8 compfilesizePresent:1;
	UINT8 crccheckPresent:1;
	T127FileHeader fileheader;
	T124Handle filehandle;
	AsnPerBoolean(0) eofflag;
	AsnPerBoolean(0) crcflag;
	switch
	{
		case compressionspecifierPresent : T127CompressionSpecifier compressionspecifier;
	}
	switch
	{
		case compfilesizePresent : AsnPerInteger compfilesize;
	}
	AsnPerInteger dataoffset;
	AsnPerOctetString(0, 65535) data;
	switch
	{
		case crccheckPresent : AsnPerConstrainedInteger(0, 4294967295) crccheck;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T127FileDataPDU = FormatString ("eofflag=%s,abortflag=%s,%s",eofflag.ToString,abortflag.ToString,data.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 CrcCheckPresent:1;
	T124Handle filehandle;
	AsnPerBoolean(0) eofflag;
	AsnPerBoolean(0) abortflag;
	AsnPerOctetString(0, 65535) data;
	switch
	{
		case CrcCheckPresent : AsnPerConstrainedInteger(0, 4294967295) CrcCheck;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T127MBFTPrivilegeTable(EnumeratedExt, EnumeratedIndex)
{
	switch 
	{
		case (EnumeratedExt == 0) && (EnumeratedIndex== 0): "file_transmit_privilege";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 1): "file_request_privilege";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 2): "create_private_privilege";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 3): "medium_priority_privilege";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 4): "abort_privilege";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 5): "nonstandard_privilege";
	}
}

struct T127MBFTPrivilege = T127MBFTPrivilegeTable(EnumeratedExt, EnumeratedIndex)
{
	AsnPerEnumerated(5, 1) MBFTPrivilege = T127MBFTPrivilegeTable(EnumeratedExt, EnumeratedIndex);
}

[DataTypeBitAlign]
struct T127mbftprvlg
{
	[Post.PERArraySize = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T127MBFTPrivilege mbftprvlg[PERArraySize];
}

[DataTypeBitAlign]
struct T127MBFTPrivilegeRequestPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	T127mbftprvlg mbftprvlg;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T127privilegelist
{
	UINT8 ExtensionBit:1;
	T124UserID mbftID;
	T127mbftprvlg mbftprvlg;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T127MBFTPrivilegeAssignPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	T127privilegelist privilegelist;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T127MBFTNonStandardPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	T124NonStandardParameter data;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T127PrivateChannelJoinInvitePDU = FormatString("ControlChannelID=%s,DataChannelID=%s",controlchannelid.ToString,datachannelid.ToString)	//Sequence
{
	UINT8 ExtensionBit:1;
	T124DynamicChannelId controlchannelid;
	T124DynamicChannelId datachannelid;
	AsnPerBoolean(0) mode;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T127RejectPDUReasonTable(EnumeratedExt, EnumeratedIndex)
{
	switch 
	{
		case (EnumeratedExt == 0) && (EnumeratedIndex== 0): "unspecified";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 1): "file_exists";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 2): "file_not_required";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 3): "insufficient_resources";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 4): "transfer_limit";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 5): "compression_unsupported";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 6): "unable_to_join_channel";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 7): "parameter_not_supported";

	}
}

[DataTypeBitAlign]
struct T127FileRejectPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	T124Handle filehandle;
	AsnPerEnumerated(7, 1) reason = T127RejectPDUReasonTable(EnumeratedExt, EnumeratedIndex);
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T127DenyPDUReasonTable(EnumeratedExt, EnumeratedIndex)
{
	switch 
	{
		case (EnumeratedExt == 0) && (EnumeratedIndex== 0): "unspecified";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 1): "file_not_present";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 2): "insufficient_privilege";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 3): "file_already_offered";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 4): "ambiguous";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 5): "no_channel";
	}
}


[DataTypeBitAlign]
struct T127FileDenyPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	T124Handle requesthandle;
	AsnPerEnumerated(5, 1) reason = T127DenyPDUReasonTable(EnumeratedExt, EnumeratedIndex);
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}


/*Table T127ErrorTypeTable(EnumeratedExt, EnumeratedIndex)
{
	switch 
	{
		case (EnumeratedExt == 0) && (EnumeratedIndex== 0): "informative";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 1): "transient_error";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 2): "permanent_error";

	}
}

AsnPerEnumerated(2, 1) ErrorType = T127ErrorTypeTable(EnumeratedExt, EnumeratedIndex);*/

Table T127AbortPDUReasonTable(EnumeratedExt, EnumeratedIndex)
{
	switch 
	{
		case (EnumeratedExt == 0) && (EnumeratedIndex== 0): "unspecified";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 1): "bandwidth_required";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 2): "tokens_required";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 3): "channels_required";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 4): "priority_required";

	}
}




[DataTypeBitAlign]
struct T127FileAbortPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 datachannelidPresent:1;
	UINT8 transmitterUserIDPresent:1;
	UINT8 filehandlePresent:1;
	AsnPerEnumerated(4, 1) reason = T127AbortPDUReasonTable(EnumeratedExt, EnumeratedIndex);
	switch
	{
		case datachannelidPresent : T124ChannelId datachannelid;
	}
	switch
	{
		case transmitterUserIDPresent : T124UserID transmitterUserID;
	}
	switch
	{
		case filehandlePresent : T124Handle filehandle;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}
/*
Table T127resultTable(EnumeratedExt, EnumeratedIndex)
{
	switch 
	{
		case (EnumeratedExt == 0) && (EnumeratedIndex== 0): "unspecified";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 1): "permission_denied";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 2): "function_not_supported";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 3): "successful";
	}
}
AsnPerEnumerated(3, 1) result = T127resultTable(EnumeratedExt, EnumeratedIndex);*/

Table T127resultTable(EnumeratedExt, EnumeratedIndex)
{
	switch 
	{
		case (EnumeratedExt == 0) && (EnumeratedIndex== 0): "unspecified";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 1): "unable_to_join_channel";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 2): "invitation_rejected";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 3): "successful";

	}
}

[DataTypeBitAlign]
struct T127PrivateChannelJoinResponsePDU = FormatString ("ControlChannelID=%s, Result=%s",controlchannelid.ToString,result.ToString)	//Sequence
{
	UINT8 ExtensionBit:1;
	T124DynamicChannelId controlchannelid;
	AsnPerEnumerated(3, 1) result = T127resultTable(EnumeratedExt, EnumeratedIndex);
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}
Table T127ErrorIDTable(Index)
{
	switch (Index)
	{
		case 0: "no-reason";
		case 1: "responder-error";
		case 2: "system-shutdown";
		case 3: "bft-management-problem";
		case 4: "bft-management-bad-account";
		case 5: "bft-management-security-not-passed";
		case 6: "delay-may-be-encountered";
		case 7: "initiator-error";
		case 8: "subsequent-error";
		case 9: "temporal-insufficiency-of-resources";
		case 10: "access-request-violates-VFS-security";
		case 11: "access-request-violates-local-security";
		case 1000: "conflicting-parameter-values";
		case 1001: "unsupported-parameter-values";
		case 1002: "mandatory-parameter-not-set";
		case 1003: "unsupported-parameter";
		case 1004: "duplicated-parameter";
		case 1005: "illegal-parameter-type";
		case 1006: "unsupported-parameter-types";
		case 1007: "bft-protocol-error";
		case 1008: "bft-protocol-error-procedure-error";
		case 1009: "bft-protocol-error-functional-unit-error";
		case 1010: "bft-protocol-error-corruption-error";
		case 1011: "lower-layer-failure";
		case 1013: "timeout";
		case 2020: "invalid-filestore-password";
		case 3000: "filename-not-found";
		case 3002: "initial-attributes-not-possible";
		case 3004: "non-existent-file";
		case 3005: "file-already-exists";
		case 3006: "file-cannot-be-created";
		case 3012: "file-busy";
		case 3013: "file-not-available";
		case 3017: "filename-truncated";
		case 3018: "initial-attributes-altered";
		case 3019: "bad-account";
		case 3024: "ambiguous-file-specification";
		case 4000: "attribute-non-existent";
		case 4003: "attribute-not-supported";
		case 4004: "bad-attribute-name";
		case 4005: "bad-attribute-value";
		case 4006: "attribute-partially-supported";
		case 5014: "bad-data-element-type";
		case 5015: "operation-not-available";
		case 5016: "operation-not-supported";
		case 5017: "operation-inconsistent";
		case 5026: "bad-write";
		case 5027: "bad-read";
		case 5028: "local-failure";
		case 5029: "local-failure-filespace-exhausted";
		case 5030: "local-failure-data-corrupted";
		case 5031: "local-failure-device-failure";
		case 5032: "future-filesize-exceeded";
		case 5034: "future-filesize-increased";
		default: "Unknown ID";
	}
}

struct T127ErrorID = T127ErrorIDTable(ConstrainedValue)
{
	AsnPerConstrainedInteger(0, 5034) id = T127ErrorIDTable(ConstrainedValue);
}

Table T127ErrorTypeTable(EnumeratedExt, EnumeratedIndex)
{
	switch 
	{
		case (EnumeratedExt == 0) && (EnumeratedIndex== 0): "informative - No recovery required";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 1): "transient_error - Current transfer failed, future transfers may be OK";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 2): "permanent_error - Error occurs each time file transfer is performed";
	}
}

[DataTypeBitAlign]
struct T127FileErrorPDU	= FormatString("ErrorType=%s, ErrorID=%s",ErrorType.ToString, ErrorID.ToString)//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 FileHandlePresent:1;
	UINT8 ErrorTextPresent:1;
	
	switch
	{
		case FileHandlePresent : T124Handle FileHandle;
	}
	AsnPerEnumerated(2, 1) ErrorType = T127ErrorTypeTable(EnumeratedExt, EnumeratedIndex);
	T127ErrorID ErrorID;
	switch
	{
		case ErrorTextPresent : T124TextString ErrorText;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table T127ResponsePDUResultTable(EnumeratedExt, EnumeratedIndex)
{
	switch 
	{
		case (EnumeratedExt == 0) && (EnumeratedIndex== 0): "unspecified";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 1): "permission_denied";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 2): "function_not_supported";
		case (EnumeratedExt == 0) && (EnumeratedIndex== 3): "successful";
	}
}

struct T127pathname
{
	[Post.PERArraySize = PERLengthValue]
	AsnPerLengthDeterminant Size;
	AsnPerGraphicString(-1, -1) pathname[PERArraySize];
}

[DataTypeBitAlign]
struct T127DirectoryEntry	//Sequence
{
	UINT8 ExtensionBit:1;
	AsnPerBoolean(0) subdirectoryflag;
	T127FileHeader attributes;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

struct T127directorylist
{
	[Post.PERArraySize = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T127DirectoryEntry directorylist[PERArraySize];
}

[DataTypeBitAlign]
struct T127DirectoryResponsePDU	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 pathnamePresent:1;
	AsnPerEnumerated(3, 1) result = T127ResponsePDUResultTable(EnumeratedExt, EnumeratedIndex);
	switch
	{
		case pathnamePresent : T127pathname pathname;
	}
	T127directorylist directorylist;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}





Table T127MBFTPDUTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "file_OfferPDU";
		case (ExtensionBit == 0) && (Choice== 1): "file_AcceptPDU";
		case (ExtensionBit == 0) && (Choice== 2): "file_RejectPDU";
		case (ExtensionBit == 0) && (Choice== 3): "file_RequestPDU";
		case (ExtensionBit == 0) && (Choice== 4): "file_DenyPDU";
		case (ExtensionBit == 0) && (Choice== 5): "file_ErrorPDU";
		case (ExtensionBit == 0) && (Choice== 6): "file_AbortPDU";
		case (ExtensionBit == 0) && (Choice== 7): "file_StartPDU";
		case (ExtensionBit == 0) && (Choice== 8): "file_DataPDU";
		case (ExtensionBit == 0) && (Choice== 9): "directory_RequestPDU";
		case (ExtensionBit == 0) && (Choice== 10): "directory_ResponsePDU";
		case (ExtensionBit == 0) && (Choice== 11): "mbft_Privilege_RequestPDU";
		case (ExtensionBit == 0) && (Choice== 12): "mbft_Privilege_AssignPDU";
		case (ExtensionBit == 0) && (Choice== 13): "mbft_NonStandardPDU";
		case (ExtensionBit == 0) && (Choice== 14): "private_Channel_Join_InvitePDU";
		case (ExtensionBit == 0) && (Choice== 15): "private_Channel_Join_ResponsePDU";
		//add by shen lei 6/7/06
		case (ExtensionBit == 0) && (Choice== 16): "NonStandard MBFT";
		case (ExtensionBit == 0) && (Choice== 17): "NonStandard File Transfered";
		case (ExtensionBit == 0) && (Choice== 18): "NonStandard ChannelLeave";


	}
}

[DataTypeBitAlign]
struct T127MBFTPDU = T127MBFTPDUTable(ExtensionBit, MBFTPDUChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.MBFTPDUChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = T127MBFTPDUTable(ExtensionBit, PERSmallNumber);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.MBFTPDUChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 15) ChoiceValue = T127MBFTPDUTable(ExtensionBit, ConstrainedValue);
				switch (MBFTPDUChoice)
				{
					case  0: [post.T127FrameSummary = T127FrameSummary + "fileOfferPDU ," + fileOfferPDU.ToString]
								 	 T127FileOfferPDU fileOfferPDU;
					case  1: [post.T127FrameSummary = T127FrameSummary + "fileAccpetPDU"]
									 T127FileAcceptPDU fileAcceptPDU;
					case  2: T127FileRejectPDU fileRejectPDU;
					case  3: T127FileRequestPDU fileRequestPDU;
					case  4: T127FileDenyPDU fileDenyPDU;
					case  5: [post.T127FrameSummary = T127FrameSummary + "fileErrorPDU"]
									 T127FileErrorPDU fileErrorPDU;
					case  6: T127FileAbortPDU fileAbortPDU;
					case  7: [post.T127FrameSummary = T127FrameSummary + "fileStartPDU ," + fileStartPDU.ToString]
									 T127FileStartPDU fileStartPDU;
					case  8: [post.T127FrameSummary = T127FrameSummary + "fileDataPDU ," + fileDataPDU.ToString]
									 T127FileDataPDU fileDataPDU;
					case  9: T127DirectoryRequestPDU directoryRequestPDU;
					case 10: T127DirectoryResponsePDU directoryResponsePDU;
					case 11: T127MBFTPrivilegeRequestPDU mbftPrivilegeRequestPDU;
					case 12: T127MBFTPrivilegeAssignPDU mbftPrivilegeAssignPDU;
					case 13: [post.T127FrameSummary = T127FrameSummary + "mbftNonStandardPDU"]
									 T127MBFTNonStandardPDU mbftNonStandardPDU;
					case 14: [post.T127FrameSummary = T127FrameSummary + "PrivateChannelJoinInvitePDU ," + PrivateChannelJoinInvitePDU.ToString]
									 T127PrivateChannelJoinInvitePDU privateChannelJoinInvitePDU;
					case 15: [post.T127FrameSummary = T127FrameSummary + "PrivateChannelJoinResponsePDU ," + PrivateChannelJoinResponsePDU.ToString]
									 T127PrivateChannelJoinResponsePDU privateChannelJoinResponsePDU;

				}
			}
	}
}
