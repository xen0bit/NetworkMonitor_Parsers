//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-DhcpClientDll
//#
//#  Details:                
//#
//#  Public References:      DhcpClientDll.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 7/7/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsDhcpClient, "{15A7A4F8-0072-4EAB-ABAD-F98A4D666AED}")]
Protocol DhcpClientDll_MicrosoftWindowsDhcpClient = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 50001: [property.ETLSummary = this.ToString] DhcpClientDll_MediaConnect MediaConnect;
		case 50002: [property.ETLSummary = this.ToString] DhcpClientDll_MediaDisconnect MediaDisconnect;
		case 50003: [property.ETLSummary = this.ToString] DhcpClientDll_MediaReconnect MediaReconnect;
		case 50004: [property.ETLSummary = this.ToString] DhcpClientDll_DhcpEnabled DhcpEnabled;
		case 50005: [property.ETLSummary = this.ToString] DhcpClientDll_DhcpDisabled DhcpDisabled;
		case 50006: [property.ETLSummary = this.ToString] DhcpClientDll_InitRequestAck InitRequestAck;
		case 50007: [property.ETLSummary = this.ToString] DhcpClientDll_InitDORA InitDORA;
		case 50008: [property.ETLSummary = this.ToString] DhcpClientDll_StaticToDhcp StaticToDhcp;
		case 50009: [property.ETLSummary = this.ToString] DhcpClientDll_DiscoverSent DiscoverSent;
		case 50010: [property.ETLSummary = this.ToString] DhcpClientDll_OfferReceived OfferReceived;
		case 50011: [property.ETLSummary = this.ToString] DhcpClientDll_OfferDiscarded OfferDiscarded;
		case 50012: [property.ETLSummary = this.ToString] DhcpClientDll_RequestSent RequestSent;
		case 50013: [property.ETLSummary = this.ToString] DhcpClientDll_AckReceived AckReceived;
		case 50014: [property.ETLSummary = this.ToString] DhcpClientDll_AckDiscarded AckDiscarded;
		case 50015: [property.ETLSummary = this.ToString] DhcpClientDll_NackReceived NackReceived;
		case 50016: [property.ETLSummary = this.ToString] DhcpClientDll_UnknownMessageDiscarded UnknownMessageDiscarded;
		case 50017: [property.ETLSummary = this.ToString] DhcpClientDll_DeclineSent DeclineSent;
		case 50018: [property.ETLSummary = this.ToString] DhcpClientDll_InformSent InformSent;
		case 50019: [property.ETLSummary = this.ToString] DhcpClientDll_ReleaseSent ReleaseSent;
		case 50020: [property.ETLSummary = this.ToString] DhcpClientDll_BroadcastbitToggled BroadcastbitToggled;
		case 50021: [property.ETLSummary = this.ToString] DhcpClientDll_ErrorExtractingOptions ErrorExtractingOptions;
		case 50022: [property.ETLSummary = this.ToString] DhcpClientDll_FallBackConfig FallBackConfig;
		case 50023: [property.ETLSummary = this.ToString] DhcpClientDll_OfferReceiveTimeout OfferReceiveTimeout;
		case 50024: [property.ETLSummary = this.ToString] DhcpClientDll_AckReceiveTimeout AckReceiveTimeout;
		case 50025: [property.ETLSummary = this.ToString] DhcpClientDll_CancelRenewal CancelRenewal;
		case 50028: [property.ETLSummary = this.ToString] DhcpClientDll_AddressPlumbed AddressPlumbed;
		case 50029: [property.ETLSummary = this.ToString] DhcpClientDll_AddressUnplumbed AddressUnplumbed;
		case 50030: [property.ETLSummary = this.ToString] DhcpClientDll_PlumbingError PlumbingError;
		case 50032: [property.ETLSummary = this.ToString] DhcpClientDll_LeaseExpired LeaseExpired;
		case 50033: [property.ETLSummary = this.ToString] DhcpClientDll_InterfaceAdded InterfaceAdded;
		case 50034: [property.ETLSummary = this.ToString] DhcpClientDll_ErrorInitializeInterface ErrorInitializeInterface;
		case 50035: [property.ETLSummary = this.ToString] DhcpClientDll_RoutesUpdate RoutesUpdate;
		case 50036: [property.ETLSummary = this.ToString] DhcpClientDll_ServiceStart ServiceStart;
		case 50037: [property.ETLSummary = this.ToString] DhcpClientDll_ServiceStop ServiceStop;
		case 50038: [property.ETLSummary = this.ToString] DhcpClientDll_ErrorInitService ErrorInitService;
		case 50039: [property.ETLSummary = this.ToString] DhcpClientDll_ErrorOpeningSocket ErrorOpeningSocket;
		case 50040: [property.ETLSummary = this.ToString] DhcpClientDll_ErrorClosingSocket ErrorClosingSocket;
		case 50041: [property.ETLSummary = this.ToString] DhcpClientDll_DomainChangeNotification DomainChangeNotification;
		case 50042: [property.ETLSummary = this.ToString] DhcpClientDll_DnsRegistration DnsRegistration;
		case 50043: [property.ETLSummary = this.ToString] DhcpClientDll_DnsDeregistration DnsDeregistration;
		case 50044: [property.ETLSummary = this.ToString] DhcpClientDll_InformAckReceived InformAckReceived;
		case 50053: [property.ETLSummary = this.ToString] DhcpClientDll_NetworkError NetworkError;
		case 50055: [property.ETLSummary = this.ToString] DhcpClientDll_GatewayReachable GatewayReachable;
		case 50056: [property.ETLSummary = this.ToString] DhcpClientDll_GatewayUnreachable GatewayUnreachable;
		case 50058: [property.ETLSummary = this.ToString] DhcpClientDll_SuccessfulLease SuccessfulLease;
		case 50059: [property.ETLSummary = this.ToString] DhcpClientDll_RouteAdd RouteAdd;
		case 50060: [property.ETLSummary = this.ToString] DhcpClientDll_RouteDelete RouteDelete;
		case 50061: [property.ETLSummary = this.ToString] DhcpClientDll_OfferReceivedForDiagnostics OfferReceivedForDiagnostics;
		case 50062: [property.ETLSummary = this.ToString] DhcpClientDll_StartGatewayReachabilityTest StartGatewayReachabilityTest;
		case 50063: [property.ETLSummary = this.ToString] DhcpClientDll_NLANotified NLANotified;
		case 50064: [property.ETLSummary = this.ToString] DhcpClientDll_CacheScavengerRun CacheScavengerRun;
		case 50065: [property.ETLSummary = this.ToString] DhcpClientDll_NetworkHintMatchFound NetworkHintMatchFound;
		case 50066: [property.ETLSummary = this.ToString] DhcpClientDll_MatchedAddressPlumbed MatchedAddressPlumbed;
		case 50067: [property.ETLSummary = this.ToString] DhcpClientDll_NetworkHintReceived NetworkHintReceived;
		case 50068: [property.ETLSummary = this.ToString] DhcpClientDll_AddressAlreadyExists AddressAlreadyExists;
		case 60000: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackWlanDHCPAckConfirm PerftrackWlanDHCPAckConfirm;
		case 60001: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackWlanDHCPAckDora PerftrackWlanDHCPAckDora;
		case 60002: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackWlanDHCPGatewayReachable PerftrackWlanDHCPGatewayReachable;
		case 60003: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackWlanDHCPStatic PerftrackWlanDHCPStatic;
		case 60004: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackWlanDHCPFallbackAddress PerftrackWlanDHCPFallbackAddress;
		case 60005: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackWlanDHCPToggleAckConfirm PerftrackWlanDHCPToggleAckConfirm;
		case 60006: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackWlanDHCPToggleAckDora PerftrackWlanDHCPToggleAckDora;
		case 60007: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackWlanDHCPToggleAckDoraInit PerftrackWlanDHCPToggleAckDoraInit;
		case 60010: [property.ETLSummary = this.ToString] DhcpClientDll_SelfPerftrackDHCPRequestAck SelfPerftrackDHCPRequestAck;
		case 60011: [property.ETLSummary = this.ToString] DhcpClientDll_SelfPerftrackDHCPDoraAck SelfPerftrackDHCPDoraAck;
		case 60012: [property.ETLSummary = this.ToString] DhcpClientDll_SelfPerftrackDHCPGatewayReachable SelfPerftrackDHCPGatewayReachable;
		case 60013: [property.ETLSummary = this.ToString] DhcpClientDll_SelfPerftrackDHCPStatic SelfPerftrackDHCPStatic;
		case 60014: [property.ETLSummary = this.ToString] DhcpClientDll_SelfPerftrackDHCPFallbackAddress SelfPerftrackDHCPFallbackAddress;
		case 60015: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackDHCPToggleRequestAck PerftrackDHCPToggleRequestAck;
		case 60016: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackDHCPToggleDoraAck PerftrackDHCPToggleDoraAck;
		case 60017: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackDHCPToggleInitDora PerftrackDHCPToggleInitDora;
		case 60018: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackDHCPMediaConnect PerftrackDHCPMediaConnect;
		case 60019: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackDHCPMediaConnectEnd PerftrackDHCPMediaConnectEnd;
		case 60020: [property.ETLSummary = this.ToString] DhcpClientDll_PerftrackDHCPMediaReconnect PerftrackDHCPMediaReconnect;
		case 0x000003E8: [property.ETLSummary = this.ToString] DhcpClientDll_LostIpAddress LostIpAddress;
		case 0x000003E9: [property.ETLSummary = this.ToString] DhcpClientDll_IpAddressNotAssigned IpAddressNotAssigned;
		case 0x000003EA: [property.ETLSummary = this.ToString] DhcpClientDll_IpLeaseDenied IpLeaseDenied;
		case 0x000003EB: [property.ETLSummary = this.ToString] DhcpClientDll_IpLeaseRenewalFailed IpLeaseRenewalFailed;
		case 0x000003EC: [property.ETLSummary = this.ToString] DhcpClientDll_ErrorServiceStop ErrorServiceStop;
		case 0x000003ED: [property.ETLSummary = this.ToString] DhcpClientDll_IpConflict IpConflict;
		case 0x000003EE: [property.ETLSummary = this.ToString] DhcpClientDll_AutoConfigFailed AutoConfigFailed;
		case 0x000003EF: [property.ETLSummary = this.ToString] DhcpClientDll_AutoConfigSuccess AutoConfigSuccess;
		case 0x000003F0: [property.ETLSummary = this.ToString] DhcpClientDll_InitNetworkInterfaceFailed InitNetworkInterfaceFailed;
		case 0x000003FA: [property.ETLSummary = this.ToString] DhcpClientDll_Dhcpv6InitFailed Dhcpv6InitFailed;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct DhcpClientDll_MediaConnect = FormatString("Media Connect notification received with Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_MediaDisconnect = FormatString("Media Disconnect notification received with Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_MediaReconnect = FormatString("Media Reconnect notification received with Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_DhcpEnabled = FormatString("Dhcp is enabled on the adapter with Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_DhcpDisabled = FormatString("Dhcp is disabled on the adapter with Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_InitRequestAck = FormatString("Request-Ack is initiated on the adapter with Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_InitDORA = FormatString("Discover-Offer-Request-Ack is initiated on the adapter with Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_StaticToDhcp = FormatString("Interface is converted from static to dhcp on the adapter with Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_DiscoverSent = FormatString("Discover is sent from the adapter %s.Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_OfferReceived = FormatString("Offer is accepted in the adapter %s.Offered Address is %s.Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_OfferDiscarded = FormatString("Offer is discarded in the adapter %s. Error code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_RequestSent = FormatString("Request is sent from the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_AckReceived = FormatString("Ack is accepted in the adapter %s. Received Address is %s.Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_AckDiscarded = FormatString("Ack is discarded in the adapter %s. Error code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_NackReceived = FormatString("Nack is received in the adapter %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_UnknownMessageDiscarded = FormatString("Unknown message is discarded in the adapter %s.", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_DeclineSent = FormatString("Decline is sent in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_InformSent = FormatString("Inform is sent in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_ReleaseSent = FormatString("Release is sent in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_BroadcastbitToggled = FormatString("Broadcast bit is toggled in the adapter %s. Broadcast bit after toggling is %s", InterfaceId.ToString, BoolFlag.ToString)
{
	UINT32 InterfaceId;
	BOOL BoolFlag;
}
Struct DhcpClientDll_ErrorExtractingOptions = FormatString("Error occurred in extracting the options in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_FallBackConfig = FormatString("Setting up Fallback configuration in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_OfferReceiveTimeout = FormatString("Offer Receive Timeout has happened in the Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_AckReceiveTimeout = FormatString("Ack Receive Timeout has happened in the Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_CancelRenewal = FormatString("Cancelling pending renewals on the adapter in the Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_AddressPlumbed = FormatString("Address %s is plumbed to the adapter %s. Status code is %s", Address.ToString, InterfaceId.ToString, StatusCode.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_AddressUnplumbed = FormatString("Address %s is unplumbed from  the adapter %s. Status code is %s", Address.ToString, InterfaceId.ToString, StatusCode.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_PlumbingError = FormatString("Plumbing error has occurred in the adapter %s. Status Code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_LeaseExpired = FormatString("Lease is expired in the adapter %s. Expired address is %s", InterfaceId.ToString, Address.ToString)
{
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
}
Struct DhcpClientDll_InterfaceAdded = FormatString("An interface is added whose interface index is %s and Status Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_ErrorInitializeInterface = FormatString("An error has occurred in initializing the adapter %s. Error Code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_RoutesUpdate = FormatString("Routes are updated in the adapter %s. Status Code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_ServiceStart = "DHCPv4 client service is started" {}; // Empty Struct
Struct DhcpClientDll_ServiceStop = FormatString("DHCPv4 client service is stopped. ShutDown Flag value is %s", DwordVal.ToString)
{
	UINT32 DwordVal;
}
Struct DhcpClientDll_ErrorInitService = FormatString("An error occurred in initializing DHCPv4. Error Code is %s", StatusCode.ToString)
{
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_ErrorOpeningSocket = FormatString("An error has occurred in opening the socket in the adapter %s. Error Code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_ErrorClosingSocket = FormatString("An error has occurred in closing the socket in the adapter %s. Error Code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_DomainChangeNotification = "Domain change notification is received from DNS" {}; // Empty Struct
Struct DhcpClientDll_DnsRegistration = FormatString("Dns registration has happened for the adapter %s. Status Code is %s. DNS Flag settings is %s.", InterfaceId.ToString, StatusCode.ToString, Dword.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
	UINT32 Dword;
}
Struct DhcpClientDll_DnsDeregistration = FormatString("Dns Deregistration has happened for the adapter %s. Status Code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_InformAckReceived = FormatString("Inform ack is received in the adapter %s.", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_NetworkError = FormatString("A network error occurred when trying to send a message. The error code is: %s.", StatusCode.ToString)
{
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_GatewayReachable = FormatString("Gateway is reachable in the adapter %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_GatewayUnreachable = FormatString("Gateway is not reachable in the adapter %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_SuccessfulLease = "Your computer was successfully assigned an address from the network, and it can now connect to other computers." {}; // Empty Struct
Struct DhcpClientDll_RouteAdd = FormatString("Route is added with the values Dest = %s, DestMask = %s, NextHop = %s, Address = %s", Str1.ToString, Str2.ToString, Str3.ToString, Str4.ToString)
{
	UnicodeString Str1;
	UnicodeString Str2;
	UnicodeString Str3;
	UnicodeString Str4;
}
Struct DhcpClientDll_RouteDelete = FormatString("Route is deleted with the values Dest = %s, DestMask = %s, NextHop = %s, Address = %s", Str1.ToString, Str2.ToString, Str3.ToString, Str4.ToString)
{
	UnicodeString Str1;
	UnicodeString Str2;
	UnicodeString Str3;
	UnicodeString Str4;
}
Struct DhcpClientDll_OfferReceivedForDiagnostics = FormatString("An offer is received for the dummy discovers that are sent for Diagnostics in the adapter %s.", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_StartGatewayReachabilityTest = FormatString("Checking reachability of gateway %s on the the interface %s", Address.ToString, InterfaceId.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	UINT32 InterfaceId;
}
Struct DhcpClientDll_NLANotified = FormatString("Dhcp has notified NLA for the configuration changes for the interface %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpClientDll_CacheScavengerRun = FormatString("Dhcp has run the cache scavenger for the Network Card with the network address %s", HWAddress.ToString)
{
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
}
Struct DhcpClientDll_NetworkHintMatchFound = FormatString("Dhcp has found match in cache for network hint %s for the Network Card with the network address %s", NetworkHint.ToString, HWAddress.ToString)
{
	UnicodeString NetworkHint;
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
}
Struct DhcpClientDll_MatchedAddressPlumbed = FormatString("Dhcp has plumbed address using network hint %s for the Network Card with the network address %s", NetworkHint.ToString, HWAddress.ToString)
{
	UnicodeString NetworkHint;
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
}
Struct DhcpClientDll_NetworkHintReceived = FormatString("Dhcp has received network hint %s for the Network Card with the network address %s", NetworkHint.ToString, HWAddress.ToString)
{
	UnicodeString NetworkHint;
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
}
Struct DhcpClientDll_AddressAlreadyExists = FormatString("Address %s being plumbed for adapter %s already exists", Address.ToString, InterfaceId.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	UINT32 InterfaceId;
}
Struct DhcpClientDll_PerftrackWlanDHCPAckConfirm = FormatString("PERFTRACK (Request-Ack): Address confirmed for the adapter %s.Confirmed Address is %s.Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_PerftrackWlanDHCPAckDora = FormatString("PERFTRACK (DORA): Offer is accepted in the adapter %s.Offered Address is %s.Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_PerftrackWlanDHCPGatewayReachable = FormatString("PERFTRACK: Gateway is reachable in the adapter %s", InterfaceId.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
}
Struct DhcpClientDll_PerftrackWlanDHCPStatic = FormatString("PERFTRACK: DHCP not enabled in the adapter %s", InterfaceId.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
}
Struct DhcpClientDll_PerftrackWlanDHCPFallbackAddress = FormatString("PERFTRACK: Setting up Fallback configuration in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_PerftrackWlanDHCPToggleAckConfirm = FormatString("PERFTRACK (Request-Ack): Address confirmed for the adapter %s after toggling the broadcast bit in INIT-REBOOT. Confirmed address is %s. Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_PerftrackWlanDHCPToggleAckDora = FormatString("PERFTRACK (Request-Nack-Dora): Offer is accepted in the adapter %s after toggling the broadcast bit in INIT-REBOOT. Offered Address is %s. Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_PerftrackWlanDHCPToggleAckDoraInit = FormatString("PERFTRACK (Init-Dora): Offer is accepted in the adapter %s after toggling the broadcast bit in INIT. Offered Address is %s. Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_SelfPerftrackDHCPRequestAck = FormatString("PERFTRACK (Request-Ack): Address confirmed for the adapter %s.Confirmed Address is %s.Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_SelfPerftrackDHCPDoraAck = FormatString("PERFTRACK (DORA): Offer is accepted in the adapter %s.Offered Address is %s.Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_SelfPerftrackDHCPGatewayReachable = FormatString("PERFTRACK: Gateway is reachable in the adapter %s", InterfaceId.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
}
Struct DhcpClientDll_SelfPerftrackDHCPStatic = FormatString("PERFTRACK: DHCP not enabled in the adapter %s", InterfaceId.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
}
Struct DhcpClientDll_SelfPerftrackDHCPFallbackAddress = FormatString("PERFTRACK: Setting up Fallback configuration in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_PerftrackDHCPToggleRequestAck = FormatString("PERFTRACK (Request-Ack): Address confirmed for the adapter %s after toggling the broadcast bit in INIT-REBOOT. Confirmed address is %s. Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_PerftrackDHCPToggleDoraAck = FormatString("PERFTRACK (Request-Nack-Dora): Offer is accepted in the adapter %s after toggling the broadcast bit in INIT-REBOOT. Offered Address is %s. Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_PerftrackDHCPToggleInitDora = FormatString("PERFTRACK (Init-Dora): Offer is accepted in the adapter %s after toggling the broadcast bit in INIT. Offered Address is %s. Server address is %s", InterfaceId.ToString, Address1.ToString, Address2.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_PerftrackDHCPMediaConnect = FormatString("PERFTRACK (DHCPv4): Media Connect on adapter %s", InterfaceId.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
}
Struct DhcpClientDll_PerftrackDHCPMediaConnectEnd = FormatString("PERFTRACK (DHCPv4): End of Media Connect on adapter %s", InterfaceId.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
}
Struct DhcpClientDll_PerftrackDHCPMediaReconnect = FormatString("PERFTRACK (Media Reconnect): Media reconnect notification was received on adapter %s", InterfaceId.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
}
Struct DhcpClientDll_LostIpAddress = FormatString("Your computer has lost the lease to its IP address %s on the Network Card with network address %s.", Address.ToString, HWAddress.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
}
Struct DhcpClientDll_IpAddressNotAssigned = FormatString("Your computer was not assigned an address from the network (by the DHCP Server) for the Network Card with network address %s.  The following error occurred: %s. Your computer will continue to try and obtain an address on its own from the network address (DHCP) server.", HWAddress.ToString, StatusCode.ToString)
{
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_IpLeaseDenied = FormatString("The IP address lease %s for the Network Card with network address %s has been denied by the DHCP server %s (The DHCP Server sent a DHCPNACK message).", Address1.ToString, HWAddress.ToString, Address2.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address Address1;
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
	[DataFieldByteOrder = BigEndian]IPv4Address Address2;
}
Struct DhcpClientDll_IpLeaseRenewalFailed = FormatString("Your computer was not able to renew its address from the network (from the DHCP Server) for the Network Card with network address %s.  The following error occurred: %s. Your computer will continue to try and obtain an address on its own from the network address (DHCP) server.", HWAddress.ToString, StatusCode.ToString)
{
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_ErrorServiceStop = FormatString("Error occurred in stopping the Dhcpv4 Client service. Error code is %s. ShutDown Flag value is %s", StatusCode.ToString, DwordVal.ToString)
{
	WinErrorCode StatusCode;
	UINT32 DwordVal;
}
Struct DhcpClientDll_IpConflict = FormatString("Your computer has detected that the IP address %s for the Network Card with network address %s is already in use on the network. Your computer will automatically attempt to obtain a different address.", Address.ToString, HWAddress.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
}
Struct DhcpClientDll_AutoConfigFailed = FormatString("Your computer was unable to automatically configure the IP parameters for the Network Card with the network address %s.  The following error occurred during configuration: %s.", HWAddress.ToString, StatusCode.ToString)
{
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_AutoConfigSuccess = FormatString("Your computer has automatically configured the IP address for the Network Card with network address %s.  The IP address being used is %s.", HWAddress.ToString, Address.ToString)
{
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
	[DataFieldByteOrder = BigEndian]IPv4Address Address;
}
Struct DhcpClientDll_InitNetworkInterfaceFailed = FormatString("Your computer was unable to initialize a Network Interface attached to the system. The error code is: %s.", StatusCode.ToString)
{
	WinErrorCode StatusCode;
}
Struct DhcpClientDll_Dhcpv6InitFailed = FormatString("Dhcpv6 Initialization has failed on the computer with the error code %s. Dhcp service will start with IPv4 only.", StatusCode.ToString)
{
	WinErrorCode StatusCode;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsDhcpClient_Keyword, "{15A7A4F8-0072-4EAB-ABAD-F98A4D666AED}")]
struct DhcpClientDll_MicrosoftWindowsDhcpClient_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
