//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  VTNT Terminal Type Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-TVTT]: Telnet: VTNT Terminal Type Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:
//#
//####




Table TVTTWAttributesTable  ( value )
{
	switch(value)
	{
		case  0: "ABSOLUTE_COORDS";
		case  1: "RELATIVE_COORDS";
		default: Formatstring("UNKNOWN TELNET wAttribute (%d)", value);
	}
}


Table TVTTKeyDownTable ( value )
{
	switch
	{
		case value == 0:"Key is not pressed.";
		case value == 1:"Key is pressed.";
	}
}


Table TVTTVirtualKeyCodeTable ( value )
{
	switch(value)
	{
		case 1:"Left mouse button";
		case 2:"Right mouse button";
		case 3:"CTRL+BREAK processing";
		case 8:"BACKSPACE key";
		case 9:"TAB key";
		case 12:"CLEAR key";
		case 13:"ENTER key";
		case 16:"SHIFT key";
		case 17:"CTRL key";
		case 18:"ALT key";
		case 19:"PAUSE key";
		case 20:"CAPS LOCK key";
		case 21:"IME Hanguel mode";
		case 22:"IME Hangul mode";
		case 23:"IME Junja mode";
		case 24:"IME final mode";
		case 25:"IME Hanja mode";
		case 26:"IME Kanji mode";
		case 27:"ESC key";
		case 28:"IME convert";
		case 29:"IME nonconvert";
		case 30:"IME accept";
		case 31:"IME mode change request";
		case 32:"SPACEBAR";
		case 33:"PAGE UP key";
		case 34:"PAGE DOWN key";
		case 35:"END key";
		case 36:"HOME key";
		case 37:"LEFT ARROW key";
		case 38:"UP ARROW key";
		case 39:"RIGHT ARROW key";
		case 40:"DOWN ARROW key";
		case 41:"SELECT key";
		case 42:"PRINT key";
		case 43:"EXECUTE key";
		case 44:"PRINT SCREEN key";
		case 45:"INS key";
		case 46:"DEL key";
		case 47:"HELP key";
		case 48:"0 key";
		case 49:"1 key";
		case 50:"2 key";
		case 51:"3 key";
		case 52:"4 key";
		case 53:"5 key";
		case 54:"6 key";
		case 55:"7 key";
		case 56:"8 key";
		case 57:"9 key";
		case 65:"A key";
		case 66:"B key";
		case 67:"C key";
		case 68:"D key";
		case 69:"E key";
		case 70:"F key";
		case 71:"G key";
		case 72:"H key";
		case 73:"I key";
		case 74:"J key";
		case 75:"K key";
		case 76:"L key";
		case 77:"M key";
		case 78:"N key";
		case 79:"O key";
		case 80:"P key";
		case 81:"Q key";
		case 82:"R key";
		case 83:"S key";
		case 84:"T key";
		case 85:"U key";
		case 86:"V key";
		case 87:"W key";
		case 88:"X key";
		case 89:"Y key";
		case 90:"Z key";
		case 91:"Left Windows key (Microsoft Natural Keyboard)";
		case 92:"Right Windows key (Microsoft Natural Keyboard)";
		case 93:"Applications key (Microsoft Natural Keyboard)";
		case 95:"Computer Sleep key";
		case 96:"Numeric keypad 0 key";
		case 97:"Numeric keypad 1 key";
		case 98:"Numeric keypad 2 key";
		case 99:"Numeric keypad 3 key";
		case 100:"Numeric keypad 4 key";
		case 101:"Numeric keypad 5 key";
		case 102:"Numeric keypad 6 key";
		case 103:"Numeric keypad 7 key";
		case 104:"Numeric keypad 8 key";
		case 105:"Numeric keypad 9 key";
		case 106:"Multiply key";
		case 107:"Add key";
		case 108:"Separator key";
		case 109:"Subtract key";
		case 110:"Decimal key";
		case 111:"Divide key";
		case 112:"F1 key";
		case 113:"F2 key";
		case 114:"F3 key";
		case 115:"F4 key";
		case 116:"F5 key";
		case 117:"F6 key";
		case 118:"F7 key";
		case 119:"F8 key";
		case 120:"F9 key";
		case 121:"F10 key";
		case 122:"F11 key";
		case 123:"F12 key";
		case 124:"F13 key";
		case 125:"F14 key";
		case 126:"F15 key";
		case 127:"F16 key";
		case 128:"F17 key";
		case 129:"F18 key";
		case 130:"F19 key";
		case 131:"F20 key";
		case 132:"F21 key";
		case 133:"F22 key";
		case 134:"F23 key";
		case 135:"F24 key";
		case 144:"NUM LOCK key";
		case 145:"SCROLL LOCK key";
		case 160:"Left SHIFT key";
		case 161:"Right SHIFT key";
		case 162:"Left CTRL key";
		case 163:"Right CTRL key";
		case 164:"Left MENU key";
		case 165:"Right MENU key";
		default:"<wKeycode> (UNKNOWN TELNET wKeycode)";
	}
}

[DataTypeByteOrder = LittleEndian]
struct TVTTVtntCharInfo
{
	UINT32 dwSize;
	UINT32 dwCursorPosition;
	UINT16 wAttributes = TVTTWAttributesTable(this);
	UINT64 srWindow;
	UINT32 dwMaximum;
	UINT16 coCursorPos_x;
	UINT16 coCursorPos_y;
	UINT32 coDest;
	UINT16 coSizeOfData_x;
	UINT16 coSizeOfData_y;
	UINT16 srDestRegion_Left;
	UINT16 srDestRegion_Top;
	UINT16 srDestRegion_Right;
	UINT16 srDestRegion_Bottom;
	[Local.count = coSizeOfData_y]
	while [local.count > 0]
	{
		[local.count = local.count - 1]
		TVTTScreenDisplay(coSizeOfData_x) Vtntchararray;
	}
}


struct TVTTScreenDisplay(chCount) = local.summary
{
	[local.count = chCount]
	[local.summary = ""]
	while [local.count > 0]
	{
		[local.summary = local.summary + VCHAR.ToString]
		[local.count = local.count - 1]
		TVTTVtntSingleChar VCHAR;
	}
}

struct TVTTVtntSingleChar = char.ToString
{
	WCHAR char;
	UINT16 char_attributes
	{
		UINT16 FOREGROUNDBLUE:1 = FormatString("         (%s) %s ", this.ToBitString, this ? "Text color contains blue" :
			                                                                       "Text color doesn't contains blue" );
		UINT16 FOREGROUNDGREEN:1 = FormatString("        (%s) %s ", this.ToBitString, this ? "Text color contains green" :
			                                                                       "Text color doesn't contains green" );
		UINT16 FOREGROUNDRED:1 = FormatString("          (%s) %s ", this.ToBitString, this ? "Text color contains red" :
			                                                                       "Text color doesn't contains red" );
		UINT16 FOREGROUNDINTENSITY:1 = FormatString("    (%s) %s ", this.ToBitString, this ? "Text color is intensified" :
			                                                                       "Text color isn't intensified" );
		UINT16 BackgroundBLUE:1 = FormatString("         (%s) %s ", this.ToBitString, this ? "Background color contains blue" :
			                                                                       "Background color doesn't contains blue" );
		UINT16 BackgroundGREEN:1 = FormatString("        (%s) %s ", this.ToBitString, this ? "Background color contains green" : 
			                                                                       "Background color doesn't contains green" );
		UINT16 BackgroundRED:1 = FormatString("          (%s) %s ", this.ToBitString, this ? "Background color contains red" :   
			                                                                       "Background color doesn't contains red" );  
		UINT16 BackgroundINTENSITY:1 = FormatString("    (%s) %s ", this.ToBitString, this ? "Background color is intensified" : 
			                                                                       "Background color isn't intensified" );     
		UINT16 COMMONLVBLEADINGBYTE:1 = FormatString("   (%s) %s ", this.ToBitString, this ? "Set to be Leading byte" :          
			                                                                       "Set to be not Leading byte" );         
		UINT16 COMMONLVBTRAILINGBYTE:1 = FormatString("  (%s) %s ", this.ToBitString, this ? "Set to be Trailing byte" :         
			                                                                       "Set to be not Trailing byte" );        
		UINT16 COMMONLVBGRIDHORIZONTAL:1 = FormatString("(%s) %s ", this.ToBitString, this ? "Set to be Top horizontal" :           
			                                                                       "Set to be not Top horizontal" );          
		UINT16 COMMONLVBGRIDLVERTICAL:1 = FormatString(" (%s) %s ", this.ToBitString, this ? "Set to be Left vertical" :         
			                                                                       "Set to be not Left vertical" );             
		UINT16 COMMONLVBGRIDRVERTICAL:1 = FormatString(" (%s) %s ", this.ToBitString, this ? "Set to be Right vertical" :    
			                                                                       "Set to be not Right vertical" );   
		UINT16 COMMONLVBREVERSEVIDEO:1 = FormatString("  (%s) %s ", this.ToBitString, this ? "Set to be Reverse foreground and background attribute" :   
			                                                                       "Set to be not Reverse foreground and background attribute" );  
		UINT16 COMMONLVBUNDERSCORE:1 = FormatString("    (%s) %s ", this.ToBitString, this ? "Set to be Underscore" :     
			                                                                       "Set to be not Underscore" );    
		UINT16 Reserved:1 = FormatString("               (%s) Set to be Reserved", this.ToBitString );       
	}
}

[DataTypeByteOrder = LittleEndian]
struct TVTTInputRecord = FormatString("%s", EventType.ToString)
{
	UINT16 EventType = TelnetOptionTable(this); 
	UINT16 Padding1;
	UINT8  bKeyDown =  TVTTKeyDownTable(this);
	Blob(3) Padding2;
	UINT16 wRepeatCount;
	UINT16 wVirtualKeyCode = TVTTVirtualKeyCodeTable(this); 
	UINT16 wVirtualScanCode;
	UINT16 uChar;
	UINT32 dwControlKeyState 
	{
		UINT32 rightALT:1  = FormatString("       (%s) The right ALT key is%s pressed", this.ToBitString, this ? "" : " NOT");
		UINT32 leftALT:1  = FormatString("        (%s) The left ALT key is%s pressed", this.ToBitString, this ? "" : " NOT");
		UINT32 rightCTRL:1  = FormatString("      (%s) The right CTRL key is%s pressed", this.ToBitString, this ? "" : " NOT");
		UINT32 leftCTRL:1  = FormatString("       (%s) The left CTRL key is%s pressed", this.ToBitString, this ? "" : " NOT");
		UINT32 SHIFTkey:1  = FormatString("       (%s) The SHIFT key is%s pressed", this.ToBitString, this ? "" : " NOT");
		UINT32 NUMLOCKlight:1  = FormatString("   (%s) The NUM LOCK light is%s on", this.ToBitString, this ? "" : " NOT");
		UINT32 SCROLLLOCKlight:1  = FormatString("(%s) The SCROLL LOCK light is%s on", this.ToBitString, this ? "" : " NOT");
		UINT32 CAPSLOCKlight:1  = FormatString("  (%s) The CAPS LOCK light is%s on", this.ToBitString, this ? "" : " NOT");
		UINT32 keyenhanced:1  = FormatString("    (%s) The key is%s enhanced", this.ToBitString, this ? "" : " NOT");
		UINT32 Reserved:23 = FormatString("       (%s)", this.ToBitString);
	}
}