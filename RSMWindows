//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Removable Storage Manager Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-RSMP]: Removable Storage Manager (RSM) Remote Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 3/2/2010
//#
//####

//======================================================================================
// Global Datatypes (these should eventually be coded in basicdatatypes.npl)
//======================================================================================
const	Unique 		= 1;
const	NoAttrib 	= 0;

//NtmsObjectsTypes
const NtmsUnknown		= 0;
const NtmsObject 		= 1;
const NtmsChanger 		= 2;
const NtmsChangerType	 	= 3;
const NtmsComputer		= 4;
const NtmsDrive 		= 5;
const NtmsDriveType	 	= 6;
const NtmsIeDoor 		= 7;
const NtmsIePort 		= 8;
const NtmsLibrary 		= 9;
const NtmsLibRequest	 	= 10;
const NtmsLogicalMedia	 	= 11;
const NtmsMediaPool	 	= 12;
const NtmsMediaType	 	= 13;
const NtmsPartition 		= 14;
const NtmsPysicalMedia	 	= 15;
const NtmsStorageSlot	 	= 16;
const NtmsOpRequest 		= 17;
const NtmsUiDestination 	= 18;

[RSMSummary = "", RSMTempString = "", ReturnValue = 0]
Protocol RSM = FormatString( "%s%s%s%s%s, TcpSeq = %s", RsmMethodTable( Property.MsrpcIfUuid, Property.MsrpcOpnum ), 
	Property.MsrpcPType ? " Response" : " Request", 
	RSMSummary != "" ? ", " + RSMSummary : "", 
	Property.MsrpcPType ? ", " + "Status = " + HResultErrorCodeNameTable( ReturnValue ) : "", 
	Property.ParserError ? ", " + Property.ParserErrorMessage : Property.ParserErrorMessage,
	Property.TCPSequenceRange )
{
	Switch  (Property.MsrpcIfUuid)
	{
		Case "{879C8BBE-41B0-11D1-BE11-00C04FB6BF70}" : //IClientSink
		_Struct IClientSink
		{
			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct OnNotify 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = RsmNtmsObjectsTypesEnum(this);
										UINT32 Operation = RsmNtmsNotificationOperationsEnum(this);
										GUID(true) Identifier;
									}
							}
						}
						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}

						}
					}
				}
//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}

		}

		Case "{081E7188-C080-4FF3-9238-29F66D6CABFD}" : //IMessenger
		_Struct IMessenger
		{
			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct SendMessage 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										LpRsmMessage LpRsmMessage;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}

						}
					}
				}

				Case 4:
				_Struct RecallMessage
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) Guid;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}

						}
					}
				}
				
//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}

		}

		Case "{4E934F30-341A-11D1-8FB1-00A024CB6019}" : //INtmsLibraryControl1
		_Struct INtmsLibraryControl1
		{

			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct EjectNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr MediaId;
										GUID(true) EjectOperation;
										UINT32 Action = FORMATSTRING("%u = %s",this, RsmNtmsEjectOperationEnum(this)); 
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) EjectOperation;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 4:
				_Struct InjectNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Action %u = %s",Action,RsmNtmsInjectOperationEnum (Action));]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) LibraryId;
										GUID(true) InjectOperation;
										UINT32 Action = FORMATSTRING("%u = %s",this,RsmNtmsInjectOperationEnum (this));
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) InjectOperation;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 5:
				_Struct AccessNtmsLibraryDoor 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Action %u = %s",Action,RSM_NtmsInventoryMethod_enum (Action));]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) LibraryId;
										UINT32 Action = FORMATSTRING("%u = %s",this,RSM_NtmsInventoryMethod_enum (this));
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}

						}
					}
				}

				Case 6:
				_Struct CleanNtmsDrive 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) DriveId;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}

						}
					}
				}

				Case 7:
				_Struct DismountNtmsDrive 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) DriveId;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}

						}
					}
				}

				Case 8:
				_Struct InventoryNtmsLibrary 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Action %u = %s",Action,RSM_NtmsInventoryMethod_enum (Action));]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) LibraryId;
										UINT32 Action = FORMATSTRING("%u = %s",this,RSM_NtmsInventoryMethod_enum (this));
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}

						}
					}
				}

				Case 9:
				struct NotUsedOnWire
				{
					Switch (property.MSRPCPType)
					{
					// REQUEST
					case 0x00:
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						struct Request 
						{
							ReportParserWarning("RSM{4E934F30-341A-11D1-8FB1-00A024CB6019}", "Invalid RSM method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}

					// RESPONSE
					case 0x02:
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						struct Response
						{
							ReportParserWarning("RSM{4E934F30-341A-11D1-8FB1-00A024CB6019}", "Invalid RSM method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;					
						}
					}
				}

// not used on wire	
//				Case 9:
//				_Struct UpdateNtmsOmidInfo 
//				{
//					Switch (property.MsrpcPType)
//					{
//						Case 0x00: //RPC_REQUEST
//						[RSMSummary = ""]
//						_Struct Request
//						{
//							Switch
//							{
//								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
//								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			//							GUID(true) MediaId;
			//							UINT32 LabelType  = FORMATSTRING("%u = %s",this,RsmOMIDLabelTypeEnum(this));
			//							UINT32 NumberOfBytes;
			//							RsmVoid Buffer;
			//						}
			//
			//						Case 0x02: //RPC_RESPONSE
			//						[RSMSummary = ""]
			//						_Struct Response
			//						{
			//							Switch
			//							{
			//								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
			//								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			//							}
			//							[ReturnValue = UINT32( FrameData, Offset )]
			//							UINT32 ReturnValue = RsmResultTable(this);
			// 
			//						}
			//					}
			//				}
				Case 10:
				_Struct CancelNtmsLibraryRequest 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
									}
							}
						}
					
						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}
						}
					}
				}

				Case 11:
				_Struct ReserveNtmsCleanerSlot 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) Library;
										GUID(true) Slot;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 12:
				_Struct ReleaseNtmsCleanerSlot 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) Library;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 13:
				_Struct InjectNtmsCleaner 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Cleans Left = %u", NumberOfCleansLeft);]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) Library;
										GUID(true) InjectOperation;
										UINT32 NumberOfCleansLeft;
										UINT32 Action = FORMATSTRING("%u = %s",this,RsmNtmsInjectOperationEnum (this));
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) InjectOperation;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}

						}
					}
				}

				Case 14:
				_Struct EjectNtmsCleaner 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) Library;
										GUID(true) EjectOperation;
										UINT32 Action = FORMATSTRING("%u = %s",this, RsmNtmsEjectOperationEnum(this));
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) EjectOperation;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 15:
				_Struct DeleteNtmsLibrary 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) LibraryId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 16:
				_Struct DeleteNtmsDrive 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) DriveId;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 17:
				_Struct GetNtmsRequestOrder 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = FormatString( "Order Number = %u",OrderNumber) ]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32	OrderNumber;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 18:
				_Struct SetNtmsRequestOrder 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
										UINT32 OrderNumber;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 19:
				_Struct DeleteNtmsRequests 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("GUID Type = %s, Count = %u",RsmNtmsObjectsTypesEnum (Type),Count);]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrConformant MaxCount;
										switch
										{
											case MaxCount.MaxCount > 0:
												GUID(true) RequestId[MaxCount.MaxCount];
										}
										UINT32 Type  = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										UINT32 Count;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 20:
				_Struct BeginNtmsDeviceChangeDetection 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = "Method has no parameters"]
						_Struct Request
						{

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsHandle	DetectHandle;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 21:
				_Struct SetNtmsDeviceChangeDetection 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("GUID Type = %s, Count = %u",RsmNtmsObjectsTypesEnum (Type),Count);]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsHandle DetectHandle;
										NdrConformant MaxCount;
										switch
										{
											case MaxCount.MaxCount > 0:
												GUID(true) ObjectId[MaxCount.MaxCount];
										}
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										UINT32 Count;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 22:
				_Struct EndNtmsDeviceChangeDetection
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsHandle DetectHandle;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}
		}
		Case "{DB90832F-6910-4D46-9F5E-9FD6BFA73903}" : //INtmsLibraryControl2	
		_Struct INtmsLibraryControl2
		{

			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct EjectNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr MediaId;
										GUID(true) EjectOperation;
										UINT32 Action = FORMATSTRING("%u = %s",this, RsmNtmsEjectOperationEnum(this)); 
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) EjectOperation;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 4:
				_Struct InjectNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Action %u = %s",Action,RsmNtmsInjectOperationEnum (Action));]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) LibraryId;
										GUID(true) InjectOperation;
										UINT32 Action = FORMATSTRING("%u = %s",this,RsmNtmsInjectOperationEnum (this));
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) InjectOperation;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 5:
				_Struct AccessNtmsLibraryDoor 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Action %u = %s",Action,RSM_NtmsInventoryMethod_enum (Action));]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) LibraryId;
										UINT32 Action = FORMATSTRING("%u = %s",this,RSM_NtmsInventoryMethod_enum (this));
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 6:
				_Struct CleanNtmsDrive 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) DriveId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 7:
				_Struct DismountNtmsDrive 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) DriveId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 8:
				_Struct InventoryNtmsLibrary 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Action %u = %s",Action,RSM_NtmsInventoryMethod_enum (Action));]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) LibraryId;
										UINT32 Action = FORMATSTRING("%u = %s",this,RSM_NtmsInventoryMethod_enum (this));
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 9:
				struct NotUsedOnWire
				{
					Switch (property.MSRPCPType)
					{
					// REQUEST
					case 0x00:
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						struct Request 
						{
							ReportParserWarning("RSM{4E934F30-341A-11D1-8FB1-00A024CB6019}", "Invalid RSM method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}

					// RESPONSE
					case 0x02:
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						struct Response
						{
							ReportParserWarning("RSM{4E934F30-341A-11D1-8FB1-00A024CB6019}", "Invalid RSM method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;					
						}
					}
				}

// not used on wire	
//				Case 9:
//				_Struct UpdateNtmsOmidInfo 
//				{
//					Switch (property.MsrpcPType)
//					{
//						Case 0x00: //RPC_REQUEST
//						[RSMSummary = ""]
//						_Struct Request
//						{
//							Switch
//							{
//								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
//								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			//							GUID(true) MediaId;
			//							UINT32 LabelType  = FORMATSTRING("%u = %s",this,RsmOMIDLabelTypeEnum(this));
			//							UINT32 NumberOfBytes;
			//							RsmVoid Buffer;
			//						}
			//
			//						Case 0x02: //RPC_RESPONSE
			//						[RSMSummary = ""]
			//						_Struct Response
			//						{
			//							Switch
			//							{
			//								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
			//								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			//							}
			//							[ReturnValue = UINT32( FrameData, Offset )]
			//							UINT32 ReturnValue = RsmResultTable(this);
			// 
			//						}
			//					}
			//				}
				Case 10:
				_Struct CancelNtmsLibraryRequest 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 11:
				_Struct ReserveNtmsCleanerSlot 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) Library;
										GUID(true) Slot;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 12:
				_Struct ReleaseNtmsCleanerSlot 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) Library;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 13:
				_Struct InjectNtmsCleaner 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Cleans Left = %u", NumberOfCleansLeft);]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) Library;
										GUID(true) InjectOperation;
										UINT32 NumberOfCleansLeft;
										UINT32 Action = FORMATSTRING("%u = %s",this,RsmNtmsInjectOperationEnum (this));
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) InjectOperation;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 14:
				_Struct EjectNtmsCleaner 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) Library;
										GUID(true) EjectOperation;
										UINT32 Action = FORMATSTRING("%u = %s",this, RsmNtmsEjectOperationEnum(this));
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) EjectOperation;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 15:
				_Struct DeleteNtmsLibrary 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) LibraryId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 16:
				_Struct DeleteNtmsDrive 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) DriveId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 17:
				_Struct GetNtmsRequestOrder 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = FormatString( "Order Number = %u",OrderNumber) ]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32	OrderNumber;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 18:
				_Struct SetNtmsRequestOrder 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
										UINT32 OrderNumber;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 19:
				_Struct DeleteNtmsRequests 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("GUID Type = %s, Count = %u",RsmNtmsObjectsTypesEnum (Type),Count);]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrConformant MaxCount;
										switch
										{
											case MaxCount.MaxCount > 0:
												GUID(true) RequestId[MaxCount.MaxCount];
										}
										UINT32 Type  = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										UINT32 Count;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 20:
				_Struct BeginNtmsDeviceChangeDetection 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = "Method has no parameters"]
						_Struct Request
						{

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsHandle	DetectHandle;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 21:
				_Struct SetNtmsDeviceChangeDetection 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("GUID Type = %s, Count = %u",RsmNtmsObjectsTypesEnum (Type),Count);]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsHandle DetectHandle;
										NdrConformant MaxCount;
										switch
										{
											case MaxCount.MaxCount > 0:
												GUID(true) ObjectId[MaxCount.MaxCount];
										}
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										UINT32 Count;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 22:
				_Struct EndNtmsDeviceChangeDetection
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsHandle DetectHandle;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
				
				Case 23:
				_Struct IdentifyNtmsSlot 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) SlotId;
										UINT32 Option = RsmNtmsNotificationOperationsEnum(this);
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}

		}

		Case "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" : //INtmsMediaServices1
		_Struct INtmsMediaServices1
		{
			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct MountNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrConformant MaxCount1;
										switch
										{
											case MaxCount1.MaxCount > 0:
												GUID(true) MediaId[MaxCount1.MaxCount];
										}
										NdrConformant MaxCount2;
										switch
										{
											case MaxCount2.MaxCount > 0:
												GUID(true) DriveId[MaxCount2.MaxCount];
										}
										UINT32 Count;
										UINT32 Options = FORMATSTRING("%u = %s",this,RsmNtmsMountOptionsEnum(this));
										INT32 Priority = RSMNtmsMountPriorityTable(this);
										UINT32 Timeout;
										NdrAlign Pad;
										LpNtmsMountInformation MountInformation;	
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrConformant MaxCount;
										switch
										{
											case MaxCount.MaxCount > 0:
												GUID(true) lpDriveId[MaxCount.MaxCount];
										}
										NdrAlign Pad1;
										LpNtmsMountInformation MountInformation;
										Align4 Pad2;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 4:
				_Struct DismountNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Option = %s, Count = %u",RsmNtmsDismountOptionsEnum (Options),Count)]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrConformant MaxCount;
										switch
										{
											case MaxCount.MaxCount > 0:
												GUID(true) MediaId[MaxCount.MaxCount];
										}
										UINT32 Count;
										UINT32 Options = FORMATSTRING("%u = %s",this,RsmNtmsDismountOptionsEnum (this)); 
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

// not used on wire
//				Case 5:
//				_Struct GetNtmsMountDrives 
//				{
//					Switch (property.MsrpcPType)
//					{
//						Case 0x00: //RPC_REQUEST
//						[RSMSummary = ""]
//						_Struct Request
//						{
//							Switch
//							{
//								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
//								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			//							LpNtmsMountInformation MountInformation;
			//							UINT32 Gcount;
			//							GUID(true) DriveId[gcount];
			//							UINT32 Count;
			//						}
			//
			//						Case 0x02: //RPC_RESPONSE
			//						[RSMSummary = ""]
			//						_Struct Response
			//						{
			//							Switch
			//							{
			//								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
			//								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			//							}
			//							//GUID(true) lpDriveId[count];
			//							[ReturnValue = UINT32( FrameData, Offset )]
			//							UINT32 ReturnValue = RsmResultTable(this);
			// 
			//						}
			//					}
			//				}
				Case 6:
				_Struct AllocateNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Option = %s", RsmNtmsAllocateOptionsEnum (Options))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaPool;
										GUIDPtr Partition;
										GUID(true) MediaId;
										UINT32 Options = FORMATSTRING("%u = %s",this, RsmNtmsAllocateOptionsEnum (this));
										UINT32 Timeout;
										NdrAlign Pad;
										NtmsAllocationInformation AllocateInformation;
									}
							}
						}
						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
										NdrAlign Pad;
										NtmsAllocationInformation AllocateInformation;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 7:
				_Struct DeallocateNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
										UINT32 Options = FORMATSTRING("%u ,Reserved and must be 0",this);
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 8:
				_Struct SwapNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId1;
										GUID(true) MediaId2;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 9:
				_Struct DecommissionNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 10:
				_Struct SetNtmsMediaComplete 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 11:
				_Struct DeleteNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr MediaId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 12:
				_Struct CreateNtmsMediaPoolA
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("PoolName = %s",PoolName.ToString)]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrString PoolName;
										GUIDPtr MediaType;
										UINT32 Options = FORMATSTRING("%u = %s",this, RsmNtmsCreateOptionsEnum(this));
										LpSecurityAttributesNtmsPtr SecurityAttributes;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 13:
				_Struct CreateNtmsMediaPoolW
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("PoolName = %s",PoolName.ToString)]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrWideString PoolName;
										GUIDPtr MediaType;
										UINT32 Options = FORMATSTRING("%u = %s",this, RsmNtmsCreateOptionsEnum(this));
										LpSecurityAttributesNtmsPtr SecurityAttributes;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 14:
				_Struct GetNtmsMediaPoolNameA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
										UINT32 NameSizeBuf;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										//UCHAR lpBufName[lpdwNameSizeBuf];
										NdrString BufName;
										Align4 Pad;
										UINT32 NameSizeBuf;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 15:
				_Struct GetNtmsMediaPoolNameW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
										UINT32 NameSizeBuf;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrWideString BufName;
										Align4 Pad;
										UINT32 NameSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 16:
				_Struct MoveToNtmsMediaPool 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
										GUID(true) PoolId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 17:
				_Struct DeleteNtmsMediaPool 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 18:
				_Struct AddNtmsMediaType 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaTypeId;
										GUID(true) LibId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 19:
				_Struct DeleteNtmsMediaType 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaTypeId;
										GUID(true) LibId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 20:
				_Struct ChangeNtmsMediaType 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
										GUID(true) PoolId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
				
				
				Case 5:
				struct NotUsedOnWire
				{
					Switch (property.MSRPCPType)
					{
					// REQUEST
					case 0x00:
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						struct Request 
						{
							ReportParserWarning("RSM{D02E4BE0-3419-11D1-8FB1-00A024CB6019}", "Invalid RSM method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}

					// RESPONSE
					case 0x02:
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						struct Response
						{
							ReportParserWarning("RSM{D02E4BE0-3419-11D1-8FB1-00A024CB6019}", "Invalid RSM method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;					
						}
					}
				}
				Default:
				[post.Description = "Error: " + Property.ParserErrorMessage]
				ReportParserError(ParserErrorProtocolClassWindows, "RSM{D02E4BE0-3419-11D1-8FB1-00A024CB6019}", FormatString( "Unknown Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;
			}
		}

		Case "{7D07F313-A53F-459A-BB12-012C15B1846E}" : //IRobustNtmsMediaServices1	
		_Struct INtmsMediaServices1AndIRobustNtmsMediaServices1
		{

			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct MountNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrConformant MaxCount1;
										switch
										{
											case MaxCount1.MaxCount > 0:
												GUID(true) MediaId[MaxCount1.MaxCount];
										}
										NdrConformant MaxCount2;
										switch
										{
											case MaxCount2.MaxCount > 0:
												GUID(true) DriveId[MaxCount2.MaxCount];
										}
										UINT32 Count;
										UINT32 Options = FORMATSTRING("%u = %s",this,RsmNtmsMountOptionsEnum(this));
										INT32 Priority = RSMNtmsMountPriorityTable(this);
										UINT32 Timeout;
										NdrAlign Pad;
										LpNtmsMountInformation MountInformation;	
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrConformant MaxCount;
										switch
										{
											case MaxCount.MaxCount > 0:
												GUID(true) lpDriveId[MaxCount.MaxCount];
										}
										NdrAlign Pad1;
										LpNtmsMountInformation MountInformation;
										Align4 Pad2;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 4:
				_Struct DismountNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Option = %s, Count = %u",RsmNtmsDismountOptionsEnum (Options),Count)]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrConformant MaxCount;
										switch
										{
											case MaxCount.MaxCount > 0:
												GUID(true) MediaId[MaxCount.MaxCount];
										}
										UINT32 Count;
										UINT32 Options = FORMATSTRING("%u = %s",this,RsmNtmsDismountOptionsEnum (this)); 
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

// not used on wire
//				Case 5:
//				_Struct GetNtmsMountDrives 
//				{
//					Switch (property.MsrpcPType)
//					{
//						Case 0x00: //RPC_REQUEST
//						[RSMSummary = ""]
//						_Struct Request
//						{
//							Switch
//							{
//								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
//								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			//							LpNtmsMountInformation MountInformation;
			//							UINT32 Gcount;
			//							GUID(true) DriveId[gcount];
			//							UINT32 Count;
			//						}
			//
			//						Case 0x02: //RPC_RESPONSE
			//						[RSMSummary = ""]
			//						_Struct Response
			//						{
			//							Switch
			//							{
			//								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
			//								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			//							}
			//							//GUID(true) lpDriveId[count];
			//							[ReturnValue = UINT32( FrameData, Offset )]
			//							UINT32 ReturnValue = RsmResultTable(this);
			// 
			//						}
			//					}
			//				}
				Case 6:
				_Struct AllocateNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Option = %s", RsmNtmsAllocateOptionsEnum (Options))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaPool;
										GUIDPtr Partition;
										GUID(true) MediaId;
										UINT32 Options = FORMATSTRING("%u = %s",this, RsmNtmsAllocateOptionsEnum (this));
										UINT32 Timeout;
										NdrAlign Pad;
										NtmsAllocationInformation AllocateInformation;
									}
							}
						}
						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
										NdrAlign Pad;
										NtmsAllocationInformation AllocateInformation;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 7:
				_Struct DeallocateNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
										UINT32 Options = FORMATSTRING("%u ,Reserved and must be 0",this);
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 8:
				_Struct SwapNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId1;
										GUID(true) MediaId2;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 9:
				_Struct DecommissionNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 10:
				_Struct SetNtmsMediaComplete 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 11:
				_Struct DeleteNtmsMedia 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr MediaId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 12:
				_Struct CreateNtmsMediaPoolA
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("PoolName = %s",PoolName.ToString)]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										Asciistring PoolName;
										GUIDPtr MediaType;
										UINT32 Options = FORMATSTRING("%u = %s",this, RsmNtmsCreateOptionsEnum(this));
										LpSecurityAttributesNtmsPtr SecurityAttributes;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 13:
				_Struct CreateNtmsMediaPoolW
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("PoolName = %s",PoolName.ToString)]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrWideString PoolName;
										GUIDPtr MediaType;
										UINT32 Options = FORMATSTRING("%u = %s",this, RsmNtmsCreateOptionsEnum(this));
										LpSecurityAttributesNtmsPtr SecurityAttributes;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 14:
				_Struct GetNtmsMediaPoolNameA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
										UINT32 NameSizeBuf;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										//UCHAR lpBufName[lpdwNameSizeBuf];
										NdrString BufName;
										Align4 Pad;
										UINT32 NameSizeBuf;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 15:
				_Struct GetNtmsMediaPoolNameW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
										UINT32 NameSizeBuf;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrWideString BufName;
										Align4 Pad;
										UINT32 NameSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 16:
				_Struct MoveToNtmsMediaPool 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
										GUID(true) PoolId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 17:
				_Struct DeleteNtmsMediaPool 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 18:
				_Struct AddNtmsMediaType 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaTypeId;
										GUID(true) LibId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 19:
				_Struct DeleteNtmsMediaType 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaTypeId;
										GUID(true) LibId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 20:
				_Struct ChangeNtmsMediaType 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) MediaId;
										GUID(true) PoolId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
				
				
				Case 5:
				struct NotUsedOnWire
				{
					Switch (property.MSRPCPType)
					{
					// REQUEST
					case 0x00:
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						struct Request 
						{
							ReportParserWarning("RSM{D02E4BE0-3419-11D1-8FB1-00A024CB6019}", "Invalid RSM method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}

					// RESPONSE
					case 0x02:
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						struct Response
						{
							ReportParserWarning("RSM{D02E4BE0-3419-11D1-8FB1-00A024CB6019}", "Invalid RSM method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;					
						}
					}
				}
				
				// IRobustNtmsMediaServices1
				Case 21:
				_Struct GetNtmsMediaPoolNameAR
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
										UINT32 NameSizeBuf;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrString BufName;
										Align4 Pad;
										UINT32 NameSize;
										UINT32 OutputSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 22:
				_Struct GetNtmsMediaPoolNameWR 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) PoolId;
										UINT32 NameSizeBuf;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrWideString BufName;	
										Align4 Pad;
										UINT32 NameSize;
										UINT32 OutputSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}

		}

		Case "{BB39332C-BFEE-4380-AD8A-BADC8AFF5BB6}" : //INtmsNotifySink
		_Struct INtmsNotifySink
		{
			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct ConnectCallback
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										DCOMConformantMInterfacePointer UnkCP;
										DCOMConformantMInterfacePointer UnkSink;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 4:
				_Struct OnNotify
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										UINT32 Operation;
										GUID(true) Identifier;	
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 5:
				_Struct ReleaseCallback 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = "Method has no parameters"]
						_Struct Request
						{

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}

						}
					}
				}

//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}

		}

		Case "{69AB7050-3059-11D1-8FAF-00A024CB6019}" : //INtmsObjectInfo1
		_Struct INtmsObjectInfo1
		{

			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct GetNtmsServerObjectInformationA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										UINT32 Size;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsObjectInformationA Info;
										Align4 Pad;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 4:
				_Struct GetNtmsServerObjectInformationW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										UINT32 Size;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsObjectInformationW Info;
										Align4 Pad;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 5:
				_Struct SetNtmsObjectInformationA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										Align8 Pad;
										NtmsObjectInformationA Info;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 6:
				_Struct SetNtmsObjectInformationW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										Align8 Pad;
										NtmsObjectInformationW Info;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 7:
				_Struct CreateNtmsMediaA
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsObjectInformationA Media;
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount:
												NtmsObjectInformationA List[Length.ActualCount];
										}
										Align4 Pad;
										UINT32	ListBufferSize;
										UINT32 ListCount;
										UINT32 Options;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsObjectInformationA Media;
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount:
												NtmsObjectInformationA List[Length.ActualCount];
										}
										Align4 Pad;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 8:
				_Struct CreateNtmsMediaW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsObjectInformationW Media;
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount:
												NtmsObjectInformationW List[Length.ActualCount];
										}
										Align4 Pad;
										UINT32 ListBufferSize;
										UINT32 ListCount;
										UINT32 Options;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NtmsObjectInformationW Media;
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount:
												NtmsObjectInformationW List[Length.ActualCount];
										}
										Align4 Pad;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}

		}

		Case "{B057DC50-3059-11D1-8FAF-00A024CB6019}" : //INtmsObjectManagement1
		_Struct INtmsObjectManagement1
		{

			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct GetNtmsObjectSecurity 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										RsmSecurityInformation SecurityInformation;
										UINT32 Length;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										SecurityDescriptorContainer NewContainer;
										Align4 pad;
										UINT32	LengthNeeded;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 4:
				_Struct SetNtmsObjectSecurity 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										RsmSecurityInformation SecurityInformation;
										SecurityDescriptorContainer NewContainer;
										Align4 pad;
										UINT32 Length;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 5:
				_Struct GetNtmsObjectAttributeA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										AsciiString AttributeName;
										Align4 pad;
			//							RsmVoid AttributeData;
										UINT32 AttributeBufferSize;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										RSMAttributeData(12) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 6:
				_Struct GetNtmsObjectAttributeW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										NdrWideString AttributeName;
										Align4 Pad;
										UINT32 AttributeBufferSize;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										RSMAttributeData(12) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 7:
				_Struct SetNtmsObjectAttributeA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										Asciistring AttributeName;
										RSMAttributeData(4) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 8:
				_Struct SetNtmsObjectAttributeW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										NdrWideString AttributeName;
										RSMAttributeData(4) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 9:
				struct NotUsedOnWire
				{
					switch (property.MSRPCPType)
					{
						case 0x00:// REQUEST
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						struct Request 
						{
							ReportParserWarning("RSM", "Invalid rsm method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
							
						case 0x02:// RESPONSE
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						struct Response
						{
							ReportParserWarning("RSM", "Invalid rsm method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
					}
				}
				
				Case 10:
				_Struct DisableNtmsObject 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										GUID(true) ObjectId;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 11:
				_Struct EnableNtmsObject 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										GUID(true) ObjectId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
				
//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}			

		}
		
		Case "{895A2C86-270D-489D-A6C0-DC2A9B35280E}" : //INtmsObjectManagement2
		_Struct INtmsObjectManagement2
		{

			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct GetNtmsObjectSecurity 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										RsmSecurityInformation SecurityInformation;
										UINT32 Length;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										SecurityDescriptorContainer NewContainer;
										Align4 pad;
										UINT32	LengthNeeded;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 4:
				_Struct SetNtmsObjectSecurity 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										RsmSecurityInformation SecurityInformation;
										SecurityDescriptorContainer NewContainer;
										Align4 pad;
										UINT32 Length;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 5:
				_Struct GetNtmsObjectAttributeA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										AsciiString AttributeName;
										Align4 pad;
			//							RsmVoid AttributeData;
										UINT32 AttributeBufferSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										RSMAttributeData(12) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 6:
				_Struct GetNtmsObjectAttributeW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										NdrWideString AttributeName;
										Align4 Pad;
										UINT32 AttributeBufferSize;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										RSMAttributeData(12) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 7:
				_Struct SetNtmsObjectAttributeA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										Asciistring AttributeName;
										RSMAttributeData(4) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 8:
				_Struct SetNtmsObjectAttributeW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										NdrWideString AttributeName;
										RSMAttributeData(4) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 9:
				struct NotUsedOnWire
				{
					switch (property.MSRPCPType)
					{
						case 0x00:// REQUEST
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						struct Request 
						{
							ReportParserWarning("RSM", "Invalid rsm method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
							
						case 0x02:// RESPONSE
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						struct Response
						{
							ReportParserWarning("RSM", "Invalid rsm method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
					}
				}
				
				Case 10:
				_Struct DisableNtmsObject 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										GUID(true) ObjectId;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 11:
				_Struct EnableNtmsObject 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										GUID(true) ObjectId;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
				
				Case 12:
				_Struct EnumerateNtmsObjectR 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ContainerId;
										UINT32 ListBufferSize;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										UINT32 Options = FORMATSTRING("%u ,Reserved and must be 0",this);
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										LpNtmsGuidNdrcv List;
										UINT32 ListSize;
										UINT32 OutputSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 13:
				_Struct GetNtmsUIOptionsA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ObjectI;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsUITypesEnum (this));
										UINT32 BufSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										Ndrstring Destination;
										Align4 Pad;
										UINT32 DataSize;
										UINT32 OutSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 14:
				_Struct GetNtmsUIOptionsW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsUITypesEnum (this));
										UINT32 BufSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrWidestring Destination;
										Align4 Pad;
										UINT32 DataSize;
										UINT32 OutSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 15:
				_Struct SetNtmsUIOptionsA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsUITypesEnum (this));
										UINT32 Operation = RsmNtmsUIOperationsEnum(this);
										NdrString Destination;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 16:
				_Struct SetNtmsUIOptionsW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsUITypesEnum (this));
										UINT32 Operation = RsmNtmsUIOperationsEnum(this);
										NdrWideString Destination;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}				

//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}			

		}
		Case "{3BBED8D9-2C9A-4B21-8936-ACB2F995BE6C}" : //INtmsObjectManagement3		
		_Struct INtmsObjectManagement3
		{

			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct GetNtmsObjectSecurity 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										RsmSecurityInformation SecurityInformation;
										UINT32 Length;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										SecurityDescriptorContainer NewContainer;
										Align4 pad;
										UINT32	LengthNeeded;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 4:
				_Struct SetNtmsObjectSecurity 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										RsmSecurityInformation SecurityInformation;
										SecurityDescriptorContainer NewContainer;
										Align4 pad;
										UINT32 Length;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 5:
				_Struct GetNtmsObjectAttributeA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										AsciiString AttributeName;
										Align4 pad;
			//							RsmVoid AttributeData;
										UINT32 AttributeBufferSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										RSMAttributeData(12) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 6:
				_Struct GetNtmsObjectAttributeW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										NdrWideString AttributeName;
										Align4 Pad;
										UINT32 AttributeBufferSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										RSMAttributeData(12) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 7:
				_Struct SetNtmsObjectAttributeA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										Asciistring AttributeName;
										RSMAttributeData(4) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 8:
				_Struct SetNtmsObjectAttributeW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										NdrWideString AttributeName;
										RSMAttributeData(4) AttributeData;
										Align4 pad;
										UINT32 AttributeSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 9:
				struct NotUsedOnWire
				{
					switch (property.MSRPCPType)
					{
						case 0x00:// REQUEST
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						struct Request 
						{
							ReportParserWarning("RSM", "Invalid rsm method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
							
						case 0x02:// RESPONSE
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						struct Response
						{
							ReportParserWarning("RSM", "Invalid rsm method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
					}
				}
				
				Case 10:
				_Struct DisableNtmsObject 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										GUID(true) ObjectId;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 11:
				_Struct EnableNtmsObject 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										GUID(true) ObjectId;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}
				
				// INtmsObjectManagement2
				// INtmsObjectManagement3
				Case 12:
				_Struct EnumerateNtmsObjectR 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ContainerId;
										UINT32 ListBufferSize;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										UINT32 Options = FORMATSTRING("%u ,Reserved and must be 0",this);
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										LpNtmsGuidNdrcv List;
										UINT32 ListSize;
										UINT32 OutputSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 13:
				_Struct GetNtmsUIOptionsA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ObjectI;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsUITypesEnum (this));
										UINT32 BufSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										Ndrstring Destination;
										Align4 Pad;
										UINT32 DataSize;
										UINT32 OutSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 14:
				_Struct GetNtmsUIOptionsW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsUITypesEnum (this));
										UINT32 BufSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrWidestring Destination;
										Align4 Pad;
										UINT32 DataSize;
										UINT32 OutSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 15:
				_Struct SetNtmsUIOptionsA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsUITypesEnum (this));
										UINT32 Operation = RsmNtmsUIOperationsEnum(this);
										NdrString Destination;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 16:
				_Struct SetNtmsUIOptionsW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUIDPtr ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsUITypesEnum (this));
										UINT32 Operation = RsmNtmsUIOperationsEnum(this);
										NdrWideString Destination;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}
				
				// INtmsObjectManagement3
				Case 17:
				_Struct GetNtmsObjectAttributeAR 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										Asciistring AttributeName;
										Align4 Pad;
										UINT32 AttributeBufferSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										//LPVOID lpAttributeData;
										NdrString AttributeData;
										Align4 Pad;
										UINT32 AttributeSize;
										UINT32 ActualAttributeSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 18:
				_Struct GetNtmsObjectAttributeWR 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) ObjectId;
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										NdrWideString AttributeName;
										Align4 Pad;
										UINT32 AttributeBufferSize;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										//LPVOID lpAttributeData;
										NdrWideString AttributeData;
										Align4 Pad;
										UINT32 AttributeSize;
										UINT32 ActualAttributeSize;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}
				

//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}			

		}

		Case "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" : //INtmsSession1
		_Struct INtmsSession1
		{

			Switch( Property.MsrpcOpnum )
			{
				Case 3:
				_Struct OpenNtmsServerSessionW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Server = %s, Application = %s, Client = %s, User = %s", Server.ToString,Application.ToString,ClientName.ToString,UserName.ToString)]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrWIDESTRINGPtr Server;
										NdrWIDESTRINGPtr Application;
										NdrWideString ClientName;
										NdrWideString UserName;
										Align4 Pad;
										UINT32 Options = FORMATSTRING("%u ,Reserved and must be 0",this);
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}


						}
					}
				}

				Case 4:
				_Struct OpenNtmsServerSessionA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										NdrStringPtr Server;
										NdrStringPtr Application;
										NdrString ClientName;
										NdrString UserName;
										Align4 Pad;
										UINT32 Options = FORMATSTRING("%u ,Reserved and must be 0",this);
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
			 
									}
							}

						}
					}
				}

				Case 5:
				_Struct CloseNtmsSession 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = "Method has no parameters"]
						_Struct Request
						{

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 6:
				_Struct SubmitNtmsOperatorRequestW 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Request = FORMATSTRING("%u = %s",this,RsmNtmsOpreqCommandEnum (this));
										NdrWIDESTRINGPtr Message;
										GUIDPtr Arg1Id;
										GUIDPtr Arg2Id;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 7:
				_Struct SubmitNtmsOperatorRequestA 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Request = FORMATSTRING("%u = %s",this,RsmNtmsOpreqCommandEnum (this));
										NdrStringPtr Message;
										GUIDPtr Arg1Id;
										GUIDPtr Arg2Id;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 8:
				_Struct WaitForNtmsOperatorRequest 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
										UINT32 TimeOut;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 9:
				_Struct CancelNtmsOperatorRequest 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 10:
				_Struct SatisfyNtmsOperatorRequest 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										GUID(true) RequestId;
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 11:
				_Struct ImportNtmsDatabase 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = "Method has no parameters"]
						_Struct Request
						{

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 12:
				_Struct ExportNtmsDatabase
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = "Method has no parameters"]
						_Struct Request
						{

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

// Not used on wire
//				Case 13:
//				_Struct UseRpcNotification 
//				{
//					Switch (property.MsrpcPType)
//					{
//						Case 0x00: //RPC_REQUEST
//						[RSMSummary = ""]
//						_Struct Request
//						{
//							Switch
//							{
//								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
//								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			//							DwordPtr Context;
			//							PWideString Protocol;
			//							PWideString EndPoint;
			//						}
			//
			//						Case 0x02: //RPC_RESPONSE
			//						[RSMSummary = ""]
			//						_Struct Response
			//						{
			//							Switch
			//							{
			//								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
			//								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
			//							}
			//							[ReturnValue = UINT32( FrameData, Offset )]
			//							UINT32 ReturnValue = RsmResultTable(this);
			// 
			//						}
			//					}
			//				}
				Case 14:
				_Struct AddNotification 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
									}
							}
						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 15:
				_Struct RemoveNotification 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = FORMATSTRING("Object Type = %s",RsmNtmsObjectsTypesEnum (Type))]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));	
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}

				Case 16:
				_Struct DispatchNotification 
				{
					Switch (property.MsrpcPType)
					{
						Case 0x00: //RPC_REQUEST
						[RSMSummary = ""]
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
										UINT32 Operation = FORMATSTRING("%u = %s",this,RsmNtmsNotificationOperationsEnum(this));
										GUID(true) Identifier;
									}
							}

						}

						Case 0x02: //RPC_RESPONSE
						[RSMSummary = ""]
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										[ReturnValue = UINT32( FrameData, Offset )]
										HRESULT ReturnValue;
									}
							}
						}
					}
				}
				
				Case 13:
				struct NotUsedOnWire
				{
					Switch (property.MSRPCPType)
					{
					// REQUEST
					case 0x00:
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						struct Request 
						{
							ReportParserWarning("RSM{8DA03F40-3419-11D1-8FB1-00A024CB6019}", "Invalid RSM method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}

					// RESPONSE
					case 0x02:
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						struct Response
						{
							ReportParserWarning("RSM{8DA03F40-3419-11D1-8FB1-00A024CB6019}", "Invalid RSM method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;					
						}
					}
				}
				Default:
				[post.Description = "Error: " + Property.ParserErrorMessage]
				ReportParserError(ParserErrorProtocolClassWindows, "RSM{8DA03F40-3419-11D1-8FB1-00A024CB6019}", FormatString( "Unknown Method opnum=%d", property.MSRPCOpnum ) ) ProtocolError;


//				Default: ReportParserError(ParserErrorProtocolClassWindows, "RSM", "Unknown RSM Request" ) ParserError;
			}
		}
	}

}

//======================================================================================
// INTERNAL DATA STRUCTURES, DATA TYPES and TABLES
//======================================================================================

//
//	NTMS_HANDLE
//	Alignment : 4
//
Struct NtmsHandle = FormatString("%u",NewHandle)
{
	UINT32 NewHandle;
}

Struct NtmsHandlePtr
{
	NdrPtr Pointer;
	switch
	{ 
		case Pointer.ReferentID > 0 : NtmsHandle NewHandle;
	}
}

struct SecurityDescriptorContainer
{
	NdrConformant MaxCount;
	switch
	{
		case MaxCount.MaxCount:
			NdrSecurityDescriptor NewDescriptor;
	}
}

struct RSMVoid 
{	

	UINT32 BufSize;
	GUID(true) Gbuf[BufSize];
}

struct RSMAttributeData(value)
{
	switch(value)
	{
		// MaxCount, Offset, ActualCount
		case 12:
			_struct
			{
				NdrConformantVarying Length;
				switch
				{
					case Length.ActualCount:
						BLOB(Length.ActualCount) AttributeData;
				}
			}
		// MaxCount
		case 4:
			_struct
			{
				NdrConformant MaxCount;
				switch
				{
					case MaxCount.MaxCount:
						BLOB(MaxCount.MaxCount) AttributeData;
				}
			}
	}
}

Struct LpSecurityAttributesNtms
{
	RsmVoid NewDescriptor;
	BOOL InheritHandle;
	UINT32 DescriptorLength;
}

struct LpSecurityAttributesNtmsPtr
{
	NdrPtr	Pointer;
	switch 
	{ 
		case Pointer.ReferentID > 0 : LpSecurityAttributesNtms NewAttrib;
	}
}

//Struct DwordPtr
//{
//	NdrPtr Pointer;
//	switch
//	{ 
//		case Pointer.ReferentID > 0 : UINT32 NewDword;
//	}
//}

Struct GuidPtr
{
	NdrPtr Pointer;
	switch
	{
		case Pointer.ReferentId > 0:
			Guid(true) Guid;
	}
}

Struct LPNtmsGuidNdrcv = size.actualcount > 0 ? FormatString("Number of Guids = %u", size.actualcount) : "NULL"
{
	NdrConformantVarying	Size;
	switch 
	{ 
		case size.actualcount > 0 : GUID(true) NewGuid[Size.actualcount];
	}
}

//struct RsmLpcwstr(AttribType1) = ((property.UpPointer > 0 && property.AttribType == Unique) || (property.AttribType == NoAttrib)) ? stringValue.toString : "NULL"
//{
//	[property.UpPointer = 0, property.AttribType = AttribType1]
//	switch 
//	{ 
//		case property.AttribType == Unique : 
//		_struct 
//		{
//			[Post.property.UpPointer = Pointer.ReferentID]
//			NdrPtr Pointer;
//		} 
//	}
//
//	switch 
//	{ 
//		case (property.AttribType == Unique && Pointer.ReferentID > 0) || (property.AttribType == NoAttrib) : WIDESTRING stringValue;
//	}
//}

struct RsmLpcstr(AttribType1) = ((property.UpPointer > 0 && property.AttribType == Unique) || (property.AttribType == NoAttrib)) ? stringValue.toString : "NULL"
{
	[property.UpPointer = 0, property.AttribType = AttribType1]
	switch 
	{ 
		case property.AttribType == Unique : 
		_struct 
		{
			[Post.property.UpPointer = Pointer.ReferentID]
			NdrPtr Pointer;
		} 
	}

	switch 
	{ 
		case (property.AttribType == Unique && Pointer.ReferentID > 0) || (property.AttribType == NoAttrib) : NdrString stringValue;
	}
}

//
//	NTMS_ALLOCATION_INFORMATION Structure
//	Alignment : NdrAlign
//
struct NtmsAllocationInformation
{
	UINT32 Size;
	NdrPtr ReservedPtr;
	switch
	{
		case ReservedPtr.ReferentId > 0:
			UINT8 Reserved;
	}
	Align4 Pad;
	GUID(true) AllocatedFrom;
} 
//
//	RSM_MESSAGE Structure
//	Alignment : NdrAlign
//
struct RsmMessage 
{ 
	GUIDPtr LpguidOperation;
	UINT32 NtmsType; 
	UINT32 State;
	UINT32 Flags; 
	UINT32 Priority; 
	UINT32 ErrorCode;
	NdrPtr ComputerNamePtr;
	NdrPtr ApplicationPtr;
	NdrPtr UserPtr;
	NdrPtr TimeSubmittedPtr;
	NdrPtr MessagePtr;	
	switch
	{
		case ComputerNamePtr.ReferentID: NdrWideString ComputerName;
	}
	switch
	{
		case ApplicationPtr.ReferentID: NdrWideString Application; 
	}
	switch
	{
		case UserPtr.ReferentID: NdrWideString User;
	}
	switch
	{
		case TimeSubmittedPtr.ReferentID: NdrWideString TimeSubmitted; 
	}
	switch
	{
		case MessagePtr.ReferentID: NdrWideString Message;
	}
}

Struct LpRsmMessage
{
	NdrPtr	Pointer;
	switch 
	{ 
		case Pointer.ReferentID > 0 : RsmMessage new_message;
	}
}

//Struct LpNtmsAsyncIO //unimplemented structure and reserved for future use
//{
//	NdrAlign pad;
//	GUID(true) OperationID;
//	GUID(true) EventID;
//	UINT32 OperationType;
//	UINT32 Result;
//	UINT32 AsyncState;
//	NtmsHandlePtr Event;
//	BOOL OnStateChange;
//}

//
//	NTMS_MOUNT_INFORMATION Structure
//	Alignment : NdrAlign
//
Struct LpNtmsMountInformation
{
	UINT32 Size;
	//LpNtmsAsyncIO lpReserved; //unimplemented structure and reserved for future use
	NdrPtr ReservedPtr;
	switch
	{
		case ReservedPtr.ReferentId > 0:
			UINT8 Reserved;
	}
}

Table RsmNtmsOpreqCommandEnum 
{
	Switch (Value)
	{ 
		Case 0x00000000: "NTMS_OPREQ_UNKNOWN"; 
		Case 0x00000001: "NTMS_OPREQ_NEWMEDIA"; 
		Case 0x00000002: "NTMS_OPREQ_CLEANER";
		Case 0x00000003: "NTMS_OPREQ_DEVICESERVICE";
		Case 0x00000004: "NTMS_OPREQ_MOVEMEDIA";
		Case 0x00000005: "NTMS_OPREQ_MESSAGE";
		Default:         "unknown";
	}
}

TABLE RsmNtmsDismountOptionsEnum  
{
	Switch (Value)
	{ 
		Case 0x00000001: "NTMS_DISMOUNT_DEFERRED";
		Case 0x00000002: "NTMS_DISMOUNT_IMMEDIATE";
		Default:         "unknown";
	}
}

TABLE RsmNtmsMountOptionsEnum
{
	Switch (Value)
	{ 
		Case 0x00000001: "NTMS_MOUNT_READ";
		Case 0x00000002: "NTMS_MOUNT_WRITE";
		Case 0x00000004: "NTMS_MOUNT_ERROR_NOT_AVAILABLE";
		Case 0x00000008: "NTMS_MOUNT_ERROR_OFFLINE";
		Case 0x00000010: "NTMS_MOUNT_SPECIFIC_DRIVE";
		Case 0x00000020: "NTMS_MOUNT_NOWAIT";
		Default:         "unknown";
	}
}

TABLE RsmNtmsNotificationOperationsEnum
{
	Switch (Value)
	{ 
		Case 0x00000001: "NTMS_OBJ_UPDATE";
		Case 0x00000002: "NTMS_OBJ_INSERT";
		Case 0x00000003: "NTMS_OBJ_DELETE";
		Case 0x00000004: "NTMS_EVENT_SIGNAL";
		Case 0x00000005: "NTMS_EVENT_COMPLETE";
		Default:         "unknown";
	}
}

TABLE RsmNtmsObjectsTypesEnum 
{
	Switch (value)
	{
		Case 0x00000000: "NTMS_UNKNOWN";
		Case 0x00000001: "NTMS_OBJECT";
		Case 0x00000002: "NTMS_CHANGER";
		Case 0x00000003: "NTMS_CHANGER_TYPE";
		Case 0x00000004: "NTMS_COMPUTER";
		Case 0x00000005: "NTMS_DRIVE";
		Case 0x00000006: "NTMS_DRIVE_TYPE";
		Case 0x00000007: "NTMS_IEDOOR";
		Case 0x00000008: "NTMS_IEPORT";
		Case 0x00000009: "NTMS_LIBRARY";
		Case 0x0000000A: "NTMS_LIBREQUEST";
		Case 0x0000000B: "NTMS_LOGICAL_MEDIA";
		Case 0x0000000C: "NTMS_MEDIA_POOL";
		Case 0x0000000D: "NTMS_MEDIA_TYPE";
		Case 0x0000000E: "NTMS_PARTITION";
		Case 0x0000000F: "NTMS_PHYSICAL_MEDIA";
		Case 0x00000010: "NTMS_STORAGESLOT";
		Case 0x00000011: "NTMS_OPREQUEST";
		Case 0x00000012: "NTMS_UI_DESTINATION";
		Default:         "unknown";
	}
}

TABLE RsmNtmsUITypesEnum
{
	Switch (value)
	{
		Case 0x00000000: "NTMS_UITYPE_INVALID";
		Case 0x00000001: "NTMS_UITYPE_INFO";
		Case 0x00000002: "NTMS_UITYPE_REQ";
		Case 0x00000003: "NTMS_UITYPE_ERR";
		Default:         "unknown";
	}
}

TABLE RsmNtmsUIOperationsEnum
{
	Switch (value)
	{
		Case 0x00000001: "NTMS_UIDEST_ADD";
		Case 0x00000002: "NTMS_UIDEST_DELETE";
		Case 0x00000003: "NTMS_UIDEST_DELETEALL";
		Default:         "unknown";
	}
}

TABLE  RsmNtmsInjectOperationEnum
{
	Switch (value)
	{
		Case 0x00000000: "NTMS_INJECT_START";
		Case 0x00000001: "NTMS_INJECT_STOP";
		Case 0x00000002: "NTMS_INJECT_RETRACT";
		Case 0x00000003: "NTMS_INJECT_STARTMANY";
		Default:         "unknown";
	}
}

TABLE RsmNtmsCreateOptionsEnum 
{
	Switch (value)
	{
		Case 0x00000001: "NTMS_OPEN_EXISTING";
		Case 0x00000002: "NTMS_CREATE_NEW";
		Case 0x00000003: "NTMS_OPEN_ALWAYS"; 
		Default:         "unknown";
	}
}

TABLE RSM_NtmsInventoryMethod_enum
{
	Switch (value)
	{
		Case 0x00000000: "NTMS_INVENTORY_NONE";
		Case 0x00000001: "NTMS_INVENTORY_FAST";
		Case 0x00000002: "NTMS_INVENTORY_OMID";
		Case 0x00000003: "NTMS_INVENTORY_DEFAULT";
		Case 0x00000004: "NTMS_INVENTORY_SLOT";
		Case 0x00000005: "NTMS_INVENTORY_STOP";
		Default:         "unknown";
	}
}

TABLE  RsmNtmsAllocateOptionsEnum 
{
	Switch (value)
	{
		Case 0x00000001: "NTMS_ALLOCATE_NEW";
		Case 0x00000002: "NTMS_ALLOCATE_NEXT";
		Case 0x00000004: "NTMS_ALLOCATE_ERROR_IF_UNAVAILABLE";
		Default:         "unknown";
	}
}

TABLE RsmOMIDLabelTypeEnum
{
	Switch (value)
	{
		Case 0x00000001: "NTMS_OMID_TYPE_FILESYSTEM_INFO";
		Case 0x00000002: "NTMS_OMID_TYPE_RAW_LABEL";
		Default:         "unknown";
	}
}

TABLE RsmNtmsEjectOperationEnum
{
	Switch (value)
	{
		Case 0x00000000: "NTMS_EJECT_START";
		Case 0x00000001: "NTMS_EJECT_STOP";
		Case 0x00000002: "NTMS_EJECT_QUEUE";
		Case 0x00000003: "NTMS_EJECT_FORCE";
		Case 0x00000004: "NTMS_EJECT_IMMEDIATE";
		Case 0x00000005: "NTMS_EJECT_ASK_USER";
		Default:         "unknown";
	}
}

table NtmsObjectInformationAOperationalStateTable(value)
{
	switch(value)
	{
		case 0: "NTMS_READY";
		case 10: "NTMS_INITIALIZING";
		case 20: "NTMS_NEEDS_SERVICE";
		case 21: "NTMS_NOT_PRESENT";
		default:
			FormatString("Unknwon value: %d", value);		
	}
}

//
//	NTMS_OBJECTINFORMATIONA Structure
//	Alignment : 8
//
Struct NtmsObjectInformationA
{
	Align8 Pad1;
	UINT32 Size;
	UINT32 Type;
	SystemTime Created;
	SystemTime Modified;
	GUID(true) ObjectGuid;
	BOOL Enabled;
	UINT32 OperationalState = NtmsObjectInformationAOperationalStateTable(this);
	AsciiString(64) Name;
	AsciiString(127) Description;
	Align4 Pad;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad4;
	}
	UINT32 SwitchValue = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad2;
	}
	switch(Type)
	{
		case NtmsDrive		 :	NtmsDriveInformationA		Drive; 		//NTMS_DRIVE
		case NtmsDriveType	 :	NtmsDriveTypeInformationA	DriveType; 	//NTMS_DRIVE_TYPE
		case NtmsLibrary	 :	NtmsLibraryInformation		Library; 	//NTMS_LIBRARY
		case NtmsChanger	 :	NtmsChangerInformationA		Changer; 	//NTMS_CHANGER
		case NtmsChangerType :	NtmsChangerTypeInformationA	ChangerType; 	//NTMS_CHANGER_TYPE
		case NtmsStorageSlot :	NtmsStorageSlotInformation	StorageSlot; 	//NTMS_STORAGESLOT
		case NtmsIeDoor		 :	NtmsIeDoorStr			IEDoor; 	//NTMS_IEDOOR
		case NtmsIePort		 :	NtmsIePortStr			IEPort;  	//NTMS_IEPORT
		case NtmsPysicalMedia:	NtmsPmidInformationA		PhysicalMedia; 	//NTMS_PHYSICAL_MEDIA
		case NtmsLogicalMedia:	NtmsLmidInformation		LogicalMedia; 	//NTMS_LOGICAL_MEDIA
		case NtmsPartition	 :	 	//NTMS_PARTITION
			struct 
			{
				Align8 Pad;
				NtmsPartitionInformationA	Partition;
			}
		case NtmsMediaPool	 :	NtmsMediaPoolInformation	MediaPool; 	//NTMS_MEDIA_POOL
		case NtmsMediaType	 :	NtmsMediaTypeInformation	MediaType; 	//NTMS_MEDIA_TYPE
		case NtmsLibRequest	 :	NtmsLibRequestInformationA	LibRequest; 	//NTMS_LIBREQUEST
		case NtmsOpRequest	 :	NtmsOpRequestInformationA	OpRequest; 	//NTMS_OPREQUEST
		case NtmsComputer	 :	NtmsComputerInformation		Computer;	//NTMS_COMPUTER
		//Default: "unknown";
	}
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad3;
	}
}

table NtmsDriveInformationAStateTable(value)
{
	switch(value)
	{
		case 0: "NTMS_DRIVESTATE_DISMOUNTED";
		case 1: "NTMS_DRIVESTATE_MOUNTED";
		case 2: "NTMS_DRIVESTATE_LOADED";
		case 5: "NTMS_DRIVESTATE_UNLOADED";
		case 6: "NTMS_DRIVESTATE_BEING_CLEANED";
		case 7: "NTMS_DRIVESTATE_DISMOUNTABLE";
		default:
			FormatString("Unknown value: %d", value);		
	}
}

//
//	NTMS_DRIVEINFORMATIONA Structure
//	Alignment : 4
//
Struct NtmsDriveInformationA
{
	UINT32 DriveNumber; //renamed as number is a reserved word
	UINT32 State = NtmsDriveInformationAStateTable(this);
	GUID(true) DriveType;
	AsciiString(64) DeviceName;
	AsciiString(32) SerialNumber;
	AsciiString(32) Revision;
	UINT16 ScsiPort;
	UINT16 ScsiBus;
	UINT16 ScsiTarget;
	UINT16 ScsiLun;
	UINT32 MountCount;
	SystemTime LastCleanedTs;
	GUID(true) SavedPartitionId;
	GUID(true) Library;
	GUID(true) Reserved;
	UINT32 DeferDismountDelay;
}

table NtmsDriveTypeInformationDeviceTypeTable(value)
{
	switch(value)
	{
		case 0x00000002: "FILE_DEVICE_CD_ROM";
		case 0x00000007: "FILE_DEVICE_DISK";
		case 0x00000033: "FILE_DEVICE_DVD";
		case 0x0000001F: "FILE_DEVICE_TAPE";
		default:
			FormatString("Unknown value: %d", value);
	}
}

//
//	NTMS_DRIVETYPEINFORMATIONA Structure
//	Alignment : 4
//
Struct NtmsDriveTypeInformationA
{
	AsciiString(128) Vendor;
	Asciistring(128) Product;
	UINT32 NumberOfHeads;
	UINT32 DeviceType = NtmsDriveTypeInformationDeviceTypeTable(this);
}

//
//	NTMS_CHANGERINFORMATIONA Structure
//	Alignment : 4
//
Struct NtmsChangerInformationA
{
	UINT32 Number;
	GUID(true) ChangerType;
	AsciiString(32) SerialNumber;
	AsciiString(32) Revision;
	AsciiString(64) DeviceName;
	UINT16 ScsiPort;
	UINT16 ScsiBus;
	UINT16 ScsiTarget;
	UINT16 ScsiLun;
	GUID(true) Library;
}

//
//	NTMS_CHANGERTYPEINFORMATIONA Structure
//	Alignment : 4
//
Struct NtmsChangerTypeInformationA
{
	AsciiString(128) Vendor;
	AsciiString(128) Product;
	UINT32 DeviceType = this == 0x00000030? "FILE_DEVICE_CHANGER": "Unknwon DeviceType";
}

table NtmsPmidInformationABarCodeStateTable(value)
{
	switch(value)
	{
		case 1: "NTMS_BARCODESTATE_OK";
		case 2: "NTMS_BARCODESTATE_UNREADABLE";
		default:
			FormatString("Unknown value: %d", value);
	}
}

table NtmsPmidInformationAMediaStateTable(value)
{
	switch(value)
	{
		case 0: "NTMS_MEDIASTATE_IDLE";
		case 1: "NTMS_MEDIASTATE_INUSE";
		case 2: "NTMS_MEDIASTATE_MOUNTED";
		case 3: "NTMS_MEDIASTATE_LOADED";
		case 4: "NTMS_MEDIASTATE_UNLOADED";
		case 5: "NTMS_MEDIASTATE_OPERROR";
		case 6: "NTMS_MEDIASTATE_OPREQ";
		default:
			FormatString("Unknown value: %d", value);
	}
}

//
//	NTMS_PMIDINFORMATIONA Structure
//	Alignment : 4
//
Struct NtmsPmidInformationA
{
	GUID(true) CurrentLibrary;
	GUID(true) MediaPool;
	GUID(true) Location;
	UINT32 LocationType = RsmNtmsObjectsTypesEnum(this);
	GUID(true) MediaType;
	GUID(true) HomeSlot;
	AsciiString(64) BarCode;
	UINT32 BarCodeState = NtmsPmidInformationABarCodeStateTable(this);
	AsciiString(32) SequenceNumber;
	UINT32 MediaState = NtmsPmidInformationAMediaStateTable(this);
	UINT32 NumberOfPartitions;
	UINT32 MediaTypeCode;
	UINT32 DensityCode;
	GUID(true) MountedPartition;
}

table NtmsPartitionInformationAStateTable(value)
{
	switch(value)
	{
		case 0: "NTMS_PARTSTATE_UNKNOWN";
		case 1: "NTMS_PARTSTATE_UNPREPARED";
		case 2: "NTMS_PARTSTATE_INCOMPATIBLE";
		case 3: "NTMS_PARTSTATE_DECOMMISSIONED";
		case 4: "NTMS_PARTSTATE_AVAILABLE";
		case 5: "NTMS_PARTSTATE_ALLOCATED";
		case 6: "NTMS_PARTSTATE_COMPLETE";
		case 7: "NTMS_PARTSTATE_FOREIGN";
		case 8: "NTMS_PARTSTATE_IMPORT";
		case 9: "NTMS_PARTSTATE_RESERVED";
		default:
			FormatString("Unknown value: %d", value);
	}
}

//
//	NTMS_PARTITIONINFORMATIONA Structure
//	Alignment : 8
//
Struct NtmsPartitionInformationA
{
	GUID(true) PhysicalMedia;
	GUID(true) LogicalMedia;
	UINT32 State = NtmsPartitionInformationAStateTable(this);
	UINT16 Side; 
	Align4 Pad1;
	UINT32 OmidLabelIdLength;
	UINT8 OmidLabelId[255];
	AsciiString(64) OmidLabelType;
	AsciiString(256) OmidLabelInfo;
	Align4 Pad2;
	UINT32 MountCount;
	UINT32 AllocateCount;
	Align8 Pad3;
	INT64 Capacity;
}

table NtmsLibRequestInformationAOperationCodeTable(value)
{
	switch(value)
	{
		case 0: "NTMS_LM_REMOVE";
		case 1: "NTMS_LM_DISABLECHANGER or NTMS_LM_DISABLELIBRARY";
		case 2: "NTMS_LM_ENABLECHANGER or NTMS_LM_ENABLELIBRARY";
		case 3: "NTMS_LM_DISABLEDRIVE";
		case 4: "NTMS_LM_ENABLEDRIVE";
		case 5: "NTMS_LM_DISABLEMEDIA";
		case 6: "NTMS_LM_ENABLEMEDIA";
		case 7: "NTMS_LM_UPDATEOMID";
		case 8: "NTMS_LM_INVENTORY";
		case 9: "NTMS_LM_DOORACCESS";
		case 10: "NTMS_LM_EJECT";
		case 11: "NTMS_LM_EJECTCLEANER";
		case 12: "NTMS_LM_INJECT";
		case 13: "NTMS_LM_INJECTCLEANER";
		case 14: "NTMS_LM_PROCESSOMID";
		case 15: "NTMS_LM_CLEANDRIVE";
		case 16: "NTMS_LM_DISMOUNT";
		case 17: "NTMS_LM_MOUNT";
		case 18: "NTMS_LM_WRITESCRATCH";
		case 19: "NTMS_LM_CLASSIFY";
		case 20: "NTMS_LM_RESERVECLEANER";
		case 21: "NTMS_LM_RELEASECLEANER";
		default:
			FormatString("Unknown value: %d", value);
	}
}

table NtmsLibRequestInformationAOperationOptionTable(value)
{
	switch(value)
	{
		case 0x00000000: "IMMEDIATE";
		case 0x00000001: "DEFERRED";
		case 0x00000002: "FORCEIMMEDIATE";
		case 0x00000003: "FORCEDEFERRED";
		case 0x00000004: "INJECTMANY";
		default:
			FormatString("Unknown value: %d", value);
	}
}

table NtmsLibRequestInformationAOperationOptionInventortyTable(value)
{
	switch(value)
	{
		case 0x00000000: "FULL_INVENTORY";
		case 0x00000001: "SLOTS_ONLY";
		default:
			FormatString("Unknown value: %d", value);
	}
}

table NtmsLibRequestInformationAStateTable(value)
{
	switch(value)
	{
		case 0: "NTMS_LM_QUEUED";
		case 1: "NTMS_LM_INPROCESS";
		case 2: "NTMS_LM_PASSED";
		case 3: "NTMS_LM_FAILED";
		case 4: "NTMS_LM_INVALID";
		case 5: "NTMS_LM_WAITING";
		case 7: "NTMS_LM_CANCELLED";
		case 8: "NTMS_LM_STOPPED";
		default:
			FormatString("Unknwon value: %d", value);
	}
}

//
//	NTMS_LIBREQUESTINFORMATIONA Structure
//	Alignment : 4
//
Struct NtmsLibRequestInformationA
{
	UINT32 OperationCode = NtmsLibRequestInformationAOperationCodeTable(this);
	switch(OperationCode)
	{
		case 17:
			UINT32 OperationMount = NtmsLibRequestInformationAOperationOptionTable(this);
		case 16:
			UINT32 OperatorDismount = NtmsLibRequestInformationAOperationOptionTable(this);
		case 10:
			UINT32 OperatorEject = NtmsLibRequestInformationAOperationOptionTable(this);
		case 8:
			UINT32 OperatorInventory = NtmsLibRequestInformationAOperationOptionInventortyTable(this);
		default:
			UINT32 OperationOption;
	}
	UINT32 State = NtmsLibRequestInformationAStateTable(this);
	GUID(true) PartitionId;
	GUID(true) DriveId;
	GUID(true) PhysMediaId;
	GUID(true) Library;
	GUID(true) SlotId;
	SystemTime TimeQueued;
	SystemTime TimeCompleted;
	AsciiString(64) Application;
	AsciiString(64) User;
	AsciiString(64) Computer;
	UINT32 ErrorCode;
	GUID(true) WorkItemId;
	UINT32 Priority;
}

//
//	NTMS_OPREQUESTINFORMATIONA Structure
//	Alignment : 4
//
Struct NtmsOpRequestInformationA
{
	UINT32 Request = FORMATSTRING("%u = %s",this,RsmNtmsOpreqCommandEnum (this));
	SystemTime Submitted;
	UINT32 State;
	AsciiString(256) Message;
	UINT32 Arg1Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
	GUID(true) Arg1;
	UINT32 Arg2Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
	GUID(true) Arg2;
	AsciiString(64) Application;
	AsciiString(64) User;
	AsciiString(64) Computer;
}

//
//	NTMS_OBJECTINFORMATIONW Structure
//	Alignment : 8
//
Struct NtmsObjectInformationW  //tested and working
{
	Align8 Pad1;
	UINT32 Size;
	UINT32 Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
	SystemTime Created;
	SystemTime Modified;
	GUID(true) ObjectGuid;
	BOOL Enabled;
	UINT32 OperationalState = NtmsObjectInformationAOperationalStateTable(this);
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) Name;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(127) Description;
	Align4 Padding;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad2;
	}
	UINT32 SwitchValue = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad3;
	}
	switch(Type)
	{    
		case NtmsDrive		 :	NtmsDriveInformationW		Drive;	 	//NTMS_DRIVE
		case NtmsDriveType	 :	NtmsDriveTypeInformationW	DriveType; 	//NTMS_DRIVE_TYPE
		case NtmsLibrary	 :	NtmsLibraryInformation		Library; 	//NTMS_LIBRARY
		case NtmsChanger	 :	NtmsChangerInformationW		Changer; 	//NTMS_CHANGER
		case NtmsChangerType :	NtmsChangerTypeInformationW	ChangerType; 	//NTMS_CHANGER_TYPE
		case NtmsStorageSlot :	NtmsStorageSlotInformation	StorageSlot; 	//NTMS_STORAGESLOT
		case NtmsIeDoor		 :	NtmsIeDoorStr			IEDoor; 	//NTMS_IEDOOR
		case NtmsIePort		 :	NtmsIePortStr			IEPort;  	//NTMS_IEPORT
		case NtmsPysicalMedia:	NtmsPmidInformationW		PhysicalMedia; 	//NTMS_PHYSICAL_MEDIA
		case NtmsLogicalMedia:	NtmsLmidInformation		LogicalMedia; 	//NTMS_LOGICAL_MEDIA
		case NtmsPartition	 :	 		//NTMS_PARTITION
			struct
			{
				Align8 Pad;
				NtmsPartitionInformationW	Partition;
			}
		case NtmsMediaPool	 :	NtmsMediaPoolInformation	MediaPool; 	//NTMS_MEDIA_POOL
		case NtmsMediaType	 :	NtmsMediaTypeInformation	MediaType; 	//NTMS_MEDIA_TYPE
		case NtmsLibRequest	 :	NtmsLibRequestInformationW	LibRequest; 	//NTMS_LIBREQUEST
		case NtmsOpRequest	 :	NtmsOpRequestInformationW	OpRequest; 	//NTMS_OPREQUEST
		case NtmsComputer	 :	NtmsComputerInformation		Computer;	//NTMS_COMPUTER
		//Default: "unknown";
	}
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad4;
	}
	
}

//
//	NTMS_DRIVEINFORMATIONW Structure
//	Alignment : 4
//
Struct NtmsDriveInformationW
{
	UINT32 DriveNumber; //renamed as number is a reserved word
	UINT32 State = NtmsDriveInformationAStateTable(this);
	GUID(true) DriveType;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) DeviceName;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(32) SerialNumber;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(32) Revision;
	UINT16 ScsiPort;
	UINT16 ScsiBus;
	UINT16 ScsiTarget;
	UINT16 ScsiLun;
	UINT32 MountCount;
	SystemTime LastCleanedTs;
	Align4 Pad;
	GUID(true) SavedPartitionId;
	GUID(true) Library;
	GUID(true) Reserved;
	UINT32 DeferDismountDelay;
}

//
//	NTMS_DRIVETYPEINFORMATIONW Structure
//	Alignment : 4
//
Struct NtmsDriveTypeInformationW
{
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(128) Vendor;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(128) Product;
	UINT32 NumberOfHeads;
	UINT32 DeviceType = NtmsMediaTypeInformationDeviceTypeTable(this);
}

table NtmsLibraryInformationLibraryTypeTable(value)
{
	switch(value)
	{
		case 0x00000000: "NTMS_LIBRARYTYPE_UNKNOWN";
		case 0x00000001: "NTMS_LIBRARYTYPE_OFFLINE";
		case 0x00000002: "NTMS_LIBRARYTYPE_ONLINE";
		case 0x00000003: "NTMS_LIBRARYTYPE_ STANDALONE";
		default:
			FormatString("Unknown value: %d", value);
	}
}

table NtmsLibraryInformationInventoryMethodTable(value)
{
	switch(value)
	{
		case 0x00000000: "NTMS_INVENTORY_NONE";
		case 0x00000001: "NTMS_INVENTORY_FAST";
		case 0x00000002: "NTMS_INVENTORY_OMID";
		default:
			FormatString("Unknown value: %d", value);
	}
}

//
//	NTMS_LIBRARYINFORMATION Structure
//	Alignment : 4
//
struct NtmsLibraryInformation //Tested and Working
{
	UINT32 LibraryType = NtmsLibraryInformationLibraryTypeTable(this);
	GUID(true) CleanerSlot;
	GUID(true) CleanerSlotDefault;
	BOOL LibrarySupportsDriveCleaning;
	BOOL BarCodeReaderInstalled;
	UINT32 InventoryMethod = NtmsLibraryInformationInventoryMethodTable(this);
	UINT32 CleanerUsesRemaining;
	UINT32 FirstDriveNumber;
	UINT32 NumberOfDrives;
	UINT32 FirstSlotNumber;
	UINT32 NumberOfSlots;
	UINT32 FirstDoorNumber;
	UINT32 NumberOfDoors;
	UINT32 FirstPortNumber;
	UINT32 NumberOfPorts;
	UINT32 FirstChangerNumber;
	UINT32 NumberOfChangers;
	UINT32 NumberOfMedia;
	UINT32 NumberOfMediaTypes;
	UINT32 NumberOfLibRequests;
	GUID(true) Reserved;
	BOOL AutoRecovery;
	UINT32 Flags
	{
		UINT32 FIXEDOFFLINE:1 = FormatString("              (%s) %s", this.ToBitString, this? "The library is an offline library": "");
		UINT32 CLEANERPRESENT:1 = FormatString("            (%s) %s", this.ToBitString, this? "A cleaner is present in the changer": "");
		UINT32 Reserved1:1 = FormatString("                 (%s)", this.ToBitString);
		UINT32 IGNORECLEANERUSESREMAINING:1 = FormatString("(%s) %s", this.ToBitString, this? "The cleaner cartridge MUST be used until it no longer cleans the drive": "");
		UINT32 RECOGNIZECLEANERBARCODE:1 = FormatString("   (%s) %s", this.ToBitString, this? "Bar coded cartridges that have CLN as a prefix MUST be treated as cleaner cartridges": "");
		UINT32 Reserved2:27 = FormatString("                 (%s)", this.ToBitString);
	};
}

//
//	NTMS_CHANGERINFORMATIONW Structure
//	Alignment : 4
//
Struct NtmsChangerInformationW
{
	UINT32 Number;
	GUID(true) ChangerType;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(32) SerialNumber;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(32) Revision;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) DeviceName;
	UINT16 ScsiPort;
	UINT16 ScsiBus;
	UINT16 ScsiTarget;
	UINT16 ScsiLun;
	GUID(true) Library;
}

//
//	NTMS_CHANGERTYPEINFORMATIONW Structure
//	Alignment : 4
//
Struct NtmsChangerTypeInformationW
{
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(128) Vendor;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(128) Product;
	UINT32 DeviceType = this == 0x00000030? "FILE_DEVICE_CHANGER": "Unknwon DeviceType";
}

table NtmsStorageSlotInformationStateTable(value)
{
	switch(value)
	{
		case 0x00000000: "NTMS_SLOTSTATE_UNKNOWN";
		case 0x00000001: "NTMS_SLOTSTATE_FULL";
		case 0x00000002: "NTMS_SLOTSTATE_EMPTY";
		case 0x00000003: "NTMS_SLOTSTATE_NOTPRESENT";
		case 0x00000004: "NTMS_SLOTSTATE_NEEDSINVENTORY";
		default:
			FormatString("Unknown value: %d", value);
	}
}

//
//	NTMS_STORAGESLOTINFORMATION Structure
//	Alignment : 4
//
Struct NtmsStorageSlotInformation
{
	UINT32 Number;  
	UINT32 State = NtmsStorageSlotInformationStateTable(this);  
	GUID(true) Library;
}

//Struct NtmsIeDoorStr
//{
//	UINT32	Wally;
//}

//
//	NTMS_IEDOORINFORMATION Structure
//	Alignment : 4
//
struct NtmsIeDoorStr
{
	UINT32 Number;
	UINT32 State = NtmsStorageSlotInformationStateTable(this);
	UINT16 MaxOpenSecs;
	Align4 Pad;
	GUID(true) Library;
}

//Struct NtmsIePortStr
//{
//	UINT32	Wally;
//}

table NtmsIePortStrContentTable(value)
{
	switch(value)
	{
		case 0x00000000: "NTMS_PORTCONTENT_UNKNOWN";
		case 0x00000001: "NTMS_PORTCONTENT_FULL";
		case 0x00000002: "NTMS_PORTCONTENT_EMPTY";
		default:
			FormatString("Unknwon value: %d", value);
	}
}

table NtmsIePortStrPositionTable(value)
{
	switch(value)
	{
		case 0x00000000: "NTMS_PORTPOSITION_UNKNOWN";
		case 0x00000001: "NTMS_PORTPOSITION_EXTENDED";
		case 0x00000002: "NTMS_PORTPOSITION_RETRACTED";
		default:
			FormatString("Unknown value: %d", value);
	}
}

//
//	NTMS_IEPORTINFORMATION Structure
//	Alignment : 4
//
struct NtmsIePortStr
{
	UINT32 Number;
	UINT32 Content = NtmsIePortStrContentTable(this);
	UINT32 Position = NtmsIePortStrPositionTable(this);
	UINT16 MaxExtendSecs;
	Align4 Pad;
	GUID(true) Library;
}

//
//	NTMS_PMIDINFORMATIONW Structure
//	Alignment : 4
Struct NtmsPmidInformationW
{
	GUID(true) CurrentLibrary;
	GUID(true) MediaPool;
	GUID(true) Location;
	UINT32 LocationType = RsmNtmsObjectsTypesEnum(this);
	GUID(true) MediaType;
	GUID(true) HomeSlot;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) BarCode;
	UINT32 BarCodeState = NtmsPmidInformationABarCodeStateTable(this);
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(32) SequenceNumber;
	UINT32 MediaState = NtmsPmidInformationAMediaStateTable(this);
	UINT32 NumberOfPartitions;
	UINT32 MediaTypeCode;
	UINT32 DensityCode;
	GUID(true) MountedPartition;
}

//
//	NTMS_LMIDINFORMATION Structure
//	Alignment : 4
//
struct NtmsLmidInformation
{
	GUID(true) MediaPool;
	UINT32 NumberOfPartitions;
}

//
//	NTMS_PARTITIONINFORMATIONW Structure
//	Alignment : 8
//
Struct NtmsPartitionInformationW
{

	GUID(true) PhysicalMedia;
	GUID(true) LogicalMedia;
	UINT32 State = NtmsPartitionInformationAStateTable(this);
	UINT16 Side; 
	Align4 Pad1;
	UINT32 OmidLabelIdLength;
	UINT8 OmidLabelId[255];
	Align2 Pad2;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) OmidLabelType; 
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(256) OmidLabelInfo;
	UINT32 MountCount;
	UINT32 AllocateCount;
	Align8 Pad3;
	INT64 Capacity;
}

table NtmsMediaPoolInformationPoolTypeTable(value)
{
	switch(value)
	{
		case 0x00000000: "NTMS_POOLTYPE_UNKNOWN";
		case 0x00000001: "NTMS_POOLTYPE_SCRATCH";
		case 0x00000002: "NTMS_POOLTYPE_FOREIGN";
		case 0x00000003: "NTMS_POOLTYPE_IMPORT";
		case 0x000003E8: "NTMS_POOLTYPE_APPLICATION";
		default:
			FormatString("Unknown value: %d", value);
	}
}

//
//	NTMS_MEDIAPOOLINFORMATION Structure
//	Alignment : 4
//
struct NtmsMediaPoolInformation
{
	UINT32 PoolType = NtmsMediaPoolInformationPoolTypeTable(this);
	GUID(true) MediaType;
	GUID(true) Parent;
	UINT32 AllocationPolicy = this == 0x00000001? "NTMS_ALLOCATE_FROMSCRATCH": FormatString("%d", this);
	UINT32 DeallocationPolicy = this == 0x00000001? "NTMS_DEALLOCATE_TOSCRATCH": FormatString("%d", this);
	UINT32 MaxAllocates;
	UINT32 NumberOfPhysicalMedia;
	UINT32 NumberOfLogicalMedia;
	UINT32 NumberOfMediaPools;
}

table NtmsMediaTypeInformationMediaTypeTable(value)
{
	switch(value)
	{
		case 0x00000020: "Tape - DAT DDS1, 2. (all vendors)";
		case 0x00000021: "Tape - miniQIC Tape";
		case 0x00000022: "Tape - Travan TR-1, TR-2, TR-3, and so forth.";
		case 0x00000023: "Tape - QIC";
		case 0x00000024: "Tape - 8 mm Exabyte Metal Particle";
		case 0x00000025: "Tape - 8 mm Exabyte Advanced Metal Evap";
		case 0x00000026: "Tape - 8 mm Sony AIT";
		case 0x00000027: "Tape - DLT Compact IIIxt, IV";
		case 0x00000028: "Tape - Philips NCTP";
		case 0x00000029: "Tape - IBM 3480";
		case 0x0000002a: "Tape - IBM 3490E";
		case 0x0000002b: "Tape - IBM Magstar 3590";
		case 0x0000002c: "Tape - IBM Magstar MP";
		case 0x0000002d: "Tape - STK Data D3";
		case 0x0000002e: "Tape - Sony DTF";
		case 0x0000002f: "Tape - 6 mm Digital Video";
		case 0x00000030: "Tape - Exabyte DMI and compatibles";
		case 0x00000031: "Tape - Sony D2S and D2L";
		case 0x00000032: "Cleaner - All Drive types that support Drive Cleaners";
		case 0x00000033: "Opt_Disk - CD";
		case 0x00000034: "Opt_Disk - CD-Recordable (Write Once)";
		case 0x00000035: "Opt_Disk - CD-Rewritable";
		case 0x00000036: "Opt_Disk - DVD-ROM";
		case 0x00000037: "Opt_Disk - DVD-Recordable (Write Once)";
		case 0x00000038: "Opt_Disk - DVD-Rewritable";
		case 0x00000039: "Opt_Disk - 3.5\" Rewritable MO Disk";
		case 0x0000003a: "Opt_Disk - MO 5.25\" Write Once";
		case 0x0000003b: "Opt_Disk - MO 5.25\" Rewritable (not LIMDOW)";
		case 0x0000003c: "Opt_Disk - MO 5.25\" Rewritable (LIMDOW)";
		case 0x0000003d: "Opt_Disk - Phase Change 5.25\" Write Once Optical";
		case 0x0000003e: "Opt_Disk - Phase Change 5.25\" Rewritable";
		case 0x0000003f: "Opt_Disk - PhaseChange Dual Rewritable";
		case 0x00000040: "Opt_Disk - Ablative 5.25\" Write Once Optical";
		case 0x00000041: "Opt_Disk - Pinnacle Apex 4.6GB Rewritable Optical";
		case 0x00000042: "Opt_Disk - Sony 12\" Write Once";
		case 0x00000043: "Opt_Disk - Philips/LMS 12\" Write Once";
		case 0x00000044: "Opt_Disk - Hitachi 12\" Write Once";
		case 0x00000045: "Opt_Disk - Cygnet/ATG 12\" Write Once";
		case 0x00000046: "Opt_Disk - Kodak 14\" Write Once";
		case 0x00000047: "Opt_Disk - Near Field Recording (Terastor)";
		case 0x00000048: "Opt_Disk - Nikon 12\" Rewritable";
		case 0x00000049: "Mag_Disk - Iomega Zip";
		case 0x0000004a: "Mag_Disk - Iomega Jaz";
		case 0x0000004b: "Mag_Disk - Syquest EZ135";
		case 0x0000004c: "Mag_Disk - Syquest EzFlyer";
		case 0x0000004d: "Mag_Disk - Syquest SyJet";
		case 0x0000004e: "Mag_Disk - 2.5\" Floppy";
		case 0x0000004f: "Tape - 8mm Hitachi";
		case 0x00000050: "Ampex DST Small Tapes";
		case 0x00000051: "Ampex DST Medium Tapes";
		case 0x00000052: "Ampex DST Large Tapes";
		case 0x00000053: "Ecrix 8 mm Tape";
		case 0x00000054: "Ecrix 8 mm Tape";
		case 0x00000055: "STK 9840";
		case 0x00000056: "IBM, HP, Seagate LTO Ultrium";
		case 0x00000057: "IBM, HP, Seagate LTO Accelis";
		case 0x00000058: "Opt_Disk - DVD-RAM";
		case 0x00000059: "AIT2 or higher";
		case 0x0000005a: "OnStream ADR Mediatypes";
		case 0x0000005b: "OnStream ADR Mediatypes";
		case 0x0000005c: "STK 9940";
		case 0x0000005d: "SAIT Tapes";
		default:
			FormatString("Unknown vakue: %d", value);
	}
}

table NtmsMediaTypeInformationReadWriteCharacteristicsTable(value)
{
	switch(value)
	{
		case 0x00000000: "NTMS_MEDIARW_UNKNOWN";
		case 0x00000001: "NTMS_MEDIARW_REWRITABLE";
		case 0x00000002: "NTMS_MEDIARW_WRITEONCE";
		case 0x00000003: "NTMS_MEDIARW_READONLY";
		default:
			FormatString("Unknown value: %d", value);
	}
}

table NtmsMediaTypeInformationDeviceTypeTable(value)
{
	switch(value)
	{
		case 0x00000002: "FILE_DEVICE_CD_ROM";
		case 0x00000007: "FILE_DEVICE_DISK";
		case 0x00000033: "FILE_DEVICE_DVD";
		case 0x0000001F: "FILE_DEVICE_TAPE";
		default:
			FormatString("Unknown value: %d", value);
	}
}

//
//	NTMS_MEDIATYPEINFORMATION Structure
//	Alignment : 4
//
struct NtmsMediaTypeInformation
{
	UINT32 MediaType = NtmsMediaTypeInformationMediaTypeTable(this);
	UINT32 NumberOfSides;
	UINT32 ReadWriteCharacteristics = NtmsMediaTypeInformationReadWriteCharacteristicsTable(this);
	UINT32 DeviceType = NtmsMediaTypeInformationDeviceTypeTable(this);
}

//
//	NTMS_LIBREQUESTINFORMATIONW Structure
//	Alignment : 4
//
Struct NtmsLibRequestInformationW
{
	UINT32 OperationCode = NtmsLibRequestInformationAOperationCodeTable(this);
	switch(OperationCode)
	{
		case 17:
			UINT32 OperationMount = NtmsLibRequestInformationAOperationOptionTable(this);
		case 16:
			UINT32 OperatorDismount = NtmsLibRequestInformationAOperationOptionTable(this);
		case 10:
			UINT32 OperatorEject = NtmsLibRequestInformationAOperationOptionTable(this);
		case 8:
			UINT32 OperatorInventory = NtmsLibRequestInformationAOperationOptionInventortyTable(this);
		default:
			UINT32 OperationOption;
	}
	UINT32 State = NtmsLibRequestInformationAStateTable(this);
	GUID(true) PartitionId;
	GUID(true) DriveId;
	GUID(true) PhysMediaId;
	GUID(true) Library;
	GUID(true) SlotId;
	SystemTime TimeQueued;
	SystemTime TimeCompleted;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) Application;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) User;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) Computer;
	Align4 Pad;
	UINT32 ErrorCode;
	GUID(true) WorkItemId;
	UINT32 Priority;
}

//
//	NTMS_OPREQUESTINFORMATIONW Structure
//	Alignment : 4
//
Struct NtmsOpRequestInformationW // tested and working
{
	UINT32 Request = FORMATSTRING("%u = %s",this,RsmNtmsOpreqCommandEnum (this));
	SystemTime Submitted;
	Align4 Pad;
	UINT32 State;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(256) Message;
	UINT32 Arg1Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
	GUID(true) Arg1;
	UINT32 Arg2Type = FORMATSTRING("%u = %s",this,RsmNtmsObjectsTypesEnum (this));
	GUID(true) Arg2;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) Application;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) User;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(64) Computer;
}

//
//	NTMS_COMPUTERINFORMATION Structure
//	Alignment : 4
//
struct NtmsComputerInformation
{
	UINT32 LibRequestPurgeTime;
	UINT32 OpRequestPurgeTime;
	NtmsLibRquestFlags LibRequestFlags;
	NtmsOpRquestFlags OpRequestFlags;
	UINT32 MediaPoolPolicy = FORMATSTRING("%u = %s",this,NtmsMediaPoolPolicy_enum(this));
}
TABLE NtmsMediaPoolPolicy_enum (value)
{
	Switch (value)
	{
		Case 0x00000001: "NTMS_POOLPOLICY_PURGEEOFFLINESCRATCH";
		Case 0x00000002: "NTMS_POOLPOLICY_KEEPOFFLINEIMPORT";
		Default:         "unknown";
	}
}

Struct RsmSecurityInformation = FormatString( "0x%08X", Flags )
{
	UINT32 Flags = FormatString( "0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
			_Struct
			{
				UINT32 OWNER_SECURITY_INFORMATION:1 = FormatString("(%s)", this.ToBitString);
				UINT32 GROUP_SECURITY_INFORMATION:1 = FormatString("(%s)", this.ToBitString);
				UINT32 DACL_SECURITY_INFORMATION:1 = FormatString(" (%s)", this.ToBitString);
				UINT32 SACL_SECURITY_INFORMATION:1 = FormatString(" (%s)", this.ToBitString);
				UINT32 Reserved:28 = FormatString("                  (%s)", this.ToBitString);   
			}

			Default:
			_Struct
			{
				UINT32 Reserved:28 = FormatString("                  (%s)", this.ToBitString);
				UINT32 SACL_SECURITY_INFORMATION:1 = FormatString(" (%s)", this.ToBitString);
				UINT32 DACL_SECURITY_INFORMATION:1 = FormatString(" (%s)", this.ToBitString);
				UINT32 GROUP_SECURITY_INFORMATION:1 = FormatString("(%s)", this.ToBitString); 
				UINT32 OWNER_SECURITY_INFORMATION:1 = FormatString("(%s)", this.ToBitString);
			}
		}
	}
}

Struct NtmsLibRquestFlags = FormatString( "0x%08X", Flags )
{
	UINT32 Flags = FormatString( "0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
			_Struct
			{

				UINT32 NTMS_LIBREQFLAGS_NOAUTOPURGE:1 = FormatString("  (%s)", this.ToBitString);
				UINT32 NTMS_LIBREQFLAGS_NOFAILEDPURGE:1 = FormatString("(%s)", this.ToBitString);
				UINT32 Reserved:30 = FormatString("                      (%s)", this.ToBitString);
			}

			Default:
			_Struct
			{
				UINT32 Reserved:30 = FormatString("                      (%s)", this.ToBitString);
				UINT32 NTMS_LIBREQFLAGS_NOFAILEDPURGE:1 = FormatString("(%s)", this.ToBitString); 
				UINT32 NTMS_LIBREQFLAGS_NOAUTOPURGE:1 = FormatString("  (%s)", this.ToBitString);
			}
		}
	}
}

Struct NtmsOpRquestFlags = FormatString( "0x%08X", Flags )
{
	UINT32 Flags = FormatString( "0x%08X", this )
	{
		Switch( Property.MSRPCByteOrder )
		{
			Case LittleEndian:
			_Struct
			{
				UINT32 NTMS_OPREQFLAGS_NOAUTOPURGE:1 = FormatString("  (%s)", this.ToBitString);
				UINT32 NTMS_OPREQFLAGS_NOFAILEDPURGE:1 = FormatString("(%s)", this.ToBitString);
				UINT32 Reserved1:2 = FormatString("                    (%s)", this.ToBitString);
				UINT32 NTMS_OPREQFLAGS_NOALERTS:1 = FormatString("     (%s)", this.ToBitString);
				UINT32 NTMS_OPREQFLAGS_NOTRAYICON:1 = FormatString("   (%s)", this.ToBitString);
				UINT32 Reserved2:26 = FormatString("                    (%s)", this.ToBitString);

			}

			Default:
			_Struct
			{
				UINT32 Reserved2:26 = FormatString("                    (%s)", this.ToBitString);
				UINT32 NTMS_OPREQFLAGS_NOTRAYICON:1 = FormatString("   (%s)", this.ToBitString); 
				UINT32 NTMS_OPREQFLAGS_NOALERTS:1 = FormatString("     (%s)", this.ToBitString);
				UINT32 Reserved1:2 = FormatString("                    (%s)", this.ToBitString);
				UINT32 NTMS_OPREQFLAGS_NOFAILEDPURGE:1 = FormatString("(%s)", this.ToBitString); 
				UINT32 NTMS_OPREQFLAGS_NOAUTOPURGE:1 = FormatString("  (%s)", this.ToBitString);
			}
		}
	}
}

//======================================================================================
// Main Protocol Conversation Mode switch
//======================================================================================
TABLE RsmMethodTable (ValueUuid,ValueOpnum)
{
	Switch
	{
		Case (ValueUuid == "{879C8BBE-41B0-11D1-BE11-00C04FB6BF70}" && ValueOpnum == 3) : "OnNotify:";

		Case (ValueUuid == "{081E7188-C080-4FF3-9238-29F66D6CABFD}" && ValueOpnum == 3) : "SendMessage";
		Case (ValueUuid == "{081E7188-C080-4FF3-9238-29F66D6CABFD}" && ValueOpnum == 4) : "RecallMessage";

		Case (ValueUuid == "{DB90832F-6910-4D46-9F5E-9FD6BFA73903}" && ValueOpnum == 17) : "IdentifyNtmsSlot";

		Case (ValueUuid == "{895A2C86-270D-489D-A6C0-DC2A9B35280E}" && ValueOpnum == 12) : "EnumerateNtmsObjectR";
		Case (ValueUuid == "{895A2C86-270D-489D-A6C0-DC2A9B35280E}" && ValueOpnum == 13) : "GetNtmsUIOptionsA";
		Case (ValueUuid == "{895A2C86-270D-489D-A6C0-DC2A9B35280E}" && ValueOpnum == 14) : "GetNtmsUIOptionsW";
		Case (ValueUuid == "{895A2C86-270D-489D-A6C0-DC2A9B35280E}" && ValueOpnum == 15) : "SetNtmsUIOptionsA";
		Case (ValueUuid == "{895A2C86-270D-489D-A6C0-DC2A9B35280E}" && ValueOpnum == 16) : "SetNtmsUIOptionsW";

		Case (ValueUuid == "{3BBED8D9-2C9A-4B21-8936-ACB2F995BE6C}" && ValueOpnum == 17) : "GetNtmsObjectAttributeAR";
		Case (ValueUuid == "{3BBED8D9-2C9A-4B21-8936-ACB2F995BE6C}" && ValueOpnum == 18) : "GetNtmsObjectAttributeWR";

		Case (ValueUuid == "{7D07F313-A53F-459A-BB12-012C15B1846E}" && ValueOpnum == 21) : "GetNtmsMediaPoolNameAR";
		Case (ValueUuid == "{7D07F313-A53F-459A-BB12-012C15B1846E}" && ValueOpnum == 22) : "GetNtmsMediaPoolNameWR";

		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 3) : "EjectNtmsMedia";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 4) : "InjectNtmsMedia";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 5) : "AccessNtmsLibraryDoor";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 6) : "CleanNtmsDrive";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 7) : "DismountNtmsDrive";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 8) : "InventoryNtmsLibrary";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 9) : "UpdateNtmsOmidInfo";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 10) : "CancelNtmsLibraryRequest";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 11) : "ReserveNtmsCleanerSlot";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 12) : "ReleaseNtmsCleanerSlot";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 13) : "InjectNtmsCleaner";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 14) : "EjectNtmsCleaner";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 15) : "DeleteNtmsLibrary";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 16) : "DeleteNtmsDrive";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 17) : "GetNtmsRequestOrder";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 18) : "SetNtmsRequestOrder";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 19) : "DeleteNtmsRequests";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 20) : "BeginNtmsDeviceChangeDetection";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 21) : "SetNtmsDeviceChangeDetection";
		Case (ValueUuid == "{4E934F30-341A-11D1-8FB1-00A024CB6019}" && ValueOpnum == 22) : "EndNtmsDeviceChangeDetection";

		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 3) : "MountNtmsMedia";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 4) : "DismountNtmsMedia";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 5) : "GetNtmsMountDrives";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 6) : "AllocateNtmsMedia";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 7) : "DeallocateNtmsMedia";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 8) : "SwapNtmsMedia";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 9) : "DecommissionNtmsMedia";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 10) : "SetNtmsMediaComplete";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 11) : "DeleteNtmsMedia";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 12) : "CreateNtmsMediaPoolA";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 13) : "CreateNtmsMediaPoolW";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 14) : "GetNtmsMediaPoolNameA";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 15) : "GetNtmsMediaPoolNameW";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 16) : "MoveToNtmsMediaPool";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 17) : "DeleteNtmsMediaPool";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 18) : "AddNtmsMediaType";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 19) : "DeleteNtmsMediaType";
		Case (ValueUuid == "{D02E4BE0-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 20) : "ChangeNtmsMediaType";

		Case (ValueUuid == "{BB39332C-BFEE-4380-AD8A-BADC8AFF5BB6}" && ValueOpnum == 3) : "ConnectCallback";
		Case (ValueUuid == "{BB39332C-BFEE-4380-AD8A-BADC8AFF5BB6}" && ValueOpnum == 4) : "OnNotify";
		Case (ValueUuid == "{BB39332C-BFEE-4380-AD8A-BADC8AFF5BB6}" && ValueOpnum == 5) : "ReleaseCallback";

		Case (ValueUuid == "{69AB7050-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 3) : "GetNtmsServerObjectInformationA";
		Case (ValueUuid == "{69AB7050-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 4) : "GetNtmsServerObjectInformationW";
		Case (ValueUuid == "{69AB7050-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 5) : "SetNtmsObjectInformationA";
		Case (ValueUuid == "{69AB7050-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 6) : "SetNtmsObjectInformationW";
		Case (ValueUuid == "{69AB7050-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 7) : "CreateNtmsMediaA";
		Case (ValueUuid == "{69AB7050-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 8) : "CreateNtmsMediaW";

		Case (ValueUuid == "{B057DC50-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 3) : "GetNtmsObjectSecurity";
		Case (ValueUuid == "{B057DC50-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 4) : "SetNtmsObjectSecurity";
		Case (ValueUuid == "{B057DC50-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 5) : "GetNtmsObjectAttributeA";
		Case (ValueUuid == "{B057DC50-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 6) : "GetNtmsObjectAttributeW";
		Case (ValueUuid == "{B057DC50-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 7) : "SetNtmsObjectAttributeA";
		Case (ValueUuid == "{B057DC50-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 8) : "SetNtmsObjectAttributeW";
		Case (ValueUuid == "{B057DC50-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 9) : "EnumerateNtmsObject";
		Case (ValueUuid == "{B057DC50-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 10) : "DisableNtmsObject";
		Case (ValueUuid == "{B057DC50-3059-11D1-8FAF-00A024CB6019}" && ValueOpnum == 11) : "EnableNtmsObject";

		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 3) : "OpenNtmsServerSessionW";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 4) : "OpenNtmsServerSessionA";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 5) : "CloseNtmsSession";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 6) : "SubmitNtmsOperatorRequestW";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 7) : "SubmitNtmsOperatorRequestA";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 8) : "WaitForNtmsOperatorRequest";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 9) : "CancelNtmsOperatorRequest";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 10) : "SatisfyNtmsOperatorRequest";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 11) : "ImportNtmsDatabase";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 12) : "ExportNtmsDatabase";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 13) : "UseRpcNotification";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 14) : "AddNotification";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 15) : "RemoveNotification";
		Case (ValueUuid == "{8DA03F40-3419-11D1-8FB1-00A024CB6019}" && ValueOpnum == 16) : "DispatchNotification";
		Default: "unknown";
	}
}


table RSMNtmsMountPriorityTable(value)
{
	switch(value)
	{
		case 0: "NTMS_PRIORITY_DEFAULT OR NTMS_PRIORITY_NORMAL";
		case 15: "NTMS_PRIORITY_HIGHEST";
		case 7: "NTMS_PRIORITY_HIGH";
		case -7: "NTMS_PRIORITY_LOW";
		case -15: "NTMS_PRIORITY_LOWEST";
		default:
			FormatString("Unknwon value: %d", value);
	}
}
