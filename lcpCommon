//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Link Control Protocol for PPP
//#
//#  Details:                
//#
//#  Public References:      RFC 1334, 1570, 1661, 1663, 1990, 1934
//#                          RFC 1994, 2125, 2153, 2484, 2686, 2823
//#
//#  Comments:               
//#
//#  Revision Class and Date:
//#
//####

Protocol LCP = FormatString("%s, ID = %d, Length = %d", LCPCodeTable(Code), Identifier, Length)
{
	UINT8 Code = FormatString("%s, %d(0x%02X)", LCPCodeTable(this), this, this);
	UINT8 Identifier;
	[LCPEndOffset = offset + this - 2]
	UINT16 Length;
	switch(Code)
	{
		case  0:
			_struct VendorSpecificFunction
			{
				UINT32 MagicNumber;
				UINT24 OUI = OUITable(this);
				UINT8 Kind;
				switch
				{
					case Length > 12:
						AsciiString(Length - 12) Values;
				}
			};
		case  7:
			switch
			{
				case Length > 4:
					AsciiString(Length - 4) RejectedPacket;
			}
		case  8:
			_struct ProtocolRejectFunction
			{
				UINT16 RejectedProtocol = FormatString("%s, %d(0x%04X)",PPPPacketTypeTable(this),this,this);
				switch
				{
					case Length > 6:
						AsciiString(Length - 6) RejectedInformation;
				}
			};
		case  9:
		case 10:
		case 11:
			_struct DiscardRequestFunction
			{
				UINT32 MagicNumber;
				switch
				{
					case Length > 8:
						AsciiString(Length - 8) Data;
				}
			};
		case 12:
			_struct IndentificationFunction
			{
				UINT32 MagicNumber;
				switch
				{
					case Length > 8:
						AsciiString(Length - 8) Message;
				}
			};
		case 13:
			_struct TimeRemainingFunction
			{
				UINT32 MagicNumber;
				UINT32 SecondsRemaining = this == 0xFFFFFFFF ? "No timeout"
															: FormatString("%u(0x%08X)",this,this);
				switch
				{
					case Length > 12:
						AsciiString(Length - 12) Message;
				}
			};
	}
	
	switch(Code)
	{
		case  1:
		case  2:
		case  3:
		case  4:
			while condition[offset < Property.LCPEndOffset]
			{
				LCPOption Option;
			}
		default:
			switch
			{
				case offset < Property.LCPEndOffset:
					AsciiString(Property.LCPEndOffset - offset) Data;
			}
	}
}

//http://www.iana.org/assignments/character-sets
Table LCPCharacterSetsTable(value)
{
	switch(value)
	{
		case 2104:"Amiga-1251";
		case 2105:"KOI7-Switched";
		case  116:"OSD_EBCDIC_DF03_IRV";
		case  115:"OSD_EBCDIC_DF04_15";
		case  117:"OSD_EBCDIC_DF04_1";
		case 2005:"Adobe-Standard-Encoding";
		case 2020:"Adobe-Symbol-Encoding";
		case   74:"ANSI_X3.110-1983";
		case    3:"ANSI_X3.4-1968";
		case   65:"ASMO_449";
		case 2026:"Big5  (preferred MIME name)";
		case 2101:"Big5-HKSCS";
		case 1020:"BOCU-1";
		case   20:"BS_4730";
		case   50:"BS_Viewdata";
		case 1016:"CESU-8";
		case   78:"CSA_Z243.4-1985-1";
		case   79:"CSA_Z243.4-1985-2";
		case   80:"CSA_Z243.4-1985-Gr";
		case   86:"CSN_369103";
		case 2008: "DEC-MCS";
		case   24:"DIN_66003";
		case  101:"DK-US";
		case   99:"DS_2089";
		case 2064:"EBCDIC-AT-DE";
		case 2065:"EBCDIC-AT-DE-A";
		case 2066:"EBCDIC-CA-FR";
		case 2067:"EBCDIC-DK-NO";
		case 2068:"EBCDIC-DK-NO-A";
		case 2074:"EBCDIC-ES";
		case 2075:"EBCDIC-ES-A";
		case 2076:"EBCDIC-ES-S";
		case 2069:"EBCDIC-FI-SE";
		case 2070:"EBCDIC-FI-SE-A";
		case 2071:"EBCDIC-FR";
		case 2072:"EBCDIC-IT";
		case 2073:"EBCDIC-PT";
		case 2077:"EBCDIC-UK";
		case 2078:"EBCDIC-US";
		case   77:"ECMA-Cyrillic";
		case   23:"ES";
		case   61:"ES2";
		case   38:"EUC-KR  (preferred MIME name)";
		case   19:"Extended_UNIX_Code_Fixed_Width_for_Japanese";
		case   18:"Extended_UNIX_Code_Packed_Format_for_Japanese";
		case   56:"GB_1988-80";
		case   57:"GB_2312-80";
		case  114:"GB18030";
		case 2025:"GB2312  (preferred MIME name)";
		case  113:"GBK";
		case   94:"GOST_19768-74";
		case   64:"Greek7";
		case   44:"Greek7-Old";
		case   91:"Greek-Ccitt";
		case 2021:"HP-DeskTop";
		case 2017:"HP-Legal";
		case 2019:"HP-Math8";
		case 2018:"HP-Pi-font";
		case 2004:"HP-Roman8";
		case 2085:"HZ-GB-2312";
		case 2089:"IBM00858";
		case 2090:"IBM00924";
		case 2091:"IBM01140";
		case 2092:"IBM01141";
		case 2093:"IBM01142";
		case 2094:"IBM01143";
		case 2095:"IBM01144";
		case 2096:"IBM01145";
		case 2097:"IBM01146";
		case 2098:"IBM01147";
		case 2099:"IBM01148";
		case 2100:"IBM01149";
		case 2028:"IBM037";
		case 2029:"IBM038";
		case 2063:"IBM1026";
		case 2102:"IBM1047";
		case 2030:"IBM273";
		case 2031:"IBM274";
		case 2032:"IBM275";
		case 2033:"IBM277";
		case 2034:"IBM278";
		case 2035:"IBM280";
		case 2036:"IBM281";
		case 2037:"IBM284";
		case 2038:"IBM285";
		case 2039:"IBM290";
		case 2040:"IBM297";
		case 2041:"IBM420";
		case 2042:"IBM423";
		case 2043:"IBM424";
		case 2011:"IBM437";
		case 2044:"IBM500";
		case 2087:"IBM775";
		case 2009:"IBM850";
		case 2045:"IBM851";
		case 2010:"IBM852";
		case 2046:"IBM855";
		case 2047:"IBM857";
		case 2048:"IBM860";
		case 2049:"IBM861";
		case 2013:"IBM862";
		case 2050:"IBM863";
		case 2051:"IBM864";
		case 2052:"IBM865";
		case 2086:"IBM866";
		case 2053:"IBM868";
		case 2054:"IBM869";
		case 2055:"IBM870";
		case 2056:"IBM871";
		case 2057:"IBM880";
		case 2058:"IBM891";
		case 2059:"IBM903";
		case 2060:"IBM904";
		case 2061:"IBM905";
		case 2062:"IBM918";
		case 2015:"IBM-Symbols";
		case 2016:"IBM-Thai";
		case   88:"IEC_P27-1";
		case   51:"INIS";
		case   52:"INIS-8";
		case   53:"INIS-Cyrillic";
		case   29:"INVARIANT";
		case   96:"ISO_10367-Box";
		case   73:"ISO_2033-1983";
		case   48:"ISO_5427";
		case   54:"ISO_5427:1981";
		case   55:"ISO_5428:1980";
		case   28:"ISO_646.basic:1983";
		case   30:"ISO_646.irv:1983";
		case   93:"ISO_6937-2-25";
		case   14:"ISO_6937-2-Add";
		case    4:"ISO_8859-1:1987";
		case    5:"ISO_8859-2:1987";
		case    6:"ISO_8859-3:1988";
		case    7:"ISO_8859-4:1988";
		case    8:"ISO_8859-5:1988";
		case    9:"ISO_8859-6:1987";
		case   81:"ISO_8859-6-E";
		case   82:"ISO_8859-6-I";
		case   10:"ISO_8859-7:1987";
		case   11:"ISO_8859-8:1988";
		case   84:"ISO_8859-8-E";
		case   85:"ISO_8859-8-I";
		case   12:"ISO_8859-9:1989";
		case   95:"ISO_8859-Supp";
		case 1004: "ISO-10646-J-1"; //last updated 2002-09-30,other updated 28 January 2005
									//http://www.opensource.apple.com/darwinsource/10.3/WebCore-106/kwq/character-sets.txt
		case 1000:"ISO-10646-UCS-2";
		case 1001:"ISO-10646-UCS-4";
		case 1002:"ISO-10646-UCS-Basic";
		case 1003:"ISO-10646-Unicode-Latin1";
		case   27:"ISO-10646-UTF-1";
		case  104:"ISO-2022-CN";
		case  105:"ISO-2022-CN-EXT";
		case   39:"ISO-2022-JP  (preferred MIME name)";
		case   40:"ISO-2022-JP-2  (preferred MIME name)";
		case   37:"ISO-2022-KR  (preferred MIME name)";
		case   13:"ISO-8859-10 (preferred MIME name)";
		case  109:"ISO-8859-13";
		case  110:"ISO-8859-14";
		case  111:"ISO-8859-15";
		case  112:"ISO-8859-16";
		case 2000:"ISO-8859-1-Windows-3.0-Latin-1";
		case 2001:"ISO-8859-1-Windows-3.1-Latin-1";
		case 2002:"ISO-8859-2-Windows-Latin-2";
		case 2003:"ISO-8859-9-Windows-Latin-5";
		case   66:"ISO-ir-90";
		case 1005:"ISO-Unicode-IBM-1261";
		case 1008:"ISO-Unicode-IBM-1264";
		case 1009:"ISO-Unicode-IBM-1265";
		case 1006:"ISO-Unicode-IBM-1268";
		case 1007:"ISO-Unicode-IBM-1276";
		case   22:"IT";
		case   41:"JIS_C6220-1969-jp";
		case   42:"JIS_C6220-1969-ro";
		case   49:"JIS_C6226-1978";
		case   63:"JIS_C6226-1983";
		case   67:"JIS_C6229-1984-a";
		case   68:"JIS_C6229-1984-b";
		case   69:"JIS_C6229-1984-b-add";
		case   70:"JIS_C6229-1984-hand";
		case   71:"JIS_C6229-1984-hand-add";
		case   72:"JIS_C6229-1984-kana";
		case   16:"JIS_Encoding";
		case   15:"JIS_X0201";
		case   98:"JIS_X0212-1990";
		case   87:"JUS_I.B1.002";
		case   90:"JUS_I.B1.003-mac";
		case   89:"JUS_I.B1.003-serb";
		case 2084:"KOI8-R  (preferred MIME name)";
		case 2088:"KOI8-U";
		case   36:"KS_C_5601-1987";
		case  102:"KSC5636";
		case   45:"Latin-Greek";
		case   47:"Latin-Greek-1";
		case   97:"Latin-Lap";
		case 2027:"Macintosh";
		case 2023:"Microsoft-Publishing";
		case 2081:"MNEM";
		case 2080:"MNEMONIC";
		case   62:"MSZ_7795.3";
		case   33:"NATS-DANO";
		case   34:"NATS-DANO-ADD";
		case   31:"NATS-SEFI";
		case   32:"NATS-SEFI-ADD";
		case   92:"NC_NC00-10:81";
		case   26:"NF_Z_62-010";
		case   46:"NF_Z_62-010_(1973)";
		case   25:"NS_4551-1";
		case   58:"NS_4551-2";
		case 2012:"PC8-Danish-Norwegian";
		case 2014:"PC8-Turkish";
		case   43:"PT";
		case   60:"PT2";
		case 2103:"PTCP154";
		case 1011:"SCSU";
		case   35:"SEN_850200_B";
		case   21:"SEN_850200_C";
		case   17:"Shift_JIS  (preferred MIME name)";
		case   83:"T.101-G2";
		case   75:"T.61-7bit";
		case   76:"T.61-8bit";
		case 2259:"TIS-620";
		case 1010:"UNICODE-1-1";
		case  103:"UNICODE-1-1-UTF-7";
		case 2079:"UNKNOWN-8BIT";
		case  100:"US-DK";
		case 1015:"UTF-16";
		case 1013:"UTF-16BE";
		case 1014:"UTF-16LE";
		case 1017:"UTF-32";
		case 1018:"UTF-32BE";
		case 1019:"UTF-32LE";
		case 1012:"UTF-7";
		case  106:"UTF-8";
		case 2007:"Ventura-International";
		case 2022:"Ventura-Math";
		case 2006:"Ventura-US";
		case   59:"Videotex-Suppl";
		case 2083:"VIQR";
		case 2082:"VISCII";
		case 2250:"Windows-1250";
		case 2251:"Windows-1251";
		case 2252:"Windows-1252";
		case 2253:"Windows-1253";
		case 2254:"Windows-1254";
		case 2255:"Windows-1255";
		case 2256:"Windows-1256";
		case 2257:"Windows-1257";
		case 2258:"Windows-1258";
		case 2024:"Windows-31J";
		default  :"Unknown Character Set";
	}
}

//http://www.iana.org/assignments/ppp-numbers
Table LCPOptionAlgorithmTable(value)
{
	switch
	{
		case value >= 0 && value <= 4: "Reserved";
		case value ==   5:"CHAP with MD5";
		case value ==   6:"SHA-1";
		case value == 128:"MS-CHAP";
		case value == 129:"MS-CHAP-2";
		default: "Unknown";
	}
}

Table LCPOptionMultilinkHeadCodeTable(code)
{
	switch(code)
	{
		case  2:FormatString("Long sequence number fragment format with classes, %d(0x%X)",code,code);
		case  6:FormatString("Short sequence number fragment format with classes, %d(0x%X)",code,code);
		default:FormatString("%d(0x%X)",code,code);
	}
}

Table LCPOptionOptionTypeTable(value)
{
	switch(value)
	{
		case  1:FormatString("NULL FCS, %d(0x%X)",value,value);
		case  2:FormatString("CCIIT 16-bit FCS, %d(0x%X)",value,value);
		case  4:FormatString("CCIIT 32-bit FCS, %d(0x%X)",value,value);
		default:FormatString("%d(0x%X)",value,value);
	}
}

Table LCPOptionEndpointClassTable(value)
{
	switch(value)
	{
		case  0:FormatString("%s, %d(0x%X)","Null Class",value,value);
		case  1:FormatString("%s, %d(0x%X)","Locally Assigned Address",value,value);
		case  2:FormatString("%s, %d(0x%X)","Internet Protocol (IP) Address",value,value);
		case  3:FormatString("%s, %d(0x%X)","IEEE 802.1 Globally Assigned MAC Address",value,value);
		case  4:FormatString("%s, %d(0x%X)","PPP Magic-Number Block",value,value);
		case  5:FormatString("%s, %d(0x%X)","Public Switched Network Directory Number",value,value);
		default:FormatString("Undefined class, %d(0x%X)",value,value);
	}
}

Table LCPOptionCallbackOperationTable(value)
{
	switch(value)
	{
		case  0:FormatString("%s, %d(0x%X)","location is determined by user authentication",value,value);
		case  1:FormatString("%s, %d(0x%X)","Dialing string",value,value);
		case  2:FormatString("%s, %d(0x%X)","Location identifier",value,value);
		case  3:FormatString("%s, %d(0x%X)","E.164 number",value,value);
		case  4:FormatString("%s, %d(0x%X)","Distinguished name",value,value);
		default:FormatString("%d(0x%X)",value,value);
	}
}

Table LCPOptionTypeTable(value)
{
	switch(value)
	{
		case  0:"Vendor Specific";
		case  1:"Maximum-Receive-Unit";
		case  2:"Async-Control-Character-Map";//due to netmon2
		case  3:"Authentication-Protocol";
		case  4:"Quality-Protocol";
		case  5:"Magic-Number";
		case  6:"DEPRECATED(Quality-Protocol)";//due to netmon2
		case  7:"Protocol-Field-Compression(Deprecated)";
		case  8:"Address-and-Control-Field-Compression";
		case  9:"FCS-Alternatives";
		case 10:"Self-Describing-Pad";
		case 11:"Numbered-Mode";
		case 12:"Identification";
		case 13:"Callback";
		case 14:"Connect-Time (Deprecated)";
		case 15:"Compound-Frames (Deprecated)";
		case 16:"Nominal-Data-Encapsulation (Deprecated)";
		case 17:"Multilink Max-Receive-Reconstructed-Unit (MRRU)";
		case 18:"Multilink Short Sequence Number Header Format";
		case 19:"Multilink Endpoint Discriminator";
		case 20:"Proprietary";
		case 21:"DCE-Identifier";
		case 22:"MP+ Procedure Option";
		case 23:"Link Discriminator for BACP";
		case 24:"LCP-Authentication-Option";
		case 25:"COBS, Consistent Overhead Byte Stuffing";
		case 26:"Prefix Elision";
		case 27:"Multilink header format.";
		case 28:"Internationalization";
		case 29:"Simple Data Link on SONET/SDH.";
		case 30:"Reserved until 14-Oct-2002";
		default:FormatString("Undefined Type(%d)",value);
	}
}

Table LCPCodeTable(value)
{
	switch(value)
	{
		case  0:"Vendor Specific";
		case  1:"Configure-Request";
		case  2:"Configure-Ack";
		case  3:"Configure-Nak";
		case  4:"Configure-Reject";
		case  5:"Terminate-Request";
		case  6:"Terminate-Ack";
		case  7:"Code-Reject";
		case  8:"Protocol-Reject";
		case  9:"Echo-Request";
		case 10:"Echo-Reply";
		case 11:"Discard-Request";
		case 12:"Identification";
		case 13:"Time-Remaining";
		default:FormatString("Undefined code(%d)",value);
	}
}

struct LCPOption = FormatString("%s, Length = %d", LCPOptionTypeTable(OptionType), Length)
{
	UINT8 OptionType = FormatString("%s, %d(0x%02x)", LCPOptionTypeTable(this), this, this);
	[LCPOptionEndOffset = offset + this -1]
	UINT8 Length;
	switch(OptionType)
	{
		case  0:
			_struct VendorSpecificOption
			{
				UINT24 OUI = OUITable(this);
				UINT8 Kind;
				switch
				{
					case offset < Property.LCPOptionEndOffset: AsciiString(Property.LCPOptionEndOffset - offset) Value;
				}
			};
		case  1: UINT16 MaximumReceiveUnit;
		case  2: UINT32 AsyncControlCharacterMap;
		case  3:
			_struct AuthProtocolOption
			{
				UINT16 AuthProtocol = FormatString("%s, %d(0x%04X)",PPPPacketTypeTable(this),this,this);
				switch
				{
					case AuthProtocol == 0xC223: UINT8 Algorithm = LCPOptionAlgorithmTable(this);
				}
			};
		case  4: UINT16 QualityProtocol = FormatString("%s, %d(0x%04X)",PPPPacketTypeTable(this),this,this);
		case  5: UINT32 MagicNumber;
		case  9: UINT8 FCSAlternatives = LCPOptionOptionTypeTable(this);
		case 10: UINT8 Maximum;
		case 11:
			_struct NumberedModeOption
			{
				UINT8 Window;
				switch
				{
					//case offset < Property.LCPOptionEndOffset: AsciiString(Property.LCPOptionEndOffset - offset) Address;
					case offset < Property.LCPOptionEndOffset:
						struct HDLCAddress
						{
							UINT8 EA:1 = FormatString(" (%s) %d", this.ToBitString, this);
							// Command = 1? Response = 0?
							UINT8 CR:1 = FormatString(" (%s) %s",this.ToBitString, this ? "Command" : "Response");
							UINT8 SAP:6 = FormatString("(%s) %d", this.ToBitString, this);
							switch
							{
								case EA == 0 && (offset < Property.LCPOptionEndOffset):
									AsciiString(Property.LCPOptionEndOffset - offset) ExtendedAddress;
							}
						};
				}
			};
		case 13:
			_struct CallbackOption
			{
				UINT8 Operation = LCPOptionCallbackOperationTable(this);
				switch
				{
					case offset < Property.LCPOptionEndOffset: AsciiString(Property.LCPOptionEndOffset - offset) Message;
				}
			};
		case 17: UINT16 MaxReceiveReconstructedUnit;
		case 19:
			_struct MultilinkEndpointDiscriminatorOption
			{
				UINT8 Class = LCPOptionEndpointClassTable(this);
				switch(Class)
				{
					case  1:
						switch
						{
							case offset < Property.LCPOptionEndOffset: AsciiString(Property.LCPOptionEndOffset-offset) LocallyAssignedAddress;
						}
					case  2: Ipv4Address IpAddress;
					case  3: MacAddress HardwareAddress;
					case  4:
						switch
						{
							case offset < Property.LCPOptionEndOffset:
								 struct MagicNumbers
								{
									UINT32 MagicNumber[(Property.LCPOptionEndOffset-offset)/4];
								};
						}
					case  5:
						switch
						{
							case offset < Property.LCPOptionEndOffset: AsciiString(Property.LCPOptionEndOffset-offset) Address;
						}
					default:
						 switch
						{
							case offset < Property.LCPOptionEndOffset: AsciiString(Property.LCPOptionEndOffset-offset) UnknownAddress;
						}
				}
			};
		case 22: UINT16 Unused;
		case 23: UINT16 LinkDiscriminator;
		case 26:
			while condition[offset < Property.LCPOptionEndOffset]
			{
				UINT8 Class;
				UINT8 PrefixLength;
				switch
				{
					case PrefixLength > 0: AsciiString(PrefixLength) Prefix;
				}
			};
		case 27:
			_struct MutilingHeaderOption
			{
				UINT8 Code = LCPOptionMultilinkHeadCodeTable(this);
				UINT8 MaxSuspClasses;
			};
		case 28:
			_struct InternatinalizationOption
			{
				UINT32 MIBenum = FormatString("%s, %d(0x%X)",LCPCharacterSetsTable(this),this,this);
				switch
				{
					case offset < Property.LCPOptionEndOffset:
						AsciiString(Property.LCPOptionEndOffset - offset) LanguageTag;
				}
			};
	}
	switch
	{
		case offset < Property.LCPOptionEndOffset:
			AsciiString(Property.LCPOptionEndOffset - offset) OptionData;
	}
}

