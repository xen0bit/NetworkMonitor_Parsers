//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-Dhcpv6ClientEvents
//#
//#  Details:                
//#
//#  Public References:      Dhcpv6ClientEvents.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsDHCPv6Client, "{6A1F2B00-6A90-4C38-95A5-5CAB3B056778}")]
Protocol DhcpV6ClientEvents_MicrosoftWindowsDHCPv6Client = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 51001: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_MediaConnect MediaConnect;
		case 51002: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_MediaDisconnect MediaDisconnect;
		case 51003: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_RAReceived RAReceived;
		case 51004: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InitConfirmReply InitConfirmReply;
		case 51005: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InitSARR InitSARR;
		case 51006: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_SolicitSent SolicitSent;
		case 51007: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_AdvertiseReceived AdvertiseReceived;
		case 51008: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_AdvertiseDiscarded AdvertiseDiscarded;
		case 51009: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_RequestSent RequestSent;
		case 51010: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ReplyForRequest ReplyForRequest;
		case 51011: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InvalidReplyForRequest InvalidReplyForRequest;
		case 51012: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_RenewSent RenewSent;
		case 51013: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ReplyForRenew ReplyForRenew;
		case 51014: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InvalidReplyForRenew InvalidReplyForRenew;
		case 51015: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_RebindSent RebindSent;
		case 51016: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ReplyForRebind ReplyForRebind;
		case 51017: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InvalidReplyForRebind InvalidReplyForRebind;
		case 51018: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ReleaseSent ReleaseSent;
		case 51019: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_DeclineSent DeclineSent;
		case 51020: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ReplyForDecline ReplyForDecline;
		case 51021: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InvalidReplyForDecline InvalidReplyForDecline;
		case 51022: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ConfirmSent ConfirmSent;
		case 51023: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ReplyForConfirm ReplyForConfirm;
		case 51024: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InvalidReplyForConfirm InvalidReplyForConfirm;
		case 51025: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InfoRequestSent InfoRequestSent;
		case 51026: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ReplyForInfoRequest ReplyForInfoRequest;
		case 51027: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InvalidReplyForInfoRequest InvalidReplyForInfoRequest;
		case 51028: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_UnknownMessageDiscarded UnknownMessageDiscarded;
		case 51029: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ErrorCreatingPacket ErrorCreatingPacket;
		case 51030: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ErrorExtractingOptions ErrorExtractingOptions;
		case 51031: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_StatefulToStateless StatefulToStateless;
		case 51032: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_StatelessToStateful StatelessToStateful;
		case 51033: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_NondhcpToStateful NondhcpToStateful;
		case 51034: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_NondhcpToStateless NondhcpToStateless;
		case 51035: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_StaticMode StaticMode;
		case 51036: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ErrorInParsing ErrorInParsing;
		case 51037: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_IRTOptionReceived IRTOptionReceived;
		case 51038: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_IRTExpired IRTExpired;
		case 51039: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_AddressPlumbed AddressPlumbed;
		case 51040: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_AddressUnplumbed AddressUnplumbed;
		case 51043: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InterfaceAdded InterfaceAdded;
		case 51044: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ErrorInitializingInterface ErrorInitializingInterface;
		case 51045: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ErrorPlumbingParameters ErrorPlumbingParameters;
		case 51046: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ServiceStart ServiceStart;
		case 51047: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ServiceStop ServiceStop;
		case 51048: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ErrorOpeningSocket ErrorOpeningSocket;
		case 51049: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ErrorClosingSocket ErrorClosingSocket;
		case 51050: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_DnsRegistration DnsRegistration;
		case 51051: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_DnsDeregistration DnsDeregistration;
		case 50057: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_NetworkError NetworkError;
		case 51058: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_StatefulToStateful StatefulToStateful;
		case 51059: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InvalidMessageDiscarded InvalidMessageDiscarded;
		case 51061: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_V6AddressAlreadyExists V6AddressAlreadyExists;
		case 60000: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_PerftrackDHCPSARR PerftrackDHCPSARR;
		case 60001: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_PerftrackDHCPInfoRequest PerftrackDHCPInfoRequest;
		case 60002: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_PerftrackDHCPv6MediaConnect PerftrackDHCPv6MediaConnect;
		case 60003: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_PerftrackDHCPv6MediaConnectEnd PerftrackDHCPv6MediaConnectEnd;
		case 0x000003E8: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_LostIpAddress LostIpAddress;
		case 51060: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_SetClassId SetClassId;
		case 0x000003E9: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_FailedToObtainLeaseAdmin FailedToObtainLeaseAdmin;
		case 51062: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_FailedToObtainLeaseOperational FailedToObtainLeaseOperational;
		case 0x000003EB: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_IpLeaseRenewalFailed IpLeaseRenewalFailed;
		case 0x000003EC: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_ErrorServiceStop ErrorServiceStop;
		case 0x000003ED: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_IpConflict IpConflict;
		case 0x000003F0: [property.ETLSummary = this.ToString] DhcpV6ClientEvents_InitNetworkInterfaceFailed InitNetworkInterfaceFailed;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct DhcpV6ClientEvents_MediaConnect = FormatString("Media Connect notification has been received with Adapter interface id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpV6ClientEvents_MediaDisconnect = FormatString("Media Disconnect notification has been received with Adapter interface id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpV6ClientEvents_RAReceived = FormatString("RA settings have been changed on the adapter %s. The new managed flag is %s, and the other stateful flag is %s", InterfaceId.ToString, Flag1.ToString, Flag2.ToString)
{
	UINT32 InterfaceId;
	BOOL Flag1;
	BOOL Flag2;
}
Struct DhcpV6ClientEvents_InitConfirmReply = FormatString("Confirm-Reply is initiated on the adapter with Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpV6ClientEvents_InitSARR = FormatString("Solicit-Advertise-Request-Reply is initiated on the adapter with Interface Id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpV6ClientEvents_SolicitSent = FormatString("Solicit is sent from the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_AdvertiseReceived = FormatString("Advertise is received from the adapter %s. Status code is %s. Offered Address is %s", InterfaceId.ToString, StatusCode.ToString, Address.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
}
Struct DhcpV6ClientEvents_AdvertiseDiscarded = FormatString("Advertise is discarded from the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_RequestSent = FormatString("Request is sent from the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ReplyForRequest = FormatString("A valid reply is received for request from the adapter %s. Status code is %s. Received address is %s", InterfaceId.ToString, StatusCode.ToString, Address.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
}
Struct DhcpV6ClientEvents_InvalidReplyForRequest = FormatString("Incorrect reply is received for request from the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_RenewSent = FormatString("Renew is sent in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ReplyForRenew = FormatString("A valid reply is received for renew from the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_InvalidReplyForRenew = FormatString("A Invalid reply is received for renew from the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_RebindSent = FormatString("Rebind is sent in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ReplyForRebind = FormatString("A valid reply is received for rebind from the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_InvalidReplyForRebind = FormatString("A Invalid reply is received for rebind from the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ReleaseSent = FormatString("Release is sent in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_DeclineSent = FormatString("Decline is sent in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ReplyForDecline = FormatString("A valid reply is received for decline in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_InvalidReplyForDecline = FormatString("A Invalid reply is received for decline from the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ConfirmSent = FormatString("Confirm is sent in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ReplyForConfirm = FormatString("A valid reply is received for confirm in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_InvalidReplyForConfirm = FormatString("A Invalid reply is received for confirm in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_InfoRequestSent = FormatString("Info-request is sent in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ReplyForInfoRequest = FormatString("A valid reply is received for Info-request in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_InvalidReplyForInfoRequest = FormatString("A Invalid reply is received for Info-request in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_UnknownMessageDiscarded = FormatString("Unknown message is discarded in the adapter %s.", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpV6ClientEvents_ErrorCreatingPacket = FormatString("An error occurred in creation of packet for the adapter %s. Error code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ErrorExtractingOptions = FormatString("An error occurred in extracting options from the message received in the adapter %s. Status code is %s", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_StatefulToStateless = FormatString("Dhcp is changed from stateful to stateless mode in the adapter %s. Status Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_StatelessToStateful = FormatString("Dhcp is changed from stateless to stateful mode in the adapter %s. Status Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_NondhcpToStateful = FormatString("Dhcp is changed from nondhcp to stateful mode in the adapter %s. Status Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_NondhcpToStateless = FormatString("Dhcp is changed from nondhcp to stateless mode in the adapter %s. Status Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_StaticMode = FormatString("Dhcp is converted to static mode in the adapter %s. Status Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ErrorInParsing = FormatString("Error occurred in parsing the dhcp message received in the interface id %s", InterfaceId.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_IRTOptionReceived = FormatString("Information refresh time option is received in the interface %s with a refresh time value of %s", InterfaceId.ToString, RefreshTime.ToString)
{
	UINT32 InterfaceId;
	UINT32 RefreshTime;
}
Struct DhcpV6ClientEvents_IRTExpired = FormatString("The information refresh time has expired, hence triggering a new inform packet on the interface %s.", InterfaceId.ToString)
{
	UINT32 InterfaceId;
}
Struct DhcpV6ClientEvents_AddressPlumbed = FormatString("Address %s is plumbed to the adapter %s. Status Code is %s.", Address.ToString, InterfaceId.ToString, StatusCode.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_AddressUnplumbed = FormatString("Address %s is unplumbed from the adapter %s. Status Code is %s.", Address.ToString, InterfaceId.ToString, StatusCode.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_InterfaceAdded = FormatString("An interface is added whose interface index is %s. Status Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ErrorInitializingInterface = FormatString("An error occurred in initializing the interface %s. Status Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ErrorPlumbingParameters = FormatString("An error occurred in plumbing the parameters into stack. Status Code is %s.", StatusCode.ToString)
{
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ServiceStart = "DHCPv6 client service is started" {}; // Empty Struct
Struct DhcpV6ClientEvents_ServiceStop = FormatString("DHCPv6 client service is stopped. ShutDown Flag value is %s", DwordVal.ToString)
{
	UINT32 DwordVal;
}
Struct DhcpV6ClientEvents_ErrorOpeningSocket = FormatString("An error has occurred in opening the socket in the adapter %s. Error Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ErrorClosingSocket = FormatString("An error has occurred in closing the socket in the adapter %s. Error Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_DnsRegistration = FormatString("Dns registration has happened for the adapter %s. Status Code is %s.DNS Flag settings is %s.", InterfaceId.ToString, StatusCode.ToString, Dword.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
	UINT32 Dword;
}
Struct DhcpV6ClientEvents_DnsDeregistration = FormatString("Dns deregistration has happened for the adapter %s. Status Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_NetworkError = FormatString("A network error occurred when trying to send a message. The error code is: %s.", StatusCode.ToString)
{
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_StatefulToStateful = FormatString("Dhcp is changed from stateful to stateful mode in the adapter %s. Status Code is %s.", InterfaceId.ToString, StatusCode.ToString)
{
	UINT32 InterfaceId;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_InvalidMessageDiscarded = "Message is Invalid and it is discarded." {}; // Empty Struct
Struct DhcpV6ClientEvents_V6AddressAlreadyExists = FormatString("Address %s being plumbed for adapter %s already exists", Address.ToString, InterfaceId.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv6Address Address;
	UINT32 InterfaceId;
}
Struct DhcpV6ClientEvents_PerftrackDHCPSARR = FormatString("PERFTRACK (DHCPSOLICIT): Offer is accepted in the IPv6 adapter %s. Offered Address is %s.", InterfaceId.ToString, Address1.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
	[DataFieldByteOrder = BigEndian]IPv6Address Address1;
}
Struct DhcpV6ClientEvents_PerftrackDHCPInfoRequest = FormatString("PERFTRACK (DHCINFORMATIONREQUEST): Options received in the IPv6 adapter %s. ", InterfaceId.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
}
Struct DhcpV6ClientEvents_PerftrackDHCPv6MediaConnect = FormatString("PERFTRACK (DHCPv6): Media Connect on adapter %s", InterfaceId.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
}
Struct DhcpV6ClientEvents_PerftrackDHCPv6MediaConnectEnd = FormatString("PERFTRACK (DHCPv6): End of Media Connect on adapter %s", InterfaceId.ToString)
{
	GUID(true) InterfaceGuid;
	UINT32 InterfaceId;
}
Struct DhcpV6ClientEvents_LostIpAddress = FormatString("Your computer has lost the lease to its IP address %s on the Network Card with network address %s.", InterfaceGUID.ToString, HWAddress.ToString)
{
	UnicodeString InterfaceGUID;
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
}
Struct DhcpV6ClientEvents_SetClassId = FormatString("The Class ID %s was set for the adapter %s.", InterfaceGUID.ToString, HWAddress.ToString)
{
	UnicodeString InterfaceGUID;
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
}
Struct DhcpV6ClientEvents_FailedToObtainLeaseAdmin = FormatString("Your computer was not assigned an address from the network (by the DHCP Server) for the Network Card with network address %s.  The following error occurred: %s. Your computer will continue to try and obtain an address on its own from the network address (DHCP) server.", HWAddress.ToString, StatusCode.ToString)
{
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_FailedToObtainLeaseOperational = FormatString("Your computer was not assigned an address from the network (by the DHCP Server) for the Network Card with network address %s.  The following error occurred: %s. Your computer will continue to try and obtain an address on its own from the network address (DHCP) server.", HWAddress.ToString, StatusCode.ToString)
{
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_IpLeaseRenewalFailed = FormatString("Your computer was not able to renew its address from the network (from the DHCP Server) for the Network Card with network address %s.  The following error occurred: %s. Your computer will continue to try and obtain an address on its own from the network address (DHCP) server.", HWAddress.ToString, StatusCode.ToString)
{
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
	WinErrorCode StatusCode;
}
Struct DhcpV6ClientEvents_ErrorServiceStop = FormatString("Error occurred in stopping the Dhcpv6 client service. ErrorCode is %s.ShutDown Flag value is %s.", StatusCode.ToString, DwordVal.ToString)
{
	WinErrorCode StatusCode;
	UINT32 DwordVal;
}
Struct DhcpV6ClientEvents_IpConflict = FormatString("Your computer has detected that the IP address %s for the Network Card with network address %s is already in use on the network. Your computer will automatically attempt to obtain a different address.", InterfaceGUID.ToString, HWAddress.ToString)
{
	UnicodeString InterfaceGUID;
	UINT32 HWLength;
	BLOB(HWLength) HWAddress;
}
Struct DhcpV6ClientEvents_InitNetworkInterfaceFailed = FormatString("An error occurred in initializing the interface. The error code is: %s.", StatusCode.ToString)
{
	WinErrorCode StatusCode;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsDHCPv6Client_Keyword, "{6A1F2B00-6A90-4C38-95A5-5CAB3B056778}")]
struct DhcpV6ClientEvents_MicrosoftWindowsDHCPv6Client_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
