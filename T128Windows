//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  T.128 Protocol
//#
//#  Details:                www.ITU.org specification
//#
//#  OEM References:         T.128 Multipoint Application Sharing.pdf
//#
//#  Comments:               
//#
//#  Revision Class and Date:
//#
//####

[DataTypeBitAlign]
struct T128ActivateWindowRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128WindowID activationWindow;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128ActivationHelpKeyRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128WindowID activationWindow;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128ActivationHelpIndexKeyRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128WindowID activationWindow;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128ActivationHelpExtendedKeyRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128WindowID activationWindow;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128BackgroundMixModeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "transparent";
		case (ExtensionBit == 0) && (Choice== 1): "opaque";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardBackgroundMixMode";
	}
}

[DataTypeBitAlign]
struct T128BackgroundMixMode = T128BackgroundMixModeTable(ExtensionBit, T128BackgroundMixModeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128BackgroundMixModeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128BackgroundMixModeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128BackgroundMixModeChoice)
				{
					case 2: NonStandardParameter nonStandardBackgroundMixMode;

				}
			}
	}
}


Table T128BitmapDataTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "uncompressedBitmapData";
		case (ExtensionBit == 0) && (Choice== 1): "compressedBitmapData";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardBitmapData";
	}
}

[DataTypeBitAlign]
struct T128BitmapData = T128BitmapDataTable(ExtensionBit, T128BitmapDataChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128BitmapDataChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128BitmapDataChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128BitmapDataChoice)
				{
					case 0: AsnPerOctetString(-1,-1) uncompressedBitmapData;
					case 1: T128CompressedBitmapData compressedBitmapData;
					case 2: NonStandardParameter nonStandardBitmapData;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128Brush	//Sequence
{
	UINT8 originXPresent:1;
	UINT8 originYPresent:1;
	UINT8 stylePresent:1;
	UINT8 hatchPresent:1;
	UINT8 patternPresent:1;
	
	switch
	{
		case originXPresent : T128Integer8 originX;
	}
	switch
	{
		case originYPresent : T128Integer8 originY;
	}
	switch
	{
		case stylePresent : T128BrushStyle style;
	}
	switch
	{
		case hatchPresent : T128BrushHatch hatch;
	}
	switch
	{
		case patternPresent : AsnPerOctetString(-1,-1) pattern;
	}   
}


Table T128BrushHatchTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "style";
		case (ExtensionBit == 0) && (Choice== 1): "patternZero";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardBrushHatch";
	}
}

[DataTypeBitAlign]
struct T128BrushHatch = T128BrushHatchTable(ExtensionBit, T128BrushHatchChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128BrushHatchChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128BrushHatchChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128BrushHatchChoice)
				{
					case 0: T128HatchStyle style;
					case 1: T128Integer8 patternZero;
					case 2: NonStandardParameter nonStandardBrushHatch;

				}
			}
	}
}

Table T128BrushStyleTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "solid";
		case (ExtensionBit == 0) && (Choice== 1): "null";
		case (ExtensionBit == 0) && (Choice== 2): "hatched";
		case (ExtensionBit == 0) && (Choice== 3): "pattern";
		case (ExtensionBit == 0) && (Choice== 4): "nonStandardBrushStyle";
	}
}

[DataTypeBitAlign]
struct T128BrushStyle = T128BrushStyleTable(ExtensionBit, T128BrushStyleChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128BrushStyleChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128BrushStyleChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 4) ChoiceValue;
				switch (T128BrushStyleChoice)
				{
					case 4: NonStandardParameter nonStandardBrushStyle;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128CloseWindowRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128WindowID activationWindow;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128Color	//Sequence
{
	T128Integer8 c1;
	T128Integer8 c2;
	T128Integer8 c3;   
}
//#? ---------------------------------NOT CONVERTED---------------------------------

[DataTypeBitAlign]
struct T128primaries	//Sequence
{
	T128ColorCIExyChromaticity red;
	T128ColorCIExyChromaticity green;
	T128ColorCIExyChromaticity blue;   
}

[DataTypeBitAlign]
struct T128generalRGBParameters	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 gammaPresent:1;
	UINT8 colorTemperaturePresent:1;
	UINT8 primariesPresent:1;
	
	switch
	{
		case gammaPresent : AsnPerSemiConstrainedReal(0) gamma;
	}
	switch
	{
		case colorTemperaturePresent : AsnPerSemiConstrainedInteger(0) colorTemperature;
	}
	switch
	{
		case primariesPresent : T128primaries primaries;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128predefinedRGBSpaceTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "nonStandardRGBSpace";
	}
}

[DataTypeBitAlign]
struct T128predefinedRGBSpace = T128predefinedRGBSpaceTable(ExtensionBit, T128predefinedRGBSpaceChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128predefinedRGBSpaceChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128predefinedRGBSpaceChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 0) ChoiceValue;
				switch (T128predefinedRGBSpaceChoice)
				{
					case 0: NonStandardParameter nonStandardRGBSpace;
				}
			}
	}
}

Table T128ColorAccuracyEnhancementRGBTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "predefinedRGBSpace";
		case (ExtensionBit == 0) && (Choice== 1): "generalRGBParameters";

	}
}

[DataTypeBitAlign]
struct T128ColorAccuracyEnhancementRGB = T128ColorAccuracyEnhancementRGBTable(ExtensionBit, T128ColorAccuracyEnhancementRGBChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128ColorAccuracyEnhancementRGBChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128ColorAccuracyEnhancementRGBChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue;
				switch (T128ColorAccuracyEnhancementRGBChoice)
				{
					case 0: T128predefinedRGBSpace predefinedRGBSpace;
					case 1: T128generalRGBParameters generalRGBParameters;
				}
			}
	}
}


//#? -------------------------------------------------------------------------------

[DataTypeBitAlign]
struct T128ColorCIExyChromaticity	//Sequence
{
	AsnPerReal(0, T126One) x;
	AsnPerReal(0, T126One) y;
	   
}
//#? ---------------------------------NOT CONVERTED---------------------------------
//TODO
[DataTypeBitAlign]
struct T128palette
{
	[Post.PERArraySize = ConstrainedValue]
	AsnPerConstrainedInteger(16,256) Size;
	T128ColorRGB palette[PERArraySize];
}

[DataTypeBitAlign]
struct T128paletteRGB	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 enhancementPresent:1;
	
	T128palette palette;
	switch
	{
		case enhancementPresent : T128ColorAccuracyEnhancementRGB enhancement;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128ColorPaletteTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "paletteRGB";
		case (ExtensionBit == 0) && (Choice== 1): "nonStandardPalette";

	}
}

[DataTypeBitAlign]
struct T128ColorPalette = T128ColorPaletteTable(ExtensionBit, T128ColorPaletteChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128ColorPaletteChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128ColorPaletteChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue;
				switch (T128ColorPaletteChoice)
				{
					case 0: T128paletteRGB paletteRGB;
					case 1: NonStandardParameter nonStandardPalette;

				}
			}
	}
}

//#? -------------------------------------------------------------------------------


[DataTypeBitAlign]
struct T128ColorPointerAttribute	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer16 cacheIndex;
	T128Point16 hotSpot;
	T128Integer16 width;
	T128Integer16 height;
	AsnPerOctetString(-1,-1) colorPointerData;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}


[DataTypeBitAlign]
struct T128ColorRGB	//Sequence
{
	
	
	T128Integer8 red;
	T128Integer8 green;
	T128Integer8 blue;   
}

Table T128ColorSpaceSpecifierTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "colorSpaceDefault";
		case (ExtensionBit == 0) && (Choice== 1): "colorSpaceRGB";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardColorSpace";

	}
}

[DataTypeBitAlign]
struct T128ColorSpaceSpecifier = T128ColorSpaceSpecifierTable(ExtensionBit, T128ColorSpaceSpecifierChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128ColorSpaceSpecifierChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128ColorSpaceSpecifierChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128ColorSpaceSpecifierChoice)
				{
					case 1: T128ColorAccuracyEnhancementRGB colorSpaceRGB;
					case 2: NonStandardParameter nonStandardColorSpace;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128CompressedBitmapData	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer16 mainBodySize;
	T128Integer16 rowSize;
	T128Integer16 uncompressedSize;
	AsnPerOctetString(-1,-1) compressedBitmap;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}


[DataTypeBitAlign]
struct T128ConfirmDetachResponse	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerBoolean(0) passControlFlag;
	T128Integer16 sendingReference;
	T128Integer16 originatorReference;
	T128UserID originatorID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128ConfirmRemoteShare	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128ConfirmTakeResponse	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerBoolean(0) passControlFlag;
	T128Integer16 sendingReference;
	T128Integer16 originatorReference;
	T128UserID originatorID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128ControlPriorityTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "always";
		case (ExtensionBit == 0) && (Choice== 1): "never";
		case (ExtensionBit == 0) && (Choice== 2): "confirm";
		case (ExtensionBit == 0) && (Choice== 3): "nonStandardControlPriority";
	}
}

[DataTypeBitAlign]
struct T128ControlPriority = T128ControlPriorityTable(ExtensionBit, T128ControlPriorityChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128ControlPriorityChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128ControlPriorityChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue;
				switch (T128ControlPriorityChoice)
				{
					case 3: NonStandardParameter nonStandardControlPriority;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128Cooperate	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128CoordinateTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "absolute";
		case (ExtensionBit == 0) && (Choice== 1): "delta";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardCoordinate";
	}
}

[DataTypeBitAlign]
struct T128Coordinate = T128CoordinateTable(ExtensionBit, T128CoordinateChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128CoordinateChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128CoordinateChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128CoordinateChoice)
				{
					case 0: T128Coordinate16 absolute;
					case 1: T128Coordinate8 delta;
					case 2: NonStandardParameter nonStandardCoordinate;
				}
			}
	}
}

Table T128DesktopSaveActionTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "desktopSave";
		case (ExtensionBit == 0) && (Choice== 1): "desktopRestore";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardDesktopSaveAction";
	}
}

[DataTypeBitAlign]
struct T128DesktopSaveAction = T128DesktopSaveActionTable(ExtensionBit, T128DesktopSaveActionChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128DesktopSaveActionChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128DesktopSaveActionChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128DesktopSaveActionChoice)
				{
					case 2: NonStandardParameter nonStandardDesktopSaveAction;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128DenyDetachResponse	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerBoolean(0) passControlFlag;
	T128Integer16 sendingReference;
	T128Integer16 originatorReference;
	T128UserID originatorID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128DenyPassResponse	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerBoolean(0) passControlFlag;
	T128Integer16 sendingReference;
	T128Integer16 originatorReference;
	T128UserID originatorID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128DenyTakeResponse	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerBoolean(0) passControlFlag;
	T128Integer16 sendingReference;
	T128Integer16 originatorReference;
	T128UserID originatorID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128DenyRemoteDetachResponse	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerBoolean(0) passControlFlag;
	T128Integer16 sendingReference;
	T128Integer16 originatorReference;
	T128UserID originatorID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128DenyRemoteShareTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "remoteShareDenial";
		case (ExtensionBit == 0) && (Choice== 1): "nonStandardDenial";
	}
}

[DataTypeBitAlign]
struct T128DenyRemoteShare = T128DenyRemoteShareTable(ExtensionBit, T128DenyRemoteShareChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128DenyRemoteShareChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128DenyRemoteShareChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue;
				switch (T128DenyRemoteShareChoice)
				{
					case 0: T128RemoteShareDenial remoteShareDenial;
					case 1: NonStandardParameter nonStandardDenial;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128Detach	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128DetachRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerBoolean(0) passControlFlag;
	T128Integer16 sendingReference;
	T128UserID originatorID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128FontAttribute	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128T50String faceName;
	T128FontAttributeFlags fontFlags;
	T128Integer16 averageWidth;
	T128Integer16 height;
	T128Integer16 aspectX;
	T128Integer16 aspectY;
	T128Integer8 signature1;
	T128Integer8 signature2;
	T128Integer16 signature3;
	T128FontCodePage codePage;
	T128Integer16 ascent;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128FontCodePageTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "allCodePoints";
		case (ExtensionBit == 0) && (Choice== 1): "coreCodePoints";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardFontCodePage";

	}
}

[DataTypeBitAlign]
struct T128FontCodePage = T128FontCodePageTable(ExtensionBit, T128FontCodePageChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128FontCodePageChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128FontCodePageChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128FontCodePageChoice)
				{
					case 2: NonStandardParameter nonStandardFontCodePage;
				}
			}
	}
}

Table T128GeneralCompressionSpecifierTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "v42bisCompression";
		case (ExtensionBit == 0) && (Choice== 1): "nonStandardCompression";

	}
}

[DataTypeBitAlign]
struct T128GeneralCompressionSpecifier = T128GeneralCompressionSpecifierTable(ExtensionBit, T128GeneralCompressionSpecifierChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128GeneralCompressionSpecifierChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128GeneralCompressionSpecifierChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue;
				switch (T128GeneralCompressionSpecifierChoice)
				{
					case 0: T128V42bisCompression v42bisCompression;
					case 1: NonStandardParameter nonStandardCompression;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128GrantControl	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128UserID grantID;
	AsnPerConstrainedInteger(0, 2147483647) controlID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128HatchStyleTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "horizontal";
		case (ExtensionBit == 0) && (Choice== 1): "vertical";
		case (ExtensionBit == 0) && (Choice== 2): "forward";
		case (ExtensionBit == 0) && (Choice== 3): "backward";
		case (ExtensionBit == 0) && (Choice== 4): "cross";
		case (ExtensionBit == 0) && (Choice== 5): "diagonal";
		case (ExtensionBit == 0) && (Choice== 6): "nonStandardHatchStyle";
	}
}

[DataTypeBitAlign]
struct T128HatchStyle = T128HatchStyleTable(ExtensionBit, T128HatchStyleChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128HatchStyleChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128HatchStyleChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 6) ChoiceValue;
				switch (T128HatchStyleChoice)
				{
					case 6: NonStandardParameter nonStandardHatchStyle;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128HostedWindowActiveIndication	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer16 activationID;
	T128WindowID activationWindow;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128HostedWindowInvisibleIndication	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer16 activationID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128LocalWindowActiveIndication	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer16 activationID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128MonoPointerAttribute	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Point16 hotSpot;
	T128Integer16 width;
	T128Integer16 height;
	AsnPerOctetString(-1,-1) monoPointerData;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T128NotifyHostedApplications	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer16 numberApplications;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct T128PassControlRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerBoolean(0) passControlFlag;
	T128Integer16 sendingReference;
	T128UserID originatorID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128Pen	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 stylePresent:1;
	UINT8 widthPresent:1;
	UINT8 colorPresent:1;
	UINT8 nonStandardParametersPresent:1;
	switch
	{
		case stylePresent : T128PenStyle style;
	}
	switch
	{
		case widthPresent : AsnPerConstrainedInteger (1,1) width;
	}
	switch
	{
		case colorPresent : T128Color color;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128PenStyleTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "solid";
		case (ExtensionBit == 0) && (Choice== 1): "dashed";
		case (ExtensionBit == 0) && (Choice== 2): "dotted";
		case (ExtensionBit == 0) && (Choice== 3): "dash_dot";
		case (ExtensionBit == 0) && (Choice== 4): "dash_dot_dot";
		case (ExtensionBit == 0) && (Choice== 5): "null";
		case (ExtensionBit == 0) && (Choice== 6): "nonStandardPenStyle";

	}
}

[DataTypeBitAlign]
struct T128PenStyle = T128PenStyleTable(ExtensionBit, T128PenStyleChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128PenStyleChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128PenStyleChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 6) ChoiceValue;
				switch (T128PenStyleChoice)
				{
					case 6: NonStandardParameter nonStandardPenStyle;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128Point16	//Sequence
{
	T128Coordinate16 x;
	T128Coordinate16 y;   
}

[DataTypeBitAlign]
struct T128PointerDeviceCaptureIndication	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 nonStandardParametersPresent:1;
	T128Integer16 activationID;
	T128WindowID activationWindow;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128Rectangle16	//Sequence
{
	T128Coordinate16 left;
	T128Coordinate16 top;
	T128Coordinate16 right;
	T128Coordinate16 bottom;   
}

[DataTypeBitAlign]
struct T128RemoteDetachRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerBoolean(0) passControlFlag;
	T128Integer16 sendingReference;
	T128UserID originatorID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128RemoteShareDenialTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "incorrectPassword";
		case (ExtensionBit == 0) && (Choice== 1): "remoteShareNotEnabled";
		case (ExtensionBit == 0) && (Choice== 2): "remoteShareInOperationIncoming";
		case (ExtensionBit == 0) && (Choice== 3): "remoteShareInOperationOutgoing";
		case (ExtensionBit == 0) && (Choice== 4): "nonStandardRemoteShareDenial";

	}
}

[DataTypeBitAlign]
struct T128RemoteShareDenial = T128RemoteShareDenialTable(ExtensionBit, T128RemoteShareDenialChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128RemoteShareDenialChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128RemoteShareDenialChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 4) ChoiceValue;
				switch (T128RemoteShareDenialChoice)
				{
					case 4: NonStandardParameter nonStandardRemoteShareDenial;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128RequestControl	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}
[DataTypeBitAlign]
struct T128RequestRemoteShare	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128UserID requestingID;
	AsnPerOctetString(-1,-1) encryptedPassword;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}


[DataTypeBitAlign]
struct T128RestoreWindowRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128WindowID activationWindow;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}
//#? ---------------------------------NOT CONVERTED---------------------------------
[DataTypeBitAlign]
struct T128Integer8	= Integer8Value
{
	[Post.Integer8Value = ConstrainedValue]
	AsnPerConstrainedInteger(0, 255) Integer8;   
}
Table T128ROP2Table(code)
{
	switch (code)
	{
		case 1 : "r2BLACK";
		case 2 : "r2DPon";
		case 3 : "r2DPna";
		case 4 : "r2Pn";
		case 5 : "r2PDna";
		case 6 : "r2Dn";
		case 7 : "r2DPx";
		case 8 : "r2DPan";
		case 9 : "r2DPa";
		case 10 : "r2DPxn";
		case 11 : "r2D";
		case 12 : "r2DPno";
		case 13 : "r2P";
		case 14 : "r2PDno";
		case 15 : "r2DPo";
		case 16 : "r2WHITE";
	}
}
struct T128ROP2 = T128ROP2Table(Integer8Value)
{
	T128Integer8 ROP2 = T128ROP2Table(Integer8Value);
}

//#? -------------------------------------------------------------------------------
//#? ---------------------------------NOT CONVERTED---------------------------------
Table T128ROP3Table(code)
{
	switch (code)
	{
		case	0x00 : "r3BLACK";
		case	0x01 : "r3DPSoon";
		case	0x02 : "r3DPSona";
		case	0x03 : "r3PSon";
		case	0x04 : "r3SDPona";
		case	0x05 : "r3DPon";
		case	0x06 : "r3PDSxnon";
		case	0x07 : "r3PDSaon";
		case	0x08 : "r3SDPnaa";
		case	0x09 : "r3PDSxon";
		case	0x0A : "r3DPna";
		case	0x0B : "r3PSDnaon";
		case	0x0C : "r3SPna";
		case	0x0D : "r3PDSnaon";
		case	0x0E : "r3PDSonon";
		case	0x0F : "r3Pn";
		case	0x10 : "r3PDSona";
		case	0x11 : "r3DSon";
		case	0x12 : "r3SDPxnon";
		case	0x13 : "r3SDPaon";
		case	0x14 : "r3DPSxnon";
		case	0x15 : "r3DPSaon";
		case	0x16 : "r3PSDPSanaxx";
		case	0x17 : "r3SSPxDSxaxn";
		case	0x18 : "r3SPxPDxa";
		case	0x19 : "r3SDPSanaxn";
		case	0x1A : "r3PDSPaox";
		case	0x1B : "r3SDPSxaxn";
		case	0x1C : "r3PSDPaox";
		case	0x1D : "r3DSPDxaxn";
		case	0x1E : "r3PDSox";
		case	0x1F : "r3PDSoan";
		case	0x20 : "r3DPSnaa";
		case	0x21 : "r3SDPxon";
		case	0x22 : "r3DSna";
		case	0x23 : "r3SPDnaon";
		case	0x24 : "r3SPxDSxa";
		case	0x25 : "r3PDSPanaxn";
		case	0x26 : "r3SDPSaox";
		case	0x27 : "r3SDPSxnox";
		case	0x28 : "r3DPSxa";
		case	0x29 : "r3PSDPSaoxxn";
		case	0x2A : "r3DPSana";
		case	0x2B : "r3SSPxPDxaxn";
		case	0x2C : "r3SPDSoax";
		case	0x2D : "r3PSDnox";
		case	0x2E : "r3PSDPxox";
		case	0x2F : "r3PSDnoan";
		case	0x30 : "r3PSna";
		case	0x31 : "r3SDPnaon";
		case	0x32 : "r3SDPSoox";
		case	0x33 : "r3Sn";
		case	0x34 : "r3SPDSaox";
		case	0x35 : "r3SPDSxnox";
		case	0x36 : "r3SDPox";
		case	0x37 : "r3SDPoan";
		case	0x38 : "r3PSDPoax";
		case	0x39 : "r3SPDnox";
		case	0x3A : "r3SPDSxox";
		case	0x3B : "r3SPDnoan";
		case	0x3C : "r3PSx";
		case	0x3D : "r3SPDSonox";
		case	0x3E : "r3SPDSnaox";
		case	0x3F : "r3PSan";
		case	0x40 : "r3PSDnaa";
		case	0x41 : "r3DPSxon";
		case	0x42 : "r3SDxPDxa";
		case	0x43 : "r3SPDSanaxn";
		case	0x44 : "r3SDna";
		case	0x45 : "r3DPSnaon";
		case	0x46 : "r3DSPDaox";
		case	0x47 : "r3PSDPxaxn";
		case	0x48 : "r3SDPxa";
		case	0x49 : "r3PDSPDaoxxn";
		case	0x4A : "r3DPSDoax";
		case	0x4B : "r3PDSnox";
		case	0x4C : "r3SDPana";
		case	0x4D : "r3SSPxDSxoxn";
		case	0x4E : "r3PDSPxox";
		case	0x4F : "r3PDSnoan";
		case	0x50 : "r3PDna";
		case	0x51 : "r3DSPnaon";
		case	0x52 : "r3DPSDaox";
		case	0x53 : "r3SPDSxaxn";
		case	0x54 : "r3DPSonon";
		case	0x55 : "r3Dn";
		case	0x56 : "r3DPSox";
		case	0x57 : "r3DPSoan";
		case	0x58 : "r3PDSPoax";
		case	0x59 : "r3DPSnox";
		case	0x5A : "r3DPx";
		case	0x5B : "r3DPSDonox";
		case	0x5C : "r3DPSDxox";
		case	0x5D : "r3DPSnoan";
		case	0x5E : "r3DPSDnaox";
		case	0x5F : "r3DPan";
		case	0x60 : "r3PDSxa";
		case	0x61 : "r3DSPDSaoxxn";
		case	0x62 : "r3DSPDoax";
		case	0x63 : "r3SDPnox";
		case	0x64 : "r3SDPSoax";
		case	0x65 : "r3DSPnox";
		case	0x66 : "r3DSx";
		case	0x67 : "r3SDPSonox";
		case	0x68 : "r3DSPDSonoxxn";
		case	0x69 : "r3PDSxxn";
		case	0x6A : "r3DPSax";
		case	0x6B : "r3PSDPSoaxxn";
		case	0x6C : "r3SDPax";
		case	0x6D : "r3PDSPDoaxxn";
		case	0x6E : "r3SDPSnoax";
		case	0x6F : "r3PDSxnan";
		case	0x70 : "r3PDSana";
		case	0x71 : "r3SSDxPDxaxn";
		case	0x72 : "r3SDPSxox";
		case	0x73 : "r3SDPnoan";
		case	0x74 : "r3DSPDxox";
		case	0x75 : "r3DSPnoan";
		case	0x76 : "r3SDPSnaox";
		case	0x77 : "r3DSan";
		case	0x78 : "r3PDSax";
		case	0x79 : "r3DSPDSoaxxn";
		case	0x7A : "r3DPSDnoax";
		case	0x7B : "r3SDPxnan";
		case	0x7C : "r3SPDSnoax";
		case	0x7D : "r3DPSxnan";
		case	0x7E : "r3SPxDSxo";
		case	0x7F : "r3DPSaan";
		case	0x80 : "r3DPSaa";
		case	0x81 : "r3SPxDSxon";
		case	0x82 : "r3DPSxna";
		case	0x83 : "r3SPDSnoaxn";
		case	0x84 : "r3SDPxna";
		case	0x85 : "r3PDSPnoaxn";
		case	0x86 : "r3DSPDSoaxx";
		case	0x87 : "r3PDSaxn";
		case	0x88 : "r3DSa";
		case	0x89 : "r3SDPSnaoxn";
		case	0x8A : "r3DSPnoa";
		case	0x8B : "r3DSPDxoxn";
		case	0x8C : "r3SDPnoa";
		case	0x8D : "r3SDPSxoxn";
		case	0x8E : "r3SSDxPDxax";
		case	0x8F : "r3PDSanan";
		case	0x90 : "r3PDSxna";
		case	0x91 : "r3SDPSnoaxn";
		case	0x92 : "r3DPSDPoaxx";
		case	0x93 : "r3SPDaxn";
		case	0x94 : "r3PSDPSoaxx";
		case	0x95 : "r3DPSaxn";
		case	0x96 : "r3DPSxx";
		case	0x97 : "r3PSDPSonoxx";
		case	0x98 : "r3SDPSonoxn";
		case	0x99 : "r3DSxn";
		case	0x9A : "r3DPSnax";
		case	0x9B : "r3SDPSoaxn";
		case	0x9C : "r3SPDnax";
		case	0x9D : "r3DSPDoaxn";
		case	0x9E : "r3DSPDSaoxx";
		case	0x9F : "r3PDSxan";
		case	0xA0 : "r3DPa";
		case	0xA1 : "r3PDSPnaoxn";
		case	0xA2 : "r3DPSnoa";
		case	0xA3 : "r3DPSDxoxn";
		case	0xA4 : "r3PDSPonoxn";
		case	0xA5 : "r3PDxn";
		case	0xA6 : "r3DSPnax";
		case	0xA7 : "r3PDSPoaxn";
		case	0xA8 : "r3DPSoa";
		case	0xA9 : "r3DPSoxn";
		case	0xAA : "r3D";
		case	0xAB : "r3DPSono";
		case	0xAC : "r3SPDSxax";
		case	0xAD : "r3DPSDaoxn";
		case	0xAE : "r3DSPnao";
		case	0xAF : "r3DPno";
		case	0xB0 : "r3PDSnoa";
		case	0xB1 : "r3PDSPxoxn";
		case	0xB2 : "r3SSPxDSxox";
		case	0xB3 : "r3SDPanan";
		case	0xB4 : "r3PSDnax";
		case	0xB5 : "r3DPSDoaxn";
		case	0xB6 : "r3DPSDPaoxx";
		case	0xB7 : "r3SDPxan";
		case	0xB8 : "r3PSDPxax";
		case	0xB9 : "r3DSPDaoxn";
		case	0xBA : "r3DPSnao";
		case	0xBB : "r3DSno";
		case	0xBC : "r3SPDSanax";
		case	0xBD : "r3SDxPDxan";
		case	0xBE : "r3DPSxo";
		case	0xBF : "r3DPSano";
		case	0xC0 : "r3PSa";
		case	0xC1 : "r3SPDSnaoxn";
		case	0xC2 : "r3SPDSonoxn";
		case	0xC3 : "r3PSxn";
		case	0xC4 : "r3SPDnoa";
		case	0xC5 : "r3SPDSxoxn";
		case	0xC6 : "r3SDPnax";
		case	0xC7 : "r3PSDPoaxn";
		case	0xC8 : "r3SDPoa";
		case	0xC9 : "r3SPDoxn";
		case	0xCA : "r3DPSDxax";
		case	0xCB : "r3SPDSaoxn";
		case	0xCC : "r3S";
		case	0xCD : "r3SDPono";
		case	0xCE : "r3SDPnao";
		case	0xCF : "r3SPno";
		case	0xD0 : "r3PSDnoa";
		case	0xD1 : "r3PSDPxoxn";
		case	0xD2 : "r3PDSnax";
		case	0xD3 : "r3SPDSoaxn";
		case	0xD4 : "r3SSPxPDxax";
		case	0xD5 : "r3DPSanan";
		case	0xD6 : "r3PSDPSaoxx";
		case	0xD7 : "r3DPSxan";
		case	0xD8 : "r3PDSPxax";
		case	0xD9 : "r3SDPSaoxn";
		case	0xDA : "r3DPSDanax";
		case	0xDB : "r3SPxDSxan";
		case	0xDC : "r3SPDnao";
		case	0xDD : "r3SDno";
		case	0xDE : "r3SDPxo";
		case	0xDF : "r3SDPano";
		case	0xE0 : "r3PDSoa";
		case	0xE1 : "r3PDSoxn";
		case	0xE2 : "r3DSPDxax";
		case	0xE3 : "r3PSDPaoxn";
		case	0xE4 : "r3SDPSxax";
		case	0xE5 : "r3PDSPaoxn";
		case	0xE6 : "r3SDPSanax";
		case	0xE7 : "r3SPxPDxan";
		case	0xE8 : "r3SSPxDSxax";
		case	0xE9 : "r3DSPDSanaxxn";
		case	0xEA : "r3DPSao";
		case	0xEB : "r3DPSxno";
		case	0xEC : "r3SDPao";
		case	0xED : "r3SDPxno";
		case	0xEE : "r3DSo";
		case	0xEF : "r3SDPnoo";
		case	0xF0 : "r3P";
		case	0xF1 : "r3PDSono";
		case	0xF2 : "r3PDSnao";
		case	0xF3 : "r3PSno";
		case	0xF4 : "r3PSDnao";
		case	0xF5 : "r3PDno";
		case	0xF6 : "r3PDSxo";
		case	0xF7 : "r3PDSano";
		case	0xF8 : "r3PDSao";
		case	0xF9 : "r3PDSxno";
		case	0xFA : "r3DPo";
		case	0xFB : "r3DPSnoo";
		case	0xFC : "r3PSo";
		case	0xFD : "r3PSDnoo";
		case	0xFE : "r3DPSoo";
		case	0xFF : "r3WITE";
	}
}
struct T128ROP3 = T128ROP3Table(Integer8Value)
{
	T128Integer8 ROP3 = T128ROP3Table(Integer8Value);
}
//#? -------------------------------------------------------------------------------

Table T128SystemPointerTypeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "null";
		case (ExtensionBit == 0) && (Choice== 1): "default";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardSystemPointerValue";
	}
}

[DataTypeBitAlign]
struct T128SystemPointerType = T128SystemPointerTypeTable(ExtensionBit, T128SystemPointerTypeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128SystemPointerTypeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128SystemPointerTypeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128SystemPointerTypeChoice)
				{
					case 2: NonStandardParameter nonStandardSystemPointerValue;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128TakeControlRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerBoolean(0) passControlFlag;
	T128Integer16 sendingReference;
	T128Integer16 originatorReference;
	T128UserID originatorID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128UnhostApplication	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128WindowID windowID;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128V42bisCompression	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 p1Present:1;
	UINT8 p2Present:1;
	
	switch
	{
		case p1Present : AsnPerConstrainedInteger(512, 65535) p1;
	}
	switch
	{
		case p2Present : AsnPerConstrainedInteger(6, 250) p2;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128WindowAttribute	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128WindowID windowID;
	T128Integer32 windowExtra;
	T128WindowID windowOwner;
	T128WindowAttributeFlags windowFlags;
	T128Rectangle16 windowRectangle;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128WindowManagerMenuRequest	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128WindowID activationWindow;
	T128Point16 activationPoint;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128WindowTitleTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "noTitle";
		case (ExtensionBit == 0) && (Choice== 1): "titleString";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardWindowTitle";

	}
}

[DataTypeBitAlign]
struct T128WindowTitle = T128WindowTitleTable(ExtensionBit, T128WindowTitleChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128WindowTitleChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128WindowTitleChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128WindowTitleChoice)
				{
					case 0: AsnPerConstrainedInteger(255,255) noTitle;
					case 1: T128T50String titleString;
					case 2: NonStandardParameter nonStandardWindowTitle;
				}
			}
	}
}

Table T128InputEventTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "pointingDeviceEvent";
		case (ExtensionBit == 0) && (Choice== 1): "codePointEvent";
		case (ExtensionBit == 0) && (Choice== 2): "virtualKeyEvent";
		case (ExtensionBit == 0) && (Choice== 3): "synchronizeEvent";
		case (ExtensionBit == 0) && (Choice== 4): "nonStandardInputEvent";
	}
}

[DataTypeBitAlign]
struct T128InputEvent = T128InputEventTable(ExtensionBit, T128InputEventChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128InputEventChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128InputEventChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 4) ChoiceValue;
				switch (T128InputEventChoice)
				{
					case 0: T128PointingDeviceEvent pointingDeviceEvent;
					case 1: T128CodePointEvent codePointEvent;
					case 2: T128VirtualKeyEvent virtualKeyEvent;
					case 3: T128SynchronizeEvent synchronizeEvent;
					case 4: NonStandardParameter nonStandardInputEvent;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128CodePointEvent	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer32 eventTime;
	T128KeyboardFlags keyboardFlags;
	T128Integer16 codePoint;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128VirtualKeyEvent	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer32 eventTime;
	T128KeyboardFlags keyboardFlags;
	T128Integer16 virtualKey;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128PointingDeviceEvent	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer32 eventTime;
	T128PointingDeviceFlags pointingDeviceFlags;
	T128Coordinate16 pointingDeviceX;
	T128Coordinate16 pointingDeviceY;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128SynchronizeEvent	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer32 eventTime;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128PrimaryOrderHeader	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 boundsLeftPresent:1;
	UINT8 boundsTopPresent:1;
	UINT8 boundsRightPresent:1;
	UINT8 boundsBottomPresent:1;
	
	switch
	{
		case boundsLeftPresent : T128Coordinate boundsLeft;
	}
	switch
	{
		case boundsTopPresent : T128Coordinate boundsTop;
	}
	switch
	{
		case boundsRightPresent : T128Coordinate boundsRight;
	}
	switch
	{
		case boundsBottomPresent : T128Coordinate boundsBottom;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128ShareDataHeader	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 generalCompressionSpecifierPresent:1;
	
	T128ShareID shareID;
	switch
	{
		case generalCompressionSpecifierPresent : T128GeneralCompressionSpecifier generalCompressionSpecifier;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128DestinationBltOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 destLeftPresent:1;
	UINT8 destTopPresent:1;
	UINT8 destWidthPresent:1;
	UINT8 destHeightPresent:1;
	UINT8 rop3Present:1;
	UINT8 nonStandardParametersPresent:1;
	
	T128PrimaryOrderHeader header;
	switch
	{
		case destLeftPresent : T128Coordinate destLeft;
	}
	switch
	{
		case destTopPresent : T128Coordinate destTop;
	}
	switch
	{
		case destWidthPresent : T128Coordinate destWidth;
	}
	switch
	{
		case destHeightPresent : T128Coordinate destHeight;
	}
	switch
	{
		case rop3Present : T128ROP3 rop3;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128PatternBltOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 destLeftPresent:1;
	UINT8 destTopPresent:1;
	UINT8 destWidthPresent:1;
	UINT8 destHeightPresent:1;
	UINT8 rop3Present:1;
	UINT8 backgroundColorPresent:1;
	UINT8 foregroundColorPresent:1;
	UINT8 brushPresent:1;
	UINT8 nonStandardParametersPresent:1;
	
	T128PrimaryOrderHeader header;
	switch
	{
		case destLeftPresent : T128Coordinate destLeft;
	}
	switch
	{
		case destTopPresent : T128Coordinate destTop;
	}
	switch
	{
		case destWidthPresent : T128Coordinate destWidth;
	}
	switch
	{
		case destHeightPresent : T128Coordinate destHeight;
	}
	switch
	{
		case rop3Present : T128ROP3 rop3;
	}
	switch
	{
		case backgroundColorPresent : T128Color backgroundColor;
	}
	switch
	{
		case foregroundColorPresent : T128Color foregroundColor;
	}
	switch
	{
		case brushPresent : T128Brush brush;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128ScreenBltOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 destLeftPresent:1;
	UINT8 destTopPresent:1;
	UINT8 destWidthPresent:1;
	UINT8 destHeightPresent:1;
	UINT8 rop3Present:1;
	UINT8 sourceXPresent:1;
	UINT8 sourceYPresent:1;
	UINT8 nonStandardParametersPresent:1;
	
	T128PrimaryOrderHeader header;
	switch
	{
		case destLeftPresent : T128Coordinate destLeft;
	}
	switch
	{
		case destTopPresent : T128Coordinate destTop;
	}
	switch
	{
		case destWidthPresent : T128Coordinate destWidth;
	}
	switch
	{
		case destHeightPresent : T128Coordinate destHeight;
	}
	switch
	{
		case rop3Present : T128ROP3 rop3;
	}
	switch
	{
		case sourceXPresent : T128Coordinate sourceX;
	}
	switch
	{
		case sourceYPresent : T128Coordinate sourceY;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128CacheBitmapOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerConstrainedInteger(0, 2) cacheId;
	T128Integer8 bitmapWidth;
	T128Integer8 bitmapHeight;
	AsnPerInteger bitmapBitsPerPel;
	T128Integer16 cacheIndex;
	T128BitmapData bitmapData;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128CacheColorTableOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128Integer8 cacheIndex;
	T128ColorPalette colorTable;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128MemoryBltOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 colorTableCacheIndexPresent:1;
	UINT8 bitmapCacheIDPresent:1;
	UINT8 destLeftPresent:1;
	UINT8 destTopPresent:1;
	UINT8 destWidthPresent:1;
	UINT8 destHeightPresent:1;
	UINT8 rop3Present:1;
	UINT8 sourceXPresent:1;
	UINT8 sourceYPresent:1;
	UINT8 bitmapCacheIndexPresent:1;
	UINT8 nonStandardParametersPresent:1;
	
	T128PrimaryOrderHeader header;
	switch
	{
		case colorTableCacheIndexPresent : T128Integer8 colorTableCacheIndex;
	}
	switch
	{
		case bitmapCacheIDPresent : T128Integer8 bitmapCacheID;
	}
	switch
	{
		case destLeftPresent : T128Coordinate destLeft;
	}
	switch
	{
		case destTopPresent : T128Coordinate destTop;
	}
	switch
	{
		case destWidthPresent : T128Coordinate destWidth;
	}
	switch
	{
		case destHeightPresent : T128Coordinate destHeight;
	}
	switch
	{
		case rop3Present : T128ROP3 rop3;
	}
	switch
	{
		case sourceXPresent : T128Coordinate sourceX;
	}
	switch
	{
		case sourceYPresent : T128Coordinate sourceY;
	}
	switch
	{
		case bitmapCacheIndexPresent : T128Integer16 bitmapCacheIndex;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128MemoryThreeWayBltOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 colorTableCacheIndexPresent:1;
	UINT8 bitmapCacheIDPresent:1;
	UINT8 destLeftPresent:1;
	UINT8 destTopPresent:1;
	UINT8 destWidthPresent:1;
	UINT8 destHeightPresent:1;
	UINT8 rop3Present:1;
	UINT8 sourceXPresent:1;
	UINT8 sourceYPresent:1;
	UINT8 backgroundColorPresent:1;
	UINT8 foregroundColorPresent:1;
	UINT8 brushPresent:1;
	UINT8 bitmapCacheIndexPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T128PrimaryOrderHeader header;
	switch
	{
		case colorTableCacheIndexPresent : T128Integer8 colorTableCacheIndex;
	}
	switch
	{
		case bitmapCacheIDPresent : T128Integer8 bitmapCacheID;
	}
	switch
	{
		case destLeftPresent : T128Coordinate destLeft;
	}
	switch
	{
		case destTopPresent : T128Coordinate destTop;
	}
	switch
	{
		case destWidthPresent : T128Coordinate destWidth;
	}
	switch
	{
		case destHeightPresent : T128Coordinate destHeight;
	}
	switch
	{
		case rop3Present : T128ROP3 rop3;
	}
	switch
	{
		case sourceXPresent : T128Coordinate sourceX;
	}
	switch
	{
		case sourceYPresent : T128Coordinate sourceY;
	}
	switch
	{
		case backgroundColorPresent : T128Color backgroundColor;
	}
	switch
	{
		case foregroundColorPresent : T128Color foregroundColor;
	}
	switch
	{
		case brushPresent : T128Brush brush;
	}
	switch
	{
		case bitmapCacheIndexPresent : T128Integer16 bitmapCacheIndex;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128TextOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 backMixModePresent:1;
	UINT8 startXPresent:1;
	UINT8 startYPresent:1;
	UINT8 backgroundColorPresent:1;
	UINT8 foregroundColorPresent:1;
	UINT8 extraSpacingPresent:1;
	UINT8 totalBreakSpacingPresent:1;
	UINT8 breakCountPresent:1;
	UINT8 fontHeightPresent:1;
	UINT8 fontWidthPresent:1;
	UINT8 fontWeightPresent:1;
	UINT8 textFlagsPresent:1;
	UINT8 fontIDPresent:1;
	UINT8 codePointListPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T128PrimaryOrderHeader header;
	switch
	{
		case backMixModePresent : T128BackgroundMixMode backMixMode;
	}
	switch
	{
		case startXPresent : T128Coordinate startX;
	}
	switch
	{
		case startYPresent : T128Coordinate startY;
	}
	switch
	{
		case backgroundColorPresent : T128Color backgroundColor;
	}
	switch
	{
		case foregroundColorPresent : T128Color foregroundColor;
	}
	switch
	{
		case extraSpacingPresent : T128Integer16 extraSpacing;
	}
	switch
	{
		case totalBreakSpacingPresent : T128Integer16 totalBreakSpacing;
	}
	switch
	{
		case breakCountPresent : T128Integer16 breakCount;
	}
	switch
	{
		case fontHeightPresent : T128Integer16 fontHeight;
	}
	switch
	{
		case fontWidthPresent : T128Integer16 fontWidth;
	}
	switch
	{
		case fontWeightPresent : T128Integer16 fontWeight;
	}
	switch
	{
		case textFlagsPresent : T128TextAttributeFlags textFlags;
	}
	switch
	{
		case fontIDPresent : T128Integer16 fontID;
	}
	switch
	{
		case codePointListPresent : T128ASString(1,255) codePointList;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}
//#? ---------------------------------NOT CONVERTED---------------------------------

[DataTypeBitAlign]
struct T128ExtendedTextOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 backMixModePresent:1;
	UINT8 startXPresent:1;
	UINT8 startYPresent:1;
	UINT8 backgroundColorPresent:1;
	UINT8 foregroundColorPresent:1;
	UINT8 extraSpacingPresent:1;
	UINT8 totalBreakSpacingPresent:1;
	UINT8 breakCountPresent:1;
	UINT8 fontHeightPresent:1;
	UINT8 fontWidthPresent:1;
	UINT8 fontWeightPresent:1;
	UINT8 textFlags1Present:1;
	UINT8 fontIDPresent:1;
	UINT8 textFlags2Present:1;
	UINT8 clipLeftPresent:1;
	UINT8 clipTopPresent:1;
	UINT8 clipRightPresent:1;
	UINT8 clipBottomPresent:1;
	UINT8 codePointListPresent:1;
	UINT8 deltaXListPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T128PrimaryOrderHeader header;
	switch
	{
		case backMixModePresent : T128BackgroundMixMode backMixMode;
	}
	switch
	{
		case startXPresent : T128Coordinate startX;
	}
	switch
	{
		case startYPresent : T128Coordinate startY;
	}
	switch
	{
		case backgroundColorPresent : T128Color backgroundColor;
	}
	switch
	{
		case foregroundColorPresent : T128Color foregroundColor;
	}
	switch
	{
		case extraSpacingPresent : T128Integer16 extraSpacing;
	}
	switch
	{
		case totalBreakSpacingPresent : T128Integer16 totalBreakSpacing;
	}
	switch
	{
		case breakCountPresent : T128Integer16 breakCount;
	}
	switch
	{
		case fontHeightPresent : T128Integer16 fontHeight;
	}
	switch
	{
		case fontWidthPresent : T128Integer16 fontWidth;
	}
	switch
	{
		case fontWeightPresent : T128Integer16 fontWeight;
	}
	switch
	{
		case textFlags1Present : T128TextAttributeFlags textFlags1;
	}
	switch
	{
		case fontIDPresent : T128Integer16 fontID;
	}
	switch
	{
		case textFlags2Present : T128ExtraTextFlags textFlags2;
	}
	switch
	{
		case clipLeftPresent : T128Coordinate clipLeft;
	}
	switch
	{
		case clipTopPresent : T128Coordinate clipTop;
	}
	switch
	{
		case clipRightPresent : T128Coordinate clipRight;
	}
	switch
	{
		case clipBottomPresent : T128Coordinate clipBottom;
	}
	switch
	{
		case codePointListPresent : T128ASString(1,255) codePointList;
	}
	switch
	{
		case deltaXListPresent : T128deltaXList deltaXList;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128ASString(Min, Max)	//Sequence
{
	AsnPerOctetString(Min, Max) ASString;   
}

[DataTypeBitAlign]
struct T128deltaXList
{
	[Post.PERArraySize = ConstrainedValue]
	AsnPerConstrainedInteger(1, 127) Size;
	T128Coordinate deltaXList[PERArraySize];
}

//#? -------------------------------------------------------------------------------

[DataTypeBitAlign]
struct T128FrameOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 destLeftPresent:1;
	UINT8 destTopPresent:1;
	UINT8 destWidthPresent:1;
	UINT8 destHeightPresent:1;
	UINT8 rop3Present:1;
	UINT8 backgroundColorPresent:1;
	UINT8 foregroundColorPresent:1;
	UINT8 brushPresent:1;
	UINT8 nonStandardParametersPresent:1;
	
	T128PrimaryOrderHeader header;
	switch
	{
		case destLeftPresent : T128Coordinate destLeft;
	}
	switch
	{
		case destTopPresent : T128Coordinate destTop;
	}
	switch
	{
		case destWidthPresent : T128Coordinate destWidth;
	}
	switch
	{
		case destHeightPresent : T128Coordinate destHeight;
	}
	switch
	{
		case rop3Present : T128ROP3 rop3;
	}
	switch
	{
		case backgroundColorPresent : T128Color backgroundColor;
	}
	switch
	{
		case foregroundColorPresent : T128Color foregroundColor;
	}
	switch
	{
		case brushPresent : T128Brush brush;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128RectangleOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 backMixModePresent:1;
	UINT8 destLeftPresent:1;
	UINT8 destTopPresent:1;
	UINT8 destRightPresent:1;
	UINT8 destBottomPresent:1;
	UINT8 backgroundColorPresent:1;
	UINT8 foregroundColorPresent:1;
	UINT8 brushPresent:1;
	UINT8 rop2Present:1;
	UINT8 penPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T128PrimaryOrderHeader header;
	switch
	{
		case backMixModePresent : T128BackgroundMixMode backMixMode;
	}
	switch
	{
		case destLeftPresent : T128Coordinate destLeft;
	}
	switch
	{
		case destTopPresent : T128Coordinate destTop;
	}
	switch
	{
		case destRightPresent : T128Coordinate destRight;
	}
	switch
	{
		case destBottomPresent : T128Coordinate destBottom;
	}
	switch
	{
		case backgroundColorPresent : T128Color backgroundColor;
	}
	switch
	{
		case foregroundColorPresent : T128Color foregroundColor;
	}
	switch
	{
		case brushPresent : T128Brush brush;
	}
	switch
	{
		case rop2Present : T128ROP2 rop2;
	}
	switch
	{
		case penPresent : T128Pen pen;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128OpaqueRectangleOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	UINT8 destLeftPresent:1;
	UINT8 destTopPresent:1;
	UINT8 destWidthPresent:1;
	UINT8 destHeightPresent:1;
	UINT8 colorPresent:1;
	UINT8 nonStandardParametersPresent:1;
	
	T128PrimaryOrderHeader header;
	switch
	{
		case destLeftPresent : T128Coordinate destLeft;
	}
	switch
	{
		case destTopPresent : T128Coordinate destTop;
	}
	switch
	{
		case destWidthPresent : T128Coordinate destWidth;
	}
	switch
	{
		case destHeightPresent : T128Coordinate destHeight;
	}
	switch
	{
		case colorPresent : T128Color color;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128LineOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 backMixModePresent:1;
	UINT8 startXPresent:1;
	UINT8 startYPresent:1;
	UINT8 endXPresent:1;
	UINT8 endYPresent:1;
	UINT8 backgroundColorPresent:1;
	UINT8 rop2Present:1;
	UINT8 penPresent:1;
	UINT8 nonStandardParametersPresent:1;
	T128PrimaryOrderHeader header;
	switch
	{
		case backMixModePresent : T128BackgroundMixMode backMixMode;
	}
	switch
	{
		case startXPresent : T128Coordinate startX;
	}
	switch
	{
		case startYPresent : T128Coordinate startY;
	}
	switch
	{
		case endXPresent : T128Coordinate endX;
	}
	switch
	{
		case endYPresent : T128Coordinate endY;
	}
	switch
	{
		case backgroundColorPresent : T128Color backgroundColor;
	}
	switch
	{
		case rop2Present : T128ROP2 rop2;
	}
	switch
	{
		case penPresent : T128Pen pen;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128DesktopSaveOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 saveOffsetPresent:1;
	UINT8 destLeftPresent:1;
	UINT8 destTopPresent:1;
	UINT8 destWidthPresent:1;
	UINT8 destHeightPresent:1;
	UINT8 actionPresent:1;
	UINT8 nonStandardParametersPresent:1;
	
	T128PrimaryOrderHeader header;
	switch
	{
		case saveOffsetPresent : T128Integer32 saveOffset;
	}
	switch
	{
		case destLeftPresent : T128Coordinate destLeft;
	}
	switch
	{
		case destTopPresent : T128Coordinate destTop;
	}
	switch
	{
		case destWidthPresent : T128Coordinate destWidth;
	}
	switch
	{
		case destHeightPresent : T128Coordinate destHeight;
	}
	switch
	{
		case actionPresent : T128DesktopSaveAction action;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128DesktopOriginOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 desktopLeftPresent:1;
	UINT8 desktopTopPresent:1;
	UINT8 nonStandardParametersPresent:1;
	
	T128PrimaryOrderHeader header;
	switch
	{
		case desktopLeftPresent : T128Coordinate desktopLeft;
	}
	switch
	{
		case desktopTopPresent : T128Coordinate desktopTop;
	}
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128ColorSpaceOrder	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ColorSpaceSpecifier colorSpace;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128PrimaryOrderTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "destinationBlt";
		case (ExtensionBit == 0) && (Choice== 1): "patternBlt";
		case (ExtensionBit == 0) && (Choice== 2): "screenBlt";
		case (ExtensionBit == 0) && (Choice== 3): "memoryBlt";
		case (ExtensionBit == 0) && (Choice== 4): "memoryThreeWayBlt";
		case (ExtensionBit == 0) && (Choice== 5): "text";
		case (ExtensionBit == 0) && (Choice== 6): "extendedText";
		case (ExtensionBit == 0) && (Choice== 7): "frame";
		case (ExtensionBit == 0) && (Choice== 8): "rectangle";
		case (ExtensionBit == 0) && (Choice== 9): "line";
		case (ExtensionBit == 0) && (Choice== 10): "opaqueRectangle";
		case (ExtensionBit == 0) && (Choice== 11): "desktopSave";
		case (ExtensionBit == 0) && (Choice== 12): "desktopOrigin";
		case (ExtensionBit == 0) && (Choice== 13): "nonStandardPrimaryOrder";

	}
}

[DataTypeBitAlign]
struct T128PrimaryOrder = T128PrimaryOrderTable(ExtensionBit, T128PrimaryOrderChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128PrimaryOrderChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128PrimaryOrderChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 13) ChoiceValue;
				switch (T128PrimaryOrderChoice)
				{
					case 0: T128DestinationBltOrder destinationBlt;
					case 1: T128PatternBltOrder patternBlt;
					case 2: T128ScreenBltOrder screenBlt;
					case 3: T128MemoryBltOrder memoryBlt;
					case 4: T128MemoryThreeWayBltOrder memoryThreeWayBlt;
					case 5: T128TextOrder text;
					case 6: T128ExtendedTextOrder extendedText;
					case 7: T128FrameOrder frame;
					case 8: T128RectangleOrder rectangle;
					case 9: T128LineOrder line;
					case 10: T128OpaqueRectangleOrder opaqueRectangle;
					case 11: T128DesktopSaveOrder desktopSave;
					case 12: T128DesktopOriginOrder desktopOrigin;
					case 13: NonStandardParameter nonStandardPrimaryOrder;
				}
			}
	}
}

Table T128SecondaryOrderTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "cacheBitmap";
		case (ExtensionBit == 0) && (Choice== 1): "cacheColorTable";
		case (ExtensionBit == 0) && (Choice== 2): "colorSpaceOrder";
		case (ExtensionBit == 0) && (Choice== 3): "nonStandardSecondaryOrder";
	}
}

[DataTypeBitAlign]
struct T128SecondaryOrder = T128SecondaryOrderTable(ExtensionBit, T128SecondaryOrderChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128SecondaryOrderChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128SecondaryOrderChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue;
				switch (T128SecondaryOrderChoice)
				{
					case 0: T128CacheBitmapOrder cacheBitmap;
					case 1: T128CacheColorTableOrder cacheColorTable;
					case 2: T128ColorSpaceOrder colorSpaceOrder;
					case 3: NonStandardParameter nonStandardSecondaryOrder;
				}
			}
	}
}

Table T128UpdateOrderTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "primaryOrder";
		case (ExtensionBit == 0) && (Choice== 1): "secondaryOrder";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardOrder";

	}
}

[DataTypeBitAlign]
struct T128UpdateOrder = T128UpdateOrderTable(ExtensionBit, T128UpdateOrderChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128UpdateOrderChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128UpdateOrderChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128UpdateOrderChoice)
				{
					case 0: T128PrimaryOrder primaryOrder;
					case 1: T128SecondaryOrder secondaryOrder;
					case 2: NonStandardParameter nonStandardOrder;
				}
			}
	}
}
//#? ---------------------------------NOT CONVERTED---------------------------------

Table T128ApplicationPDUactionTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "notifyHostedApplications";
		case (ExtensionBit == 0) && (Choice== 1): "unhostApplication";
		case (ExtensionBit == 0) && (Choice== 2): "nonStandardAction";
	}
}

[DataTypeBitAlign]
struct T128ApplicationPDUaction = T128ApplicationPDUactionTable(ExtensionBit, T128ApplicationPDUactionChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128ApplicationPDUactionChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128ApplicationPDUactionChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (T128ApplicationPDUactionChoice)
				{
					case 0: T128NotifyHostedApplications notifyHostedApplications;
					case 1: T128UnhostApplication unhostApplication;
					case 2: NonStandardParameter nonStandardAction;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128ApplicationPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128ApplicationPDUaction action;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

//#? -------------------------------------------------------------------------------
//#? ---------------------------------NOT CONVERTED---------------------------------

Table T128ControlPDUactionTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "requestControl";
		case (ExtensionBit == 0) && (Choice== 1): "grantControl";
		case (ExtensionBit == 0) && (Choice== 2): "detach";
		case (ExtensionBit == 0) && (Choice== 3): "cooperate";
		case (ExtensionBit == 0) && (Choice== 4): "nonStandardAction";
	}
}

[DataTypeBitAlign]
struct T128ControlPDUaction = T128ControlPDUactionTable(ExtensionBit, T128ControlPDUactionChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128ControlPDUactionChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128ControlPDUactionChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 4) ChoiceValue;
				switch (T128ControlPDUactionChoice)
				{
					case 0: T128RequestControl requestControl;
					case 1: T128GrantControl grantControl;
					case 2: T128Detach detach;
					case 3: T128Cooperate cooperate;
					case 4: NonStandardParameter nonStandardAction;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128ControlPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128ControlPDUaction action;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

//#? -------------------------------------------------------------------------------

[DataTypeBitAlign]
struct T128FlowResponsePDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerConstrainedInteger(0, 127) flowIdentifier;
	T128Integer8 flowNumber;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128FlowStopPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerConstrainedInteger(0, 127) flowIdentifier;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128FlowTestPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	AsnPerConstrainedInteger(0, 127) flowIdentifier;
	T128Integer8 flowNumber;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}
//#? ---------------------------------NOT CONVERTED---------------------------------

[DataTypeBitAlign]
struct T128fontList
{
	[Post.PERArraySize = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T128FontAttribute fontList[PERArraySize];
}

[DataTypeBitAlign]
struct T128FontPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128fontList fontList;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

//#? -------------------------------------------------------------------------------
//#? ---------------------------------NOT CONVERTED---------------------------------

[DataTypeBitAlign]
struct T128eventList
{
	[Post.PERArraySize = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T128InputEvent eventList[PERArraySize];
}

[DataTypeBitAlign]
struct T128InputPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128eventList eventList;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

//#? -------------------------------------------------------------------------------
//#? ---------------------------------NOT CONVERTED---------------------------------

Table T128MediatedControlPDUactionTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "takeControlRequest";
		case (ExtensionBit == 0) && (Choice== 1): "passControlRequest";
		case (ExtensionBit == 0) && (Choice== 2): "detachRequest";
		case (ExtensionBit == 0) && (Choice== 3): "confirmTakeResponse";
		case (ExtensionBit == 0) && (Choice== 4): "denyTakeResponse";
		case (ExtensionBit == 0) && (Choice== 5): "confirmDetachResponse";
		case (ExtensionBit == 0) && (Choice== 6): "denyDetachResponse";
		case (ExtensionBit == 0) && (Choice== 7): "denyPassResponse";
		case (ExtensionBit == 0) && (Choice== 8): "remoteDetachRequest";
		case (ExtensionBit == 0) && (Choice== 9): "denyRemoteDetachResponse";
		case (ExtensionBit == 0) && (Choice== 10): "nonStandardAction";
	}
}

[DataTypeBitAlign]
struct T128MediatedControlPDUaction = T128MediatedControlPDUactionTable(ExtensionBit, T128MediatedControlPDUactionChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128MediatedControlPDUactionChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128MediatedControlPDUactionChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 10) ChoiceValue;
				switch (T128MediatedControlPDUactionChoice)
				{
					case 0: T128TakeControlRequest takeControlRequest;
					case 1: T128PassControlRequest passControlRequest;
					case 2: T128DetachRequest detachRequest;
					case 3: T128ConfirmTakeResponse confirmTakeResponse;
					case 4: T128DenyTakeResponse denyTakeResponse;
					case 5: T128ConfirmDetachResponse confirmDetachResponse;
					case 6: T128DenyDetachResponse denyDetachResponse;
					case 7: T128DenyPassResponse denyPassResponse;
					case 8: T128RemoteDetachRequest remoteDetachRequest;
					case 9: T128DenyRemoteDetachResponse denyRemoteDetachResponse;
					case 10: NonStandardParameter nonStandardAction;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128MediatedControlPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128MediatedControlPDUaction action;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

//#? -------------------------------------------------------------------------------
//#? ---------------------------------NOT CONVERTED---------------------------------

Table T128pointerDataTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "systemPointerType";
		case (ExtensionBit == 0) && (Choice== 1): "monoPointerAttribute";
		case (ExtensionBit == 0) && (Choice== 2): "colorPointerAttribute";
		case (ExtensionBit == 0) && (Choice== 3): "cachedPointerIndex";
		case (ExtensionBit == 0) && (Choice== 4): "pointerPosition";
		case (ExtensionBit == 0) && (Choice== 5): "nonStandardPointer";
	}
}

[DataTypeBitAlign]
struct T128pointerData = T128pointerDataTable(ExtensionBit, T128pointerDataChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128pointerDataChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128pointerDataChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 5) ChoiceValue;
				switch (T128pointerDataChoice)
				{
					case 0: T128SystemPointerType systemPointerType;
					case 1: T128MonoPointerAttribute monoPointerAttribute;
					case 2: T128ColorPointerAttribute colorPointerAttribute;
					case 3: T128Integer16 cachedPointerIndex;
					case 4: T128Point16 pointerPosition;
					case 5: NonStandardParameter nonStandardPointer;
				}
			}
	}
}
[DataTypeBitAlign]
struct T128PointerPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128pointerData pointerData;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}


//#? -------------------------------------------------------------------------------
//#? ---------------------------------NOT CONVERTED---------------------------------

Table T128RemoteSharePDUactionTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "requestRemoteShare";
		case (ExtensionBit == 0) && (Choice== 1): "confirmRemoteShare";
		case (ExtensionBit == 0) && (Choice== 2): "denyRemoteShare";
		case (ExtensionBit == 0) && (Choice== 3): "nonStandardAction";
	}
}

[DataTypeBitAlign]
struct T128RemoteSharePDUaction = T128RemoteSharePDUactionTable(ExtensionBit, T128RemoteSharePDUactionChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128RemoteSharePDUactionChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128RemoteSharePDUactionChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue;
				switch (T128RemoteSharePDUactionChoice)
				{
					case 0: T128RequestRemoteShare requestRemoteShare;
					case 1: T128ConfirmRemoteShare confirmRemoteShare;
					case 2: T128DenyRemoteShare denyRemoteShare;
					case 3: NonStandardParameter nonStandardAction;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128RemoteSharePDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128RemoteSharePDUaction action;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

//#? -------------------------------------------------------------------------------

[DataTypeBitAlign]
struct T128SynchronizePDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128UserID targetUser;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128UpdateBitmapPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128Coordinate16 destLeft;
	T128Coordinate16 destTop;
	T128Coordinate16 destRight;
	T128Coordinate16 destBottom;
	T128Integer16 width;
	T128Integer16 height;
	AsnPerInteger bitsPerPixel;
	AsnPerBoolean(0) compressedFlag;
	T128BitmapData bitmapData;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}
//#? ---------------------------------NOT CONVERTED---------------------------------

[DataTypeBitAlign]
struct T128orderList
{
	[Post.PERArraySize = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T128UpdateOrder orderList[PERArraySize];
}

[DataTypeBitAlign]
struct T128UpdateOrdersPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128orderList orderList;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

//#? -------------------------------------------------------------------------------

[DataTypeBitAlign]
struct T128UpdatePalettePDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128ColorPalette palette;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct T128UpdateSynchronizePDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}
//#? ---------------------------------NOT CONVERTED---------------------------------

Table T128WindowActivationPDUactionTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "localWindowActive";
		case (ExtensionBit == 0) && (Choice== 1): "hostedWindowActive";
		case (ExtensionBit == 0) && (Choice== 2): "hostedWindowInvisible";
		case (ExtensionBit == 0) && (Choice== 3): "pointerDeviceCapture";
		case (ExtensionBit == 0) && (Choice== 4): "activateWindow";
		case (ExtensionBit == 0) && (Choice== 5): "closeWindow";
		case (ExtensionBit == 0) && (Choice== 6): "restoreWindow";
		case (ExtensionBit == 0) && (Choice== 7): "windowManagerMenu";
		case (ExtensionBit == 0) && (Choice== 8): "activationHelpKey";
		case (ExtensionBit == 0) && (Choice== 9): "activationHelpIndexKey";
		case (ExtensionBit == 0) && (Choice== 10): "activationHelpExtendedKey";
		case (ExtensionBit == 0) && (Choice== 11): "nonStandardAction";
	}
}

[DataTypeBitAlign]
struct T128WindowActivationPDUaction = T128WindowActivationPDUactionTable(ExtensionBit, T128WindowActivationPDUactionChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128WindowActivationPDUactionChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128WindowActivationPDUactionChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 11) ChoiceValue;
				switch (T128WindowActivationPDUactionChoice)
				{
					case 0: T128LocalWindowActiveIndication localWindowActive;
					case 1: T128HostedWindowActiveIndication hostedWindowActive;
					case 2: T128HostedWindowInvisibleIndication hostedWindowInvisible;
					case 3: T128PointerDeviceCaptureIndication pointerDeviceCapture;
					case 4: T128ActivateWindowRequest activateWindow;
					case 5: T128CloseWindowRequest closeWindow;
					case 6: T128RestoreWindowRequest restoreWindow;
					case 7: T128WindowManagerMenuRequest windowManagerMenu;
					case 8: T128ActivationHelpKeyRequest activationHelpKey;
					case 9: T128ActivationHelpIndexKeyRequest activationHelpIndexKey;
					case 10: T128ActivationHelpExtendedKeyRequest activationHelpExtendedKey;
					case 11: NonStandardParameter nonStandardAction;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128WindowActivationPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128WindowActivationPDUaction action;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

//#? -------------------------------------------------------------------------------
//#? ---------------------------------NOT CONVERTED---------------------------------

[DataTypeBitAlign]
struct T128windowAttributeList
{
	[Post.PERArraySize = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T128WindowAttribute windowAttributeList[PERArraySize];
}

[DataTypeBitAlign]
struct T128windowTitleList
{
	[Post.PERArraySize = PERLengthValue]
	AsnPerLengthDeterminant Size;
	T128WindowTitle windowTitleList[PERArraySize];
}

[DataTypeBitAlign]
struct T128WindowListPDU	//Sequence
{
	UINT8 ExtensionBit:1;  
	
	UINT8 nonStandardParametersPresent:1;
	
	T128ShareDataHeader shareDataHeader;
	T128Integer16 listTime;
	T128Integer16 listID;
	T128windowAttributeList windowAttributeList;
	T128windowTitleList windowTitleList;
	switch
	{
		case nonStandardParametersPresent : NonStandardParameter nonStandardParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

//#? -------------------------------------------------------------------------------

[DataTypeBitAlign]
struct T128ASNonStandardPDU	//Sequence
{
	UINT8 ExtensionBit:1;
	
	
	NonStandardParameter nonStandardParameter;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

Table T128SharePDUTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "applicationPDU";
		case (ExtensionBit == 0) && (Choice== 1): "controlPDU";
		case (ExtensionBit == 0) && (Choice== 2): "flowResponsePDU";
		case (ExtensionBit == 0) && (Choice== 3): "flowStopPDU";
		case (ExtensionBit == 0) && (Choice== 4): "flowTestPDU";
		case (ExtensionBit == 0) && (Choice== 5): "fontPDU";
		case (ExtensionBit == 0) && (Choice== 6): "inputPDU";
		case (ExtensionBit == 0) && (Choice== 7): "mediatedControlPDU";
		case (ExtensionBit == 0) && (Choice== 8): "pointerPDU";
		case (ExtensionBit == 0) && (Choice== 9): "remoteSharePDU";
		case (ExtensionBit == 0) && (Choice== 10): "synchronizePDU";
		case (ExtensionBit == 0) && (Choice== 11): "updateBitmapPDU";
		case (ExtensionBit == 0) && (Choice== 12): "updateOrdersPDU";
		case (ExtensionBit == 0) && (Choice== 13): "updateSynchronizePDU";
		case (ExtensionBit == 0) && (Choice== 14): "updatePalettePDU";
		case (ExtensionBit == 0) && (Choice== 15): "windowActivationPDU";
		case (ExtensionBit == 0) && (Choice== 16): "windowListPDU";
		case (ExtensionBit == 0) && (Choice== 17): "asNonStandardPDU";
	}
}

[DataTypeBitAlign]
struct T128SharePDU = T128SharePDUTable(ExtensionBit, T128SharePDUChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.T128SharePDUChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]

				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.T128SharePDUChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 17) ChoiceValue;
				switch (T128SharePDUChoice)
				{
					case 0: T128ApplicationPDU applicationPDU;
					case 1: T128ControlPDU controlPDU;
					case 2: T128FlowResponsePDU flowResponsePDU;
					case 3: T128FlowStopPDU flowStopPDU;
					case 4: T128FlowTestPDU flowTestPDU;
					case 5: T128FontPDU fontPDU;
					case 6: T128InputPDU inputPDU;
					case 7: T128MediatedControlPDU mediatedControlPDU;
					case 8: T128PointerPDU pointerPDU;
					case 9: T128RemoteSharePDU remoteSharePDU;
					case 10: T128SynchronizePDU synchronizePDU;
					case 11: T128UpdateBitmapPDU updateBitmapPDU;
					case 12: T128UpdateOrdersPDU updateOrdersPDU;
					case 13: T128UpdateSynchronizePDU updateSynchronizePDU;
					case 14: T128UpdatePalettePDU updatePalettePDU;
					case 15: T128WindowActivationPDU windowActivationPDU;
					case 16: T128WindowListPDU windowListPDU;
					case 17: T128ASNonStandardPDU asNonStandardPDU;
				}
			}
	}
}

[DataTypeBitAlign]
struct T128BitString16	//Sequence
{
	AsnPerBitString(0,15) BitString16;   
}

[DataTypeBitAlign]
struct T128BitString32	//Sequence
{
	AsnPerBitString(0,31) BitString32;   
}

[DataTypeBitAlign]
struct T128Integer4	//Sequence
{
	AsnPerConstrainedInteger(0, 15) Integer4;   
}

[DataTypeBitAlign]
struct T128Integer12	//Sequence
{
	AsnPerConstrainedInteger(0, 4095) Integer12;   
}

[DataTypeBitAlign]
struct T128Integer16	//Sequence
{
	AsnPerConstrainedInteger(0, 65535) Integer16;   
}

[DataTypeBitAlign]
struct T128Integer32	//Sequence
{
	AsnPerConstrainedInteger(0, 4294967295) Integer32;   
}

[DataTypeBitAlign]
struct T128UserID	//Sequence
{
	T128Integer16 UserID;   
}

[DataTypeBitAlign]
struct T128ShareID	//Sequence
{
	T128Integer32 ShareID;   
}

[DataTypeBitAlign]
struct T128WindowID	//Sequence
{
	T128Integer32 WindowID;   
}

[DataTypeBitAlign]
struct T128T50String	//Sequence
{
	AsnPerOctetString(0, 255) T50String;   
}

[DataTypeBitAlign]
struct T128Coordinate8	//Sequence
{
	AsnPerConstrainedInteger(-128, 127) Coordinate8;   
}

[DataTypeBitAlign]
struct T128Coordinate16	//Sequence
{
	AsnPerConstrainedInteger(-32768, 32767) Coordinate16;   
}
//TODO
Table T128KeyboardFlagsTable( value )
{
	switch( value )
	{
		case 0:
		 	"right";
		case 12:
			"quiet";
		case 14:
			"down";
		case 15:
			"release";
	}
}
struct T128KeyboardFlags = T128KeyboardFlagsTable(KeyboardFlagsValue)
{
	[Post.KeyboardFlagsValue =  PERBitStringValue]
	AsnPerExtensibleBitString(-1,-1)  KeyboardFlags;
}
Table T128PointingDeviceFlagsTable( value )
{
	switch( value )
	{
		case 11:
			"move";
		case 12:
			"button1";
		case 13:
			"button2";
		case 14:
			"button3";
		case 15:
			"down";
	}
}                                 
struct T128PointingDeviceFlags = T128PointingDeviceFlagsTable(PointingDeviceFlagsValue)
{
 	[Post.PointingDeviceFlagsValue = PERBitStringValue]
 	AsnPerExtensibleBitString(-1,-1)  PointingDeviceFlags;
}  
Table T128TextAttributeFlagsTable( value )
{
	switch( value )
	{
		case 2:
			"italic";
		case 3:
			"underline";
		case 4:
			"strikeout";
		case 5:
			"useBaselineStart";
	}
}  
struct T128TextAttributeFlags = T128TextAttributeFlagsTable(TextAttributeFlagsValue)
{
	[Post.TextAttributeFlagsValue = PERBitStringValue]       
	AsnPerExtensibleBitString(-1,-1)  TextAttributeFlags;
}
Table T128ExtraTextFlagsTable( value )
{   
	switch( value )
	{
		case 1:
			"opaqueRectangle";
		case 2:
			"clipToRectangle";
		case 3:
			"deltaXPresent";
	}
}
struct T128ExtraTextFlags = T128ExtraTextFlagsTable(ExtraTextFlagsValue)
{
	[Post.ExtraTextFlagsValue = PERBitStringValue]
	AsnPerExtensibleBitString(-1,-1)  ExtraTextFlags;
}
Table T128FontAttributeFlagsTable( value )
{  
	switch( value )
	{
		case 0:
			"fixedPitch";
		case 1:
			"fixedSize";
	}
} 
struct T128FontAttributeFlags = T128FontAttributeFlagsTable(FontAttributeFlagsValue)
{
	[Post.FontAttributeFlagsValue = PERBitStringValue]
	AsnPerExtensibleBitString(-1,-1)  FontAttributeFlags;
}
Table T128WindowAttributeFlagsTable( value )   
{  
	switch( value )
	{
		case 0:
			"minimized";
		case 1:
			"taggable";
		case 2:
			"hosted";
		case 3:
			"shadow";
		case 4:
			"local";
		case 5:
			"topmost";
		case 16:
			"windowManagerMinimized";
		case 17:
			"windowManagerInvisible";
	}
}
struct T128WindowAttributeFlags = T128WindowAttributeFlagsTable(WindowAttributeFlagsValue)
{
	[Post.WindowAttributeFlagsValue = PERBitStringValue]
	AsnPerExtensibleBitString(-1,-1)  WindowAttributeFlags;
}
