//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  COM+ Tracker Service Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-COMT]: Component Object Model Plus (COM+) Tracker Service Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/20/2010
//#
//####

Protocol COMPTS = FormatString( "%s %s%s%s%s%s", 
	Property.COMPTSMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	( Property.MSRPCPfcFlags & 0x03 ) == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? ", *Un-Interpreted*": "",
	Property.COMPTSSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.COMPTSSummary : "" )
{
	[Property.COMPTSSummary = ""]
	switch( Property.MSRPCIfUuid )
	{
	case "{B60040E0-BCF3-11D1-861D-0080C729264D}":
		[Property.COMPTSMethodName = "IGetTrackingData:" + COMPTSIGetTrackingDataMethodNameTable( Property.MSRPCOpnum )]
		_struct IGetTrackingData
		{
			switch( Property.MSRPCOpnum )
			{
			case 4:
				_struct GetContainerData
				
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						[COMPTSSummary = "No Parameters"]
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
							}
						}
					case 0x02: //RESPONSE
						[COMPTSSummary = FormatString( "NContainers=0x%X", NContainers )]
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										UINT32								NContainers;
										COMPTSConfPtrContainerDataArray		AContainerData;
										HRESULT								ReturnValue;
									}
							}
						}
					}
				}
			case 5:
				_struct GetComponentDataByContainer
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						[COMPTSSummary = FormatString( "IdContainer=0x%X", IdContainer )]
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										UINT32								IdContainer;
									}
							}
						}
					case 0x02: //RESPONSE
						[COMPTSSummary = FormatString( "NComponents=0x%X", NComponents )]
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										UINT32								NComponents;
										COMPTSConfPtrContainerDataArray		AComponentData;
										HRESULT								ReturnValue;
									}
							}
						}
					}
				}
			case 6:
				_struct GetComponentDataByContainerAndCLSID
				{
					switch( Property.MSRPCPType )
					{
					case 0x00: //REQUEST
						[COMPTSSummary = FormatString( "IdContainer=0x%X", IdContainer )]
						_struct Request
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										UINT32						IdContainer;
										MSRPCGuid					Clsid;
									}
							}
						}
					case 0x02: //RESPONSE
						_struct Response
						{
							switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								default:
									struct
									{
										COMPTSPtrComponentData		ComponentData;
										HRESULT						ReturnValue;
									}
							}
						}
					}
				}
			case 3:
			case 7:
				struct NotUsedOnWire
				{
					switch (property.MSRPCPType)
					{
						case 0x00:// REQUEST
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						struct Request 
						{
							ReportParserWarning("COMPTS", "Invalid compts method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
						
						case 0x02:// RESPONSE
						[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						struct Response
						{
							ReportParserWarning("COMPTS", "Invalid compts method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
					}
				}
			default:
				ReportParserError(ParserErrorProtocolClassWindows, "COMPTS", "Unknown IGetTrackingData method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "{4E6CDCC9-FB25-4FD5-9CC5-C9F4B6559CEC}":
		[Property.COMPTSMethodName = "IComTrackingInfoEvents:" + COMPTSIComTrackingInfoEventsMethodNameTable( Property.MSRPCOpnum )]
		_struct IComTrackingInfoEvents
		{
			switch( Property.MSRPCOpnum )
			{
				case 3:
					_struct OnNewTrackingInfo
					{
						switch( Property.MSRPCPType )
						{
						case 0x00: //REQUEST
							_struct Request
							{
								switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										struct
										{
											DCOMMInterfacePointerPtr IUnknown;
										}
								}
							}
						case 0x02: //RESPONSE
							_struct Response
							{
								switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										struct
										{
											HRESULT								ReturnValue;
										}
								}
							}
						}
					}
				default:
					ReportParserError(ParserErrorProtocolClassWindows, "COMPTS", "Unknown IComTrackingInfoEvents method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	case "23C9DD26-2355-4FE2-84DE-F779A238ADBD":
		[Property.COMPTSMethodName = "IProcessDump:" + COMPTSIProcessDumpMethodNameTable( Property.MSRPCOpnum )]
		_struct IProcessDump
		{
			switch( Property.MSRPCOpnum )
			{
				case 3:
					_struct GetTypeInfoCount
					{
						switch(property.MSRPCptype)
						{
							case 0x00:
								_struct Request
								{
								}
							case 0x02:
								_struct Response
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										Default:
											struct
											{
												UINT32 pctInfo;
												[RAPRDecomResult = HResult.ToString]
												HRESULT HResult;
											}
									}
								}
						}
					}
				case 4:
					_struct GetTypeInfo
					{
						switch(property.MSRPCptype)
						{
							case 0x00:
								_struct Request
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										Default:
											struct
											{
												UINT32 iTInfo;
												OLEAUTLCID Lcid;
											}
									}
								}
							case 0x02:
								_struct Response
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										Default:
											struct
											{
												NdrPtr pTInfo;
												switch
												{
													case pTInfo.ReferentID:
														DCOMMInterfacePointer TInfo;
												}
												[RAPRDecomResult = HResult.ToString]
												HRESULT HResult;
											}
									}
								}
						}
					}
				case 5:
					_struct GetIDsOfNames
					{
						switch (Property.MSRPCptype)
						{
							case 0x00:
								_struct Request
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										Default:
											struct
											{
												OLEAUTRefIId riid;
												NdrConformant NamesCount;
												OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
												Align4 pad;
												UINT32 cNames;
												OLEAUTLCID lcid;
											}
									}
								}
							case 0x02:
								_struct Response
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										Default:
											struct
											{
												NdrConformant prgDispId;
												OLEAUTDISPID rgDispId[prgDispId.MaxCount];
												[RAPRDecomResult = HResult.ToString]
												HRESULT HResult;
											}
									}
								}
						}
					}
				case 6:
					_struct Invoke
				{
					switch (Property.MSRPCptype)
					{
						case 0x00:
						_struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTDISPID dispIdMember;
										OLEAUTRefIId riid;
										OLEAUTLCID lcid;
										switch( Property.MSRPCByteOrder )
										{
											case LittleEndian:
												_struct LittleEndian
												{
													UINT32 dwFlags
													{
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
													}
												}
											default:
												_struct BigEndian
												{
													UINT32 dwFlags
													{
														UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
														UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
														UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
														UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
														UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
														[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
														UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
														[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
														UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
														[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
														UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
														[Local.InvocationType = this ? "Method" : Local.InvocationType]
														UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
													}
												}
										}
										[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
										OLEAUTDISPPARAMS DispParams;
										UINT32 cVarRef;
										NdrConformant VarRefIdxConformant;
										UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
										OLEAUTSafeArrVariant VarRef;
									}
							}
						}
						case 0x02:
						_struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
								Default:
									struct
									{
										OLEAUTVariant VarResult;
										NdrAlign pad;
										OLEAUTExcepInfo ExcepInfo;
										UINT32 Argerr;
										OLEAUTSafeArrVariant rgVarRef;
										Align4 padding;
										[RAPRDecomResult = HResult.ToString]
										HRESULT HResult;
									}
							}
						}
					}
				}
				case 7:
					_struct IsSupported
					{
						switch( Property.MSRPCPType )
						{
						case 0x00: //REQUEST
							_struct Request
							{
								switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										struct{};
								}
							}
						case 0x02: //RESPONSE
							_struct Response
							{
								switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										struct
										{
											HRESULT								ReturnValue;
										}
								}
							}
						}
					}
				case 8:
					_struct DumpProcess
					{
						switch( Property.MSRPCPType )
						{
						case 0x00: //REQUEST
							_struct Request
							{
								switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										struct
										{
											BSTR ContainerID;
											BSTR Directory;
											UINT32 MaxFiles;
										}
								}
							}
						case 0x02: //RESPONSE
							_struct Response
							{
								switch
								{
									Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
									Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
									default:
										struct
										{
											BSTR DumpFile;
											HRESULT								ReturnValue;
										}
								}
							}
						}
					}
				default:
					ReportParserError(ParserErrorProtocolClassWindows, "COMPTS", "Unknown IProcessDump method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
		}
	}
}

table COMPTSIGetTrackingDataMethodNameTable( opnum )
{
	switch( opnum )
	{
	case 3: "Opnum3NotUsedOnWire";
	case 4: "GetContainerData";
	case 5: "GetComponentDataByContainer";
	case 6: "GetComponentDataByContainerAndCLSID";
	case 7: "Opnum7NotUsedOnWire";
	default: "unknown";
	}
}

table COMPTSIComTrackingInfoEventsMethodNameTable( opnum )
{
	switch( opnum )
	{
	case 3: "OnNewTrackingInfo";
	default: "unknown";
	}
}

table COMPTSIProcessDumpMethodNameTable( opnum )
{
	switch( opnum )
	{
	case 7: "IsSupported";
	case 8: "DumpProcess";
	default: "unknown";
	}
}

table COMPTSTrackingInfoPropertyValueVtTable( value )
{
	switch( value )
	{
	case 0x0008: "LengthPrefixedName";
	case 0x000D: "TrackingInfoCollection OBJREF_CUSTOM";
	case 0x0013: "Unsigned long";
	default: "unknown";
	}
}

table COMPTSTrackingInfoCollectionCollectionTypeTable( Value )
{
	switch( Value )
	{
	case 0x00000000: "TRKCOLL_PROCESSES - A collection of processes.";
	case 0x00000001: "TRKCOLL_CONTAINERS - A collection of instance containers.";
	case 0x00000002: "TRKCOLL_COMPONENTS - A collection of components.";
	default: "unknown";
	}
}

//----------------------------------------
struct COMPTSConfPtrContainerDataArray
{
	NdrPtr Pointer;
	switch
	{
		case Pointer.referentID !=0:
			struct
			{
				NdrConformant				Size;
				switch
				{
				case Size.MaxCount > 0:
					COMPTSContainerData		Data[Size.MaxCount];
				}
			}
	}
}

//
//	[MS-COMT] ContainerData
//	Alignment:4
//
struct COMPTSContainerData
{
	UINT32							LegacyId;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString(40)				ApplicationIdentifier;
	UINT32							ProcessId;
	COMPTSContainerStatistics		Statistics;
}

struct COMPTSContainerStatistics
{
	UINT32		Calls = FormatString( "%u calls performed by the component instances in an instance container", this );
	UINT32		ComponentInstances = FormatString( "%u component instances in an instance container", this );
	UINT32		Components = FormatString( "%u distinct components currently instantiated in an instance container", this );
	UINT32		CallsPerSecond = FormatString( "%u %s", this, this? "average number of calls per second received by a conglomeration instance" : "- Field Not Used" );
}
//----------------------------------------
struct COMPTSPtrComponentData
{
	NDRPTR						Pointer;
	switch
	{
	case Pointer.ReferentId > 0:
		COMPTSComponentData		ComponentData;
	}
}

//
//	[MS-COMT] ComponentData
//	Alignment:4
//

struct COMPTSComponentData
{
	MSRPCGuid		Clsid;
	UINT32			TotalReferences = FormatString( "%u %s", this, (this != 0xFFFFFFFF) ? "total references to all component instances" : "- Count Not Tracked" );
	UINT32			BoundReferences = FormatString( "%u %s", this, (this != 0xFFFFFFFF) ? "total references to all active component instances" : "- Count Not Tracked" );
	UINT32			PooledInstances = FormatString( "%u %s", this, (this != 0xFFFFFFFF) ? "total pooled component instances with instance pooling enabled" : "- Count Not Tracked" );
	UINT32			InstancesInCall = FormatString( "%u %s", this, (this != 0xFFFFFFFF) ? "total component instances currently performing a call" : "- Count Not Tracked" );
	UINT32			ResponseTime = FormatString( "%u %s", this, (this != 0xFFFFFFFF) ? "average milliseconds to complete calls to component instances" : "- Count Not Tracked" );
	UINT32			CallsCompleted = FormatString( "%u %s", this, (this != 0xFFFFFFFF) ? "total calls to component instances that successfully completed in a certain time period" : "- Count Not Tracked" );
	UINT32			CallsFailed = FormatString( "%u %s", this, (this != 0xFFFFFFFF) ? "total calls to component instances that failed in a certain time period" : "- Count Not Tracked" );
}
//----------------------------------------

//
//	[MS-COMT] TrackingInfoCollection OBJREF_CUSTOM
//	Alignment:8
//
[ RegisterBefore(DCOMObjRefCustom.UnknownCustomMarshaledData, COMPTSParamTrackingInfoCollection, "{ECABAFCd-7f19-11D2-978E-0000F8757E2A}")]
struct COMPTSParamTrackingInfoCollection
{
	UINT16														MaxVersion;
	UINT16														MinVersion = DCOMComVersionMinorVersionTable( this );
	UINT32														CollectionType = COMPTSTrackingInfoCollectionCollectionTypeTable( this );
	UINT32														ObjectCount = FormatString( "%u elements in the ChildObjects field", this );
	UINT32														PropertyNameCount = FormatString( "%u elements in the PropertyNames field", this );
	switch
	{
	case PropertyNameCount > 0:
		COMPTSTrkInfCollPropertyNamesArray( PropertyNameCount )		PropertyNames;
	}
	switch
	{
	case ObjectCount > 0:
		COMPTSTrackingInfoObjectArray( ObjectCount )				ChildObjects;
	}
}

struct COMPTSTrackingInfoObjectArray( ElementCount )
{
	DCOMObjRef		ChildObject[ ElementCount ];
}

//
//	[MS-COMT] TrackingInfoObject OBJREF_CUSTOM
//	Alignment:8
//
[ RegisterBefore(DCOMObjRefCustom.UnknownCustomMarshaledData, COMPTSTrackingInfoObject, "{ECABAFCE-7f19-11D2-978E-0000F8757E2A}")]
struct COMPTSTrackingInfoObject
{
	UINT16							MaxVersion;
	UINT16							MinVersion;
	UINT32							PropCount;
	COMPTSTrackingInfoProperty		Properties[ PropCount ];
}

//
//	[MS-COMT] TrackingInfoProperty
//	Alignment:4
//

struct COMPTSTrackingInfoProperty = PropertyName.Name
{
	UINT16								MaxVersion;
	UINT16								MinVersion;
	COMPTSLengthPrefixedName			PropertyName;
	COMPTSTrackingInfoPropertyValue		PropertyValue;
}

//
//	[MS-COMT] TrackingInfoPropertyValue
//	Alignment:4
//
struct COMPTSTrackingInfoPropertyValue
{
	UINT16			Vt = COMPTSTrackingInfoPropertyValueVtTable( this );
	switch( Vt )
	{
		case 0x0008 : COMPTSLengthPrefixedName				Name;
		case 0x000D : DCOMObjRef							Collection;
		case 0x0013 : UINT32								Value;
	}
}

struct COMPTSTrkInfCollPropertyNamesArray( ElementCount )
{
	COMPTSLengthPrefixedName			PropertyNames[ ElementCount ];
}

//
//	[MS-COMT] LengthPrefixedName
//	Alignment:4
//

struct COMPTSLengthPrefixedName = Name
{
	UINT32						Length;
	[DataFieldByteOrder = LittleEndian]
	UnicodeString( Length )		Name;
}
