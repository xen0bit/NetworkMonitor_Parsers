//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Layer 2 Tunneling Protocol
//#
//#  Details:                
//#
//#  Public References:      RFC 661, 1700, 1994, 3301, 3145, 3308, 3437, 3573, 3817, 3931, 4045
//#                          MCPP Documentation "Layer 2 Tunneling Protocol with IPsec Extensions"
//#                          http://www.iana.org/assignments/l2tp-parameters
//#                          draft-ietf-l2tpext-failover-04.txt, draft-ietf-l2tpext-pwe3-fr-07.txt
//#                          draft-ietf-l2tpext-pwe3-atm-04.txt, draft-ietf-l2tpext-l2vpn-06.txt
//#                          ATM Forum Addressing: Reference Guide af-ra-0106.000 Final Ballot January, 1999
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/19/2010
//#
//####

Protocol L2TP = FormatString("%s, %sTunnel ID = %d, Session ID = %d",
							 Flags.T ? "Control message" : "Data message",
							 L2TPMessageType,
							 TunnelID,
							 SessionID
							 )
{
	UINT8 Flags = FormatString("%s%s..%s.%s%s",
							  (this & 0x80) ? "T" : ".",
							  (this & 0x40) ? "L" : ".",
							  (this & 0x08) ? "S" : ".",
							  (this & 0x02) ? "O" : ".",
							  (this & 0x01) ? "P" : "."
							  )
	{
		UINT8 T:1         = FormatString("        (%s) %s",this.ToBitString,this ? " Control message"
								 : " Data message");
		UINT8 L:1         = FormatString("        (%s) %s",this.ToBitString,this ? " Length present"
								 : " Length absent");
		UINT8 Reserved2:2 = FormatString("(%s)",this.ToBitString);
		UINT8 S:1         = FormatString("        (%s) %s",this.ToBitString,this ? " Sequence present"
								 : " Sequence absent");
		UINT8 Reserved1:1 = FormatString("(%s)",this.ToBitString);
		UINT8 O:1         = FormatString("        (%s) %s",this.ToBitString,this ? " Offset present"
								 : " Offset absent");
		UINT8 P:1         = FormatString("        (%s) %s",this.ToBitString,this ? " High priority"
								 : " Low priority");
	};

	UINT8 Version
	{
		UINT8 Reserved:4 = FormatString("(%s)",this.ToBitString);
		UINT8 Version:4 = FormatString(" (%s) %d",this.ToBitString,this);
	};

	switch(Flags.L)
	{
		case 1: UINT16 Length;
	};

	UINT16 TunnelID;
	UINT16 SessionID;

	switch(Flags.S)
	{
		case 1: UINT16 SequenceNumber;
	};
	switch(Flags.S)
	{
		case 1: UINT16 SequenceNumberExpected;
	};

	switch(Flags.O)
	{
		case 1: UINT16 OffsetSize;
	};
	switch(Flags.O)
	{
		case 1: Blob(OffsetSize) OffsetPad;
	};

	switch(Flags.T)
	{
		case 1: 
			// Control message
			While ControlAVPs[currentProtocolOffset < Length]
			{
				L2TPControlAVP AVP;
			};
		case 0: 
			// Data message
			switch
			{
				case frameOffset < frameLength: PPP Ppp;
			};
	};
}
Table L2tpControlAVPTypeTable(type)
{
	switch(type)
	{
		case  0:  "Message Type AVP";
		case  1:  "Result Code AVP";
		case  2:  "Protocol Version AVP";
		case  3:  "Framing Capabilities AVP";
		case  4:  "Bearer Capabilities AVP";
		case  5:  "Tie Breaker AVP";
		case  6:  "Firmware Revision AVP";
		case  7:  "Host Name AVP";
		case  8:  "Vendor Name AVP";
		case  9:  "Assigned Tunnel ID AVP";
		case 10:  "Receive Window Size AVP";
		case 11:  "Challenge AVP";
		case 12:  "Q.931 Cause Code AVP";
		case 13:  "Response AVP";
		case 14:  "Assigned Session ID AVP";
		case 15:  "Call Serial Number AVP";
		case 16:  "Minimum BPS AVP";
		case 17:  "Maximum BPS AVP";
		case 18:  "Bearer Type AVP";
		case 19:  "Framing Type AVP";
		case 20:  "Reserved";
		case 21:  "Called Number AVP";
		case 22:  "Calling Number AVP";
		case 23:  "Sub-Address AVP";
		case 24:  "(Tx) Connect Speed BPS AVP";
		case 25:  "Physical Channel ID AVP";
		case 26:  "Initial Received LCP CONFREQ AVP";
		case 27:  "Last Sent LCP CONFREQ AVP";
		case 28:  "Last Received LCP CONFREQ AVP";
		case 29:  "Proxy Authen Type AVP";
		case 30:  "Proxy Authen Name AVP";
		case 31:  "Proxy Authen Challenge AVP";
		case 32:  "Proxy Authen ID AVP";
		case 33:  "Proxy Authen Response AVP";
		case 34:  "Call Errors AVP";
		case 35:  "ACCM AVP";
		case 36:  "Random Vector AVP";
		case 37:  "Private Group ID AVP";
		case 38:  "Rx Connect Speed AVP";
		case 39:  "Sequencing Required AVP";
		case 40:  "Rx Minimum BPS";
		case 41:  "Rx Maximum BPS";
		case 42:  "Service Category";
		case 43:  "Service Name";
		case 44:  "Calling Sub-Address";
		case 45:  "VPI/VCI Identifier";
		case 46:  "PPP Disconnect Cause Code";
		case 47:  "CCDS AVP";
		case 48:  "SDS AVP";
		case 49:  "LCP Want Options";
		case 50:  "LCP Allow Options";
		case 51:  "LNS Last Sent LCP Confreq";
		case 52:  "LNS Last Received LCP Confreq";
		case 53:  "Modem On-Hold Capable AVP";
		case 54:  "Modem On-Hold Status AVP";
		case 55:  "PPPoE Relay AVP";
		case 56:  "PPPoE Relay Response Capability AVP";
		case 57:  "PPPoE Relay Forward Capability AVP";
		case 58:  "Extended Vendor ID AVP";
		case 59:  "Message Digest";
		case 60:  "Router ID";
		case 61:  "Assigned Control Connection ID";
		case 62:  "Pseudowire Capabilities List";
		case 63:  "Local Session ID";
		case 64:  "Remote Session ID";
		case 65:  "Assigned Cookie";
		case 66:  "Remote End ID";
		case 67:  "Application Code";
		case 68:  "Pseudowire Type";
		case 69:  "L2-Specific Sublayer";
		case 70:  "Data Sequencing";
		case 71:  "Circuit Status";
		case 72:  "Preferred Language";
		case 73:  "Control Message Authentication Nonce";
		case 74:  "Tx Connect Speed";
		case 75:  "Rx Connect Speed";
		case 76:  "Failover Capability";
		case 77:  "Tunnel Recovery";
		case 78:  "Suggested Control Sequence";
		case 79:  "Failover Session State";
		case 80:  "Multicast Capability";
		case 81:  "New Outgoing Sessions";
		case 82:  "New Outgoing Sessions Acknowledgement";
		case 83:  "Withdraw Outgoing Sessions";
		case 84:  "Multicast Packets Priority";
		case 85:  "Frame-Relay Header Length";
		case 86:  "ATM Maximum Concatenated Cells AVP";
		case 87:  "OAM Emulation Required AVP";
		case 88:  "ATM Alarm Status AVP";
		case 89:  "Attachment Group Identifier";
		case 90:  "Local End Identifier";
		case 91:  "Interface Maximum Transmission Unit";
		default:  "Unhandled AVP";
	}
}

Table L2TPMessageTypeTable( type )
{
	switch( type )
	{
		case  0: "Reserved";
		case  1: "(SCCRQ) Start-Control-Connection-Request";
		case  2: "(SCCRP) Start-Control-Connection-Reply";
		case  3: "(SCCCN) Start-Control-Connection-Connected";
		case  4: "(StopCCN) Stop-Control-Connection-Notification";
		case  5: "Reserved";
		case  6: "(HELLO) hello";
		case  7: "(OCRQ) Outgoing-Call-Request";
		case  8: "(OCRP) Outgoing-Call-Reply";
		case  9: "(OCCN) Outgoing-Call-Connected";
		case 10: "(ICRQ) Incoming-Call-Request";
		case 11: "(ICRP) Incoming-Call-Reply";
		case 12: "(ICCN) Incoming-Call-Connected";
		case 13: "Reserved";
		case 14: "(CDN) Call-Disconnect-Notify";
		case 15: "(WEN) WAN-Error-Notify";
		case 16: "(SLI) Set-Link-Info";
		case 17: "(MDMST) Modem Status";
		case 18: "(SRRQ) Service Relay Request Message"; //[RFC3817]
		case 19: "(SRRP) Service Relay Reply Message"; //[RFC3817]
		case 20: "(ACK) Explicit Acknowledgement"; //[RFC3931]
		case 21: "(FSQ) Failover Session Query Message"; //[draft-ietf-l2tpext-failover-04.txt]
		case 22: "(FSR) Failover Session Response Message"; //[draft-ietf-l2tpext-failover-04.txt]
		case 23: "(MSRQ) Multicast-Session-Request"; //[RFC4045]
		case 24: "(MSRP) Multicast-Session-Response"; //[RFC4045]
		case 25: "(MSE) Multicast-Session-Establishment"; //[RFC4045]
		case 26: "(MSI) Multicast-Session-Information"; //[RFC4045]
		case 27: "(MSEN) Multicast-Session-End-Notify"; //[RFC4045]
		default: "Unhandled L2TP Message Type";
	}
}

Table L2TPStopCCNResultCodeTable(code)
{
	switch(code)
	{
		case 0: "Reserved";
		case 1: "General request to clear control connection";
		case 2: "General error";//--Error Code indicates the problem
		case 3: "Control channel already exists";
		case 4: "Requester is not authorized to establish a control channel";
		case 5: "The protocol version of the requester is not supported, Error Code indicates highest version supported";
		case 6: "Requester is being shut down";
		case 7: "Finite State Machine error";
		default: FormatString("%d",code);
	}
}
Table L2TPCDNResultCodeTable(code)
{
	switch(code)
	{
		case 0: "Reserved";
		case 1: "Call disconnected due to loss of carrier";
		case 2: "Call disconnected for the reason indicated in error code";
		case 3: "Call disconnected for administrative reasons";
		case 4: "Call failed due to lack of appropriate facilities being available (temporary condition)";
		case 5: "Call failed due to lack of appropriate facilities being available (permanent condition)";
		case 6: "Invalid destination";
		case 7: "Call failed due to no carrier detected";
		case 8: "Call failed due to detection of a busy signal";
		case 9: "Call failed due to lack of a dial tone";
		case 10: "Call was not established within time allotted by LAC";
		case 11: "Call was connected but no appropriate framing was detected";
		default: FormatString("%d",code);
	}
}

Table L2TPControlAVPResultCodeTable( messagetype ,code )
{
	switch( messagetype )
	{
		case 4: L2TPStopCCNResultCodeTable(code);
		case 14: L2TPCDNResultCodeTable(code);
		default: FormatString("%d",code);
	}
}

Table L2TPControlAVPErrorCodeTable( code )
{
	switch( code )
	{
		case 0: "No general error";
		case 1: "No control connection exists yet for this LAC-LNS pair";
		case 2: "Length is wrong";
		case 3: "One of the field values was out of range or reserved field was non-zero";
		case 4: "Insufficient resources to handle this operation now";
		case 5: "The Session ID is invalid in this context";
		case 6: "A generic vendor-specific error occurred in the LAC";
		case 7: "Try another.";
		case 8: "Session or tunnel was shutdown due to receipt of an unknown AVP with the M-bit set.";
		default: FormatString("%d",code);
	}
}

Table L2TPControlAVPAuthenTypeTable( type )
{
	switch( type )
	{
		case 0: "Reserved";
		case 1: "Textual username/password exchange";
		case 2: "PPP CHAP";
		case 3: "PPP PAP";
		case 4: "No Authentication";
		case 5: "Microsoft CHAP Version 1 (MSCHAPv1)";
		default: FormatString("%d",type);
	}
}

Table L2TPControlAVPErrorDirectionTable( code )
{
	switch (code)
	{
		case 0: "Global error";
		case 1: "At peer";
		case 2: "At local";
		default: "Reserved";
	}
}


Table L2TPControlAVPDisconnectCodeErrorTypeTable( code )
{
	switch
	{
		case 0 <= code && code <= 4: "Global Error:";
		case 5 <= code && code <= 12: "LCP Error:";
		case 13 <= code && code <= 16: "Authentication Error:";
		case 17 <= code && code <= 20: "Network Control Protocol (NCP) Error:";
		default: "Unhandled Error:";
	}
}

Table L2TPControlAVPDisconnectCodeTable( code )
{
	switch (code)
	{
		case 0: "No information available";
		case 1: "Administrative disconnect";
		case 2: "Link Control Protocol (LCP) renegotiation at LNS disabled; LNS expects proxy LCP information, LAC did not send it";
		case 3: "Normal Disconnection, LCP Terminate-Request sent";
		case 4: "Compulsory encryption required by a PPP peer was refused by the other";

		case 5: "FSM (Finite State Machine) Timeout error";
		case 6: "No recognizable LCP packets were received";
		case 7: "LCP failure: Magic Number error; link possibly looped back";
		case 8: "LCP link failure: Echo Request timeout";
		case 9: "Peer has unexpected Endpoint-Discriminator for existing Multilink PPP (MP) bundle";
		case 10: "Peer has unexpected MRRU for existing MP bundle";
		case 11: "Peer has unexpected Short-Sequence-Number option for existing MP bundle";
		case 12: "Compulsory call-back required by a PPP peer was refused by the other";

		case 13: "FSM Timeout error";
		case 14: "Peer has unexpected authenticated name for existing MP bundle";
		case 15: "PPP authentication failure: Authentication protocol unacceptable";
		case 16: "PPP authentication failure: Authentication failed (bad name, password, or secret)";

		case 17: "FSM Timeout error";
		case 18: "No NCPs available (all disabled or rejected); no NCPs went to Opened state";
		case 19: "NCP failure: failed to converge on acceptable addresses";
		case 20: "NCP failure: user not permitted to use any addresses";

		default: FormatString("%d",code);
	}
}

Table L2TPControlAVPL2SpecificSublayerTypeTable( type )
{
	switch (type)
	{
		case 0: "There is no L2-Specific Sublayer present";
		case 1: "The Default L2-Specific Sublayer is used";
		default: "Unhandled L2-Specific Sublayer Type";
	}
}

Table L2TPControlAVPDataSequencingLevelTable( level )
{
	switch (level)
	{
		case 0: "No incoming data packets require sequencing";
		case 1: "Only non-IP data packets require sequencing";
		case 2: "All incoming data packets require sequencing";
		default: "Unhandled Data Sequencing Level";
	}
}

Table L2TPControlAVPPriorityValueTable( priority )
{
	switch (priority)
	{
		case 0: "Best effort (default)";
		case 1: "Unicast traffic priority";
		case 2: "Multicast traffic priority";
		default: FormatString("%d",priority);
	}
}

Table L2TPControlAVPCircuitStatusReasonTable( code )
{
	switch (code)
	{
		case 0: "Reserved";
		case 1: "No alarm or alarm cleared (default for Active Status)";
		case 2: "Unspecified or unknown Alarm Received (default for Inactive Status)";
		case 3: "ATM Circuit received F1 Alarm on ingress LCCE";
		case 4: "ATM Circuit received F2 Alarm on ingress LCCE";
		case 5: "ATM Circuit received F3 Alarm on ingress LCCE";
		case 6: "ATM Circuit received F4 Alarm on ingress LCCE";
		case 7: "ATM Circuit received F5 Alarm on ingress LCCE";
		case 8: "ATM Circuit down due to ATM Port shutdown on Peer LCCE";
		case 9: "ATM Circuit down due to loop-back timeout on ingress LCCE";
		default: FormatString("%d",code);

	}
}

Table L2TPControlAVPATMAlarmTable( code )
{
	switch (code)
	{
		case 0: "Reserved";
		case 1: "No Alarm type specified (default)";
		case 2: "Alarm Indication Signal (AIS)";
		case 3: "Remote Defect Indicator (RDI)";
		case 4: "Loss of Signal (LOS)";
		case 5: "Loss of pointer (LOP)";
		case 6: "Loss of framer (LOF)";
		case 7: "Loopback cells (LB)";
		case 8: "Continuity Check (CC)";
		default: FormatString("%d",code);
	}
}

Table L2TPControlAVPSubAddressTable( code )
{
	switch (code)
	{
		case 0x39: "DCC ATM Format";
		case 0xBD: "DCC ATM Format";
		case 0x47: "ICD ATM Format";
		case 0xC5: "ICD ATM Format";
		case 0x45: "E.164 ATM Format";
		case 0xC3: "E.164 ATM Format";
		case 0x49: "Local AFI Format";
		case 0xC7: "Local AFI Format";
		default: FormatString("%d",code);
	}
}

Table VendorIDTable(id)
{
	switch(id)
	{
		case 0: "IETF adopted attribute values";
		default: EnterpriseNumberTable(id);
	}
}

Table ModemOnHoldTimeoutTable(value)
{
	switch(value)
	{
		case  0:  "Reserved";
		case  1:  "10 seconds";
		case  2:  "20 seconds";
		case  3:  "30 seconds";
		case  4:  "40 seconds";
		case  5:  "1 minute";
		case  6:  "2 minutes";
		case  7:  "3 minutes";
		case  8:  "4 minutes";
		case  9:  "6 minutes";
		case 10:  "8 minutes";
		case 11:  "12 minutes";
		case 12:  "16 minutes";
		case 13:  "No limit";
		case 14:  "Reserved";
		case 15:  "Reserved";
		default:  "Unhandled value";
	}
}

//http://www.iana.org/assignments/pwe3-parameters
Table PWTypeTable(type)
{
	switch(type)
	{
		case 0x0001:  "Frame Relay DLCI ( Martini Mode )";
		case 0x0002:  "ATM AAL5 SDU VCC transport [ATM]";
		case 0x0003:  "ATM transparent cell transport";
		case 0x0004:  "Ethernet Tagged Mode";
		case 0x0005:  "Ethernet";
		case 0x0006:  "HDLC";
		case 0x0007:  "PPP";
		case 0x0008:  "SONET/SDH Circuit Emulation Service Over MPLS";
		case 0x0009:  "ATM n-to-one VCC cell transport";
		case 0x000A:  "ATM n-to-one VPC cell transport";
		case 0x000B:  "IP Layer2 Transport";
		case 0x000C:  "ATM one-to-one VCC Cell Mode";
		case 0x000D:  "ATM one-to-one VPC Cell Mode";
		case 0x000E:  "ATM AAL5 PDU VCC transport";
		case 0x000F:  "Frame-Relay Port mode";
		case 0x0010:  "SONET/SDH Circuit Emulation over Packet";
		case 0x0011:  "Structure-agnostic E1 over Packet";
		case 0x0012:  "Structure-agnostic T1 (DS1) over Packet";
		case 0x0013:  "Structure-agnostic E3 over Packet";
		case 0x0014:  "Structure-agnostic T3 (DS3) over Packet";
		case 0x0015:  "CESoPSN basic mode";
		case 0x0016:  "TDMoIP AAL1 Mode";
		case 0x0017:  "CESoPSN TDM with CAS";
		case 0x0018:  "TDMoIP AAL2 Mode";
		case 0x0019:  "Frame Relay DLCI";
		case 0x001E:  "ATM VP Virtual Trunk";
		default: "Unhandled PW Type";
	}
}

Table DigestTypeTable(type)
{
	switch(type)
	{
		case 0: "HMAC-MD5";
		case 1: "HMAC-SHA-1";
		default: "Unhandled Digest calculation algorithm";
	}
}

Table FrameRelayHeaderLengthTable(Length)
{
	switch(Length)
	{
		case 2: "Two-octet Frame Relay Header";
		case 4: "Four-octet Frame Relay Header";
		default: "Unhandled Frame Relay Header Length";
	}
}

//
// RFC 2661 
// 4.1 AVP Format
// 4.3 Hiding of AVP Attribute Values
//[MS-L2TPIE] 2.2.1   L2TP AV pairs
//
struct L2TPControlAVP = L2TPAVPSummary
{
	UINT16 Flags = FormatString("Length = %d, %s, %s",
				 Length,
				 H ? "Hidden" : "NOT Hidden",
				 M ? "Mandatory" : "NOT Mandatory"
				 )
	{
		UINT16 M:1 = FormatString("       (%s) %s",this.ToBitString,this ? " Mandatory"
						  : " NOT Mandatory");
		UINT16 H:1 = FormatString("       (%s) %s",this.ToBitString,this ? " Hidden"
						  : " NOT Hidden");
		UINT16 Reserved:4 = FormatString("(%s)",this.ToBitString);
		[L2TPAvpLength]
		UINT16 Length:10 = FormatString("  (%s)  %d",this.ToBitString,this);
	};
	UINT16 VendorID = FormatString("%s, %d (0x%X)", VendorIDTable(this), this, this);
	[L2TPAVPSummary = L2tpControlAVPTypeTable(AttributeType)]
	UINT16 AttributeType = FormatString("%s, %d(0x%X)", L2tpControlAVPTypeTable(this), this, this);
	[L2TPAvpValueLength = L2TPAvpLength - 6, L2TPAvpPadLength=0]
	switch
	{
		Case AttributeType == 0x01:
			struct
			{
				GUID(true) AttributeValue;
			}
		Default:
			struct
			{
				switch(Flags.H)
				{
					case 1:
					_struct
					{
						[L2TPAvpPadLength = L2TPAvpLength - 8 - AVPValueLength]
						UINT16 AVPValueLength;
						BLOB(AVPValueLength) AVPValue;
						switch
						{
							case L2TPAvpPadLength > 0: Blob(L2TPAvpPadLength) Pad;
						}
					}
					default:
					_struct
					{
						[L2TPAvpEndOffset = FrameOffset + L2TPAvpValueLength]
						switch(AttributeType)
						{
							case 0:
								[L2TPAVPSummary = L2TPAVPSummary + ", MessageType = " + L2TPMessageTypeTable(MessageType),
								 L2TPMessageType = L2TPMessageTypeTable(this) + ", ",
								 L2TPAVPMessageType]
								UINT16 MessageType = FormatString("%s, %d(0x%X)", L2TPMessageTypeTable(this), this, this);
							case 1:
								_struct ResultCodeAVP
								{
									[L2TPAVPSummary = L2TPAVPSummary + ", " + ResultCode.ToString]
									UINT16 ResultCode = L2TPControlAVPResultCodeTable( Property.L2TPAVPMessageType ,this );
									switch
									{
										case L2TPAvpValueLength >= 4 && L2TPAVPMessageType == 4 && ResultCode == 5:
											UINT16 SupportedVersion;
										case L2TPAvpValueLength >= 4: 
											UINT16 ErrorCode = L2TPControlAVPErrorCodeTable(this);
									}
									switch
									{
										case L2TPAvpValueLength > 4: 
											AsciiString(L2TPAvpValueLength - 4) ErrorMessage;
									}
								};
							case 2: 
								_struct ProtocolVersionAVP
								{
									UINT8 Version;
									[L2TPAVPSummary = L2TPAVPSummary + FormatString(", Version = %d.%d", version, Reversion)]
									UINT8 Reversion;
								};
							case 3: 
								UINT32 FramingCapabilities
								{
									UINT32 Reserved:30 = FormatString("(%s)",this.ToBitString);
									UINT32 A:1 = FormatString("       (%s) %s",this.ToBitString,this ? " asynchronous framing is supported"
													  : " asynchronous framing is not supported");
									UINT32 S:1 = FormatString("       (%s) %s",this.ToBitString,this ? " synchronous framing is supported"
													  : " synchronous framing is not supported");
								};
							case 4: 
								UINT32 BearerCapabilities
								{
									UINT32 Reserved:29 = FormatString("(%s)",this.ToBitString);
									UINT32 B:1 = FormatString("       (%s) %s",this.ToBitString,this ? " ATM Bearer is supported"
													  : " ATM Bearer is NOT supported");
									UINT32 A:1 = FormatString("       (%s) %s",this.ToBitString,this ? " analog access is supported"
													  : " analog access is NOT supported");
									UINT32 D:1 = FormatString("       (%s) %s",this.ToBitString,this ? " digital access is supported"
													  : " digital access is NOT supported");
								};
							case 5: 
								INT64 TieBreakValue;
							case 6: 
								UINT16 FirmwareRevision;
							case 7: 
								switch
								{
									case L2TPAvpValueLength > 0:
										[L2TPAVPSummary = L2TPAVPSummary + ", HostName = " + HostName]
										AsciiString(L2TPAvpValueLength) HostName;
								}
							case 8:
								switch
								{
									case L2TPAvpValueLength > 0:
										[L2TPAVPSummary = L2TPAVPSummary + ", VendorName = " + VendorName]
										AsciiString(L2TPAvpValueLength) VendorName;
								}
							case 9:
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", AssignedTunnelID = %d", AssignedTunnelID)]
								UINT16 AssignedTunnelID;
							case 10: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", WindowSize = %d", WindowSize)]
								UINT16 WindowSize;
							case 11:
							case 31: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) Challenge;
								}
							case 12:
								_struct CauseCodeAVP
								{
									UINT16 CauseCode;
									UINT8 CauseMsg;
									switch
									{
										case L2TPAvpValueLength > 3:
											AsciiString(L2TPAvpValueLength - 3) AdvisoryMsg;
									}
								};
								//#? The Response is a 16 octet value reflecting the CHAP-style [RFC1994] response to the challenge.
							case 13: 
								//L2TPAvpValueLength should be 16
								//AsciiString(16) ChallengeResponse;
								AsciiString(L2TPAvpValueLength) ChallengeResponse;
							case 14: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", AssignedSessionID = %d", AssignedSessionID)]
								UINT16 AssignedSessionID;
							case 15: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", CallSerialNumber = %d", CallSerialNumber)]
								UINT32 CallSerialNumber;
							case 16:
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", MinimumBPS = %d", MinimumBPS)]
								UINT32 MinimumBPS;
							case 17: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", MaximumBPS = %d", MaximumBPS)]
								UINT32 MaximumBPS;
							case 18: 
								switch( UINT32(FrameData,FrameOffset) & 0x3 )
								{
									case 3: 
										_struct indistinguishableBearer
										{
											UINT32 Reserved:29  = FormatString("  (%s)",this.ToBitString);
											UINT32 BearerType:3 = FormatString("(%s) %s",this.ToBitString,
																		" the call was either indistinguishable,or can be placed on either type of channel.");
										};
									default: 
										UINT32 BearerType
										{
											UINT32 Reserved:30  = FormatString("(%s)",this.ToBitString);
											UINT32 A:1 = FormatString("       (%s) %s",this.ToBitString,this ? " the call refers to an analog channel"
															  : " the call does not refer to an analog channel");
											UINT32 D:1 = FormatString("       (%s) %s",this.ToBitString,this ? " the call refers to a digital channel"
										   					  : " the call does not refer to a digital channel");
										};
								}
							case 19: 
								switch( UINT32(FrameData,FrameOffset) & 0x3 )
								{
									case 3: 
										_struct BothFramingType
										{
											UINT32 FramingType:3 = FormatString("(%s) %s"," Either synchronous or asynchronous framing may be used");
											UINT32 Rsv:29 = FormatString("        (%s)", this.ToBitString);
										};
									default: 
										UINT32 FramingType
										{
											UINT32 Reserved:30  = FormatString("(%s)",this.ToBitString);
											UINT32 A:1 = FormatString("       (%s) %s",this.ToBitString,this ? " asynchronous framing"
															  : " not asynchronous framing");
											UINT32 S:1 = FormatString("       (%s) %s",this.ToBitString,this ? " synchronous framing"
															  : " not synchronous framing");
										};
								}
							case 21: // CalledNumber
							case 22: // CallingNumber
							case 44: 
								// Calling Sub-Address
								struct NSAP_Address //Network Service Access Point
								{
									//Authority and Format Identifier
									UINT8 AFI = L2TPControlAVPSubAddressTable(this);
									switch (AFI)
									{
										case 0x39:
										case 0xBD: 
											_struct DCC //Data Country Code
											{
												UINT16 IDI;
												Blob(10) HODSP = FormatString("%X", this);
												Blob(6) ESI = FormatString("0x%X", this); //End System Identifier
												UINT8 SEL; //Selector
											}
										case 0x47:
										case 0xC5: 
											_struct ICD//International Code Designator
											{
												UINT16 IDI;
												Blob(10) HODSP = FormatString("%X", this);
												Blob(6) ESI = FormatString("0x%X", this);
												UINT8 SEL;
											}
										case 0x45:
										case 0xC3: 
											_struct E164
											{
												Blob(8) E164 = FormatString("0x%X", this);
												Blob(4) HODSP = FormatString("0x%X", this);
												Blob(6) ESI = FormatString("0x%X", this);
												UINT8 SEL;
											}
										case 0x49:
										case 0xC7: 
											_struct LocalIDI //Initial Domain Identifier
											{
												Blob(12) HODSP = FormatString("%X", this);
												Blob(6) ESI = FormatString("0x%X", this);
												UINT8 SEL;
											}
										default: 
											Blob(L2TPAvpValueLength - 1) UnknwonData;
									}
								}
							case 23: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) SubAddress;
								};
							case 24:
							case 38: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", BPS = %d", BPS)]
								UINT32 BPS;
							case 25: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", PhysicalChannelID = %d", PhysicalChannelID)]
								UINT32 PhysicalChannelID;
							case 26:
							case 27:
							case 28: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) LCP_CONFREQ;
								}
							case 29: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", AuthenType = %s", L2TPControlAVPAuthenTypeTable(AuthenType))]
								UINT16 AuthenType = L2TPControlAVPAuthenTypeTable(this);
							case 30: 
								switch
								{
									case L2TPAvpValueLength > 0:
										[L2TPAVPSummary = L2TPAVPSummary + ", AuthenName = " + AuthenName]
										AsciiString(L2TPAvpValueLength) AuthenName;
								};
							case 32: 
								UINT16 ProxyAuthenID
								{
									UINT8 Reserved;
									[L2TPAVPSummary = L2TPAVPSummary + FormatString(", ProxyAuthenID = %d", ID)]
									UINT8 ID;
								};
							case 33: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) Response;
								};
							case 34: 
								_struct CallErrorAVP
								{
									UINT16 Reserved;
									UINT32 CRCError;
									UINT32 FramingError;
									UINT32 HardwareOverrun;
									UINT32 BufferOverrun;
									UINT32 TimeoutError;
									UINT32 AlignmentError;
								};
							case 35: 
								_struct ACCMAVP
								{
									UINT16 Reserved;
									UINT32 SendACCM;
									UINT32 ReceiveACCM;
								};
							case 36: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) RandomOcterString;
								};
							case 37: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) PrivateGroupID;
								};
							case 40: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", RxMinimumBPS = %u", RxMinimumBPS)]
								UINT32 RxMinimumBPS;
							case 41: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", RxMaximumBPS = %u", RxMaximumBPS)]
								UINT32 RxMaximumBPS;
							case 42: 
								_struct ServiceCategoryAVP
								{
									UINT16 Reserved:15 = FormatString("(%s)",this.ToBitString);
									UINT16 S:1 = FormatString("       (%s) %s",this.ToBitString,S ? "Real time" 
												   : "Non real time");
								}
							case 43: 
								[L2TPAVPSummary = L2TPAVPSummary + ", ServiceName = " + ServiceName]
								[DataFieldByteOrder = LittleEndian]
								UnicodeString ServiceName;
							case 45: 
								_struct VPIVCIDAVP
								{
									UINT16 resvd:4 = FormatString("(%s) %d",this.ToBitString,this);
									UINT16 VPI:12 = FormatString("  (%s) %d",this.ToBitString,this);
									UINT16 VCI = FormatString("  (%s) %d",this.ToBitString,this);
								}
							case 46: 
								_struct PPPDisconnectCauseCodeAVP
								{
									UINT16 DisconnectCode = L2TPControlAVPDisconnectCodeErrorTypeTable(this) +
															L2TPControlAVPDisconnectCodeTable(this);
									UINT16 ControlProtocolNumber;
									UINT8 Direction = L2TPControlAVPErrorDirectionTable(this);
									switch
									{
										case L2TPAvpValueLength > 5:
											AsciiString(L2TPAvpValueLength - 5) Message;
									};
								}
							case 47:
							case 48: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", PHBCode = %d", PHBCode)]
								UINT16 PHBCode;
							case 49: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) WantOptions;
								};
							case 50: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) AllowOptions;
								};
							case 51: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) LastSentLCPConfreq;
								};
							case 52: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) LastReceivedLCPConfreq;
								};
							case 54: 
								_Struct ModemOnHoldStatusAVP
								{
									UINT16 H:1 = FormatString("       (%s) %s",this.ToBitString,this ? " the client modem is on-hold"
													  : " the client modem is back online");
									UINT16 Reserved:11 = FormatString("(%s)",this.ToBitString);
									UINT16 Timeout:4 = FormatString(" (%s) %s",this.ToBitString,ModemOnHoldTimeoutTable(this));
								};
							case 55: 
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) PPPoEPADMessage;
								};
							case 58: 
								_struct ExtendedVendorIDAVP
								{
									UINT32 VendorID;
									UINT16 AttributeType;
									switch
									{
										case L2TPAvpValueLength > 6:
											AsciiString(L2TPAvpValueLength - 6) AttributeValue;
									};
								}
							case 59: 
								_struct _MessageDigestAVP
								{
									UINT8 DigestType = FormatString("%s, %d(0x%X)", DigestTypeTable(this), this, this);
									Blob(L2TPAvpValueLength - 1) MessageDigest;
								}
							case 60: 
								UINT32 RouterID;
							case 61: 
								UINT32 AssignedControlConnectionID;
							case 62: 
								While PWTypes[FrameOffset < L2TPAvpEndOffset]
								{
									UINT16 PWType = FormatString("%s, %d(0x%X)", PWTypeTable(this), this, this);
								}
							case 63: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", LocalSessionID = %d", LocalSessionID)]
								UINT32 LocalSessionID;
							case 64: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", RemoteSessionID = %d", RemoteSessionID)]
								UINT32 RemoteSessionID;
							case 65: 
								Blob(L2TPAvpValueLength) AssignedCookie;
							case 66: 
								Blob(L2TPAvpValueLength) RemoteEndID;
							//#? case 67: application id???
							case 68: 
								UINT16 PseudowireType;
							case 69: 
								UINT16 L2SpecificSublayerType = L2TPControlAVPL2SpecificSublayerTypeTable(this);
							case 70: 
								UINT16 DataSequencingLevel = L2TPControlAVPDataSequencingLevelTable(this);
							case 71: 
								_struct CircuitStatus
								{
									UINT16 Reserved:14 = FormatString("(%s)",this.ToBitString);
									UINT16 N:1 = FormatString("       (%s) %s",this.ToBitString,this ?  " the circuit status indication is for a new circuit"
													  : " the circuit status indication is for an existing circuit");
									UINT16 A:1 = FormatString("       (%s) %s",this.ToBitString,this ? " the circuit is up/active/ready"
													  : " the circuit is down/inactive/not-ready");
								}
							case 72: 
								AsciiString(L2TPAvpValueLength) PreferredLanguage;
							case 73: 
								AsciiString(L2TPAvpValueLength) ControlMessageAuthenticationNonce;
							case 74: 
								UINT64 TxConnectSpeed;
							case 75: 
								UINT64 RxConnectSpeed;
							case 76: 
								_struct FailoverCapabilityAVP
								{
									UINT16 Reserved:14 = FormatString("(%s)",this.ToBitString);
									UINT16 D:1 = FormatString("       (%s) %d",this.ToBitString,this);
									UINT16 C:1 = FormatString("       (%s) %d",this.ToBitString,this);
									UINT32 RecoveryTime = FormatString("(%s) %d",this.ToBitString,this);
								}
							case 77: 
								_struct TunnelRecoveryAVP
								{
									UINT16 Reserved:14 = FormatString("(%s)",this.ToBitString);
									UINT16 D:1 = FormatString("       (%s) %d",this.ToBitString,this);
									UINT16 C:1 = FormatString("       (%s) %d",this.ToBitString,this);
									UINT32 RecoverTunnelId = FormatString("(%s) %d",this.ToBitString,this);
									UINT32 RecoverRemoteTunnelId = FormatString("(%s) %d",this.ToBitString,this);
								}
							case 78: 
								_struct SuggestedControlSequenceAVP
								{
									UINT16 Reserved;
									UINT16 SuggestedNs;
									UINT16 SuggestedNr;
								}
							case 79: 
								_struct FailoverSessionStateAVP
								{
									UINT16 Reserved;
									UINT16 SessionId;
									UINT16 RemoteSessionId;
								}
							case 81:
							case 82:
							case 83: 
								UINT16 SessionID[L2TPAvpValueLength / 2];
							case 84: 
								[L2TPAVPSummary = L2TPAVPSummary + FormatString(", Priority = %s", L2TPControlAVPPriorityValueTable(PriorityValue))]
								UINT16 PriorityValue = L2TPControlAVPPriorityValueTable(this);
							case 85: 
								UINT16 FrameRelayHeaderLength = FrameRelayHeaderLengthTable(this);
							case 86: 
								UINT16 ATMMaximumConcatenatedCells;
							case 88: 
								_struct ATMAlarmStatusAVP
								{
									UINT16 CircuitStatusReason = L2TPControlAVPCircuitStatusReasonTable(this);
									UINT16 Alarm = L2TPControlAVPATMAlarmTable(this);
								}
							case 89: 
								_struct AttachmentGroupIDAVP
								{
									Blob(L2TPAvpValueLength) AGI = FormatString("%X", this);
								}
							case 90: 
								_struct LocalEndIDAVP
								{
									Blob(L2TPAvpValueLength) SAII = FormatString("%X", this);
								}
							case 91: 
								_struct InterfaceMaximumTransmissionUnitAVP
								{
									UINT16 InterfaceMTU;
								} 
							default:
								switch
								{
									case L2TPAvpValueLength > 0:
										AsciiString(L2TPAvpValueLength) UnknownAttributeValue;
								};
						}
					}
				}
			}
	}
}





