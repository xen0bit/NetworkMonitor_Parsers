//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-L2NA
//#
//#  Details:                
//#
//#  Public References:      Microsoft-Windows-L2NA.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####

[RegisterBefore(NetEvent.UserData, MicrosoftWindowsL2NACP, "{85fe7609-ff4a-48e9-9d50-12918e43e1da}")]
Protocol L2NA_MicrosoftWindowsL2NACP = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 13003: [property.ETLSummary = this.ToString] L2NA_L2NACPPrelogonConnection L2NACPPrelogonConnection;
		case 13004: [property.ETLSummary = this.ToString] L2NA_L2NACPPrelogonWinAuth L2NACPPrelogonWinAuth;
		case 13023: [property.ETLSummary = this.ToString] L2NA_Dot3L2NACPPrelogonConnection Dot3L2NACPPrelogonConnection;
		case 13024: [property.ETLSummary = this.ToString] L2NA_Dot3L2NACPPrelogonWinAuth Dot3L2NACPPrelogonWinAuth;
		case 14000: [property.ETLSummary = this.ToString] L2NA_PlapEnabledResult PlapEnabledResult;
	}
}
Table L2NA_tid_L2NACPPrelogonResult(value)
{
	switch(value)
	{
		case 0: "Success";
		case 1: "Failure";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table L2NA_tid_L2NACPPrelogonReason(value)
{
	switch(value)
	{
		case 0: "Success.";
		case 1: "Failed to establish a network connection within the allotted time.";
		case 2: "Failed to establish a network connection.";
		case 3: "Failed to contact a domain controller within the allotted time.";
		case 4: "Failed to contact a domain controller and obtain a TCP/IP address within the allotted time.";
		case 5: "User has cancelled the pre-logon connection attempt.";
		case 6: "Authenticator not found on the interface.";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct L2NA_L2NACPPrelogonConnection = FormatString("The pre-logon connection attempt is complete.  Network connection attempt result: %s Reason: %s Interface GUID: %s Profile Name: %s ", Result.ToString, Reason.ToString, InterfaceGuid.ToString, ProfileName.ToString)
{
	UINT32 Result = L2NA_tid_L2NACPPrelogonResult(this);
	UINT32 Reason = L2NA_tid_L2NACPPrelogonReason(this);
	GUID(true) InterfaceGuid;
	UnicodeString ProfileName;
}
Struct L2NA_L2NACPPrelogonWinAuth = FormatString("The pre-logon connection attempt is complete.  Windows authentication result: %s Interface GUID: %s Profile Name: %s ", Result.ToString, InterfaceGuid.ToString, ProfileName.ToString)
{
	UINT32 Result = L2NA_tid_L2NACPPrelogonResult(this);
	GUID(true) InterfaceGuid;
	UnicodeString ProfileName;
}
Struct L2NA_Dot3L2NACPPrelogonConnection = FormatString("The pre-logon connection attempt is complete.  Network connection attempt result: %s Reason: %s Interface GUID: %s ", Result.ToString, Reason.ToString, InterfaceGuid.ToString)
{
	UINT32 Result = L2NA_tid_L2NACPPrelogonResult(this);
	UINT32 Reason = L2NA_tid_L2NACPPrelogonReason(this);
	GUID(true) InterfaceGuid;
}
Struct L2NA_Dot3L2NACPPrelogonWinAuth = FormatString("The pre-logon connection attempt is complete.  Windows authentication result: %s Interface GUID: %s ", Result.ToString, InterfaceGuid.ToString)
{
	UINT32 Result = L2NA_tid_L2NACPPrelogonResult(this);
	GUID(true) InterfaceGuid;
}
Struct L2NA_PlapEnabledResult = FormatString("Plap Enabled = %s", Enabled.ToString)
{
	BOOL Enabled;
	BOOL Remote;
	BOOL Dot3Allowed;
	BOOL WlanAllowed;
	BOOL CredentialsFound;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsL2NACP_Keyword, "{85fe7609-ff4a-48e9-9d50-12918e43e1da}")]
struct L2NA_MicrosoftWindowsL2NACP_Keyword
{
	UINT64 Credential:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CREDENTIAL":"");
	UINT64 Filter:1 = FormatString("          (%s) %s", this.ToBitString, this? "KW_FILTER":"");
	UINT64 Reserved1:35 = FormatString("       (%s)", this.ToBitString);
	UINT64 utAuthentication:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_AUTHENTICATION": "");
	UINT64 Reserved2:26 = FormatString("       (%s)", this.ToBitString);
}
