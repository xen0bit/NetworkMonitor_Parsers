//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft IIS Inetinfo Remote Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-IRP]: Internet Information Services (IIS) Inetinfo Remote Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 8/21/2009
//#                          Minor, 3/2/2010
//#
//####

[InetInfoSummary = "", ReturnValue = 0]
Protocol InetInfo = FormatString( "%s%s%s%s%s", InetInfoMethodTable( Property.MSRPCOpnum ), Property.MSRPCPType ? " Response" : " Request", InetInfoSummary != "" ? ", " + InetInfoSummary : "", Property.MSRPCPType ? ", " + "Status = " + WinErrorCodeNameTable( ReturnValue ) : "", Property.ParserError ? ", " + Property.ParserErrorMessage : Property.ParserErrorMessage )
{
	Switch( Property.MSRPCOpnum )
	{
		Case 0x0000:
		_Struct R_InetInfoGetVersion
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								UINT32 Reserved;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								UINT32 PdwVersion;
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x0001:
		_Struct R_InetInfoGetAdminInformation
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4	Pad;
								InetInfoServiceFlags ServerMask;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								PInetInfoConfigInfo PpConfig;
								Align4 Pad;
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x0002:
		_Struct R_InetInfoGetSites
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								InetInfoServiceFlags ServerMask;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								PPInetInfoSiteList PpSites;
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x0003:
		_Struct R_InetInfoSetAdminInformation
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								InetInfoServiceFlags ServerMask;
								InetInfoConfigInfo Config;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x0004:
		_Struct R_InetInfoGetGlobalAdminInformation
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								InetInfoServiceFlags ServerMask;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								PInetInfoGlobalConfigInfo PpConfig;
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x0005:
		_Struct R_InetInfoSetGlobalAdminInformation
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								InetInfoServiceFlags ServerMask;
								InetInfoGlobalConfigInfo Config;
							}
					}				
				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x0006:
		_Struct R_InetInfoQueryStatistics
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								UINT32 Level;
								InetInfoServiceFlags ServerMask;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								InetInfoStatisticsInfo StatsInfo;
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}
		}

		Case 0x0007:
		_Struct R_InetInfoClearStatistics
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								InetInfoServiceFlags ServerMask;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x0008:
		_Struct R_InetInfoFlushMemoryCache
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								InetInfoServiceFlags ServerMask;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x0009:
		_Struct R_InetInfoGetServerCapabilities
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								UINT32 Reserved;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								PInetInfoCapabilities PpCap;
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x000A:
		_Struct R_W3QueryStatistics2
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary =  FormatString( "Server: %s, Level: %u, Instance: %u, Reserved: %u", Server.ToString, Level,Instance,Reserved )]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								UINT32 Level;
								UINT32 Instance = InetInfoR_W3QueryStatistics2InstanceTable(this);
								UINT32 Reserved;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								InetInfoW3Statistics InfoStruct;
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x000B:
		_Struct R_W3ClearStatistics2
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = FormatString( "Server: %s, Level: %u", Server.toString,Instance)]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								UINT32 Instance;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x000C:
		_Struct R_FtpQueryStatistics2
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = FormatString( "Server: %s, Level: %u, Instance: %u, Reserved: %u", Server.ToString, Level,Instance,Reserved )]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								UINT32 Level;
								UINT32 Instance = InetInfoR_FtpQueryStatistics2InstanceTable(this);
								UINT32 Reserved;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = "InfoStruct = " + InfoStruct.ToString]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								InetInfoFTPStatistics InfoStruct;
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x000D:
		_Struct R_FtpClearStatistics2
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = FormatString( "Server: %s, Instance: %u",Server.ToString,Instance)]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								UINT32 Instance;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = "No Parameters"]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x000E:
		_Struct R_IISEnumerateUsers
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = "Server: " + Server.toString]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								InetInfoServiceFlags ServiceId;
								UINT32 Instance;
								InetInfoIISUserEnum InfoStruct;
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								InetInfoIISUserEnum InfoStruct;
								Align4 Pad;
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x000F:
		_Struct R_IISDisconnectUser
		{
			Switch( Property.MSRPCPType )
			{
				Case 0x00:
				[InetInfoSummary = FormatString("Server: %s, ServiceId: %s, Instance: %u, IdUser: %u",Server.toString,ServiceId,Instance,IdUser)]
				_Struct Request		{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								NdrWIDESTRINGPtr Server;
								Align4 Pad;
								InetInfoServiceFlags ServiceId;
								UINT32 Instance;
								UINT32 IdUser;				
							}
					}

				}

				Case 0x02:
				[InetInfoSummary = ""]
				_Struct Response
				{
					Switch
					{
						Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
						Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
						Default:
							struct
							{
									
								[ReturnValue = UINT32( FrameData, Offset )]
								UINT32 ReturnValue = WinErrorCodeTable( this );
							}
					}

				}
			}

		}

		Case 0x0010:
		Case 0x0011:
			struct NotUsedOnWire
			{
				Switch (property.MSRPCPType)
				{
			// REQUEST
					case 0x00:
					[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
					struct Request 
					{
						ReportParserWarning("IRP", "Invalid irp method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
						Blob(FrameLength - Offset) PayloadData;
					}

			// RESPONSE
					case 0x02:
					[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
					struct Response
					{
						ReportParserWarning("IRP", "Invalid irp method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
						Blob(FrameLength - Offset) PayloadData;					
					}
				}
			}

		Default: ReportParserError(ParserErrorProtocolClassWindows, "InetInfo", "Unknown InetInfo Request") ProtocolError;
	}
}

Table InetInfoR_FtpQueryStatistics2InstanceTable( Value )
{
	Switch( Value )
	{
		Case 0x000000000: "Return global (not per server instance) statistics data.";
		Case 0xf0000003: "Return statistics aggregated across all protocol server instances.";
		Default: "unknown";
	}
}

Table InetInfoR_W3QueryStatistics2InstanceTable( Value )
{
	Switch( Value )
	{
		Case 0x000000000: "Return global (not per server instance) statistics data.";
		Case 0xf0000003: "Return statistics aggregated across all protocol server instances.";
		Default: "unknown";
	}
}

Table InetInfoMethodTable( value )
{
	Switch( value )
	{
		Case 0x0000: "R_InetInfoGetVersion";
		Case 0x0001: "R_InetInfoGetAdminInformation";
		Case 0x0002: "R_InetInfoGetSites";
		Case 0x0003: "R_InetInfoSetAdminInformation";
		Case 0x0004: "R_InetInfoGetGlobalAdminInformation";
		Case 0x0005: "R_InetInfoSetGlobalAdminInformation";
		Case 0x0006: "R_InetInfoQueryStatistics";
		Case 0x0007: "R_InetInfoClearStatistics";
		Case 0x0008: "R_InetInfoFlushMemoryCache";
		Case 0x0009: "R_InetInfoGetServerCapabilities";
		Case 0x000A: "R_W3QueryStatistics2";
		Case 0x000B: "R_W3ClearStatistics2";
		Case 0x000C: "R_FtpQueryStatistics2";
		Case 0x000D: "R_FtpClearStatistics2";
		Case 0x000E: "R_IISEnumerateUsers";
		Case 0x000F: "R_IISDisconnectUser";
		Case 0x0010: "R_InitW3CounterStructure";
		Case 0x0011: "R_CollectW3PerfData";
	}
}

//Table InetInfoFieldControlTable( value )
//{
//	Switch( value )
//	{
//		Case 0x10000000: FormatString( "0x%08X - FC_INET_INFO_ADDRESS_TYPE", value );
//		Case 0x00000020: FormatString( "0x%08X - FC_INET_INFO_ADMIN_EMAIL", value );
//		Case 0x00000008: FormatString( "0x%08X - FC_INET_INFO_ADMIN_NAME", value );
//		Case 0x00020000: FormatString( "0x%08X - FC_INET_INFO_ALLOW_ANONYMOUS", value );
//		Case 0x00200000: FormatString( "0x%08X - FC_INET_INFO_ANON_PASSWORD", value );
//		Case 0x00100000: FormatString( "0x%08X - FC_INET_INFO_ANON_USER_NAME", value );
//		Case 0x00010000: FormatString( "0x%08X - FC_INET_INFO_AUTHENTICATION", value );
//		Case 0x08000000: FormatString( "0x%08X - FC_INET_INFO_AUTO_START", value );
//		Case 0x00000001: FormatString( "0x%08X - FC_INET_INFO_CONNECTION_TIMEOUT", value );
//		Case 0x00008000: FormatString( "0x%08X - FC_INET_INFO_DEF_LOGON_DOMAIN", value );
//		Case 0x00000040: FormatString( "0x%08X - FC_INET_INFO_HOST_NAME", value );
//		Case 0x20000000: FormatString( "0x%08X - FC_INET_INFO_IP_ADDRESS", value );
//		Case 0x00040000: FormatString( "0x%08X - FC_INET_INFO_LOG_ANONYMOUS", value );
//		Case 0x00000004: FormatString( "0x%08X - FC_INET_INFO_LOG_CONFIG", value );
//		Case 0x00080000: FormatString( "0x%08X - FC_INET_INFO_LOG_NONANONYMOUS", value );
//		Case 0x00000002: FormatString( "0x%08X - FC_INET_INFO_MAX_CONNECTIONS", value );
//		Case 0x00400000: FormatString( "0x%08X - FC_INET_INFO_PORT_NUMBER", value );
//		Case 0x02000000: FormatString( "0x%08X - FC_INET_INFO_SECURE_PORT_NUMBER", value );
//		Case 0x00000010: FormatString( "0x%08X - FC_INET_INFO_SERVER_COMMENT", value );
//		Case 0x04000000: FormatString( "0x%08X - FC_INET_INFO_SERVER_NAME", value );
//		Case 0x00000080: FormatString( "0x%08X - FC_INET_INFO_SERVER_SIZE", value );
//		Case 0x00800000: FormatString( "0x%08X - FC_INET_INFO_SITE_SECURITY", value );
//		Case 0x01000000: FormatString( "0x%08X - FC_INET_INFO_VIRTUAL_ROOTS", value );
//		Default        : FormatString( "0x%08X - No Description Available", value );
//	}
//}

struct InetInfoConfigInfoFieldControlFlag
{
	UINT32 ControlFlag
	{
		UINT32 CONNECTION_TIMEOUT:1 = FormatString("(%s) %s", this.ToBitString, this? "CONNECTION_TIMEOUT is valid": "");
		UINT32 MAX_CONNECTIONS:1 = FormatString("   (%s) %s", this.ToBitString, this? "MAX_CONNECTIONS is valid": "");
		UINT32 LOG_CONFIG:1 = FormatString("        (%s) %s", this.ToBitString, this? "LOG_CONFIG is valid": "");
		UINT32 ADMIN_NAME:1 = FormatString("        (%s) %s", this.ToBitString, this? "ADMIN_NAME is valid": "");
		UINT32 SERVER_COMMENT:1 = FormatString("    (%s) %s", this.ToBitString, this? "SERVER_COMMENT is valid": "");
		UINT32 ADMIN_EMAIL:1 = FormatString("       (%s) %s", this.ToBitString, this? "ADMIN_EMAIL is valid": "");
		UINT32 HOST_NAME:1 = FormatString("         (%s) %s", this.ToBitString, this? "HOST_NAME is valid": "");
		UINT32 SERVER_SIZE:1 = FormatString("       (%s) %s", this.ToBitString, this? "SERVER_SIZE is valid": "");
		UINT32 Reserved1:3 = FormatString("         (%s)", this.ToBitString);	
		UINT32 DEF_LOGON_DOMAIN:1 = FormatString("  (%s) %s", this.ToBitString, this? "DEF_LOGON_DOMAIN is valid": "");
		UINT32 AUTHENTICATION:1 = FormatString("    (%s) %s", this.ToBitString, this? "AUTHENTICATION is valid": "");
		UINT32 ALLOW_ANONYMOUS:1 = FormatString("   (%s) %s", this.ToBitString, this? "ALLOW_ANONYMOUS is valid": "");
		UINT32 LOG_ANONYMOUS:1 = FormatString("     (%s) %s", this.ToBitString, this? "LOG_ANONYMOUS is valid": "");
		UINT32 LOG_NONANONYMOUS:1 = FormatString("  (%s) %s", this.ToBitString, this? "LOG_NONANONYMOUS is valid": "");
		UINT32 ANON_USER_NAME:1 = FormatString("    (%s) %s", this.ToBitString, this? "ANON_USER_NAME is valid": "");
		UINT32 ANON_PASSWORD:1 = FormatString("     (%s) %s", this.ToBitString, this? "ANON_PASSWORD is valid": "");
		UINT32 PORT_NUMBER:1 = FormatString("       (%s) %s", this.ToBitString, this? "PORT_NUMBER is valid": "");
		UINT32 SITE_SECURITY:1 = FormatString("     (%s) %s", this.ToBitString, this? "SITE_SECURITY is valid": "");
		UINT32 VIRTUAL_ROOTS:1 = FormatString("     (%s) %s", this.ToBitString, this? "VIRTUAL_ROOTS is valid": "");
		UINT32 SECURE_PORT_NUMBER:1 = FormatString("(%s) %s", this.ToBitString, this? "SECURE_PORT_NUMBER is valid": "");
		UINT32 SERVER_NAME:1 = FormatString("       (%s) %s", this.ToBitString, this? "SERVER_NAME is valid": "");
		UINT32 AUTO_START:1 = FormatString("        (%s) %s", this.ToBitString, this? "AUTO_START is valid": "");
		UINT32 ADDRESS_TYPE:1 = FormatString("      (%s) %s", this.ToBitString, this? "ADDRESS_TYPE is valid": "");  
		UINT32 IP_ADDRESS:1 = FormatString("        (%s) %s", this.ToBitString, this? "IP_ADDRESS is valid": "");
		UINT32 Reserved2:6 = FormatString("         (%s)", this.ToBitString);
	}
}

Table InetInfoProductTypeTable( value )
{
	Switch( value )
	{
		Case 0x00000001: FormatString( "0x%08X - INET_INFO_PRODUCT_NTSERVER - The IIS product type is Windows NT Server 4.0", value );
		Case 0x00000002: FormatString( "0x%08X - INET_INFO_PRODUCT_NTWKSTA - The IIS product type is Windows NT Workstation 4.0", value );
		Case 0x00000003: FormatString( "0x%08X - INET_INFO_PRODUCT_WINDOWS95 - The IIS product type is Windows 95", value );
		Case 0xFFFFFFFF: FormatString( "0x%08X - INET_INFO_PRODUCT_UNKNOWN - The IIS product type is Unknown", value );
		Default        : FormatString( "0x%08X - No Description Available", value );
	}
}

Table InetInfoLogTypeTable( value,Description )
{
	Switch( value )
	{
		Case 0xFFFFFFFF: FormatString( "INET_LOG_INVALID (0x%08X) %s",value,Description?"The service log is invalid":"");
		Case 0x00000000: FormatString( "INET_LOG_DISABLED (0x%08X) %s",value,Description?"The service log is disabled":"" );
		Case 0x00000001: FormatString( "INET_LOG_TO_FILE (0x%08X) %s",value,Description?"The service log is written to a file":"");
		Case 0x00000002: FormatString( "INET_LOG_TO_SQL (0x%08X) %s",value,Description?"The service log is written to a SQL database":"");
		Default        : FormatString( "(0x%08X) %s",value,Description?"No Description Available":"" );
	}
}

Table InetInfoPeriodTypeTable( value,Description )
{
	Switch( value )
	{
		Case 0xFFFFFFFF: FormatString( "INET_LOG_PERIOD_INVALID (0x%08X) %s",value,Description?"The log period is invalid":"");
		Case 0x00000000: FormatString( "INET_LOG_PERIOD_NONE (0x%08X) %s",value,Description?"There is no log period":"");
		Case 0x00000001: FormatString( "INET_LOG_PERIOD_DAILY (0x%08X) %s",value,Description?"The log period is daily":"" );
		Case 0x00000002: FormatString( "INET_LOG_PERIOD_WEEKLY (0x%08X) %s",value,Description?"The log period is weekly":"");
		Case 0x00000003: FormatString( "INET_LOG_PERIOD_MONTHLY (0x%08X) %s",value,Description?"The log period is monthly":"");
		Case 0x00000004: FormatString( "INET_LOG_PERIOD_HOURLY (0x%08X) %s",value,Description?"The log period is hourly":"");
		Case 0x00000005: FormatString( "INET_LOG_PERIOD_YEARLY (0x%08X) %s",value,Description?"The log period is yearly":"");
		Default        : FormatString( "(0x%08X) %s",value,Description?"No Description Available":"");
	}
}

Table InetInfoPrimaryLanguageTable( value )
{
	Switch( value )
	{
		Case 0x00: FormatString( "Neutral", value );
		Case 0x01: FormatString( "Arabic", value );
		Case 0x02: FormatString( "Bulgarian", value );
		Case 0x03: FormatString( "Catalan", value );
		Case 0x04: FormatString( "Chinese", value );
		Case 0x05: FormatString( "Czech", value );
		Case 0x06: FormatString( "Danish", value );
		Case 0x07: FormatString( "German", value );
		Case 0x08: FormatString( "Greek", value );
		Case 0x09: FormatString( "English", value );
		Case 0x0A: FormatString( "Spanish", value );
		Case 0x0B: FormatString( "Finnish", value );
		Case 0x0C: FormatString( "French", value );
		Case 0x0D: FormatString( "Hebrew", value );
		Case 0x0E: FormatString( "Hungarian", value );
		Case 0x0F: FormatString( "Icelandic", value );
		Case 0x10: FormatString( "Italian", value );
		Case 0x11: FormatString( "Japanese", value );
		Case 0x12: FormatString( "Korean", value );
		Case 0x13: FormatString( "Dutch", value );
		Case 0x14: FormatString( "Norwegian", value );
		Case 0x15: FormatString( "Polish", value );
		Case 0x16: FormatString( "Portuguese", value );
		Case 0x18: FormatString( "Romanian", value );
		Case 0x19: FormatString( "Russian", value );
		Case 0x1A: FormatString( "Croatian/Serbian", value );
		Case 0x1B: FormatString( "Slovak", value );
		Case 0x1C: FormatString( "Albanian", value );
		Case 0x1D: FormatString( "Swedish", value );
		Case 0x1E: FormatString( "Thai", value );
		Case 0x1F: FormatString( "Turkish", value );
		Case 0x20: FormatString( "Urdu", value );
		Case 0x21: FormatString( "Indonesian", value );
		Case 0x22: FormatString( "Ukrainian", value );
		Case 0x23: FormatString( "Belarusian", value );
		Case 0x24: FormatString( "Slovenian", value );
		Case 0x25: FormatString( "Estonian", value );
		Case 0x26: FormatString( "Latvian", value );
		Case 0x27: FormatString( "Lithuanian", value );
		Case 0x29: FormatString( "Farsi", value );
		Case 0x2A: FormatString( "Vietnamese", value );
		Case 0x2B: FormatString( "Armenian", value );
		Case 0x2C: FormatString( "Azeri", value );
		Case 0x2D: FormatString( "Basque", value );
		Case 0x2F: FormatString( "F.Y.R.O. Macedonian", value );
		Case 0x36: FormatString( "Afrikaans", value );
		Case 0x37: FormatString( "Georgian", value );
		Case 0x38: FormatString( "Faeroese", value );
		Case 0x39: FormatString( "Hindi", value );
		Case 0x3E: FormatString( "Malay", value );
		Case 0x3F: FormatString( "Kazak", value );
		Case 0x40: FormatString( "Kyrgyz", value );
		Case 0x41: FormatString( "Swahili", value );
		Case 0x43: FormatString( "Uzbek", value );
		Case 0x44: FormatString( "Tatar", value );
		Case 0x46: FormatString( "Punjabi", value );
		Case 0x47: FormatString( "Gujarati", value );
		Case 0x49: FormatString( "Tamil", value );
		Case 0x4A: FormatString( "Telugu", value );
		Case 0x4B: FormatString( "Kannada", value );
		Case 0x4E: FormatString( "Marathi", value );
		Case 0x4F: FormatString( "Sanskrit", value );
		Case 0x50: FormatString( "Mongolian", value );
		Case 0x56: FormatString( "Galician", value );
		Case 0x57: FormatString( "Konkani", value );
		Case 0x5A: FormatString( "Syriac", value );
		Case 0x65: FormatString( "Divehi", value );
		Case 0x7F: FormatString( "Invariant", value );
		Default  : FormatString( "UNKNOWN", value );
	}
}

Table InetInfoProductIdTable( value )
{
	Switch( value )
	{
		Case 0xFFFFFFFF: FormatString( "0x%08X - INET_INFO_PRODUCT_UNKNOWN - The IIS product type is Unknown", value );
		Case 0x00000001: FormatString( "0x%08X - INET_INFO_PRODUCT_NTSERVER - The IIS product type is Windows NT Server 4.0", value );
		Case 0x00000002: FormatString( "0x%08X - INET_INFO_PRODUCT_NTWKSTA - The IIS product type is Windows NT Workstation 4.0", value );
		Case 0x00000003: FormatString( "0x%08X - INET_INFO_PRODUCT_WINDOWS95 - The IIS product type is Windows 95", value );
		Default        : FormatString( "0x%08X - No Description Available", value );
	}
}

Struct InetLogConfiguration = FormatString("LogType: %s, Period: %s",InetInfoLogTypeTable(LogType,FALSE),InetInfoPeriodTypeTable(Period,FALSE))
{
	UINT32 LogType = InetInfoLogTypeTable( this,TRUE );
	UINT32 Period = InetInfoPeriodTypeTable( this,TRUE );
	UnicodeString(260) LogFileDirectory;
	UINT32 SizeForTruncation;
	UnicodeString(260) DataSource;
	UnicodeString(30) TableName;
	UnicodeString(257) UserName;
	UnicodeString(257) Password;
}

Struct InetLangID = FormatString("Language: %s",InetInfoPrimaryLanguageTable(usPrimaryLanguage))
{
	UINT8 UsPrimaryLanguage = InetInfoPrimaryLanguageTable( this );
	UINT8 UsSubLanguage;
}

Struct InetProductID = FormatString("ProductId: %s",InetInfoProductIdTable(ProductId))
{
	UINT32 ProductId = InetInfoProductIdTable( this );
	UINT8 Pad[60];
}

Struct InetInfoIPSecEntry = FormatString("Mask: %s, Network: %s",Mask.toString,Network.toString)
{
	IPv4Address Mask;
	IPv4Address Network;
}

Struct InetInfoIPSecList = FormatString("IP Sec Entries: %u",Entries)
{
	NdrConformant MaxCount;
	UINT32 Entries;
	Switch
	{
		Case MaxCount.MaxCount > 0:InetInfoIPSecEntry AIPSecEntry[Entries];
	}
}

Struct InetInfoVirtualRootEntry = FormatString("Mask: %u",Mask)
{
	[InetInfoRootPointerArray$[InetInfoRootPointerLoop] = RootPointer.ReferentID, Post.InetInfoRootPointerLoop = InetInfoRootPointerLoop + 1]
	NdrPtr RootPointer;
	[InetInfoIPAddressPointerArray$[InetInfoIPAddressPointerLoop] = IPAddressPointer.ReferentID, Post.InetInfoIPAddressPointerLoop = InetInfoIPAddressPointerLoop + 1]
	NdrPtr IPAddressPointer;
	[InetInfoDirectoryPointerArray$[InetInfoDirectoryPointerLoop] = DirectoryPointer.ReferentID, Post.InetInfoDirectoryPointerLoop = InetInfoDirectoryPointerLoop + 1]
	NdrPtr DirectoryPointer;
	UINT32 Mask;
	[InetInfoAccountNamePointerArray$[InetInfoAccountNamePointerLoop] = AccountNamePointer.ReferentID, Post.InetInfoAccountNamePointerLoop = InetInfoAccountNamePointerLoop + 1]
	NdrPtr AccountNamePointer;
	//[InetInfoAccountPasswordPointerArray$[InetInfoAccountPasswordPointerLoop] = AccountPasswordPointer.ReferentID, Post.InetInfoAccountPasswordPointerLoop = InetInfoAccountPasswordPointerLoop + 1]
	//NdrPtr AccountPasswordPointer;
	UnicodeString(257) AccountPassword;
	Align4 Pad1;
	UINT32 Error;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad2;
	}
}

Struct InetInfoVirtualRootList = FormatString("Virtual Root Entries: %u",Entries)
{
	[InetInfoRootPointerLoop=0,InetInfoIPAddressPointerLoop=0,InetInfoDirectoryPointerLoop=0,InetInfoAccountNamePointerLoop=0,InetInfoAccountPasswordPointerLoop=0]
	NdrConformant MaxCount;
	[InetInfoVirtualRootListCount = 0,InetInfoRootPointerCount=0,InetInfoIPAddressPointerCount=0,InetInfoDirectoryPointerCount=0,InetInfoAccountNamePointerCount=0,InetInfoAccountPasswordPointerCount=0]
	UINT32 Entries;
	Switch
	{
		Case MaxCount.MaxCount > 0:
		struct InetVirtualRootList = FormatString("Virtual Root Entries: %u",Entries) {
			InetInfoVirtualRootEntry VirtualRootEntry[Entries];
			while InetInfoVirtualRootListWhileLoop[InetInfoVirtualRootListCount < Entries]
			{
				[InetInfoVirtualRootListCount = InetInfoVirtualRootListCount + 1]
				switch
				{
					case InetInfoRootPointerArray$[InetInfoRootPointerCount] > 0:[Post.InetInfoRootPointerCount = InetInfoRootPointerCount + 1]NdrWideString RootName;
				}
				switch
				{
					case InetInfoIPAddressPointerArray$[InetInfoIPAddressPointerCount] > 0:[Post.InetInfoIPAddressPointerCount = InetInfoIPAddressPointerCount + 1]NdrWideString IPAddress;
				}
				switch
				{
					case InetInfoDirectoryPointerArray$[InetInfoDirectoryPointerCount] > 0:[Post.InetInfoDirectoryPointerCount = InetInfoDirectoryPointerCount + 1]NdrWideString Directory;
				}
				switch
				{
					case InetInfoAccountNamePointerArray$[InetInfoAccountNamePointerCount] > 0:[Post.InetInfoAccountNamePointerCount = InetInfoAccountNamePointerCount + 1]NdrWideString AccountName;
				}
				/*switch
				{
					case InetInfoAccountPasswordPointerArray$[InetInfoAccountPasswordPointerCount] > 0:[Post.InetInfoAccountPasswordPointerCount = InetInfoAccountPasswordPointerCount + 1]UnicodeString AccountPassword;
				}*/
			}
		}
	}
}

//
//	[MS-IRP]INET_INFO_CONFIG_INFO
//	Alignment:NDR
//

Struct InetInfoConfigInfo = FormatString("FieldControl: 0x%08X, Port: %u", InetInfoFieldControl, Port)
{
	InetInfoConfigInfoFieldControlFlag InetInfoFieldControl;
	UINT32 ConnectionTimeout;
	UINT32 MaxConnections;
	
	[local.InetInfoAdminNamePointer = AdminName.ReferentID]
	NdrPtr AdminName;
	
	[local.InetInfoAdminEmailPointer = AdminEmail.ReferentID]
	NdrPtr AdminEmail;
	
	[local.InetInfoServerCommentPointer = ServerComment.ReferentID]
	NdrPtr ServerComment;
	
	[local.InetInfoLogConfigPointer = LogConfig.ReferentID]
	NdrPtr LogConfig;

	InetLangID LangID;
	ALIGN4 Pad1;	

	UINT32 LocalId;
	
	InetProductID ProductId;
	BOOL LogAnonymous;
	BOOL LogNonAnonymous;
	
	[local.InetInfoAnonUserNamePointer = AnonUserName.ReferentID]
	NdrPtr AnonUserName;
	
	UnicodeString(257) AnonPassword;
	ALIGN4 Pad2;

	
	UINT32 Authentication;
	INT16 Port;
	[local.InetInfoDenyIPListPointer = DenyIPList.ReferentID]
	NdrPtr	DenyIPList;

	[local.InetInfoGrantIPListPointer = GrantIPList.ReferentID]
	NdrPtr	GrantIPList;
	[local.InetInfoVirtualRootsPointer = VirtualRoots.ReferentID]
	NdrPtr	VirtualRoots;
	switch
	{
		case local.InetInfoAdminNamePointer > 0:NdrWideString AdminName;
	}
	switch
	{
		case local.InetInfoAdminEmailPointer > 0:NdrWideString AdminEmail;
	}
	switch
	{
		case local.InetInfoServerCommentPointer > 0:NdrWideString ServerComment;
	}
	switch
	{
		case local.InetInfoLogConfigPointer > 0:InetLogConfiguration LogConfig;
	}
	switch
	{
		case local.InetInfoAnonUserNamePointer > 0:NdrWideString AnonUserName;
	}
	switch
	{
		case local.InetInfoDenyIPListPointer > 0:InetInfoIPSecList DenyIPList;
	}
	switch
	{
		case local.InetInfoGrantIPListPointer > 0:InetInfoIPSecList GrantIPList;
	}
	switch
	{
		case local.InetInfoVirtualRootsPointer > 0:InetInfoVirtualRootList VirtualRoots;
	}
}

Struct PInetInfoConfigInfo = FormatString("%s",ConfigInfo.toString)
{
	NdrPtr Pointer;
	Switch 
	{
		Case Pointer.ReferentID > 0: InetInfoConfigInfo ConfigInfo;
		
	}
}

Struct PInetInfoGlobalConfigInfo = FormatString("%s",ConfigInfo.toString)
{
	NdrPtr Pointer;
	Switch 
	{
		Case Pointer.ReferentID > 0: InetInfoGlobalConfigInfo ConfigInfo;
	}
}

//
//	[MS-IRP] INET_INFO_GLOBAL_CONFIG_INFO
//	Alignment4	Pad;
//

struct InetInfoGlobalConfigInfo
{
	UINT32 FieldControl
	{
		UINT32 BandWidthLevel:1 = FormatString("(%s) %s", this.ToBitString, this? "FC_GINET_INFO_BANDWIDTH_LEVEL is valid": "");
		UINT32 MemCacheSize:1 = FormatString("  (%s) %s", this.ToBitString, this? "FC_GINET_INFO_MEMORY_CACHE_SIZE is valid": "");
		UINT32 Reserved:30 = FormatString("      (%s)", this.ToBitString);
	}
	UINT32 BandwidthLevel;
	UINT32 cbMemoryCacheSize;
}

//
//	[MS-IRP] IIS_USER_INFO_1 Pointer part
//	Alignment:NdrAlign
//

Struct InetInfoW3UserInfoPtr = FormatString("UserID: %u, Anonymous: %s, InetHost: %u",UserID,InetInfoAnonymousUserInfo,InetHost)
{
	NdrAlign Pad;
	UINT32 UserID;
	[InetInfoUserNamePointerArray$[InetInfoUserNamePointerLoop] = UserNamePointer.ReferentID, Post.InetInfoUserNamePointerLoop = InetInfoUserNamePointerLoop + 1]
	NdrPtr UserNamePointer;
	[InetInfoAnonymousUserInfo = FormatString("%s",Anonymous?"TRUE":"FALSE")]
	BOOL Anonymous = FormatString("%s",this?"TRUE - The user is logged on as Anonymous":"FALSE - The user is not logged on as Anonymous");
	UINT32 InetHost;
	UINT32 Connect;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad1;
	}
}

//
//	[MS-IRP] IIS_USER_INFO_1_CONTAINER
//	Alignment:None
//

Struct LPInetInfoIISUserInfo1Container = Ptr1 ? FormatString("Entries: %u",NotNull.EntriesRead) : ""
{
	NdrPtr Ptr1;
	switch 
	{
		case Ptr1.referentID !=0:
			struct NotNull
			{
				[InetInfoUserNamePointerLoop = 0, InetInfoIISUserInfoCount = 0]
				UINT32 EntriesRead;
				NdrPtrToConformant Pointer;
				Switch
				{
					Case Pointer.MaxCount > 0:
					struct {
						InetInfoW3UserInfoPtr Buffer[EntriesRead];
						while InetInfoIISUserInfoWhileLoop[InetInfoIISUserInfoCount < EntriesRead]
						{
							[InetInfoIISUserInfoCount = InetInfoIISUserInfoCount + 1]
							switch
							{
								case InetInfoUserNamePointerArray$[InetInfoIISUserInfoCount - 1] > 0:NdrWideString UserName;
							}
						}
					}
				}
			}
	}
}

//
//	[MS-IRP] IIS_USER_ENUM_STRUCT
//
Struct InetInfoIISUserEnum = FormatString("%s",IISUserInfo.toString)
{
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	UINT32 Level;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad1;
	}
	Uint32 SwitchValue;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad2;
	}
	Switch( Level )
	{
		Case 0x00000001: LPInetInfoIISUserInfo1Container IISUserInfo;
	}
}

Struct InetInfoSiteEntry = FormatString("Instance: %u",Instance)
{
	[InetInfoCommentPointerArray$[InetInfoCommentPointerLoop] = PointerToComment.ReferentID, Post.InetInfoCommentPointerLoop = InetInfoCommentPointerLoop + 1]
	NdrPtr PointerToComment;
	UINT32 Instance;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
}

//
//	[MS-IRP] INET_INFO_SITE_LIST
//	Alignment:None
//
Struct InetInfoSiteList = FormatString("Entries: %u",Entries)
{
	NdrConformant MaxCount;
	[InetInfoCommentPointerLoop = 0, InetInfoSiteListCount = 0]
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	UINT32 Entries;
	Switch
	{
		Case MaxCount.MaxCount > 0:
		struct {
			InetInfoSiteEntry SiteEntry[Entries];
			while InetInfoSiteListWhileLoop[InetInfoSiteListCount < Entries]
			{
				[InetInfoSiteListCount = InetInfoSiteListCount + 1]
				switch
				{
					case InetInfoCommentPointerArray$[InetInfoSiteListCount - 1] > 0:
						struct
						{
							NdrWideString Comment;
						}
					}
			}
		}
	}
}

//Struct PInetInfoSiteList = FormatString("%s",SiteList.toString)
//{
//	NdrPtr Pointer;
//	Switch 
//	{
//		Case Pointer.ReferentID > 0: InetInfoSiteList SiteList;
//	}
//}

Struct PPInetInfoSiteList = FormatString("%s",SiteList.toString)
{
	NdrPtr Pointer;
	Switch 
	{
		Case Pointer.ReferentID > 0: InetInfoSiteList SiteList;
	}
}

//
//	[MS-IRP] INETA_CACHE_STATISTICS
//	Alignment4
//
Struct InetCOMCacheStatistics
{
	UINT32 FilesCached;
	UINT32 TotalFilesCached;
	UINT32 FileHits;
	UINT32 FileMisses;
	UINT32 FileFlushes;
	Align8 Pad;
	UINT64 CurrentFileCacheSize;
	UINT64 MaximumFileCacheSize;
	UINT32 FlushedEntries;
	UINT32 TotalFlushed;
	UINT32 URICached;
	UINT32 TotalURICached;
	UINT32 URIHits;
	UINT32 URIMisses;
	UINT32 URIFlushes;
	UINT32 TotalURIFlushed;
	UINT32 BlobCached;
	UINT32 TotalBlobCached;
	UINT32 BlobHits;
	UINT32 BlobMisses;
	UINT32 BlobFlushes;
	UINT32 TotalBlobFlushed;
}

//
//	[MS-IRP] INETA_ATQ_STATISTICSICS
//	Alignment4
//

Struct InetCOMATQStatistics = FormatString("BlockedRequests: %u, AllowedRequests: %u, MeasuredBandwidth: %u",TotalBlockedRequests,TotalAllowedRequests,MeasuredBandwidth)
{
	UINT32 TotalBlockedRequests;
	UINT32 TotalRejectedRequests;
	UINT32 TotalAllowedRequests;
	UINT32 CurrentBlockedRequests;
	UINT32 MeasuredBandwidth;
}

//
//	[MS-IRP] INET_INFO_STATISTICS_INFO
//
Struct InetInfoStatisticsInfo = FormatString("%s",Statistics.toString)
{
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	UINT32 Level;
	switch
	{
		case Level == 0:PInetInfoStatistics0 Statistics;
	}
}

//
//	[MS-IRP] INET_INFO_STATISTICS_0
//	Alignment:4
//
Struct InetInfoStatistics0 = FormatString("%s, %s",CacheCtrs.toString,AtqCtrs.toString)
{
	InetCOMCacheStatistics CacheCtrs;
	InetCOMATQStatistics AtqCtrs;
	UINT32 AuxCounters;
	UINT32 Counters[20];
}

Struct PInetInfoStatistics0 {
	NdrPtr Pointer;
	Align8 Pad;
	switch
	{
		case Pointer.ReferentID > 0:InetInfoStatistics0 Statistics;
	}
}


Struct InetInfoCapFlagValues = FormatString( "0x%08X", UINT32( FrameData, Offset ) )
{
	Switch( Property.MSRPCByteOrder )
	{
		Case LittleEndian:
		Struct
		{
			UINT32 CapFlags = FormatString( "0x%08X", UINT32( FrameData, Offset ) )
			{
				UINT32 ODBCLogging:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Use ODBC log format as the active log format to record events" : "Don't use ODBC log format as the active log format to record events");
				UINT32 FileLogging:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Use IIS log file format as the active log format to record events" : "Don't use IIS log file format as the active log format to record events");
				UINT32 VirtualServer:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Use a virtual server" : "Don't use a virtual server");
				UINT32 BWThrottling:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Use bandwidth throttling to regulate service performance" : "Don't use bandwidth throttling to regulate service performance");
				UINT32 IPAccessCheck:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Perform an IP access check to determine if a connection should be denied" : "Don't perform an IP access check to determine if a connection should be denied");
				UINT32 MaxConnections:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Use the maximum connections value recorded in the configuration to set the maximum number of connections" : "Don't use the maximum connections value recorded in the configuration to set the maximum number of connections");
				UINT32 ConnectionLimit:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Limit the maximum connections to 10" : "Don't limit the maximum connections to 10");
				UINT32 MultipleInstance:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Allow multiple instances of the service to run concurrently" : "Don't allow multiple instances of the service to run concurrently");
				UINT32 SSLSupport:1 = FormatString("       (%s) %s", this.ToBitString, this ? "Use SSL support for connections to the service" : "Don't use SSL support for connections to the service");
				UINT32 OperatorsList:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Use a list of administrators to qualify access for administrative operations on the service" : "Don't use a list of administrators to qualify access for administrative operations on the service");
				UINT32 FPInstalled:1 = FormatString("      (%s) %s", this.ToBitString, this ? "If Microsoft Front Page extensions are installed, IIS enables this capability at run time" : "IIS does not enable this capability at run time");
				UINT32 CPUAuditing:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Use CPU throttling to regulate service performance" : "Don't use CPU throttling to regulate service performance");
				UINT32 ServerCompression:1 = FormatString("(%s) %s", this.ToBitString, this ? "Use data compression on the connection to the service" : "Don't use data compression on the connection to the service");
				UINT32 DAV:1 = FormatString("              (%s) %s", this.ToBitString, this ? "Use DAV headers for a W3 service" : "Don't use DAV headers for a W3 service");
				UINT32 DigestSupport:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Use cryptographic digest support for a W3 service operating on Windows Server 2003" : "Don't use cryptographic digest support for a W3 service operating on Windows Server 2003");
				UINT32 NTCertmapSupport:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Use support of cryptographic Windows NT certificate mapping for a W3 service operating on Windows Server 2003" : "Don't use support of cryptographic Windows NT certificate mapping for a W3 service operating on Windows Server 2003");
				UINT32 PooledOOP:1 = FormatString("        (%s) %s", this.ToBitString, this ? "The service uses the pooled out-of-process IIS application mode" : "The service does not use the pooled out-of-process IIS application mode");
				UINT32 Unused:15 = FormatString("           (%s)", this.ToBitString);
			}
		}

		Default:
		Struct
		{
			UINT32 CapFlags = FormatString( "0x%08X", UINT32( FrameData, Offset ) )
			{
				UINT32 Unused:15 = FormatString("           (%s)", this.ToBitString);
				UINT32 PooledOOP:1 = FormatString("        (%s) %s", this.ToBitString, this ? "The service uses the pooled out-of-process IIS application mode" : "The service does not use the pooled out-of-process IIS application mode");
				UINT32 NTCertmapSupport:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Use support of cryptographic Windows NT certificate mapping for a W3 service operating on Windows Server 2003" : "Don't use support of cryptographic Windows NT certificate mapping for a W3 service operating on Windows Server 2003");
				UINT32 DigestSupport:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Use cryptographic digest support for a W3 service operating on Windows Server 2003" : "Don't use cryptographic digest support for a W3 service operating on Windows Server 2003");
				UINT32 DAV:1 = FormatString("              (%s) %s", this.ToBitString, this ? "Use DAV headers for a W3 service" : "Don't use DAV headers for a W3 service");
				UINT32 ServerCompression:1 = FormatString("(%s) %s", this.ToBitString, this ? "Use data compression on the connection to the service" : "Don't use data compression on the connection to the service");
				UINT32 CPUAuditing:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Use CPU throttling to regulate service performance" : "Don't use CPU throttling to regulate service performance");
				UINT32 FPInstalled:1 = FormatString("      (%s) %s", this.ToBitString, this ? "If Microsoft Front Page extensions are installed, IIS enables this capability at run time" : "IIS does not enable this capability at run time");
				UINT32 OperatorsList:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Use a list of administrators to qualify access for administrative operations on the service" : "Don't use a list of administrators to qualify access for administrative operations on the service");
				UINT32 SSLSupport:1 = FormatString("       (%s) %s", this.ToBitString, this ? "Use SSL support for connections to the service" : "Don't use SSL support for connections to the service");
				UINT32 MultipleInstance:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Allow multiple instances of the service to run concurrently" : "Don't allow multiple instances of the service to run concurrently");
				UINT32 ConnectionLimit:1 = FormatString("  (%s) %s", this.ToBitString, this ? "Limit the maximum connections to 10" : "Don't limit the maximum connections to 10");
				UINT32 MaxConnections:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Use the maximum connections value recorded in the configuration to set the maximum number of connections" : "Don't use the maximum connections value recorded in the configuration to set the maximum number of connections");
				UINT32 IPAccessCheck:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Perform an IP access check to determine if a connection should be denied" : "Don't perform an IP access check to determine if a connection should be denied");
				UINT32 BWThrottling:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Use bandwidth throttling to regulate service performance" : "Don't use bandwidth throttling to regulate service performance");
				UINT32 VirtualServer:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Use a virtual server" : "Don't use a virtual server");
				UINT32 FileLogging:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Use IIS log file format as the active log format to record events" : "Don't use IIS log file format as the active log format to record events");
				UINT32 ODBCLogging:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Use ODBC log format as the active log format to record events" : "Don't use ODBC log format as the active log format to record events");
			}
		}
	}
}

//
//	[MS-IRP] INET_INFO_CAP_FLAGS
//	Alignment:4
//

Struct InetInfoCapFlags = FormatString( "Flags: %s, Mask: %u", Flags.toString,Mask)
{
	InetInfoCapFlagValues Flags = FormatString( "0x%08X", this );
	UINT32 Mask = FormatString( "0x%08X", this );
}

//
//	[MS-IRP] INET_INFO_CAPABILITIES_STRUCT
//	Alignment:4
//

Struct InetInfoCapabilities = FormatString("CapVersion: %u, Version: %u.%u, BuildNumber: %u, NumCapFlags: %u",CapVersion,MajorVersion,MinorVersion,BuildNumber,NumCapFlags)
{
	UINT32 CapVersion;
	UINT32 ProductType = InetInfoProductTypeTable( this );
	UINT32 MajorVersion;
	UINT32 MinorVersion;
	UINT32 BuildNumber;
	UINT32 NumCapFlags;
	NdrPtrToConformant Pointer;
	switch
	{
		case Pointer.ReferentID > 0:InetInfoCapFlags CapFlags[NumCapFlags];
	}
}

Struct PInetInfoCapabilities = FormatString("%s",Capabilities.toString)
{
	NdrPtr Pointer;
	Switch 
	{
		Case Pointer.ReferentID > 0: InetInfoCapabilities Capabilities;
	}
}

//Struct PPInetInfoCapabilities = FormatString("%s",Capabilities.toString)
//{
//	NdrPtr Pointer;
//	Switch
//	{
//		Case Pointer.ReferentID > 0: PInetInfoCapabilities Capabilities;
//	}
//}

//
//	[MS-IRP] W3_STATISTICS_1
//	Alignment:8
//
Struct InetInfoW3Statistics1 = FormatString("TotalBytesSent: %u, TotalBytesReceived: %u",TotalBytesSent,TotalBytesReceived)
{
	UINT64 TotalBytesSent;
	UINT64 TotalBytesReceived;
	UINT32 TotalFilesSent;
	UINT32 TotalFilesReceived;
	UINT32 CurrentAnonymousUsers;
	UINT32 CurrentNonAnonymousUsers;
	UINT32 TotalAnonymousUsers;
	UINT32 TotalNonAnonymousUsers;
	UINT32 MaxAnonymousUsers;
	UINT32 MaxNonAnonymousUsers;
	UINT32 CurrentConnections;
	UINT32 MaxConnections;
	UINT32 ConnectionAttempts;
	UINT32 LogonAttempts;
	UINT32 TotalOptions;
	UINT32 TotalGets;
	UINT32 TotalPosts;
	UINT32 TotalHeads;
	UINT32 TotalPuts;
	UINT32 TotalDeletes;
	UINT32 TotalTraces;
	UINT32 TotalMove;
	UINT32 TotalCopy;
	UINT32 TotalMkcol;
	UINT32 TotalPropfind;
	UINT32 TotalProppatch;
	UINT32 TotalSearch;
	UINT32 TotalLock;
	UINT32 TotalUnlock;
	UINT32 TotalOthers;
	UINT32 TotalCGIRequests;
	UINT32 TotalBGIRequests;
	UINT32 TotalNotFoundErrors;
	UINT32 TotalLockedErrors;
	UINT32 CurrentCalAuth;
	UINT32 MaxCalAuth;
	UINT32 TotalFailedCalAuth;
	UINT32 CurrentCalSsl;
	UINT32 MaxCalSSl;
	UINT32 TotalFailedCalSsl;
	UINT32 CurrentCGIRequests;
	UINT32 CurrentBGIRequests;
	UINT32 MaxCGIRequests;
	UINT32 MaxBGIRequests;
	UINT32 CurrentBlockedRequests;
	UINT32 TotalBlockedRequests;
	UINT32 TotalAllowedRequests;
	UINT32 TotalRejectedRequests;
	UINT32 MeasuredBw;
	UINT32 ServiceUptime;
	UINT32 TimeOfLastClear;
	UINT32 AuxCounters;
	UINT32 Counters[20];
}

//
//	[MS-IRP] W3_STATISTICS_STRUCT
//	Alignment:None
//
Struct InetInfoW3Statistics = FormatString("%s",StatInfo.toString) {
	UINT32 Level;
	switch
	{
		case Level==0:
		_struct {
			NdrPtr Pointer;
			switch
			{
				case Pointer.ReferentID > 0:
					struct 
					{
						Align8	Pad;
						InetInfoW3Statistics1 StatInfo;
					}
			}
		}
	}
}

//
//	[MS-IRP] FTP_STATISTICS_0
//	Alignment:8
//

Struct InetInfoFTPStatistics0 = FormatString("TotalBytesSent: %u, TotalBytesReceived: %u",TotalBytesSent,TotalBytesReceived)
{
	UINT64 TotalBytesSent;
	UINT64 TotalBytesReceived;
	UINT32 TotalFilesSent;
	UINT32 TotalFilesReceived;
	UINT32 CurrentAnonymousUsers;
	UINT32 CurrentNonAnonymousUsers;
	UINT32 TotalAnonymousUsers;							
	UINT32 TotalNonAnonymousUsers;
	UINT32 MaxAnonymousUsers;
	UINT32 MaxNonAnonymousUsers;
	UINT32 CurrentConnections;
	UINT32 MaxConnections;
	UINT32 ConnectionAttempts;
	UINT32 LogonAttempts;
	UINT32 ServiceUptime;
	UINT32 TotalAllowedRequests;
	UINT32 TotalRejectedRequests;
	UINT32 TotalBlockedRequests;
	UINT32 CurrentBlockedRequests;
	UINT32 MeasuredBandwidth;
	UINT32 TimeOfLastClear;
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
}

//
//	[MS-IRP] FTP_STATISTICS_STRUCT
//

Struct InetInfoFTPStatistics = FormatString("%s",StatInfo.ToString) 
{
	Switch
	{
		case Property.MSRPCNdr64:
		Align8 pad;
	}
	UINT32 Level;
	switch
	{
		case Level==0:
		_struct {
			NdrPtr Pointer;
			switch
			{
				case Pointer.ReferentID > 0:
					struct 
					{
						Align8	Pad;
						InetInfoFTPStatistics0 StatInfo;
					}
			}
		}
	}
}

Struct InetInfoServiceFlags = FormatString( "0x%08X", UINT32( FrameData, Offset ) )
{
	Switch( Property.MSRPCByteOrder )
	{
		Case LittleEndian:
		Struct 
		{
			UINT32 ServiceFlags = FormatString( "0x%08X", UINT32( FrameData, Offset ) )
			{
				UINT32 FTPSvcID:1 = FormatString("    (%s) %s", this.ToBitString, this ? "FTP service used" : "FTP service not used");
				UINT32 GopherSvcID:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Gopher service used" : "Gopher service not used");
				UINT32 HTTPSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "HTTP service used" : "HTTP service not used");
				UINT32 DNSSvcID:1 = FormatString("    (%s) %s", this.ToBitString, this ? "DNS service used" : "DNS service not used");
				UINT32 HTTPProxy:1 = FormatString("   (%s) %s", this.ToBitString, this ? "HTTP Proxy service used" : "HTTP Proxy service not used");
				UINT32 NNTPSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "NNTP service used" : "NNTP service not used");
				UINT32 SMTPSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "SMTP service used" : "SMTP service not used");
				UINT32 GatewaySvcID:1 = FormatString("(%s) %s", this.ToBitString, this ? "Gateway service used" : "Gateway service not used");
				UINT32 POP3SvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "POP3 service used" : "POP3 service not used");
				UINT32 CHATSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "CHAT service used" : "CHAT service not used");
				UINT32 LDAPSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "LDAP service used" : "LDAP service not used");
				UINT32 IMAPSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "IMAP service used" : "IMAP service not used");
				UINT32 Unused:20 = FormatString("      (%s)", this.ToBitString);
			}
		}

		Default:
		Struct
		{
			UINT32 ServiceFlags = FormatString( "0x%08X", UINT32( FrameData, Offset ) )
			{
				UINT32 Unused:20 = FormatString("      (%s)", this.ToBitString);
				UINT32 IMAPSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "IMAP service used" : "IMAP service not used");
				UINT32 LDAPSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "LDAP service used" : "LDAP service not used");
				UINT32 CHATSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "CHAT service used" : "CHAT service not used");
				UINT32 POP3SvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "POP3 service used" : "POP3 service not used");
				UINT32 GatewaySvcID:1 = FormatString("(%s) %s", this.ToBitString, this ? "Gateway service used" : "Gateway service not used");
				UINT32 SMTPSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "SMTP service used" : "SMTP service not used");
				UINT32 NNTPSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "NNTP service used" : "NNTP service not used");
				UINT32 HTTPProxy:1 = FormatString("   (%s) %s", this.ToBitString, this ? "HTTP Proxy service used" : "HTTP Proxy service not used");
				UINT32 DNSSvcID:1 = FormatString("    (%s) %s", this.ToBitString, this ? "DNS service used" : "DNS service not used");
				UINT32 HTTPSvcID:1 = FormatString("   (%s) %s", this.ToBitString, this ? "HTTP service used" : "HTTP service not used");
				UINT32 GopherSvcID:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Gopher service used" : "Gopher service not used");
				UINT32 FTPSvcID:1 = FormatString("    (%s) %s", this.ToBitString, this ? "FTP service used" : "FTP service not used");
			}
		}
	}
}

