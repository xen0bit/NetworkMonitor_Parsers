//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  DirectPlay DXDiag Usage Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   
//#                          [MS-DPDX]: DirectPlay DXDiag Usage Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 3/12/2010
//#
//####

/// PROTOCOL //////////////////////////////////////////////////////////////////////////////////////////////
[DataTypeByteOrder=LittleEndian]
Protocol DPDX = DPDXSummary
{
	Switch
	{
		// Session packet starts with a ZERO value.
		Case UINT8( Framedata, Offset )==0: 
			_struct session
			{
				UINT8 LeadByte = FormatString( "%02X = Session Packet", this );
				Switch
				{
					Case UINT8( Framedata, Offset ) == 0x02:
					Case UINT8( Framedata, Offset ) == 0x03: [DPDXSummary = this.ToString] DPLHP DPLHP;
					Case UINT8( Framedata, Offset ) == 0x05:
					Case UINT8( Framedata, Offset ) == 0x06:
					Case UINT8( Framedata, Offset ) == 0x07: [DPDXSummary = this.ToString] DPLNAT DPLNAT;
				}
			}
		Case UINT8( Framedata, Offset) & 0x80: [DPDXSummary = this.ToString] dpl8r dpl8r;
		default: [DPDXSummary = this.ToString] DPDXTransUserData UserData;
	}
}

/// TABLES //////////////////////////////////////////////////////////////////////////////////////////////


Table DPDXUserDataTable (PacketType) 
{
	switch (PacketType) 
	{
		case 0x00000001:
			Formatstring("TRANS_USERDATA_SEND_MESSAGE (0x%x)", PacketType);
		case 0x000000C1: 
			FormatString("TRANS_USERDATA_PLAYER_CONNECT_INFO (0x%x)", PacketType);
		case 0x000000C2: 
			FormatString("TRANS_USERDATA_SEND_SESSION_INFO (0x%x)", PacketType);
		case 0x000000C3: 
			FormatString("TRANS_USERDATA_ACK_SESSION_INFO (0x%x)", PacketType);
		case 0x000000C6: 
			FormatString("TRANS_USERDATA_INSTRUCT_CONNECT (0x%x)", PacketType);
		case 0x000000C8:
			FormatString("TRANS_USERDATA_CONNECT_ATTEMPT_FAILED (0x%x)", PacketType);
		case 0x000000C9: 
			FormatString("TRANS_USERDATA_NAMETABLE_VERSION (0x%x)", PacketType);
		case 0x000000CA: 
			FormatString("TRANS_USERDATA_RESYNC_VERSION (0x%x)", PacketType);
		case 0x000000C4: 
			FormatString("TRANS_USERDATA_SEND_PLAYER_DNID (0x%x)", PacketType);
		case 0x000000C5: 
			FormatString("TRANS_USERDATA_CONNECT_FAILED (0x%x)", PacketType);
		case 0x000000C7: 
			FormatString("TRANS_USERDATA_INSTRUCTED_CONNECT_FAILED (0x%x)", PacketType);
		case 0x000000CC:  
			FormatString("TRANS_USERDATA_ACK_NAMETABLE_OP (0x%x)", PacketType);
		case 0x000000CB:
			FormatString("TRANS_USERDATA_REQ_NAMETABLE_OP (0x%x)", PacketType);
		case 0x000000CD: 
			FormatString("TRANS_USERDATA_HOST_MIGRATE (0x%x)", PacketType);
		case 0x000000CE: 
			FormatString("TRANS_USERDATA_HOST_MIGRATE_COMPLETE (0x%x)", PacketType);
		case 0x000000D0: 
			FormatString("TRANS_USERDATA_ADD_PLAYER (0x%x)", PacketType);
		case 0x000000D1: 
			FormatString("TRANS_USERDATA_DESTROY_PLAYER (0x%x)", PacketType);
		case 0x000000E2: 
			FormatString("TRANS_USERDATA_REQ_INTEGRITY_CHECK (0x%x)", PacketType);
		case 0x000000E3:
			Formatstring("TRANS_USERDATA_INTEGRITY_CHECK (0x%x)", PacketType);
		case 0x000000E4:
			Formatstring("TRANS_USERDATA_INTEGRITY_CHECK_RESPONSE (0x%x)", PacketType);
		case 0x000000DF:
			Formatstring("TRANS_USERDATA_TERMINATE_SESSION (0x%x)", PacketType);
		default: 
			FormatString("Unknown packet type (0x%x)", PacketType);
	}
}

Table DPDXVersionTable(VerNo) 
{
	switch(VerNo) 
	{
		case 1: FormatString("DirectX 8.0 (%d)", VerNo);
		case 2: FormatString("DirectX 8.1 (%d)", VerNo);
		case 3: FormatString("PocketPC (%d)", VerNo);
		case 4: FormatString("Not Used (%d)", VerNo);
		case 5: FormatString("Windows Server 2003 (%d)", VerNo);
		case 6: FormatString("DirectX 8.2 (%d)", VerNo);
		case 7: FormatString("DirectX 9.0 (%d)", VerNo);
		default: FormatString("Unknown Version Number (%d)", VerNo);
	}
}

Table DPDXConnectFlagsTable(Flags) 
{
	switch (Flags) 
	{
		case 2: FormatString("Connecting locally (%d)", Flags);
		case 4: FormatString("Connecting to a host (%d)", Flags);
		default: FormatString("Unknown flags (%d)", Flags);
	}
}

Table CurrentProtocolVersionTable(value)
{
	switch (value) 
	{
		case 0x00010000: "Protocol version number 1.0.";
		case 0x00010001: "Protocol version number 1.1.";
		case 0x00010002: "Protocol version number 1.2.";
		case 0x00010003: "Protocol version number 1.3.";
		case 0x00010004: "Protocol version number 1.4.";
		case 0x00010005: "Protocol version number 1.5.";
		case 0x00010006: "Protocol version number 1.6.";
		default: "Unknown Protocol version number.";
	}
}

Table DPDXMsgIdTable (MsgId)
{
	switch(MsgId)
	{
		case 0x000000C6: Formatstring("Contain TRANS_USERDATA_INSTRUCT_CONNECT (0x%x)", MsgId);
		case 0x000000D0: Formatstring("Contain TRANS_USERDATA_ADD_PLAYER (0x%x)", MsgId);
		case 0x000000D1: Formatstring("Contain TRANS_USERDATA_DESTROY_PLAYER (0x%x)", MsgId);			
	}
}

Table MessageTypeTable(MessageType)
{
	switch(MessageType)
	{
		case 0x20: "This message contains an enumeration response";
		case 0x40: "This message contains a transport packet (TRANS) message";
		case 0x60: "This message contains an enumeration query";
	}
}

// Netmon will not be able to capture the traffic when serial port is used as transport and so this message is not be requested. 
struct DPUserDataMessage = UINT8( Framedata, Offset ) == 0xCC ?
Formatstring("%s,%s",MessageTypeTable(Property.MessageType),Property.TransUserDataSummary):
Formatstring("%s",Property.TransUserDataSummary)
{
	switch
	{
		case UINT8( Framedata, Offset ) == 0xCC:
		_struct MessageHeader
		{
			UINT8				Signature;
			[Property.MessageType]
			UINT8				MessageType = MessageTypeTable(this);
			UINT16				MessageSize;
			UINT16				MessageCRC;
			UINT16				HeaderCRC;
		}
	}
	[Property.TransUserDataSummary = this.ToString]
	DPDXTransUserData		UserData;
}

Table DPDXSessionQueryTypeTable( Value )
{
	switch(Value)
	{
		case 0x01: "This query contains an ApplicationGUID field";
		case 0x02: "This query contains no ApplicationGUID field";
		default: "Unknown type";
	}
}

/// TRANSPORT USERDATA PACKETS //////////////////////////////////////////////////////////////////////////////////////////////
[Property.TransUserDatastart = FrameOffset]
struct DPDXTransUserData = Formatstring("%s %s %s", DPDXUserDataSummary,DPDXUserDataBodySummary,Property.PacketControlRetry == 1?"Retry":"")
{
	DPL8RDataFrames TransUserDataHeader;
	switch 
	{
		case TransUserDataHeader.Control & 0x04 :
			[DPDXUserDataSummary = "TransUserDataFusedPacket"]
			DPDXTransUserDataFusedPacket	TransUserDataFusedPacket;
		case TransUserDataHeader.Control & 0x08 : 
			[DPDXUserDataSummary = "TransUserDataEndOfStream"]
			_struct TransUserDataEndOfStream = "End of Stream"{};
		case TransUserDataHeader.Control & 0x02 :
			[DPDXUserDataSummary = "TransUserDataKeepalive"]
			DPDXTransUserDataKeepalive	TransUserDataKeepalive;	
		// When Control set to 0x00,the parser has to treat the first 32 bits in payload field as the ¡®dwPacketType¡¯ of a TRANS_USERDATA message.
		case  (TransUserDataHeader.Control == 0x00 || TransUserDataHeader.Control == 0x01) && Framelength > FrameOffset: 
			[DPDXUserDataSummary = Formatstring("%s",DPDXUserDataBodySummary)]
			DPDXTransUserDataBody Body;
		default:
			[DPDXUserDataSummary = "Payload"]
			Blob(UDP.TotalLength - 8 - (FrameOffset - Property.TransUserDatastart)) Payload = "Payload"; 
	}
}

struct DPDXTransUserDataBody = DPDXUserDataBodySummary
{
	[DPDXUserDataBodySummary = DPDXUserDataTable(UINT8( Framedata, Offset ))]
	switch (UINT8( Framedata, Offset ))
	{		
		case 0x01:
			DPDXTransUserDataSendMessage
			TransUserDataSendMessage;
		case 0xC1:
			DPDXTransUserDataPlayerConnectInfo
			TransUserDataPlayerConnectInfo;
		case 0xC2:
			DPDXTransUserDataSendSessionInfo
			TransUserDataSendSessionInfo;
		case 0xC3: 
			DPDXTransUserDataAckSessionInfo
			TransUserDataAckSessionInfo;
		case 0xC6: 
			DPDXTransUserDataInstructConnect
			TransUserDataInstructConnect;
		case 0xC9:
			DPDXTransUserDataNameTableVersion
			TransUserDataNameTableVersion;
		case 0xCA:
			DPDXTransUserDataResyncVersion
			TransUserDataResyncVersion;
		case 0xC4:
			DPDXTransUserDataSendPlayerDnid
			TransUserDataSendPlayerDnid;
		case 0xC5:
			DPDXTransUserDataConnectFailed
			TransUserDataConnectFailed;
		case 0xC7: 
			DPDXTransUserDataInstructedConnectFailed
			TransUserDataInstructedConnectFailed;
		case 0xCD: 
			DPDXTransUserDataHostMigrate
			TransUserDataHostMigrate;
		case 0xCE: 
			DPDXTransUserDataHostMigrateComplete
			TransUserDataHostMigrateComplete;
		case 0xD0: 
			DPDXTransUserDataAddPlayer
			TransUserDataAddPlayer;
		case 0xD1: 
			DPDXTransUserDataDestroyPlayer
			TransUserDataDestroyPlayer;
		case 0xE2: 
			DPDXTransUserDataReqIntegrityCheck
			TransUserDataReqIntegrityCheck;
		case 0xC8:
			DPDXTransUserDataConnectAttemptFailed
			TransUserDataConnectAttemptFailed;
		case 0xDF:
			DPDXTransUserDataTerminateSession
			TransUserDataTerminateSession;
		case 0xCB:
			DPDXTransUserDataReqNameTableOp
			TransUserDataReqNameTableOp;
		case 0xCC:
		    DPDXTransUserDataACKNameTableOp
			TransUserDataACKNameTableOp;
		case 0xE3:
			DPDXTransUserDataIntegrityCheck
			TransUserDataIntegrityCheck;
		case 0xE4:
			DPDXTransUserDataIntegrityCheckResponse
			TransUserDataIntegrityCheckResponse;
		default: ReportParserError(ParserErrorProtocolClassWindows, "DirectPlay", "Unknown UserData Type")  Data;
	}
}

struct DPDXTransUserDataKeepalive = "Keepalive"
{
	UINT32 SessId;
}

struct DPDXTransUserDataSendMessage = FormatString("Message = %s", ChatString.ChatString) {
	UINT16 Type;
	UnicodeString(200) ChatString 
	{
		UnicodeString ChatString;
	};
}

struct DPDXTransUserDataFusedPacket 
{
	[DPDXFusedLoopEnd=0, DPDXFusedCount=0]
	while subheaders[DPDXFusedLoopEnd==0] 
	{
		[post.DPDXFusedCount=DPDXFusedCount+1]
		struct Subheader = FormatString("Fused packet subheader, length = %d", Size|((Command&0x38)<<5) ) 
		{
			UINT8 Size;
			[DPDXFusedLoopEnd = Command&0x01]
			UINT8 Command
			{
				UINT8 PACKETCOMMANDENDCOALESCE:1 = FormatString(" (%s) %s", this.ToBitString?"This is the final coalesced payload in the frame":"This isn't the final coalesced payload in the frame",this);
				UINT8 PACKETCOMMANDRELIABLE:1 = FormatString("    (%s) %s", this.ToBitString?"The payload Should be delivered reliably":"The payload Shouldn't be delivered reliably",this);
				UINT8 PACKETCOMMANDSEQUENTIAL:1 = FormatString("  (%s) %s", this.ToBitString?"The payload Should be indicated sequentially":"The payload Shouldn't be indicated sequentially",this);
				UINT8 PACKETCOMMANDCOALESCEBIG1:1 = FormatString("(%s) %s", this.ToBitString?"Represents bit 9 of the coalesced payload size":"Don't represents bit 9 of the coalesced payload size",this);
				UINT8 PACKETCOMMANDCOALESCEBIG2:1 = FormatString("(%s) %s", this.ToBitString?"Represents bit 10 of the coalesced payload size":"Don't represents bit 10 of the coalesced payload size",this);
				UINT8 PACKETCOMMANDCOALESCEBIG3:1 = FormatString("(%s) %s", this.ToBitString?"Represents bit 11 of the coalesced payload size":"Don't represents bit 11 of the coalesced payload size",this);
				UINT8 PACKETCOMMANDUSER1:1 = FormatString("       (%s) %s", this.ToBitString?"The payload is an internal session management message":"The payload isn't an internal session management message",this);
				UINT8 Reserved:1 = FormatString("                 (%s) %s", this.ToBitString);
			};
		}
	}
	[DPDXCounter = 0]
	while subpackets[DPDXCounter < DPDXFusedCount] {
		Align4	Pad;
		[post.DPDXCounter = DPDXCounter+1]
		DPDXTransUserDataBody SubPacket;
	}
}

struct DPDXTransUserDataPlayerConnectInfo {
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 Flags = DPDXConnectFlagsTable(this);
	UINT32 DnetVersion = DPDXVersionTable(this);
	UINT32 NameOffset;
	UINT32 NameSize = FormatString("%d bytes", this);
	UINT32 DataOffset;
	UINT32 DataSize = FormatString("%d bytes", this);
	UINT32 PasswordOffset;
	UINT32 PasswordSize = FormatString("%d bytes", this);
	UINT32 ConnectDataOffset;
	UINT32 ConnectDataSize = FormatString("%d bytes", this);
	UINT32 UrlOffset;
	UINT32 UrlSize = FormatString("%d bytes", this);
	GUID(1) GuidInstance;
	GUID(1) GuidApplication;
	switch {
		// DirectX 9
		case DnetVersion==7: struct {
			UINT32 AlternateAddressDataOffset;
			UINT32 AlternateAddressDataSize = FormatString("%d bytes", this);
			switch {
				case AlternateAddressDataOffset != 0:
				UINT32 AlternateAddressData[AlternateAddressDataSize/4];
			}
		}
	}
	switch {
		case NameOffset != 0:
			Unicodestring(NameSize/2) Name;			
	}
	switch {
		case DataOffset != 0:
			Asciistring(DataSize) Data;
	}
	switch {
		case PasswordOffset != 0:
			Asciistring(PasswordSize) Password;
	}
	switch {
		case ConnectDataOffset != 0:
			Asciistring(ConnectDataSize) ConnectData;
	}
	switch {
		case UrlOffset != 0:
			Asciistring(UrlSize) Url;
	}
}

struct DPDXDnNameTableEntryInfo = FormatString("DPDXnid = %d, DnetVersion = %s", DPDXnid, DnetVersion) {
	UINT32 DPDXnid;
	UINT32 DPDXnidOwner;
	UINT32 Flags;
	UINT32 Version;
	UINT32 VersionNotUsed;
	UINT32 DnetVersion = DPDXVersionTable(this);
	UINT32 NameOffset;
	UINT32 NameSize = FormatString("%d bytes", this);
	UINT32 DataOffset;
	UINT32 DataSize = FormatString("%d bytes", this);
	UINT32 UrlOffset;
	UINT32 UrlSize = FormatString("%d bytes", this);
}

struct DPDXDnNameTableMembershipInfo = FormatString("Player = %d, Group = %d, Version = %d", DPDXnidPlayer, DPDXnidGroup, Version) {
	UINT32 DPDXnidPlayer;
	UINT32 DPDXnidGroup;
	UINT32 Version;
	UINT32 VersionNotUsed;
}

struct DPDXTransUserDataSendSessionInfo {
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 ReplyOffset;
	UINT32 ReplySize = FormatString("%d bytes", this);
	UINT32 Size = FormatString("%d bytes", this);
	UINT32 Flags;
	UINT32 MaxPlayers;
	UINT32 CurrentPlayers;
	UINT32 SessionNameOffset;
	UINT32 SessionnameSize = FormatString("%d bytes", this);
	UINT32 PasswordOffset;
	UINT32 PasswordSize = FormatString("%d bytes", this);
	UINT32 ReservedDataOffset;
	UINT32 ReservedDataSize = FormatString("%d bytes", this);
	UINT32 ApplicationReservedDataOffset;
	UINT32 ApplicationReservedDataSize = FormatString("%d bytes", this);

	GUID(1) GuidInstance;
	GUID(1) ApplicationGuid;
	UINT32 DPDXnid;

	UINT32 Version;
	UINT32 VersionNotUsed;
	UINT32 EntryCount;
	UINT32 MembershipCount;

	[DPDXEntryCounter=0]
	while DnNameTableEntryInfos[DPDXEntryCounter<EntryCount] 
	{
		[post.DPDXEntryCounter=DPDXEntryCounter+1, 
		DPDXUrlSizes$[DPDXEntryCounter]=this.UrlSize,
		DPDXUrlOffsets$[DPDXEntryCounter]=this.UrlOffset,
		DPDXDataSizes$[DPDXEntryCounter]=this.DataSize,
		DPDXDataOffsets$[DPDXEntryCounter]=this.DataOffset,
		DPDXNameSizes$[DPDXEntryCounter]=this.NameSize,
		DPDXNameOffsets$[DPDXEntryCounter]=this.NameOffset
		]
		DPDXDnNameTableEntryInfo DnNameTableEntryInfo;
	}

	[DPDXEntryCounter=0]
	while DnNameTableMembershipInfo [DPDXMembershipCounter<MembershipCount] 
	{
		[DPDXMembershipCounter=DPDXMembershipCounter+1,]
		DPDXDnNameTableMembershipInfo DnNameTableMembershipInfo;
	}

	[DPDXEntryCounter=EntryCount]
	while EntryData[DPDXEntryCounter>0] 
	{
		switch 
		{
			case DPDXUrlOffsets$[DPDXEntryCounter] != 0:
				Asciistring(DPDXUrlSizes$[DPDXEntryCounter]) Url;
		}
		
		switch 
		{
			case DPDXDataOffsets$[DPDXEntryCounter] != 0:
				Asciistring(DPDXDataSizes$[DPDXEntryCounter]) Data;
		}
		
		[post.DPDXEntryCounter=DPDXEntryCounter-1]
		switch 
		{
			case DPDXNameOffsets$[DPDXEntryCounter] != 0:
				UnicodeString(DPDXNameSizes$[DPDXEntryCounter]/2) Name;
		}
	}

	switch 
	{
		case ReplyOffset != 0:
			Asciistring(ReplySize) Reply;
	}
	switch 
	{
		case SessionNameOffset != 0:
			UnicodeString(SessionNameSize/2) SessionName;
	}
	switch 
	{
		case PasswordOffset != 0:
			Asciistring(PasswordSize) Password;
	}
	switch 
	{
		case ReservedDataOffset != 0:
			Asciistring(ReservedDataSize) ReservedData;
	}
	switch 
	{
		case ApplicationReservedDataOffset != 0:
			Asciistring(ApplicationReservedDataSize) ApplicationReservedData;
	}
}

struct DPDXTransUserDataAckSessionInfo 
{
	UINT32 PacketType = DPDXUserDataTable(this);
}

struct DPDXTransUserDataInstructConnect = FormatString("UserDataInstructConnect: DPDXnid = %d", DPDXnid) 
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 DPDXnid;
	UINT32 Version;
	UINT32 VersionNotUsed;
}

struct DPDXTransUserDataNameTableVersion 
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 Version;
	UINT32 VersionNotUsed;
}

struct DPDXTransUserDataResyncVersion 
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 Version;
	UINT32 VersionNotUsed;
}

struct DPDXTransUserDataSendPlayerDnid 
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 DPDXnid;
}

/** NODATA **/
struct DPDXTransUserDataConnectFailed 
{
	UINT32 PacketType = DPDXUserDataTable(this);
	HRESULT HresultCode;
	UINT32 ReplyOffset;
	UINT32 ReplySize = FormatString("%d bytes", this);
	switch 
	{
		case ReplyOffset != 0:
			UINT16 Reply[ReplySize/2];
	}
}

/** NODATA **/
struct DPDXTransUserDataInstructedConnectFailed 
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 DPDXnID;
}

struct DPDXTransUserDataHostMigrate 
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 DPDXnidOldHost;
	UINT32 DPDXnidNewHost;
}

struct DPDXTransUserDataHostMigrateComplete 
{
	UINT32 PacketType = DPDXUserDataTable(this);
}

Table DPDXTransUserDataAddPlayerFlags( Value )
{
	switch( Value )
	{
		case 0x00000001: "Player is the local player";
		case 0x00000002: "Player is the host";
		case 0x00000100: "Player is a client from a peer-to-peer game session";
		case 0x00001000: "Player is connecting";
		case 0x00002000: "Player is to make the member available for use";
		case 0x00004000: "Player to indicate disconnecting";
		case 0x00010000: "Player to indicate connection to an application";
		case 0x00020000: "Player to indicate that the application was given the created player";
		case 0x00040000: "Player to indicate that the game session owner needs to destroy a player";
		case 0x00080000: "Player to indicate that the player is in use";
		default: "Unknown Flag";
	}
}

struct DPDXTransUserDataAddPlayer = FormatString("Add Player: %s", DPDXAddPlayerSummary) 
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 DPDXnid;
	UINT32 DPDXnidOwner;
	UINT32 Flags = DPDXTransUserDataAddPlayerFlags(this);
	UINT32 Version;
	UINT32 VersionNotUsed;
	[DPDXAddPlayerSummary=FormatString("DPDXnid = %d, Version = %s", DPDXnid, this)]
	UINT32 DnetVersion = DPDXVersionTable(this);
	UINT32 NameOffset;
	UINT32 NameSize = FormatString("%d bytes", this);
	UINT32 DataOffset;
	UINT32 DataSize = FormatString("%d bytes", this);
	UINT32 UrlOffset;
	UINT32 UrlSize = FormatString("%d bytes", this);
	switch 
	{
		case DataOffset != 0:
			AsciiString(DataSize) Data;
	}
	switch 
	{
		case UrlOffset != 0:
			[DPDXAddPlayerSummary = DPDXAddPlayerSummary + ", " + Url]
			AsciiString(UrlSize) Url;
	}
	switch 
	{
		case NameOffset != 0:
			[DPDXAddPlayerSummary = Name + ", " + DPDXAddPlayerSummary]
			UnicodeString(NameSize/2) Name;
	}
}

Table DPDXDestroyReasonTable(Reason) 
{
	switch (Reason) 
	{
		case 0x0001: "Client or server is leaving (1)";
		case 0x0002: "Connection was lost (2)";
		case 0x0003: "Session was terminated (3)";
		case 0x0004: "Server removed the client (4)";
		default: FormatString("Unknown Reason (%d)",Reason);
	}
}

struct DPDXTransUserDataIntegrityCheckResponse = "Client confirm itself in the game session"
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 DPDXnidRequesting;
}

struct DPDXTransUserDataIntegrityCheck = "Check client whether or not in the game session"
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 DPDXnidRequesting;
}

//2.2.25 TRANS_USERDATA_ACK_NAMETABLE_OP
struct DPDXTransUserDataACKNameTableOp = "Peer acknowledge the new name table"
{
	UINT32 PackeType = DPDXUserDataTable(this);
	[Local.TableEntries]
	UINT32 NumEntries;
	[MaxLoopCount = Local.TableEntries]
	while [ FrameOffset < FrameOffset ]
	{		
		UINT32 MsgId = DPDXMsgIdTable(this);
		UINT32 OpOffset;
		UINT32 OpSize;
		struct OP
		{	
			switch(MsgId)
			{
				case 0x000000C6:
					struct TRANSUSERDATAINSTRUCTCONNECT
					{
							UINT32 DPDXnid;
							UINT32 Version;
							UINT32 VersionNotUsed;
					};
				case 0x000000D0:
					struct TRANSUSERDATAADDPLAYER
					{
							UINT32 DPDXnid;
							UINT32 DPDXnidOwner;
							UINT32 Flags;
							UINT32 Version;
							UINT32 VersionNotUsed;
							[DPDXAddPlayerSummary=FormatString("DPDXnid = %d, Version = %s", DPDXnid, this)]
							UINT32 DnetVersion = DPDXVersionTable(this);
							UINT32 NameOffset;
							UINT32 NameSize = FormatString("%d bytes", this);
							UINT32 DataOffset;
							UINT32 DataSize = FormatString("%d bytes", this);
							UINT32 UrlOffset;
							UINT32 UrlSize = FormatString("%d bytes", this);
							switch 
							{
								case DataOffset != 0:
									AsciiString(DataSize) Data;
							}
							switch 
							{
								case UrlOffset != 0:
									[DPDXAddPlayerSummary = DPDXAddPlayerSummary + ", " + Url]
									AsciiString(UrlSize) Url;
							}
							switch 
							{
								case NameOffset != 0:
									[DPDXAddPlayerSummary = Name + ", " + DPDXAddPlayerSummary]
									UnicodeString(NameSize/2) Name;
							}
					};
				case 0x000000D1: 
					struct TRANSUSERDATADESTROYPLAYER 
					{
							UINT32 DPDXnidLeaving;
							UINT32 Version;
							UINT32 VersionNotUsed;
							UINT32 DestroyReason = DPDXDestroyReasonTable(this);
					}
			}
		}
	}	
}

struct DPDXTransUserDataReqNameTableOp = "Server requests a name table from an existing peer"
{
	UINT32 PackeType = DPDXUserDataTable(this);
	UINT32 Version;
	UINT32 VersionNotUsed;
}

struct DPDXTransUserDataTerminateSession = "Disconnect frome game seesion"
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 TerminateDataOffset;
	UINT32 TerminateDataSize;
	UINT8 TerminateData[TerminateDataSize];
}

struct DPDXTransUserDataConnectAttemptFailed = "Connection Attempt Failed"
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 DPDXnID;
}

struct DPDXTransUserDataDestroyPlayer = FormatString("Remove player: Reason = %s, DPDXnid = %d, Version = %d", DPDXDestroyReasonTable(DestroyReason), DPDXnidLeaving, Version) 
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 DPDXnidLeaving;
	UINT32 Version;
	UINT32 VersionNotUsed;
	UINT32 DestroyReason = DPDXDestroyReasonTable(this);
}

/** NODATA **/
struct DPDXTransUserDataReqIntegrityCheck = "Check client integrity" 
{
	UINT32 PacketType = DPDXUserDataTable(this);
	UINT32 ReqContext;
	UINT32 DPDXnidTarget;
}