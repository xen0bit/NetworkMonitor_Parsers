//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  MSDTC Connection Manager: OleTx Transaction Protocol Logical Unit Mainframe Extension
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-DTCLU]: MSDTC Connection Manager: OleTx Transaction Protocol Logical Unit Mainframe Extension (3.0)
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 9/16/2009
//#                          Minor, 10/16/2009
//#
//####

//
//	2.2.1.2   DTCLU_VARLEN_BYTEARRAY
//
struct DTCLUDtcluVarlenBytearray
{
	[OLETXDtcluVarByteArrayBegin = FrameOffset]
	UINT32 cbLength;
	switch
	{
		case cbLength > 0:
			BLOB( cbLength ) Array;
	}
	switch // Custom-marshaled block may not be filled with data.
	{
		case FrameOffset < (OLETXDtcluVarByteArrayBegin + cbLength):
			BLOB( OLETXDtcluVarByteArrayBegin + cbLength - FrameOffset ) Pad;
	}
}

//
//	2.2.3.1.1   TXUSER_DTCLURMCONFIGURE_MTAG_ADD
//
struct DTCLUTxuserDtclurmconfigureMtagAdd = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004201"))
{
	CMPMessagePacket MsgHeader;
	DTCLUDtcluVarlenBytearray LuNamePair;
	ALIGN4 Pad;
}

//
//	2.2.3.1.2   TXUSER_DTCLURMCONFIGURE_MTAG_DELETE
//
struct DTCLUTxuserDtclurmconfigureMtagDelete = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004202"))
{
	CMPMessagePacket MsgHeader;
	DTCLUDtcluVarlenBytearray LuNamePair;
	ALIGN4 Pad;
}

//
//	2.2.3.1.3   TXUSER_DTCLURMCONFIGURE_MTAG_REQUEST_COMPLETED
//
struct DTCLUTxuserDtclurmconfigureMtagRequestCompleted = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004203"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.1.4   TXUSER_DTCLURMCONFIGURE_MTAG_ADD_DUPLICATE
//
struct DTCLUTxuserDtclurmconfigureMtagAddDuplicate = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004204"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.1.5   TXUSER_DTCLURMCONFIGURE_MTAG_DELETE_NOT_FOUND
//
struct DTCLUTxuserDtclurmconfigureMtagDeleteNotFound = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004205"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.1.6   TXUSER_DTCLURMCONFIGURE_MTAG_DELETE_UNRECOVERED_TRANS
//
struct DTCLUTxuserDtclurmconfigureMtagDeleteUnrecoveredTrans = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004206"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.1.7   TXUSER_DTCLURMCONFIGURE_MTAG_DELETE_INUSE
//
struct DTCLUTxuserDtclurmconfigureMtagDeleteInuse = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004207"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.1.8   TXUSER_DTCLURMCONFIGURE_MTAG_ADD_LOG_FULL
//
Struct DTCLUTxuserDtclurmconfigureMtagAddLogFull = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004208"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.2.1   TXUSER_DTCLURMRECOVERY_MTAG_ATTACH
//
struct DTCLUTxuserDtclurmrecoveryMtagAttach = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004301"))
{
	CMPMessagePacket MsgHeader;
	DTCLUDtcluVarlenBytearray LuNamePair;
	ALIGN4 Pad;
}

//
//	2.2.3.2.2   TXUSER_DTCLURMRECOVERY_MTAG_REQUEST_COMPLETED
//
struct DTCLUTxuserDtclurmrecoveryMtagRequestCompleted = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004303"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.2.3   TXUSER_DTCLURMRECOVERY_MTAG_ATTACH_DUPLICATE
//
struct DTCLUTxuserDtclurmrecoveryMtagAttachDuplicate = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004304"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.2.4   TXUSER_DTCLURMRECOVERY_MTAG_ATTACH_NOT_FOUND
//
struct DTCLUTxuserDtclurmrecoveryMtagAttachNotFound = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004305"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.1   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE
//
struct DTCLUTxuserDtclurmenlistmentMtagCreate = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004305"))
{
	CMPMessagePacket MsgHeader;
	GUID(True) GuidTx;
	DTCLUDtcluVarlenBytearray LuNamePair;
	ALIGN4 Pad1;
	DTCLUDtcluVarlenBytearray LuTransId;
	ALIGN4 Pad2;
}

//
//	2.2.3.3.2   TXUSER_DTCLURMENLISTMENT_MTAG_REQUEST_COMPLETED
//
struct DTCLUTxuserDtclurmenlistmentMtagRequestCompleted = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004102"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.3   TXUSER_DTCLURMENLISTMENT_MTAG_TO_DTC_CONVERSATIONLOST
//
struct DTCLUTxuserDtclurmenlistmentMtagToDtcConversationlost = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004103"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.4   TXUSER_DTCLURMENLISTMENT_MTAG_TO_DTC_BACKEDOUT
//
struct DTCLUTxuserDtclurmenlistmentMtagToDtcBackedout = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004104"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.5   TXUSER_DTCLURMENLISTMENT_MTAG_TO_DTC_BACKOUT
//
struct DTCLUTxuserDtclurmenlistmentMtagToDtcBackout = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004105"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.6   TXUSER_DTCLURMENLISTMENT_MTAG_TO_DTC_COMMITTED
//
struct DTCLUTxuserDtclurmenlistmentMtagToDtcCommitted = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004106"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.7   TXUSER_DTCLURMENLISTMENT_MTAG_TO_DTC_FORGET
//
struct DTCLUTxuserDtclurmenlistmentMtagToDtcForget = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004107"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.8   TXUSER_DTCLURMENLISTMENT_MTAG_TO_DTC_REQUESTCOMMIT
//
struct DTCLUTxuserDtclurmenlistmentMtagToDtcRequestcommit = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004108"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.9   TXUSER_DTCLURMENLISTMENT_MTAG_TO_LU_BACKEDOUT
//
struct DTCLUTxuserDtclurmenlistmentMtagToLuBackedout = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004109"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.10   TXUSER_DTCLURMENLISTMENT_MTAG_TO_LU_BACKOUT
//
struct DTCLUTxuserDtclurmenlistmentMtagToLuBackout = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004110"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.11   TXUSER_DTCLURMENLISTMENT_MTAG_TO_LU_COMMITTED
//
struct DTCLUTxuserDtclurmenlistmentMtagToLuCommitted = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004111"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.12   TXUSER_DTCLURMENLISTMENT_MTAG_TO_LU_PREPARE
//
struct DTCLUTxuserDtclurmenlistmentMtagToLuPrepare = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004113"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.13   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE_TX_NOT_FOUND
//
struct DTCLUTxuserDtclurmenlistmentMtagCreateTxNotFound = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004116"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.14   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE_TOO_LATE
//
struct DTCLUTxuserDtclurmenlistmentMtagCreateTooLate = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004117"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.15   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE_LOG_FULL
//
struct DTCLUTxuserDtclurmenlistmentMtagCreateLogFull = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004118"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.16   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE_TOO_MANY
//
struct DTCLUTxuserDtclurmenlistmentMtagCreateTooMany = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004119"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.17   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE_LU_NOT_FOUND
//
struct DTCLUTxuserDtclurmenlistmentMtagCreateLuNotFound = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004120"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.18   TXUSER_DTCLURMENLISTMENT_MTAG_UNPLUG
//
struct DTCLUTxuserDtclurmenlistmentMtagUnplug = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004122"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.19   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE_DUPLICATE_LU_TRANSID
//
struct DTCLUTxuserDtclurmenlistmentMtagCreateDuplicateLuTransid = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004123"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.20   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE_LU_NO_RECOVERY_PROCESS
//
struct DTCLUTxuserDtclurmenlistmentMtagCreateLuNoRecoveryProcess = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004124"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.21   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE_LU_DOWN
//
struct DTCLUTxuserDtclurmenlistmentMtagCreateLuDown = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004125"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.22   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE_LU_RECOVERING
//
struct DTCLUTxuserDtclurmenlistmentMtagCreateLuRecovering = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004126"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.3.23   TXUSER_DTCLURMENLISTMENT_MTAG_CREATE_LU_RECOVERY_MISMATCH
//
struct DTCLUTxuserDtclurmenlistmentMtagCreateLuRecoveryMismatch = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004127"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.4.1   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_GETWORK
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagGetwork = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004401"))
{
	CMPMessagePacket MsgHeader;
	DTCLUDtcluVarlenBytearray LuNamePair;
	ALIGN4 Pad1;
}

//
//	2.2.3.4.2   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_GETWORK_NOT_FOUND
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagGetworkNotFound = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004402"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.4.3   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_WORK_CHECKLUSTATUS
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagWorkChecklustatus = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004403"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.4.4   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_WORK_TRANS
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagWorkTrans = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004404"))
{
	CMPMessagePacket MsgHeader;
	UINT32 RecoverySeqNum;
	UINT32 XIn = DTCLUXlnTable( this );
	UINT32 dwProtocol;
	DTCLUDtcluVarlenBytearray OurLogName;
	ALIGN4 Pad1;
	DTCLUDtcluVarlenBytearray RemoteLogName;
	ALIGN4 Pad2;
}

//
//	2.2.3.4.5   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_LUSTATUS
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagLustatus = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004407"))
{
	CMPMessagePacket MsgHeader;
	UINT32 RecoverySeqNum;
}

//
//	2.2.3.4.6   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_REQUESTCOMPLETE
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagRequestcomplete = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004408"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.4.7   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_CONFIRMATION_FROM_OUR_XLN
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagConfirmationFromOurXln = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004409"))
{
	CMPMessagePacket MsgHeader;
	UINT32 XlnConfirmation = DTCLUXlnConfirmationTable( this );
}

//
//	2.2.3.4.8   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_THEIR_XLN_RESPONSE
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagTheirXlnResponse = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004410"))
{
	CMPMessagePacket MsgHeader;
	UINT32 XIn = DTCLUXlnTable( this );
	UINT32 dwProtocol;
	DTCLUDtcluVarlenBytearray RemoteLogName;
	ALIGN4 Pad1;
}

//
//	2.2.3.4.9   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_CONFIRMATION_FOR_THEIR_XLN
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagConfirmationForTheirXln = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004411"))
{
	CMPMessagePacket MsgHeader;
	UINT32 XlnConfirmation = DTCLUXlnConfirmationTable( this );
}

//
//	2.2.3.4.10   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_ERROR_FROM_OUR_XLN
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagErrorFromOurXln = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004412"))
{
	CMPMessagePacket MsgHeader;
	UINT32 XlnError = DTCLUXlnErrorTable( this );
}

//
//	2.2.3.4.11   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_CHECK_FOR_COMPARESTATES
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagCheckForComparestates = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004413"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.4.12   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_COMPARESTATES_INFO
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagComparestatesInfo = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004414"))
{
	CMPMessagePacket MsgHeader;
	UINT32 CompareStates = DTCLUCompareStateTable( this );
	DTCLUDtcluVarlenBytearray LuTransId;
	ALIGN4 Pad1;
}

//
//	2.2.3.4.13   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_NO_COMPARESTATES
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagNoComparestates = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004415"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.4.14   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_THEIR_COMPARESTATES
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagTheirComparestates = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004416"))
{
	CMPMessagePacket MsgHeader;
	UINT32 CompareStates = DTCLUCompareStateTable( this );
}

//
//	2.2.3.4.15   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_CONFIRMATION_FOR_THEIR_COMPARESTATES
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagConfirmationForTheirComparestates = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004417"))
{
	CMPMessagePacket MsgHeader;
	UINT32 CompareStates = DTCLUCompareStatesConfirmationTable( this );
}

//
//	2.2.3.4.16   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_ERROR_FROM_OUR_COMPARESTATES
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagErrorFromOurComparestates = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004418"))
{
	CMPMessagePacket MsgHeader;
	UINT32 CompareStates = DTCLUCompareStatesErrorTable( this );
}

//
//	2.2.3.4.17   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_CONVERSATION_LOST
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagConversationLost = FormatString("UserMsgType: %s , cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004419"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.4.18   TXUSER_DTCLURECOVERYINITIATEDBYDTC_MTAG_NEW_RECOVERY_SEQ_NUM
//
struct DTCLUTxuserDtclurecoveryinitiatedbydtcMtagNewRecoverySeqNum = FormatString("UserMsgType: %s, cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004420"),MustBeSetToTable(MsgHeader.UserMsgType,"4"))
{
	CMPMessagePacket MsgHeader;
	UINT32 RecoverySeqNum;
}

//
//	2.2.3.5.1   TXUSER_DTCLURECOVERYINITIATEDBYLU_MTAG_THEIR_XLN
//
struct DTCLUTxuserDtclurecoveryinitiatedbyluMtagTheirXln = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004501"))
{
	CMPMessagePacket MsgHeader;
	UINT32 RecoverySeqNum;
	UINT32 XIn = DTCLUXlnTable( this );
	UINT32 dwProtocol;
	DTCLUDtcluVarlenBytearray RemoteLogName;
	ALIGN4 Pad1;
	DTCLUDtcluVarlenBytearray OurLogName;
	ALIGN4 Pad2;
	DTCLUDtcluVarlenBytearray LunamePair;
	ALIGN4 Pad3;
}

//
//	2.2.3.5.2   TXUSER_DTCLURECOVERYINITIATEDBYLU_MTAG_RESPONSE_FOR_THEIR_XLN
//
struct DTCLUTxuserDtclurecoveryinitiatedbyluMtagResponseForTheirXln = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004502"))
{
	CMPMessagePacket MsgHeader;
	UINT32 XInResponse = DTCLUXlnResponseTable(this);
	UINT32 XIn = DTCLUXlnTable( this );
	UINT32 dwProtocol;
	DTCLUDtcluVarlenBytearray OurLogNames;
	ALIGN4 Pad1;
}

//
//	2.2.3.5.3   TXUSER_DTCLURECOVERYINITIATEDBYLU_MTAG_CONFIRMATION_OF_OUR_XLN
//
struct DTCLUTxuserDtclurecoveryinitiatedbyluMtagConfirmationOfOurXln = FormatString("UserMsgType: %s, cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004503"),MustBeSetToTable(MsgHeader.UserMsgType,"4"))
{
	CMPMessagePacket MsgHeader;
	UINT32 XInConfirmation = DTCLUXlnConfirmationTable( this );
}

//
//	2.2.3.5.4   TXUSER_DTCLURECOVERYINITIATEDBYLU_MTAG_THEIR_COMPARESTATES
//
struct DTCLUTxuserDtclurecoveryinitiatedbyluMtagTheirComparestates = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004504"))
{
	CMPMessagePacket MsgHeader;
	UINT32 CompareStates = DTCLUCompareStateTable( this );
	DTCLUDtcluVarlenBytearray LuTransId;
	ALIGN4 Pad1;	
}

//
//	2.2.3.5.5   TXUSER_DTCLURECOVERYINITIATEDBYLU_MTAG_RESPONSE_FOR_THEIR_COMPARESTATES
//
struct DTCLUTxuserDtclurecoveryinitiatedbyluMtagResponseForTheirComparestates = FormatString("UserMsgType: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004505"))
{
	CMPMessagePacket MsgHeader;
	UINT32 CompareStatesResponse = DTCLUCompareStatesResponseTable( this );
	UINT32 CompareStates = DTCLUCompareStateTable( this );
}

//
//	2.2.3.5.6   TXUSER_DTCLURECOVERYINITIATEDBYLU_MTAG_CONFIRMATION_OF_OUR_COMPARESTATES
//
struct DTCLUTxuserDtclurecoveryinitiatedbyluMtagConfirmationOfOurComparestates = FormatString("UserMsgType: %s, cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004506"),MustBeSetToTable(MsgHeader.UserMsgType,"4"))
{
	CMPMessagePacket MsgHeader;
	UINT32 CompareStatesConfirmation = DTCLUCompareStatesConfirmationTable( this );
}

//
//	2.2.3.5.7   TXUSER_DTCLURECOVERYINITIATEDBYLU_MTAG_ERROR_OF_OUR_COMPARESTATES
//
struct DTCLUTxuserDtclurecoveryinitiatedbyluMtagErrorOfOurComparestates = FormatString("UserMsgType: %s, cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004507"),MustBeSetToTable(MsgHeader.UserMsgType,"4"))
{
	CMPMessagePacket MsgHeader;
	UINT32 CompareStatesError = DTCLUCompareStatesErrorTable( this );
}

//
//	2.2.3.5.8   TXUSER_DTCLURECOVERYINITIATEDBYLU_MTAG_CONVERSATION_LOST
//
struct DTCLUTxuserDtclurecoveryinitiatedbyluMtagConversationLost = FormatString("UserMsgType: %s, cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004508"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.5.9   TXUSER_DTCLURECOVERYINITIATEDBYLU_MTAG_REQUESTCOMPLETE
//
struct DTCLUTxuserDtclurecoveryinitiatedbyluMtagRequestcomplete = FormatString("UserMsgType: %s, cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004509"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.3.5.10   TXUSER_DTCLURECOVERYINITIATEDBYLU_MTAG_THEIR_XLN_NOT_FOUND
//
struct DTCLUTxuserDtclurecoveryinitiatedbyluMtagTheirXlnNotFound = FormatString("UserMsgType: %s, cbVarLenData: %s",MustBeSetToTable(MsgHeader.UserMsgType,"0x00004510"),MustBeSetToTable(MsgHeader.UserMsgType,"0"))
{
	CMPMessagePacket MsgHeader;
}

//
//	2.2.2.1   DTCLUCOMPARESTATE
//
table DTCLUCompareStateTable( value )
{
	switch( value )
	{
		case 1: "DtclucomparestateCommitted - The outcome of a transaction is a Commit Outcome";
		case 2: "DtclucomparestateHeuristiccommitted - the outcome of a transaction is a Heuristic Commit Outcome";
		case 3: "DtclucomparestateHeuristicmixed - The outcome of a transaction is a Heuristic Mixed Outcome";
		case 4: "DtclucomparestateHeuristicreset - The outcome of a transaction is a Heuristic Abort Outcome";
		case 5: "DtclucomparestateIndoubt - The outcome of a transaction is an In Doubt Outcome";
		case 6: "DtclucomparestateReset - The outcome of a trnsaction is an Abort Outcome";
	}
}

//
//	2.2.2.2   DTCLUCOMPARESTATESCONFIRMATION
//
table DTCLUCompareStatesConfirmationTable( value )
{
	switch( value )
	{
		case 1: "DtclucomparestatesconfirmationConfirm - The LUW state supplied by a Remote LU matches the Local LU LUW state and recovery is complete";
		case 2: "DtclucomparestatesconfirmationProtocol - The LUW state supplied by a Remote LU does not match the Local LU LUW state";
	}
}

//
//	2.2.2.3   DTCLUCOMPARESTATESERROR
//
table DTCLUCompareStatesErrorTable( value )
{
	switch( value )
	{
		case 1: "DtclucomparestateserrorProtocol - A protocol error occurred";
	}
}

//
//	2.2.2.4   DTCLUXLN
//
table DTCLUXlnTable( value )
{
	switch( value )
	{
		case 1: "DtcluxlnCold - The log status of an LU is Log Status Cold";
		case 2: "DtcluxlnWarm - The log status of an LU is Log Status Warm";
	}
}

//
//	2.2.2.5   DTCLUXLNCONFIRMATION
//
table DTCLUXlnConfirmationTable( value )
{
	switch( value )
	{
		case 1: "DtcluxlnconfirmationConfirm - No inconsistencies were detected between the Remote and Local LU state";
		case 2: "DtcluxlnconfirmationLognamemismatch - The remote log name does not match the remote log name at the Local LU";
		case 3: "DtcluxlnconfirmationColdwarmmismatch - The log status of the Remote LU is Log Status Cold and the Local LU is Log Status Warm";
		case 4: "DtcluxlnconfirmationObsolete - The exchange of Exchange Log Names has been invalidated";
	}
}

//
//	2.2.2.6   DTCLUXLNERROR
//
Table DTCLUXlnErrorTable( value )
{
	Switch( value )
	{
		case 1: "DTCLUXLNERROR_PROTOCOL - A protocol error occurred.";
		case 2: "DTCLUXLNERROR_LOGNAMEMISMATCH - The local log name supplied by a remote LU does not match the local log name at the local LU held by a transaction manager, or the remote log name supplied by a remote LU does not match the remote log name at the local LU held by a transaction manager. ";
		case 3: "DTCLUXLNERROR_COLDWARMMISMATCH - The log status of the remote LU supplied by a remote LU is Log Status Cold, and the log status of the local LU held by a transaction manager is Log Status Warm; or the log status of the remote LU supplied by a remote LU is Log Status Warm, and the log status of the local LU held by a transaction manager is Log Status Cold.";
	}
}

//
//	2.2.2.7   DTCLUCOMPARESTATESRESPONSE
//
table DTCLUCompareStatesResponseTable( value )
{
	switch( value )
	{
		case 1: "DtclucomparestatesresponseOk - The LUW state supplied by a Remote LU matches that held for a Local LU by a transaction manager";
		case 2: "DtclucomparestatesresponseProtocol - The LUW state supplied by a Remote LU does not match that held for a Local LU by a transaction manager";
	}
}

//
//	2.2.2.8   DTCLUXLNRESPONSE
//
Table DTCLUXlnResponseTable( value )
{
	Switch(value)
	{
		case 1: "DTCLUXLNRESPONSE_OK_SENDOURXLNBACK - No inconsistencies were detected between the remote LU state and the local LU state held by the transaction manager, and the remote LU has not supplied the local log name.";
		case 2: "DTCLUXLNRESPONSE_OK_SENDCONFIRMATION - No inconsistencies were detected between the remote LU state and the local LU state held by the transaction manager.";
		case 3: "DTCLUXLNRESPONSE_LOGNAMEMISMATCH - The remote log name supplied by the remote LU does not match the remote log name at the local LU held by the transaction manager; or the local log name supplied by the remote LU does not match the local log name held by the transaction manager.";
		case 4: "DTCLUXLNRESPONSE_COLDWARMMISMATCH - The remote LU's log status supplied by the remote LU is Log Status Cold, and the local LU's log status held by the transaction manager is Log Status Warm.";
	}
}

