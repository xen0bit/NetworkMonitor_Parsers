//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Federation Service Proxy Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-MFPP]: Federation Service Proxy Protocol Specification (0.2)
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 12/10/2009
//#                          Minor, 2/6/2009
//#
//####

[Property.SoapBodySummary = "MFPP Payload"]
[RegisterBefore(SoapBody.DefaultSoapBody, MFPP, MFPPSoapActionTable(Property.SOAPAction))]
Protocol MFPP = Property.MFPPSummary
{
	Switch(Property.SOAPAction)
	{
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/LsRequestSecurityToken":
			[Property.MFPPSummary = this.ToString]
			MFPPLsRequestSecurityToken MFPPLsRequestSecurityToken;
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/RequestSecurityTokenWithToken":
			[Property.MFPPSummary = this.ToString]
			MFPPRequestSecurityTokenWithToken MFPPRequestSecurityTokenWithToken;
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/LsRequestSecurityTokenWithCookie":
			[Property.MFPPSummary = this.ToString]
			MFPPLsRequestSecurityTokenWithCookie MFPPLsRequestSecurityTokenWithCookie;
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/GetProxyTrustConfiguration":
			[Property.MFPPSummary = this.ToString]
			MFPPGetProxyTrustConfiguration MFPPGetProxyTrustConfiguration;
		Default:
			While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
			{
				XmlElement(true) AnyNode;
			}
	}
	
}

struct MFPPLsRequestSecurityToken = FormatString("%s Message", Property.MFPPLsRequestSecurityTokenSummary)
{
	[Post.Local.MFPPLsRequestSecurityToken_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.MFPPLsRequestSecurityToken_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "LsRequestSecurityTokenResponse"):
						[Property.MFPPLsRequestSecurityTokenSummary = "LsRequestSecurityToken Response"]
						MFPPfsLsRequestSecurityTokenResponseElement LsRequestSecurityTokenResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "LsRequestSecurityToken"):
						[Property.MFPPLsRequestSecurityTokenSummary = "LsRequestSecurityToken Request"]
						MFPPfsLsRequestSecurityTokenElement LsRequestSecurityToken;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.MFPPLsRequestSecurityTokenSummary = "Fault LsRequestSecurityToken Response"]
						SoapFaultElement FaultLsRequestSecurityTokenElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.MFPPLsRequestSecurityTokenSummary = "Encrypted LsRequestSecurityToken Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct MFPPRequestSecurityTokenWithToken = FormatString("%s Message", Property.MFPPRequestSecurityTokenWithTokenSummary)
{
	[Post.Local.MFPPRequestSecurityTokenWithToken_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.MFPPRequestSecurityTokenWithToken_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "RequestSecurityTokenWithTokenResponse"):
						[Property.MFPPRequestSecurityTokenWithTokenSummary = "RequestSecurityTokenWithToken Response"]
						MFPPfsRequestSecurityTokenWithTokenResponseElement RequestSecurityTokenWithTokenResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "RequestSecurityTokenWithToken"):
						[Property.MFPPRequestSecurityTokenWithTokenSummary = "RequestSecurityTokenWithToken Request"]
						MFPPfsRequestSecurityTokenWithTokenElement RequestSecurityTokenWithToken;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.MFPPRequestSecurityTokenWithTokenSummary = "Fault RequestSecurityTokenWithToken Response"]
						SoapFaultElement FaultRequestSecurityTokenWithTokenElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.MFPPRequestSecurityTokenWithTokenSummary = "Encrypted RequestSecurityTokenWithToken Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct MFPPLsRequestSecurityTokenWithCookie = FormatString("%s Message", Property.MFPPLsRequestSecurityTokenWithCookieSummary)
{
	[Post.Local.MFPPLsRequestSecurityTokenWithCookie_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.MFPPLsRequestSecurityTokenWithCookie_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "LsRequestSecurityTokenWithCookieResponse"):
						[Property.MFPPLsRequestSecurityTokenWithCookieSummary = "LsRequestSecurityTokenWithCookie Response"]
						MFPPfsLsRequestSecurityTokenWithCookieResponseElement LsRequestSecurityTokenWithCookieResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "LsRequestSecurityTokenWithCookie"):
						[Property.MFPPLsRequestSecurityTokenWithCookieSummary = "LsRequestSecurityTokenWithCookie Request"]
						MFPPfsLsRequestSecurityTokenWithCookieElement LsRequestSecurityTokenWithCookie;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.MFPPLsRequestSecurityTokenWithCookieSummary = "Fault LsRequestSecurityTokenWithCookie Response"]
						SoapFaultElement FaultLsRequestSecurityTokenWithCookieElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.MFPPLsRequestSecurityTokenWithCookieSummary = "Encrypted LsRequestSecurityTokenWithCookie Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

struct MFPPGetProxyTrustConfiguration = FormatString("%s Message", Property.MFPPGetProxyTrustConfigurationSummary)
{
	[Post.Local.MFPPGetProxyTrustConfiguration_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Body") STag;
	switch
	{
		Case !Local.MFPPGetProxyTrustConfiguration_IsEmpty:
			struct
			{
				Switch
				{
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetProxyTrustConfigurationResponse"):
						[Property.MFPPGetProxyTrustConfigurationSummary = "GetProxyTrustConfiguration Response"]
						MFPPfsGetProxyTrustConfigurationResponseElement GetProxyTrustConfigurationResponse;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "GetProxyTrustConfiguration"):
						[Property.MFPPGetProxyTrustConfigurationSummary = "GetProxyTrustConfiguration Request"]
						MFPPfsGetProxyTrustConfigurationElement GetProxyTrustConfiguration;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Fault"):
						[Property.MFPPGetProxyTrustConfigurationSummary = "Fault GetProxyTrustConfiguration Response"]
						SoapFaultElement FaultGetProxyTrustConfigurationElement;
					Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"):
						[Property.MFPPGetProxyTrustConfigurationSummary = "Encrypted GetProxyTrustConfiguration Data"]
						XMLENCEncryptedData EncryptedData;
					Default:
						While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
						{
							XmlElement(true) AnyNode;
						}
				}
				
				XmlTag("Body") ETag;
			}
	}
}

[Property.MFPPContent = "GetProxyTrustConfiguration Request"]
struct MFPPfsGetProxyTrustConfigurationElement = "GetProxyTrustConfiguration Request"
{
	XmlTag("GetProxyTrustConfiguration") GetProxyTrustConfigurationOpenTag;
					
	switch
	{
		case !Property.IsXmlEmptyElement:
		struct
		{
			switch
			{
				case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "proxyVersion"):
					struct
					{
						XmlTag("proxyVersion") proxyVersionOpenTag;
						switch
						{
							case !Property.IsXmlEmptyElement:
								struct
								{
									MFPPSoftwareVersion MFPPSoftwareVersion;
									MFPPGuid MFPPGuid;
									MFPPVersion MFPPVersion;
									XmlTag("proxyVersion") proxyVersionCloseTag;
								}
						}
					};
			}
			XmlTag("GetProxyTrustConfiguration") GetProxyTrustConfigurationCloseTag;
		}
	}
}

struct MFPPSoftwareVersion
{
	[Post.Local.SoftwareVersion_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("SoftwareVersion") SoftwareVersionOpenTag;
	
	switch 
	{
		case !Local.SoftwareVersion_IsEmpty :
			struct
			{
				StringTerm(Ascii, "<", true, false, false) SoftwareVersion;
				XmlTag("SoftwareVersion") SoftwareVersionCloseTag;
			}
	}
}

struct MFPPGuid
{
	[Post.Local.Guid_IsEmpty = Property.IsXmlEmptyElement ]
	XmlTag("Guid") GuidOpenTag;
		
	switch 
	{
		case !Local.Guid_IsEmpty :
			struct
			{
				StringTerm(Ascii, "<", true, false, false) Guid;
				XmlTag("Guid") GuidCloseTag;
			}
	}
}

struct MFPPVersion
{
	[Post.Local.Version_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Version") VersionOpenTag;
	
	switch 
	{
		case !Local.Version_IsEmpty :
			struct
			{
				StringTerm(Ascii, "<", true, false, false) Version;
				XmlTag("Version") VersionCloseTag;
			}
	}
}

[Property.MFPPContent = "GetProxyTrustConfiguration Response"]
struct MFPPfsGetProxyTrustConfigurationResponseElement = "GetProxyTrustConfiguration Response"
{
	XmlTag("GetProxyTrustConfigurationResponse") GetProxyTrustConfigurationResponseOpenTag;
					
	switch
	{
		case !Property.IsXmlEmptyElement:
			struct
			{
				MFPPGetProxyTrustConfigurationResult MFPPGetProxyTrustConfigurationResult;
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "fsVersion"):
						struct
						{
							XmlTag("fsVersion") fsVersionOpenTag;
							switch
							{
								case !Property.IsXmlEmptyElement:
									struct
									{
										MFPPSoftwareVersion MFPPSoftwareVersion;
										MFPPGuid MFPPGuid;
										MFPPVersion MFPPVersion;
										XmlTag("fsVersion") fsVersionCloseTag;
									}
								}
						}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "proxyInformation"):
						MFPPproxyInformation MFPPproxyInformation;
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "trustConfig"):
						MFPPtrustConfig MFPPtrustConfig;
				}
				XmlTag("GetProxyTrustConfigurationResponse") GetProxyTrustConfigurationResponseCloseTag;
			}
	}
}

struct MFPPGetProxyTrustConfigurationResult
{
	[Post.Local.GetProxyTrustConfigurationResult_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("GetProxyTrustConfigurationResult") GetProxyTrustConfigurationResultOpenTag;
	
	switch 
	{
		case !Local.GetProxyTrustConfigurationResult_IsEmpty :
			struct
			{
				StringTerm(Ascii, "<", true, false, false) GetProxyTrustConfigurationResult;
				XmlTag("GetProxyTrustConfigurationResult") GetProxyTrustConfigurationResultCloseTag;
			}
	}
}

struct MFPPproxyInformation
{
	XmlTag("proxyInformation") proxyInformationOpenTag;
					
	switch
	{
		case !Property.IsXmlEmptyElement:
			struct
			{
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "HostedRealmUriStr"):
						struct
						{
							[Post.Local.HostedRealmUriStr_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("HostedRealmUriStr") HostedRealmUriStrOpenTag;
							
							switch 
							{
								case !Local.HostedRealmUriStr_IsEmpty :
									struct
									{
										StringTerm(Ascii, "<", true, false, false) HostedRealmUriStr;
										XmlTag("HostedRealmUriStr") HostedRealmUriStrCloseTag;
									}
							}
						}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "LsUrlStr"):
						struct
						{
							[Post.Local.LsUrlStr_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("LsUrlStr") LsUrlStrOpenTag;
							
							switch 
							{
								case !Local.LsUrlStr_IsEmpty :
									struct
									{
										StringTerm(Ascii, "<", true, false, false) LsUrlStr;
										XmlTag("LsUrlStr") LsUrlStrCloseTag;
									}
							}
						}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ConfigInfo"):
						MFPPConfigInfo MFPPConfigInfo;
				}
				XmlTag("proxyInformation") proxyInformationCloseTag;
			}
	}	
}

struct MFPPConfigInfo
{
	XmlTag("ConfigInfo") ConfigInfoOpenTag;
					
	switch
	{
		case !Property.IsXmlEmptyElement:
			struct
			{
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "CookiePath"):
						struct
						{
							[Post.Local.CookiePath_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("CookiePath") CookiePathOpenTag;
							
							switch 
							{
								case !Local.CookiePath_IsEmpty :
									struct
									{
										StringTerm(Ascii, "<", true, false, false) CookiePath;
										XmlTag("CookiePath") CookiePathCloseTag;
									}
							}
						}
				}
				
				MFPPSuppressRealmCookie MFPPSuppressRealmCookie;
				MFPPRealmCookieLifetime MFPPRealmCookieLifetime;
				XmlTag("ConfigInfo") ConfigInfoCloseTag;
			}
	}
}

struct MFPPSuppressRealmCookie
{
	[Post.Local.SuppressRealmCookie_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("SuppressRealmCookie") SuppressRealmCookieOpenTag;
	
	switch 
	{
		case !Local.SuppressRealmCookie_IsEmpty :
			struct
			{
				StringTerm(Ascii, "<", true, false, false) SuppressRealmCookie;
				XmlTag("SuppressRealmCookie") SuppressRealmCookieCloseTag;
			}
	}
};

struct MFPPRealmCookieLifetime
{
	[Post.Local.RealmCookieLifetime_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("RealmCookieLifetime") RealmCookieLifetimeOpenTag;
	
	switch 
	{
		case !Local.RealmCookieLifetime_IsEmpty :
			struct
			{
				StringTerm(Ascii, "<", true, false, false) RealmCookieLifetime;
				XmlTag("RealmCookieLifetime") RealmCookieLifetimeCloseTag;
			}
	}
}

struct MFPPtrustConfig
{
	[Post.Local.trustConfig_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("trustConfig") trustConfigOpenTag;
					
	switch
	{
		case !Local.trustConfig_IsEmpty :
			struct
			{
				while [contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "TrustConfigurationData")]
				{
					[Post.Local.TrustConfigurationData_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("TrustConfigurationData") TrustConfigurationDataOpenTag;
					
					switch 
					{
						case !Local.TrustConfigurationData_IsEmpty :
							struct
							{
								MFPPTrustConfigurationData MFPPTrustConfigurationData;
								XmlTag("TrustConfigurationData") TrustConfigurationDataCloseTag;
							}
					}
				}
				XmlTag("trustConfig") trustConfigCloseTag;
			}
	}
}

struct MFPPTrustConfigurationData
{
	MFPPtrustType MFPPtrustType;
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "trustDisplayName"):
				struct
				{
					XmlTag("trustDisplayName") trustDisplayNameOpenTag;
					
					switch 
					{
						case !Property.IsXmlEmptyElement:
							struct
							{
								StringTerm(Ascii, "<", true, false, false) trustDisplayName;
								XmlTag("trustDisplayName") trustDisplayNameCloseTag;
							}
					}
				}
	}
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "trustUri"):
				struct
				{
					[Post.Local.trustUri_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("trustUri") trustUriOpenTag;
					
					switch 
					{
						case !Local.trustUri_IsEmpty :
							struct
							{
								StringTerm(Ascii, "<", true, false, false) trustUri;
								XmlTag("trustUri") trustUriCloseTag;
							}
					}
				}
	}
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "trustLsUrl"):
				struct
				{
					[Post.Local.trustLsUrl_IsEmpty = Property.IsXmlEmptyElement]
					XmlTag("trustLsUrl") trustLsUrlOpenTag;
					
					switch 
					{
						case !Local.trustLsUrl_IsEmpty :
							struct
							{
								StringTerm(Ascii, "<", true, false, false) trustLsUrl;
								XmlTag("trustLsUrl") trustLsUrlCloseTag;
							}
					}
				}
	}
	switch
	{
		case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "acceptableAuthenticationMethodStrings"):
			MFPPacceptableAuthenticationMethodStrings MFPPacceptableAuthenticationMethodStrings;
	}
}

struct MFPPtrustType
{
	[Post.Local.trustType_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("trustType") trustTypeOpenTag;
	
	switch 
	{
		case !Local.trustType_IsEmpty :
			struct
			{
				StringTerm(Ascii, "<", true, false, false) trustType;
				XmlTag("trustType") trustTypeCloseTag;
			}
	}
}

struct MFPPacceptableAuthenticationMethodStrings
{
	[Post.Local.acceptableAuthenticationMethodStrings_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("acceptableAuthenticationMethodStrings") acceptableAuthenticationMethodStringsOpenTag;
	
	switch 
	{
		case !Local.acceptableAuthenticationMethodStrings_IsEmpty :
			struct
			{
				ArrayOfString string;
				XmlTag("acceptableAuthenticationMethodStrings") acceptableAuthenticationMethodStringsCloseTag;
			}
	}
}

struct ArrayOfString
{
	while [contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "string")]
	{
		[Post.Local.string_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("string") stringOpenTag;
		
		switch 
		{
			case !Local.string_IsEmpty :
				struct
				{
					StringTerm(Ascii, "<", true, false, false) string;
					XmlTag("string") stringCloseTag;
				}
		}
	}
}

[Property.MFPPContent = "LsRequestSecurityToken request"]
struct MFPPfsLsRequestSecurityTokenElement = "LsRequestSecurityToken request"
{
	[Post.Local.LsRequestSecurityToken_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("LsRequestSecurityToken") LsRequestSecurityTokenOpenTag;
					
	switch
	{
		case !Local.LsRequestSecurityToken_IsEmpty :
			struct
			{
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "credentialTypeUri"):
							struct
							{
								[Post.Local.credentialTypeUri_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("credentialTypeUri") credentialTypeUriOpenTag;
								
								switch 
								{
									case !Local.credentialTypeUri_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) credentialTypeUri;
											XmlTag("credentialTypeUri") credentialTypeUriCloseTag;
										}
								}
							}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "credentials"):
						MFPPcredentials MFPPcredentials;
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "accountStoreUri"):
							struct
							{
								[Post.Local.accountStoreUri_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("accountStoreUri") accountStoreUriOpenTag;
								
								switch 
								{
									case !Local.accountStoreUri_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) accountStoreUri;
											XmlTag("accountStoreUri") accountStoreUriCloseTag;
										}
								}
							}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "cookie"):
						struct
							{
								[Post.Local.cookie_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("cookie") cookieOpenTag;
								
								switch 
								{
									case !Local.cookie_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) cookie;
											XmlTag("cookie") cookieCloseTag;
										}
								}
							}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "targetRealmName"):
						struct
							{
								[Post.Local.targetRealmName_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("targetRealmName") targetRealmNameOpenTag;
								
								switch 
								{
									case !Local.targetRealmName_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) targetRealmName;
											XmlTag("targetRealmName") targetRealmNameCloseTag;
										}
								}
							}
				}
				XmlTag("LsRequestSecurityToken") LsRequestSecurityTokenCloseTag;
			}
	}
}

struct MFPPcredentials
{
	[Post.Local.credentials_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("credentials") credentialsOpenTag;
	
	switch 
	{
		case !Local.credentials_IsEmpty :
			struct
			{
				ArrayOfString string;
				XmlTag("credentials") credentialsCloseTag;
			}
	}
}

[Property.MFPPContent = "LsRequestSecurityToken Response"]
struct MFPPfsLsRequestSecurityTokenResponseElement= "LsRequestSecurityToken Response"
{
	[Post.Local.LsRequestSecurityTokenResponse_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("LsRequestSecurityTokenResponse") LsRequestSecurityTokenResponseOpenTag;
	switch 
	{
		case !Local.LsRequestSecurityTokenResponse_IsEmpty :
			struct
			{
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "rstr"):
							MFPPrstr MFPPrstr;
				}
				XmlTag("LsRequestSecurityTokenResponse") LsRequestSecurityTokenResponseCloseTag;
			}
	}
}

struct MFPPrstr
{
	[Post.Local.rstr_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("rstr") rstrOpenTag;
	
 switch
	{
		case !Local.rstr_IsEmpty:
			struct
			{
				MFPPStatus MFPPStatus;
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "PolicyVersion"):
							struct
							{
										XmlTag("PolicyVersion") PolicyVersionOpenTag;
										switch
										{
											case !Property.IsXmlEmptyElement:
												struct
												{
													MFPPSoftwareVersion MFPPSoftwareVersion;
													MFPPGuid MFPPGuid;
													MFPPVersion MFPPVersion;
													XmlTag("PolicyVersion") PolicyVersionCloseTag;
												}
										}
							}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "CredentialsVerification"):
							MFPPCredentialsVerification MFPPCredentialsVerification;
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ForeignRealmUri"):
							struct 
							{
								[Post.Local.ForeignRealmUri_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("ForeignRealmUri") ForeignRealmUriOpenTag;
								
								switch 
								{
									case !Local.ForeignRealmUri_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) ForeignRealmUri;
											XmlTag("ForeignRealmUri") ForeignRealmUriCloseTag;
										}
								}
							}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "SecurityToken"):
							struct 
							{
								[Post.Local.SecurityToken_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("SecurityToken") SecurityTokenOpenTag;
								
								switch 
								{
									case !Local.SecurityToken_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) SecurityToken;
											XmlTag("SecurityToken") SecurityTokenCloseTag;
										}
								}
							}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "LogonAcceleratorToken"):
							struct 
							{
								[Post.Local.LogonAcceleratorToken_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("LogonAcceleratorToken") LogonAcceleratorTokenOpenTag;
								
								switch 
								{
									case !Local.LogonAcceleratorToken_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) LogonAcceleratorToken;
											XmlTag("LogonAcceleratorToken") LogonAcceleratorTokenCloseTag;
										}
								}
							}
				}
				XmlTag("rstr") rstrResponseCloseTag;
			}
	}
}

struct MFPPStatus
{
	[Post.Local.Status_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("Status") StatusOpenTag;
	
	switch
	{
		case !Local.Status_IsEmpty:
			struct
			{
				StringTerm(Ascii, "<", true, false, false) Status;
				XmlTag("Status") StatusCloseTag;
			}
	}
};

struct MFPPCredentialsVerification
{
	[Post.Local.CredentialsVerification_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("CredentialsVerification") CredentialsVerificationOpenTag;
	
	switch
	{
		case !Local.CredentialsVerification_IsEmpty :
			struct
			{
				MFPPAccountStoreType MFPPAccountStoreType;
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "AccountStoreTypeDisplay"):
						struct 
						{
								[Post.Local.AccountStoreTypeDisplay_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("AccountStoreTypeDisplay") AccountStoreTypeDisplayOpenTag;
								
								switch 
								{
									case !Local.AccountStoreTypeDisplay_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) AccountStoreTypeDisplay;
											XmlTag("AccountStoreTypeDisplay") AccountStoreTypeDisplayCloseTag;
										}
								}
						}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "AccountStoreUriString"):
						struct 
						{
								[Post.Local.AccountStoreUriString_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("AccountStoreUriString") AccountStoreUriStringOpenTag;
								
								switch 
								{
									case !Local.AccountStoreUriString_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) AccountStoreUriString;
											XmlTag("AccountStoreUriString") AccountStoreUriStringCloseTag;
										}
								}
						}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "AccountStoreDisplayName"):
						struct 
						{
								[Post.Local.AccountStoreDisplayName_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("AccountStoreDisplayName") AccountStoreDisplayNameOpenTag;
								
								switch 
								{
									case !Local.AccountStoreDisplayName_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) AccountStoreDisplayName;
											XmlTag("AccountStoreDisplayName") AccountStoreDisplayNameCloseTag;
										}
								}
						}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "UserValidationData"):
						MFPPUserValidationData MFPPUserValidationData;
				}
				XmlTag("CredentialsVerification") CredentialsVerificationCloseTag;
			}
	}
}

struct MFPPAccountStoreType
{
	[Post.Local.AccountStoreType_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("AccountStoreType") AccountStoreTypeOpenTag;
	
	switch
	{
		case !Local.AccountStoreType_IsEmpty:
			struct
			{
				StringTerm(Ascii, "<", true, false, false) AccountStoreType;
				XmlTag("AccountStoreType") AccountStoreTypeCloseTag;
			}
	}
}

struct MFPPUserValidationData
{
	[Post.Local.UserValidationData_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("UserValidationData") UserValidationDataOpenTag;
	
	switch
	{
		case !Local.UserValidationData_IsEmpty:
			struct
			{
				MFPPErrorCode MFPPErrorCode;
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "AdditionalValidationInfo"):
						MFPPAdditionalValidationInfo MFPPAdditionalValidationInfo;
				}
			 XmlTag("UserValidationData") UserValidationDataCloseTag;
		 }
	}
}

struct MFPPErrorCode
{
	[Post.Local.ErrorCode_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ErrorCode") ErrorCodeOpenTag;
	
	switch
	{
		case !Local.ErrorCode_IsEmpty:
			struct
			{
				StringTerm(Ascii, "<", true, false, false) ErrorCode;
				XmlTag("ErrorCode") ErrorCodeCloseTag;
	 		}
	}
}

struct MFPPAdditionalValidationInfo
{
	[Post.Local.AdditionalValidationInfo_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("AdditionalValidationInfo") AdditionalValidationInfoOpenTag;
	
	switch 
	{
		case !Local.AdditionalValidationInfo_IsEmpty :
			struct
			{
				ArrayOfString string;
				XmlTag("AdditionalValidationInfo") AdditionalValidationInfoCloseTag;
			}
	}
}

[Property.MFPPContent = "RequestSecurityTokenWithToken Request"]
struct MFPPfsRequestSecurityTokenWithTokenElement ="RequestSecurityTokenWithToken Request"
{
	[Post.Local.RequestSecurityTokenWithToken_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("RequestSecurityTokenWithToken") RequestSecurityTokenWithTokenOpenTag;
	
	switch
	{
		case !Local.RequestSecurityTokenWithToken_IsEmpty :
			struct
			{
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "inToken"):
						struct 
						{
							[Post.Local.inToken_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("inToken") inTokenOpenTag;
							
							switch 
							{
								case !Local.inToken_IsEmpty :
									struct
									{
										StringTerm(Ascii, "<", true, false, false) inToken;
										XmlTag("inToken") inTokenCloseTag;
									}
							}
						}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "cookie"):
						struct 
						{
							[Post.Local.cookie_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("cookie") cookieOpenTag;
							
							switch 
							{
								case !Local.cookie_IsEmpty :
									struct
									{
										StringTerm(Ascii, "<", true, false, false) cookie;
										XmlTag("cookie") cookieCloseTag;
									}
							}
						}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "targetRealmName"):
						struct 
						{
							[Post.Local.targetRealmName_IsEmpty = Property.IsXmlEmptyElement]
							XmlTag("targetRealmName") targetRealmNameOpenTag;
							
							switch 
							{
								case !Local.targetRealmName_IsEmpty :
									struct
									{
										StringTerm(Ascii, "<", true, false, false) targetRealmName;
										XmlTag("targetRealmName") targetRealmNameCloseTag;
									}
							}
						}
				}
				XmlTag("RequestSecurityTokenWithToken") RequestSecurityTokenWithTokenCloseTag;
			}
	}
}

[Property.MFPPContent = "RequestSecurityTokenWithToken Response"]
struct MFPPfsRequestSecurityTokenWithTokenResponseElement = "RequestSecurityTokenWithToken Response"
{
	[Post.Local.RequestSecurityTokenWithTokenResponse_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("RequestSecurityTokenWithTokenResponse") RequestSecurityTokenWithTokenResponseOpenTag;
	
	switch
	{
		case !Local.RequestSecurityTokenWithTokenResponse_IsEmpty:
			struct
			{
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "rstr"):
						MFPPrstr MFPPrstr;
				}
				XmlTag("RequestSecurityTokenWithTokenResponse") RequestSecurityTokenWithTokenResponseCloseTag;
			}
	}
}

[Property.MFPPContent = "LsRequestSecurityTokenWithCookie Request"]
struct MFPPfsLsRequestSecurityTokenWithCookieElement = "LsRequestSecurityTokenWithCookie Request"
{
	[Post.Local.LsRequestSecurityTokenWithCookie_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("LsRequestSecurityTokenWithCookie") LsRequestSecurityTokenWithCookieOpenTag;
	
	switch
	{
		case !Local.LsRequestSecurityTokenWithCookie_IsEmpty :
			struct
			{
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "latToken"):
							struct
							{
								[Post.Local.latToken_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("latToken") latTokenOpenTag;
								
								switch 
								{
									case !Local.latToken_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) latToken;
											XmlTag("latToken") latTokenCloseTag;
										}
								}
							};
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "targetRealmName"):
							struct
							{
								[Post.Local.targetRealmName_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("targetRealmName") targetRealmNameOpenTag;
								
								switch 
								{
									case !Local.targetRealmName_IsEmpty :
										struct
										{
											StringTerm(Ascii, "<", true, false, false) targetRealmName;
											XmlTag("targetRealmName") targetRealmNameCloseTag;
										}
								}
							}
				}
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "authMethodUris"):
						MFPPauthMethodUris MFPPauthMethodUris;
				}
				XmlTag("LsRequestSecurityTokenWithCookie") LsRequestSecurityTokenWithCookieCloseTag;
			}
	}
}

struct MFPPauthMethodUris
{
	[Post.Local.authMethodUris_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("authMethodUris") authMethodUrisOpenTag;
	
	switch 
	{
		case !Local.authMethodUris_IsEmpty :
			struct
			{
					ArrayOfString string;
					XmlTag("authMethodUris") authMethodUrisCloseTag;
			}
	}
}

[Property.MFPPContent = "LsRequestSecurityTokenWithCookie Response"]
struct MFPPfsLsRequestSecurityTokenWithCookieResponseElement = "LsRequestSecurityTokenWithCookie Response"
{
	[Post.Local.LsRequestSecurityTokenWithCookieResponse_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("LsRequestSecurityTokenWithCookieResponse") LsRequestSecurityTokenWithCookieResponseOpenTag;
	
	switch
	{
		case !Local.LsRequestSecurityTokenWithCookieResponse_IsEmpty :
			struct
			{
				switch
				{
					case contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "rstr"):
						MFPPrstr MFPPrstr;
				}
				XmlTag("LsRequestSecurityTokenWithCookieResponse") LsRequestSecurityTokenWithCookieResponseCloseTag;
			}
	}
}

Table MFPPSoapActionTable(value)
{
	Switch(value)
	{
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/LsRequestSecurityToken": 
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/RequestSecurityTokenWithToken": 
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/LsRequestSecurityTokenWithCookie": 
		Case "http://schemas.microsoft.com/ActiveDirectory/FederationService/2005/07/GetProxyTrustConfiguration": true;
		Default:false;
	}
}
