//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft IIS IMSAdminBaseW Remote Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-IMSA]: Internet Information Services (IIS) IMSAdminBaseW Remote Protocol Specification
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/20/2010
//#
//####

//
//	[MS-IMSA] Secure Session Negotiation Constants
//
//const IMSAdminbaseWHashTextString1 = IIS_Key_Exchange_Phase_3;
//const IMSAdminbaseWHashTextString2 = IIS_Key_Exchange_Phase_4;

//
//	[MS-IMSA] PUBLIC_KEY_BLOB
//

Protocol IMSAdminbaseW = FormatString( "%s %s%s%s%s%s", 
	Property.IMSAdminbaseWMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	( Property.MSRPCPfcFlags & 0x03 ) == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? ", *Un-Interpreted*": "",
	Property.IMSAdminbaseWSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.IMSAdminbaseWSummary : "" )
{
	[Property.IMSAdminbaseWSummary = ""]
	Switch( Property.MSRPCIfUuid )
	{
		Case "{70B51430-B6CA-11D0-B9B9-00A0C922E750}"://IMSAdminBaseW
			[Property.IMSAdminbaseWMethodName = IMSAdminbaseWimsadminbasewMethodNameTable( Property.MSRPCOpnum )]
			_Struct imsadminbasew
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3: IMSAdminbaseWAddKey AddKey;
					Case 4: IMSAdminbaseWDeleteKey DeleteKey;
					Case 5: IMSAdminbaseWDeleteChildKeys DeleteChildKeys;
					Case 6: IMSAdminbaseWEnumKeys EnumKeys;
					Case 7: IMSAdminbaseWCopyKey CopyKey;
					Case 8: IMSAdminbaseWRenameKey RenameKey;
					Case 9: IMSAdminbaseWR_SetData R_SetData;
					Case 10: IMSAdminbaseWR_GetData R_GetData;
					Case 11: IMSAdminbaseWDeleteData DeleteData;
					Case 12: IMSAdminbaseWR_EnumData R_EnumData;
					Case 13: IMSAdminbaseWR_GetAllData R_GetAllData;
					Case 14: IMSAdminbaseWDeleteAllData DeleteAllData;
					Case 15: IMSAdminbaseWCopyData CopyData;
					Case 16: IMSAdminbaseWGetDataPaths GetDataPaths;
					Case 17: IMSAdminbaseWOpenKey OpenKey;
					Case 18: IMSAdminbaseWCloseKey CloseKey;
					Case 19: IMSAdminbaseWChangePermissions ChangePermissions;
					Case 20: IMSAdminbaseWSaveData SaveData;
					Case 21: IMSAdminbaseWGetHandleInfo GetHandleInfo;
					Case 22: IMSAdminbaseWGetSystemChangeNumber GetSystemChangeNumber;
					Case 23: IMSAdminbaseWGetDataSetNumber GetDataSetNumber;
					Case 24: IMSAdminbaseWSetLastChangeTime SetLastChangeTime;
					Case 25: IMSAdminbaseWGetLastChangeTime GetLastChangeTime;
					Case 26: IMSAdminbaseWR_KeyExchangePhase1 R_KeyExchangePhase1;
					Case 27: IMSAdminbaseWR_KeyExchangePhase2 R_KeyExchangePhase2;
					Case 28: IMSAdminbaseWBackup Backup;
					Case 29: IMSAdminbaseWRestore Restore;
					Case 30: IMSAdminbaseWEnumBackups EnumBackups;
					Case 31: IMSAdminbaseWDeleteBackup DeleteBackup;
					Case 32: IMSAdminbaseWUnmarshalInterface UnmarshalInterface;
					Case 33: IMSAdminbaseWR_GetServerGuid R_GetServerGuid;
					Default:
						ReportParserError(ParserErrorProtocolClassWindows, "IMSAdminbaseW", "Unknown imsadminbasew method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
				}
			}
		Case "{8298D101-F992-43B7-8ECA-5052D885B995}"://IMSAdminBase2W
			[Property.IMSAdminbaseWMethodName = IMSAdminbaseWimsadminbasewMethodNameTable( Property.MSRPCOpnum )]
			_Struct imsadminbase2w
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3: IMSAdminbaseWAddKey AddKey;
					Case 4: IMSAdminbaseWDeleteKey DeleteKey;
					Case 5: IMSAdminbaseWDeleteChildKeys DeleteChildKeys;
					Case 6: IMSAdminbaseWEnumKeys EnumKeys;
					Case 7: IMSAdminbaseWCopyKey CopyKey;
					Case 8: IMSAdminbaseWRenameKey RenameKey;
					Case 9: IMSAdminbaseWR_SetData R_SetData;
					Case 10: IMSAdminbaseWR_GetData R_GetData;
					Case 11: IMSAdminbaseWDeleteData DeleteData;
					Case 12: IMSAdminbaseWR_EnumData R_EnumData;
					Case 13: IMSAdminbaseWR_GetAllData R_GetAllData;
					Case 14: IMSAdminbaseWDeleteAllData DeleteAllData;
					Case 15: IMSAdminbaseWCopyData CopyData;
					Case 16: IMSAdminbaseWGetDataPaths GetDataPaths;
					Case 17: IMSAdminbaseWOpenKey OpenKey;
					Case 18: IMSAdminbaseWCloseKey CloseKey;
					Case 19: IMSAdminbaseWChangePermissions ChangePermissions;
					Case 20: IMSAdminbaseWSaveData SaveData;
					Case 21: IMSAdminbaseWGetHandleInfo GetHandleInfo;
					Case 22: IMSAdminbaseWGetSystemChangeNumber GetSystemChangeNumber;
					Case 23: IMSAdminbaseWGetDataSetNumber GetDataSetNumber;
					Case 24: IMSAdminbaseWSetLastChangeTime SetLastChangeTime;
					Case 25: IMSAdminbaseWGetLastChangeTime GetLastChangeTime;
					Case 26: IMSAdminbaseWR_KeyExchangePhase1 R_KeyExchangePhase1;
					Case 27: IMSAdminbaseWR_KeyExchangePhase2 R_KeyExchangePhase2;
					Case 28: IMSAdminbaseWBackup Backup;
					Case 29: IMSAdminbaseWRestore Restore;
					Case 30: IMSAdminbaseWEnumBackups EnumBackups;
					Case 31: IMSAdminbaseWDeleteBackup DeleteBackup;
					Case 32: IMSAdminbaseWUnmarshalInterface UnmarshalInterface;
					Case 33: IMSAdminbaseWR_GetServerGuid R_GetServerGuid;
					Case 34: IMSAdminbaseWBackupWithPasswd BackupWithPasswd;
					Case 35: IMSAdminbaseWRestoreWithPasswd RestoreWithPasswd;
					Case 36: IMSAdminbaseWExport Export;
					Case 37: IMSAdminbaseWImport Import;
					Case 38: IMSAdminbaseWRestoreHistory RestoreHistory;
					Case 39: IMSAdminbaseWEnumHistory EnumHistory;
					Default:
						ReportParserError(ParserErrorProtocolClassWindows, "IMSAdminbase2W", "Unknown imsadminbase2w method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
				}
			}
		Case "{F612954D-3B0B-4C56-9563-227B7BE624B4}"://IMSAdminBase3W
			[Property.IMSAdminbaseWMethodName = IMSAdminbaseWimsadminbasewMethodNameTable( Property.MSRPCOpnum )]
			_Struct imsadminbase3w
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3: IMSAdminbaseWAddKey AddKey;
					Case 4: IMSAdminbaseWDeleteKey DeleteKey;
					Case 5: IMSAdminbaseWDeleteChildKeys DeleteChildKeys;
					Case 6: IMSAdminbaseWEnumKeys EnumKeys;
					Case 7: IMSAdminbaseWCopyKey CopyKey;
					Case 8: IMSAdminbaseWRenameKey RenameKey;
					Case 9: IMSAdminbaseWR_SetData R_SetData;
					Case 10: IMSAdminbaseWR_GetData R_GetData;
					Case 11: IMSAdminbaseWDeleteData DeleteData;
					Case 12: IMSAdminbaseWR_EnumData R_EnumData;
					Case 13: IMSAdminbaseWR_GetAllData R_GetAllData;
					Case 14: IMSAdminbaseWDeleteAllData DeleteAllData;
					Case 15: IMSAdminbaseWCopyData CopyData;
					Case 16: IMSAdminbaseWGetDataPaths GetDataPaths;
					Case 17: IMSAdminbaseWOpenKey OpenKey;
					Case 18: IMSAdminbaseWCloseKey CloseKey;
					Case 19: IMSAdminbaseWChangePermissions ChangePermissions;
					Case 20: IMSAdminbaseWSaveData SaveData;
					Case 21: IMSAdminbaseWGetHandleInfo GetHandleInfo;
					Case 22: IMSAdminbaseWGetSystemChangeNumber GetSystemChangeNumber;
					Case 23: IMSAdminbaseWGetDataSetNumber GetDataSetNumber;
					Case 24: IMSAdminbaseWSetLastChangeTime SetLastChangeTime;
					Case 25: IMSAdminbaseWGetLastChangeTime GetLastChangeTime;
					Case 26: IMSAdminbaseWR_KeyExchangePhase1 R_KeyExchangePhase1;
					Case 27: IMSAdminbaseWR_KeyExchangePhase2 R_KeyExchangePhase2;
					Case 28: IMSAdminbaseWBackup Backup;
					Case 29: IMSAdminbaseWRestore Restore;
					Case 30: IMSAdminbaseWEnumBackups EnumBackups;
					Case 31: IMSAdminbaseWDeleteBackup DeleteBackup;
					Case 32: IMSAdminbaseWUnmarshalInterface UnmarshalInterface;
					Case 33: IMSAdminbaseWR_GetServerGuid R_GetServerGuid;
					Case 34: IMSAdminbaseWBackupWithPasswd BackupWithPasswd;
					Case 35: IMSAdminbaseWRestoreWithPasswd RestoreWithPasswd;
					Case 36: IMSAdminbaseWExport Export;
					Case 37: IMSAdminbaseWImport Import;
					Case 38: IMSAdminbaseWRestoreHistory RestoreHistory;
					Case 39: IMSAdminbaseWEnumHistory EnumHistory;
					Case 40: IMSAdminbaseWGetChildPaths GetChildPaths;
					Default:
						ReportParserError(ParserErrorProtocolClassWindows, "IMSAdminbase3W", "Unknown imsadminbase3w method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
				}
			}
		Case "{29822AB7-F302-11D0-9953-00C04FD919C1}"://IWamAdmin
			[Property.IMSAdminbaseWMethodName = IMSAdminbaseWiwamadminMethodNameTable( Property.MSRPCOpnum )]
			_Struct iwamadmin
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3: IMSAdminbaseWAppCreate AppCreate;
					Case 4: IMSAdminbaseWAppDelete AppDelete;
					Case 5: IMSAdminbaseWAppUnLoad AppUnLoad;
					Case 6: IMSAdminbaseWAppGetStatus AppGetStatus;
					Case 7: IMSAdminbaseWAppDeleteRecoverable AppDeleteRecoverable;
					Case 8: IMSAdminbaseWAppRecover AppRecover;
					Default:
						ReportParserError(ParserErrorProtocolClassWindows, "IWamAdmin", "Unknown iwamadmin2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
				}
			}
		Case "{29822AB8-F302-11D0-9953-00C04FD919C1}"://IWamAdmin2
			[Property.IMSAdminbaseWMethodName = IMSAdminbaseWiwamadminMethodNameTable( Property.MSRPCOpnum )]
			_Struct iwamadmin2
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3: IMSAdminbaseWAppCreate AppCreate;
					Case 4: IMSAdminbaseWAppDelete AppDelete;
					Case 5: IMSAdminbaseWAppUnLoad AppUnLoad;
					Case 6: IMSAdminbaseWAppGetStatus AppGetStatus;
					Case 7: IMSAdminbaseWAppDeleteRecoverable AppDeleteRecoverable;
					Case 8: IMSAdminbaseWAppRecover AppRecover;
					Case 9: IMSAdminbaseWAppCreate2 AppCreate2;
					Default:
						ReportParserError(ParserErrorProtocolClassWindows, "IWamAdmin2", "Unknown iwamadmin2 method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
				}
			}
		Case "{7C4E1804-E342-483D-A43E-A850CFCC8D18}"://IIISApplicationAdmin
			[Property.IMSAdminbaseWMethodName = IMSAdminbaseWIIISApplicationAdminMethodNameTable( Property.MSRPCOpnum )]
			_Struct iiisapplicationadmin
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 3: IMSAdminbaseWCreateApplication CreateApplication;
					Case 4: IMSAdminbaseWDeleteApplication DeleteApplication;
					Case 5: IMSAdminbaseWCreateApplicationPool CreateApplicationPool;
					Case 6: IMSAdminbaseWDeleteApplicationPool DeleteApplicationPool;
					Case 7: IMSAdminbaseWEnumerateApplicationsInPool EnumerateApplicationsInPool;
					Case 8: IMSAdminbaseWRecycleApplicationPool RecycleApplicationPool;
					Case 9: IMSAdminbaseWGetProcessMode GetProcessMode;
					Default:
						ReportParserError(ParserErrorProtocolClassWindows, "IIISApplicationAdmin", "Unknown iiisapplicationadmin method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
				}
			}
		Case "{BD0C73BC-805B-4043-9C30-9A28D64DD7D2}"://IIISCertObj
			[Property.IMSAdminbaseWMethodName = IMSAdminbaseWIIISCertObjMethodNameTable( Property.MSRPCOpnum )]
			_Struct iiiscertobj
			{
				Switch( Property.MSRPCOpnum )
				{
					case 0x03:
						_struct GetTypeInfoCount
						{
							switch(property.MSRPCptype)
							{
								case 0x00:
									_struct Request
									{
									}
								case 0x02:
									_struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													UINT32 pctInfo;
													[RAPRDecomResult = HResult.ToString]
													HRESULT HResult;
												}
										}
									}
							}
						}
					case 0x04:
						_struct GetTypeInfo
						{
							switch(property.MSRPCptype)
							{
								case 0x00:
									_struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													UINT32 iTInfo;
													OLEAUTLCID Lcid;
												}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													NdrPtr pTInfo;
													switch
													{
														case pTInfo.ReferentID:
															DCOMMInterfacePointer TInfo;
													}
													[RAPRDecomResult = HResult.ToString]
													HRESULT HResult;
															}
										}
									}
							}
						}
					case 0x05:
						_struct GetIDsOfNames
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
									_struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													OLEAUTRefIId riid;
													NdrConformant NamesCount;
													OLEAUTLPOLESTR(NamesCount.MaxCount) rgszNames;
													Align4 pad;
													UINT32 cNames;
													OLEAUTLCID lcid;
												}
										}
									}
								case 0x02:
									_struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
											Default:
												struct
												{
													NdrConformant prgDispId;
													OLEAUTDISPID rgDispId[prgDispId.MaxCount];
													[RAPRDecomResult = HResult.ToString]
													HRESULT HResult;
												}
										}
									}
							}
						}
					case 0x06:
						_struct Invoke
						{
							switch (Property.MSRPCptype)
							{
								case 0x00:
								_struct Request
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										Default:
											struct
											{
												OLEAUTDISPID dispIdMember;
												OLEAUTRefIId riid;
												OLEAUTLCID lcid;
												switch( Property.MSRPCByteOrder )
												{
													case LittleEndian:
														_struct LittleEndian
														{
															UINT32 dwFlags
															{
																[Local.InvocationType = this ? "Method" : Local.InvocationType]
																UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
																[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
																UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
																[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
																UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
																[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
																UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "Not changed by a value assignment");
																UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
																UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
																UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
																UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
																UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
															}
														}
													default:
														_struct BigEndian
														{
															UINT32 dwFlags
															{
																UINT32 Reserved2:12 = FormatString("     (%s)", this.ToBitString);
																UINT32 ZeroArgErr:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Not interested in the actual pArgerr argument" : "Interested in the actual pArgerr argument");
																UINT32 ZeroExcepInfo:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pExcepInfo argument" : "Interested in the actual pExcepInfo argument");
																UINT32 ZeroVarResult:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Not interested in the actual pVarResult argument" : "Interested in the actual pVarResult argument");
																UINT32 Reserved1:13 = FormatString("     (%s)", this.ToBitString);
																[Local.InvocationType = this ? "PropertyPutRef" : Local.InvocationType]
																UINT32 PropertyPutRef:1 = FormatString("(%s) %s", this.ToBitString, this ? "Changed by a reference assignment" : "changed by a value assignment");
																[Local.InvocationType = this ? "PropertyPut" : Local.InvocationType]
																UINT32 PropertyPut:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Changed as a property or data member" : "Not changed as a property or data member");
																[Local.InvocationType = this ? "PropertyGet" : Local.InvocationType]
																UINT32 PropertyGet:1 = FormatString("   (%s) %s", this.ToBitString, this ? "Retrieved as a property or data membe" : "Not retrieved as a property or data membe");
																[Local.InvocationType = this ? "Method" : Local.InvocationType]
																UINT32 Method:1 = FormatString("        (%s) %s", this.ToBitString, this ? "Invoked as a method" : "Not invoked as a method");
															}
														}
												}
												[Local.DecomParameters = FormatString("dispIdMemeber = %s, InvocationType = %s", dispIdMember.ToString, Local.InvocationType)]
												OLEAUTDISPPARAMS DispParams;
												UINT32 cVarRef;
												NdrConformant VarRefIdxConformant;
												UINT32 rgVarRefIdx[VarRefIdxConformant.MaxCount];
												OLEAUTSafeArrVariant VarRef;
											}
									}
								}
								case 0x02:
								_struct Response
								{
									Switch
									{
										Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
										Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob( FrameLength - FrameOffset ) EncryptedData;
										Default:
											struct
											{
												OLEAUTVariant VarResult;
												NdrAlign pad;
												OLEAUTExcepInfo ExcepInfo;
												UINT32 Argerr;
												OLEAUTSafeArrVariant rgVarRef;
												Align4 padding;
												[RAPRDecomResult = HResult.ToString]
												HRESULT HResult;
											}
									}
								}
							}
						}
					Case 10: IMSAdminbaseWInstanceName InstanceName;
					Case 12: IMSAdminbaseWIsInstalledRemote IsInstalledRemote;
					Case 14: IMSAdminbaseWIsExportableRemote IsExportableRemote;
					Case 16: IMSAdminbaseWGetCertInfoRemote GetCertInfoRemote;
					Case 22: IMSAdminbaseWImportFromBlob ImportFromBlob;
					Case 23: IMSAdminbaseWImportFromBlobGetHash ImportFromBlobGetHash;
					Case 25: IMSAdminbaseWExportToBlob ExportToBlob;
					Case 7:
					Case 8:
					Case 9:
					Case 11:
					Case 13:
					Case 15:
					Case 17:
					Case 18:
					Case 19:
					Case 20:
					Case 21:
					Case 24:
						Struct NotUsedOnWire
						{
							Switch (property.MSRPCPType)
							{
								Case 0x00:// REQUEST
								[post.Description = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
								Struct Request 
								{
									ReportParserWarning("IMSAdminbaseW", "Invalid imsadiminbasew method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
									Blob(FrameLength - Offset) PayloadData;
								}
									
								Case 0x02:// RESPONSE
								[post.Description = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
								Struct Response
								{
									ReportParserWarning("IMSAdminbaseW", "Invalid imsadiminbasew method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
									Blob(FrameLength - Offset) PayloadData;
								}
							}
						}
					Default:
						ReportParserError(ParserErrorProtocolClassWindows, "IIISCertObj", "Unknown iiiscertobj method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
				}
			}
	}
}

Struct IMSAdminbaseWPublicKeyBlob
{
	UINT32 PublicKeyBlobDataLength;
    UINT32 Reserved1;  
	UINT8 Type;
	UINT8 Version;
	UINT16 Reserved2;
	UINT32 AlgID = IMSAdminbaseWPublicKeyBlobAlgIDTable( this );
	UINT32 Magic;
	[property.BitLength]
	UINT32 BitLen;
	UINT32 PubExp;
	Blob(BitLen/8) Modulus;
}

Table IMSAdminbaseWPublicKeyBlobAlgIDTable( Value )
{
	Switch( Value )
	{
		Case 0x0000A400: "CALG_RSA_KEYX - RSA public key exchange algorithm";
		Case 0x00002400: "CALG_RSA_SIGN - RSA public key signature algorithm";
		Default: "unknown";
	}
}

//
//	[MS-IMSA] SESSION_KEY_BLOB
//
Struct IMSAdminbaseWSessionKeyBlob
{
	[property.IMSAEncryptedSessionKeyLength]
	UINT32 EncryptedSessionKeyLength;
	UINT32 SignedHashLength;
	IMSAdminbaseWEncryptedSessionKeyBlob EncryptedSessionKey;
	Align8 Padding;
	Blob(SignedHashLength) SignedHash;
}

//
//	[MS-IMSA] ENCRYPTED_SESSION_KEY_BLOB
//
Struct IMSAdminbaseWEncryptedSessionKeyBlob
{
	UINT8 Type;
	UINT8 Version;
	UINT16 Reserved;
	UINT32 AlgID = IMSAdminbaseWEncryptedSessionKeyBlobAlgIDTable( this );
	UINT32 EncryptAlgID = IMSAdminbaseWEncryptedSessionKeyBlobEncryptAlgIDTable( this );
	Blob(property.IMSAEncryptedSessionKeyLength - 12) SessionKey;
}

Table IMSAdminbaseWEncryptedSessionKeyBlobAlgIDTable( Value )
{
	Switch( Value )
	{
		Case 0x0000a400: "CALG_RC4 - The RC4 stream encryption algorithm.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWEncryptedSessionKeyBlobEncryptAlgIDTable( Value )
{
	Switch( Value )
	{
		Case 0x0000a400: "CALG_RSA_KEYX - The RSA public key exchange algorithm.";
		Default: "unknown";
	}
}

//
//	[MS-IMSA] HASH_BLOB
//
Struct IMSAdminbaseWHashBlob
{
	UINT32 HashDataLength;
	UINT32 Reserved;
	Blob(HashDataLength) HashData;
}

//
//	[MS-IMSA] CLEARTEXT_DATA_BLOB
//
Struct IMSAdminbaseWCleartextDataBlob(BlobDataLength)
{
	Blob(BlobDataLength) ClearTextData;
}

//
//	[MS-IMSA] ENCRYPTED_DATA_BLOB
//
Struct IMSAdminbaseWEncryptedDataBlob
{
	UINT32 EncryptedDataLength;
	UINT32 SignedHashLength;
	IMSAdminbaseWCleartextWithPrefixBlob(EncryptedDataLength) EncryptedData;
	Align8 Padding;
	Blob(SignedHashLength) SignedHash;
}

//
//	[MS-IMSA] CLEARTEXT_WITH_PREFIX_BLOB
//
Struct IMSAdminbaseWCleartextWithPrefixBlob(EncryptedDataLength)
{
	UINT32 Reserved;
	Blob(EncryptedDataLength-4) ClearTextData;
}

//
//	[MS-IMSA] IIS_CRYPTO_BLOB
//	Alignment : NdrAlign
//
Struct IMSAdminbaseWIisCryptoBlob
{
	NdrConformant BlobDataLengthc;
	UINT32 BlobSignature = IMSAdminbaseWIisCryptoBlobBlobSignatureTable( this );
	UINT32 BlobDataLength;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
	switch(BlobSignature)
	{
		case 0x624b6349:
			IMSAdminbaseWSessionKeyBlob SessionKeyBlob;
		case 0x62506349:
			IMSAdminbaseWPublicKeyBlob PublicKeyBlob;
		case 0x62446349:
			IMSAdminbaseWEncryptedDataBlob EncryptedDataBlob;
		case 0x62486349:
			IMSAdminbaseWHashBlob HashBlob;
		case 0x62436349:
			IMSAdminbaseWCleartextDataBlob(BlobDataLength) CleartextDataBlob;
		default:
			Blob(BlobDataLength) UnknownIisCryptoBlob;
	}
}

Table IMSAdminbaseWIisCryptoBlobBlobSignatureTable( Value )
{
	Switch( Value )
	{
		Case 0x624b6349: "SESSION_KEY_BLOB_SIGNATURE - The BlobData contains the session key used to encrypt sensitive data exchanged between client and server. See section SESSION_KEY_BLOB for more information about  the BlobData layout.";
		Case 0x62506349: "PUBLIC_KEY_BLOB_SIGNATURE - The BlobData contains the public key for a particular IIS encryption behavior. See section PUBLIC_KEY_BLOB for more information about the  BlobData layout.";
		Case 0x62446349: "ENCRYPTED_DATA_BLOB_SIGNATURE - The BlobData contains encrypted data. See section ENCRYPTED_DATA_BLOB for more information about the  BlobData layout.";
		Case 0x62486349: "HASH_BLOB_SIGNATURE - The BlobData contains a hash. See section HASH_BLOB for more information about the  BlobData layout.";
		Case 0x62436349: "CLEARTEXT_DATA_BLOB_SIGNATURE - The BlobData contains clear text data. See section CLEARTEXT DATA_BLOB for more information about the  BlobData layout.";
		Default: "unknown";
	}
}

//
//	[MS-IMSA] METADATA_GETALL_RECORD
//	Alignment : 4
//
Struct IMSAdminbaseWMetadataGetallRecord//?
{
	UINT32 MDIdentifier;
	UINT32 MDAttributes
	{
		UINT32 Inherit : 1 = FormatString("   (%s)%s",this.toBitString,this?"METADATA_INHERIT":"METADATA_NO_ATTRIBUTES");
		UINT32 Path : 1 = FormatString("      (%s)%s",this.toBitString,this?"METADATA_PARTIAL_PATH":"");
		UINT32 Secure : 1 = FormatString("    (%s)%s",this.toBitString,this?"METADATA_SECURE":"");
		UINT32 Reserved4 : 1 = FormatString(" (%s)%s",this.toBitString,"Reserved");
		UINT32 Volatile : 1 = FormatString("  (%s)%s",this.toBitString,this?"METADATA_VOLATILE":"");
		UINT32 IsInherit : 1 = FormatString(" (%s)%s",this.toBitString,this?"METADATA_ISINHERITED":"");
		UINT32 InsertPath : 1 = FormatString("(%s)%s",this.toBitString,this?"METADATA_INSERT_PATH":"");
		UINT32 Reserved8 : 25= FormatString(" (%s)%s",this.toBitString,"Reserved");
	};
	UINT32 MDUserType = IMSAdminbaseWMetadataGetallRecordMDUserTypeTable( this );
	UINT32 MDDataType = IMSAdminbaseWMetadataGetallRecordMDDataTypeTable( this );
	UINT32 MDDataLen;
	UINT32 MDDataOffset;
	UINT32 MDDataTag;
}
          
Table IMSAdminbaseWMetadataGetallRecordMDAttributesTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "METADATA_INHERIT - In Get methods: return the inheritable data. In Set methods: the data can be inherited.";
		Case 0x00000040: "METADATA_INSERT_PATH - For a string data item.In Get methods: replace all occurrences of <%INSERT_PATH%> with the path of the data item relative to the handle.In Set methods: indicates that the string contains the Unicode character substring <%INSERT_PATH%>.";
		Case 0x00000020: "METADATA_ISINHERITED - In Get methods: mark the data items that were inherited. In Set methods: not valid.";
		Case 0x00000000: "METADATA_NO_ATTRIBUTES - In Get methods: not applicable. Data is returned regardless of this flag setting.In Set methods: the data does not have any attributes.";
		Case 0x00000002: "METADATA_PARTIAL_PATH - In Get methods: return any inherited data even if the entire path is not present. This flag is valid only if METADATA_INHERIT is also set.In Set methods: not valid.";
		Case 0x00000004: "METADATA_SECURE - In Get methods: not valid.In Set methods: the server and client SHOULD transport and store the data in a secure fashion, as defined in .";
		Case 0x00000010: "METADATA_VOLATILE - In Get methods: not valid. In Set methods: do not save the data in long-term storage.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWMetadataGetallRecordMDUserTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000065: "ASP_MD_UT_APP - The entry contains information specific to ASP application configuration.";
		Case 0x00000002: "IIS_MD_UT_FILE - The entry contains information about a file, such as access permissions or logon methods.";
		Case 0x00000001: "IIS_MD_UT_SERVER - The entry contains information specific to the server, such as ports in use and IP addresses.";
		Case 0x00000064: "IIS_MD_UT_WAM - The entry contains information specific to Web Application Management (WAM).";
		Default: "unknown";
	}
}

Table IMSAdminbaseWMetadataGetallRecordMDDataTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ALL_METADATA - Specifies all data, regardless of type.";
		Case 0x00000003: "BINARY_METADATA - Specifies binary data in any form.";
		Case 0x00000001: "DWORD_METADATA - Specifies all DWORD (unsigned 32-bit integer) data.";
		Case 0x00000004: "EXPANDSZ_METADATA - Specifies all data that consists of a string that includes the NULL-terminating character, and which contains environment variables that are not expanded.";
		Case 0x00000005: "MULTISZ_METADATA - Specifies all data represented as an array of strings, where each string includes the NULL-terminating character, and the array itself is  terminated by two NULL-terminating characters.";
		Case 0x00000002: "STRING_METADATA - Specifies all data consisting of an ASCII string that includes the NULL-terminating character.";
		Default: "unknown";
	}
}

//
//	[MS-IMSA] METADATA_HANDLE_INFO
//	Alignment : 4
//
Struct IMSAdminbaseWMetadataHandleInfo
{
	UINT32 MDPermissions = IMSAdminbaseWMetadataHandleInfoMDPermissionsTable( this );
	UINT32 MDSystemChangeNumber;
}

Table IMSAdminbaseWMetadataHandleInfoMDPermissionsTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "METADATA_PERMISSION_READ - The handle can read nodes and data.";
		Case 0x00000002: "METADATA_PERMISSION_WRITE - The handle can write nodes and data.";
		Default: "unknown";
	}
}

//
//	[MS-IMSA] METADATA_RECORD
//	Alignment : NdrAlign
//
Struct IMSAdminbaseWMetadataRecord
{
	UINT32 MDIdentifier;
	UINT32 MDAttributes
	{
		UINT32 Inherit : 1 = FormatString("   (%s)%s",this.toBitString,this?"METADATA_INHERIT":"METADATA_NO_ATTRIBUTES");
		UINT32 Path : 1 = FormatString("      (%s)%s",this.toBitString,this?"METADATA_PARTIAL_PATH":"");
		UINT32 Secure : 1 = FormatString("    (%s)%s",this.toBitString,this?"METADATA_SECURE":"");
		UINT32 Reserved4 : 1 = FormatString(" (%s)%s",this.toBitString,"Reserved");
		UINT32 Volatile : 1 = FormatString("  (%s)%s",this.toBitString,this?"METADATA_VOLATILE":"");
		UINT32 IsInherit : 1 = FormatString(" (%s)%s",this.toBitString,this?"METADATA_ISINHERITED":"");
		UINT32 InsertPath : 1 = FormatString("(%s)%s",this.toBitString,this?"METADATA_INSERT_PATH":"");
		UINT32 Reserved8 : 25= FormatString(" (%s)%s",this.toBitString,"Reserved");
	};
	UINT32 MDUserType = IMSAdminbaseWMetadataRecordMDUserTypeTable( this );
	UINT32 MDDataType = IMSAdminbaseWMetadataRecordMDDataTypeTable( this );
	UINT32 MDDataLen;
	NDRPTR MDDataPtr;
	UINT32 MDDataTag;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
	Switch 
	{
		Case MDDataPtr.ReferentID > 0: 
		_struct metadata
		{
			UINT32 DataLength;
			switch(MDDataType)
			{
				case 0:
				case 3:
				case 1:
					BLOB(DataLength) MdBLOBData;
				case 2://TD AsciiString?
				case 4:
				case 5:
					[DataFieldByteOrder = LittleEndian]
					UnicodeString(DataLength/2) StringData;
			}
		}
	}
}

Table IMSAdminbaseWMetadataRecordMDAttributesTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "METADATA_INHERIT - In Get methods: return inheritable data.In Set methods: the data can be inherited.";
		Case 0x00000040: "METADATA_INSERT_PATH - For a string data item.In Get methods: replace all occurrences of <%INSERT_PATH%> with the path of the data item relative to the handle.In Set methods: indicates that the string contains the Unicode character substring <%INSERT_PATH%>.";
		Case 0x00000020: "METADATA_ISINHERITED - In Get methods: mark data items that were inherited.In Set methods: not valid.";
		Case 0x00000000: "METADATA_NO_ATTRIBUTES - In Get methods: not applicable. Data is returned regardless of this flag setting.In Set methods: the data does not have any attributes.";
		Case 0x00000002: "METADATA_PARTIAL_PATH - In Get methods: return any inherited data even if the entire path is not present. This flag is valid only if METADATA_INHERIT is also set.In Set methods it is not valid.";
		Case 0x00000004: "METADATA_SECURE - In Get methods: not valid.In Set methods: store and transport the data in a secure fashion, defined in";
		Case 0x00000010: "METADATA_VOLATILE - In Get methods: not valid.In Set methods: do not save the data in long-term storage.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWMetadataRecordMDUserTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000065: "ASP_MD_UT_APP - The entry contains information specific to ASP application configuration.";
		Case 0x00000002: "IIS_MD_UT_FILE - The entry contains information about a file, such as access permissions or logon methods.";
		Case 0x00000001: "IIS_MD_UT_SERVER - The entry contains information specific to the server, such as ports in use and IP addresses.";
		Case 0x00000064: "IIS_MD_UT_WAM - The entry contains information specific to Web application management.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWMetadataRecordMDDataTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ALL_METADATA - Specifies all data, regardless of type.";
		Case 0x00000003: "BINARY_METADATA - Specifies binary data in any form.";
		Case 0x00000001: "DWORD_METADATA - Specifies all DWORD(unsigned 32-bit integer) data.";
		Case 0x00000004: "EXPANDSZ_METADATA - Specifies all data that consists of a string that includes the NULL-terminating character, and which contains environment variables that are not expanded.";
		Case 0x00000005: "MULTISZ_METADATA - Specifies all data represented as an array of strings, where each string includes the NULL-terminating character, and the array itself is  terminated by two NULL-terminating characters.";
		Case 0x00000002: "STRING_METADATA - Specifies all data consisting of an ASCII string that includes the NULL-terminating character.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWimsadminbasewMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "AddKey";
		Case 4: "DeleteKey";
		Case 5: "DeleteChildKeys";
		Case 6: "EnumKeys";
		Case 7: "CopyKey";
		Case 8: "RenameKey";
		Case 9: "R_SetData";
		Case 10: "R_GetData";
		Case 11: "DeleteData";
		Case 12: "R_EnumData";
		Case 13: "R_GetAllData";
		Case 14: "DeleteAllData";
		Case 15: "CopyData";
		Case 16: "GetDataPaths";
		Case 17: "OpenKey";
		Case 18: "CloseKey";
		Case 19: "ChangePermissions";
		Case 20: "SaveData";
		Case 21: "GetHandleInfo";
		Case 22: "GetSystemChangeNumber";
		Case 23: "GetDataSetNumber";
		Case 24: "SetLastChangeTime";
		Case 25: "GetLastChangeTime";
		Case 26: "R_KeyExchangePhase1";
		Case 27: "R_KeyExchangePhase2";
		Case 28: "Backup";
		Case 29: "Restore";
		Case 30: "EnumBackups";
		Case 31: "DeleteBackup";
		Case 32: "UnmarshalInterface";
		Case 33: "R_GetServerGuid";
		Case 34: "BackupWithPasswd";
		Case 35: "RestoreWithPasswd";
		Case 36: "Export";
		Case 37: "Import";
		Case 38: "RestoreHistory";
		Case 39: "EnumHistory";
		Case 40: "GetChildPaths";
		Default: "unknown";
	}
}

Table IMSAdminbaseWiwamadminMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "AppCreate";
		Case 4: "AppDelete";
		Case 5: "AppUnLoad";
		Case 6: "AppGetStatus";
		Case 7: "AppDeleteRecoverable";
		Case 8: "AppRecover";
		Case 9: "AppCreate2";
		Default: "unknown";
	}
}

Table IMSAdminbaseWiiisapplicationadminMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 3: "CreateApplication";
		Case 4: "DeleteApplication";
		Case 5: "CreateApplicationPool";
		Case 6: "DeleteApplicationPool";
		Case 7: "EnumerateApplicationsInPool";
		Case 8: "RecycleApplicationPool";
		Case 9: "GetProcessMode";
		Default: "unknown";
	}
}

Table IMSAdminbaseWiiiscertobjMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 7: "Opnum7NotUsedByProtocol";
		Case 8: "Opnum8NotUsedByProtocol";
		Case 9: "Opnum9NotUsedByProtocol";
		Case 10: "InstanceName (Set)";
		Case 11: "Opnum11NotUsedByProtocol";
		Case 12: "IsInstalledRemote";
		Case 13: "Opnum13NotUsedByProtocol";
		Case 14: "IsExportableRemote";
		Case 15: "Opnum15NotUsedByProtocol";
		Case 16: "GetCertInfoRemote";
		Case 17: "Opnum17NotUsedByProtocol";
		Case 18: "Opnum18NotUsedByProtocol";
		Case 19: "Opnum19NotUsedByProtocol";
		Case 20: "Opnum20NotUsedByProtocol";
		Case 21: "Opnum21NotUsedByProtocol";
		Case 22: "ImportFromBlob";
		Case 23: "ImportFromBlobGetHash";
		Case 24: "Opnum24NotUsedByProtocol";
		Case 25: "ExportToBlob";
		Default: "unknown";
	}
}

//
//	[MS-IMSA] METADATA_HANDLE
//	Alignment : 4
//
struct IMSMetaDataHandle
{
	UINT32 MDHandle;
}

//
//	[MS-IMSA] AddKey (Opnum 3)
//
Struct IMSAdminbaseWAddKey = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s", MDHandle.MDHandle, MDPath.toString)]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle mdHandle;
							NdrWIDESTRINGPtr MDPath;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] DeleteKey (Opnum 4)
//
Struct IMSAdminbaseWDeleteKey = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s", MDHandle.MDHandle, MDPath.toString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] DeleteChildKeys (Opnum 5)
//
Struct IMSAdminbaseWDeleteChildKeys = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s", MDHandle.MDHandle, MDPath.toString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] EnumKeys (Opnum 6)
//
Struct IMSAdminbaseWEnumKeys = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s MDEnumObjectIndex=0x%X", MDHandle.MDHandle, MDPath.toString, MDEnumObjectIndex )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							UINT32 MDEnumObjectIndex;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							Ndrconformant Maxcount;
							switch
							{
								case Maxcount.Maxcount > 0:
									unicodestring(Maxcount.Maxcount)  MdName;
							}
							Align4 Pad;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] CopyKey (Opnum 7)
//
Struct IMSAdminbaseWCopyKey = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDSourceHandle=0x%X MDSourcePath=%s MDDestHandle=0x%X MDDestPath=%s", MDSourceHandle.MDHandle, MDSourcePath.toString, MDDestHandle.MDHandle, MDDestPath.toString)]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDSourceHandle;
							NdrWIDESTRINGPtr MDSourcePath;
							Align4 Pad1;
							IMSMetaDataHandle MDDestHandle;
							NdrWIDESTRINGPtr MDDestPath;
							Align4 Pad2;
							BOOL MDOverwriteFlag;
							BOOL MDCopyFlag;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] RenameKey (Opnum 8)
//
Struct IMSAdminbaseWRenameKey = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s MDNewName=%s", MDHandle.MDHandle, MDPath.toString, MDNewName.toString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							NdrWIDESTRINGPtr MDNewName;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] R_SetData (Opnum 9)
//
Struct IMSAdminbaseWR_SetData = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s", MDHandle.MDHandle, MDPath.toString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							NdrAlign pad;
							IMSAdminbaseWMetadataRecord PmdrMDData;
//							NdrPtr PointerPmdrData;
//							switch
//							{
//								case PointerPmdrData.referentID >0:IMSAdminbaseWMetadataRecord PmdrMDData;
//							}
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] R_GetData (Opnum 10)
//
Struct IMSAdminbaseWR_GetData = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s", MDHandle.MDHandle, MDPath.toString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							NdrAlign pad;
							IMSAdminbaseWMetadataRecord PmdrMDData;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "MDRequiredDataLen=0x%X", MDRequiredDataLen )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSAdminbaseWMetadataRecord PmdrMDData;
							Align4 pad1;
							UINT32 MDRequiredDataLen;
							IMSAdminbaseWIisCryptoBlobPtr DataBlob;
							Align4 Pad2;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] DeleteData (Opnum 11)
//
Struct IMSAdminbaseWDeleteData = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s MDIdentifier=0x%X MDDataType=0x%X", MDHandle.MDHandle, MDPath.toString, MDIdentifier, MDDataType )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							UINT32 MDIdentifier;
							UINT32 MDDataType = IMSAdminbaseWDeleteDataMDDataTypeTable( this );
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] R_EnumData (Opnum 12)
//
Struct IMSAdminbaseWR_EnumData = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s MDEnumDataIndex=0x%X", MDHandle.MDHandle, MDPath.toString, MDEnumDataIndex )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							NdrAlign pad1;
							IMSAdminbaseWMetadataRecord PmdrMDData;
							Align4 pad2;
							UINT32 MDEnumDataIndex;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "MDRequiredDataLength=0x%X", MDRequiredDataLength )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSAdminbaseWMetadataRecord PmdrMDData;
							Align4 pad1;
							UINT32 MDRequiredDataLength;
							IMSAdminbaseWIisCryptoBlobPtr DataBlob;
							Align4 pad2;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] R_GetAllData (Opnum 13)
//
Struct IMSAdminbaseWR_GetAllData = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDAttributes=0x%X MDUserType=0x%X MDDataType=0x%X MDBufferSize=0x%X", MDHandle.MDHandle, MDAttributes, MDUserType, MDDataType, MDBufferSize )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWideStringPtr MDPath;
							Align4 Pad;
							UINT32 MDAttributes
							{
								UINT32 Inherit : 1 = FormatString("   (%s)%s",this.toBitString,this?"METADATA_INHERIT":"METADATA_NO_ATTRIBUTES");
								UINT32 Path : 1 = FormatString("      (%s)%s",this.toBitString,this?"METADATA_PARTIAL_PATH":"");
								UINT32 Secure : 1 = FormatString("    (%s)%s",this.toBitString,this?"METADATA_SECURE":"");
								UINT32 Reserved4 : 1 = FormatString(" (%s)%s",this.toBitString,"Reserved");
								UINT32 Volatile : 1 = FormatString("  (%s)%s",this.toBitString,this?"METADATA_VOLATILE":"");
								UINT32 IsInherit : 1 = FormatString(" (%s)%s",this.toBitString,this?"METADATA_ISINHERITED":"");
								UINT32 InsertPath : 1 = FormatString("(%s)%s",this.toBitString,this?"METADATA_INSERT_PATH":"");
								UINT32 Reserved8 : 25= FormatString(" (%s)%s",this.toBitString,"Reserved");
							};
							UINT32 MDUserType = IMSAdminbaseWR_GetAllDataMDUserTypeTable( this );
							UINT32 MDDataType = IMSAdminbaseWR_GetAllDataMDDataTypeTable( this );
							UINT32 MDBufferSize;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "MDNumDataEntries=0x%X MDDataSetNumber=0x%X MDRequiredBufferSize=0x%X", MDNumDataEntries, MDDataSetNumber, MDRequiredBufferSize )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							UINT32 MDNumDataEntries;
							UINT32 MDDataSetNumber;
							//IMSAdminbaseWMetadataGetallRecord MDRequiredBufferSize[MDNumDataEntries];
							UINT32 MDRequiredBufferSize;
							IMSAdminbaseWIisCryptoBlobPtr DataBlob;
							Align4 Padding;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

Table IMSBlobSignatureTable(value)
{
	switch(value)
	{
		case 0x624b6349: "SESSION_KEY_BLOB_SIGNATURE";
		case 0x62506349: "PUBLIC_KEY_BLOB_SIGNATURE";
		case 0x62446349: "ENCRYPTED_DATA_BLOB_SIGNATURE";
		case 0x62486349: "HASH_BLOB_SIGNATURE";
		case 0x62436349: "CLEARTEXT_DATA_BLOB_SIGNATURE";
		default: "Unknown Data";
	}
}

struct IMSAdminbaseWIisCryptoBlobPtr
{
	NdrPtr Pointertothis;
	switch
	{
		case Pointertothis.ReferentID > 0:
		_struct
		{
			IMSAdminbaseWIisCryptoBlob IIsCryptoBlob;
		}
	}
}

//
//	[MS-IMSA] DeleteAllData (Opnum 14)
//
Struct IMSAdminbaseWDeleteAllData = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s", MDHandle.MDHandle, MDPath.toString)]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							UINT32 MDUserType = IMSAdminbaseWDeleteAllDataMDUserTypeTable( this );
							UINT32 MDDataType = IMSAdminbaseWDeleteAllDataMDDataTypeTable( this );
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] CopyData (Opnum 15)
//
Struct IMSAdminbaseWCopyData = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDSourceHandle=0x%X MDSourcePath=%s MDDestHandle=0x%X MDDestPath=%s MDAttributes=0x%X MDUserType=0x%X MDDataType=0x%X MDCopyFlag=0x%X", MDSourceHandle.MDHandle, MDSourcePath.ToString, MDDestHandle.MDHandle, MDDestPath.ToString, MDAttributes, MDUserType, MDDataType, MDCopyFlag )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDSourceHandle;
							NdrWIDESTRINGPtr MDSourcePath;
							Align4 Pad1;
							IMSMetaDataHandle MDDestHandle;
							NdrWIDESTRINGPtr MDDestPath;
							Align4 Pad2;
							UINT32 MDAttributes;
							UINT32 MDUserType = IMSAdminbaseWCopyDataMDUserTypeTable( this );
							UINT32 MDDataType = IMSAdminbaseWCopyDataMDDataTypeTable( this );
							BOOL MDCopyFlag;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] GetDataPaths (Opnum 16)
//
Struct IMSAdminbaseWGetDataPaths = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s MDIdentifier=0x%X MDDataType=0x%X MDBufferSize=0x%X", MDHandle.MDHandle, MDPath.toString, MDIdentifier, MDDataType, MDBufferSize )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							UINT32 MDIdentifier;
							UINT32 MDDataType = IMSAdminbaseWGetDataPathsMDDataTypeTable( this );
							UINT32 MDBufferSize;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "MDRequiredBufferSize=0x%X", MDRequiredBufferSize )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							Ndrconformant Maxcount;
							switch
							{
								case Maxcount.Maxcount > 0:
									wchar  PointerHistoryLocation[Maxcount.Maxcount];
							}
							Align4 pad;
							UINT32 MDRequiredBufferSize;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] OpenKey (Opnum 17)
//
Struct IMSAdminbaseWOpenKey = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s MDAccessRequested=0x%X MDTimeOut=0x%X", MDHandle.MDHandle, MDPath.toString, MDAccessRequested, MDTimeOut )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetadataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							UINT32 MDAccessRequested = IMSAdminbaseWOpenKeyMDAccessRequestedTable( this );
							UINT32 MDTimeOut;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "MDNewHandle=0x%X", MDNewHandle )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetadataHandle MDNewHandle;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] CloseKey (Opnum 18)
//
Struct IMSAdminbaseWCloseKey = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X", MDHandle.MDHandle )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] ChangePermissions (Opnum 19)
//
Struct IMSAdminbaseWChangePermissions = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDTimeOut=0x%X MDAccessRequested=0x%X", MDHandle.MDHandle, MDTimeOut, MDAccessRequested )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							UINT32 MDTimeOut;
							UINT32 MDAccessRequested = IMSAdminbaseWChangePermissionsMDAccessRequestedTable( this );
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] SaveData (Opnum 20)
//
Struct IMSAdminbaseWSaveData = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] GetHandleInfo (Opnum 21)
//
Struct IMSAdminbaseWGetHandleInfo = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X", MDHandle.MDHandle )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSAdminbaseWMetadataHandleInfo PmdhiInfo;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] GetSystemChangeNumber (Opnum 22)
//
Struct IMSAdminbaseWGetSystemChangeNumber = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "SystemChangeNumber=0x%X", SystemChangeNumber )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							UINT32 SystemChangeNumber;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] GetDataSetNumber (Opnum 23)
//
Struct IMSAdminbaseWGetDataSetNumber = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s", MDHandle.MDHandle, MDPath.toString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "MDDataSetNumber=0x%X", MDDataSetNumber )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							UINT32 MDDataSetNumber;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] SetLastChangeTime (Opnum 24)
//
Struct IMSAdminbaseWSetLastChangeTime = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s LocalTime=0x%X", MDHandle.MDHandle, MDPath.toString, LocalTime )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							FILETIME MDLastChangeTime;
							BOOL LocalTime;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] GetLastChangeTime (Opnum 25)
//
Struct IMSAdminbaseWGetLastChangeTime = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHandle=0x%X MDPath=%s LocalTime=0x%X", MDHandle.MDHandle, MDPath.toString, LocalTime )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							BOOL LocalTime;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							FILETIME MDLastChangeTime;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] R_KeyExchangePhase1 (Opnum 26)
//
Struct IMSAdminbaseWR_KeyExchangePhase1 = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSAdminbaseWIisCryptoBlobPtr ClientSignatureKeyBlob;
							IMSAdminbaseWIisCryptoBlobPtr ClientKeyExchangeKeyBlob;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSAdminbaseWIisCryptoBlobPtr ServerKeyExchangeKeyBlob;
							IMSAdminbaseWIisCryptoBlobPtr ServerSignatureKeyBlob;
							IMSAdminbaseWIisCryptoBlobPtr ServerSessionKeyBlob;
							Align4 pad;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] R_KeyExchangePhase2 (Opnum 27)
//
Struct IMSAdminbaseWR_KeyExchangePhase2 = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSAdminbaseWIisCryptoBlobPtr ClientSessionKeyBlob;
							IMSAdminbaseWIisCryptoBlobPtr ClientHashBlob;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSAdminbaseWIisCryptoBlobPtr IISCrtpttoBlob;
							Align4 pad;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] Backup (Opnum 28)
//
Struct IMSAdminbaseWBackup = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDBackupLocation=%s MDVersion=0x%X MDFlags=0x%X", MDBackupLocation.ToString, MDVersion, MDFlags )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDBackupLocation;
							Align4 Pad;
							UINT32 MDVersion = IMSAdminbaseWBackupMDVersionTable( this );
							UINT32 MDFlags = IMSAdminbaseWBackupMDFlagsTable( this );
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] Restore (Opnum 29)
//
Struct IMSAdminbaseWRestore = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDBackupLocation=%s MDVersion=0x%X MDFlags=0x%X", MDBackupLocation.ToString, MDVersion, MDFlags )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDBackupLocation;
							Align4 Pad;
							UINT32 MDVersion = IMSAdminbaseWRestoreMDVersionTable( this );
							UINT32 MDFlags;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] EnumBackups (Opnum 30)
//
Struct IMSAdminbaseWEnumBackups = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDEnumIndex=0x%X", MDEnumIndex )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							Ndrconformant Maxcount;
							switch
							{
								case Maxcount.Maxcount > 0:
									unicodestring(Maxcount.Maxcount)  MDBackupLocation;
							}
							Align4 Pad;
							UINT32 MDEnumIndex;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "MDVersion=0x%X", MDVersion )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							Ndrconformant Maxcount;
							switch
							{
								case Maxcount.Maxcount > 0:
									unicodestring(Maxcount.Maxcount)  MDBackupLocation;
							}
							Align4 Pad;
							UINT32 MDVersion;
							FILETIME MDBackupTime;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] DeleteBackup (Opnum 31)
//
Struct IMSAdminbaseWDeleteBackup = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDBackupLocation=%s MDVersion=0x%X", MDBackupLocation.ToString, MDVersion )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDBackupLocation;
							Align4 Pad;
							UINT32 MDVersion = IMSAdminbaseWDeleteBackupMDVersionTable( this );
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] UnmarshalInterface (Opnum 32)
//
Struct IMSAdminbaseWUnmarshalInterface = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "No MDHandle")]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrPtr PointerLength;
							switch
							{
								case PointerLength.ReferentId > 0: UINT32 Length;
							}
							UINT32 PacketSize;
							NdrPtr PointerUUID;
							switch
							{
								case PointerUUID.ReferentID > 0:
								_struct FirstUUID
								{
									UINT32 Index;
									UUID(1) Uuid;
								}
							}
							NdrPtr PointerNextUUID;
							switch
							{
								case PointerNextUUID.ReferentID > 0:
								_struct SecondUUID
								{
									UINT32 IndexSecond;
									UUID(1) SecondUUID;
								}
							}
							UINT32 ThirdIndex;
							UUID(true) ThirdUUID;
							[DataFieldByteOrder = LittleEndian]
							UnicodeString ServerName;
							[DataFieldByteOrder = LittleEndian]
							UnicodeString IPaddress;
							struct BOOLValue[7]
							{
								NdrPtr PointerBool;
								UINT16 BoolValue = FormatString("%s",this == 0xFFFF?"True":"False");
							}
							Align4 pad;
							HResult ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] R_GetServerGuid (Opnum 33)
//
Struct IMSAdminbaseWR_GetServerGuid = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "No MDHandle")]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";	
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							MSRPCGuid ServerGuid;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] BackupWithPasswd (Opnum 34)
//
Struct IMSAdminbaseWBackupWithPasswd = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDBackupLocation=%s MDVersion=0x%X MDFlags=0x%X Password=%s", MDBackupLocation.ToString, MDVersion, MDFlags, Password.ToString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;							
							NdrWIDESTRINGPtr MDBackupLocation;
							Align4 Pad;
							UINT32 MDVersion = IMSAdminbaseWBackupWithPasswdMDVersionTable( this );
							UINT32 MDFlags = IMSAdminbaseWBackupWithPasswdMDFlagsTable( this );
							NdrWIDESTRINGPtr Password;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] RestoreWithPasswd (Opnum 35)
//
Struct IMSAdminbaseWRestoreWithPasswd = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDBackupLocation=%s MDVersion=0x%X MDFlags=0x%X Password=%s", MDBackupLocation.ToString, MDVersion, MDFlags, Password.ToString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDBackupLocation;
							Align4 Pad;
							UINT32 MDVersion = IMSAdminbaseWRestoreWithPasswdMDVersionTable( this );
							UINT32 MDFlags;
							NdrWIDESTRINGPtr Password;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] Export (Opnum 36)
//
Struct IMSAdminbaseWExport = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "Passwd=%s FileName=%s SourcePath=%s MDFlags=0x%X", Passwd.ToString, FileName.ToString, SourcePath.ToString, MDFlags )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr Passwd;
							NdrWIDESTRINGPtr FileName;
							NdrWIDESTRINGPtr SourcePath;
							Align4 Pad;
							UINT32 MDFlags = IMSAdminbaseWExportMDFlagsTable( this );
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] Import (Opnum 37)
//
Struct IMSAdminbaseWImport = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "Passwd=%s FileName=%s SourcePath=%s DestPath=%s MDFlags=0x%X", Passwd.ToString, FileName.ToString, SourcePath.ToString, DestPath.ToString, MDFlags )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr Passwd;
							NdrWIDESTRINGPtr FileName;
							NdrWIDESTRINGPtr SourcePath;
							NdrWIDESTRINGPtr DestPath;
							Align4 Pad;
							UINT32 MDFlags = IMSAdminbaseWImportMDFlagsTable( this );
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] RestoreHistory (Opnum 38)
//
Struct IMSAdminbaseWRestoreHistory = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDHistoryLocation=%s MDMajorVersion=0x%X MDMinorVersion=0x%X MDFlags=0x%X", MDHistoryLocation.ToString, MDMajorVersion, MDMinorVersion, MDFlags )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDHistoryLocation;
							Align4 Pad;
							UINT32 MDMajorVersion;
							UINT32 MDMinorVersion;
							UINT32 MDFlags = IMSAdminbaseWRestoreHistoryMDFlagsTable( this );
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] EnumHistory (Opnum 39)
//
Struct IMSAdminbaseWEnumHistory = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDEnumIndex=0x%X", MDEnumIndex )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							Ndrconformant Maxcount;
							switch
							{
								case Maxcount.Maxcount > 0:
									unicodestring(Maxcount.Maxcount)  PointerHistoryLocation;
							}
							Align4 Pad;
							UINT32 MDEnumIndex;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "MDMajorVersion=0x%X MDMinorVersion=0x%X", MDMajorVersion, MDMinorVersion )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							Ndrconformant Maxcount;
							switch
							{
								case Maxcount.Maxcount > 0:
									unicodestring(Maxcount.Maxcount)  PointerHistoryLocation;
							}
							Align4 Pad1;
							UINT32 MDMajorVersion;
							UINT32 MDMinorVersion;
							FILETIME PftdMDHistoryTime;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] GetChildPaths (Opnum 40)
//
Struct IMSAdminbaseWGetChildPaths = FormatString(" %s ",Property.MSRPCPType?"Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDhandle=0x%X MDPath=%s MDBufferSize=0x%X", MDHandle.MDHandle, MDPath.ToString, MDBufferSize )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							IMSMetaDataHandle MDHandle;
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							UINT32 MDBufferSize;
							NdrPtr pointer;
							switch
							{
								case pointer.ReferentID > 0:
									struct
									{
										Ndrconformant Maxcount;
										switch
										{
											case Maxcount.Maxcount > 0:
												wchar  Buffer[Maxcount.Maxcount];
										}
									}
							}
							UINT32Ptr MDRequiredBufferSize;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrPtr pointer;
							switch
							{
								case pointer.ReferentID > 0:
									struct
									{
										Ndrconformant Maxcount;
										switch
										{
											case Maxcount.Maxcount > 0:
												wchar  Buffer[Maxcount.Maxcount];
										}
									}
							}
							UINT32Ptr MDRequiredBufferSize;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] AppCreate (Opnum 3)
//
Struct IMSAdminbaseWAppCreate = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDPath=%s InProc=%s", MDPath.ToString, InProc ? "TRUE" : "FALSE" )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							BOOL InProc;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] AppDelete (Opnum 4)
//
Struct IMSAdminbaseWAppDelete = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDPath=%s Recursive=%s", MDPath.tostring, Recursive ? "TRUE" : "FALSE" )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							BOOL Recursive;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] AppUnload (Opnum 5)
//
Struct IMSAdminbaseWAppUnload = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDPath=%s Recursive=%s", MDPath.ToString, Recursive ? "TRUE" : "FALSE" )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							BOOL Recursive;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] AppGetStatus (Opnum 6)
//
Struct IMSAdminbaseWAppGetStatus = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDPath=%s", MDPath.ToString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDPath;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "AppStatus=%s", IMSAdminbaseWAppGetStatusAppStatusTable(AppStatus) )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							UINT32 AppStatus = IMSAdminbaseWAppGetStatusAppStatusTable(this);
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] AppDeleteRecoverable (Opnum 7)
//
Struct IMSAdminbaseWAppDeleteRecoverable = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDPath=%s Recursive=%s", MDPath.ToString, Recursive ? "TRUE" : "FALSE" )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							BOOL Recursive;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] AppRecover (Opnum 8)
//
Struct IMSAdminbaseWAppRecover = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDPath=%s Recursive=%s", MDPath.ToString, Recursive ? "TRUE" : "FALSE" )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							BOOL Recursive;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] AppCreate2 (Opnum 9)
//
Struct IMSAdminbaseWAppCreate2 = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDPath=%s AppMode=%s", MDPath.ToString, IMSAdminbaseWAppCreateAppModeTable(AppMode) )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							UINT32 AppMode = IMSAdminbaseWAppCreateAppModeTable(this);
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] CreateApplication (Opnum 3)
//
Struct IMSAdminbaseWCreateApplication = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDPath=%s AppMode=%s AppPoolId=%s CreatePool=%s", MDPath.ToString, IMSAdminbaseWAppCreateAppModeTable(AppMode), AppPoolId, CreatePool ? "TRUE" : "FALSE" )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							UINT32 AppMode = IMSAdminbaseWAppCreateAppModeTable(this);
							NdrWIDESTRINGPtr AppPoolId;
							Align4 Pad1;
							BOOL CreatePool;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] DeleteApplication (Opnum 4)
//
Struct IMSAdminbaseWDeleteApplication = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "MDPath=%s Recursive=%s", MDPath.ToString, Recursive ? "TRUE" : "FALSE" )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr MDPath;
							Align4 Pad;
							BOOL Recursive;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] CreateApplicationPool (Opnum5)
//
Struct IMSAdminbaseWCreateApplicationPool = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "Pool=%s", Pool.ToString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr Pool;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] DeleteApplicationPool (Opnum6)
//
Struct IMSAdminbaseWDeleteApplicationPool = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "Pool=%s", Pool.ToString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr Pool;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] EnumerateApplicationsInPool (Opnum7)
//
Struct IMSAdminbaseWEnumerateApplicationsInPool = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "Pool=%s", Pool.ToString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr Pool;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							BSTR Buffer;
							Align4 Pad;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] RecycleApplicationPool (Opnum8)
//
Struct IMSAdminbaseWRecycleApplicationPool = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "Pool=%s", Pool.ToString )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							NdrWIDESTRINGPtr Pool;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] GetProcessMode (Opnum9)
//
Struct IMSAdminbaseWGetProcessMode = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "Mode=%s", IMSAdminbaseWGetProcessModeModeTable(Mode) )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							UINT32 Mode = IMSAdminbaseWGetProcessModeModeTable(this);
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] InstanceName (Opnum10)
//
Struct IMSAdminbaseWInstanceName = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							BSTR NewVal;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] IsInstalledRemote (Opnum12)
//
Struct IMSAdminbaseWIsInstalledRemote = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "Retval= %s", Retval ? "TRUE" : "FALSE" )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							VARIANTBOOL Retval;
							Align4 Pad;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] IsExportableRemote (Opnum14)
//
Struct IMSAdminbaseWIsExportableRemote = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "Retval= %s", Retval ? "TRUE" : "FALSE" )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							VARIANTBOOL Retval;
							Align4 Pad;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] GetCertInfoRemote (Opnum16)
//
Struct IMSAdminbaseWGetCertInfoRemote = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							OLEAUTVariant BinaryVariant;
							Align4 Pad;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] ImportFromBlob (Opnum22)
//
Struct IMSAdminbaseWImportFromBlob = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "InstallToMetabase=%s AllowExport=%s OverWriteExisting=%s Size=0x%X", InstallToMetabase ? "TRUE" : "FALSE", AllowExport ? "TRUE" : "FALSE", OverWriteExisting ? "TRUE" : "FALSE", Size )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							BSTR InstanceName;
							BSTR Password;
							VARIANTBOOL InstallToMetabase;
							VARIANTBOOL AllowExport;
							VARIANTBOOL OverWriteExisting;
							Align4 Pad2;
							UINT32 Size;
							NdrString BlobBinary;
						}
				}
			}

		Case 0x02: //RESPONSE
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] ImportFromBlobGetHash (Opnum23)
//
Struct IMSAdminbaseWImportFromBlobGetHash = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "InstallToMetabase=%s AllowExport=%s OverWriteExisting=%s Size=0x%X", InstallToMetabase ? "TRUE" : "FALSE", AllowExport ? "TRUE" : "FALSE", OverWriteExisting ? "TRUE" : "FALSE", Size )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							BSTR InstanceName;
							BSTR Password;
							VARIANTBOOL InstallToMetabase;
							VARIANTBOOL AllowExport;
							VARIANTBOOL OverWriteExisting;
							Align4 Pad;
							UINT32 Size;
							NdrString BlobBinary;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "CertHashSize=0x%X", CertHashSize )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							UINT32 CertHashSize;
							CharPtr CertHash;
							Align4 Pad;
							HRESULT ReturnValue;
						}
				}
			}
	}
}

//
//	[MS-IMSA] ExportToBlob (Opnum25)
//
Struct IMSAdminbaseWExportToBlob = FormatString(" %s ",Property.MSRPCPType ? "Response":"Request")
{
	Switch( Property.MSRPCPType )
	{
		Case 0x00: //REQUEST
			[IMSAdminbaseWSummary = FormatString( "PrivateKey=%s CertChain=%s Size=0x%X", PrivateKey ? "TRUE" : "FALSE", CertChain ? "TRUE" : "FALSE", Size )]
			_Struct Request
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							BSTR InstanceName;
							BSTR Password;
							VARIANTBOOL PrivateKey;
							VARIANTBOOL CertChain;
							Align4 Pad;
							UINT32 Size;
							NdrStringPtr BlobBinary;
						}
				}
			}

		Case 0x02: //RESPONSE
			[IMSAdminbaseWSummary = FormatString( "Size=0x%X", Size )]
			_Struct Response
			{
				Switch
				{
					Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
					Case Property.MSRPCEncrypted != ConstEncTypeClearData:	Blob( FrameLength - FrameOffset ) EncryptedData;
					Default:
						Struct
						{
							UINT32 Size;
							NdrStringPtr BlobBinary;
							Align4 Pad;
							HRESULT ReturnValue;
						}
				}
			}
	}
}


Table IMSAdminbaseWBackupWithPasswdMDVersionTable( Value )
{
	Switch( Value )
	{
		Case 0xFFFFFFFE: "MD_BACKUP_HIGHEST_VERSION - Use the highest existing backup version for the backup name specified.";
		Case 0xFFFFFFFF: "MD_BACKUP_NEXT_VERSION - Use the highest existing backup version number plus one for the backup name specified.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWBackupWithPasswdMDFlagsTable( Value )
{
	Switch( Value )
	{
		Case 0x00000004: "MD_BACKUP_FORCE_BACKUP - Force the backup even if the SaveData operation specified by MD_BACKUP_SAVE_FIRST fails.SHOULD only be specified if MD_BACKUP_SAVE_FIRST is specified.";
		Case 0x00000001: "MD_BACKUP_OVERWRITE - Back up even if a backup of the same name and version exists in the specified backup location, overwriting it if necessary.";
		Case 0x00000002: "MD_BACKUP_SAVE_FIRST - Perform a SaveData operation before the backup.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWRestoreWithPasswdMDVersionTable( Value )
{
	Switch( Value )
	{
		Case 0xFFFFFFFE: "MD_BACKUP_HIGHEST_VERSION - Restore from the highest existing backup version in the specified backup name.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWExportMDFlagsTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "MD_EXPORT_INHERITED - Settings inherited from the parent nodes will be included in the export.";
		Case 0x00000002: "MD_EXPORT_NODE_ONLY - Child nodes will not be exported.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWImportMDFlagsTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "MD_IMPORT_INHERITED - Inherited settings that were exported because the MD_EXPORT_INHERITED flag was used in creating the data file, will be imported.";
		Case 0x00000002: "MD_IMPORT_NODE_ONLY - Child nodes will not be imported.";
		Case 0x00000004: "MD_IMPORT_MERGE - Imported settings will be merged with any matching existing node settings.When a value for a setting is present in the data file and also in the current metabase, the data file setting will overwrite the existing metabase setting.If you do not set this flag and there is a current node in the metabase that conflicts with the node being imported, the imported node will replace the existing node. All settings from the existing node will be lost regardless of whether the imported node contains the setting or not.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWRestoreHistoryMDFlagsTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "MD_HISTORY_LATEST - Restore to the most recent history file. If this is set the dwMDMajorVersion and dwMDMinorVersion MUST be set to zero.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWDeleteDataMDDataTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ALL_METADATA - Specifies all data, regardless of type.";
		Case 0x00000003: "BINARY_METADATA - Specifies binary data in any form.";
		Case 0x00000001: "DWORD_METADATA - Specifies all DWORD (unsigned 32-bit integer) data.";
		Case 0x00000004: "EXPANDSZ_METADATA - Specifies all data consisting of a string that includes the NULL terminating character, which contains unexpanded environment variables.";
		Case 0x00000005: "MULTISZ_METADATA - Specifies all data represented as an array of strings, where each string contains two occurrences of the NULL terminating character.";
		Case 0x00000002: "STRING_METADATA - Specifies all data consisting of an ASCII string that includes the NULL terminating character.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWR_GetAllDataMDUserTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ALL_METADATA - Return all data, regardless of user type.";
		Case 0x00000065: "ASP_MD_UT_APP - Return data specific to ASP application configuration.";
		Case 0x00000002: "IIS_MD_UT_FILE - Return data specific to a file, such as access permissions or logon methods.";
		Case 0x00000001: "IIS_MD_UT_SERVER - Return data specific to the server, such as ports in use and IP addresses.";
		Case 0x00000064: "IIS_MD_UT_WAM - Return data specific to Web application management.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWR_GetAllDataMDDataTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ALL_METADATA - Specifies all data, regardless of type.";
		Case 0x00000003: "BINARY_METADATA - Specifies binary data in any form.";
		Case 0x00000001: "DWORD_METADATA - Specifies all DWORD (unsigned 32-bit integer) data.";
		Case 0x00000004: "EXPANDSZ_METADATA - Specifies all data that consists of a null-terminated string containing environment variables that are not expanded.";
		Case 0x00000005: "MULTISZ_METADATA - Specifies all data represented as an array of null-terminated strings, terminated by two null characters.";
		Case 0x00000002: "STRING_METADATA - Specifies all data consisting of a null-terminated ASCII string.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWDeleteAllDataMDUserTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ALL_METADATA - Specifies all data, regardless of type.";
		Case 0x00000065: "ASP_MD_UT_APP - Specifies data specific to ASP application configuration.";
		Case 0x00000002: "IIS_MD_UT_FILE - Specifies data specific to a file, such as access permissions or logon methods.";
		Case 0x00000001: "IIS_MD_UT_SERVER - Specifies data specific to the server, such as ports in use and IP addresses.";
		Case 0x00000064: "IIS_MD_UT_WAM - Specifies data specific to Web application management.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWDeleteAllDataMDDataTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ALL_METADATA - Specifies all data, regardless of type.";
		Case 0x00000003: "BINARY_METADATA - Specifies binary data in any form.";
		Case 0x00000001: "DWORD_METADATA - Specifies all DWORD(unsigned 32-bit integer) data.";
		Case 0x00000004: "EXPANDSZ_METADATA - Specifies all data consisting of a string that includes the NULL terminating character, which contains unexpanded environment variables.";
		Case 0x00000005: "MULTISZ_METADATA - Specifies all data represented as an array of strings, where each string contains two occurrences of the NULL terminating character.";
		Case 0x00000002: "STRING_METADATA - Specifies all data consisting of an ASCII string that includes the NULL terminating character.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWCopyDataMDUserTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ALL_METADATA - Specifies all data, regardless of user type.";
		Case 0x00000065: "ASP_MD_UT_APP - Specifies data specific to ASP application configuration.";
		Case 0x00000002: "IIS_MD_UT_FILE - Specifies data specific to a file, such as access permissions or logon methods.";
		Case 0x00000001: "IIS_MD_UT_SERVER - Specifies data specific to the server, such as ports in use and IP addresses.";
		Case 0x00000064: "IIS_MD_UT_WAM - Specifies data specific to Web application management.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWCopyDataMDDataTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ALL_METADATA - Specifies all data, regardless of type.";
		Case 0x00000003: "BINARY_METADATA - Specifies binary data in any form.";
		Case 0x00000001: "DWORD_METADATA - Specifies all DWORD (unsigned 32-bit integer) data.";
		Case 0x00000004: "EXPANDSZ_METADATA - Specifies all data consisting of a string that includes the NULL-terminating character, which contains unexpanded environment variables.";
		Case 0x00000005: "MULTISZ_METADATA - Specifies all data represented as an array of strings, where each string contains two occurrences of the NULL-terminating character.";
		Case 0x00000002: "STRING_METADATA - Specifies all data consisting of an ASCII string that includes the NULL-terminating character.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWGetDataPathsMDDataTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ALL_METADATA - Specifies all data, regardless of type.";
		Case 0x00000003: "BINARY_METADATA - Specifies binary data in any form.";
		Case 0x00000001: "DWORD_METADATA - Specifies all DWORD (unsigned 32-bit integer) data.";
		Case 0x00000004: "EXPANDSZ_METADATA - Specifies all data consisting of a string that includes the NULL-terminating character, which contains unexpanded environment variables.";
		Case 0x00000005: "MULTISZ_METADATA - Specifies all data represented as an array of strings, where each string contains two occurrences of the NULL-terminating character.";
		Case 0x00000002: "STRING_METADATA - Specifies all data consisting of an ASCII string that includes the NULL-terminating character.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWOpenKeyMDAccessRequestedTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "METADATA_PERMISSION_READ - Open the node for reading.";
		Case 0x00000002: "METADATA_PERMISSION_WRITE - Open the node for writing.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWChangePermissionsMDAccessRequestedTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "METADATA_PERMISSION_READ - Open the node for reading.";
		Case 0x00000002: "METADATA_PERMISSION_WRITE - Open the node for writing.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWBackupMDVersionTable( Value )
{
	Switch( Value )
	{
		Case 0xFFFFFFFE: "MD_BACKUP_HIGHEST_VERSION - Overwrite the highest existing backup version in the specified backup location.";
		Case 0xFFFFFFFF: "MD_BACKUP_NEXT_VERSION - Use the next backup version number available in the specified backup location.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWBackupMDFlagsTable( Value )
{
	Switch( Value )
	{
		Case 0x00000004: "MD_BACKUP_FORCE_BACKUP - Force the backup even if the SaveData operation specified by MD_BACKUP_SAVE_FIRST fails.";
		Case 0x00000001: "MD_BACKUP_OVERWRITE - Back up even if a backup of the same name and version exists in the specified backup location, overwriting it if necessary.";
		Case 0x00000002: "MD_BACKUP_SAVE_FIRST - Perform a SaveData operation before the backup.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWRestoreMDVersionTable( Value )
{
	Switch( Value )
	{
		Case 0xFFFFFFFE: "MD_BACKUP_HIGHEST_VERSION - Restore from the highest existing backup version in the specified backup location.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWDeleteBackupMDVersionTable( Value )
{
	Switch( Value )
	{
		Case 0xFFFFFFFE: "MD_BACKUP_HIGHEST_VERSION - Delete the highest existing backup version in the specified backup location.";
		Default: "unknown";
	}
}

Table IMSAdminbaseWAppGetStatusAppStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "APPSTATUS_STOPPED - The application is defined but is not currently running.";
		Case 0x00000001: "APPSTATUS_RUNNING - The application is defined and is currently running.";
		Case 0x00000002: "APPSTATUS_NOTDEFINED - No application is defined at the specified metabase path.";
		Default: "Unknown";
	}
}

Table IMSAdminbaseWAppCreateAppModeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "eAppRunInProc - The application should run in the IIS parent process.";
		Case 0x00000001: "eAppRunOutProcIsolated - The application should run in its own process.";
		Case 0x00000002: "eAppRunOutProcInDefaultPool - The application should run in a shared process with other applications outside of the IIS parent process.";
		Default: "Unknown";
	}
}

Table IMSAdminbaseWGetProcessModeModeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "The server is hosting applications in application pools.";
		Case 0x00000001: "The server is hosting applications in the IIS server process and child processes.";
		Default: "Unknown";
	}
}

