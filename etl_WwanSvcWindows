//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-WwanSvc
//#
//#  Details:                
//#
//#  Public References:      WwanSvc.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWWANSVCEVENTS, "{3CB40AAA-1145-4FB8-B27B-7E30F0454316}")]
Protocol WwanSvc_MicrosoftWindowsWWANSVCEVENTS = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1001: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_ERROR EV_WWAN_ERROR;
		case 1002: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_WARNING EV_WWAN_WARNING;
		case 2001: [property.ETLSummary = this.ToString] WwanSvc_EV_SERVICE_START EV_SERVICE_START;
		case 2002: [property.ETLSummary = this.ToString] WwanSvc_EV_SERVICE_SHUTDOWN EV_SERVICE_SHUTDOWN;
		case 2003: [property.ETLSummary = this.ToString] WwanSvc_EV_INTERFACE_ARRIVED EV_INTERFACE_ARRIVED;
		case 2004: [property.ETLSummary = this.ToString] WwanSvc_EV_INTERFACE_REMOVED EV_INTERFACE_REMOVED;
		case 2005: [property.ETLSummary = this.ToString] WwanSvc_EV_INTERFACE_DISCARDED EV_INTERFACE_DISCARDED;
		case 2006: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_INTERFACE_INFO EV_WWAN_INTERFACE_INFO;
		case 2007: [property.ETLSummary = this.ToString] WwanSvc_EV_API_REQUEST EV_API_REQUEST;
		case 3001: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_REGISTER_SUCCEEDED EV_WWAN_REGISTER_SUCCEEDED;
		case 3002: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_REGISTER_FAILED EV_WWAN_REGISTER_FAILED;
		case 3003: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_DEREGISTERED EV_WWAN_DEREGISTERED;
		case 3004: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_ATTACH_SUCCEEDED EV_WWAN_ATTACH_SUCCEEDED;
		case 3005: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_ATTACH_FAILED EV_WWAN_ATTACH_FAILED;
		case 3006: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_DETACH_SUCCEEDED EV_WWAN_DETACH_SUCCEEDED;
		case 3007: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_DETACH_FAILED EV_WWAN_DETACH_FAILED;
		case 3008: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_ACTIVATE_SUCCEEDED EV_WWAN_ACTIVATE_SUCCEEDED;
		case 3009: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_ACTIVATE_FAILED EV_WWAN_ACTIVATE_FAILED;
		case 3010: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_DEACTIVATE_SUCCEEDED EV_WWAN_DEACTIVATE_SUCCEEDED;
		case 3011: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_DEACTIVATE_FAILED EV_WWAN_DEACTIVATE_FAILED;
		case 3012: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_CONNECT_SUCCEEDED EV_WWAN_CONNECT_SUCCEEDED;
		case 3013: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_CONNECT_FAILED EV_WWAN_CONNECT_FAILED;
		case 3014: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_DISCONNECT_SUCCEEDED EV_WWAN_DISCONNECT_SUCCEEDED;
		case 3015: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_DISCONNECT_FAILED EV_WWAN_DISCONNECT_FAILED;
		case 4001: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_SIGNAL_INFORMATION EV_WWAN_SIGNAL_INFORMATION;
		case 4002: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_RADIO_STATE EV_WWAN_RADIO_STATE;
		case 4003: [property.ETLSummary = this.ToString] WwanSvc_EV_PROFILE_UPDATE EV_PROFILE_UPDATE;
		case 5001: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_PIN_INFO EV_WWAN_PIN_INFO;
		case 5002: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_PIN_LIST EV_WWAN_PIN_LIST;
		case 5003: [property.ETLSummary = this.ToString] WwanSvc_EV_WWAN_PIN_ACTION_COMPLETED EV_WWAN_PIN_ACTION_COMPLETED;
		case 10001: [property.ETLSummary = this.ToString] WwanSvc_StartSvcStartup StartSvcStartup;
		case 10002: [property.ETLSummary = this.ToString] WwanSvc_CompleteSvcStartup CompleteSvcStartup;
		case 10011: [property.ETLSummary = this.ToString] WwanSvc_StartSvcShutdown StartSvcShutdown;
		case 10012: [property.ETLSummary = this.ToString] WwanSvc_CompleteSvcShutdown CompleteSvcShutdown;
		case 10021: [property.ETLSummary = this.ToString] WwanSvc_StartInterfaceInit StartInterfaceInit;
		case 10022: [property.ETLSummary = this.ToString] WwanSvc_CompleteInterfaceInit CompleteInterfaceInit;
		case 10031: [property.ETLSummary = this.ToString] WwanSvc_StartRegistering StartRegistering;
		case 10032: [property.ETLSummary = this.ToString] WwanSvc_CompleteRegistering CompleteRegistering;
		case 10041: [property.ETLSummary = this.ToString] WwanSvc_StartAttaching StartAttaching;
		case 10042: [property.ETLSummary = this.ToString] WwanSvc_CompleteAttaching CompleteAttaching;
		case 10051: [property.ETLSummary = this.ToString] WwanSvc_StartActivating StartActivating;
		case 10052: [property.ETLSummary = this.ToString] WwanSvc_CompleteActivating CompleteActivating;
		case 10061: [property.ETLSummary = this.ToString] WwanSvc_StartConnecting StartConnecting;
		case 10062: [property.ETLSummary = this.ToString] WwanSvc_CompleteConnecting CompleteConnecting;
		case 10071: [property.ETLSummary = this.ToString] WwanSvc_StartScanning StartScanning;
		case 10072: [property.ETLSummary = this.ToString] WwanSvc_CompleteScanning CompleteScanning;
		case 10081: [property.ETLSummary = this.ToString] WwanSvc_StartSvcResume StartSvcResume;
		case 10082: [property.ETLSummary = this.ToString] WwanSvc_CompleteSvcResume CompleteSvcResume;
		case 10091: [property.ETLSummary = this.ToString] WwanSvc_StartSvcSuspend StartSvcSuspend;
		case 10092: [property.ETLSummary = this.ToString] WwanSvc_CompleteSvcSuspend CompleteSvcSuspend;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table WwanSvc_StateMap(value)
{
	switch(value)
	{
		case 1: "State Start";
		case 2: "State End";
		case 10: "Not started state";
		case 11: "Started State";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct WwanSvc_EV_WWAN_ERROR = FormatString("WWAN Service event: WWAN error")
{
	GUID(true) InterfaceGuid;
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct WwanSvc_EV_WWAN_WARNING = FormatString("WWAN Service event: WWAN warning")
{
	GUID(true) InterfaceGuid;
	WinErrorCode WarningCode;
	UINT32 Location;
	UINT32 Context;
}
Struct WwanSvc_EV_SERVICE_START = "WWAN Service event: WWAN Service startup" {}; // Empty Struct
Struct WwanSvc_EV_SERVICE_SHUTDOWN = "WWAN Service event: WWAN Service shutdown" {}; // Empty Struct
Struct WwanSvc_EV_INTERFACE_ARRIVED = FormatString("WWAN Service event: WWAN Interface arrived")
{
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_EV_INTERFACE_REMOVED = FormatString("WWAN Service event: WWAN Interface removed")
{
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_EV_INTERFACE_DISCARDED = FormatString("WWAN Service event: WWAN Interface discarded")
{
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_EV_WWAN_INTERFACE_INFO = FormatString("WWAN Service event: WWAN Interface information")
{
	GUID(true) InterfaceGuid;
	UINT32 dwMajorVersion;
	UINT32 dwMinorVersion;
	UINT32 dwDriverCaps;
	UINT32 WwanCellularClass;
	UINT32 WwanDataClass;
	UINT32 WwanGSMBandClass;
	UINT32 WwanCDMABandClass;
	UINT32 ReadyState;
	UINT32 HwRadioState;
	UINT32 SwRadioState;
	UINT8 InformationAvailability;
	UINT32 NoOfProviders;
	UINT32 RegisterState;
	UINT32 RegisterMode;
	UINT32 PacketAttachState;
	UINT32 CurrentNetworkCaps;
	UINT32 NwError;
	UINT32 ConnectionId;
	UINT32 ActivationState;
	UINT32 VoiceCallState;
}
Struct WwanSvc_EV_API_REQUEST = FormatString("WWAN Service event: WWAN API Request")
{
	UINT32 APIName;
	GUID(true) InterfaceGuid;
	UINT32 Location;
	UINT32 Context;
}
Struct WwanSvc_EV_WWAN_REGISTER_SUCCEEDED = FormatString("WWAN Service event: Register happened. Either automatically or by some request")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_REGISTER_FAILED = FormatString("WWAN Service event: Register request failed")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	WinErrorCode ErrorCode;
	WinErrorCode NetworkErrorCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_DEREGISTERED = FormatString("WWAN Service event: Deregister happened")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_ATTACH_SUCCEEDED = FormatString("WWAN Service event: Packet attach happened. Either automatically or by some request")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_ATTACH_FAILED = FormatString("WWAN Service event: Packet Attach request failed")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	WinErrorCode ErrorCode;
	WinErrorCode NetworkErrorCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_DETACH_SUCCEEDED = FormatString("WWAN Service event: Packet Detach happened. Either automatically or by some request")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_DETACH_FAILED = FormatString("WWAN Service event: Packet Detach request failed")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	WinErrorCode ErrorCode;
	WinErrorCode NetworkErrorCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_ACTIVATE_SUCCEEDED = FormatString("WWAN Service event: Context Activate happened. Either automatically or by some request")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_ACTIVATE_FAILED = FormatString("WWAN Service event: Context Activate request failed")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	WinErrorCode ErrorCode;
	WinErrorCode NetworkErrorCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_DEACTIVATE_SUCCEEDED = FormatString("WWAN Service event: Context Deactivate happened. Either automatically or by some request")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_DEACTIVATE_FAILED = FormatString("WWAN Service event: Context Deactivate request failed")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	WinErrorCode ErrorCode;
	WinErrorCode NetworkErrorCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_CONNECT_SUCCEEDED = FormatString("WWAN Service event: Connect happened. Either automatically or by some request")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_CONNECT_FAILED = FormatString("WWAN Service event: Connect request failed")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	WinErrorCode ErrorCode;
	WinErrorCode NetworkErrorCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_DISCONNECT_SUCCEEDED = FormatString("WWAN Service event: Disconnect happened. Either automatically or by some request")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_DISCONNECT_FAILED = FormatString("WWAN Service event: Disconnect request failed")
{
	GUID(true) InterfaceGuid;
	UINT32 EventCode;
	WinErrorCode ErrorCode;
	WinErrorCode NetworkErrorCode;
	UINT32 RequestID;
}
Struct WwanSvc_EV_WWAN_SIGNAL_INFORMATION = FormatString("WWAN Service event: Signal Notification recieved")
{
	GUID(true) InterfaceGuid;
	UINT32 Rssi;
	UINT32 ErrorRate;
	UINT32 RssiInterval;
	UINT32 RssiThreshold;
}
Struct WwanSvc_EV_WWAN_RADIO_STATE = FormatString("WWAN Service event: Radio state change Notification recieved")
{
	UINT32 HWRadio;
	UINT32 SWRadio;
}
Struct WwanSvc_EV_PROFILE_UPDATE = FormatString("WWAN Service event: Profile Update Notification recieved")
{
	UINT32 ProfileUpdateType;
	UnicodeString ProfileName;
	UnicodeString oldProfileName;
}
Struct WwanSvc_EV_WWAN_PIN_INFO = FormatString("WWAN Service event: Pin Information Notification recieved")
{
	UINT32 PinType;
	UINT32 PinState;
	UINT32 AttemptsRemaining;
}
Struct WwanSvc_EV_WWAN_PIN_LIST = FormatString("WWAN Service event: Pin List Notification recieved")
{
	_struct Empty{};
}
Struct WwanSvc_EV_WWAN_PIN_ACTION_COMPLETED = FormatString("WWAN Service event: Pin Action Completion Notification recieved")
{
	UINT32 PinType;
	UINT32 PinOperation;
}
Struct WwanSvc_StartSvcStartup = FormatString("WWAN Service event: Start WWAN Service Startup")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteSvcStartup = FormatString("WWAN Service event: Complete WWAN Service Startup")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartSvcShutdown = FormatString("WWAN Service event: Start Service Shutdown")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteSvcShutdown = FormatString("WWAN Service event: Complete Service Shutdown")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartInterfaceInit = FormatString("WWAN Service event: Start Interface Initialization")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteInterfaceInit = FormatString("WWAN Service event: Complete Interface Initialization")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartRegistering = FormatString("WWAN Service event: Start Registering")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteRegistering = FormatString("WWAN Service event: Complete Registering")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartAttaching = FormatString("WWAN Service event: Start Attaching")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteAttaching = FormatString("WWAN Service event: Complete Attaching")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartActivating = FormatString("WWAN Service event: Start Activating")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteActivating = FormatString("WWAN Service event: Complete Activating")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartConnecting = FormatString("WWAN Service event: Start Connecting")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteConnecting = FormatString("WWAN Service event: Complete Connecting")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartScanning = FormatString("WWAN Service event: Start Scanning")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteScanning = FormatString("WWAN Service event: Complete Scanning")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartSvcResume = FormatString("WWAN Service event: Start Service Resume")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteSvcResume = FormatString("WWAN Service event: Complete Service Resume")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartSvcSuspend = FormatString("WWAN Service event: Start Service Suspend")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteSvcSuspend = FormatString("WWAN Service event: Complete Service Suspend")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWWANMMEVENTS, "{7839BB2A-2EA3-4ECA-A00F-B558BA678BEC}")]
Protocol WwanSvc_MicrosoftWindowsWWANMMEVENTS = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1001: [property.ETLSummary = this.ToString] WwanSvc_StartWWanMM StartWWanMM;
		case 1002: [property.ETLSummary = this.ToString] WwanSvc_StopWWanMM StopWWanMM;
		case 1004: [property.ETLSummary = this.ToString] WwanSvc_WWANMMError WWANMMError;
		case 10001: [property.ETLSummary = this.ToString] WwanSvc_StartInterfaceArrival StartInterfaceArrival;
		case 10002: [property.ETLSummary = this.ToString] WwanSvc_CompleteInterfaceArrival CompleteInterfaceArrival;
		case 10011: [property.ETLSummary = this.ToString] WwanSvc_StartWWanMMConnect StartWWanMMConnect;
		case 10012: [property.ETLSummary = this.ToString] WwanSvc_CompleteWWanMMConnect CompleteWWanMMConnect;
		case 10021: [property.ETLSummary = this.ToString] WwanSvc_StartWriteToUCMNameSpace StartWriteToUCMNameSpace;
		case 10022: [property.ETLSummary = this.ToString] WwanSvc_StopWriteToUCMNameSpace StopWriteToUCMNameSpace;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct WwanSvc_StartWWanMM = "WWAN MM Event : WWAN MM module started" {}; // Empty Struct
Struct WwanSvc_StopWWanMM = "WWAN MM Event : WWAN MM module stopped" {}; // Empty Struct
Struct WwanSvc_WWANMMError = FormatString("WWAN MM Event : Error occurred in WWAN MM Module")
{
	GUID(true) InterfaceGuid;
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct WwanSvc_StartInterfaceArrival = FormatString("WWAN MM Event : New WWAN Interface is arrived to the WWAN MM")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteInterfaceArrival = FormatString("WWAN MM Event : WWAN MM got notification of Interface initialization of a new interface")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartWWanMMConnect = FormatString("WWAN MM Event : Connect request issued by the WWAN MM module")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_CompleteWWanMMConnect = FormatString("WWAN MM Event : Connect completion response received by the WWAN MM Module")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StartWriteToUCMNameSpace = FormatString("WWAN MM Event : WWAN MM Module writing start into UCM namepspace")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
Struct WwanSvc_StopWriteToUCMNameSpace = FormatString("WWAN MM Event : WWAN MM Module writing complete into UCM namepspace")
{
	UINT8 CurrentOrNextState = WwanSvc_StateMap(this);
	UINT32 Location;
	UINT32 Context;
	GUID(true) InterfaceGuid;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWWANSVCEVENTS_Keyword, "{3CB40AAA-1145-4FB8-B27B-7E30F0454316}")]
struct WwanSvc_MicrosoftWindowsWWANSVCEVENTS_Keyword
{
	UINT64 Reserved1:35 = FormatString("        (%s)", this.ToBitString);
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT": "");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 Reserved2:1 = FormatString("        (%s)", this.ToBitString);
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION": "");
	UINT64 Reserved3:6 = FormatString("        (%s)", this.ToBitString);
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION": "");
	UINT64 Reserved4:18 = FormatString("        (%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWWANMMEVENTS_Keyword, "{7839BB2A-2EA3-4ECA-A00F-B558BA678BEC}")]
struct WwanSvc_MicrosoftWindowsWWANMMEVENTS_Keyword
{
	UINT64 Reserved1:35 = FormatString("        (%s)", this.ToBitString);
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT_3": "");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE_3":"");
	UINT64 Reserved2:1 = FormatString("        (%s)", this.ToBitString);
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION_3": "");
	UINT64 Reserved3:6 = FormatString("        (%s)", this.ToBitString);
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION_3": "");
	UINT64 Reserved4:18 = FormatString("        (%s)", this.ToBitString);
}
