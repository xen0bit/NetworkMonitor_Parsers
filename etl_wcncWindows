//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-Wcnc
//#
//#  Details:                
//#
//#  Public References:      wcnc.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWCNConfigRegistrar, "{C100BECF-D33A-4a4b-BF23-BBEF4663D017}")]
Protocol WCNC_MicrosoftWindowsWCNConfigRegistrar = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 8000: [property.ETLSummary = this.ToString] WCNC_SessionBegin SessionBegin;
		case 8001: [property.ETLSummary = this.ToString] WCNC_SessionEstablish SessionEstablish;
		case 8010: [property.ETLSummary = this.ToString] WCNC_SessionEndSuccess SessionEndSuccess;
		case 8011: [property.ETLSummary = this.ToString] WCNC_SessionEndFailure SessionEndFailure;
		case 8003: [property.ETLSummary = this.ToString] WCNC_SessionReceive SessionReceive;
		case 8004: [property.ETLSummary = this.ToString] WCNC_SessionSend SessionSend;
		case 8020: [property.ETLSummary = this.ToString] WCNC_RawReceive RawReceive;
		case 8021: [property.ETLSummary = this.ToString] WCNC_RawSend RawSend;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table WCNC_tid_SessionBeginReason(value)
{
	switch(value)
	{
		case 0: "Discovery";
		case 1: "Inbound request";
		case 2: "API request";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct WCNC_SessionBegin = FormatString("WCN has started a new session. Peer UUID: %s Connect reason: %s Session GUID: %s ", PeerUuid.ToString, DiscoveryOnly.ToString, SessionGuid.ToString)
{
	GUID(true) SessionGuid;
	GUID(true) PeerUuid;
	UINT32 DiscoveryOnly = WCNC_tid_SessionBeginReason(this);
}
Struct WCNC_SessionEstablish = FormatString("WCN has established a connection. Session GUID: %s ", SessionGuid.ToString)
{
	GUID(true) SessionGuid;
}
Struct WCNC_SessionEndSuccess = FormatString("WCN has completed a session successfully. Session GUID: %s ", SessionGuid.ToString)
{
	GUID(true) SessionGuid;
}
Struct WCNC_SessionEndFailure = FormatString("WCN failed to complete a session. Session GUID: %s Error code: %s ", SessionGuid.ToString, ErrorCode.ToString)
{
	GUID(true) SessionGuid;
	UINT32 ErrorCode;
}
Struct WCNC_SessionReceive = FormatString("WCN is preparing to parse a message. Session GUID: %s Message: %s ", SessionGuid.ToString, MessageBlob.ToString)
{
	GUID(true) SessionGuid;
	UINT16 MessageBlobLength;
	BLOB(MessageBlobLength) MessageBlob;
}
Struct WCNC_SessionSend = FormatString("WCN has generated a message. Session GUID: %s Message: %s ", SessionGuid.ToString, MessageBlob.ToString)
{
	GUID(true) SessionGuid;
	UINT16 MessageBlobLength;
	BLOB(MessageBlobLength) MessageBlob;
}
Struct WCNC_RawReceive = FormatString("WCN received a message. Transport: %s Message: %s ", Transport.ToString, MessageBlob.ToString)
{
	UnicodeString Transport;
	UINT16 MessageBlobLength;
	BLOB(MessageBlobLength) MessageBlob;
}
Struct WCNC_RawSend = FormatString("WCN is sending a message. Transport: %s Message: %s ", Transport.ToString, MessageBlob.ToString)
{
	UnicodeString Transport;
	UINT16 MessageBlobLength;
	BLOB(MessageBlobLength) MessageBlob;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWCNConfigRegistrar_Keyword, "{C100BECF-D33A-4a4b-BF23-BBEF4663D017}")]
struct WCNC_MicrosoftWindowsWCNConfigRegistrar_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
