//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-webioetw
//#
//#  Details:                
//#
//#  Public References:      webioetw.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsWebIO, "{50b3e73c-9370-461d-bb9f-26f32d68887d}")]
Protocol WEBIO_MicrosoftWindowsWebIO = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] WEBIO_ApiInitializeTrace ApiInitializeTrace;
		case 2: [property.ETLSummary = this.ToString] WEBIO_ApiInitializeFailedTrace ApiInitializeFailedTrace;
		case 3: [property.ETLSummary = this.ToString] WEBIO_ApiTerminateTrace ApiTerminateTrace;
		case 4: [property.ETLSummary = this.ToString] WEBIO_ApiTerminateFailedTrace ApiTerminateFailedTrace;
		case 5: [property.ETLSummary = this.ToString] WEBIO_ApiCreateSessionTrace ApiCreateSessionTrace;
		case 6: [property.ETLSummary = this.ToString] WEBIO_ApiCreateSessionFailedTrace ApiCreateSessionFailedTrace;
		case 7: [property.ETLSummary = this.ToString] WEBIO_ApiCloseSessionTrace ApiCloseSessionTrace;
		case 29: [property.ETLSummary = this.ToString] WEBIO_ApiCloseSessionCompleteTrace ApiCloseSessionCompleteTrace;
		case 8: [property.ETLSummary = this.ToString] WEBIO_ApiCloseSessionFailedTrace ApiCloseSessionFailedTrace;
		case 9: [property.ETLSummary = this.ToString] WEBIO_ApiEnterTrace ApiEnterTrace;
		case 10: [property.ETLSummary = this.ToString] WEBIO_ApiExitTrace ApiExitTrace;
		case 11: [property.ETLSummary = this.ToString] WEBIO_ApiFailedExitTrace ApiFailedExitTrace;
		case 12: [property.ETLSummary = this.ToString] WEBIO_ApiPendingTrace ApiPendingTrace;
		case 13: [property.ETLSummary = this.ToString] WEBIO_ApiCompletedTrace ApiCompletedTrace;
		case 14: [property.ETLSummary = this.ToString] WEBIO_ApiFailedCompletionTrace ApiFailedCompletionTrace;
		case 15: [property.ETLSummary = this.ToString] WEBIO_ApiSetRequestOptionGeneric ApiSetRequestOptionGeneric;
		case 17: [property.ETLSummary = this.ToString] WEBIO_ApiCreateRequest ApiCreateRequest;
		case 18: [property.ETLSummary = this.ToString] WEBIO_ApiCreateRequestFailed ApiCreateRequestFailed;
		case 19: [property.ETLSummary = this.ToString] WEBIO_ApiCloseRequestTrace ApiCloseRequestTrace;
		case 30: [property.ETLSummary = this.ToString] WEBIO_ApiCloseRequestCompleteTrace ApiCloseRequestCompleteTrace;
		case 20: [property.ETLSummary = this.ToString] WEBIO_ApiCloseRequestFailedTrace ApiCloseRequestFailedTrace;
		case 21: [property.ETLSummary = this.ToString] WEBIO_ApiSyncWaitSignal ApiSyncWaitSignal;
		case 22: [property.ETLSummary = this.ToString] WEBIO_ApiSyncWaitCompleted ApiSyncWaitCompleted;
		case 23: [property.ETLSummary = this.ToString] WEBIO_ApiSetRequestInformationRoutine ApiSetRequestInformationRoutine;
		case 24: [property.ETLSummary = this.ToString] WEBIO_ApiSetRequestInformationRoutineFailed ApiSetRequestInformationRoutineFailed;
		case 25: [property.ETLSummary = this.ToString] WEBIO_ApiRemoveRequestInformationRoutine ApiRemoveRequestInformationRoutine;
		case 26: [property.ETLSummary = this.ToString] WEBIO_ApiRemoveRequestInformationRoutineFailed ApiRemoveRequestInformationRoutineFailed;
		case 27: [property.ETLSummary = this.ToString] WEBIO_ApiRequestInformationRoutine ApiRequestInformationRoutine;
		case 28: [property.ETLSummary = this.ToString] WEBIO_ApiRequestInformationRoutineComplete ApiRequestInformationRoutineComplete;
		case 100: [property.ETLSummary = this.ToString] WEBIO_SentHeadersTrace SentHeadersTrace;
		case 101: [property.ETLSummary = this.ToString] WEBIO_ReceivedHeadersTrace ReceivedHeadersTrace;
		case 102: [property.ETLSummary = this.ToString] WEBIO_HttpStartProxyResolution HttpStartProxyResolution;
		case 103: [property.ETLSummary = this.ToString] WEBIO_HttpStopProxyResolution HttpStopProxyResolution;
		case 104: [property.ETLSummary = this.ToString] WEBIO_HttpStopAwaitingConnection HttpStopAwaitingConnection;
		case 105: [property.ETLSummary = this.ToString] WEBIO_HttpEndpoint HttpEndpoint;
		case 106: [property.ETLSummary = this.ToString] WEBIO_HttpStopGenerateRequest HttpStopGenerateRequest;
		case 107: [property.ETLSummary = this.ToString] WEBIO_HttpSendHttpRequestEntity HttpSendHttpRequestEntity;
		case 108: [property.ETLSummary = this.ToString] WEBIO_HttpSendHttpRequestEntityCompleteInline HttpSendHttpRequestEntityCompleteInline;
		case 109: [property.ETLSummary = this.ToString] WEBIO_HttpQueueRequestEntity HttpQueueRequestEntity;
		case 110: [property.ETLSummary = this.ToString] WEBIO_HttpSendRequestEntity HttpSendRequestEntity;
		case 111: [property.ETLSummary = this.ToString] WEBIO_HttpSendRequestEntityDetails HttpSendRequestEntityDetails;
		case 112: [property.ETLSummary = this.ToString] WEBIO_HttpSendRequestEntityComplete HttpSendRequestEntityComplete;
		case 113: [property.ETLSummary = this.ToString] WEBIO_HttpRequestEntityCallback HttpRequestEntityCallback;
		case 114: [property.ETLSummary = this.ToString] WEBIO_HttpRequestEntityCallbackComplete HttpRequestEntityCallbackComplete;
		case 115: [property.ETLSummary = this.ToString] WEBIO_HttpReceiveHttpResponseEntitiy HttpReceiveHttpResponseEntitiy;
		case 116: [property.ETLSummary = this.ToString] WEBIO_HttpReceiveHttpResponseEntityCompleteInline HttpReceiveHttpResponseEntityCompleteInline;
		case 117: [property.ETLSummary = this.ToString] WEBIO_HttpResponseEntityCallback HttpResponseEntityCallback;
		case 118: [property.ETLSummary = this.ToString] WEBIO_HttpResponseEntityCallbackComplete HttpResponseEntityCallbackComplete;
		case 119: [property.ETLSummary = this.ToString] WEBIO_HttpConnectionBufferReallocate HttpConnectionBufferReallocate;
		case 120: [property.ETLSummary = this.ToString] WEBIO_HttpConnectionBufferReceive HttpConnectionBufferReceive;
		case 121: [property.ETLSummary = this.ToString] WEBIO_HttpConnectionBufferReceiveComplete HttpConnectionBufferReceiveComplete;
		case 122: [property.ETLSummary = this.ToString] WEBIO_HttpConnectionBufferReceiveDetails HttpConnectionBufferReceiveDetails;
		case 123: [property.ETLSummary = this.ToString] WEBIO_HttpInvokeParser HttpInvokeParser;
		case 124: [property.ETLSummary = this.ToString] WEBIO_HttpInvokeParserComplete HttpInvokeParserComplete;
		case 125: [property.ETLSummary = this.ToString] WEBIO_HttpResetParser HttpResetParser;
		case 126: [property.ETLSummary = this.ToString] WEBIO_HttpReceiveFromParser HttpReceiveFromParser;
		case 127: [property.ETLSummary = this.ToString] WEBIO_HttpReceiveEntity HttpReceiveEntity;
		case 128: [property.ETLSummary = this.ToString] WEBIO_HttpReceiveEntityComplete HttpReceiveEntityComplete;
		case 129: [property.ETLSummary = this.ToString] WEBIO_HttpReceiveEntityDetails HttpReceiveEntityDetails;
		case 130: [property.ETLSummary = this.ToString] WEBIO_HttpSendHttpRequest HttpSendHttpRequest;
		case 131: [property.ETLSummary = this.ToString] WEBIO_HttpSendHttpRequestCompleteInline HttpSendHttpRequestCompleteInline;
		case 132: [property.ETLSummary = this.ToString] WEBIO_HttpReceiveHttpResponse HttpReceiveHttpResponse;
		case 133: [property.ETLSummary = this.ToString] WEBIO_HttpReceiveHttpResponseCompleteInline HttpReceiveHttpResponseCompleteInline;
		case 134: [property.ETLSummary = this.ToString] WEBIO_HttpResponseCallback HttpResponseCallback;
		case 135: [property.ETLSummary = this.ToString] WEBIO_HttpResponseCallbackComplete HttpResponseCallbackComplete;
		case 136: [property.ETLSummary = this.ToString] WEBIO_WebCancelRequest WebCancelRequest;
		case 137: [property.ETLSummary = this.ToString] WEBIO_WebCancelRequestComplete WebCancelRequestComplete;
		case 200: [property.ETLSummary = this.ToString] WEBIO_NetSocketConnect NetSocketConnect;
		case 201: [property.ETLSummary = this.ToString] WEBIO_NetSocketConnectComplete NetSocketConnectComplete;
		case 202: [property.ETLSummary = this.ToString] WEBIO_NetSocketConnectFailed NetSocketConnectFailed;
		case 203: [property.ETLSummary = this.ToString] WEBIO_NetSocketCreate NetSocketCreate;
		case 204: [property.ETLSummary = this.ToString] WEBIO_NetSocketClose NetSocketClose;
		case 205: [property.ETLSummary = this.ToString] WEBIO_NetNameResolution NetNameResolution;
		case 206: [property.ETLSummary = this.ToString] WEBIO_NetNameResolutionComplete NetNameResolutionComplete;
		case 207: [property.ETLSummary = this.ToString] WEBIO_NetNameResolutionFailed NetNameResolutionFailed;
		case 208: [property.ETLSummary = this.ToString] WEBIO_NetNameResolutionQueue NetNameResolutionQueue;
		case 209: [property.ETLSummary = this.ToString] WEBIO_NetNameResolutionCancel NetNameResolutionCancel;
		case 210: [property.ETLSummary = this.ToString] WEBIO_NetNameResolutionTimeout NetNameResolutionTimeout;
		case 211: [property.ETLSummary = this.ToString] WEBIO_NetGetAddrInfo NetGetAddrInfo;
		case 212: [property.ETLSummary = this.ToString] WEBIO_NetGetAddrInfoComplete NetGetAddrInfoComplete;
		case 213: [property.ETLSummary = this.ToString] WEBIO_NetSocketSendEntity NetSocketSendEntity;
		case 214: [property.ETLSummary = this.ToString] WEBIO_NetSocketSendEntityComplete NetSocketSendEntityComplete;
		case 215: [property.ETLSummary = this.ToString] WEBIO_NetSocketRecvEntity NetSocketRecvEntity;
		case 216: [property.ETLSummary = this.ToString] WEBIO_NetSocketRecvEntityComplete NetSocketRecvEntityComplete;
		case 700: [property.ETLSummary = this.ToString] WEBIO_SSLInitializeSecurityContext SSLInitializeSecurityContext;
		case 703: [property.ETLSummary = this.ToString] WEBIO_SSLInitializeSecurityContextComplete SSLInitializeSecurityContextComplete;
		case 704: [property.ETLSummary = this.ToString] WEBIO_SSLInitializeSecurityContextDetailsPre SSLInitializeSecurityContextDetailsPre;
		case 705: [property.ETLSummary = this.ToString] WEBIO_SSLInitializeSecurityContextDetailsPost SSLInitializeSecurityContextDetailsPost;
		case 706: [property.ETLSummary = this.ToString] WEBIO_SSLEncryptMessage SSLEncryptMessage;
		case 707: [property.ETLSummary = this.ToString] WEBIO_SSLEncryptMessageComplete SSLEncryptMessageComplete;
		case 708: [property.ETLSummary = this.ToString] WEBIO_SSLEncryptMessageFailed SSLEncryptMessageFailed;
		case 709: [property.ETLSummary = this.ToString] WEBIO_SSLEncryptMessageDetails SSLEncryptMessageDetails;
		case 710: [property.ETLSummary = this.ToString] WEBIO_SSLSendEntity SSLSendEntity;
		case 711: [property.ETLSummary = this.ToString] WEBIO_SSLSendEntityComplete SSLSendEntityComplete;
		case 712: [property.ETLSummary = this.ToString] WEBIO_SSLValidateCertificationComplete SSLValidateCertificationComplete;
		case 713: [property.ETLSummary = this.ToString] WEBIO_SSLValidateCertificationFailure SSLValidateCertificationFailure;
		case 720: [property.ETLSummary = this.ToString] WEBIO_SSLReceiveEntity SSLReceiveEntity;
		case 721: [property.ETLSummary = this.ToString] WEBIO_SSLReceiveEntityComplete SSLReceiveEntityComplete;
		case 722: [property.ETLSummary = this.ToString] WEBIO_SSLDecryptMessage SSLDecryptMessage;
		case 723: [property.ETLSummary = this.ToString] WEBIO_SSLDecryptMessageComplete SSLDecryptMessageComplete;
		case 724: [property.ETLSummary = this.ToString] WEBIO_SSLConnectionBufferReceive SSLConnectionBufferReceive;
		case 725: [property.ETLSummary = this.ToString] WEBIO_SSLConnectionBufferReceiveComplete SSLConnectionBufferReceiveComplete;
		case 726: [property.ETLSummary = this.ToString] WEBIO_SSLConnectionBufferReceiveDetails SSLConnectionBufferReceiveDetails;
		case 727: [property.ETLSummary = this.ToString] WEBIO_SSLConnectionBufferReallocate SSLConnectionBufferReallocate;
		case 728: [property.ETLSummary = this.ToString] WEBIO_SSLAcquireCredentialsHandle SSLAcquireCredentialsHandle;
		case 729: [property.ETLSummary = this.ToString] WEBIO_SSLAcquireCredentialsHandleComplete SSLAcquireCredentialsHandleComplete;
		case 730: [property.ETLSummary = this.ToString] WEBIO_SSLAcquireCredentialsHandleFailed SSLAcquireCredentialsHandleFailed;
		case 2100: [property.ETLSummary = this.ToString] WEBIO_RequestInitialize RequestInitialize;
		case 2101: [property.ETLSummary = this.ToString] WEBIO_RequestQueryEndpoints RequestQueryEndpoints;
		case 2102: [property.ETLSummary = this.ToString] WEBIO_RequestWaitingForAvailableConnection RequestWaitingForAvailableConnection;
		case 2111: [property.ETLSummary = this.ToString] WEBIO_RequestConnecting RequestConnecting;
		case 2112: [property.ETLSummary = this.ToString] WEBIO_ConnectionNameResolution ConnectionNameResolution;
		case 2113: [property.ETLSummary = this.ToString] WEBIO_ConnectionTCPConnect ConnectionTCPConnect;
		case 2114: [property.ETLSummary = this.ToString] WEBIO_ConnectionSSLNegotiation ConnectionSSLNegotiation;
		case 2120: [property.ETLSummary = this.ToString] WEBIO_RequestGenerateHeaders RequestGenerateHeaders;
		case 2121: [property.ETLSummary = this.ToString] WEBIO_RequestSendHeaders RequestSendHeaders;
		case 2122: [property.ETLSummary = this.ToString] WEBIO_RequestSendEntity RequestSendEntity;
		case 2123: [property.ETLSummary = this.ToString] WEBIO_RequestSendComplete RequestSendComplete;
		case 2130: [property.ETLSummary = this.ToString] WEBIO_RequestReceiveHeaders RequestReceiveHeaders;
		case 2131: [property.ETLSummary = this.ToString] WEBIO_RequestReceiveEntity RequestReceiveEntity;
		case 2132: [property.ETLSummary = this.ToString] WEBIO_RequestReceiveComplete RequestReceiveComplete;
		case 2140: [property.ETLSummary = this.ToString] WEBIO_RequestRestart RequestRestart;
		case 2141: [property.ETLSummary = this.ToString] WEBIO_RequestDone RequestDone;
		case 59999: [property.ETLSummary = this.ToString] WEBIO_DebugDumpStringTrace DebugDumpStringTrace;
		case 59998: [property.ETLSummary = this.ToString] WEBIO_ThreadAction ThreadAction;
		case 59997: [property.ETLSummary = this.ToString] WEBIO_ThreadActionComplete ThreadActionComplete;
		case 59996: [property.ETLSummary = this.ToString] WEBIO_ThreadActionQueue ThreadActionQueue;
		case 59995: [property.ETLSummary = this.ToString] WEBIO_ThreadActionCancel ThreadActionCancel;
		case 59994: [property.ETLSummary = this.ToString] WEBIO_ThreadTokenGet ThreadTokenGet;
		case 59993: [property.ETLSummary = this.ToString] WEBIO_ThreadTokenSet ThreadTokenSet;
		case 59992: [property.ETLSummary = this.ToString] WEBIO_ThreadTokenRestore ThreadTokenRestore;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table WEBIO_SecurityApiRetValMap(value)
{
	switch(value)
	{
		case 0: "STATUS_SUCCESS";
		case 0x00090300: "SEC_E_INSUFFICIENT_MEMORY";
		case 0x0090301: "SEC_E_INVALID_HANDLE";
		case 0x00090302: "SEC_E_UNSUPPORTED_FUNCTION";
		case 0x00090303: "SEC_E_TARGET_UNKNOWN";
		case 0x00090304: "SEC_E_INTERNAL_ERROR";
		case 0x00090305: "SEC_E_SECPKG_NOT_FOUND";
		case 0x00090306: "SEC_E_NOT_OWNER";
		case 0x00090307: "SEC_E_CANNOT_INSTALL";
		case 0x00090308: "SEC_E_INVALID_TOKEN";
		case 0x00090309: "SEC_E_CANNOT_PACK";
		case 0x0009030A: "SEC_E_QOP_NOT_SUPPORTED";
		case 0x0009030B: "SEC_E_NO_IMPERSONATION";
		case 0x0009030C: "SEC_E_LOGON_DENIED";
		case 0x0009030D: "SEC_E_UNKNOWN_CREDENTIALS";
		case 0x0009030E: "SEC_E_NO_CREDENTIALS";
		case 0x0009030F: "SEC_E_MESSAGE_ALTERED";
		case 0x00090310: "SEC_E_OUT_OF_SEQUENCE";
		case 0x00090311: "SEC_E_NO_AUTHENTICATING_AUTHORITY";
		case 0x00090312: "SEC_I_CONTINUE_NEEDED";
		case 0x00090313: "SEC_I_COMPLETE_NEEDED";
		case 0x00090314: "SEC_I_COMPLETE_AND_CONTINUE";
		case 0x00090315: "SEC_I_LOCAL_LOGON";
		case 0x00090316: "SEC_E_BAD_PKGID";
		case 0x00090317: "SEC_E_CONTEXT_EXPIRED";
		case 0x00090318: "SEC_E_INCOMPLETE_MESSAGE";
		case 0x800B0101: "$(String.Map.CERT_E_EXPIRED)";
		case 0x800B0102: "$(String.Map.CERT_E_VALIDITYPERIODNESTING)";
		case 0x800B0109: "$(String.Map.CERT_E_UNTRUSTEDROOT)";
		case 0x800B010A: "$(String.Map.CERT_E_CHAINING)";
		case 0x800B010F: "$(String.Map.CERT_E_CN_NO_MATCH)";
		case 0x800B0114: "$(String.Map.CERT_E_INVALID_NAME)";
		case 0x800B0110: "$(String.Map.CERT_E_WRONG_USAGE)";
		case 0x80092010: "$(String.Map.CRYPT_E_REVOKED)";
		case 0x800B0111: "$(String.Map.TRUST_E_EXPLICIT_DISTRUST)";
		case 0x80092012: "$(String.Map.CRYPT_E_NO_REVOCATION_CHECK)";
		case 0x80092013: "$(String.Map.CRYPT_E_REVOCATION_OFFLINE)";
		case 0x800B0103: "$(String.Map.CERT_E_ROLE)";
		case 0x800B0104: "$(String.Map.CERT_E_PATHLENCONST)";
		case 0x800B0105: "$(String.Map.CERT_E_CRITICAL)";
		case 0x800B0106: "$(String.Map.CERT_E_PURPOSE)";
		case 0x800B0107: "$(String.Map.CERT_E_ISSUERCHAINING)";
		case 0x800B0108: "$(String.Map.CERT_E_MALFORMED)";
		case 0x80096004: "$(String.Map.TRUST_E_CERT_SIGNATURE)";
		case 0x800B0113: "$(String.Map.CERT_E_INVALID_POLICY)";
		case 0x80096019: "$(String.Map.TRUST_E_BASIC_CONSTRAINTS)";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WEBIO_TCPCloseReasonType(value)
{
	switch(value)
	{
		case 0: "Local Graceful";
		case 1: "Remote Graceful";
		case 2: "Local Reset";
		case 3: "Remote Reset";
		case 4: "Connect Timeout";
		case 5: "Send Timeout";
		case 6: "Receive Timeout";
		case 7: "Scavenged";
		case 8: "No Reason";
		case 9: "Cleanup after hitting an error condition";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WEBIO_mapQueueActionType(value)
{
	switch(value)
	{
		case 1: "Timer";
		case 2: "WorkItem";
		case 3: "Overlapped IO";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WEBIO_mapVerifiyCertFailureReason(value)
{
	switch(value)
	{
		case 0: "No Error";
		case 1: "Unable to Get Cert";
		case 2: "NULL cert context";
		case 3: "Unable to Get Cert Chain";
		case 4: "Unable to Process URL to Hostname";
		case 5: "Cert Validation Failure";
		case 6: "Unable to get Stream Sizes";
		case 7: "Unable to get Endpoint Bindings";
		case 8: "Unable to get secure connection information";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table WEBIO_mapRequestOption(value)
{
	switch(value)
	{
		case 0: "AuthSchemeState";
		case 1: "DisableAuthentication";
		case 2: "ClientCertificate";
		case 3: "ClientCertificateIssuerList";
		case 4: "ChannelBindingToken";
		case 5: "IgnoredServerCertErrors";
		case 6: "SecureProtocols";
		case 7: "ProxyAuthSchemes";
		case 8: "ProxyAuthState";
		case 9: "ProxyAutoLogonState";
		case 10: "ProxyConfig";
		case 11: "ProxyConnectHeaders";
		case 12: "ProxyCreds";
		case 13: "ProxySpnUsage";
		case 14: "RedirectionLimit";
		case 15: "SecureProtocolInformation";
		case 16: "ServerAuthSchemes";
		case 17: "ServerAuthState";
		case 18: "ServerAutoLogonState";
		case 19: "ServerCert";
		case 20: "ServerCreds";
		case 21: "ServerSpnUsage";
		case 22: "SocketAddress";
		case 23: "ThirdPartyCookies";
		case 24: "PathCodePage";
		case 25: "ExtraInfoCodePage";
		case 26: "ServerCertErrors";
		case 27: "CookiesEnabled";
		case 28: "ResponseHeadersSizeLimit";
		case 29: "ServerSpnUsed";
		case 30: "ProxySpnUsed";
		case 31: "ConnectTimeout";
		case 32: "ResolveTimeout";
		case 33: "SendTimeout";
		case 34: "ReceiveTimeout";
		case 35: "ConnectRetryCount";
		case 16384: "RevertToSelfClientCertificate";
		case 16385: "NetworkInterfaceAffinity";
		case 16386: "TcpAutoTuningRestricted";
		case 16387: "DnsIdnTransformDisabled";
		case 16388: "PeerDistExtension";
		case 16389: "MaximumConnectCount";
		case 16390: "GlobalKeepAlivePoolState";
		case 16391: "ConnectionState";
		case 16392: "ExceededResponseHeaderSizeLimit";
		default:
			FormatString("Unknown value: %d", value);
	}
}
struct WEBIO_mapSChannelProtocolIdentifiers = Local.BitMapSummary
{
	UINT32 BitfieldPCT1_SERVER:1 = FormatString("  (%s) %s", this.ToBitString, this? "PCT1_SERVER":"");
	UINT32 BitfieldPCT1_CLIENT:1 = FormatString("  (%s) %s", this.ToBitString, this? "PCT1_CLIENT":"");
	UINT32 BitfieldSSL2_SERVER:1 = FormatString("  (%s) %s", this.ToBitString, this? "SSL2_SERVER":"");
	UINT32 BitfieldSSL2_CLIENT:1 = FormatString("  (%s) %s", this.ToBitString, this? "SSL2_CLIENT":"");
	UINT32 BitfieldSSL3_SERVER:1 = FormatString("  (%s) %s", this.ToBitString, this? "SSL3_SERVER":"");
	UINT32 BitfieldSSL3_CLIENT:1 = FormatString("  (%s) %s", this.ToBitString, this? "SSL3_CLIENT":"");
	UINT32 BitfieldTLS1_SERVER:1 = FormatString("  (%s) %s", this.ToBitString, this? "TLS1_SERVER":"");
	UINT32 BitfieldTLS1_CLIENT:1 = FormatString("  (%s) %s", this.ToBitString, this? "TLS1_CLIENT":"");
	UINT32 BitfieldTLS1_1_SERVER:1 = FormatString("(%s) %s", this.ToBitString, this? "TLS1_1_SERVER":"");
	UINT32 BitfieldTLS1_1_CLIENT:1 = FormatString("(%s) %s", this.ToBitString, this? "TLS1_1_CLIENT":"");
	UINT32 BitfieldTLS1_2_SERVER:1 = FormatString("(%s) %s", this.ToBitString, this? "TLS1_2_SERVER":"");
	UINT32 BitfieldTLS1_2_CLIENT:1 = FormatString("(%s) %s", this.ToBitString, this? "TLS1_2_CLIENT":"");
	UINT32 Reserved1:18 = FormatString("            (%s)", this.ToBitString);
	UINT32 BitfieldUNI_SERVER:1 = FormatString("   (%s) %s", this.ToBitString, this? "UNI_SERVER": "");
	UINT32 BitfieldUNI_CLIENT:1 = FormatString("   (%s) %s", this.ToBitString, this? "UNI_CLIENT":"");
	[Local.BitMapSummary =
		(BitfieldPCT1_SERVER? "PCT1_SERVER" + " " : "") +
		(BitfieldPCT1_CLIENT? "PCT1_CLIENT" + " " : "") +
		(BitfieldSSL2_SERVER? "SSL2_SERVER" + " " : "") +
		(BitfieldSSL2_CLIENT? "SSL2_CLIENT" + " " : "") +
		(BitfieldSSL3_SERVER? "SSL3_SERVER" + " " : "") +
		(BitfieldSSL3_CLIENT? "SSL3_CLIENT" + " " : "") +
		(BitfieldTLS1_SERVER? "TLS1_SERVER" + " " : "") +
		(BitfieldTLS1_CLIENT? "TLS1_CLIENT" + " " : "") +
		(BitfieldTLS1_1_SERVER? "TLS1_1_SERVER" + " " : "") +
		(BitfieldTLS1_1_CLIENT? "TLS1_1_CLIENT" + " " : "") +
		(BitfieldTLS1_2_SERVER? "TLS1_2_SERVER" + " " : "") +
		(BitfieldTLS1_2_CLIENT? "TLS1_2_CLIENT" + " " : "") +
		(BitfieldUNI_SERVER? "UNI_SERVER" + " " : "") +
		(BitfieldUNI_CLIENT? "UNI_CLIENT" + " " : "") +
		""]
	struct{}
}
Struct WEBIO_ApiInitializeTrace = FormatString("%s: WebInitialize completed successfully (ApiVersion %s) (Flags %s) -> (API Handle = %s).", ApiObject.ToString, ApiVersion.ToString, Flags.ToString, ApiHandle.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	UINT64 ApiVersion;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiInitializeFailedTrace = FormatString("WebInitialize failed with an error = %s (ApiVersion %s) (Flags %s)", Error.ToString, ApiVersion.ToString, Flags.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	UINT64 ApiVersion;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiTerminateTrace = FormatString("%s WebTerminate completed successfully. (Handle %s) (Flags %s)", ApiObject.ToString, ApiHandle.ToString, Flags.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiTerminateFailedTrace = FormatString("%s WebTerminate failed with an error = %s. (Handle %s) (Flags %s)", ApiObject.ToString, Error.ToString, ApiHandle.ToString, Flags.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiCreateSessionTrace = FormatString("%s: WebCreateSession completed successfully. (ApiHandle %s[%s]) (Flags: %s) -> (Session Handle: %s)", Session.ToString, ApiObject.ToString, ApiHandle.ToString, Flags.ToString, SessionHandle.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	EtlPtr Session;
	UINT64 SessionHandle;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiCreateSessionFailedTrace = FormatString("%s: WebCreateSession failed with an error = %s. (ApiHandle %s[%s]) (Flags: %s)", ApiObject.ToString, Error.ToString, ApiObject.ToString, ApiHandle.ToString, Flags.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	EtlPtr Session;
	UINT64 SessionHandle;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiCloseSessionTrace = FormatString("%s: WebCloseSession called (Handle %s) (Flags %s)", ApiObject.ToString, ApiHandle.ToString, Flags.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiCloseSessionCompleteTrace = FormatString("%s: WebCloseSession completed successfully. (Handle %s) (Flags %s)", ApiObject.ToString, ApiHandle.ToString, Flags.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiCloseSessionFailedTrace = FormatString("%s: WebCloseSession failed with an error = %s. (Handle %s) (Flags %s)", ApiObject.ToString, Error.ToString, ApiHandle.ToString, Flags.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiEnterTrace = FormatString("%s(%s) API called.", Api.ToString, ApiHandle.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
}
Struct WEBIO_ApiExitTrace = FormatString("%s(%s) API returned successfully.", Api.ToString, ApiHandle.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
	WinErrorCode Result;
}
Struct WEBIO_ApiFailedExitTrace = FormatString("%s(%s) API failed with an error = %s.", Api.ToString, ApiHandle.ToString, Result.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
	WinErrorCode Result;
}
Struct WEBIO_ApiPendingTrace = FormatString("%s(%s) API pending completion.", Api.ToString, ApiHandle.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
}
Struct WEBIO_ApiCompletedTrace = FormatString("%s(%s) API completed.", Api.ToString, ApiHandle.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
	WinErrorCode Result;
}
Struct WEBIO_ApiFailedCompletionTrace = FormatString("%s(%s) API completed with an error = %s.", Api.ToString, ApiHandle.ToString, Result.ToString)
{
	UINT64 ApiHandle;
	AsciiString Api;
	WinErrorCode Result;
}
Struct WEBIO_ApiSetRequestOptionGeneric = FormatString("%s: Set Request Option %s (Handle %s) (Error %s) (Length %s) (Value %s) ", Request.ToString, Option.ToString, RequestHandle.ToString, Error.ToString, Length.ToString, Value.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Option = WEBIO_mapRequestOption(this);
	UINT32 Length;
	BLOB(Length) Value;
	WinErrorCode Error;
}
Struct WEBIO_ApiCreateRequest = FormatString("%s: WebCreateHttpRequest completed successfully. (Session %s[%s]) (Method %s) (URI %s) (Version %s.%s) -> (Request Handle %s) ", Request.ToString, Session.ToString, SessionHandle.ToString, Method.ToString, URI.ToString, VersionMajor.ToString, VersionMinor.ToString, RequestHandle.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	EtlPtr Session;
	UINT64 SessionHandle;
	AsciiString Method;
	UnicodeString URI;
	UINT16 VersionMajor;
	UINT16 VersionMinor;
	WinErrorCode Error;
}
Struct WEBIO_ApiCreateRequestFailed = FormatString("%s: WebCreateHttpRequest failed with error: %s. (Session %s[%s]) (Method %s) (URI %s) (Version %s.%s)", Session.ToString, Error.ToString, Session.ToString, SessionHandle.ToString, Method.ToString, URI.ToString, VersionMajor.ToString, VersionMinor.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	EtlPtr Session;
	UINT64 SessionHandle;
	AsciiString Method;
	UnicodeString URI;
	UINT16 VersionMajor;
	UINT16 VersionMinor;
	WinErrorCode Error;
}
Struct WEBIO_ApiCloseRequestTrace = FormatString("%s: WebCloseHttpRequest called (Handle %s) (Flags %s) ", ApiObject.ToString, ApiHandle.ToString, Flags.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiCloseRequestCompleteTrace = FormatString("%s: WebCloseHttpRequest completed sucessfully error = %s. (Handle %s) (Flags %s)", ApiObject.ToString, Error.ToString, ApiHandle.ToString, Flags.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiCloseRequestFailedTrace = FormatString("%s WebCloseHttpRequest failed with an error = %s. (Handle %s) (Flags %s)", ApiObject.ToString, Error.ToString, ApiHandle.ToString, Flags.ToString)
{
	EtlPtr ApiObject;
	UINT64 ApiHandle;
	UINT64 Flags;
	WinErrorCode Error;
}
Struct WEBIO_ApiSyncWaitSignal = FormatString("Synchronous API Event Handle Signall (Event %s) (Error %s) (Information %s)", Event.ToString, Error.ToString, Information.ToString)
{
	UINT64 Handle;
	UINT64 Event;
	WinErrorCode Error;
	UINT64 Information;
}
Struct WEBIO_ApiSyncWaitCompleted = FormatString("Synchronous API Event Handle Wait Completed (Handle %s) (Event %s) (Error %s) (Information %s)", Handle.ToString, Event.ToString, Error.ToString, Information.ToString)
{
	UINT64 Handle;
	UINT64 Event;
	WinErrorCode Error;
	UINT64 Information;
}
Struct WEBIO_ApiSetRequestInformationRoutine = FormatString("%s: WebSetHttpRequestInformationRoutine completed successfully. (Handle %s) (Flags %s) (InformationRoutine %s) (InformationContext %s)", Request.ToString, RequestHandle.ToString, Flags.ToString, InformationRoutine.ToString, InformationContext.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	EtlPtr InformationRoutine;
	EtlPtr InformationContext;
	WinErrorCode Error;
}
Struct WEBIO_ApiSetRequestInformationRoutineFailed = FormatString("%s: WebSetHttpRequestInformationRoutine failed with an error = %s. (Handle %s) (Flags %s) (InformationRoutine %s) (InformationContext %s)", Request.ToString, Error.ToString, RequestHandle.ToString, Flags.ToString, InformationRoutine.ToString, InformationContext.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	EtlPtr InformationRoutine;
	EtlPtr InformationContext;
	WinErrorCode Error;
}
Struct WEBIO_ApiRemoveRequestInformationRoutine = FormatString("%s: WebRemoveHttpRequestInformationRoutine completed successfully. (Handle %s) (Flags %s)", Request.ToString, RequestHandle.ToString, Flags.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	EtlPtr InformationRoutine;
	EtlPtr InformationContext;
	WinErrorCode Error;
}
Struct WEBIO_ApiRemoveRequestInformationRoutineFailed = FormatString("%s: WebRemoveHttpRequestInformationRoutine failed with an error = %s. (Handle %s) (Flags %s)", Request.ToString, Error.ToString, RequestHandle.ToString, Flags.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	EtlPtr InformationRoutine;
	EtlPtr InformationContext;
	WinErrorCode Error;
}
Struct WEBIO_ApiRequestInformationRoutine = FormatString("%s: Indicating informational callback to request. (PendingCount %s) (InformationRoutine %s) (InformationContext %s) (Type %s) (Information %s) (InformationLength %s", Request.ToString, PendingCount.ToString, InformationRoutine.ToString, InformationContext.ToString, Type.ToString, Information.ToString, InformationLength.ToString)
{
	EtlPtr Request;
	UINT32 PendingCount;
	EtlPtr InformationRoutine;
	EtlPtr InformationContext;
	UINT32 Type;
	EtlPtr Information;
	UINT64 InformationLength;
}
Struct WEBIO_ApiRequestInformationRoutineComplete = FormatString("%s: Informational callback to request complete. (PendingCount %s) (InformationRoutine %s) (InformationContext %s) (Type %s) (Information %s) (InformationLength %s", Request.ToString, PendingCount.ToString, InformationRoutine.ToString, InformationContext.ToString, Type.ToString, Information.ToString, InformationLength.ToString)
{
	EtlPtr Request;
	UINT32 PendingCount;
	EtlPtr InformationRoutine;
	EtlPtr InformationContext;
	UINT32 Type;
	EtlPtr Information;
	UINT64 InformationLength;
}
Struct WEBIO_SentHeadersTrace = FormatString("%s: Sending Headers: %s", Request.ToString, Headers.ToString)
{
	EtlPtr Request;
	UINT16 Length;
	AsciiString(Length) Headers;
}
Struct WEBIO_ReceivedHeadersTrace = FormatString("%s: Received Headers: %s", Request.ToString, Headers.ToString)
{
	EtlPtr Request;
	UINT16 Length;
	AsciiString(Length) Headers;
}
Struct WEBIO_HttpStartProxyResolution = FormatString("%s: Starting Proxy Resolution", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_HttpStopProxyResolution = FormatString("%s: Completed Proxy Resolution", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_HttpStopAwaitingConnection = FormatString("%s: Acquired a connection slot (ConnMgr: %s), (Connection: %s)", Request.ToString, ConnMgr.ToString, Connection.ToString)
{
	EtlPtr Request;
	EtlPtr ConnMgr;
	EtlPtr Connection;
}
Struct WEBIO_HttpEndpoint = FormatString("%s: Request on Endpoint (Server Endpoint: %s) (Proxy Endpoint: %s) (Connection Manager: %s)", Request.ToString, ServerEndpoint.ToString, ProxyEndpoint.ToString, ConnectionManager.ToString)
{
	EtlPtr Request;
	EtlPtr ServerEndpoint;
	EtlPtr ProxyEndpoint;
	EtlPtr ConnectionManager;
}
Struct WEBIO_HttpStopGenerateRequest = FormatString("%s: Request Message Generated (DataChunk %s[%s])", Request.ToString, DataChunks.ToString, Length.ToString)
{
	EtlPtr Request;
	EtlPtr DataChunks;
	UINT64 Length;
}
Struct WEBIO_HttpSendHttpRequestEntity = FormatString("%s: WebSendHttpRequestEntity (Handle: %s) (Flags: %s) (DataChunks %s [%s]) CompletionContext (%s)", Request.ToString, RequestHandle.ToString, Flags.ToString, DataChunks.ToString, DataChunkCount.ToString, CompletionContext.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	EtlPtr DataChunks;
	UINT32 DataChunkCount;
	EtlPtr CompletionContext;
	WinErrorCode Error;
}
Struct WEBIO_HttpSendHttpRequestEntityCompleteInline = FormatString("%s: WebSendHttpRequestEntity Inline Completion (Handle: %s) (Error: %s) (Flags: %s) (DataChunks %s [%s]) CompletionContext (%s)", Request.ToString, RequestHandle.ToString, Error.ToString, Flags.ToString, DataChunks.ToString, DataChunkCount.ToString, CompletionContext.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	EtlPtr DataChunks;
	UINT32 DataChunkCount;
	EtlPtr CompletionContext;
	WinErrorCode Error;
}
Struct WEBIO_HttpQueueRequestEntity = FormatString("%s: HTTP Queuing Entity for Sending (DataChunks %s) (ChunkLength %s) (IsEntity %s) (All Entity Posted? %s)", Request.ToString, DataChunks.ToString, TotalChunkLength.ToString, IsEntity.ToString, RequestEntityComplete.ToString)
{
	EtlPtr Request;
	EtlPtr DataChunks;
	UINT64 TotalChunkLength;
	BOOL IsEntity;
	BOOL RequestEntityComplete;
}
Struct WEBIO_HttpSendRequestEntity = FormatString("%s: HTTP Sending Entity (Connection: %s) (DataChunks %s) (PendingSendCount %s) (LastSend? %s)", Request.ToString, Connection.ToString, DataChunks.ToString, PendingSendCount.ToString, LastSend.ToString)
{
	EtlPtr Request;
	EtlPtr Connection;
	EtlPtr DataChunks;
	UINT32 PendingSendCount;
	BOOL LastSend;
	WinErrorCode Error;
}
Struct WEBIO_HttpSendRequestEntityDetails = FormatString("%s: HTTP Send Entity Details (Connection: %s) (DataChunks %s) (Index %s) (Buffer %s [%s]) Data: %s", Request.ToString, Connection.ToString, DataChunks.ToString, Index.ToString, Buffer.ToString, Length.ToString, Data.ToString)
{
	EtlPtr Request;
	EtlPtr Connection;
	EtlPtr DataChunks;
	UINT32 Index;
	EtlPtr Buffer;
	UINT32 Length;
	BLOB(Length) Data;
}
Struct WEBIO_HttpSendRequestEntityComplete = FormatString("%s: HTTP Sending Entity Complete (Error %s) (Connection: %s) (DataChunks %s) (PendingSendCount %s) (LastSend? %s)", Request.ToString, Error.ToString, Connection.ToString, DataChunks.ToString, PendingSendCount.ToString, LastSend.ToString)
{
	EtlPtr Request;
	EtlPtr Connection;
	EtlPtr DataChunks;
	UINT32 PendingSendCount;
	BOOL LastSend;
	WinErrorCode Error;
}
Struct WEBIO_HttpRequestEntityCallback = FormatString("%s: Completing WebSendHttpRequest(Entity) (DataChunks %s) (Error %s) (CompletionContext %s) (CompletionInformation %s)", Request.ToString, DataChunks.ToString, Error.ToString, CompletionContext.ToString, CompletionInformation.ToString)
{
	EtlPtr Request;
	EtlPtr DataChunks;
	WinErrorCode Error;
	EtlPtr CompletionContext;
	UINT64 CompletionInformation;
}
Struct WEBIO_HttpRequestEntityCallbackComplete = FormatString("%s: Completing WebSendHttpRequest(Entity) Complete (DataChunks %s)", Request.ToString, DataChunks.ToString)
{
	EtlPtr Request;
	EtlPtr DataChunks;
	WinErrorCode Error;
	EtlPtr CompletionContext;
	UINT64 CompletionInformation;
}
Struct WEBIO_HttpReceiveHttpResponseEntitiy = FormatString("%s: WebHttpReceiveEntityBody (Handle: %s) (Flags: %s) (DataChunks %s [%s]) CompletionContext (%s)", Request.ToString, RequestHandle.ToString, Flags.ToString, DataChunks.ToString, DataChunkCount.ToString, CompletionContext.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	EtlPtr DataChunks;
	UINT32 DataChunkCount;
	EtlPtr CompletionContext;
	WinErrorCode Error;
}
Struct WEBIO_HttpReceiveHttpResponseEntityCompleteInline = FormatString("%s: WebHttpReceiveEntityBody Inline Completion (Handle: %s) (Error: %s) (Flags: %s) (DataChunks %s [%s]) CompletionContext (%s)", Request.ToString, RequestHandle.ToString, Error.ToString, Flags.ToString, DataChunks.ToString, DataChunkCount.ToString, CompletionContext.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	EtlPtr DataChunks;
	UINT32 DataChunkCount;
	EtlPtr CompletionContext;
	WinErrorCode Error;
}
Struct WEBIO_HttpResponseEntityCallback = FormatString("%s: Completing WebHttpReceiveEntityBody (DataChunks %s) (Error %s) (CompletionContext %s) (CompletionInformation %s)", Request.ToString, DataChunks.ToString, Error.ToString, CompletionContext.ToString, CompletionInformation.ToString)
{
	EtlPtr Request;
	EtlPtr DataChunks;
	WinErrorCode Error;
	EtlPtr CompletionContext;
	UINT64 CompletionInformation;
}
Struct WEBIO_HttpResponseEntityCallbackComplete = FormatString("%s: Completing WebHttpReceiveEntityBody Complete (DataChunks %s)", Request.ToString, DataChunks.ToString)
{
	EtlPtr Request;
	EtlPtr DataChunks;
	WinErrorCode Error;
	EtlPtr CompletionContext;
	UINT64 CompletionInformation;
}
Struct WEBIO_HttpConnectionBufferReallocate = FormatString("%s: HTTP Connection changing Buffer (OldBuffer %s [%s]) (NewBuffer %s [%s]) (Carryover %s)", Connection.ToString, OldBuffer.ToString, OldBufferLength.ToString, NewBuffer.ToString, NewBufferLength.ToString, BufferLengthData.ToString)
{
	EtlPtr Connection;
	EtlPtr OldBuffer;
	UINT32 OldBufferLength;
	UINT32 BufferLengthData;
	EtlPtr NewBuffer;
	UINT32 NewBufferLength;
}
Struct WEBIO_HttpConnectionBufferReceive = FormatString("%s: HTTP Connection Buffer Posting Receive (DataChunks %s) (Buffer: %s [%s/%s/%s])", Connection.ToString, DataChunks.ToString, Buffer.ToString, BufferLengthConsumed.ToString, BufferLengthData.ToString, BufferLengthRemaining.ToString)
{
	EtlPtr Connection;
	EtlPtr DataChunks;
	EtlPtr Buffer;
	UINT32 BufferLengthConsumed;
	UINT32 BufferLengthData;
	UINT32 BufferLengthRemaining;
	WinErrorCode Error;
	UINT64 Information;
}
Struct WEBIO_HttpConnectionBufferReceiveComplete = FormatString("%s: HTTP Connection Buffer Completing Receive (DataChunks %s) (Buffer: %s [%s/%s/%s]) (Error %s)  (CompletionInformation %s)", Connection.ToString, DataChunks.ToString, Buffer.ToString, BufferLengthConsumed.ToString, BufferLengthData.ToString, BufferLengthRemaining.ToString, Error.ToString, Information.ToString)
{
	EtlPtr Connection;
	EtlPtr DataChunks;
	EtlPtr Buffer;
	UINT32 BufferLengthConsumed;
	UINT32 BufferLengthData;
	UINT32 BufferLengthRemaining;
	WinErrorCode Error;
	UINT64 Information;
}
Struct WEBIO_HttpConnectionBufferReceiveDetails = FormatString("%s: HTTP Connection Buffer Receive Details (DataChunks %s) (Length %s) Data: %s", Connection.ToString, DataChunks.ToString, Length.ToString, Data.ToString)
{
	EtlPtr Connection;
	EtlPtr DataChunks;
	UINT32 Length;
	BLOB(Length) Data;
}
Struct WEBIO_HttpInvokeParser = FormatString("%s: HTTP Parser (Connection %s) (Buffer: %s [%s/%s/%s]) (ParserChunk %s [%s])", Request.ToString, Connection.ToString, Buffer.ToString, BufferLengthConsumed.ToString, BufferLengthData.ToString, BufferLengthRemaining.ToString, ChunkData.ToString, ChunkDataLength.ToString)
{
	EtlPtr Request;
	EtlPtr Connection;
	EtlPtr Buffer;
	UINT32 BufferLengthConsumed;
	UINT32 BufferLengthData;
	UINT32 BufferLengthRemaining;
	EtlPtr ChunkData;
	UINT32 ChunkDataLength;
	WinErrorCode Error;
}
Struct WEBIO_HttpInvokeParserComplete = FormatString("%s: HTTP Parser Complete (Connection %s) (Error %s) (Buffer: %s [%s/%s/%s]) (ParserChunk %s [%s])", Request.ToString, Connection.ToString, Error.ToString, Buffer.ToString, BufferLengthConsumed.ToString, BufferLengthData.ToString, BufferLengthRemaining.ToString, ChunkData.ToString, ChunkDataLength.ToString)
{
	EtlPtr Request;
	EtlPtr Connection;
	EtlPtr Buffer;
	UINT32 BufferLengthConsumed;
	UINT32 BufferLengthData;
	UINT32 BufferLengthRemaining;
	EtlPtr ChunkData;
	UINT32 ChunkDataLength;
	WinErrorCode Error;
}
Struct WEBIO_HttpResetParser = FormatString("%s: HTTP Parser Reset (Buffer %s) (HttpResponseCode %s)", Request.ToString, Buffer.ToString, HttpResponseCode.ToString)
{
	EtlPtr Request;
	EtlPtr Buffer;
	UINT32 HttpResponseCode;
}
Struct WEBIO_HttpReceiveFromParser = FormatString("%s: HTTP Receive From Parser (DataChunk %s) (ParserChunk %s [%s]) (Error %s) (Context %s) (Information %s)", Request.ToString, DataChunks.ToString, ChunkData.ToString, ChunkDataLength.ToString, Error.ToString, CompletionContext.ToString, CompletionInformation.ToString)
{
	EtlPtr Request;
	EtlPtr DataChunks;
	EtlPtr ChunkData;
	UINT32 ChunkDataLength;
	WinErrorCode Error;
	EtlPtr CompletionContext;
	UINT64 CompletionInformation;
}
Struct WEBIO_HttpReceiveEntity = FormatString("%s: HTTP Receive (DataChunk %s) (BytesToRecv %s)", Request.ToString, DataChunks.ToString, BytesToReceive.ToString)
{
	EtlPtr Request;
	EtlPtr DataChunks;
	UINT32 BytesToReceive;
	WinErrorCode Error;
	EtlPtr CompletionContext;
	UINT64 CompletionInformation;
}
Struct WEBIO_HttpReceiveEntityComplete = FormatString("%s: HTTP Receive Complete (DataChunk %s) (BytesToRecv %s) (Error %s) (Context %s) (Information %s)", Request.ToString, DataChunks.ToString, BytesToReceive.ToString, Error.ToString, CompletionContext.ToString, CompletionInformation.ToString)
{
	EtlPtr Request;
	EtlPtr DataChunks;
	UINT32 BytesToReceive;
	WinErrorCode Error;
	EtlPtr CompletionContext;
	UINT64 CompletionInformation;
}
Struct WEBIO_HttpReceiveEntityDetails = FormatString("%s: HTTP Receive Entity Details (DataChunk %s) (Index %s) (Length %s) Data %s", Request.ToString, DataChunks.ToString, Index.ToString, Length.ToString, Data.ToString)
{
	EtlPtr Request;
	EtlPtr DataChunks;
	UINT32 Index;
	UINT32 Length;
	BLOB(Length) Data;
}
Struct WEBIO_HttpSendHttpRequest = FormatString("%s: WebSendHttpRequest (Handle: %s) (Flags: %s) (DataChunks %s [%s]) CompletionContext (%s)", Request.ToString, RequestHandle.ToString, Flags.ToString, DataChunks.ToString, DataChunkCount.ToString, CompletionContext.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	EtlPtr DataChunks;
	UINT32 DataChunkCount;
	EtlPtr CompletionContext;
	WinErrorCode Error;
}
Struct WEBIO_HttpSendHttpRequestCompleteInline = FormatString("%s: WebSendHttpRequest Inline Completion (Handle: %s) (Error: %s) (Flags: %s) (DataChunks %s [%s]) CompletionContext (%s)", Request.ToString, RequestHandle.ToString, Error.ToString, Flags.ToString, DataChunks.ToString, DataChunkCount.ToString, CompletionContext.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	EtlPtr DataChunks;
	UINT32 DataChunkCount;
	EtlPtr CompletionContext;
	WinErrorCode Error;
}
Struct WEBIO_HttpReceiveHttpResponse = FormatString("%s: WebHttpReceiveResponse (Handle: %s) (Flags %s) (ResponseFlags %s) CompletionContext (%s)", Request.ToString, RequestHandle.ToString, Flags.ToString, ResponseFlags.ToString, CompletionContext.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	UINT32 ResponseFlags;
	EtlPtr CompletionContext;
	WinErrorCode Error;
}
Struct WEBIO_HttpReceiveHttpResponseCompleteInline = FormatString("%s: WebHttpReceiveEntityBody Inline Completion (Handle: %s) (Error: %s) (Flags: %s) (ResponseFlags %s) CompletionContext (%s)", Request.ToString, RequestHandle.ToString, Error.ToString, Flags.ToString, ResponseFlags.ToString, CompletionContext.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	UINT32 ResponseFlags;
	EtlPtr CompletionContext;
	WinErrorCode Error;
}
Struct WEBIO_HttpResponseCallback = FormatString("%s: Completing WebHttpReceiveEntityBody (Error %s) (ResponseFlags %s) (CompletionInformation %s)", Request.ToString, Error.ToString, ResponseFlags.ToString, CompletionContext.ToString)
{
	EtlPtr Request;
	UINT32 ResponseFlags;
	WinErrorCode Error;
	EtlPtr CompletionContext;
}
Struct WEBIO_HttpResponseCallbackComplete = FormatString("%s: Completing WebHttpReceiveEntityBody Complete", Request.ToString)
{
	EtlPtr Request;
	UINT32 ResponseFlags;
	WinErrorCode Error;
	EtlPtr CompletionContext;
}
Struct WEBIO_WebCancelRequest = FormatString("%s: WebCancelHttpRequest (Handle: %s) (Flags %s)", Request.ToString, RequestHandle.ToString, Flags.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	WinErrorCode Error;
}
Struct WEBIO_WebCancelRequestComplete = FormatString("%s: WebCancelHttpRequest Complete (Error: %s) (Handle: %s) (Flags %s)", Request.ToString, Error.ToString, RequestHandle.ToString, Flags.ToString)
{
	EtlPtr Request;
	UINT64 RequestHandle;
	UINT32 Flags;
	WinErrorCode Error;
}
Struct WEBIO_NetSocketConnect = FormatString("%s: Connecting (Socket %s) (Context %s) (RemaingAddress %s) Address: %s.", Connection.ToString, SocketHandle.ToString, Context.ToString, RemainingAddressCount.ToString, Address.ToString)
{
	EtlPtr Connection;
	UINT64 SocketHandle;
	UINT32 AddressLength;
	UnicodeString(AddressLength) Address;
	EtlPtr Context;
	UINT64 RemainingAddressCount;
	WinErrorCode Error;
}
Struct WEBIO_NetSocketConnectComplete = FormatString("%s: Connection established (Socket %s) (Context %s)", Connection.ToString, SocketHandle.ToString, Context.ToString)
{
	EtlPtr Connection;
	UINT64 SocketHandle;
	UINT32 AddressLength;
	UnicodeString(AddressLength) Address;
	EtlPtr Context;
	UINT64 RemainingAddressCount;
	WinErrorCode Error;
}
Struct WEBIO_NetSocketConnectFailed = FormatString("%s: Connect failed with error %s (Socket %s) (Context %s) (RemaingAddress %s)", Connection.ToString, Error.ToString, SocketHandle.ToString, Context.ToString, RemainingAddressCount.ToString)
{
	EtlPtr Connection;
	UINT64 SocketHandle;
	UINT32 AddressLength;
	UnicodeString(AddressLength) Address;
	EtlPtr Context;
	UINT64 RemainingAddressCount;
	WinErrorCode Error;
}
Struct WEBIO_NetSocketCreate = FormatString("Socket %s created on Endpoint %s.", SocketHandle.ToString, Connection.ToString)
{
	EtlPtr Connection;
	UINT64 SocketHandle;
	WinErrorCode Error;
}
Struct WEBIO_NetSocketClose = FormatString("%s: Socket %s Closed (Reason = %s, Status = %s).", Endpoint.ToString, Socket.ToString, Reason.ToString, Result.ToString)
{
	EtlPtr Endpoint;
	UINT64 Socket;
	UINT32 Reason = WEBIO_TCPCloseReasonType(this);
	WinErrorCode Result;
}
Struct WEBIO_NetNameResolution = FormatString("%s: Name Resolution Request (Name %s) (Timeout %s) (CompletionContext: %s)", DnsQuery.ToString, HostName.ToString, Timeout.ToString, CompletionContext.ToString)
{
	EtlPtr DnsQuery;
	UnicodeString HostName;
	UINT32 Timeout;
	UINT64 CompletionContext;
}
Struct WEBIO_NetNameResolutionComplete = FormatString("%s: Name Resolution Request Completed (FQDN %s) (Canonical %s) (AddressCount: %s) AddressData: %s", DnsQuery.ToString, FQDN.ToString, CanonicalName.ToString, AddressCount.ToString, SockAddr.ToString)
{
	EtlPtr DnsQuery;
	UnicodeString FQDN;
	UnicodeString CanonicalName;
	UINT32 AddressCount;
	UINT32 SockaddrLength;
	BLOB(SockaddrLength) SockAddr;
}
Struct WEBIO_NetNameResolutionFailed = FormatString("%s: Name Resolution Request Failed (Error %s)", DnsQuery.ToString, Error.ToString)
{
	EtlPtr DnsQuery;
	WinErrorCode Error;
}
Struct WEBIO_NetNameResolutionQueue = FormatString("%s: Name Resolution Request queued to %s", DnsQuery.ToString, CacheEntry.ToString)
{
	EtlPtr DnsQuery;
	EtlPtr CacheEntry;
}
Struct WEBIO_NetNameResolutionCancel = FormatString("%s: Name Resolution Request is cancelled", ReferenceContext.ToString)
{
	EtlPtr ReferenceContext;
}
Struct WEBIO_NetNameResolutionTimeout = FormatString("%s: Name Resolution Request Timed-out", ReferenceContext.ToString)
{
	EtlPtr ReferenceContext;
}
Struct WEBIO_NetGetAddrInfo = FormatString("%s: Resolving addresses (Host %s) (Flags: %s)", CacheEntry.ToString, ResolveName.ToString, Flags.ToString)
{
	EtlPtr CacheEntry;
	UnicodeString ResolveName;
	UINT32 Flags;
	WinErrorCode Error;
	UINT32 AddressCount;
}
Struct WEBIO_NetGetAddrInfoComplete = FormatString("%s: Address resolution completed (Error = %s) (Host %s) (Flags: %s).(AddressCount %s)", CacheEntry.ToString, Error.ToString, ResolveName.ToString, Flags.ToString, AddressCount.ToString)
{
	EtlPtr CacheEntry;
	UnicodeString ResolveName;
	UINT32 Flags;
	WinErrorCode Error;
	UINT32 AddressCount;
}
Struct WEBIO_NetSocketSendEntity = FormatString("%s: Winsock Send Entity Start(DataChunks %s) (Socket %s) (Buffers %s) (Context %s)", Connection.ToString, DataChunks.ToString, SocketHandle.ToString, Buffer.ToString, Context.ToString)
{
	EtlPtr Connection;
	EtlPtr DataChunks;
	UINT64 SocketHandle;
	EtlPtr Buffer;
	EtlPtr Context;
	WinErrorCode Error;
	UINT64 Information;
}
Struct WEBIO_NetSocketSendEntityComplete = FormatString("%s: Winsock Send Entity Complete (Error %s) (Information %s) (Socket %s) (Buffers %s) (Context %s)", Connection.ToString, Error.ToString, Information.ToString, SocketHandle.ToString, Buffer.ToString, Context.ToString)
{
	EtlPtr Connection;
	EtlPtr DataChunks;
	UINT64 SocketHandle;
	EtlPtr Buffer;
	EtlPtr Context;
	WinErrorCode Error;
	UINT64 Information;
}
Struct WEBIO_NetSocketRecvEntity = FormatString("%s: Winsock Recv Entity Start (DataChunks %s) (Socket %s) (Buffers %s) (Context %s)", Connection.ToString, DataChunks.ToString, SocketHandle.ToString, Buffer.ToString, Context.ToString)
{
	EtlPtr Connection;
	EtlPtr DataChunks;
	UINT64 SocketHandle;
	EtlPtr Buffer;
	EtlPtr Context;
	WinErrorCode Error;
	UINT64 Information;
}
Struct WEBIO_NetSocketRecvEntityComplete = FormatString("%s: Winsock Recv Entity Complete(Error %s) (Information %s) (Socket %s) (Buffers %s) (Context %s)", Connection.ToString, Error.ToString, Information.ToString, SocketHandle.ToString, Buffer.ToString, Context.ToString)
{
	EtlPtr Connection;
	EtlPtr DataChunks;
	UINT64 SocketHandle;
	EtlPtr Buffer;
	EtlPtr Context;
	WinErrorCode Error;
	UINT64 Information;
}
Struct WEBIO_SSLInitializeSecurityContext = FormatString("%s: InitializeSecurityContext - Credential Handle(%s:%s) Context Handle (%s:%s) (Hostname %s) (InputFlags %s) (Buffer %s [%s/%s])", Connection.ToString, SecurityHandleHigh.ToString, SecurityHandleLow.ToString, CredHandleHigh.ToString, CredHandleLow.ToString, HostName.ToString, InputFlags.ToString, Buffer.ToString, BufferLengthData.ToString, BufferLengthRemaining.ToString)
{
	EtlPtr Connection;
	UINT64 SecurityHandleHigh;
	UINT64 SecurityHandleLow;
	UINT64 CredHandleHigh;
	UINT64 CredHandleLow;
	UnicodeString HostName;
	UINT32 InputFlags;
	EtlPtr Buffer;
	UINT32 BufferLengthData;
	UINT32 BufferLengthRemaining;
	UINT32 OutputFlags;
	EtlPtr DataChunks;
	UINT32 DataChunkBufferLength;
	WinErrorCode Result = WEBIO_SecurityApiRetValMap(this);
}
Struct WEBIO_SSLInitializeSecurityContextComplete = FormatString("%s: InitializeSecurityContext returned - (%s) Credential Handle(%s:%s) Context Handle (%s:%s) (OutputFlags %s) (Buffer %s [%s/%s]) (DataChunk %s [%s])", Connection.ToString, Result.ToString, SecurityHandleHigh.ToString, SecurityHandleLow.ToString, CredHandleHigh.ToString, CredHandleLow.ToString, OutputFlags.ToString, Buffer.ToString, BufferLengthData.ToString, BufferLengthRemaining.ToString, DataChunks.ToString, DataChunkBufferLength.ToString)
{
	EtlPtr Connection;
	UINT64 SecurityHandleHigh;
	UINT64 SecurityHandleLow;
	UINT64 CredHandleHigh;
	UINT64 CredHandleLow;
	UnicodeString HostName;
	UINT32 InputFlags;
	EtlPtr Buffer;
	UINT32 BufferLengthData;
	UINT32 BufferLengthRemaining;
	UINT32 OutputFlags;
	EtlPtr DataChunks;
	UINT32 DataChunkBufferLength;
	WinErrorCode Result = WEBIO_SecurityApiRetValMap(this);
}
Struct WEBIO_SSLInitializeSecurityContextDetailsPre = FormatString("%s: InitializeSecurityContext Details (Pre) - Credential Handle(%s:%s) (Buffer %s [%s/%s]) Data: %s", Connection.ToString, SecurityHandleHigh.ToString, SecurityHandleLow.ToString, Buffer.ToString, BufferLengthData.ToString, BufferLengthRemaining.ToString, Data.ToString)
{
	EtlPtr Connection;
	UINT64 SecurityHandleHigh;
	UINT64 SecurityHandleLow;
	EtlPtr Buffer;
	UINT32 BufferLengthData;
	UINT32 BufferLengthRemaining;
	BLOB(BufferLengthData) Data;
}
Struct WEBIO_SSLInitializeSecurityContextDetailsPost = FormatString("%s: InitializeSecurityContext Details (Post) - Credential Handle(%s:%s) (DataChunk %s [%s]) Data: %s", Connection.ToString, SecurityHandleHigh.ToString, SecurityHandleLow.ToString, DataChunks.ToString, DataChunkBufferLength.ToString, Data.ToString)
{
	EtlPtr Connection;
	UINT64 SecurityHandleHigh;
	UINT64 SecurityHandleLow;
	EtlPtr DataChunks;
	UINT32 DataChunkBufferLength;
	BLOB(DataChunkBufferLength) Data;
}
Struct WEBIO_SSLEncryptMessage = FormatString("%s: SSL Encryption (SSLIOContext %s) Context Handle(%s:%s) (DataChunks: %s) (Index: %s) (OutBuffer: %s[%s]) (Flags %s)", Connection.ToString, SslIOContext.ToString, CredHandleHigh.ToString, CredHandleLow.ToString, DataChunks.ToString, Index.ToString, Buffer.ToString, Length.ToString, Flags.ToString)
{
	EtlPtr Connection;
	EtlPtr SslIOContext;
	UINT64 CredHandleHigh;
	UINT64 CredHandleLow;
	EtlPtr DataChunks;
	UINT32 Index;
	EtlPtr Buffer;
	UINT64 Length;
	UINT32 Flags;
	WinErrorCode Error;
}
Struct WEBIO_SSLEncryptMessageComplete = FormatString("%s: SSL Encryption Complete (SSLIOContext %s) (ErrorCode: %s) Context Handle(%s:%s) (DataChunks: %s) (Index: %s) (InBuffer: %s[%s]) (Flags %s)", Connection.ToString, SslIOContext.ToString, Error.ToString, CredHandleHigh.ToString, CredHandleLow.ToString, DataChunks.ToString, Index.ToString, Buffer.ToString, Length.ToString, Flags.ToString)
{
	EtlPtr Connection;
	EtlPtr SslIOContext;
	UINT64 CredHandleHigh;
	UINT64 CredHandleLow;
	EtlPtr DataChunks;
	UINT32 Index;
	EtlPtr Buffer;
	UINT64 Length;
	UINT32 Flags;
	WinErrorCode Error;
}
Struct WEBIO_SSLEncryptMessageFailed = FormatString("%s: SSL Encryption Failed (SSLIOContext %s) (ErrorCode: %s) Context Handle(%s:%s) (DataChunks: %s) (Index: %s) (Flags %s) ", Connection.ToString, SslIOContext.ToString, Error.ToString, CredHandleHigh.ToString, CredHandleLow.ToString, DataChunks.ToString, Index.ToString, Flags.ToString)
{
	EtlPtr Connection;
	EtlPtr SslIOContext;
	UINT64 CredHandleHigh;
	UINT64 CredHandleLow;
	EtlPtr DataChunks;
	UINT32 Index;
	EtlPtr Buffer;
	UINT64 Length;
	UINT32 Flags;
	WinErrorCode Error;
}
Struct WEBIO_SSLEncryptMessageDetails = FormatString("%s: SSL Encryption Details (SSLIOContext %s) Context Handle(%s:%s) (DataChunks: %s) (Index: %s) (OutBuffer: %s[%s]) (Flags %s) Data:%s", Connection.ToString, SslIOContext.ToString, CredHandleHigh.ToString, CredHandleLow.ToString, DataChunks.ToString, Index.ToString, Buffer.ToString, Length.ToString, Flags.ToString, Data.ToString)
{
	EtlPtr Connection;
	EtlPtr SslIOContext;
	UINT64 CredHandleHigh;
	UINT64 CredHandleLow;
	EtlPtr DataChunks;
	UINT32 Index;
	EtlPtr Buffer;
	UINT32 Length;
	UINT32 Flags;
	BLOB(Length) Data;
}
Struct WEBIO_SSLSendEntity = FormatString("%s: SSL Queue Send Entity (SSLIOContext %s) (DataChunks: %s) (RequestDisconnect? %s)", Connection.ToString, SslIOContext.ToString, DataChunks.ToString, RequestDisconnect.ToString)
{
	EtlPtr Connection;
	EtlPtr SslIOContext;
	EtlPtr DataChunks;
	BOOL RequestDisconnect;
	WinErrorCode Error;
}
Struct WEBIO_SSLSendEntityComplete = FormatString("%s: SSL Send Entity Complete (SSLIOContext: %s) (Error: %s) (DataChunks: %s) (RequestDisconnect? %s)", Connection.ToString, SslIOContext.ToString, Error.ToString, DataChunks.ToString, RequestDisconnect.ToString)
{
	EtlPtr Connection;
	EtlPtr SslIOContext;
	EtlPtr DataChunks;
	BOOL RequestDisconnect;
	WinErrorCode Error;
}
Struct WEBIO_SSLValidateCertificationComplete = FormatString("%s: SSL Cert Validation - (Error: %s) Context Handle(%s:%s) (IgnoredServerCertErrors %s) (CertErrors %s)", Connection.ToString, Error.ToString, ContextHandleHigh.ToString, ContextHandleLow.ToString, IgnoredServerCertErrors.ToString, ServerCertErrors.ToString)
{
	EtlPtr Connection;
	UINT64 ContextHandleHigh;
	UINT64 ContextHandleLow;
	UINT32 IgnoredServerCertErrors;
	UINT32 ServerCertErrors;
	WinErrorCode Error = WEBIO_SecurityApiRetValMap(this);
	UINT32 Reason = WEBIO_mapVerifiyCertFailureReason(this);
}
Struct WEBIO_SSLValidateCertificationFailure = FormatString("%s: SSL Cert Validation Failure - %s (Error: %s) Context Handle(%s:%s) (IgnoredServerCertErrors %s) (CertErrors %s)", Connection.ToString, Reason.ToString, Error.ToString, ContextHandleHigh.ToString, ContextHandleLow.ToString, IgnoredServerCertErrors.ToString, ServerCertErrors.ToString)
{
	EtlPtr Connection;
	UINT64 ContextHandleHigh;
	UINT64 ContextHandleLow;
	UINT32 IgnoredServerCertErrors;
	UINT32 ServerCertErrors;
	WinErrorCode Error = WEBIO_SecurityApiRetValMap(this);
	UINT32 Reason = WEBIO_mapVerifiyCertFailureReason(this);
}
Struct WEBIO_SSLReceiveEntity = FormatString("%s: SSL Queue Recv Entity Data Chunk (SSLIOContext %s) (DataChunks: %s)", Connection.ToString, SslIOContext.ToString, DataChunks.ToString)
{
	EtlPtr Connection;
	EtlPtr SslIOContext;
	EtlPtr DataChunks;
}
Struct WEBIO_SSLReceiveEntityComplete = FormatString("%s: SSL Filling Up Recv Entity Data Chunk (SSLIOContext: %s) (DataChunks: %s) (PlainData %s[%s]) (Information: %s)", Connection.ToString, SslIOContext.ToString, DataChunks.ToString, PlainData.ToString, PlainDataLength.ToString, Information.ToString)
{
	EtlPtr Connection;
	EtlPtr SslIOContext;
	EtlPtr DataChunks;
	EtlPtr PlainData;
	UINT32 PlainDataLength;
	UINT32 Information;
	WinErrorCode Error;
}
Struct WEBIO_SSLDecryptMessage = FormatString("%s: SSL Decryption - Context Handle(%s:%s) (Buffer %s[%s/%s]) (PlainData %s[%s])", Connection.ToString, ContextHandleHigh.ToString, ContextHandleLow.ToString, Buffer.ToString, BufferLengthData.ToString, BufferLengthRemaining.ToString, PlainData.ToString, PlainDataLength.ToString)
{
	EtlPtr Connection;
	UINT64 ContextHandleHigh;
	UINT64 ContextHandleLow;
	EtlPtr Buffer;
	UINT32 BufferLengthData;
	UINT32 BufferLengthRemaining;
	EtlPtr PlainData;
	UINT32 PlainDataLength;
	WinErrorCode SecStatus = WEBIO_SecurityApiRetValMap(this);
	WinErrorCode Error;
}
Struct WEBIO_SSLDecryptMessageComplete = FormatString("%s: SSL Decryption Complete (SecStatus %s) (Error %s) Context Handle(%s:%s) (Buffer %s[%s/%s]) (PlainData %s[%s])", Connection.ToString, SecStatus.ToString, Error.ToString, ContextHandleHigh.ToString, ContextHandleLow.ToString, Buffer.ToString, BufferLengthData.ToString, BufferLengthRemaining.ToString, PlainData.ToString, PlainDataLength.ToString)
{
	EtlPtr Connection;
	UINT64 ContextHandleHigh;
	UINT64 ContextHandleLow;
	EtlPtr Buffer;
	UINT32 BufferLengthData;
	UINT32 BufferLengthRemaining;
	EtlPtr PlainData;
	UINT32 PlainDataLength;
	WinErrorCode SecStatus = WEBIO_SecurityApiRetValMap(this);
	WinErrorCode Error;
}
Struct WEBIO_SSLConnectionBufferReceive = FormatString("%s: SSL Receive Buffer Posting Receive (DataChunk %s) (Buffer %s[%s/%s])", Connection.ToString, DataChunks.ToString, Buffer.ToString, Consumed.ToString, Available.ToString)
{
	EtlPtr Connection;
	EtlPtr DataChunks;
	EtlPtr Buffer;
	UINT32 Consumed;
	UINT32 Available;
	UINT32 Information;
	WinErrorCode Error;
}
Struct WEBIO_SSLConnectionBufferReceiveComplete = FormatString("%s: SSL Receive Buffer Receive Complete (DataChunk %s) (Error %s) (Information %s) (Buffer %s[%s/%s])", Connection.ToString, DataChunks.ToString, Error.ToString, Information.ToString, Buffer.ToString, Consumed.ToString, Available.ToString)
{
	EtlPtr Connection;
	EtlPtr DataChunks;
	EtlPtr Buffer;
	UINT32 Consumed;
	UINT32 Available;
	UINT32 Information;
	WinErrorCode Error;
}
Struct WEBIO_SSLConnectionBufferReceiveDetails = FormatString("%s: SSL Receive Buffer Details: (Buffer %s[%s/%s]) Data: %s", Connection.ToString, Buffer.ToString, BufferLengthData.ToString, BufferLengthRemaining.ToString, Data.ToString)
{
	EtlPtr Connection;
	EtlPtr Buffer;
	UINT32 BufferLengthData;
	UINT32 BufferLengthRemaining;
	BLOB(BufferLengthData) Data;
	BOOL DummyWorkaroundVal;
}
Struct WEBIO_SSLConnectionBufferReallocate = FormatString("%s: SSL Receive Buffer Posting Receive (Buffer %s) (NewBuffer: %s)", Connection.ToString, OldBuffer.ToString, NewBuffer.ToString)
{
	EtlPtr Connection;
	EtlPtr OldBuffer;
	EtlPtr NewBuffer;
}
Struct WEBIO_SSLAcquireCredentialsHandle = FormatString("%s: SSL AcquireCredentialsHandle - (EnabledProtocols %s) (ClientCert %s) (EnableRevertToSelfClientCertificate %s)", Connection.ToString, EnabledProtocols.ToString, SSLClientCert.ToString, EnableRevertToSelfClientCertificate.ToString)
{
	EtlPtr Connection;
	WEBIO_mapSChannelProtocolIdentifiers EnabledProtocols;
	EtlPtr SSLClientCert;
	UINT16 EnableRevertToSelfClientCertificate;
	UINT64 CredHandleHigh;
	UINT64 CredHandleLow;
	WinErrorCode Result = WEBIO_SecurityApiRetValMap(this);
}
Struct WEBIO_SSLAcquireCredentialsHandleComplete = FormatString("%s: SSL AcquireCredentialsHandle returned - (%s) Credential Handle(%s:%s) (EnabledProtocols %s) (ClientCert %s) (EnableRevertToSelfClientCertificate %s)", Connection.ToString, Result.ToString, CredHandleHigh.ToString, CredHandleLow.ToString, EnabledProtocols.ToString, SSLClientCert.ToString, EnableRevertToSelfClientCertificate.ToString)
{
	EtlPtr Connection;
	WEBIO_mapSChannelProtocolIdentifiers EnabledProtocols;
	EtlPtr SSLClientCert;
	UINT16 EnableRevertToSelfClientCertificate;
	UINT64 CredHandleHigh;
	UINT64 CredHandleLow;
	WinErrorCode Result = WEBIO_SecurityApiRetValMap(this);
}
Struct WEBIO_SSLAcquireCredentialsHandleFailed = FormatString("%s: SSL AcquireCredentialsHandle failed - (%s) (EnabledProtocols %s) (ClientCert %s) (EnableRevertToSelfClientCertificate %s)", Connection.ToString, Result.ToString, EnabledProtocols.ToString, SSLClientCert.ToString, EnableRevertToSelfClientCertificate.ToString)
{
	EtlPtr Connection;
	WEBIO_mapSChannelProtocolIdentifiers EnabledProtocols;
	EtlPtr SSLClientCert;
	UINT16 EnableRevertToSelfClientCertificate;
	UINT64 CredHandleHigh;
	UINT64 CredHandleLow;
	WinErrorCode Result = WEBIO_SecurityApiRetValMap(this);
}
Struct WEBIO_RequestInitialize = FormatString("%s: =====Request Initialize===================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestQueryEndpoints = FormatString("%s: =====Query Endpoints======================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestWaitingForAvailableConnection = FormatString("%s: =====Waiting For Available Connection=====", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestConnecting = FormatString("%s: =====Request Connect======================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_ConnectionNameResolution = FormatString("%s: =====Name Resolution======================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_ConnectionTCPConnect = FormatString("%s: =====TCP Connect==========================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_ConnectionSSLNegotiation = FormatString("%s: =====SSL Negotiation======================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestGenerateHeaders = FormatString("%s: =====Generate Headers=====================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestSendHeaders = FormatString("%s: =====Send Headers=========================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestSendEntity = FormatString("%s: =====Send Entity==========================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestSendComplete = FormatString("%s: =====Send Complete========================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestReceiveHeaders = FormatString("%s: =====Receive Headers======================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestReceiveEntity = FormatString("%s: =====Receive Entity=======================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestReceiveComplete = FormatString("%s: =====Receive Complete=====================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestRestart = FormatString("%s: =====Request Restart======================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_RequestDone = FormatString("%s: =====Request Done=========================", Context.ToString)
{
	EtlPtr Context;
}
Struct WEBIO_DebugDumpStringTrace = FormatString("%s", Message.ToString)
{
	UINT16 Length;
	AsciiString(Length) Message;
}
Struct WEBIO_ThreadAction = FormatString("Starting %s Thread Action (Context: %s)", EtwQueueActionType.ToString, Context.ToString)
{
	EtlPtr Context;
	UINT32 EtwQueueActionType = WEBIO_mapQueueActionType(this);
}
Struct WEBIO_ThreadActionComplete = FormatString("Stopping %s Thread Action (Context: %s)", EtwQueueActionType.ToString, Context.ToString)
{
	EtlPtr Context;
	UINT32 EtwQueueActionType = WEBIO_mapQueueActionType(this);
}
Struct WEBIO_ThreadActionQueue = FormatString("Queue %s Thread Action (Context: %s)", EtwQueueActionType.ToString, Context.ToString)
{
	EtlPtr Context;
	UINT32 EtwQueueActionType = WEBIO_mapQueueActionType(this);
}
Struct WEBIO_ThreadActionCancel = FormatString("Canceling %s Thread Action (Context: %s)", EtwQueueActionType.ToString, Context.ToString)
{
	EtlPtr Context;
	UINT32 EtwQueueActionType = WEBIO_mapQueueActionType(this);
}
Struct WEBIO_ThreadTokenGet = FormatString("Get Thread Token %s (Error: %s) (SID: %s)", Token.ToString, Error.ToString, SID.ToString)
{
	UINT64 Token;
	SID(false) SID;
	WinErrorCode Error;
}
Struct WEBIO_ThreadTokenSet = FormatString("Set Thread Token %s (OldToken %s) (Error: %s)", Token.ToString, OldToken.ToString, Error.ToString)
{
	UINT64 Token;
	UINT64 OldToken;
	WinErrorCode Error;
}
Struct WEBIO_ThreadTokenRestore = FormatString("Restore Thread Token %s (Error: %s)", Token.ToString, Error.ToString)
{
	UINT64 Token;
	WinErrorCode Error;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsWebIO_Keyword, "{50b3e73c-9370-461d-bb9f-26f32d68887d}")]
struct WEBIO_MicrosoftWindowsWebIO_Keyword
{
	UINT64 KeywordAPI:1 = FormatString("             (%s) %s", this.ToBitString, this? "API":"");
	UINT64 Reserved1:31 = FormatString("              (%s)", this.ToBitString);
	UINT64 KeywordSEND:1 = FormatString("            (%s) %s", this.ToBitString, this? "NA": "");
	UINT64 KeywordRECEIVE:1 = FormatString("         (%s) %s", this.ToBitString, this? "RECEIVE":"");
	UINT64 KeywordL3_CONNECT:1 = FormatString("      (%s) %s", this.ToBitString, this? "L3_CONNECT":"");
	UINT64 Reserved2:1 = FormatString("              (%s)", this.ToBitString);
	UINT64 KeywordCLOSE:1 = FormatString("           (%s) %s", this.ToBitString, this? "NA": "");
	UINT64 KeywordSECURITY:1 = FormatString("        (%s) %s", this.ToBitString, this? "SECURITY":"");
	UINT64 KeywordCONFIGURATION:1 = FormatString("   (%s) %s", this.ToBitString, this? "CONFIGURATION":"");
	UINT64 KeywordGLOBAL:1 = FormatString("          (%s) %s", this.ToBitString, this? "GLOBAL":"");
	UINT64 KeywordDROPPED:1 = FormatString("         (%s) %s", this.ToBitString, this? "DROPPED":"");
	UINT64 KeywordPII_PRESENT:1 = FormatString("     (%s) %s", this.ToBitString, this? "PII_PRESENT":"");
	UINT64 KeywordPACKET:1 = FormatString("          (%s) %s", this.ToBitString, this? "PACKET":"");
	UINT64 KeywordADDRESS:1 = FormatString("         (%s) %s", this.ToBitString, this? "ADDRESS":"");
	UINT64 KeywordCONTEXT_EVENT:1 = FormatString("   (%s) %s", this.ToBitString, this? "CONTEXT_EVENT":"");
	UINT64 KeywordSTATE_TRANSITION:1 = FormatString("(%s) %s", this.ToBitString, this? "STATE_TRANSITION":"");
	UINT64 Reserved3:18 = FormatString("              (%s)", this.ToBitString);
}
