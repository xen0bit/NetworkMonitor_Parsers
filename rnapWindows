//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  RADIUS Microsoft Vendor Specific TLVs
//#
//#  Details:                used in Network Access Protection protocols
//#
//#  Microsoft References:   [MS-RNAP]: Vendor-Specific RADIUS Attributes for Network Access Protection(NAP) Protocol Specification (10.2)
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 9/17/2009
//#                          Minor, 1/29/2010
//#
//####

Struct RNAP(Length)= RNAPVendorTypePrivateTable( VendorType )
{
	UINT8 VendorType = FormatString("%s, %u(0x%X)", RNAPVendorTypePrivateTable( this ), this, this);
	[Property.VendorLength]
	UINT8 VendorLength;
	switch (VendorType)
	{
		case 0x22:
			_struct MSRASClientName
			{
				AsciiString(VendorLength - 2) MachineName;
			}
		case 0x23:
			_struct MSRASClientVersion
			{
				AsciiString(VendorLength - 2) VersionString;
			}
		case 0x24:
			[DataFieldByteOrder = LittleEndian]
			RNAPMSQuarantineIPFilter MSQuarantineIPFilter;
		case 0x25:
			_struct MSQuarantineSessionTimeout
			{
				UINT32 Timeout = FormatString("%u seconds", this);
			}
		case 0x28:
			_struct MSUserSecurityIdentity
			{
				BLOB(VendorLength - 2) SID;
			}
		case 0x29:
			_struct MSIdentityType
			{
				UINT32 IdentityType = FormatString("%s, %u(0x%X)", RNAPMSAttrMSIdentityTypeTable(this), this, this);
			}
		case 0x2A:
			_struct MSServiceClass
			{
				AsciiString(VendorLength - 2) ServiceClass;
			}
		case 0x2B:
			RNAPMsQuarantineSoh MsQuarantineSoh;
		case 0x2C:
			_struct MSQuarantineUserClass
			{
				AsciiString(VendorLength - 2) QuarantineUserClass;
			}
		case 0x2D:
			_struct MSQuarantineState
			{
				UINT32 QuarantineState = FormatString("%s, %u(0x%X)", RNAPMSAttrQuarantineStateTable(this), this, this);
			}
		case 0x2E:
			_struct MSQuarantineGraceTime
			{
				UINT32 QuarantineGraceTime = FormatString("%u seconds", this);
			}
		case 0x2F:
			_struct MSNetworkAccessServerType
			{
				UINT32 NetworkAccessServerType = FormatString("%s, %u(0x%X)", RNAPMSAttrNetworkAccessServerTypeTable(this), this, this);
			}
		case 0x30:
			_struct MSAFWQuarantineZone
			{
				UINT32 AFWQuarantineZone = FormatString("%s, %u(0x%X)", RNAPMSAttrAFWQuarantineZoneTypeTable(this), this, this);
			}
		case 0x31:
			_struct MSAFWProtectionLevel
			{
				UINT32 AFWProtectionLevel = FormatString("%s, %u(0x%X)", RNAPMSAttrAFWProtectionLevelTable(this), this, this);
			}
		case 0x32:
			_struct MSMachineName
			{
				AsciiString(VendorLength - 2) MachineName;
			}
		case 0x33:
			RNAPMsIPv6Filter MsIPv6Filter;
		case 0x34:
			_struct MSIPv4RemediationServers
			{
				UINT8 Version;
				IPv4Address IPAddress[(VendorLength - 3) / 4];
			}
		case 0x35:
			_struct MSIPv6RemediationServers
			{
				UINT8 Version;
				IPv6Address IPAddress[(VendorLength - 3) / 16];
			}
		case 0x36:
			_struct NotQuarantineCapable
			{
				UINT32 NotQuarantineCapable = FormatString("%s, %u(0x%X)", RNAPMSAttrNotQuarantineCapableTable(this), this, this);
			}
		case 0x37:
			_struct MSQuarantineSOH
			{
				[DataFieldFrameLength = FrameOffset + VendorLength - 2]
				SOH SOH;
			}
		case 0x38:
			_struct MSRASCorrelationID
			{
				GUID(true) CorrelationID;
			}
		case 0x39:
			_struct MSExtendedQuarantineState
			{
				UINT32 AttributeSpecificValue = RNAPQuarantineStateTable(this);
			}
		case 0x3A:
			_struct HCAPUserGroups
			{
				AsciiString(VendorLength - 2) HCAPUserGroups;
			}
		case 0x3B:
			_struct HCAPLocationUserGroups
			{
				AsciiString(VendorLength - 2) HCAPLocationUserGroups;
			}
		case 0x3C:
			_struct HCAPUserName
			{
				AsciiString(VendorLength - 2) HCAPUserName;
			}
		case 0x3D:
			_struct MSUserIPv4Address
			{
				IPv4Address UserIPv4Address;
			}
		case 0x3E:
			_struct MSUserIPv6Address
			{
				IPv6Address UserIPv6Address;
			}
		case 0x3F:
			_struct MSTSGDeviceRedirection
			{
				UINT32 AttributeSpecificValue
				{
					UINT32 Drivesredirection:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Disable drives redirection" : "Enable drives redirection");
					UINT32 Printersredirection:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Disable printers redirection" : "Enable printers redirection");
					UINT32 Serialportsredirection:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Disable serial ports redirection" : "Enable serial ports redirection");  
					UINT32 Clipboardredirection:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Disable clipboard redirection" : "Enabled clipboard redirection"); 
					UINT32 Plugandplaydevicesredirection:1 = FormatString(" (%s) %s", this.ToBitString, this ? "Disable plug and play devices redirection " : "Enable plug and play devices redirection"); 
					UINT32 Reserved1:24 = FormatString("(%s) %s", this.ToBitString, "Reserved for additional devices" ); 
					UINT32 SpecificValue1:1 = FormatString("(%s) %s", this.ToBitString, this ? "Disable redirection for all devices" : "device redirection is controlled by bits 0..4"); 
					UINT32 SpecificValue2:1 = FormatString("(%s) %s", this.ToBitString, this ? "Disable redirection for all devices" : "device redirection is controlled, first, by bit 29 and then by bits 0..4"); 
					UINT32 Reserved2:1 = FormatString("(%s) %s", this.ToBitString, this ); 
				};
			}
		default:
			BLOB(VendorLength - 2) MSSpecificData;
		
	}
}

Table RNAPMSAttrIPv4FilterInfoTypeTable( value )
{
	switch( value )
	{
		case 0xFFFF0001: "Input filter: The filter MUST be applied to IP packets sent from the endpoint to the Network Access Server (NAS)";
		case 0xFFFF0002: "Output filter: The filter MUST be applied to IP packets sent from the NAS to the endpoint";
		case 0xFFFF0009: "Site-to-site connection: IP traffic that matches this filter indicates to the NAS that a site-to-site connection MUST be connected and all IP packets matching this filter MUST be routed into the connection";
		default: "Undefined Value";
	}
}

Table RNAPMSAttrIPv6FilterInfoTypeTable( value )
{
	switch( value )
	{
		case 0xFFFF0011: "Input filter – The filter NAS MUST be applied to IP packets sent from the endpoint to the NAS";
		case 0xFFFF0012: "Output filter – The filter MUST be applied to IP packets sent from the NAS to the endpoint";
		default: "Undefined Value";
	}
}
Table RNAPMSAttrIPFilterForwardActionTable( value )
{
	switch( value )
	{
		case 0x00000000: "Forward";
		case 0x00000001: "Drop";
		default: "Undefined Value";
	}
}
Table RNAPVendorTypePrivateTable( value )
{
	switch( value )
	{
		case 0x22: "MSRASClientName";
		case 0x23: "MSRASClientVersion";
		case 0x24: "MSQuarantineIPFilter";
		case 0x25: "MSQuarantineSessionTimeout";
		case 0x28: "MSUserSecurityIdentity";
		case 0x29: "MSIdentityType";
		case 0x2A: "MSServiceClass";
		case 0x2B: "MSEAPTLVAttribute";
		case 0x2C: "MSQuarantineUserClass";
		case 0x2D: "MSQuarantineState";
		case 0x2E: "MSQuarantineGraceTime";
		case 0x2F: "MSNetworkAccessServerType";
		case 0x30: "MSAFWQuarantineZone";
		case 0x31: "MSAFWProtectionLevel";
		case 0x32: "MSMachineName";
		case 0x33: "MSIPv6Filter";
		case 0x34: "MSIPv4RemediationServers";
		case 0x35: "MSIPv6RemediationServers";
		case 0x36: "NotQuarantineCapable";
		case 0x37: "MSSOH";
		case 0x38: "MSRASCorrelationID";
		case 0x39: "MSExtendedQuarantineState";
		case 0x3A: "HCAPUserGroups";
		case 0x3B: "HCAPLocationUserGroups";
		case 0x3C: "HCAPUserName";
		case 0x3D: "MSUserIPv4Address";
		case 0x3E: "MSUserIPv6Address";
		case 0x3F: "MSTSGDeviceRedirection";
		default: "Undefined Value";
	}
}
Table RNAPMSAttrMSIdentityTypeTable(value)
{
	switch(value)
	{
		case 0x00000001: "Indicates to the RADIUS server that this access request message is for a machine health check only and not for authentication";
		default: "Undefined Value";
	}
}

Table RNAPMSAttrQuarantineStateTable( value )
{
	switch( value )
	{
		case 0x00000000: "Full access: The endpoint is given full access to the network";
		case 0x00000001: "Restricted: The endpoint is given limited access to the network";
		case 0x00000002: "On probation: The endpoint is given full access within a limited time period";
		default: "Undefined Value";
	}
}

Table RNAPMSAttrNetworkAccessServerTypeTable( value )
{
	switch( value )
	{
		case 0x00000000: "Unspecified";
		case 0x00000001: "Terminal Server Gateway";
		case 0x00000002: "Remote Access server (VPN or dial-in)";
		case 0x00000003: "DHCP server";
		case 0x00000005: "Health Registration Authority (HRA)";
		case 0x00000006: "Host Credential Authorization Protocol (HCAP) server";
		default: "A tag value used to identify applicable network access policies on the RADIUS server";
	}
}

Table RNAPMSAttrAFWQuarantineZoneTypeTable( value )
{
	switch( value )
	{
		case 0x00000001: "Indicates that the endpoint SHOULD apply an IPsec policy that can require encryption (a boundary policy)";
		case 0x00000002: "Indicates that the endpoint SHOULD apply an IPsec policy that does not require encryption (an unprotected policy)";
		case 0x00000003: "Indicates that the endpoint SHOULD apply an IPsec policy that does require encryption (a protected policy)";
		default: "Undefined Value";
	}
}

Table RNAPMSAttrAFWProtectionLevelTable( value )
{
	switch( value )
	{
		case 0x00000001: "Indicates that the certificate payload in the Health Certificate Enrollment Protocol (HCEP) response can be used for signing data";
		case 0x00000002: "Indicates that the certificate payload in the HCEP response can be used for signing and encrypting data";
		default: "Undefined Value";
	}
}

Table RNAPMSAttrNotQuarantineCapableTable( value )
{
	switch( value )
	{
		case 0x00000000: "The endpoint sent a SoH";
		case 0x00000001: "The endpoint did not send an SoH";
		default: "Undefined Value";
	}
}

Table RNAPQuarantineStateTable(Value)
{
	switch( value )
	{
		case 0x00000000:"No data";
		case 0x00000001:"Transition";
		case 0x00000002:"Infected";
		case 0x00000003:"Unknown";
		default:"Undefined Value";
	}
}

//
//	MS_IPv6_Filter
//
struct RNAPMsIPv6Filter = UINT32(FrameData,FrameOffset + 4) > Property.VendorLength ? FormatString("The MsIPv6Filter has continued data in the next attribute") : FormatString("")
{
	[Local.MSIPv6FilterBaseOffset = FrameOffset]
	UINT32 Version= MustBeSetToTable(this, "0x00000001");
	UINT32 Size;
	[Local.FilterSetEntryCount]
	UINT32 FilterSetEntryCount;
	[MaxLoopCount = Local.FilterSetEntryCount]
	while [true]
	{
		struct FilterSetEntry = FormatString("%s, %u(0x%X)", RNAPMSAttrIPv6FilterInfoTypeTable(InfoType), this, this)
		{
			UINT32 InfoType = FormatString("%s, %u(0x%X)", RNAPMSAttrIPv6FilterInfoTypeTable(this), this, this);
			UINT32 InfoSize;
			[Local.MSIPv6FilterSetCounts.AddToProperty(this, 0)]
			UINT32 Count;
			[Local.MSIPv6FilterSetOffsets.AddToProperty(this, 0)]
			UINT32 Offset;
		}
	}

	[MaxLoopCount = Local.FilterSetEntryCount]
	[Local.FilterSetEntryIndex = -1]
	while [true]
	{
		[Local.FilterSetEntryIndex = Local.FilterSetEntryIndex + 1]
		switch 
		{
			case FrameOffset - Local.MSIPv6FilterBaseOffset < Local.MSIPv6FilterSetOffsets[Local.FilterSetEntryIndex]:
				BLOB(Local.MSIPv6FilterSetOffsets[Local.FilterSetEntryIndex] - (FrameOffset - Local.MSIPv6FilterBaseOffset)) Pad;
		}
	
		[MaxLoopCount = Local.MSIPv6FilterSetCounts[Local.FilterSetEntryIndex]]
		while [true]
		{
			struct FilterSet = FormatString("Count = %u", FilterCount)
			{
				UINT32 FilterVersion;
				UINT32 FilterCount;
				UINT32 ForwardAction = FormatString("%s, %u(0x%X)", RNAPMSAttrIPFilterForwardActionTable(this), this, this);
				[MaxLoopCount = FilterCount]
				while [true]
				{
					struct Filter = FormatString("%s, %u(0x%X)", RNAPMSAttrIPFilterForwardActionTable(ForwardAction), this, this)
					{
						IPv6Address IPv6SourceAddress;
						UINT32 SourcePrefixLength;
						switch
						{
							case Property.RADIUSTLVLength == 255 && FrameOffset + 20 - Property.RADIUSAttributeFrameOffset > 255:
								Blob(255 - (FrameOffset - Property.RADIUSAttributeFrameOffset)) FilterContinueData;
							default:
								struct
								{
									IPv6Address IPv6DestinationAddress;
									UINT32 DestinationPrefixLength;
									UINT32 Protocol = FormatString("%d,%s",this,RnapProtocolTable(this));
									UINT32 LateBound = this ? "" : "No Source or Destination Address or Mask Replacement"
									{
										UINT32 Unused:28 = FormatString("               (%s)", this.ToBitString);
										UINT32 DestinationAddressMask:1 = FormatString("(%s) %s", this.ToBitString, this ? "Replaceable" : "Not replaceable");
										UINT32 SourceAddressMask:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Replaceable" : "Not replaceable");
										UINT32 DestinationAddress:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Replaceable" : "Not replaceable");
										UINT32 SourceAddress:1 = FormatString("         (%s) %s", this.ToBitString, this ? "Replaceable" : "Not replaceable");
									};
									switch(Protocol)
									{
										case 0x00000001:
										case 0x00000006:
										case 0x00000011:
										case 0x0000003A:
											struct
											{
												UINT16 SourcePort;
												UINT16 DestinationPort;
											}
										default: 
											struct
											{
												UINT16 SourcePort = MustBeSetToTable(this,"0");
												UINT16 DestinationPort = MustBeSetToTable(this,"0");
											}
									}
								}
						}
						
					}
				}
			}
		}
	}

}

//
//	MS_Quarantine_IPFilter
//
struct RNAPMsQuarantineIPFilter
{
	[Local.MSQuarantineIPFilterBaseOffset = FrameOffset]
	UINT32 Version = MustBeSetToTable(this,"0x00000001");
	UINT32 Size;
	[Local.FilterSetEntryCount]
	UINT32 FilterSetEntryCount;
	[MaxLoopCount = Local.FilterSetEntryCount]
	while [true]
	{
		struct FilterSetEntry = FormatString("%s, %u(0x%X)", RNAPMSAttrIPv4FilterInfoTypeTable(InfoType), this, this)
		{
			UINT32 InfoType = FormatString("%s, %u(0x%X)", RNAPMSAttrIPv4FilterInfoTypeTable(this), this, this);
			UINT32 InfoSize;
			[Local.MSQuarantineIPFilterSetCounts.AddToProperty(this, 0)]
			UINT32 Count;
			[Local.MSQuarantineIPFilterSetOffsets.AddToProperty(this, 0)]
			UINT32 Offset;
		}
	}
	[MaxLoopCount = Local.FilterSetEntryCount]
	[Local.FilterSetEntryIndex = -1]
	while [true]
	{
		[Local.FilterSetEntryIndex = Local.FilterSetEntryIndex + 1]
		switch 
		{
			case FrameOffset - Local.MSQuarantineIPFilterBaseOffset < Local.MSQuarantineIPFilterSetOffsets[Local.FilterSetEntryIndex]:
				BLOB(Local.MSQuarantineIPFilterSetOffsets[Local.FilterSetEntryIndex] - (FrameOffset - Local.MSQuarantineIPFilterBaseOffset)) Pad;
		}
	
		[MaxLoopCount = Local.MSQuarantineIPFilterSetCounts[Local.FilterSetEntryIndex]]
		while [true]
		{
			struct FilterSet = FormatString("Count = %u", FilterCount)
			{
				UINT32 FilterVersion;
				UINT32 FilterCount;
				UINT32 ForwardAction = FormatString("%s, %u(0x%X)", RNAPMSAttrIPFilterForwardActionTable(this), this, this);
				[MaxLoopCount = FilterCount]
				while [true]
				{
					[Local.MSQuarantineIPFilterCount = Local.MSQuarantineIPFilterCount - 1]
					struct Filter = FormatString("%s, %u(0x%X)", RNAPMSAttrIPFilterForwardActionTable(ForwardAction), this, this)
					{
						IPv4Address SourceAddress;
						IPv4Address SourceMask;
						IPv4Address DestinationAddress;
						IPv4Address DestinationMask;
						UINT32 Protocol = FormatString("%d,%s",this,RnapProtocolTable(this));
						[DataFieldByteOrder = LittleEndian]
						UINT32 LateBound = this ? "" : "No Source or Destination Address or Mask Replacement"
						{
							UINT32 SourceAddress:1 = FormatString("         (%s) %s", this.ToBitString, this ? "Replaceable" : "Not replaceable");
							UINT32 DestinationAddress:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Replaceable" : "Not replaceable");
							UINT32 SourceAddressMask:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Replaceable" : "Not replaceable");
							UINT32 DestinationAddressMask:1 = FormatString("(%s) %s", this.ToBitString, this ? "Replaceable" : "Not replaceable");
							UINT32 Unused:28 = FormatString("               (%s)", this.ToBitString);
						};
						UINT16 SourcePort;
						UINT16 DestinationPort;
					}
				}
			}
		}
	}
}

//
//	MS_Quarantine_SOH
//
struct RNAPMsQuarantineSoh
{
	UINT16 M:1 = FormatString("         (%s) %s", this.ToBitString, this ? "Optional TLV" : "Mandatory TLV");
	UINT16 R:1 = FormatString("         (%s) %s", this.ToBitString, "Reserved");
	UINT16 EAPTLVType:14 = MustBeSetToTable(this,"0x07");
	UINT16 EAPTLVLength;
	struct EAPTLVValue
	{
		UINT32 VendorID = FormatString("%s, %u(0x%X)", EnterpriseNumberTable(this), this, this);
		UINT16 M:1 = FormatString("         (%s) %s", this.ToBitString, this ? "Optional TLV" : "Mandatory TLV");
		UINT16 R:1 = FormatString("         (%s) %s", this.ToBitString, "Reserved");
		UINT16 VendorType:14 = FormatString("(%s) %s", this.ToBitString, "MUST be 0x01");
		[DataFieldFrameLength = FrameOffset + Property.VendorLength - 12]
		SOH SOH;
	}
}

table RnapProtocolTable( Value )
{
	switch( Value )
	{
		case 0x00000000: "ANY";
		case 0x00000001: "ICMP";
		case 0x0000003A: "ICMPv6";
		case 0x00000006: "TCP";
		case 0x00000011: "UDP";
		default: "Unknown";
	}
}