//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Telephony Remote Protocol
//#
//#  Details:                for tapisrv and remotesp interfaces
//#
//#  Microsoft References:   [MS-TRP]: Telephony Remote Protocol Specification (11.1)
//#
//#  Comments:               Parser Framework: PAC v2.1.1577.0
//#
//#  Revision Class and Date:Major, 7/30/2009
//#                          Minor, 3/2/2010
//#
//####

Protocol TRP = FormatString( "%s %s%s%s%s%s%s", 
	Property.TRPMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.TrpTAPI32MessageDescription != "" ? " " + TrpTAPI32MessageDescription : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.TRPSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.TRPSummary : "" )
{
	[Property.TRPSummary = ""]
	Switch( Property.MSRPCIfUuid )
	{
		Case "{2F5F6521-CA47-1068-B319-00DD010662DB}":
			[Property.TRPMethodName = "remotesp:" + TRPRemoteSPMethodTable( Property.MSRPCOpnum )]
			_Struct remotesp
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 0:
						_Struct RemoteSPAttach
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TRPSummary = FormatString( "ReturnValue=%d", ReturnValue )]
												Struct
												{
													ContextHandle Context;
													UINT32 dwReturnValue = WinErrorCodeTable( this );
												}
										}
									}
							}
						}
					
					Case 1:
						_Struct RemoteSPEventProc
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TRPSummary = FormatString( "Size=%d", Size )]
												Struct
												{
													ContextHandle Context;
													TrpTAPI32Message pBuffer;
													ALIGN4 ALIGN;
													UINT32 Size;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
									}
							}
						}
					
					Case 2:
						_Struct RemoteSPDetach
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Context;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Context;
												}
										}
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("TRP", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "TRP", "Unknown remotesp method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
		Case "{2F5F6520-CA46-1067-B319-00DD010662DA}":
			[Property.TRPMethodName = "tapsrv:" + TRPClientMethodTable( Property.MSRPCOpnum )]
			_Struct tapsrv
			{
				Switch( Property.MSRPCOpnum )
				{
					Case 0:
						_Struct ClientAttach
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TRPSummary = FormatString( "ProcessID=%d DomainUser=%s Machine=%s", ProcessID, DomainUser.ToString, Machine.ToString )]
												Struct
												{
													INT32 ProcessID = TRPClientAttachProcessIDTable(this);
													NdrWideString DomainUser;
													NdrWideString Machine;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TRPSummary = FormatString( "AsyncEventsEvent=%d ReturnValue=%d", AsyncEventsEvent, ReturnValue )]
												Struct
												{
													ContextHandle Context;
													INT32 AsyncEventsEvent;
													UINT32 dwReturnValue = WinErrorCodeTable( this );
												}
										}
									}
							}
						}
					
					Case 1:
						_Struct ClientRequest
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TRPSummary = FormatString( "NeededSize=%d UsedSize=%d", NeededSize, UsedSize )]
												Struct
												{
													ContextHandle Context;
													TrpTAPI32Message pBuffer;
													Align4 Pad;
													INT32 NeededSize;
													INT32 UsedSize;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												[TRPSummary = FormatString( "UsedSize=%d", UsedSize )]
												Struct
												{
													TrpTAPI32Message pBuffer;
													Align4 Pad;
													INT32 UsedSize;
												}
										}
									}
							}
						}
					
					Case 2:
						_Struct ClientDetach
						{
							Switch( Property.MSRPCPType )
							{
								Case 0x00: //REQUEST
									_Struct Request
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Context;
												}
										}
									}
								
								Case 0x02: //RESPONSE
									_Struct Response
									{
										Switch
										{
											Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
											Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
											Default:
												Struct
												{
													ContextHandle Context;
												}
										}
									}
							}
						}
					
					Default:
						Switch
						{
							case IsValueNone(Property.MSRPCOpnum):
								struct
								{
									Blob( FrameLength - Offset ) data;
									ReportParserWarning("TRP", "Property MSRPCOpnum is missing") ParserWarning;
								}
							default:
								ReportParserError( ParserErrorProtocolClassWindows, "TRP", "Unknown tapsrv method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
						}
				}
			}
		
	}
}
//********TABLES********************************************************************************
table TRPClientAttachProcessIDTable(value)
{
	switch(value)
	{
		case 0xFFFFFFFF: "Client is a remote instance that wants to control the telephony devices on this server";
		case 0xFFFFFFFD: "Client is a remote instance that wants to manage and administer the telephony server";
		default:FormatString("value 0x%08x", value);
	}
}
Table TRPClientMethodTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0x0000: "ClientAttach";
		Case 0x0001: "ClientRequest";
		Case 0x0002: "ClientDetach";
		Default: "Unknown TRP Method";
	}
}

Table TRPRemoteSPMethodTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0x0000: "RemoteSPAttach";
		Case 0x0001: "RemoteSPEventProc";
		Case 0x0002: "RemoteSPDetach";
		Default: "Unknown TRP Method";
	}
}

Table TRPMethodTable( UUID, Opnum )
{
	switch( UUID )
	{
		Case "{2F5F6520-CA46-1067-B319-00DD010662DA}": TRPClientMethodTable( Opnum );
		Case "{2F5F6521-CA47-1068-B319-00DD010662DB}": TRPRemoteSPMethodTable( Opnum );
		Default: "";
	}
}

Table TRPInterfaceTable( UUID )
{
	Switch( UUID )
	{
		Case "{2F5F6520-CA46-1067-B319-00DD010662DA}": "tapsrv";
		Case "{2F5F6521-CA47-1068-B319-00DD010662DB}": "remotesp";
		Default: "Unknown TRP Interface";
	}
}

table TRPAckReturnValueTable(value)
{
	switch(value)
	{
		case 0x00000000: "SUCCESS";
		// Phone Error
		case 0x00000001: "PHONEERR_ALLOCATED";
		case 0x00000002: "PHONEERR_BADDEVICEID";
		case 0x00000003: "PHONEERR_INCOMPATIBLEAPIVERSION";
		case 0x00000004: "PHONEERR_INCOMPATIBLEEXTVERSION";
		case 0x00000005: "PHONEERR_INIFILECORRUPT";
		case 0x00000006: "PHONEERR_INUSE";
		case 0x00000007: "PHONEERR_INVALAPPHANDLE";
		case 0x00000008: "PHONEERR_INVALAPPNAME";
		case 0x00000009: "PHONEERR_INVALBUTTONLAMPID";
		case 0x0000000A: "PHONEERR_INVALBUTTONMODE";
		case 0x0000000B: "PHONEERR_INVALBUTTONSTATE";
		case 0x0000000C: "PHONEERR_INVALDATAID";
		case 0x0000000D: "PHONEERR_INVALDEVICECLASS";
		case 0x0000000E: "PHONEERR_INVALEXTVERSION";
		case 0x0000000F: "PHONEERR_INVALHOOKSWITCHDEV";
		case 0x00000010: "PHONEERR_INVALHOOKSWITCHMODE";
		case 0x00000011: "PHONEERR_INVALLAMPMODE";
		case 0x00000012: "PHONEERR_INVALPARAM";
		case 0x00000013: "PHONEERR_INVALPHONEHANDLE";
		case 0x00000014: "PHONEERR_INVALPHONESTATE";
		case 0x00000015: "PHONEERR_INVALPOINTER";
		case 0x00000016: "PHONEERR_INVALPRIVILEGE";
		case 0x00000017: "PHONEERR_INVALRINGMODE";
		case 0x00000018: "PHONEERR_NODEVICE";
		case 0x00000019: "PHONEERR_NODRIVER";
		case 0x0000001A: "PHONEERR_NOMEM";
		case 0x0000001B: "PHONEERR_NOTOWNER";
		case 0x0000001C: "PHONEERR_OPERATIONFAILED";
		case 0x0000001D: "PHONEERR_OPERATIONUNAVAIL";
		case 0x0000001F: "PHONEERR_RESOURCEUNAVAIL";
		case 0x00000020: "PHONEERR_REQUESTOVERRUN";
		case 0x00000021: "PHONEERR_STRUCTURETOOSMALL";
		case 0x00000022: "PHONEERR_UNINITIALIZED";
		case 0x00000023: "PHONEERR_REINIT";
		case 0x00000024: "PHONEERR_DISCONNECTED";
		case 0x00000025: "PHONEERR_SERVICE_NOT_RUNNING";

		// Line Error
		case 0x80000001: "LINEERR_ALLOCATED";
		case 0x80000002: "LINEERR_BADDEVICEID";
		case 0x80000003: "LINEERR_BEARERMODEUNAVAIL";
		case 0x80000005: "LINEERR_CALLUNAVAIL";
		case 0x80000006: "LINEERR_COMPLETIONOVERRUN";
		case 0x80000007: "LINEERR_CONFERENCEFULL";
		case 0x80000008: "LINEERR_DIALBILLING";
		case 0x80000009: "LINEERR_DIALDIALTONE";
		case 0x8000000A: "LINEERR_DIALPROMPT";
		case 0x8000000B: "LINEERR_DIALQUIET";
		case 0x8000000C: "LINEERR_INCOMPATIBLEAPIVERSION";
		case 0x8000000D: "LINEERR_INCOMPATIBLEEXTVERSION";
		case 0x8000000E: "LINEERR_INIFILECORRUPT";
		case 0x8000000F: "LINEERR_INUSE";
		case 0x80000010: "LINEERR_INVALADDRESS";
		case 0x80000011: "LINEERR_INVALADDRESSID";
		case 0x80000012: "LINEERR_INVALADDRESSMODE";
		case 0x80000013: "LINEERR_INVALADDRESSSTATE";
		case 0x80000014: "LINEERR_INVALAPPHANDLE";
		case 0x80000015: "LINEERR_INVALAPPNAME";
		case 0x80000016: "LINEERR_INVALBEARERMODE";
		case 0x80000017: "LINEERR_INVALCALLCOMPLMODE";
		case 0x80000018: "LINEERR_INVALCALLHANDLE";
		case 0x80000019: "LINEERR_INVALCALLPARAMS";
		case 0x8000001A: "LINEERR_INVALCALLPRIVILEGE";
		case 0x8000001B: "LINEERR_INVALCALLSELECT";
		case 0x8000001C: "LINEERR_INVALCALLSTATE";
		case 0x8000001D: "LINEERR_INVALCALLSTATELIST";
		case 0x8000001E: "LINEERR_INVALCARD";
		case 0x8000001F: "LINEERR_INVALCOMPLETIONID";
		case 0x80000020: "LINEERR_INVALCONFCALLHANDLE";
		case 0x80000021: "LINEERR_INVALCONSULTCALLHANDLE";
		case 0x80000022: "LINEERR_INVALCOUNTRYCODE";
		case 0x80000023: "LINEERR_INVALDEVICECLASS";
		case 0x80000024: "LINEERR_INVALDEVICEHANDLE";
		case 0x80000025: "LINEERR_INVALDIALPARAMS";
		case 0x80000026: "LINEERR_INVALDIGITLIST";
		case 0x80000027: "LINEERR_INVALDIGITMODE";
		case 0x80000028: "LINEERR_INVALDIGITS";
		case 0x80000029: "LINEERR_INVALEXTVERSION";
		case 0x8000002A: "LINEERR_INVALGROUPID";
		case 0x8000002B: "LINEERR_INVALLINEHANDLE";
		case 0x8000002C: "LINEERR_INVALLINESTATE";
		case 0x8000002D: "LINEERR_INVALLOCATION";
		case 0x8000002E: "LINEERR_INVALMEDIALIST";
		case 0x8000002F: "LINEERR_INVALMEDIAMODE";
		case 0x80000030: "LINEERR_INVALMESSAGEID";
		case 0x80000032: "LINEERR_INVALPARAM";
		case 0x80000033: "LINEERR_INVALPARKID";
		case 0x80000034: "LINEERR_INVALPARKMODE";
		case 0x80000035: "LINEERR_INVALPOINTER";
		case 0x80000036: "LINEERR_INVALPRIVSELECT";
		case 0x80000037: "LINEERR_INVALRATE";
		case 0x80000038: "LINEERR_INVALREQUESTMODE";
		case 0x80000039: "LINEERR_INVALTERMINALID";
		case 0x8000003A: "LINEERR_INVALTERMINALMODE";
		case 0x8000003B: "LINEERR_INVALTIMEOUT";
		case 0x8000003C: "LINEERR_INVALTONE";
		case 0x8000003D: "LINEERR_INVALTONELIST";
		case 0x8000003E: "LINEERR_INVALTONEMODE";
		case 0x8000003F: "LINEERR_INVALTRANSFERMODE";
		case 0x80000040: "LINEERR_LINEMAPPERFAILED";
		case 0x80000041: "LINEERR_NOCONFERENCE";
		case 0x80000042: "LINEERR_NODEVICE";
		case 0x80000043: "LINEERR_NODRIVER";
		case 0x80000044: "LINEERR_NOMEM";
		case 0x80000045: "LINEERR_NOREQUEST";
		case 0x80000046: "LINEERR_NOTOWNER";
		case 0x80000047: "LINEERR_NOTREGISTERED";
		case 0x80000048: "LINEERR_OPERATIONFAILED";
		case 0x80000049: "LINEERR_OPERATIONUNAVAIL";
		case 0x8000004A: "LINEERR_RATEUNAVAIL";
		case 0x8000004B: "LINEERR_RESOURCEUNAVAIL";
		case 0x8000004C: "LINEERR_REQUESTOVERRUN";
		case 0x8000004D: "LINEERR_STRUCTURETOOSMALL";
		case 0x8000004E: "LINEERR_TARGETNOTFOUND";
		case 0x8000004F: "LINEERR_TARGETSELF";
		case 0x80000050: "LINEERR_UNINITIALIZED";
		case 0x80000051: "LINEERR_USERUSERINFOTOOBIG";
		case 0x80000052: "LINEERR_REINIT";
		case 0x80000053: "LINEERR_ADDRESSBLOCKED";
		case 0x80000054: "LINEERR_BILLINGREJECTED";
		case 0x80000055: "LINEERR_INVALFEATURE";
		case 0x80000056: "LINEERR_NOMULTIPLEINSTANCE";
		case 0x80000057: "LINEERR_INVALAGENTID";
		case 0x80000058: "LINEERR_INVALAGENTGROUP";
		case 0x80000059: "LINEERR_INVALPASSWORD";
		case 0x8000005A: "LINEERR_INVALAGENTSTATE";
		case 0x8000005B: "LINEERR_INVALAGENTACTIVITY";
		case 0x8000005C: "LINEERR_DIALVOICEDETECT";
		case 0x8000005D: "LINEERR_USERCANCELLED";
		case 0x8000005F: "LINEERR_INVALAGENTSESSIONSTATE";
		case 0X80000060: "LINEERR_DISCONNECTED";
		case 0X80000061: "LINEERR_SERVICE_NOT_RUNNING";
		case 0x8000005E: "LINEERR_INVALADDRESSTYPE";
		default:
			FormatString("0x%08X - Request will complete asynchronously", value);
	}
}

Table TRPGenerateAttachRequestProcessTable( processID )
{
	Switch( processID )
	{
		Case 0xffffffff: "Client is a remote instance of RemoteSP.Tsp";
		Case 0xfffffffd: "Client is a remote instance of TAPI MMC";
		Default: "Unknown Process ID";
	}
}

Table TRPRequestIDTable(value)
{
	Switch
	{
		case value == 0: "The server must generate a unique positive request ID to return as the Ack_ReturnValue.";
		case value > 0 : "Request ID.";
		case value < 0 : "Error occurs.";
	}
}

Table TRPLineToneModeTable(value)
{
	switch (value)
	{
		case 0x00000001: "The tone is a custom tone defined by its component frequencies.";
		case 0x00000002: "The tone is ringback tone. Exact definition is service-provider defined.";
		case 0x00000004: "The tone is a busy tone. Exact definition is service-provider defined.";
		case 0x00000008: "The tone is a beep, such as that used to announce the beginning of a recording. Exact definition is service-provider defined.";
		case 0x00000010: "The tone is a billing information tone such as a credit card prompt tone. Exact definition is service-provider defined.";
		default: "Unknown Tone Mode.";
	}
}

struct TRPLINEMEDIAMODEFlag
{
	UINT32 LINEMEDIAMODE
	{
		UINT32 Reserved1:1 = FormatString("                     (%s)", this.ToBitString);
		UINT32 LINEMEDIAMODE_UNKNOWN:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_UNKNOWN": "NOT LINEMEDIAMODE_UNKNOWN");
		UINT32 LINEMEDIAMODE_INTERACTIVEVOICE:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEMEDIAMODE_INTERACTIVEVOICE": "NOT LINEMEDIAMODE_INTERACTIVEVOICE");
		UINT32 LINEMEDIAMODE_AUTOMATEDVOICE:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_AUTOMATEDVOICE": "NOT LINEMEDIAMODE_AUTOMATEDVOICE");
		UINT32 LINEMEDIAMODE_DATAMODEM:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_DATAMODEM": "NOT LINEMEDIAMODE_DATAMODEM");
		UINT32 LINEMEDIAMODE_G3FAX:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_G3FAX": "NOT LINEMEDIAMODE_G3FAX");
		UINT32 LINEMEDIAMODE_TDD:1 = FormatString("             (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_TDD": "NOT LINEMEDIAMODE_TDD");
		UINT32 LINEMEDIAMODE_G4FAX:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_G4FAX": "NOT LINEMEDIAMODE_G4FAX");
		UINT32 LINEMEDIAMODE_DIGITALDATA:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_DIGITALDATA": "NOT LINEMEDIAMODE_DIGITALDATA");
		UINT32 LINEMEDIAMODE_TELETEX:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_TELETEX": "NOT LINEMEDIAMODE_TELETEX");
		UINT32 LINEMEDIAMODE_VIDEOTEX:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_VIDEOTEX": "NOT LINEMEDIAMODE_VIDEOTEX");
		UINT32 LINEMEDIAMODE_TELEX:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_TELEX": "NOT LINEMEDIAMODE_TELEX");
		UINT32 LINEMEDIAMODE_MIXED:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_MIXED": "NOT LINEMEDIAMODE_MIXED");
		UINT32 LINEMEDIAMODE_ADSI:1 = FormatString("            (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_ADSI": "NOT LINEMEDIAMODE_ADSI");
		UINT32 LINEMEDIAMODE_VOICEVIEW:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_VOICEVIEW": "NOT LINEMEDIAMODE_VOICEVIEW");
		UINT32 LINEMEDIAMODE_VIDEO:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEMEDIAMODE_VIDEO": "NOT LINEMEDIAMODE_VIDEO");
		UINT32 Reserved2:16 = FormatString("                     (%s)", this.ToBitString);
	}
}

struct TRPLINECALLORIGINFlag
{
	UINT32 LINECALLORIGIN
	{
		UINT32 LINECALLORIGIN_OUTBOUND:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLORIGIN_OUTBOUND" : "");
		UINT32 LINECALLORIGIN_INTERNAL:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLORIGIN_INTERNAL": "");
		UINT32 LINECALLORIGIN_EXTERNAL:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLORIGIN_EXTERNAL": "");
		UINT32 Reserved1:1= FormatString("                      (%s)", this.ToBitString);
		UINT32 LINECALLORIGIN_UNKNOWN:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLORIGIN_UNKNOWN": "");
		UINT32 LINECALLORIGIN_UNAVAIL:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLORIGIN_UNAVAIL": "");
		UINT32 LINECALLORIGIN_CONFERENCE:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLORIGIN_CONFERENCE": "");
		UINT32 LINECALLORIGIN_INBOUND:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLORIGIN_INBOUND": "");
		UINT32 Reserved2:24 = FormatString("                     (%s)", this.ToBitString);
	}
}

struct TRPLINECALLREASONFlag
{
	UINT32 LINECALLREASON
	{
		UINT32 LINECALLREASON_DIRECT:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLREASON_DIRECT" : "");
		UINT32 LINECALLREASON_FWDBUSY:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINECALLREASON_FWDBUSY": "");
		UINT32 LINECALLREASON_FWDNOANSWER:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLREASON_FWDNOANSWER": "");
		UINT32 LINECALLREASON_FWDUNCOND:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLREASON_FWDUNCOND": "");
		UINT32 LINECALLREASON_PICKUP:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLREASON_PICKUP": "");
		UINT32 LINECALLREASON_UNPARK:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLREASON_UNPARK": "");
		UINT32 LINECALLREASON_REDIRECT:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLREASON_REDIRECT": "");
		UINT32 LINECALLREASON_CALLCOMPLETION:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLREASON_CALLCOMPLETION": "");
		UINT32 LINECALLREASON_TRANSFER:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLREASON_TRANSFER": "");
		UINT32 LINECALLREASON_REMINDER:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLREASON_REMINDER": "");
		UINT32 LINECALLREASON_UNKNOWN:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINECALLREASON_UNKNOWN": "");
		UINT32 LINECALLREASON_UNAVAIL:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINECALLREASON_UNAVAIL": "");
		UINT32 LINECALLREASON_INTRUDE:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINECALLREASON_INTRUDE": "");
		UINT32 LINECALLREASON_PARKED:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLREASON_PARKED": "");
		UINT32 LINECALLREASON_CAMPEDON:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLREASON_CAMPEDON": "");
		UINT32 LINECALLREASON_ROUTEREQUEST:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLREASON_ROUTEREQUEST": "");
		UINT32 Reserved2:16 = FormatString("                     (%s)", this.ToBitString);
	}
}

struct TRPLineCallPrivilegeFlag
{
	UINT32 LineCallPrivilege
	{
		UINT32 LINECALLPRIVILEGE_NONE:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLPRIVILEGE_NONE" : "");
		UINT32 LINECALLPRIVILEGE_MONITOR:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLPRIVILEGE_MONITOR": "");
		UINT32 LINECALLPRIVILEGE_OWNER:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINECALLPRIVILEGE_OWNER": "");
		UINT32 Reserved1:29= FormatString("                      (%s)", this.ToBitString);
	}
}

Table TRPLineBearerModeTable(value)
{
	switch (value)
	{
		case 0x00000001: "This is a regular 3.1 kHz analog voice-grade bearer service.";
		case 0x00000002: "his corresponds to G.711 speech transmission on the call.";
		case 0x00000004: "The multiuse mode defined by ISDN.";
		case 0x00000008: "The unrestricted data transfer on the call.";
		case 0x00000010: "The alternate transfer of speech or unrestricted data on the same call (ISDN).";
		case 0x00000020: "This corresponds to a non-call-associated signaling connection from the application to the service provider or switch. ";
		case 0x00000040: "When a call is active in LINEBEARERMODE_PASSTHROUGH, the service provider gives direct access to the attached hardware for control by the application.";
		case 0x00000080: "Bearer service for digital data in which only the low-order seven bits of each octet may contain user data (for example, for Switched 56kbit/s service).";
		default: "Unknown Bearer Mode.";
	}
}

Table TRPLineDevStatusFlagsTable(value)
{
	switch (value)
	{
		case 0x00000001: "Specifies the line is connected to TAPI.";
		case 0x00000002: "Indicates the line has a message waiting.";
		case 0x00000004: "Indicates the line is in service.";
		case 0x00000008: "Indicates the line is locked.";
		default: "Unknown Device Status.";
	}
}

Table TRPLineCallSelectTable(value)
{
	switch (value)
	{
		case 0x00000001: "Selects calls on the specified line device.";
		case 0x00000002: "Selects call on the specified address.";
		case 0x00000004: "Selects related calls to the specified call.";
		case 0x00000008: "Selects calls on the specified device identifier.";
		case 0x00000010: "Selects related calls to the specified call identifier.";
		default: "Unknown Call Select.";
	}
}

Table TRPLineTermModeTable(value)
{
	switch (value)
	{
		case 0x00000001: "These are button-press events sent from the terminal to the line.";
		case 0x00000002: "These are lamp events sent from the line to the terminal.";
		case 0x00000004: "This is display information sent from the line to the terminal.";
		case 0x00000008: "This is ringer-control information sent from the switch to the terminal.";
		case 0x00000010: "These are hookswitch events sent from the terminal to the line.";
		case 0x00000020: "This is the unidirectional media stream from the terminal to the line associated with a call on the line.";
		case 0x00000040: "This is the unidirectional media stream from the line to the terminal associated with a call on the line.";
		case 0x00000080: "This is the bidirectional media stream associated with a call on the line and the terminal.";
		default: "Unknown Terminal Mode.";
	}
}

Table QOSServiceTypeTable(value)
{
	switch (value)
	{
		case 0x00000001: "These are button-press events sent from the terminal to the line.";
		case 0x00000002: "These are lamp events sent from the line to the terminal.";
		case 0x00000004: "This is display information sent from the line to the terminal.";
		case 0x00000008: "This is ringer-control information sent from the switch to the terminal.";
		case 0x00000010: "These are hookswitch events sent from the terminal to the line.";
		case 0x00000020: "This is the unidirectional media stream from the terminal to the line associated with a call on the line.";
		case 0x00000040: "This is the unidirectional media stream from the line to the terminal associated with a call on the line.";
		case 0x00000080: "This is the bidirectional media stream associated with a call on the line and the terminal.";
		default: "Unknown Device Status.";
	}
}

Table TRPPhoneHookSwitchDevTable(value)
{
	switch (value)
	{
		case 0x00000001: "This is a standard ear-and-mouthpiece handset phone.";
		case 0x00000002: "This is a built-in loudspeaker and microphone.";
		case 0x00000004: "This is a headset connected to the phone set.";
		case 0xFFFFFFFF: "0xFFFFFFFF: TAPI_NO_DATA";
		default: "Unknown Phone Hookswitch Device.";
	}
}

Table TRPLineAgentStateTable(value)
{
	switch (value)
	{
		case 0x00000001: "No agent is logged in on the address.";
		case 0x00000002: "The agent is logged in, but occupied with a task other than serving a call (such as on a break).";
		case 0x00000004: "The agent is ready to accept calls.";
		case 0x00000008: "The agent is busy handling a call routed from an ACD queue.";

		case 0x00000010: "The agent is busy handling an incoming call that was not transferred to the agent from an ACD queue in which the agent is logged in.";
		case 0x00000020: "The agent is busy handling an outgoing call, such as one routed from a predictive dialing queue.";
		case 0x00000040: "The agent is busy handling another type of call, such as an outgoing personal call not transferred to the agent by a predictive dialer.";
		case 0x00000080: "The agent has completed the preceding call, but is still occupied with work related to that call.";

		case 0x00000100: "The agent state is currently unknown, but may become known later. ";
		case 0x00000200: "The agent state is unknown and will never become known.";

		default: "Unknown Line Agent State.";
	}
}

Table TRPVolumeTable(value)
{
	switch (value)
	{
		case 0x00000000: "0x00000000: Silence";
		case 0x0000FFFF: "0x0000FFFF: Maximum volume";
		default: FormatString("0X%08x",value);
	}
}

Table TRPPhonePrivilegeTable(value)
{
	switch (value)
	{
		case 0x00000001: "An application that opens a phone device with the monitor privilege is informed about events and state changes occurring on the phone. ";
		case 0x00000002: "An application that opens a phone device with the owner privilege is allowed to change the state of the lamps, ringer, display, hookswitch, and data blocks of the phone.";
		default: "Unknown Phone Privilege.";
	}
}

Table TRPLineAgentSessionStateTable(value)
{
	switch (value)
	{
		case 0x00000001: "The agent is logged in, but occupied with a task other than serving a call (such as on a break). ";
		case 0x00000002: "The agent is ready to accept calls. ";
		case 0x00000004: "The agent is busy handling a call.";
		case 0x00000008: "The agent is busy handling the wrap-up of the call.";

		case 0x00000010: "The agent session has ended.";
		case 0x00000020: "The agent session has been released.";

		default: "Unknown Line Agent Session State.";
	}
}

Table TRPObjectIDTypeTable(value)
{
	switch (value)
	{
		case 0: "lObjectID is ignored";
		case 1: "lObjectID is of type HLINEAPP";
		case 2: "lObjectID is of type HLINE";
		case 3: "lObjectID is of type HCALL";
		case 4: "lObjectID is of type HPHONEAPP";
		case 5: "lObjectID is of type HPHONE";
		default: "Unknown Type.";
	}
}

Table TRPLineCallComplModeTable(value)
{
	switch (value)
	{
		case 0x00000001: "Queues the call until the call can be completed.";
		case 0x00000002: "Requests the called station to return the call when it returns to idle.";
		case 0x00000004: "Adds the application to the existing call at the called station (barge in).";
		case 0x00000008: "Leaves a short predefined message for the called station (Leave Word Calling).";

		default: "Unknown Line Call Complete Mode.";
	}
}

Table TRPLineTransferModeTable(value)
{
	switch (value)
	{
		case 0x00000001: "The transfer is resolved by transferring the initial call to the consultation call.";
		case 0x00000002: "The transfer is resolved by establishing a three-way conference between the application, the party connected to the initial call, and the party connected to the consultation call.";
		default: FormatString("Value 0x%08x", value);
	}
}

Table TRPLineAddressModeTable(value)
{
	switch (value)
	{
		case 0x00000001: "The address is specified with a small integer in the range 0 to dwNumAddresses minus one, where dwNumAddresses is the value in the line's device capabilities.";
		case 0x00000002: "The address is specified through its phone number.";

		default: "Unknown Line Call Complete Mode.";
	}
}

Table TRPPhoneButtonFunctionTable(value)
{
	switch (value)
	{
		case 0x00000000: "A 'dummy' function assignment that indicates that the exact function of the button is unknown or has not been assigned.";
		case 0x00000001: "Initiates a conference call or adds a call to a conference call.";
		case 0x00000002: "Initiates a call transfer or completes the transfer of a call.";
		case 0x00000003: "Drops the active call.";

		case 0x00000004: "Places the active call on hold.";
		case 0x00000005: "Unholds a call.";
		case 0x00000006: "Disconnects a call, such as after initiating a transfer.";
		case 0x00000007: "Reconnects a call that is on consultation hold.";

		case 0x00000008: "Turns on a message waiting lamp.";
		case 0x00000009: "Turns off a message waiting lamp.";
		case 0x0000000A: "Allows the user to select the ring pattern of the phone.";
		case 0x0000000B: "The number to be dialed will be indicated using a short, abbreviated number consisting of one digit or a few digits.";

		case 0x0000000C: "Initiates or changes call forwarding to this phone.";
		case 0x0000000D: "Picks up a call ringing on another phone.";
		case 0x0000000E: "Initiates a request to be notified if a call cannot be completed normally because of a busy signal or no answer.";
		case 0x0000000F: "Parks the active call on another phone, placing it on hold there.";

		case 0x00000010: "Rejects an incoming call before the call has been answered.";
		case 0x00000011: "Redirects an incoming call to another extension before the call has been answered.";
		case 0x00000012: "Mutes the phone's microphone device.";
		case 0x00000013: "Increases the volume of audio through the phone's handset speaker or speakerphone.";

		case 0x00000014: "Decreases the volume of audio through the phone's handset speaker or speakerphone.";
		case 0x00000015: "Turns the phone's external speaker on.";
		case 0x00000016: "Turns the phone's external speaker off.";
		case 0x00000017: "Generates the equivalent of an onhook/offhook sequence. A flash typically indicates that any digits typed next are to be understood as commands to the switch. On many switches, places an active call on consultation hold.";

		case 0x00000018: "Indicates that the next call is a data call.";
		case 0x00000019: "Indicates that the next call is not a data call.";
		case 0x0000001A: "Places the phone in 'do not disturb' mode; incoming calls receive a busy signal or are forwarded to an operator or voice mail system.";
		case 0x0000001B: "Connects to the intercom to broadcast a page.";

		case 0x0000001C: "Selects a particular appearance of a bridged address.";
		case 0x0000001D: "Makes the phone appear 'busy' to incoming calls.";
		case 0x0000001E: "Selects a particular call appearance.";
		case 0x0000001F: "Causes the phone to display current date and time; this information would be sent by the switch.";

		case 0x00000020: "Calls up directory service from the switch.";
		case 0x00000021: "Forwards all calls destined for this phone to another phone used for coverage.";
		case 0x00000022: "Requests display of caller ID on the phone's display.";
		case 0x00000023: "Redials last number dialed.";

		case 0x00000024: "Places the phone in the mode it is configured for during night hours.";
		case 0x00000025: "Sends all calls to another phone used for coverage; same as PHONEBUTTONFUNCTION_COVER.";
		case 0x00000026: "Controls the message indicator lamp.";
		case 0x00000027: "Repertory dialing the number to be dialed is provided as a shorthand following pressing of this button.";

		case 0x00000028: "Programs the shorthand-to-phone number mappings accessible by means of repertory dialing (the 'REPDIAL' button).";
		case 0x00000029: "The number to be dialed is provided as a shorthand following pressing of this button. The mappings for system speed dialing are configured inside the switch.";
		case 0x0000002A: "The number to be dialed is provided as a shorthand following pressing of this button. The mappings for station speed dialing are specific to this station (phone).";
		case 0x0000002B: "Camps-on an extension that returns a busy indication. When the remote station returns to idle, the phone will be rung with a distinctive patterns. Picking up the local phone reinitiates the call.";

		case 0x0000002C: "When pressed while a call or call attempt is active, it will remember that call's number or command. When pressed while no call is active (such as during dial tone), it repeats the most saved command.";
		case 0x0000002D: "Queues a call to an outside number after it encounters a trunk-busy indication. When a trunk becomes later available, the phone will be rung with a distinctive pattern. Picking up the local phone reinitiates the call.";
		case 0x0000002E: "A 'dummy' function assignment that indicates that the button does not have a function.";

		case 0x0000002F: "Sends a request for a communications session.";
		default: "Unknown Line Call Complete Mode.";
	}
}

//********STRUCTS********************************************************************************
struct TRPCurrency = FormatString("%u.%u",High,Low)
{
	INT32 High;
	UINT32 Low;
}

table STRINGFORMATTable(value)
{
	switch(value)
	{
		case 0x00000001: "STRINGFORMAT_ASCII";
		case 0x00000002: "STRINGFORMAT_DBCS";
		case 0x00000003: "STRINGFORMAT_UNICODE";
		case 0x00000004: "STRINGFORMAT_BINARY";
		default: FormatString("value: 0X%08x", value);
	}
}

// VARSTRING
struct TRPVARSTRING
{
	[local.TRPStringOffset = FrameOffset + UINT32(FrameData,frameoffset + 20)]
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	UINT32 dwStringFormat = STRINGFORMATTable(this);
	UINT32 dwStringSize;
	UINT32 dwStringOffset;
	
	switch
	{
		case local.TRPStringOffset > FrameOffset  && dwStringOffset != 0XFFFFFFFF:
			BLOB(local.TRPStringOffset - FrameOffset) Pad;
	}
	switch 
	{
		case dwStringSize && dwStringOffset != 0XFFFFFFFF> 0:
			struct
			{
				switch(dwStringFormat)
				{
					case 0x00000001: AsciiString(dwStringSize) AsciiStringValue;
					case 0x00000002: UnicodeString(dwStringSize / 2) DBCStringValue;
					case 0x00000003: UnicodeString(dwStringSize / 2) UnicodeStringValue;
					case 0x00000004: Blob(dwStringSize) BinaryValue;
					default: Blob(dwStringSize) StringData;
				}
			}
	}
}

struct FLOWSPEC
{
	UINT32 TokenRate;
	UINT32 TokenBucketSize;
	UINT32 PeakBandwidth;
	UINT32 Latency;
	UINT32 DelayVariation;
	UINT32 ServiceType = FormatString("%d - %s", this, QOSServiceTypeTable(this));  //SERVICETYPE
	UINT32 MaxSduSize;
	UINT32 MinimumPolicedSize;
}

//********Functions********************************************************************************
Table TrpBufferRequestFuncTable( code )
{
	Switch( code )
	{
		case 0:   "xGetAsyncEvents";
		case 1:   "GetUIDllName";
		case 2:   "UIDLLCallback";
		case 3:   "xFreeDialogInstance";
        //*******Beginning of Line Device Function*******************
        //http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tapi/tapi2/line_device_functions.asp
		case 4:   "lineAccept";
		case 5:   "lineAddToConference";
		case 6:   "lineAgentSpecific";
		case 7:   "lineAnswer";
		case 8:   "lineBlindTransfer";
		case 9:   "lineClose";
		case 10:  "lineCompleteCall";
		case 11:  "lineCompleteTransfer";
		case 12:  "lineDeallocateCall";
		case 13:  "lineDevSpecific";
		case 14:  "lineDevSpecificFeature";
		case 15:  "lineDial";
		case 16:  "lineDrop";
		case 17:  "lineForward";
		case 18:  "lineGatherDigits";
		case 19:  "lineGenerateDigits";
		case 20:  "lineGenerateTone";
		case 21:  "lineGetAddressCaps";
		case 22:  "lineGetAddressID";
		case 23:  "lineGetAddressStatus";
		case 24:  "lineGetAgentActivityList";
		case 25:  "lineGetAgentCaps";
		case 26:  "lineGetAgentGroupList";
		case 27:  "lineGetAgentStatus";
		case 28:  "lineGetAppPriority";
		case 29:  "TSPI_lineGetCallAddressID";
		case 30:  "lineGetCallInfo";
		case 31:  "lineGetCallStatus";
		case 32:  "lineGetConfRelatedCalls";
		case 33:  "lineGetCountry";
		case 34:  "lineGetDevCaps";
		case 35:  "lineGetDevConfig";
		case 36:  "lineGetIcon";
		case 37:  "lineGetID";
		case 38:  "lineGetLineDevStatus";
		case 39:  "lineGetNewCalls";
		case 40:  "TSPI_lineGetNumAddressIDs";
		case 41:  "lineGetNumRings";
		case 42:  "lineGetProviderList";
		case 43:  "lineGetRequest";
		case 44:  "lineGetStatusMessages";
		case 45:  "lineHandoff";
		case 46:  "lineHold";
		case 47:  "lineInitialize";
		case 48:  "lineMakeCall";
		case 49:  "lineMonitorDigits";
		case 50:  "lineMonitorMedia";
		case 51:  "lineMonitorTones";
		case 52:  "lineNegotiateAPIVersion";
		case 53:  "lineNegotiateExtVersion";
		case 54:  "lineOpen";
		case 55:  "linePark";
		case 56:  "linePickup";
		case 57:  "linePrepareAddToConference";
		case 58:  "lineProxyMessage";
		case 59:  "lineProxyResponse";
		case 60:  "lineRedirect";
		case 61:  "lineRegisterRequestRecipient";
		case 62:  "lineReleaseUserUserInfo";
		case 63:  "lineRemoveFromConference";
		case 64:  "lineSecureCall";
		case 65:  "lineSendUserUserInfo";
		case 66:  "lineSetAgentActivity";
		case 67:  "lineSetAgentGroup";
		case 68:  "lineSetAgentState";
		case 69:  "lineSetAppPriority";
		case 70:  "lineSetAppSpecific";
		case 71:  "lineSetCallData";
		case 72:  "lineSetCallParams";
		case 73:  "lineSetCallPrivilege";
		case 74:  "lineSetCallQualityOfService";
		case 75:  "lineSetCallTreatment";
		case 76:  "TSPI_lineSetDefaultMediaDetection";
		case 77:  "lineSetDevConfig";
		case 78:  "lineSetLineDevStatus";
		case 79:  "lineSetMediaControl";
		case 80:  "lineSetMediaMode";
		case 81:  "lineSetNumRings";
		case 82:  "lineSetStatusMessages";
		case 83:  "lineSetTerminal";
		case 84:  "lineSetupConference";
		case 85:  "lineSetupTransfer";
		case 86:  "lineShutdown";
		case 87:  "lineSwapHold";
		case 88:  "lineUncompleteCall";
		case 89:  "lineUnhold";
		case 90:  "lineUnpark";
        //*******Beginning of Phone Device Function*******************
        //http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tapi/tapi2/phone_device_functions.asp
		case 91:  "phoneClose";
		case 92:  "phoneDevSpecific";
		case 93:  "phoneGetButtonInfo";
		case 94:  "phoneGetData";
		case 95:  "phoneGetDevCaps";
		case 96:  "phoneGetDisplay";
		case 97:  "phoneGetGain";
		case 98:  "phoneGetHookSwitch";
		case 99:  "phoneGetID";
		case 100: "phoneGetIcon";
		case 101: "phoneGetLamp";
		case 102: "phoneGetRing";
		case 103: "phoneGetStatus";
		case 104: "phoneGetStatusMessages";
		case 105: "phoneGetVolume";
		case 106: "phoneInitialize";
		case 107: "phoneOpen";
		case 108: "phoneNegotiateAPIVersion";
		case 109: "phoneNegotiateExtVersion";
		case 110: "phoneSetButtonInfo";
		case 111: "phoneSetData";
		case 112: "phoneSetDisplay";
		case 113: "phoneSetGain";
		case 114: "phoneSetHookSwitch";
		case 115: "phoneSetLamp";
		case 116: "phoneSetRing";
		case 117: "phoneSetStatusMessages";
		case 118: "phoneSetVolume";
		case 119: "phoneShutdown";
        //*******Beginning of Assisted Telephony Functions*******************
        //http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tapi/tapi2/assisted_telephony_functions.asp
		case 120: "tapiRequestDrop";
		case 121: "tapiRequestMakeCall";
		case 122: "tapiRequestMediaCall";

		case 123: "tReadLocations";
		case 124: "tWriteLocations";
		case 125: "tAllocNewID";
		case 126: "tPerformance";
		case 127: "TSPI_lineConditionalMediaDetection";
		case 128: "TSPI_lineSelectExtVersion";
		case 129: "TSPI_phoneSelectExtVersion";
        //***Ordinals for tapi 2.1 ended here.

		case 130: "xNegotiateAPIVersionForAllDevices";
		case 131: "mGetAvailableProviders";
		case 132: "mGetLineInfo";
		case 133: "mGetPhoneInfo";
		case 134: "mGetServerConfig";
		case 135: "mSetLineInfo";
		case 136: "mSetPhoneInfo";
		case 137: "mSetServerConfig";
        //***Ordinals for 2.1 update (nt4 sp4) ended here.

		case 138: "TAPI_lineMSPIdentify";
		case 139: "TAPI_lineReceiveMSPData";
		case 140: "TSPI_lineGetCallHubTracking";
		case 141: "TSPI_lineGetCallIDs";
		case 142: "TSPI_lineGetHubRelatedCalls";
		case 143: "TSPI_lineSetCallHubTracking";
		case 144: "xPrivateFactoryIdentify";
		case 145: "lDevSpecificEx";
        //*******Beginning of Call Center Functions*******************
        //http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tapi/tapi2/call_center_functions.asp
		case 146: "lineCreateAgent";
		case 147: "lineCreateAgentSession";
		case 148: "lineGetAgentInfo";
		case 149: "lineGetAgentSessionInfo";
		case 150: "lineGetAgentSessionList";
		case 151: "lineGetQueueInfo";
		case 152: "lineGetGroupList";
		case 153: "lineGetQueueList";
		case 154: "lineSetAgentMeasurementPeriod";
		case 155: "lineSetAgentSessionState";
		case 156: "lineSetQueueMeasurementPeriod";
		case 157: "lineSetAgentStateEx";
		case 158: "lineGetProxyStatus";

		case 159: "TSPI_lineCreateMSPInstance";
		case 160: "TSPI_lineCloseMSPInstance";
        //***Funcs for TAPI 3.1
		case 161: "tSetEventMasksOrSubMasks";
		case 162: "tGetEventMasksOrSubMasks";
		case 163: "tSetPermissibleMasks";
		case 164: "tGetPermissibleMasks";
		case 165: "mGetDeviceFlags";
		case 166: "lGetCountryGroup";
		case 167: "lGetIDEx";
		case 168: "pGetIDEx";
        //***The following is always the last one in the list
		case 169: "xLastFunc";
	}
}

struct TRPLINEADDRESSSTATEFlag
{
	UINT32 LINEADDRESSSTATE
	{

		UINT32 LINEADDRESSSTATE_OTHER:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEADDRESSSTATE_OTHER": "NOT LINEADDRESSSTATE_OTHER");
		UINT32 LINEADDRESSSTATE_DEVSPECIFIC:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEADDRESSSTATE_DEVSPECIFIC": "NOT LINEADDRESSSTATE_DEVSPECIFIC");
		UINT32 LINEADDRESSSTATE_INUSEZERO:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEADDRESSSTATE_INUSEZERO": "NOT LINEADDRESSSTATE_INUSEZERO");
		UINT32 LINEADDRESSSTATE_INUSEONE:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEADDRESSSTATE_INUSEONE": "NOT LINEADDRESSSTATE_INUSEONE");
		UINT32 LINEADDRESSSTATE_INUSEMANY:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEADDRESSSTATE_INUSEMANY": "NOT LINEADDRESSSTATE_INUSEMANY");
		UINT32 LINEADDRESSSTATE_NUMCALLS:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEADDRESSSTATE_NUMCALLS": "NOT LINEADDRESSSTATE_NUMCALLS");
		UINT32 LINEADDRESSSTATE_FORWARD:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEADDRESSSTATE_FORWARD": "NOT LINEADDRESSSTATE_FORWARD");
		UINT32 LINEADDRESSSTATE_TERMINALS:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEADDRESSSTATE_TERMINALS": "NOT LINEADDRESSSTATE_TERMINALS");
		UINT32 LINEADDRESSSTATE_CAPSCHANGE:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINEADDRESSSTATE_CAPSCHANGE": "NOT LINEADDRESSSTATE_CAPSCHANGE");
		UINT32 Reserved1:23 = FormatString("                   (%s)", this.ToBitString);
	}
}

struct TRPLINEAGENTSESSIONSTATUSFlag
{
	UINT32 LINEAGENTSESSIONSTATUS
	{
		UINT32 NEWSESSION:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEAGENTSESSIONSTATUS_NEWSESSION": "NOT LINEAGENTSESSIONSTATUS_NEWSESSION");
		UINT32 STATE:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEAGENTSESSIONSTATUS_STATE": "NOT LINEAGENTSESSIONSTATUS_STATE");
		UINT32 UPDATEINFO:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEAGENTSESSIONSTATUS_UPDATEINFO": "NOT LINEAGENTSESSIONSTATUS_UPDATEINFO");
		UINT32 Reserved:29 = FormatString("  (%s)", this.ToBitString);
	}
}

struct TRPLINEAGENTSTATUSFlag
{
	UINT32 LINEAGENTSTATUS
	{
		UINT32 LINEAGENTSTATUS_GROUP:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEAGENTSTATUS_GROUP": "NOT LINEAGENTSTATUS_GROUP");
		UINT32 LINEAGENTSTATUS_STATE:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEAGENTSTATUS_STATE": "NOT LINEAGENTSTATUS_STATE");
		UINT32 LINEAGENTSTATUS_NEXTSTATE:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEAGENTSTATUS_NEXTSTATE": "NOT LINEAGENTSTATUS_NEXTSTATE");
		UINT32 LINEAGENTSTATUS_ACTIVITY:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEAGENTSTATUS_ACTIVITY": "NOT LINEAGENTSTATUS_ACTIVITY");
		UINT32 LINEAGENTSTATUS_ACTIVITYLIST:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEAGENTSTATUS_ACTIVITYLIST": "NOT LINEAGENTSTATUS_ACTIVITYLIST");
		UINT32 LINEAGENTSTATUS_GROUPLIST:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEAGENTSTATUS_GROUPLIST": "NOT LINEAGENTSTATUS_GROUPLIST");
		UINT32 LINEAGENTSTATUS_CAPSCHANGE:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEAGENTSTATUS_CAPSCHANGE": "NOT LINEAGENTSTATUS_CAPSCHANGE");
		UINT32 LINEAGENTSTATUS_VALIDSTATES:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEAGENTSTATUS_VALIDSTATES": "NOT LINEAGENTSTATUS_VALIDSTATES");
		UINT32 LINEAGENTSTATUS_VALIDNEXTSTATES:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEAGENTSTATUS_VALIDNEXTSTATES": "NOT LINEAGENTSTATUS_VALIDNEXTSTATES");
		UINT32 Reserved1:23 = FormatString("                      (%s)", this.ToBitString);
	}
}

struct TRPLINEAGENTSTATUSEXFlag
{
	UINT32 LINEAGENTSTATUSEX
	{
		UINT32 LINEAGENTSTATUSEX_NEWAGENT:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEAGENTSTATUSEX_NEWAGENT": "NOT LINEAGENTSTATUSEX_NEWAGENT");
		UINT32 LINEANSWERMODE_DROP:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEANSWERMODE_DROP": "NOT LINEANSWERMODE_DROP");
		UINT32 LINEANSWERMODE_HOLD:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEANSWERMODE_HOLD": "NOT LINEANSWERMODE_HOLD");
		UINT32 Reserved1:29 = FormatString("                 (%s)", this.ToBitString);
	}
}
struct TRPLINEGATHERTERMFlag
{
	UINT32 LINEGATHERTERM
	{
		UINT32 LINEGATHERTERM_BUFFERFULL:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEGATHERTERM_BUFFERFULL": "NOT LINEGATHERTERM_BUFFERFULL");
		UINT32 LINEGATHERTERM_TERMDIGIT:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEGATHERTERM_TERMDIGIT": "NOT LINEGATHERTERM_TERMDIGIT");
		UINT32 LINEGATHERTERM_FIRSTTIMEOUT:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEGATHERTERM_FIRSTTIMEOUT": "NOT LINEGATHERTERM_FIRSTTIMEOUT");
		UINT32 LINEGATHERTERM_INTERTIMEOUT:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEGATHERTERM_INTERTIMEOUT": "NOT LINEGATHERTERM_INTERTIMEOUT");
		UINT32 LINEGATHERTERM_CANCEL:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEGATHERTERM_CANCEL": "NOT LINEGATHERTERM_CANCEL");
		UINT32 Reserved1:27 = FormatString("                  (%s)", this.ToBitString);
	}
}

table TRPLINEPROXYREQUESTTable(value)
{
	switch(value)
	{
		case 0x00000001: "LINEPROXYREQUEST_SETAGENTGROUP";
		case 0x00000002: "LINEPROXYREQUEST_SETAGENTSTATE";
		case 0x00000003: "LINEPROXYREQUEST_SETAGENTACTIVITY";
		case 0x00000004: "LINEPROXYREQUEST_GETAGENTCAPS";
		case 0x00000005: "LINEPROXYREQUEST_GETAGENTSTATUS";
		case 0x00000006: "LINEPROXYREQUEST_AGENTSPECIFIC";
		case 0x00000007: "LINEPROXYREQUEST_GETAGENTACTIVITYLIST";
		case 0x00000008: "LINEPROXYREQUEST_GETAGENTGROUPLIST";
		case 0x00000009: "LINEPROXYREQUEST_CREATEAGENT";
		case 0x0000000A: "LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD";
		case 0x0000000B: "LINEPROXYREQUEST_GETAGENTINFO";
		case 0x0000000C: "LINEPROXYREQUEST_CREATEAGENTSESSION";
		case 0x0000000D: "LINEPROXYREQUEST_GETAGENTSESSIONLIST";
		case 0x0000000E: "LINEPROXYREQUEST_SETAGENTSESSIONSTATE";
		case 0x0000000F: "LINEPROXYREQUEST_GETAGENTSESSIONINFO";
		case 0x00000010: "LINEPROXYREQUEST_GETQUEUELIST";
		case 0x00000011: "LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD";
		case 0x00000012: "LINEPROXYREQUEST_GETQUEUEINFO";
		case 0x00000013: "LINEPROXYREQUEST_GETGROUPLIST";
		case 0x00000014: "LINEPROXYREQUEST_SETAGENTSTATEEX";
		default:
			FormatString("Unknown value: %u", value);
	}
}

struct TRPLINEPROXYREQUEST
{
	UINT32 dwSize;
	UINT32 dwClientMachineNameSize;
	UINT32 dwClientMachineNameOffset;
	UINT32 dwClientUserNameSize;
	UINT32 dwClientUserNameOffset;
	UINT32 dwClientAppAPIVersion;
	UINT32 dwRequestType = TRPLINEPROXYREQUESTTable(this);
	switch(dwRequestType)
	{
		case 0x00000001:
			_struct LINEPROXYREQUEST_SETAGENTGROUP
			{
				UINT32 dwAddressIDSetAgentGroup;
				TRPagentgrouplist GroupList;
			}
		case 0x00000002:
			_struct LINEPROXYREQUEST_SETAGENTSTATE
			{
				UINT32 dwAddressIDSetAgentState;
				UINT32 dwAgentStateSetAgentState;
				UINT32 dwNextAgentStateSetAgentState ;
			}
		case 0x00000003:
			_struct LINEPROXYREQUEST_SETAGENTACTIVITY
			{
				UINT32 dwAddressIDSetAgentActivity;
				UINT32 dwActivityIDSetAgentActivity;
			}
		case 0x00000004:
			_struct LINEPROXYREQUEST_GETAGENTCAPS
			{
				UINT32 dwAddressIDGetAgentCaps;
				TRPLINEAGENTCAPS AgentCapsGetAgentCaps;
			}
		case 0x00000005:
			_struct  LINEPROXYREQUEST_GETAGENTSTATUS
			{
				UINT32 dwAddressIDGetAgentStatus;
				TRPLineAgentStatus AgentStatus;
			}
		case 0x00000006:
			_struct LINEPROXYREQUEST_AGENTSPECIFIC
			{
				UINT32 dwAddressIDAgentSpecific ;
				UINT32 dwAgentExtensionIDIndexAgentSpecific;
				UINT32 dwSizeAgentSpecific;
				BLOB(dwSizeAgentSpecific) ParamsAgentSpecific;
			}
		case 0x00000007:
			_struct LINEPROXYREQUEST_GETAGENTACTIVITYLIST
			{
				UINT32 dwAddressIDGetAgentActivityList;
				LineAgentActivityList ActivityListGetAgentActivityList;
			}
		case 0x00000008:
			_struct LINEPROXYREQUEST_GETAGENTGROUPLIST
			{
				UINT32 dwAddressIDGetAgentGroupList;
				TRPagentgrouplist GroupListGetAgentActivityList;
			}
		case 0x00000009:
			_struct LINEPROXYREQUEST_CREATEAGENT
			{
				UINT32 hAgentCreateAgent;
				UINT32 dwAgentIDSizeCreateAgent;
				UINT32 dwAgentIDOffsetCreateAgent;
				UINT32 dwAgentPINSizeCreateAgent;
				UINT32 dwAgentPINOffsetCreateAgent;
			}
		case 0x00000014:
			_struct LINEPROXYREQUEST_SETAGENTSTATEEX
			{
				UINT32 hAgentSetAgentStateex;
				UINT32 dwAgentStateSetAgentStateex;
				UINT32 dwNextAgentStateSetAgentStateex;
			}
		case 0x0000000A:
			_struct LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD
			{
				UINT32 hAgentSetAgentMeaSureMenTperiod;
				UINT32 dwMeasurementPeriodSetAgentMeaSureMenTperiod;
			}
		case 0x0000000B:
			_struct LINEPROXYREQUEST_GETAGENTINFO
			{
				UINT32 hAgentGetAgentInfo;
				TRPLINEAGENTINFO AgentInfoGetAgentInfo;
			}
		case 0x0000000C:
			_struct LINEPROXYREQUEST_CREATEAGENTSESSION
			{
				UINT32 hAgentSessionCreateAgentSession;
				UINT32 dwAgentPINSizeCreateAgentSession;
				UINT32 dwAgentPINOffsetCreateAgentSession;
				UINT32 hAgentCreateAgentSession;
				GUID(0) GroupIDCreateAgentSession;
				UINT32 dwWorkingAddressIDCreateAgentSession;
			}
		case 0x0000000D:
			_struct LINEPROXYREQUEST_GETAGENTSESSIONLIST
			{
				UINT32 hAgentGetAgentSessionList;
				TRPLINEAGENTSESSIONLIST SessionListGetAgentSessionList;
			}
		case 0x0000000E:
			_struct LINEPROXYREQUEST_SETAGENTSESSIONSTATE
			{
				UINT32 hAgentSessionSetAgentSessionState;
				UINT32 dwAgentSessionStateSetAgentSessionState = TRPLineAgentSessionStateTable(this);
				UINT32 dwNextAgentSessionStateSetAgentSessionState = TRPLineAgentSessionStateTable(this);
			}
		case 0x0000000F:
			_struct LINEPROXYREQUEST_GETAGENTSESSIONINFO
			{
				UINT32 hAgentSessionGetAgentSessionInfo;
				TRPLINEAGENTSESSIONINFO SessionInfoGetAgentSessionInfo;
			}
		case 0x00000010:
			_struct LINEPROXYREQUEST_GETQUEUELIST
			{
				GUID(0) GroupIDGetQueueList;
				TRPLINEQUEUELIST QueueListGetQueueList;
			}
		case 0x00000011:
			_struct LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD
			{
				UINT32 dwQueueIDSetQueueMeasureMentPeriod;
				UINT32 dwMeasurementPeriodSetQueueMeasureMentPeriod;
			}
		case 0x00000012:
			_struct LINEPROXYREQUEST_GETQUEUEINFO
			{
				UINT32 dwQueueIDGetQueueInfo;
				TRPLineQueueInfo QueueInfoGetQueueInfo;
			}
		case 0x00000013:
			_struct LINEPROXYREQUEST_GETGROUPLIST
			{
				TRPagentgrouplist GroupListGetGroupList;
			}
		default:
				ReportParserError(ParserErrorProtocolClassWindows, "TRP", "Unknown TRP dwRequestType") ProtocolError;
	}
}

struct TRPLINEPROXYSTATUSFlag
{
	UINT32 LINEPROXYSTATUS
	{
		UINT32 LINEPROXYSTATUS_OPEN:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEPROXYSTATUS_OPEN": "NOT LINEPROXYSTATUS_OPEN");
		UINT32 LINEPROXYSTATUS_CLOSE:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEPROXYSTATUS_CLOSE": "NOT LINEPROXYSTATUS_CLOSE");
		UINT32 LINEPROXYSTATUS_ALLOPENFORACD:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEPROXYSTATUS_ALLOPENFORACD": "NOT LINEPROXYSTATUS_ALLOPENFORACD");
		UINT32 Reserved1:29 = FormatString("                    (%s)", this.ToBitString);
	}
}

struct TRPLINEQUEUESTATUSFlag
{
	UINT32 LINEQUEUESTATUS
	{
		UINT32 LINEQUEUESTATUS_UPDATEINFO:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEQUEUESTATUS_UPDATEINFO": "NOT LINEQUEUESTATUS_UPDATEINFO");
		UINT32 LINEQUEUESTATUS_NEWQUEUE:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEQUEUESTATUS_NEWQUEUE": "NOT LINEQUEUESTATUS_NEWQUEUE");
		UINT32 LINEQUEUESTATUS_QUEUEREMOVED:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEQUEUESTATUS_QUEUEREMOVED": "NOT LINEQUEUESTATUS_QUEUEREMOVED");
		UINT32 Reserved1:29 = FormatString("(%s)", this.ToBitString);
	}
}

struct TRPPHONEBUTTONMODEFlag
{
	UINT32 PHONEBUTTONMODE
	{
		UINT32 PHONEBUTTONMODE_DUMMY:1 = FormatString("  (%s) %s", this.ToBitString, this? "PHONEBUTTONMODE_DUMMY": "NOT PHONEBUTTONMODE_DUMMY");
		UINT32 PHONEBUTTONMODE_CALL:1 = FormatString("   (%s) %s", this.ToBitString, this? "PHONEBUTTONMODE_CALL": "NOT PHONEBUTTONMODE_CALL");
		UINT32 PHONEBUTTONMODE_FEATURE:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEBUTTONMODE_FEATURE": "NOT PHONEBUTTONMODE_FEATURE");
		UINT32 PHONEBUTTONMODE_KEYPAD:1 = FormatString(" (%s) %s", this.ToBitString, this? "PHONEBUTTONMODE_KEYPAD": "NOT PHONEBUTTONMODE_KEYPAD");
		UINT32 PHONEBUTTONMODE_LOCAL:1 = FormatString("  (%s) %s", this.ToBitString, this? "PHONEBUTTONMODE_LOCAL": "NOT PHONEBUTTONMODE_LOCAL");
		UINT32 PHONEBUTTONMODE_DISPLAY:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEBUTTONMODE_DISPLAY": "NOT PHONEBUTTONMODE_DISPLAY");
		UINT32 Reserved1:26 = FormatString("              (%s)", this.ToBitString);
	}
}

struct TRPPHONEBUTTONSTATEFlag
{
	UINT32 PHONEBUTTONSTATE
	{
		UINT32 PHONEBUTTONSTATE_UP:1 = FormatString("     (%s) %s", this.ToBitString, this? "PHONEBUTTONSTATE_UP": "NOT PHONEBUTTONSTATE_UP");
		UINT32 PHONEBUTTONSTATE_DOWN:1 = FormatString("   (%s) %s", this.ToBitString, this? "PHONEBUTTONSTATE_DOWN": "NOT PHONEBUTTONSTATE_DOWN");
		UINT32 PHONEBUTTONSTATE_UNKNOWN:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEBUTTONSTATE_UNKNOWN": "NOT PHONEBUTTONSTATE_UNKNOWN");
		UINT32 PHONEBUTTONSTATE_UNAVAIL:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEBUTTONSTATE_UNAVAIL": "NOT PHONEBUTTONSTATE_UNAVAIL");
		UINT32 Reserved1:28 = FormatString("               (%s)", this.ToBitString);
	}
}

struct TRPPHONESTATEFlag
{
	UINT32 PHONESTATE
	{
		UINT32 PHONESTATE_OTHER:1 = FormatString("            (%s) %s", this.ToBitString, this? "PHONESTATE_OTHER": "NOT PHONESTATE_OTHER");
		UINT32 PHONESTATE_CONNECTED:1 = FormatString("        (%s) %s", this.ToBitString, this? "PHONESTATE_CONNECTED": "NOT PHONESTATE_CONNECTED");
		UINT32 PHONESTATE_DISCONNECTED:1 = FormatString("     (%s) %s", this.ToBitString, this? "PHONESTATE_DISCONNECTED": "NOT PHONESTATE_DISCONNECTED");
		UINT32 PHONESTATE_OWNER:1 = FormatString("            (%s) %s", this.ToBitString, this? "PHONESTATE_OWNER": "NOT PHONESTATE_OWNER");
		UINT32 PHONESTATE_MONITORS:1 = FormatString("         (%s) %s", this.ToBitString, this? "PHONESTATE_MONITORS": "NOT PHONESTATE_MONITORS");
		UINT32 PHONESTATE_DISPLAY:1 = FormatString("          (%s) %s", this.ToBitString, this? "PHONESTATE_DISPLAY": "NOT PHONESTATE_DISPLAY");
		UINT32 PHONESTATE_LAMP:1 = FormatString("             (%s) %s", this.ToBitString, this? "PHONESTATE_LAMP": "NOT PHONESTATE_LAMP");
		UINT32 PHONESTATE_RINGMODE:1 = FormatString("         (%s) %s", this.ToBitString, this? "PHONESTATE_RINGMODE": "NOT PHONESTATE_RINGMODE");
		UINT32 PHONESTATE_RINGVOLUME:1 = FormatString("       (%s) %s", this.ToBitString, this? "PHONESTATE_RINGVOLUME": "NOT PHONESTATE_RINGVOLUME");
		UINT32 PHONESTATE_HANDSETHOOKSWITCH:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONESTATE_HANDSETHOOKSWITCH": "NOT PHONESTATE_HANDSETHOOKSWITCH");
		UINT32 PHONESTATE_HANDSETVOLUME:1 = FormatString("    (%s) %s", this.ToBitString, this? "PHONESTATE_HANDSETVOLUME": "NOT PHONESTATE_HANDSETVOLUME");
		UINT32 PHONESTATE_HANDSETGAIN:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONESTATE_HANDSETGAIN": "NOT PHONESTATE_HANDSETGAIN");
		UINT32 PHONESTATE_SPEAKERHOOKSWITCH:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONESTATE_SPEAKERHOOKSWITCH": "NOT PHONESTATE_SPEAKERHOOKSWITCH");
		UINT32 PHONESTATE_SPEAKERVOLUME:1 = FormatString("    (%s) %s", this.ToBitString, this? "PHONESTATE_SPEAKERVOLUME": "NOT PHONESTATE_SPEAKERVOLUME");
		UINT32 PHONESTATE_SPEAKERGAIN:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONESTATE_SPEAKERGAIN": "NOT PHONESTATE_SPEAKERGAIN");
		UINT32 PHONESTATE_HEADSETHOOKSWITCH:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONESTATE_HEADSETHOOKSWITCH": "NOT PHONESTATE_HEADSETHOOKSWITCH");
		UINT32 PHONESTATE_HEADSETVOLUME:1 = FormatString("    (%s) %s", this.ToBitString, this? "PHONESTATE_HEADSETVOLUME": "NOT PHONESTATE_HEADSETVOLUME");
		UINT32 PHONESTATE_HEADSETGAIN:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONESTATE_HEADSETGAIN": "NOT PHONESTATE_HEADSETGAIN");
		UINT32 PHONESTATE_SUSPEND:1 = FormatString("          (%s) %s", this.ToBitString, this? "PHONESTATE_SUSPEND": "NOT PHONESTATE_SUSPEND");
		UINT32 PHONESTATE_RESUME:1 = FormatString("           (%s) %s", this.ToBitString, this? "PHONESTATE_RESUME": "NOT PHONESTATE_RESUME");
		UINT32 PHONESTATE_DEVSPECIFIC:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONESTATE_DEVSPECIFIC": "NOT PHONESTATE_DEVSPECIFIC");
		UINT32 PHONESTATE_REINIT:1 = FormatString("           (%s) %s", this.ToBitString, this? "PHONESTATE_REINIT": "NOT PHONESTATE_REINIT");
		UINT32 PHONESTATE_CAPSCHANGE:1 = FormatString("       (%s) %s", this.ToBitString, this? "PHONESTATE_CAPSCHANGE": "NOT PHONESTATE_CAPSCHANGE");
		UINT32 PHONESTATE_REMOVED:1 = FormatString("          (%s) %s", this.ToBitString, this? "PHONESTATE_REMOVED": "NOT PHONESTATE_REMOVED");
		UINT32 Reserved1:8 = FormatString("                   (%s)", this.ToBitString);
	}
}

table TRPASYNCEVENTMSGMsgTable(value)
{
	switch(value)
	{
		case 0x00000000: "LINE_ADDRESSSTATE";
		case 0x0000001B: "LINE_AGENTSESSIONSTATUS";
		case 0x00000015: "LINE_AGENTSPECIFIC";
		case 0x00000016: "LINE_AGENTSTATUS";
		case 0x0000001D: "LINE_AGENTSTATUSEX";
		case 0x00000017: "LINE_APPNEWCALL";
		case 0x00000001: "LINE_CALLINFO";
		case 0x00000002: "LINE_CALLSTATE";
		case 0x00000003: "LINE_CLOSE";
		case 0x00000013: "LINE_CREATE";
		case 0x000001F7: "LINE_CREATEDIALOGINSTANCE";
		case 0x00000004: "LINE_DEVSPECIFIC";
		case 0x00000005: "LINE_DEVSPECIFICFEATURE";
		case 0x00000006: "LINE_GATHERDIGITS";
		case 0x00000007: "LINE_GENERATE";
		case 0x0000001E: "LINE_GROUPSTATUS";
		case 0x00000008: "LINE_LINEDEVSTATE";
		case 0x00000009: "LINE_MONITORDIGITS";
		case 0x0000000A: "LINE_MONITORMEDIA";
		case 0x0000000B: "LINE_MONITORTONE";
		case 0x00000018: "LINE_PROXYREQUEST";
		case 0x0000001F: "LINE_PROXYSTATUS";
		case 0x0000001C: "LINE_QUEUESTATUS";
		case 0x00000019: "LINE_REMOVE";
		case 0x0000000C: "LINE_REPLY";
		case 0x0000000E: "PHONE_BUTTON";
		case 0x0000000F: "PHONE_CLOSE";
		case 0x00000014: "PHONE_CREATE";
		case 0x00000010: "PHONE_DEVSPECIFIC";
		case 0x0000001A: "PHONE_REMOVE";
		case 0x00000011: "PHONE_REPLY";
		case 0x00000012: "PHONE_STATE";
	}
}

struct TRPASYNCEVENTMSG
{
	UINT32 TotalSize;
	UINT32 InitContext;
	UINT32 PostProcessProcContext;
	UINT32 hDevice;
	UINT32 Msg = TRPASYNCEVENTMSGMsgTable(this);
	UINT32 OpenContext;
	[DataFieldFrameLength = FrameOffset + TotalSize - 24]
	switch(Msg)
	{
		case 0x00000000:
			struct LINE_ADDRESSSTATE
			{
				UINT32 Param1 = "The address identifier of the address that changed status";
				TRPLINEADDRESSSTATEFlag AddressState;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x0000001B:
			struct LINE_AGENTSESSIONSTATUS
			{
				UINT32 Param1;
				TRPLINEAGENTSESSIONSTATUSFlag Param2;
				switch
				{
					case Param2 & 0x00000002:
						TRPLINEAGENTSESSIONSTATUSFlag NewSessionState;
					default:
						UINT32 Param3 = FormatString("%u (Must set to 0)", this);
				}
				UINT32 Param4;
			}
		case 0x00000015:
			struct LINE_AGENTSPECIFIC
			{
				UINT32 Param1;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x00000016:
			struct LINE_AGENTSTATUS
			{
				UINT32 Param1;
				TRPLINEAGENTSTATUSFlag Param2;
				switch
				{
					case Param2 & 0x00000002: UINT32 NewState;
					default:
						UINT32 Param3 = FormatString("%u (be set to 0)", this);
				}
				UINT32 Param4;
			}
		case 0x0000001D:
			struct LINE_AGENTSTATUSEX
			{
				UINT32 Param1;
				TRPLINEAGENTSTATUSEXFlag QueueState;
				switch
				{
					case QueueState & 0x00000002: TRPLINEAGENTSTATUSEXFlag AgentState;
					default:
						UINT32 Param3 = FormatString("%u (Be set to 0)", this);
				}
				UINT32 Param4;
			}
		case 0x00000017:
			struct LINE_APPNEWCALL
			{
				UINT32 Param1 = "The address ID of the new call";
				UINT32 Param2 = "The new call handle value";
				UINT32 Param3 = "The call ID";
				UINT32 Param4 = "The related call ID";
			}
		case 0x00000001:
			struct LINE_CALLINFO
			{
				TRPLINECALLINFOSTATEFlag CallInfo;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 hRemoteLine;
			}
		case 0x00000002:
			struct LINE_CALLSTATE
			{
				TRPLINECALLSTATEFlag Param1 = "The new call state";
				UINT32 Param2;
				TRPLINEMEDIAMODEFlag Param3;
				UINT32 hRemoteLine;
			}
		case 0x00000003:
			struct LINE_CLOSE
			{
				UINT32 Param1;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x00000013:
			struct LINE_CREATE
			{
				UINT32 Param1;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x000001F7:
			struct LINE_CREATEDIALOGINSTANCE
			{
				UINT32 Param1;
				UINT32 Param2 = "Vardata size";
				UINT32 Param3 = "Vardata offset";
				UINT32 Param4 = FormatString("%u (MUST be ignored upon receipt and can be any value)", this);
				UnicodeString(Param2 / 2) VarData;
			}
		case 0x00000004:
			struct LINE_DEVSPECIFIC
			{
				UINT32 Param1;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x00000005:
			struct LINE_DEVSPECIFICFEATURE
			{
				UINT32 Param1;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x00000006:
			struct LINE_GATHERDIGITS
			{
				TRPLINEGATHERTERMFlag Param1;
				UINT32 lpsDigitsContext;
				UINT32 Param3;
				UINT32 dwNumDigits;
				UINT32 dwEndToEndID;
				UINT32 hRemoteLine;
				Unicodestring digit[dwNumDigits];
			}
		case 0x00000007:
			struct LINE_GENERATE
			{
				TRPLINEGATHERTERMFlag Param1;
				UINT32 Param2;
				switch
				{
					case TRPTSPIVersion >= 0x20000: UINT32 Param3Unused;
					default:
						UINT32 Param3;
				}
				UINT32 hRemoteLine;
			}
		case 0x0000001E:
			struct LINE_GROUPSTATUS
			{
				UINT32 Param1;
				UINT32 Param2 = "GroupStatus";
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x0000008:
			struct LINE_LINEDEVSTATE
			{
				TRPLINEDEVSTATEFlag DevStatus;
				switch
				{
					case DevStatus & 0x00000002:
						_struct RingMode
						{
							UINT32 RingMode;
							UINT32 RingCount;
						}
					case DevStatus & 0x00040000:
						_struct
						{
							switch(UINT32(FrameData, FrameOffset))
							{
								case 0: UINT32 Param2 = FormatString("%u (ShutDown Buffer must be sent)", this);
								case 0x00000013: UINT32 LineCreate = "LINE_CREATE";
								case 0x00000008: UINT32 LineDevState = "LINE_LINEDEVSTATE";
								default: UINT32 Unused1;
							}
							TRPLINEDEVSTATEFlag DevStatus;
						}
				}
				UINT32 Unused2;
			}
		case 0x00000009:
			struct LINE_MONITORDIGITS
			{
				UINT32 Param1;
				TRPLINEDIGITMODEFlag Param2;
				switch
				{
					case TRPTSPIVersion >= 0x20000: UINT32 Param3Unused;
					default:
						UINT32 Param3;
				}
				UINT32 hRemoteLine;
			}
		case 0x0000000A:
			struct LINE_MONITORMEDIA
			{
				TRPLINEMEDIAMODEFlag MediaMode;
				UINT32 Param2 = FormatString("%u ( MUST be ignored upon receipt and can be any value)", this);
				UINT32 Param3;
				UINT32 hRemoteLine;
			}
		case 0x0000000B:
			struct LINE_MONITORTONE
			{
				UINT32 Param1;
				UINT32 Param2;
				switch
				{
					case TRPTSPIVersion >= 0x20000: UINT32 Param3Unused;
					default:
						UINT32 Param3;
				}
				UINT32 hRemoteLine;
			}
		case 0x00000018:
			struct LINE_PROXYREQUEST
			{
				UINT32 Param1;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
				TRPLINEPROXYREQUEST VarData;
			}
		case 0x0000001F:
			struct LINE_PROXYSTATUS
			{
				TRPLINEPROXYSTATUSFlag Param1;
				switch
				{
					case Param1 & 0x00000001:
					case Param1 & 0x00000002:
						UINT32 RequestType = TRPLINEPROXYREQUESTTable(this);
					default:
						UINT32 Param2 = FormatString("%u (Be set to 0)", this);
				}
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x0000001C:
			struct LINE_QUEUESTATUS
			{
				UINT32 dwRemoteRequestID;
				TRPLINEQUEUESTATUSFlag Status;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x00000019:
			struct LINE_REMOVE
			{
				UINT32 Param1;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x0000000C:
			struct LINE_REPLY
			{
				UINT32 dwRemoteRequestID;
				UINT32 Result = TRPAckReturnValueTable(this);
				TrpLineReplyData(dwRemoteRequestID) TrpLineReply;
			}
		case 0x0000000E:
			struct PHONE_BUTTON
			{
				UINT32 Param1 = "The button or lamp identifier of the button that was pressed";
				TRPPHONEBUTTONMODEFlag ButtonMode;
				TRPPHONEBUTTONSTATEFlag ButtonEvent;
				UINT32 Param4;
			}
		case 0x0000000F:
			struct PHONE_CLOSE
			{
				UINT32 Param1;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x00000014:
			struct PHONE_CREATE
			{
				UINT32 Param1;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x00000010:
			struct PHONE_DEVSPECIFIC
			{
				UINT32 Param1;
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x0000001A:
			struct PHONE_REMOVE
			{
				UINT32 Param1 = FormatString("%s","The identifier of the phone device");
				UINT32 Param2;
				UINT32 Param3;
				UINT32 Param4;
			}
		case 0x00000011:
			struct PHONE_REPLY
			{
				UINT32 dwRemoteRequestID;
				UINT32 Result = TRPAckReturnValueTable(this);
				TrpPhoneReplyData(dwRemoteRequestID) PhoneData;
			}
		case 0x00000012:
			struct PHONE_STATE
			{
				TRPPHONESTATEFlag PhoneState;
				switch(PhoneState)
				{
					case 0x00000008: UINT32 NewOwnerCount;
					case 0x00000010: UINT32 NewMonitorCount;
					case 0x00000040: UINT32 LampID;
					case 0x00000080: UINT32 NewRingMode;
					case 0x00000200:
					case 0x00001000:
					case 0x00008000: TRPPHONEHOOKSWITCHMODEFlag HookSwitch;
					default:
						UINT32 Param2;
				}
				UINT32 Param3;
				UINT32 Param4;
			}
	}
}

struct TrpLineReplyData(RequestId) = TrpBufferRequestFuncTable(local.TrpRequestId)
{
	[conversation.tcp.TrpRequestedIdPerFrameTable$[FrameNumber] = conversation.tcp.TrpRequestedIdTable$[RequestId]]
	[local.TrpRequestId = conversation.tcp.TrpRequestedIdPerFrameTable$[FrameNumber]]
	switch(local.TrpRequestId)
	{
		case 6:
			struct AgentSpecific
			{
				UINT32 lpParamsContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							BLOB(dwSize) VarData;
							Align8 Align;
						}
				}
			}
		case 10:
			struct CompleteCall
			{
				UINT32 dwCompleteCallID;
				UINT32 lpdwCompletionIDContext;
			}
		case 11:
			struct CompleteTransfer
			{
				UINT32 hConfCall;
				UINT32 lphConfCallContext;
				UINT32 dwConfCallAddressID;
				UINT32 dwConfCallID;
				UINT32 dwConfCallRelatedCallID;
			}
		case 146:
			struct CreateAgent
			{
				UINT32 lphAgentContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							BLOB(dwSize) VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 147:
			struct CreateAgentSession
			{
				UINT32 lphAgentSessionContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							BLOB(dwSize) VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 13:
			struct DevSpecific
			{
				UINT32 lpParamsContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							BLOB(dwSize) VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 14:
			struct DevSpecificFeature
			{
				UINT32 lpParamsContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							BLOB(dwSize) VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 17:
			struct Forward
			{
				UINT32 hConsultCall;
				UINT32 lphConsultCallContext;
				UINT32 dwConsultCallAddressID;
				UINT32 dwConsultCallID;
				UINT32 dwConsultCallRelatedCallID;
			}
		case 24:
			struct GetAgentActivityList
			{
				UINT32 lpAgentActivityListContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							LINEAGENTACTIVITYLIST VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 25:
			struct GetAgentCaps
			{
				UINT32 lpAgentCapsContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							TRPLINEAGENTCAPS VarData;
							Align8 Align;
						}
				}
			}
		case 26:
			struct GetAgentGroupList
			{
				UINT32 lpAgentGroupListContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							TRPagentgrouplist VarData;
							ALIGN8 Align;
						}
				}
			}
		case 148:
			struct GetAgentInfo
			{
				UINT32 lpAgentInfoContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							TRPLINEAGENTINFO VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 149:
			struct GetAgentSessionInfo
			{
				UINT32 lpAgentSessionInfoContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							TRPLINEAGENTSESSIONINFO VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 150:
			struct GetAgentSessionList
			{
				UINT32 lpAgentSessionListContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							TRPLINEAGENTSESSIONLIST VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 27:
			struct GetAgentStatus
			{
				UINT32 lpAgentStatusContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							TRPLineAgentStatus VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 152:
			struct GetGroupList
			{
				UINT32 lpGroupListContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							TRPagentgrouplist VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 151:
			struct GetQueueInfo
			{
				UINT32 lpQueueInfoContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							TRPLineQueueInfo VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 171:
			struct GetQueueList
			{
				UINT32 lpQueueListContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						struct
						{
							TRPLINEQUEUELIST VarData;
							ALIGN8 Pad;
						}
				}
			}
		case 48:
			struct MakeCall
			{
				UINT32 hCall;
				UINT32 lphCallContext;
				UINT32 dwAddressID;
				UINT32 dwCallID;
				UINT32 dwRelatedCallID;
			}
		case 55:
			struct Park
			{
				UINT32 lpNonDirAddressContext;
				UINT32 dwSize;
				switch
				{
					case dwSize > 0:
						TRPVARSTRING VarData;
				}

			}
		case 56:
			struct PickUp
			{
				UINT32 hCall;
				UINT32 lphCallContext;
				UINT32 dwAddressID;
				UINT32 dwCallID;
				UINT32 dwRelatedCallID;

			}
		case 57:
			struct PrepareAddToConference
			{
				UINT32 hConsultCall;
				UINT32 lphConsultCallContext;
				UINT32 dwConsultCallAddressID;
				UINT32 dwConsultCallID;
				UINT32 dwConsultCallRelatedCallID;

			}
		case 84:
			struct SetUpConference
			{
				UINT32 hConfCall;
				UINT32 lphConfCallContext;
				UINT32 hConsultCall;
				UINT32 lphConsultCallContext;
				UINT32 dwConfCallAddressID;
				UINT32 dwConfCallID;
				UINT32 dwConfCallRelatedCallID;
				UINT32 dwConsultCallAddressID;
				UINT32 dwConsultCallID;
				UINT32 dwConsultCallRelatedCallID;

			}
		case 85:
			struct SetUpTransfer
			{
				UINT32 hConsultCall;
				UINT32 lphConsultCallContext;
				UINT32 dwConsultCallAddressID;
				UINT32 dwConsultCallID;
				UINT32 dwConsultCallRelatedCallID;
			}
		case 90:
			struct UnPark
			{
				UINT32 hCall;
				UINT32 lphCallContext;
				UINT32 dwAddressID;
				UINT32 dwCallID;
				UINT32 dwRelatedCallID;
			}
	}
}

struct TrpPhoneReplyData(RequestId) = TrpBufferRequestFuncTable(local.TrpRequestId)
{
	[conversation.tcp.TrpRequestedIdPerFrameTable$[FrameNumber] = conversation.tcp.TrpRequestedIdTable$[RequestId] ]
	[local.TrpRequestId = conversation.tcp.TrpRequestedIdPerFrameTable$[FrameNumber] ]
	switch(local.TrpRequestId)
	{
		case 92:
			struct DevSpecific
			{
				UINT32 lpParamsContext;
				UINT32 dwSize;
				BLOB(dwSize) VarData;
				ALIGN8 Pad;
			}
	}
}

//
//0-GetAsyncEvents
//
struct TRPGetAsyncEvents
{
	UINT32 dwTotalBufferSize;
	UINT32 dwNeededBufferSize;
	UINT32 dwUsedBufferSize;
	UINT32 Reserved2 = MustBeSetToTable(this, "0");
	UINT32 Reserved3 = MustBeSetToTable(this, "0");
	UINT32 Reserved4 = MustBeSetToTable(this, "0");
	UINT32 Reserved5 = MustBeSetToTable(this, "0");
	UINT32 Reserved6 = MustBeSetToTable(this, "0");
	UINT32 Reserved7 = MustBeSetToTable(this, "0");
	UINT32 Reserved8 = MustBeSetToTable(this, "0");
	UINT32 Reserved9 = MustBeSetToTable(this, "0");
	UINT32 Reserved10 = MustBeSetToTable(this, "0");
	UINT32 Reserved11 = MustBeSetToTable(this, "0");
	switch
	{
		case Property.MSRPCPtype == 0x02 && dwUsedBufferSize > 0:
			struct
			{
				while[frameoffset < framelength]
				{
					TRPASYNCEVENTMSG EventMsg;
				}
			}
	}
}

//1-GetUIDllName
table TRPGetUIDllNamedwObjectTypeTable( value )
{
	switch(value)
	{
		case 0x1:"TUISPIDLL_OBJECT_LINEID, the concerned object is a line device identifier ";
		case 0x2:"TUISPIDLL_OBJECT_PHONEID, The concerned object is a phone device identifier";
		case 0x3:"TUISPIDLL_OBJECT_PROVIDERID,The concerned object is a permanent provider identifier";
		case 0x4:"TUISPIDLL_OBJECT_DIALOGINSTANCE, The concerned object refers to an opaque dialog instance handle";
		default:FormatString("value 0x%08x",value);
	}
}

table TRPGetUIDllNameObjectID(value)
{
	switch(value)
	{
		case 1:"TUISPIDLL_OBJECT_LINEID, a line device identifier (dwDeviceID)";
		case 2:"TUISPIDLL_OBJECT_PHONEID,a phone device identifier (dwDeviceID)";
		case 3:"TUISPIDLL_OBJECT_PROVIDERID, a permanent provider identifier";
		case 4:"TUISPIDLL_OBJECT_DIALOGINSTANCE, an opaque dialog instance handle";
		default:FormatString("value 0x%08x",value);
	}
}

struct TRPGetUIDllName
{
	UINT32 dwObjectID = TRPGetUIDllNameObjectID(this);
	UINT32 dwObjectType = TRPGetUIDllNamedwObjectTypeTable(this);
	UINT32 dwUIDllNameOffset;
	UINT32 dwUIDllNameSize;
	UINT32 dwProviderFilenameOffset;
	UINT32 bRemoveProvider;
	UINT32 htDlgInst;
	UINT32 Reserved2 = MustBeSetToTable(this, "0");
	UINT32 Reserved3 = MustBeSetToTable(this, "0");
	UINT32 Reserved4 = MustBeSetToTable(this, "0");
	UINT32 Reserved5 = MustBeSetToTable(this, "0");
	UINT32 Reserved6 = MustBeSetToTable(this, "0");
	UINT32 Reserved7 = MustBeSetToTable(this, "0");
	switch
	{
		case Property.MSRPCPtype == 0x02 && dwUIDllNameSize > 0 && dwUIDllNameOffset != 0XFFFFFFFF: UnicodeString(dwUIDllNameSize / 2) UIDllName;
	}
	switch
	{
		case dwObjectType == 3: UnicodeString ProviderFilename;
	}
}

//2-UIDLLCallback
struct TRPUIDLLCallback
{
	UINT32 dwObjectID = TRPGetUIDllNameObjectID(this);
	UINT32 dwObjectType;
	UINT32 dwParamsInOffset;
	UINT32 dwParamsInSize;
	UINT32 dwParamsOutOffset;
	UINT32 dwParamsOutSize;
	UINT32 Reserved3 = MustBeSetToTable(this, "0");
	UINT32 Reserved4 = MustBeSetToTable(this, "0");
	UINT32 Reserved5 = MustBeSetToTable(this, "0");
	UINT32 Reserved6 = MustBeSetToTable(this, "0");
	UINT32 Reserved7 = MustBeSetToTable(this, "0");
	UINT32 Reserved8 = MustBeSetToTable(this, "0");
	[VarDataStartOffset = FrameOffset]
	while [ FrameOffset < FrameLength ]
	{
		switch
		{
			case FrameOffset - VarDataStartOffset == dwParamsInOffset: UnicodeString SetData;
			case FrameOffset - VarDataStartOffset == dwParamsOutOffset: UnicodeString GetData;
			default: TRPTAPI32MsgPadding(VarDataStartOffset,dwParamsInOffset,dwParamsOutOffset) Padding;
		}
	}
}

//3-FreeDialogInstance
struct TRPFreeDialogInstance
{
	UINT32 htDlgInst;
	UINT32 lUIDllResult;
	UINT32 Reserved2 = MustBeSetToTable(this, "0");
	UINT32 Reserved3 = MustBeSetToTable(this, "0");
	UINT32 Reserved4 = MustBeSetToTable(this, "0");
	UINT32 Reserved5 = MustBeSetToTable(this, "0");
	UINT32 Reserved6 = MustBeSetToTable(this, "0");
	UINT32 Reserved7 = MustBeSetToTable(this, "0");
	UINT32 Reserved8 = MustBeSetToTable(this, "0");
	UINT32 Reserved9 = MustBeSetToTable(this, "0");
	UINT32 Reserve10 = MustBeSetToTable(this, "0");
	UINT32 Reserve11 = MustBeSetToTable(this, "0");
	UINT32 Reserve12 = MustBeSetToTable(this, "0");
}

//4-1Accept
struct TRPLineAccept
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	
	UINT32 lpsUserUserInfo;
	UINT32 dwSize ;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserve10;
	switch
	{
		case lpsUserUserInfo > 0 && lpsUserUserInfo != 0xFFFFFFFF: BLOB(lpsUserUserInfo) Pad;
	}
	switch
	{
		case lpsUserUserInfo != 0xFFFFFFFF: BLOB(dwSize) UserUserInfo;
	}
}

//5-lAddToConference
struct TRPLineAddToConference
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hConfCall;
	HCALL  hConsultCall ;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserve10;
	UINT32 Reserve11;
}

//6-l
struct TRPLineAgentSpecific
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hLine;
	UINT32 dwAddressID;
	UINT32 dwAgentExtensionIDIndex;
	UINT32 lpParamsContext;
	UINT32 lpParams;
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;

	switch
	{
		case lpParams > 0: BLOB( lpParams ) Padding;
	}

	switch
	{
		case dwSize > 0: BLOB( dwSize ) VarData;
	}
}

//7-lAnswer
struct TRPLineAnswer
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 lpsUserUserInfo;
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserve10;
	
	switch
	{
		case lpsUserUserInfo > 0 && lpsUserUserInfo != 0xFFFFFFFF: BLOB(lpsUserUserInfo) Pad;
	}
	switch
	{
		case lpsUserUserInfo != 0xFFFFFFFF: BLOB(dwSize) UserUserInfo;
	}
}

//8-lBlindTransfer
struct TRPLineBlindTransfer
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 lpszDestAddress;
	UINT32 dwCountryCode ;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserve10;
	switch
	{
		case lpszDestAddress > 0: BLOB(lpszDestAddress) Padding;
	}
	UnicodeString VarData;
}

//9-lClose
struct TRPLineClose
{
	UINT32  hLine;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	UINT32 Reserved13;
}

//10-lCompleteCall
struct TRPLineCompleteCall
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	HCALL  hCall;
	UINT32 lpdwCompletionIDContext;
	UINT32 dwCompletionMode = FormatString("%d - %s", this, TRPLineCallComplModeTable(this));
	UINT32 dwMessageID;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

//11-lCompleteTransfer
struct TRPLineCompleteTransfer
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	HCALL  hCall;
	HCALL  hConsultCall;
	UINT32 lpConfCallContext;
	UINT32 dwTransferMode = FormatString("%d - %s", this, TRPLineTransferModeTable(this));
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

//12-lDeallocateCall
struct TRPLineCloseCall
{
	HCALL hCall;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	UINT32 Reserved13;
}

//13-lDevSpecific
struct TRPLineDevSpecific
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hLine;
	UINT32 dwAddressID;
	HCALL  hCall;
	UINT32 lpParamsContext;
	UINT32 lpParams;
	[TRPLineDevSpecficSize = this]
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	switch
	{
		case lpParams > 0: BLOB( lpParams ) Padding;
	}
	switch
	{
		case dwSize > 0: BLOB(dwSize) VarData;
	}
}

//14-lDevSpecificFeature
struct TRPLineDevSpecificFeature
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hLine;
	UINT32 dwFeature = FormatString("%d - %s", this, TRPPhoneButtonFunctionTable(this));
	UINT32 lpParamsContext;
	UINT32 lpParams;
	[TRPLineDevSpecificFeatureSize = this]
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	switch
	{
		case lpParams > 0: BLOB( lpParams ) Padding;
	}

	switch
	{
		case dwSize > 0: BLOB( dwSize ) VarData;
	}
}

//15-Dial
struct TRPLineDial
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 lpszDestAddress;
	UINT32 dwCountryCode ;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	switch
	{
		case lpszDestAddress > 0: BLOB( lpszDestAddress ) Padding;
	}

	UnicodeString VarData;
}

//16-lDrop
struct TRPLineDrop
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL hCall;
	[UserInfoOffset = this == 0xFFFFFFFF ? -1 : this]
	UINT32 lpsUserUserInfo;
	[UserInfoSize]
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	switch
	{
		case UserInfoOffset > 0: BLOB(UserInfoOffset) Padding;
	}
	switch
	{
		case UserInfoSize > 0: BLOB(UserInfoSize) UserUserInfomation;
	}
}

//17-lForward

Struct TRPLINEADDRESSTYPEFlag
{
	UINT32 LINEADDRESSTYPEFlags
	{
		UINT32 LINEADDRESSTYPE_PHONENUMBER:1 = FormatString("    (%s) %s", this.ToBitString, this? "standard phone number": "");
		UINT32 LINEADDRESSTYPE_SDP:1 = FormatString("            (%s) %s", this.ToBitString, this? "Session Description Protocol (SDP) conference": "");
		UINT32 LINEADDRESSTYPE_EMAILNAME:1 = FormatString("      (%s) %s", this.ToBitString, this? "e-mail name": "");
		UINT32 LINEADDRESSTYPE_DOMAINNAME:1 = FormatString("     (%s) %s", this.ToBitString, this? "domain name": "");
		UINT32 LINEADDRESSTYPE_IPADDRESS:1 = FormatString("      (%s) %s", this.ToBitString, this? "IP address": "");
		UINT32 Reserved1:27 = FormatString("                      (%s)", this.ToBitString);
	}
}

struct LINEFORWARDSTRUCT
{
	TRPLINEFORWARDMODEFlag dwForwardMode;
	UINT32 dwCallerAddressSize;
	UINT32 dwCallerAddressOffset;
	UINT32 dwDestCountryCode;  
	UINT32 dwDestAddressSize;
	UINT32 dwDestAddressOffset;
	UINT32 dwCallerAddressType;
	TRPLINEADDRESSTYPEFlag dwDestAddressType;
}

struct LINEFORWARDLIST = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	[TrpBufferEntrySize = this]
	UINT32 dwNumEntries;

	[ParamIndex =0]
	while[ ParamIndex < TrpBufferEntrySize ]
	{
		[ParamIndex = ParamIndex + 1]
		LINEFORWARDSTRUCT ForwardList;
	}
}

struct TRPLINEDIALPARAMS
{
	UINT32 dwDialPause;
	UINT32 dwDialSpeed;
	UINT32 dwDigitDuration;
	UINT32 dwWaitForDialtone;
}

struct TRPLINECALLPARAMFLAGSFlag
{
	UINT32 LINECALLPARAMFLAGS
	{
		UINT32 LINECALLPARAMFLAGS_SECURE:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLPARAMFLAGS_SECURE": "NOT LINECALLPARAMFLAGS_SECURE");
		UINT32 LINECALLPARAMFLAGS_IDLE:1 = FormatString("            (%s) %s", this.ToBitString, this? "LINECALLPARAMFLAGS_IDLE": "NOT LINECALLPARAMFLAGS_IDLE");
		UINT32 LINECALLPARAMFLAGS_BLOCKID:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINECALLPARAMFLAGS_BLOCKID": "NOT LINECALLPARAMFLAGS_BLOCKID");
		UINT32 LINECALLPARAMFLAGS_ORIGOFFHOOK:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLPARAMFLAGS_ORIGOFFHOOK": "NOT LINECALLPARAMFLAGS_ORIGOFFHOOK");
		UINT32 LINECALLPARAMFLAGS_DESTOFFHOOK:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLPARAMFLAGS_DESTOFFHOOK": "NOT LINECALLPARAMFLAGS_DESTOFFHOOK");
		UINT32 LINECALLPARAMFLAGS_NOHOLDCONFERENCE:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLPARAMFLAGS_NOHOLDCONFERENCE": "NOT LINECALLPARAMFLAGS_NOHOLDCONFERENCE");
		UINT32 LINECALLPARAMFLAGS_PREDICTIVEDIAL:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLPARAMFLAGS_PREDICTIVEDIAL": "NOT LINECALLPARAMFLAGS_PREDICTIVEDIAL");
		UINT32 LINECALLPARAMFLAGS_ONESTEPTRANSFER:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLPARAMFLAGS_ONESTEPTRANSFER": "NOT LINECALLPARAMFLAGS_ONESTEPTRANSFER");
		UINT32 Reserved1:24 = FormatString("                          (%s)", this.ToBitString);
	}
}

struct TRPLINECALLPARAMS
{
	[local.VarDataStart = FrameOffset]
	UINT32 dwTotalSize;
	TRPLINEBEARERMODEFlag dwBearerMode;
	UINT32 dwMinRate;
	UINT32 dwMaxRate;
	TRPLINEMEDIAMODEFlag dwMediaMode;
	TRPLINECALLPARAMFLAGSFlag dwCallParamFlags;
	TRPLINEADDRESSMODEFlag dwAddressMode;
	UINT32 dwAddressID;
	TRPLINEDIALPARAMS DialParams;

	UINT32 dwOrigAddressSize;
	UINT32 dwOrigAddressOffset;
	UINT32 dwDisplayableAddressSize;
	UINT32 dwDisplayableAddressOffset;
	UINT32 dwCalledPartySize;
	UINT32 dwCalledPartyOffset;
	UINT32 dwCommentSize;
	UINT32 dwCommentOffset;
	UINT32 dwUserUserInfoSize;
	UINT32 dwUserUserInfoOffset;
	UINT32 dwHighLevelCompSize;
	UINT32 dwHighLevelCompOffset;
	UINT32 dwLowLevelCompSize;
	UINT32 dwLowLevelCompOffset;
	UINT32 dwDevSpecificSize;
	UINT32 dwDevSpecificOffset;
	TRPLINECALLSTATEFlag dwPredictiveAutoTransferStates;
	UINT32 dwTargetAddressSize;
	UINT32 dwTargetAddressOffset;
	UINT32 dwSendingFlowspecSize;
	UINT32 dwSendingFlowspecOffset;
	UINT32 dwReceivingFlowspecSize;
	UINT32 dwReceivingFlowspecOffset;
	UINT32 dwDeviceClassSize;
	UINT32 dwDeviceClassOffset;
	UINT32 dwDeviceConfigSize;
	UINT32 dwDeviceConfigOffset;
	UINT32 dwCallDataSize;
	UINT32 dwCallDataOffset;
	UINT32 dwNoAnswerTimeout;
	UINT32 dwCallingPartyIDSize;
	UINT32 dwCallingPartyIDOffset;
	[Conversation.TRPNegotiateAPIVersionPerFrameTable$[FrameNumber] = Conversation.TRPNegotiateAPIVersion]
	switch(Conversation.TRPNegotiateAPIVersionPerFrameTable$[FrameNumber])
	{
		case 0x00030000:
		case 0x00030001:
			UINT32 dwAddressType;
	}
	
	
	while [FrameOffset < FrameLength]
	{
		[local.ptrOffset = FrameOffset - local.VarDataStart]
		switch
		{
			case local.ptrOffset == dwOrigAddressOffset && dwOrigAddressSize > 0: BLOB(dwOrigAddressSize) OrigAddress;
			case local.ptrOffset == dwDisplayableAddressOffset && dwDisplayableAddressSize > 0: BLOB(dwDisplayableAddressSize) DisplayableAddress;
			case local.ptrOffset == dwCalledPartyOffset && dwCalledPartySize > 0: BLOB(dwCalledPartySize) CalledParty;
			case local.ptrOffset == dwCommentOffset && dwCommentSize > 0: BLOB(dwCommentSize) Comment;
			case local.ptrOffset == dwUserUserInfoOffset && dwUserUserInfoSize > 0: BLOB(dwUserUserInfoSize) UserInfo;
			case local.ptrOffset == dwHighLevelCompOffset && dwHighLevelCompSize > 0: BLOB(dwHighLevelCompSize) HignLevelComp;
			case local.ptrOffset == dwLowLevelCompOffset && dwLowLevelCompSize > 0: BLOB(dwLowLevelCompSize) LowLevelComp;
			case local.ptrOffset == dwDevSpecificOffset && dwDevSpecificSize > 0: BLOB(dwDevspecificSize) DevSpecific;
			case local.ptrOffset == dwTargetAddressOffset && dwTargetAddressSize > 0: BLOB(dwTargetAddressSize) TargetAddress;
			case local.ptrOffset == dwSendingFlowspecOffset && dwSendingFlowspecSize > 0: BLOB(dwSendingFlowspecSize) SendingFlowspec;
			case local.ptrOffset == dwReceivingFlowspecOffset && dwReceivingFlowspecSize > 0: BLOB(dwReceivingFlowspecSize) ReceivingFlowspec;
			case local.ptrOffset == dwDeviceClassOffset && dwDeviceClassSize > 0: AsciiString(dwDeviceClassSize) DeviceClass;
			case local.ptrOffset == dwDeviceConfigOffset && dwDeviceConfigSize > 0: BLOB(dwDeviceConfigSize) DeviceConfig;
			case local.ptrOffset == dwCallDataOffset && dwCallDataSize > 0: BLOB(dwCallDataSize) CallData;
			case local.ptrOffset == dwCallingPartyIDOffset && dwCallingPartyIDSize > 0: AsciiString(dwCallingPartyIDSize) CallingPartyID;
			default:
				UINT8 Pad;
		}
	}
}

struct TRPTAPI32MsgPadding(BaseOffset, Offset1, Offset2)
{
	while [ FrameOffset - BaseOffset != Offset1 &&
	FrameOffset - BaseOffset != Offset2 &&
	!(offset1 == 0xFFFFFFFF && offset2 == 0xFFFFFFFF)]
	{
		UINT8 Padding;
	}
}

struct TRPLineForward
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hLine;
	UINT32 bAllAddresses = FormatString("%d - %s", this, this ? "TRUE : All addresses on the line are forwarded and dwAddressID is ignored."
	: "FALSE : Only the address specified as dwAddressID is forwarded.");
	UINT32 dwAddressID;
	UINT32 lpForwardList;
	UINT32 dwNumRingsNoAnswer;
	UINT32 lphConsultCallContext;
	UINT32 lpCallParams;
	UINT32 dwAsciiCallParamsCodePage;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	[VarDataStartOffset = FrameOffset]
	while [ FrameOffset < FrameLength ]
	{
		switch
		{
			case FrameOffset - VarDataStartOffset == lpForwardList: LINEFORWARDLIST lineForwardlist;
			case FrameOffset - VarDataStartOffset == lpCallParams: TRPLINECALLPARAMS CallParams;
			default: TRPTAPI32MsgPadding(VarDataStartOffset,lpForwardList,lpCallParams) Padding;
		}
	}
}

//18-lGatherDigits
struct TRPLineGatherDigits
{
	UINT32 lpContext;
	HCALL hCall;
	[post.global.TrpEndtoEndIDTable$[dwEndtoEndID > 0? dwEndtoEndID: -1] = true]
	UINT32 dwEndtoEndID ;
	TRPLINEDIGITMODEFlag dwDigitModes;
	[post.global.TrpDigitsContextTable$[lpsDigitsContext > 0? lpsDigitsContext: -1] = true]
	UINT32 lpsDigitsContext;
	UINT32 dwNumDigits ;
	UINT32 lpszTerminationDigits;
	UINT32 dwFirstDigitTimeout;
	UINT32 dwInterDigitTimeout;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	switch
	{
		case lpszTerminationDigits > 0 && lpszTerminationDigits != 0XFFFFFFFF: BLOB( lpszTerminationDigits ) Padding;
	}
	UnicodeString VarData;
}

//19-lGenerateDigits
struct TRPLineGenerateDigits
{
	HCALL hCall;
	TRPLINEDIGITMODEFlag dwDigitMode;
	UINT32 lpszDigits;
	UINT32 dwDuration;
	UINT32 dwEndToEndID;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	switch
	{
		case lpszDigits > 0 && lpszDigits != 0XFFFFFFFF: BLOB( lpszDigits ) Padding;
	}
	UnicodeString VarData;
}

//20-lGenerateTone
struct TRPLINEGENERATETONEStructure
{
	UINT32 dwFrequency;
	UINT32 dwCadenceOn;
	UINT32 dwCadenceOff;
	UINT32 dwVolume;
}

struct TRPLineGenerateTone
{
	HCALL hCall;
	[TRPToneMode = this]
	UINT32 dwToneMode = FormatString("%d - %s", this, TRPLineToneModeTable(this));
	UINT32 dwDuration;
	UINT32 dwNumTones;
	UINT32 lpTones;
	UINT32 dwSize;
	UINT32 dwEndToEndID;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	switch
	{
		case lpTones > 0 && lpTones != 0XFFFFFFFF: BLOB( lpTones ) Padding;
	}
	switch
	{
		case lpTones != 0XFFFFFFFF: TRPLINEGENERATETONEStructure VarData[dwNumTones];
	}
}

//21-lGetAddressCaps
struct TRPLineGetAddressCaps
{
	UINT32 hLineApp;
	UINT32 dwDeviceID;
	UINT32 dwAddressID;
	[Property.TRPGetAddressCapsTSPIVersion]
	UINT32 dwTSPIVersion;
	UINT32 dwExtVersion;
	UINT32 lpAddressCaps;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpAddressCaps > 0 && lpAddressCaps != 0xFFFFFFFF: BLOB(lpAddressCaps) padding;
			}
			switch
			{
				case lpAddressCaps != 0xFFFFFFFF: TRPLineAddressCaps lineAddressCaps;
			}
		};

	}
}

struct TRPLINECALLINFOSTATEFlag
{
	UINT32 LINECALLINFOSTATE
	{
		UINT32 LINECALLINFOSTATE_OTHER:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_OTHER": "NOT LINECALLINFOSTATE_OTHER");
		UINT32 LINECALLINFOSTATE_DEVSPECIFIC:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_DEVSPECIFIC": "NOT LINECALLINFOSTATE_DEVSPECIFIC");
		UINT32 LINECALLINFOSTATE_BEARERMODE:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_BEARERMODE": "NOT LINECALLINFOSTATE_BEARERMODE");
		UINT32 LINECALLINFOSTATE_RATE:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_RATE": "NOT LINECALLINFOSTATE_RATE");
		UINT32 LINECALLINFOSTATE_MEDIAMODE:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_MEDIAMODE": "NOT LINECALLINFOSTATE_MEDIAMODE");
		UINT32 LINECALLINFOSTATE_APPSPECIFIC:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_APPSPECIFIC": "NOT LINECALLINFOSTATE_APPSPECIFIC");
		UINT32 LINECALLINFOSTATE_CALLID:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_CALLID": "NOT LINECALLINFOSTATE_CALLID");
		UINT32 LINECALLINFOSTATE_RELATEDCALLID:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_RELATEDCALLID": "NOT LINECALLINFOSTATE_RELATEDCALLID");
		UINT32 LINECALLINFOSTATE_ORIGIN:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_ORIGIN": "NOT LINECALLINFOSTATE_ORIGIN");
		UINT32 LINECALLINFOSTATE_REASON:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_REASON": "NOT LINECALLINFOSTATE_REASON");
		UINT32 LINECALLINFOSTATE_COMPLETIONID:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_COMPLETIONID": "NOT LINECALLINFOSTATE_COMPLETIONID");
		UINT32 LINECALLINFOSTATE_NUMOWNERINCR:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_NUMOWNERINCR": "NOT LINECALLINFOSTATE_NUMOWNERINCR");
		UINT32 LINECALLINFOSTATE_NUMOWNERDECR:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_NUMOWNERDECR": "NOT LINECALLINFOSTATE_NUMOWNERDECR");
		UINT32 LINECALLINFOSTATE_NUMMONITORS:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_NUMMONITORS": "NOT LINECALLINFOSTATE_NUMMONITORS");
		UINT32 LINECALLINFOSTATE_TRUNK:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_TRUNK": "NOT LINECALLINFOSTATE_TRUNK");
		UINT32 LINECALLINFOSTATE_CALLERID:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_CALLERID": "NOT LINECALLINFOSTATE_CALLERID");
		UINT32 LINECALLINFOSTATE_CALLEDID:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_CALLEDID": "NOT LINECALLINFOSTATE_CALLEDID");
		UINT32 LINECALLINFOSTATE_CONNECTEDID:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_CONNECTEDID": "NOT LINECALLINFOSTATE_CONNECTEDID");
		UINT32 LINECALLINFOSTATE_REDIRECTIONID:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_REDIRECTIONID": "NOT LINECALLINFOSTATE_REDIRECTIONID");
		UINT32 LINECALLINFOSTATE_REDIRECTINGID:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_REDIRECTINGID": "NOT LINECALLINFOSTATE_REDIRECTINGID");
		UINT32 LINECALLINFOSTATE_DISPLAY:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_DISPLAY": "NOT LINECALLINFOSTATE_DISPLAY");
		UINT32 LINECALLINFOSTATE_USERUSERINFO:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_USERUSERINFO": "NOT LINECALLINFOSTATE_USERUSERINFO");
		UINT32 LINECALLINFOSTATE_HIGHLEVELCOMP:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_HIGHLEVELCOMP": "NOT LINECALLINFOSTATE_HIGHLEVELCOMP");
		UINT32 LINECALLINFOSTATE_LOWLEVELCOMP:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_LOWLEVELCOMP": "NOT LINECALLINFOSTATE_LOWLEVELCOMP");
		UINT32 LINECALLINFOSTATE_CHARGINGINFO:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_CHARGINGINFO": "NOT LINECALLINFOSTATE_CHARGINGINFO");
		UINT32 LINECALLINFOSTATE_TERMINAL:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_TERMINAL": "NOT LINECALLINFOSTATE_TERMINAL");
		UINT32 LINECALLINFOSTATE_DIALPARAMS:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_DIALPARAMS": "NOT LINECALLINFOSTATE_DIALPARAMS");
		UINT32 LINECALLINFOSTATE_MONITORMODES:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_MONITORMODES": "NOT LINECALLINFOSTATE_MONITORMODES");
		UINT32 LINECALLINFOSTATE_TREATMENT:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_TREATMENT": "NOT LINECALLINFOSTATE_TREATMENT");
		UINT32 LINECALLINFOSTATE_QOS:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_QOS": "NOT LINECALLINFOSTATE_QOS");
		UINT32 LINECALLINFOSTATE_CALLDATA:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLINFOSTATE_CALLDATA": "NOT LINECALLINFOSTATE_CALLDATA");
		UINT32 Reserved1:1 = FormatString("                      (%s)", this.ToBitString);
	}
}

struct TRPLINECALLPARTYIDFlag
{
	UINT32 LINECALLPARTYID
	{
		UINT32 LINECALLPARTYID_BLOCKED:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLPARTYID_BLOCKED": "NOT LINECALLPARTYID_BLOCKED");
		UINT32 LINECALLPARTYID_OUTOFAREA:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLPARTYID_OUTOFAREA": "NOT LINECALLPARTYID_OUTOFAREA");
		UINT32 LINECALLPARTYID_NAME:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLPARTYID_NAME": "NOT LINECALLPARTYID_NAME");
		UINT32 LINECALLPARTYID_ADDRESS:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLPARTYID_ADDRESS": "NOT LINECALLPARTYID_ADDRESS");
		UINT32 LINECALLPARTYID_PARTIAL:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLPARTYID_PARTIAL": "NOT LINECALLPARTYID_PARTIAL");
		UINT32 LINECALLPARTYID_UNKNOWN:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLPARTYID_UNKNOWN": "NOT LINECALLPARTYID_UNKNOWN");
		UINT32 LINECALLPARTYID_UNAVAIL:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLPARTYID_UNAVAIL": "NOT LINECALLPARTYID_UNAVAIL");
		UINT32 Reserved1:25 = FormatString("                (%s)", this.ToBitString);
	}
}

struct TRPLINEBUSYMODEFlag
{
	UINT32 LINEBUSYMODE
	{
		UINT32 LINEBUSYMODE_STATION:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEBUSYMODE_STATION": "NOT LINEBUSYMODE_STATION");
		UINT32 LINEBUSYMODE_TRUNK:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEBUSYMODE_TRUNK": "NOT LINEBUSYMODE_TRUNK");
		UINT32 LINEBUSYMODE_UNKNOWN:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEBUSYMODE_UNKNOWN": "NOT LINEBUSYMODE_UNKNOWN");
		UINT32 LINEBUSYMODE_UNAVAIL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEBUSYMODE_UNAVAIL": "NOT LINEBUSYMODE_UNAVAIL");
		UINT32 Reserved1:28 = FormatString("           (%s)", this.ToBitString);
	}
}

struct TRPLINEOFFERINGMODEFlag
{
	UINT32 LINEOFFERINGMODE
	{
		UINT32 LINEOFFERINGMODE_ACTIVE:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEOFFERINGMODE_ACTIVE": "NOT LINEOFFERINGMODE_ACTIVE");
		UINT32 LINEOFFERINGMODE_INACTIVE:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEOFFERINGMODE_INACTIVE": "NOT LINEOFFERINGMODE_INACTIVE");
		UINT32 Reserved1:30 = FormatString("                (%s)", this.ToBitString);
	}
}

struct TRPLINECALLSTATEFlag
{
	UINT32 LINECALLSTATE
	{
		UINT32 LINECALLSTATE_IDLE:1 = FormatString("              (%s) %s", this.ToBitString, this? "LINECALLSTATE_IDLE": "NOT LINECALLSTATE_IDLE");
		UINT32 LINECALLSTATE_OFFERING:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLSTATE_OFFERING": "NOT LINECALLSTATE_OFFERING");
		UINT32 LINECALLSTATE_ACCEPTED:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLSTATE_ACCEPTED": "NOT LINECALLSTATE_ACCEPTED");
		UINT32 LINECALLSTATE_DIALTONE:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLSTATE_DIALTONE": "NOT LINECALLSTATE_DIALTONE");
		UINT32 LINECALLSTATE_DIALING:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINECALLSTATE_DIALING": "NOT LINECALLSTATE_DIALING");
		UINT32 LINECALLSTATE_RINGBACK:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLSTATE_RINGBACK": "NOT LINECALLSTATE_RINGBACK");
		UINT32 LINECALLSTATE_BUSY:1 = FormatString("              (%s) %s", this.ToBitString, this? "LINECALLSTATE_BUSY": "NOT LINECALLSTATE_BUSY");
		UINT32 LINECALLSTATE_SPECIALINFO:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLSTATE_SPECIALINFO": "NOT LINECALLSTATE_SPECIALINFO");
		UINT32 LINECALLSTATE_CONNECTED:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINECALLSTATE_CONNECTED": "NOT LINECALLSTATE_CONNECTED");
		UINT32 LINECALLSTATE_PROCEEDING:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLSTATE_PROCEEDING": "NOT LINECALLSTATE_PROCEEDING");
		UINT32 LINECALLSTATE_ONHOLD:1 = FormatString("            (%s) %s", this.ToBitString, this? "LINECALLSTATE_ONHOLD": "NOT LINECALLSTATE_ONHOLD");
		UINT32 LINECALLSTATE_CONFERENCED:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLSTATE_CONFERENCED": "NOT LINECALLSTATE_CONFERENCED");
		UINT32 LINECALLSTATE_ONHOLDPENDCONF:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLSTATE_ONHOLDPENDCONF": "NOT LINECALLSTATE_ONHOLDPENDCONF");
		UINT32 LINECALLSTATE_ONHOLDPENDTRANSFER:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLSTATE_ONHOLDPENDTRANSFER": "NOT LINECALLSTATE_ONHOLDPENDTRANSFER");
		UINT32 LINECALLSTATE_DISCONNECTED:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINECALLSTATE_DISCONNECTED": "NOT LINECALLSTATE_DISCONNECTED");
		UINT32 LINECALLSTATE_UNKNOWN:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINECALLSTATE_UNKNOWN": "NOT LINECALLSTATE_UNKNOWN");
		UINT32 Reserved1:16 = FormatString("                       (%s)", this.ToBitString);
	}
}

struct TRPLINEDIALTONEMODEFlag
{
	UINT32 LINEDIALTONEMODE
	{
		UINT32 LINEDIALTONEMODE_NORMAL:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEDIALTONEMODE_NORMAL": "NOT LINEDIALTONEMODE_NORMAL");
		UINT32 LINEDIALTONEMODE_SPECIAL:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINEDIALTONEMODE_SPECIAL": "NOT LINEDIALTONEMODE_SPECIAL");
		UINT32 LINEDIALTONEMODE_INTERNAL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEDIALTONEMODE_INTERNAL": "NOT LINEDIALTONEMODE_INTERNAL");
		UINT32 LINEDIALTONEMODE_EXTERNAL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEDIALTONEMODE_EXTERNAL": "NOT LINEDIALTONEMODE_EXTERNAL");
		UINT32 LINEDIALTONEMODE_UNKNOWN:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINEDIALTONEMODE_UNKNOWN": "NOT LINEDIALTONEMODE_UNKNOWN");
		UINT32 LINEDIALTONEMODE_UNAVAIL:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINEDIALTONEMODE_UNAVAIL": "NOT LINEDIALTONEMODE_UNAVAIL");
		UINT32 Reserved1:26 = FormatString("                (%s)", this.ToBitString);
	}
}

struct TRPLINESPECIALINFOFlag
{
	UINT32 LINESPECIALINFO
	{
		UINT32 LINESPECIALINFO_NOCIRCUIT:1 = FormatString("(%s) %s", this.ToBitString, this? "LINESPECIALINFO_NOCIRCUIT": "NOT LINESPECIALINFO_NOCIRCUIT");
		UINT32 LINESPECIALINFO_CUSTIRREG:1 = FormatString("(%s) %s", this.ToBitString, this? "LINESPECIALINFO_CUSTIRREG": "NOT LINESPECIALINFO_CUSTIRREG");
		UINT32 LINESPECIALINFO_REORDER:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINESPECIALINFO_REORDER": "NOT LINESPECIALINFO_REORDER");
		UINT32 LINESPECIALINFO_UNKNOWN:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINESPECIALINFO_UNKNOWN": "NOT LINESPECIALINFO_UNKNOWN");
		UINT32 LINESPECIALINFO_UNAVAIL:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINESPECIALINFO_UNAVAIL": "NOT LINESPECIALINFO_UNAVAIL");
		UINT32 Reserved1:27 = FormatString("                (%s)", this.ToBitString);
	}
}
struct TRPLINEDISCONNECTMODEFlag
{
	UINT32 LINEDISCONNECTMODE
	{
		UINT32 LINEDISCONNECTMODE_NORMAL:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_NORMAL": "NOT LINEDISCONNECTMODE_NORMAL");
		UINT32 LINEDISCONNECTMODE_UNKNOWN:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_UNKNOWN": "NOT LINEDISCONNECTMODE_UNKNOWN");
		UINT32 LINEDISCONNECTMODE_REJECT:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_REJECT": "NOT LINEDISCONNECTMODE_REJECT");
		UINT32 LINEDISCONNECTMODE_PICKUP:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_PICKUP": "NOT LINEDISCONNECTMODE_PICKUP");
		UINT32 LINEDISCONNECTMODE_FORWARDED:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_FORWARDED": "NOT LINEDISCONNECTMODE_FORWARDED");
		UINT32 LINEDISCONNECTMODE_BUSY:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_BUSY": "NOT LINEDISCONNECTMODE_BUSY");
		UINT32 LINEDISCONNECTMODE_NOANSWER:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_NOANSWER": "NOT LINEDISCONNECTMODE_NOANSWER");
		UINT32 LINEDISCONNECTMODE_BADADDRESS:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_BADADDRESS": "NOT LINEDISCONNECTMODE_BADADDRESS");
		UINT32 LINEDISCONNECTMODE_UNREACHABLE:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_UNREACHABLE": "NOT LINEDISCONNECTMODE_UNREACHABLE");
		UINT32 LINEDISCONNECTMODE_CONGESTION:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_CONGESTION": "NOT LINEDISCONNECTMODE_CONGESTION");
		UINT32 LINEDISCONNECTMODE_INCOMPATIBLE:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_INCOMPATIBLE": "NOT LINEDISCONNECTMODE_INCOMPATIBLE");
		UINT32 LINEDISCONNECTMODE_UNAVAIL:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_UNAVAIL": "NOT LINEDISCONNECTMODE_UNAVAIL");
		UINT32 LINEDISCONNECTMODE_NODIALTONE:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_NODIALTONE": "NOT LINEDISCONNECTMODE_NODIALTONE");
		UINT32 LINEDISCONNECTMODE_NUMBERCHANGED:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_NUMBERCHANGED": "NOT LINEDISCONNECTMODE_NUMBERCHANGED");
		UINT32 LINEDISCONNECTMODE_OUTOFORDER:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_OUTOFORDER": "NOT LINEDISCONNECTMODE_OUTOFORDER");
		UINT32 LINEDISCONNECTMODE_TEMPFAILURE:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_TEMPFAILURE": "NOT LINEDISCONNECTMODE_TEMPFAILURE");
		UINT32 LINEDISCONNECTMODE_QOSUNAVAIL:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_QOSUNAVAIL": "NOT LINEDISCONNECTMODE_QOSUNAVAIL");
		UINT32 LINEDISCONNECTMODE_BLOCKED:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_BLOCKED": "NOT LINEDISCONNECTMODE_BLOCKED");
		UINT32 LINEDISCONNECTMODE_DONOTDISTURB:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_DONOTDISTURB": "NOT LINEDISCONNECTMODE_DONOTDISTURB");
		UINT32 LINEDISCONNECTMODE_CANCELLED:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEDISCONNECTMODE_CANCELLED": "NOT LINEDISCONNECTMODE_CANCELLED");
		UINT32 Reserved1:12 = FormatString("                       (%s)", this.ToBitString);
	}
}

struct TRPLINEADDRCAPFLAGSFlag
{
	UINT32 LINEADDRCAPFLAGS
	{
		UINT32 LINEADDRCAPFLAGS_FWDNUMRINGS:1 = FormatString("             (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_FWDNUMRINGS": "NOT LINEADDRCAPFLAGS_FWDNUMRINGS");
		UINT32 LINEADDRCAPFLAGS_PICKUPGROUPID:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_PICKUPGROUPID": "NOT LINEADDRCAPFLAGS_PICKUPGROUPID");
		UINT32 LINEADDRCAPFLAGS_SECURE:1 = FormatString("                  (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_SECURE": "NOT LINEADDRCAPFLAGS_SECURE");
		UINT32 LINEADDRCAPFLAGS_BLOCKIDDEFAULT:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_BLOCKIDDEFAULT": "NOT LINEADDRCAPFLAGS_BLOCKIDDEFAULT");
		UINT32 LINEADDRCAPFLAGS_BLOCKIDOVERRIDE:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_BLOCKIDOVERRIDE": "NOT LINEADDRCAPFLAGS_BLOCKIDOVERRIDE");
		UINT32 LINEADDRCAPFLAGS_DIALED:1 = FormatString("                  (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_DIALED": "NOT LINEADDRCAPFLAGS_DIALED");
		UINT32 LINEADDRCAPFLAGS_ORIGOFFHOOK:1 = FormatString("             (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_ORIGOFFHOOK": "NOT LINEADDRCAPFLAGS_ORIGOFFHOOK");
		UINT32 LINEADDRCAPFLAGS_DESTOFFHOOK:1 = FormatString("             (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_DESTOFFHOOK": "NOT LINEADDRCAPFLAGS_DESTOFFHOOK");
		UINT32 LINEADDRCAPFLAGS_FWDCONSULT:1 = FormatString("              (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_FWDCONSULT": "NOT LINEADDRCAPFLAGS_FWDCONSULT");
		UINT32 LINEADDRCAPFLAGS_SETUPCONFNULL:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_SETUPCONFNULL": "NOT LINEADDRCAPFLAGS_SETUPCONFNULL");
		UINT32 LINEADDRCAPFLAGS_AUTORECONNECT:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_AUTORECONNECT": "NOT LINEADDRCAPFLAGS_AUTORECONNECT");
		UINT32 LINEADDRCAPFLAGS_COMPLETIONID:1 = FormatString("            (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_COMPLETIONID": "NOT LINEADDRCAPFLAGS_COMPLETIONID");
		UINT32 LINEADDRCAPFLAGS_TRANSFERHELD:1 = FormatString("            (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_TRANSFERHELD": "NOT LINEADDRCAPFLAGS_TRANSFERHELD");
		UINT32 LINEADDRCAPFLAGS_TRANSFERMAKE:1 = FormatString("            (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_TRANSFERMAKE": "NOT LINEADDRCAPFLAGS_TRANSFERMAKE");
		UINT32 LINEADDRCAPFLAGS_CONFERENCEHELD:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_CONFERENCEHELD": "NOT LINEADDRCAPFLAGS_CONFERENCEHELD");
		UINT32 LINEADDRCAPFLAGS_CONFERENCEMAKE:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_CONFERENCEMAKE": "NOT LINEADDRCAPFLAGS_CONFERENCEMAKE");
		UINT32 LINEADDRCAPFLAGS_PARTIALDIAL:1 = FormatString("             (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_PARTIALDIAL": "NOT LINEADDRCAPFLAGS_PARTIALDIAL");
		UINT32 LINEADDRCAPFLAGS_FWDSTATUSVALID:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_FWDSTATUSVALID": "NOT LINEADDRCAPFLAGS_FWDSTATUSVALID");
		UINT32 LINEADDRCAPFLAGS_FWDINTEXTADDR:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_FWDINTEXTADDR": "NOT LINEADDRCAPFLAGS_FWDINTEXTADDR");
		UINT32 LINEADDRCAPFLAGS_FWDBUSYNAADDR:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_FWDBUSYNAADDR": "NOT LINEADDRCAPFLAGS_FWDBUSYNAADDR");
		UINT32 LINEADDRCAPFLAGS_ACCEPTTOALERT:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_ACCEPTTOALERT": "NOT LINEADDRCAPFLAGS_ACCEPTTOALERT");
		UINT32 LINEADDRCAPFLAGS_CONFDROP:1 = FormatString("                (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_CONFDROP": "NOT LINEADDRCAPFLAGS_CONFDROP");
		UINT32 LINEADDRCAPFLAGS_PICKUPCALLWAIT:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_PICKUPCALLWAIT": "NOT LINEADDRCAPFLAGS_PICKUPCALLWAIT");
		UINT32 LINEADDRCAPFLAGS_PREDICTIVEDIALER:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_PREDICTIVEDIALER": "NOT LINEADDRCAPFLAGS_PREDICTIVEDIALER");
		UINT32 LINEADDRCAPFLAGS_QUEUE:1 = FormatString("                   (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_QUEUE": "NOT LINEADDRCAPFLAGS_QUEUE");
		UINT32 LINEADDRCAPFLAGS_ROUTEPOINT:1 = FormatString("              (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_ROUTEPOINT": "NOT LINEADDRCAPFLAGS_ROUTEPOINT");
		UINT32 LINEADDRCAPFLAGS_HOLDMAKESNEW:1 = FormatString("            (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_HOLDMAKESNEW": "NOT LINEADDRCAPFLAGS_HOLDMAKESNEW");
		UINT32 LINEADDRCAPFLAGS_NOINTERNALCALLS:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_NOINTERNALCALLS": "NOT LINEADDRCAPFLAGS_NOINTERNALCALLS");
		UINT32 LINEADDRCAPFLAGS_NOEXTERNALCALLS:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_NOEXTERNALCALLS": "NOT LINEADDRCAPFLAGS_NOEXTERNALCALLS");
		UINT32 LINEADDRCAPFLAGS_SETCALLINGID:1 = FormatString("            (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_SETCALLINGID": "NOT LINEADDRCAPFLAGS_SETCALLINGID");
		UINT32 LINEADDRCAPFLAGS_ACDGROUP:1 = FormatString("                (%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_ACDGROUP": "NOT LINEADDRCAPFLAGS_ACDGROUP");
		UINT32 LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION": "NOT LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION");
	}
}

struct TRPLINECALLFEATUREFlag
{
	UINT32 LINECALLFEATURE
	{

		UINT32 LINECALLFEATURE_ACCEPT:1 = FormatString("             (%s) %s", this.ToBitString, this? "LINECALLFEATURE_ACCEPT": "NOT LINECALLFEATURE_ACCEPT");
		UINT32 LINECALLFEATURE_ADDTOCONF:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLFEATURE_ADDTOCONF": "NOT LINECALLFEATURE_ADDTOCONF");
		UINT32 LINECALLFEATURE_ANSWER:1 = FormatString("             (%s) %s", this.ToBitString, this? "LINECALLFEATURE_ANSWER": "NOT LINECALLFEATURE_ANSWER");
		UINT32 LINECALLFEATURE_BLINDTRANSFER:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINECALLFEATURE_BLINDTRANSFER": "NOT LINECALLFEATURE_BLINDTRANSFER");
		UINT32 LINECALLFEATURE_COMPLETECALL:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLFEATURE_COMPLETECALL": "NOT LINECALLFEATURE_COMPLETECALL");
		UINT32 LINECALLFEATURE_COMPLETETRANSF:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLFEATURE_COMPLETETRANSF": "NOT LINECALLFEATURE_COMPLETETRANSF");
		UINT32 LINECALLFEATURE_DIAL:1 = FormatString("               (%s) %s", this.ToBitString, this? "LINECALLFEATURE_DIAL": "NOT LINECALLFEATURE_DIAL");
		UINT32 LINECALLFEATURE_DROP:1 = FormatString("               (%s) %s", this.ToBitString, this? "LINECALLFEATURE_DROP": "NOT LINECALLFEATURE_DROP");
		UINT32 LINECALLFEATURE_GATHERDIGITS:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLFEATURE_GATHERDIGITS": "NOT LINECALLFEATURE_GATHERDIGITS");
		UINT32 LINECALLFEATURE_GENERATEDIGITS:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLFEATURE_GENERATEDIGITS": "NOT LINECALLFEATURE_GENERATEDIGITS");
		UINT32 LINECALLFEATURE_GENERATETONE:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLFEATURE_GENERATETONE": "NOT LINECALLFEATURE_GENERATETONE");
		UINT32 LINECALLFEATURE_HOLD:1 = FormatString("               (%s) %s", this.ToBitString, this? "LINECALLFEATURE_HOLD": "NOT LINECALLFEATURE_HOLD");
		UINT32 LINECALLFEATURE_MONITORDIGITS:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINECALLFEATURE_MONITORDIGITS": "NOT LINECALLFEATURE_MONITORDIGITS");
		UINT32 LINECALLFEATURE_MONITORMEDIA:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLFEATURE_MONITORMEDIA": "NOT LINECALLFEATURE_MONITORMEDIA");
		UINT32 LINECALLFEATURE_MONITORTONES:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLFEATURE_MONITORTONES": "NOT LINECALLFEATURE_MONITORTONES");
		UINT32 LINECALLFEATURE_PARK:1 = FormatString("               (%s) %s", this.ToBitString, this? "LINECALLFEATURE_PARK": "NOT LINECALLFEATURE_PARK");
		UINT32 LINECALLFEATURE_PREPAREADDCONF:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLFEATURE_PREPAREADDCONF": "NOT LINECALLFEATURE_PREPAREADDCONF");
		UINT32 LINECALLFEATURE_REDIRECT:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINECALLFEATURE_REDIRECT": "NOT LINECALLFEATURE_REDIRECT");
		UINT32 LINECALLFEATURE_REMOVEFROMCONF:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLFEATURE_REMOVEFROMCONF": "NOT LINECALLFEATURE_REMOVEFROMCONF");
		UINT32 LINECALLFEATURE_SECURECALL:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SECURECALL": "NOT LINECALLFEATURE_SECURECALL");
		UINT32 LINECALLFEATURE_SENDUSERUSER:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SENDUSERUSER": "NOT LINECALLFEATURE_SENDUSERUSER");
		UINT32 LINECALLFEATURE_SETCALLPARAMS:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SETCALLPARAMS": "NOT LINECALLFEATURE_SETCALLPARAMS");
		UINT32 LINECALLFEATURE_SETMEDIACONTROL:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SETMEDIACONTROL": "NOT LINECALLFEATURE_SETMEDIACONTROL");
		UINT32 LINECALLFEATURE_SETTERMINAL:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SETTERMINAL": "NOT LINECALLFEATURE_SETTERMINAL");
		UINT32 LINECALLFEATURE_SETUPCONF:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SETUPCONF": "NOT LINECALLFEATURE_SETUPCONF");
		UINT32 LINECALLFEATURE_SETUPTRANSFER:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SETUPTRANSFER": "NOT LINECALLFEATURE_SETUPTRANSFER");
		UINT32 LINECALLFEATURE_SWAPHOLD:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SWAPHOLD": "NOT LINECALLFEATURE_SWAPHOLD");
		UINT32 LINECALLFEATURE_UNHOLD:1 = FormatString("             (%s) %s", this.ToBitString, this? "LINECALLFEATURE_UNHOLD": "NOT LINECALLFEATURE_UNHOLD");
		UINT32 LINECALLFEATURE_RELEASEUSERUSERINFO:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLFEATURE_RELEASEUSERUSERINFO": "NOT LINECALLFEATURE_RELEASEUSERUSERINFO");
		UINT32 LINECALLFEATURE_SETTREATMENT:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SETTREATMENT": "NOT LINECALLFEATURE_SETTREATMENT");
		UINT32 LINECALLFEATURE_SETQOS:1 = FormatString("             (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SETQOS": "NOT LINECALLFEATURE_SETQOS");
		UINT32 LINECALLFEATURE_SETCALLDATA:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINECALLFEATURE_SETCALLDATA": "NOT LINECALLFEATURE_SETCALLDATA");
	}
}

table TRPLINEREMOVEFROMCONFTable(value)
{
	switch(value)
	{
		case 0x00000001: "LINEREMOVEFROMCONF_NONE";
		case 0x00000002: "LINEREMOVEFROMCONF_LAST";
		case 0x00000003: "LINEREMOVEFROMCONF_ANY";
		default:
			FormatString(" value: 0x%08x", value);
	}
}

struct TRPLINEPARKMODEFlag = FormatString("0x%08x",LINEPARKMODE)
{
	UINT32 LINEPARKMODE
	{

		UINT32 LINEPARKMODE_DIRECTED:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEPARKMODE_DIRECTED": "NOT LINEPARKMODE_DIRECTED");
		UINT32 LINEPARKMODE_NONDIRECTED:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEPARKMODE_NONDIRECTED": "NOT LINEPARKMODE_NONDIRECTED");
		UINT32 Reserved1:30 = FormatString("               (%s)", this.ToBitString);
	}
}

struct TRPLINEFORWARDMODEFlag
{
	UINT32 LINEFORWARDMODE
	{
		UINT32 LINEFORWARDMODE_UNCOND:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEFORWARDMODE_UNCOND": "NOT LINEFORWARDMODE_UNCOND");
		UINT32 LINEFORWARDMODE_UNCONDINTERNAL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFORWARDMODE_UNCONDINTERNAL": "NOT LINEFORWARDMODE_UNCONDINTERNAL");
		UINT32 LINEFORWARDMODE_UNCONDEXTERNAL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFORWARDMODE_UNCONDEXTERNAL": "NOT LINEFORWARDMODE_UNCONDEXTERNAL");
		UINT32 LINEFORWARDMODE_UNCONDSPECIFIC:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFORWARDMODE_UNCONDSPECIFIC": "NOT LINEFORWARDMODE_UNCONDSPECIFIC");
		UINT32 LINEFORWARDMODE_BUSY:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEFORWARDMODE_BUSY": "NOT LINEFORWARDMODE_BUSY");
		UINT32 LINEFORWARDMODE_BUSYINTERNAL:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEFORWARDMODE_BUSYINTERNAL": "NOT LINEFORWARDMODE_BUSYINTERNAL");
		UINT32 LINEFORWARDMODE_BUSYEXTERNAL:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEFORWARDMODE_BUSYEXTERNAL": "NOT LINEFORWARDMODE_BUSYEXTERNAL");
		UINT32 LINEFORWARDMODE_BUSYSPECIFIC:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEFORWARDMODE_BUSYSPECIFIC": "NOT LINEFORWARDMODE_BUSYSPECIFIC");
		UINT32 LINEFORWARDMODE_NOANSW:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEFORWARDMODE_NOANSW": "NOT LINEFORWARDMODE_NOANSW");
		UINT32 LINEFORWARDMODE_NOANSWINTERNAL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFORWARDMODE_NOANSWINTERNAL": "NOT LINEFORWARDMODE_NOANSWINTERNAL");
		UINT32 LINEFORWARDMODE_NOANSWEXTERNAL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFORWARDMODE_NOANSWEXTERNAL": "NOT LINEFORWARDMODE_NOANSWEXTERNAL");
		UINT32 LINEFORWARDMODE_NOANSWSPECIFIC:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFORWARDMODE_NOANSWSPECIFIC": "NOT LINEFORWARDMODE_NOANSWSPECIFIC");
		UINT32 LINEFORWARDMODE_BUSYNA:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEFORWARDMODE_BUSYNA": "NOT LINEFORWARDMODE_BUSYNA");
		UINT32 LINEFORWARDMODE_BUSYNAINTERNAL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFORWARDMODE_BUSYNAINTERNAL": "NOT LINEFORWARDMODE_BUSYNAINTERNAL");
		UINT32 LINEFORWARDMODE_BUSYNAEXTERNAL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFORWARDMODE_BUSYNAEXTERNAL": "NOT LINEFORWARDMODE_BUSYNAEXTERNAL");
		UINT32 LINEFORWARDMODE_BUSYNASPECIFIC:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFORWARDMODE_BUSYNASPECIFIC": "NOT LINEFORWARDMODE_BUSYNASPECIFIC");
		UINT32 LINEFORWARDMODE_UNKNOWN:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEFORWARDMODE_UNKNOWN": "NOT LINEFORWARDMODE_UNKNOWN");
		UINT32 LINEFORWARDMODE_UNAVAIL:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEFORWARDMODE_UNAVAIL": "NOT LINEFORWARDMODE_UNAVAIL");
		UINT32 Reserved1:14 = FormatString("                     (%s)", this.ToBitString);
	}
}

struct TRPLINECALLCOMPLCONDFlag
{
	UINT32 LINECALLCOMPLCOND
	{
		UINT32 LINECALLCOMPLCOND_BUSY:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLCOMPLCOND_BUSY": "NOT LINECALLCOMPLCOND_BUSY");
		UINT32 LINECALLCOMPLCOND_NOANSWER:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLCOMPLCOND_NOANSWER": "NOT LINECALLCOMPLCOND_NOANSWER");
		UINT32 Reserved1:30 = FormatString("                 (%s)", this.ToBitString);
	}
}

struct TRPLINECALLCOMPLMODEFlag
{
	UINT32 LINECALLCOMPLMODE
	{
		UINT32 LINECALLCOMPLMODE_CAMPON:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLCOMPLMODE_CAMPON": "NOT LINECALLCOMPLMODE_CAMPON");
		UINT32 LINECALLCOMPLMODE_CALLBACK:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLCOMPLMODE_CALLBACK": "NOT LINECALLCOMPLMODE_CALLBACK");
		UINT32 LINECALLCOMPLMODE_INTRUDE:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLCOMPLMODE_INTRUDE": "NOT LINECALLCOMPLMODE_INTRUDE");
		UINT32 LINECALLCOMPLMODE_MESSAGE:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLCOMPLMODE_MESSAGE": "NOT LINECALLCOMPLMODE_MESSAGE");
		UINT32 Reserved1:28 = FormatString("                 (%s)", this.ToBitString);
	}
}

struct TRPLINEADDRFEATUREFlag
{
	UINT32 LINEADDRFEATURE
	{

		UINT32 LINEADDRFEATURE_FORWARD:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_FORWARD": "NOT LINEADDRFEATURE_FORWARD");
		UINT32 LINEADDRFEATURE_MAKECALL:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_MAKECALL": "NOT LINEADDRFEATURE_MAKECALL");
		UINT32 LINEADDRFEATURE_PICKUP:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_PICKUP": "NOT LINEADDRFEATURE_PICKUP");
		UINT32 LINEADDRFEATURE_SETMEDIACONTROL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEADDRFEATURE_SETMEDIACONTROL": "NOT LINEADDRFEATURE_SETMEDIACONTROL");
		UINT32 LINEADDRFEATURE_SETTERMINAL:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_SETTERMINAL": "NOT LINEADDRFEATURE_SETTERMINAL");
		UINT32 LINEADDRFEATURE_SETUPCONF:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_SETUPCONF": "NOT LINEADDRFEATURE_SETUPCONF");
		UINT32 LINEADDRFEATURE_UNCOMPLETECALL:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_UNCOMPLETECALL": "NOT LINEADDRFEATURE_UNCOMPLETECALL");
		UINT32 LINEADDRFEATURE_UNPARK:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_UNPARK": "NOT LINEADDRFEATURE_UNPARK");
		UINT32 LINEADDRFEATURE_PICKUPHELD:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_PICKUPHELD": "NOT LINEADDRFEATURE_PICKUPHELD");
		UINT32 LINEADDRFEATURE_PICKUPGROUP:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_PICKUPGROUP": "NOT LINEADDRFEATURE_PICKUPGROUP");
		UINT32 LINEADDRFEATURE_PICKUPDIRECT:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_PICKUPDIRECT": "NOT LINEADDRFEATURE_PICKUPDIRECT");
		UINT32 LINEADDRFEATURE_PICKUPWAITING:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_PICKUPWAITING": "NOT LINEADDRFEATURE_PICKUPWAITING");
		UINT32 LINEADDRFEATURE_FORWARDFWD:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_FORWARDFWD": "NOT LINEADDRFEATURE_FORWARDFWD");
		UINT32 LINEADDRFEATURE_FORWARDDND:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEADDRFEATURE_FORWARDDND": "NOT LINEADDRFEATURE_FORWARDDND");
		UINT32 Reserved1:18 = FormatString("                      (%s)", this.ToBitString);
	}
}

struct TRPLINECALLFEATURE2Flag
{
	UINT32 LINECALLFEATURE2
	{
		UINT32 LINECALLFEATURE2_NOHOLDCONFERENCE:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLFEATURE2_NOHOLDCONFERENCE": "NOT LINECALLFEATURE2_NOHOLDCONFERENCE");
		UINT32 LINECALLFEATURE2_ONESTEPTRANSFER:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLFEATURE2_ONESTEPTRANSFER": "NOT LINECALLFEATURE2_ONESTEPTRANSFER");
		UINT32 LINECALLFEATURE2_COMPLCAMPON:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINECALLFEATURE2_COMPLCAMPON": "NOT LINECALLFEATURE2_COMPLCAMPON");
		UINT32 LINECALLFEATURE2_COMPLCALLBACK:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINECALLFEATURE2_COMPLCALLBACK": "NOT LINECALLFEATURE2_COMPLCALLBACK");
		UINT32 LINECALLFEATURE2_COMPLINTRUDE:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLFEATURE2_COMPLINTRUDE": "NOT LINECALLFEATURE2_COMPLINTRUDE");
		UINT32 LINECALLFEATURE2_COMPLMESSAGE:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLFEATURE2_COMPLMESSAGE": "NOT LINECALLFEATURE2_COMPLMESSAGE");
		UINT32 LINECALLFEATURE2_TRANSFERNORM:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLFEATURE2_TRANSFERNORM": "NOT LINECALLFEATURE2_TRANSFERNORM");
		UINT32 LINECALLFEATURE2_TRANSFERCONF:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLFEATURE2_TRANSFERCONF": "NOT LINECALLFEATURE2_TRANSFERCONF");
		UINT32 LINECALLFEATURE2_PARKDIRECT:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINECALLFEATURE2_PARKDIRECT": "NOT LINECALLFEATURE2_PARKDIRECT");
		UINT32 LINECALLFEATURE2_PARKNONDIRECT:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINECALLFEATURE2_PARKNONDIRECT": "NOT LINECALLFEATURE2_PARKNONDIRECT");
		UINT32 Reserved1:22 = FormatString("                        (%s)", this.ToBitString);
	}
}

struct TRPLINECONNECTEDMODEFlag
{
	UINT32 LINECONNECTEDMODE
	{

		UINT32 LINECONNECTEDMODE_ACTIVE:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINECONNECTEDMODE_ACTIVE": "NOT LINECONNECTEDMODE_ACTIVE");
		UINT32 LINECONNECTEDMODE_INACTIVE:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECONNECTEDMODE_INACTIVE": "NOT LINECONNECTEDMODE_INACTIVE");
		UINT32 LINECONNECTEDMODE_ACTIVEHELD:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECONNECTEDMODE_ACTIVEHELD": "NOT LINECONNECTEDMODE_ACTIVEHELD");
		UINT32 LINECONNECTEDMODE_INACTIVEHELD:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECONNECTEDMODE_INACTIVEHELD": "NOT LINECONNECTEDMODE_INACTIVEHELD");
		UINT32 LINECONNECTEDMODE_CONFIRMED:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINECONNECTEDMODE_CONFIRMED": "NOT LINECONNECTEDMODE_CONFIRMED");
		UINT32 Reserved1:27 = FormatString("                     (%s)", this.ToBitString);
	}
}

struct TRPAddressSharingFlags
{
	UINT32 dwAddressSharing
	{
		UINT32 Private:1 = FormatString("      (%s) %s", this.ToBitString,  this ? "The address is private to the user's line. "
		: "LINEADDRESSSHARING_PRIVATE is not set." );
		UINT32 BridgedExcl:1 = FormatString("  (%s) %s", this.ToBitString,  this ? "The address is bridged to one or more other stations. "
		: "LINEADDRESSSHARING_BRIDGEDEXCL is not set." );
		UINT32 BridgedNew:1 = FormatString("   (%s) %s", this.ToBitString,  this ? "The address is bridged with one or more other stations. "
		: "LINEADDRESSSHARING_BRIDGEDNEW is not set." );
		UINT32 BridgedShared:1 = FormatString("(%s) %s", this.ToBitString,  this ? "The address is bridged with one or more other lines."
		: "LINEADDRESSSHARING_BRIDGEDSHARED is not set." );
		UINT32 Monitored:1 = FormatString("    (%s) %s", this.ToBitString,  this ? "This is an address whose idle/busy status is made available to this line."
		: "LINEADDRESSSHARING_MONITORED is not set." );
		UINT32 Reserved1:27 = FormatString("    (%s)", this.ToBitString);
	}
}

struct TRPLINECALLTREATMENTENTRY
{
	UINT32 dwCallTreatmentID;
	UINT32 dwCallTreatmentNameSize;
	UINT32 dwCallTreatmentNameOffset;
}

struct TRPLineAddressCaps
{
	[local.OffsetStart = FrameOffset]
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	UINT32 dwLineDeviceID;
	UINT32 dwAddressSize;
	UINT32 dwAddressOffset;
	UINT32 dwDevSpecificSize;
	UINT32 dwDevSpecificOffset;
	TRPAddressSharingFlags dwAddressSharing;
	TRPLINEADDRESSSTATEFlag dwAddressStates;
	TRPLINECALLINFOSTATEFlag dwCallInfoStates;
	TRPLINECALLPARTYIDFlag dwCallerIDFlags;
	TRPLINECALLPARTYIDFlag dwCalledIDFlags;
	TRPLINECALLPARTYIDFlag dwConnectedIDFlags;
	TRPLINECALLPARTYIDFlag dwRedirectionIDFlags;
	TRPLINECALLPARTYIDFlag dwRedirectingIDFlags;
	TRPLINECALLSTATEFlag dwCallStates;
	TRPLINEDIALTONEMODEFlag dwDialToneModes;
	TRPLINEBUSYMODEFlag dwBusyModes;
	TRPLINESPECIALINFOFlag dwSpecialInfo;
	TRPLINEDISCONNECTMODEFlag dwDisconnectModes;
	UINT32 dwMaxNumActiveCalls;
	UINT32 dwMaxNumOnHoldCalls;
	UINT32 dwMaxNumOnHoldPendingCalls;
	UINT32 dwMaxNumConference;
	UINT32 dwMaxNumTransConf;
	TRPLINEADDRCAPFLAGSFlag dwAddrCapFlags;
	TRPLINECALLFEATUREFlag dwCallFeatures;
	UINT32 dwRemoveFromConfCaps = TRPLINEREMOVEFROMCONFTable(this);
	TRPLINECALLSTATEFlag dwRemoveFromConfState;
	UINT32 dwTransferModes = TRPLineTransferModeTable(this);
	TRPLINEPARKMODEFlag dwParkModes;
	TRPLINEFORWARDMODEFlag dwForwardModes;
	UINT32 dwMaxForwardEntries;
	UINT32 dwMaxSpecificEntries;
	UINT32 dwMinFwdNumRings;
	UINT32 dwMaxFwdNumRings;
	UINT32 dwMaxCallCompletions;
	TRPLINECALLCOMPLCONDFlag dwCallCompletionConds;
	TRPLINECALLCOMPLMODEFlag dwCallCompletionModes;
	UINT32 dwNumCompletionMessages;
	UINT32 dwCompletionMsgTextEntrySize;
	UINT32 dwCompletionMsgTextSize;
	UINT32 dwCompletionMsgTextOffset;
	TRPLINEADDRFEATUREFlag dwAddressFeatures;
	switch
	{
		case Property.TRPGetAddressCapsTSPIVersion >= 0x20000:
			struct
			{
				UINT32 dwPredictiveAutoTransferStates;
				UINT32 dwNumCallTreatments;
				UINT32 dwCallTreatmentListSize;
				UINT32 dwCallTreatmentListOffset;
				UINT32 dwDeviceClassesSize;
				UINT32 dwDeviceClassesOffset;
				UINT32 dwMaxCallDataSize;
				TRPLINECALLFEATURE2Flag dwCallFeatures2;
				UINT32 dwMaxNoAnswerTimeout;
				TRPLINECONNECTEDMODEFlag dwConnectedModes;
				TRPLINECONNECTEDMODEFlag dwOfferingModes;
				UINT32 dwAvailableMediaModes;
			}
	}
	while [FrameOffset < FrameLength]
	{
		[local.VarDataOffset = FrameOffset - local.OffsetStart]
		switch
		{
			case local.VarDataOffset == dwAddressOffset && dwAddressSize > 0: UnicodeString(dwAddressSize /2 ) Address;
			case local.VarDataOffset == dwDevSpecificOffset && dwDevSpecificSize > 0: BLOB(dwDevSpecificSize) DevSpecific;
			case local.VarDataOffset == dwCompletionMsgTextOffset && dwCompletionMsgTextSize > 0: BLOB(dwCompletionMsgTextSize) CompletionMsgText;
			case local.VarDataOffset == dwCallTreatmentListOffset && dwCallTreatmentListSize > 0: TRPLINECALLTREATMENTENTRY CallTreatmentList[dwNumCallTreatments];
			case local.VarDataOffset == dwDeviceClassesOffset && dwDeviceClassesSize > 0: BLOB(dwDeviceClassesSize) DeviceClass;
			default:UINT8 Pad;
		}
	}
}

//22-lGetAddressID
struct TRPLineGetAddressID
{
	UINT32  hLine;
	UINT32 lpdwAddressID ;
	UINT32 dwAddressMode = FormatString("%d - %s", this, TRPLineAddressModeTable(this));
	UINT32 lpsAddress ;
	UINT32 dwSize ;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	switch
	{
		case lpsAddress > 0 && lpsAddress != 0xFFFFFFFF: BLOB( lpsAddress ) Padding;
	}

	switch
	{
		case lpsAddress != 0xFFFFFFFF : UnicodeString( dwSize / 2 ) Address;
	}
}

//23-lGetAddressStatus
struct TRPLINEADDRESSSTATUS
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	UINT32 dwNumInUse;
	UINT32 dwNumActiveCalls;
	UINT32 dwNumOnHoldCalls;
	UINT32 dwNumOnHoldPendCalls;
	TRPLINEADDRFEATUREFlag dwAddressFeatures;
	UINT32 dwNumRingsNoAnswer;
	UINT32 dwForwardNumEntries;
	UINT32 dwForwardSize;
	UINT32 dwForwardOffset;
	UINT32 dwTerminalModesSize;
	UINT32 dwTerminalModesOffset;
	UINT32 dwDevSpecificSize;
	UINT32 dwDevSpecificOffset;
}

struct TRPLineGetAddressStatus
{
	UINT32  hLine;
	UINT32 dwAddressID;
	UINT32 lpAddressStatus;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpAddressStatus > 0 && lpAddressStatus != 0xFFFFFFFF: BLOB(lpAddressStatus) Padding;
			}
			TRPLINEADDRESSSTATUS AddressStatus;
		}
	}
}

//24-lGetAgentActivityList
struct LineAgentActivityEntry
{
	UINT32 dwID;
	UINT32 dwNameSize;
	UINT32 dwNameOffset;
}

struct LineAgentActivityList = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[TrpBufferEntrySize = this]
	UINT32 dwNumEntries;
	UINT32 dwListSize;
	UINT32 dwListOffset;

	LineAgentActivityEntry entry[TrpBufferEntrySize];

	[ParamIndex =0]
	While[ParamIndex < TrpBufferEntrySize]
	{
		[ParamIndex = ParamIndex + 1]
		UnicodeString Name;
	}
}

struct TRPLineGetAgentActivityList
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hLine;
	UINT32 dwAddressID;
	UINT32 lpAgentActivityListContext;
	UINT32 lpAgentActivityList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

//25-lGetAgentCaps
struct TRPLINEAGENTCAPS
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	UINT32 dwAgentHandlerInfoSize;
	UINT32 dwAgentHandlerInfoOffset;
	UINT32 dwCapsVersion;
	UINT32 dwFeatures;
	UINT32 dwStates;
	UINT32 dwNextStates;
	UINT32 dwMaxNumGroupEntries;
	TRPLINEAGENTSTATUSFlag dwAgentStatusMessages;
	UINT32 dwNumAgentExtensionIDs;
	UINT32 dwAgentExtensionIDListSize;
	UINT32 dwAgentExtensionIDListOffset;
	GUID(1) ProxyGUID;
}

struct TRPLineGetAgentCaps
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hLineApp;
	UINT32 dwDeviceID;
	UINT32 dwAddressID;
	UINT32 dwAppAPIVersion;
	UINT32 lpAgentCapsContext;
	UINT32 lpAgentCapsSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
}

//26-lGetAgentGroupList-lineagentgroupentry
struct TRPLineAgentGroupEntry
{
	struct GroupID
	{
		UINT32 dwGroupID1;
		UINT32 dwGroupID2;
		UINT32 dwGroupID3;
		UINT32 dwGroupID4;
	} ;
	UINT32 dwNameSize;
	UINT32 dwNameOffset;
}

struct TRPAgentGroupList = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[TrpBufferEntrySize = this]
	UINT32 dwNumEntries;
	UINT32 dwListSize;
	UINT32 dwListOffset;

	TRPLineAgentGroupEntry entry[TrpBufferEntrySize];

	[ParamIndex =0]
	While[ParamIndex < TrpBufferEntrySize]
	{
		[ParamIndex = ParamIndex + 1]
		UnicodeString Name;
	}
}

struct TRPLineGetAgentGroupList
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hLine;
	UINT32 dwAddressID;
	UINT32 lpAgentGroupListContext;
	UINT32 lpAgentGroupListSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

//27-lGetAgentStatus
struct TRPLineAgentStatus = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[TrpBufferEntrySize = this]
	UINT32 dwNumEntries;
	UINT32 dwGroupListSize;
	UINT32 dwGroupListOffset;
	UINT32 dwState;
	UINT32 dwNextState = FormatString("%d - %s", this, TRPLineAgentStateTable(this));
	UINT32 dwActivityID;
	UINT32 dwActivitySize;
	UINT32 dwActivityOffset;
	UINT32 dwAgentFeatures;
	UINT32 dwValidStates;
	UINT32 dwValidNextStates;

	TRPLineAgentGroupEntry entry[TrpBufferEntrySize];

	[ParamIndex =0]
	While[ParamIndex < TrpBufferEntrySize]
	{
		[ParamIndex = ParamIndex + 1]
		UnicodeString Name;
	}
}

struct TRPLineGetAgentStatus
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hLine;
	UINT32 dwAddressID;
	UINT32 lpAgentStatusContext;
	UINT32 lpAgentStatusSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

//28-lGetAppPriority
//http://msdn.microsoft.com/library/en-us/wcecomm5/html/wce50lrflinegetapppriority.asp?frame=true
struct LineGetAppPriority
{
    //TODO
}

//30-lGetCallInfo
struct TRPLineCallInfo
{
	[local.VarDataStart = FrameOffset]
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	UINT32 hLine;
	UINT32 dwLineDeviceID;
	UINT32 dwAddressID;
	UINT32 dwBearerMode;
	UINT32 dwRate;
	TRPLINEMEDIAMODEFlag dwMediaMode;
	UINT32 dwAppSpecific;
	UINT32 dwCallID;
	UINT32 dwRelatedCallID;
	TRPLINECALLPARAMFLAGSFlag dwCallParamFlags;
	TRPLINECALLSTATEFlag dwCallStates;
	TRPLINEDIGITMODEFlag dwMonitorDigitModes;
	UINT32 dwMonitorMediaModes;
	TRPLINEDIALPARAMS DialParams;
	TRPLINECALLORIGINFlag dwOrigin;
	TRPLINECALLREASONFlag dwReason;
	UINT32 dwCompletionID;
	UINT32 dwNumOwners;
	UINT32 dwNumMonitors;
	UINT32 dwCountryCode;
	UINT32 dwTrunk;
	TRPLINECALLPARTYIDFlag dwCallerIDFlags;
	UINT32 dwCallerIDSize;
	UINT32 dwCallerIDOffset;
	UINT32 dwCallerIDNameSize;
	UINT32 dwCallerIDNameOffset;
	UINT32 dwCalledIDFlags;
	UINT32 dwCalledIDSize;
	UINT32 dwCalledIDOffset;
	UINT32 dwCalledIDNameSize;
	UINT32 dwCalledIDNameOffset;
	TRPLINECALLPARTYIDFlag dwConnectedIDFlags;
	UINT32 dwConnectedIDSize;
	UINT32 dwConnectedIDOffset;
	UINT32 dwConnectedIDNameSize;
	UINT32 dwConnectedIDNameOffset;
	TRPLINECALLPARTYIDFlag dwRedirectionIDFlags;
	UINT32 dwRedirectionIDSize;
	UINT32 dwRedirectionIDOffset;
	UINT32 dwRedirectionIDNameSize;
	UINT32 dwRedirectionIDNameOffset;
	TRPLINECALLPARTYIDFlag dwRedirectingIDFlags;
	UINT32 dwRedirectingIDSize;
	UINT32 dwRedirectingIDOffset;
	UINT32 dwRedirectingIDNameSize;
	UINT32 dwRedirectingIDNameOffset;
	UINT32 dwAppNameSize;
	UINT32 dwAppNameOffset;
	UINT32 dwDisplayableAddressSize;
	UINT32 dwDisplayableAddressOffset;
	UINT32 dwCalledPartySize;
	UINT32 dwCalledPartyOffset;
	UINT32 dwCommentSize;
	UINT32 dwCommentOffset;
	UINT32 dwDisplaySize;
	UINT32 dwDisplayOffset;
	UINT32 dwUserUserInfoSize;
	UINT32 dwUserUserInfoOffset;
	UINT32 dwHighLevelCompSize;
	UINT32 dwHighLevelCompOffset;
	UINT32 dwLowLevelCompSize;
	UINT32 dwLowLevelCompOffset;
	UINT32 dwChargingInfoSize;
	UINT32 dwChargingInfoOffset;
	UINT32 dwTerminalModesSize;
	UINT32 dwTerminalModesOffset;
	UINT32 dwDevSpecificSize;
	UINT32 dwDevSpecificOffset;
	UINT32 dwCallTreatment;
	UINT32 dwCallDataSize;
	UINT32 dwCallDataOffset;
	UINT32 dwSendingFlowspecSize;
	UINT32 dwSendingFlowspecOffset;
	UINT32 dwReceivingFlowspecSize;
	UINT32 dwReceivingFlowspecOffset;
	[Conversation.TRPNegotiateAPIVersionPerFrameTable$[FrameNumber] = Conversation.TRPNegotiateAPIVersion]
	switch(Conversation.TRPNegotiateAPIVersionPerFrameTable$[FrameNumber])
	{
		case 0x00030000:
		case 0x00030001:
			struct
			{
				TRPLINEADDRESSTYPEFlag dwCallerIDAddressType;
				TRPLINEADDRESSTYPEFlag dwCalledIDAddressType;
				TRPLINEADDRESSTYPEFlag dwConnectedIDAddressType;
				UINT32 dwRedirectionIDAddressType;
				UINT32 dwRedirectingIDAddressType;
			}
	}
	while [FrameOffset < FrameLength]
	{
		[local.ptrOffset = FrameOffset - local.VarDataStart]
		switch
		{
			case local.ptrOffset == dwCallerIDOffset && dwCallerIDSize > 0: BLOB(dwCallerIDSize) CallerID;
			case local.ptrOffset == dwCallerIDNameOffset && dwCallerIDNameSize > 0: BLOB(dwCallerIDNameSize) CallerIDName;
			case local.ptrOffset == dwCalledIDOffset && dwCalledIDSize > 0: BLOB(dwCalledIDSize) CalledID;
			case local.ptrOffset == dwCalledIDNameOffset && dwCalledIDNameSize > 0: BLOB(dwCalledIDNameSize) CalledIDName;
			case local.ptrOffset == dwConnectedIDOffset && dwConnectedIDSize > 0: BLOB(dwConnectedIDSize) ConnectedID;
			case local.ptrOffset == dwConnectedIDNameOffset && dwConnectedIDNameSize > 0: BLOB(dwConnectedIDNameSize) ConnectedIDName;
			case local.ptrOffset == dwRedirectionIDOffset && dwRedirectionIDSize > 0: BLOB(dwRedirectionIDSize) RedirectionID;
			case local.ptrOffset == dwRedirectionIDNameOffset && dwRedirectionIDNameSize > 0: BLOB(dwRedirectionIDNameSize) RedirectionIDName;
			case local.ptrOffset == dwRedirectingIDOffset && dwRedirectingIDSize > 0: BLOB(dwRedirectingIDSize) RedirectingID;
			case local.ptrOffset == dwRedirectingIDNameOffset && dwRedirectingIDNameSize > 0: BLOB(dwRedirectingIDNameSize) RedirectingIDName;
			case local.ptrOffset == dwAppNameOffset && dwAppNameSize > 0: UnicodeString(dwAppNameSize / 2) AppName;
			case local.ptrOffset == dwDisplayableAddressOffset && dwDisplayableAddressSize > 0: BLOB(dwDisplayableAddressSize) DisplayableAddress;
			case local.ptrOffset == dwCalledPartyOffset && dwCalledPartySize > 0: BLOB(dwCalledPartySize) CalledParty;
			case local.ptrOffset == dwCommentOffset && dwCommentSize > 0: BLOB(dwCommentSize) Comment;
			case local.ptrOffset == dwDisplayOffset && dwDisplaySize > 0: BLOB(dwDisplaySize) Display;
			case local.ptrOffset == dwUserUserInfoOffset && dwUserUserInfoSize > 0: BLOB(dwUserUserInfoSize) UserUserInfo;
			case local.ptrOffset == dwHighLevelCompOffset && dwHighLevelCompSize > 0: BLOB(dwHighLevelCompSize) HighLevelComp;
			case local.ptrOffset == dwLowLevelCompOffset && dwLowLevelCompSize > 0: BLOB(dwLowLevelCompSize) LowLevelComp;
			case local.ptrOffset == dwChargingInfoOffset && dwChargingInfoSize > 0: BLOB(dwChargingInfoSize) ChargingInfo;
			case local.ptrOffset == dwTerminalModesOffset && dwTerminalModesSize > 0: BLOB(dwTerminalModesSize) TerminalModes;
			case local.ptrOffset == dwDevSpecificOffset && dwDevSpecificSize > 0: BLOB(dwDevSpecificSize) DevSpecific;
			case local.ptrOffset == dwCallDataOffset && dwCallDataSize > 0: BLOB(dwCallDataSize) dwCallDataSize;
			case local.ptrOffset == dwSendingFlowspecOffset && dwSendingFlowspecSize > 0: BLOB(dwSendingFlowspecSize) SendingFlowspec;
			case local.ptrOffset == dwReceivingFlowspecOffset&& dwReceivingFlowspecSize > 0: BLOB(dwReceivingFlowspecSize) ReceivingFlowspec;
			default: UINT8 Pad;
		}
	}
}

struct TRPLineGetCallInfo
{
	HCALL  hCall;
	UINT32 lpCallInfo;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpCallInfo > 0 && lpCallInfo != 0xFFFFFFFF: BLOB(lpCallInfo) Padding;
			}
			TRPLineCallInfo CallInfo;
		}
	}
}

//31-lGetCallStatus
struct TRPLineCallStatus
{
	[Conversation.TRPNegotiateAPIVersionPerFrameTable$[FrameNumber] = Conversation.TRPNegotiateAPIVersion]
	UINT32 dwTotalSize = Conversation.TRPNegotiateAPIVersionPerFrameTable$[FrameNumber];
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	TRPLINECALLSTATEFlag dwCallState;
	switch(UINT32(FrameData, FrameOffset - 4))
	{
		case 0x00000040: TRPLINEBUSYMODEFlag Busy;
		case 0x00000100: TRPLINECONNECTEDMODEFlag Connected;
		case 0x00000008: TRPLINEDIALTONEMODEFlag DialTone;
		case 0x00000002: TRPLINEOFFERINGMODEFlag Offering;
		case 0x00000080: TRPLINESPECIALINFOFlag SpecialInfo;
		case 0x00004000: TRPLINEDISCONNECTMODEFlag Disconnected;
		default:UINT32 Unused;
	}
	TRPLineCallPrivilegeFlag dwCallPrivilege;
	TRPLINECALLFEATUREFlag dwCallFeatures;
	UINT32 dwDevSpecificSize;
	UINT32 dwDevSpecificOffset = Conversation.TRPNegotiateAPIVersion;
	
	switch(Conversation.TRPNegotiateAPIVersionPerFrameTable$[FrameNumber])
	{
		case 0x00020000:
		case 0x00020001:
		case 0x00020002:
		case 0x00030000:
		case 0x00030001:
			struct
			{
				TRPLINECALLFEATURE2Flag dwCallFeatures2;
				SYSTEMTIME tStateEntryTime;
			}
	}
}

struct TRPLineGetCallStatus
{
	HCALL  hCall;
	UINT32 lpCallStatus;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpCallStatus > 0 && lpCallStatus != 0xFFFFFFFF: BLOB(lpCallStatus) Padding;
			}
			switch
			{
				case lpCallStatus != 0xFFFFFFFF: TRPLineCallStatus CallStatus;
			}
		}
	}
}

//32-lGetConfRelatedCalls

struct TRPLineCallList = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[TrpBufferEntrySize = this]
	UINT32 dwCallsNumEntries;
	UINT32 dwCallsSize;
	UINT32 dwCallsOffset;

	hCall entry[TrpBufferEntrySize];
}

//33-lGetCountry- linecountryentry

table TRPLINEDEVCAPSProtocolGUIDTable(value)
{
	switch(value)
	{
		case "{831CE2D6-83B5-11d1-BB5C-00C04FB6809F}": "CLSID TAPIPROTOCOL_PSTN";
		case "{831CE2D7-83B5-11d1-BB5C-00C04FB6809F}": "CLSID TAPIPROTOCOL_H323";
		case "{831CE2D8-83B5-11d1-BB5C-00C04FB6809F}": "CLSID TAPIPROTOCOL_Multicast";
		default:
			FormatString("Unknown GUID: ", value);
	}
}

struct TRPLINEADDRESSMODEFlag
{
	UINT32 LINEADDRESSMODE
	{
		UINT32 LINEADDRESSMODE_ADDRESSID:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEADDRESSMODE_ADDRESSID": "NOT LINEADDRESSMODE_ADDRESSID");
		UINT32 LINEADDRESSMODE_DIALABLEADDR:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEADDRESSMODE_DIALABLEADDR": "NOT LINEADDRESSMODE_DIALABLEADDR");
		UINT32 Reserved1:30 = FormatString("                   (%s)", this.ToBitString);
	}
}

struct TRPLINEBEARERMODEFlag
{
	UINT32 LINEBEARERMODE
	{
		UINT32 LINEBEARERMODE_VOICE:1 = FormatString("           (%s) %s", this.ToBitString, this? "LINEBEARERMODE_VOICE": "NOT LINEBEARERMODE_VOICE");
		UINT32 LINEBEARERMODE_SPEECH:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEBEARERMODE_SPEECH": "NOT LINEBEARERMODE_SPEECH");
		UINT32 LINEBEARERMODE_MULTIUSE:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEBEARERMODE_MULTIUSE": "NOT LINEBEARERMODE_MULTIUSE");
		UINT32 LINEBEARERMODE_DATA:1 = FormatString("            (%s) %s", this.ToBitString, this? "LINEBEARERMODE_DATA": "NOT LINEBEARERMODE_DATA");
		UINT32 LINEBEARERMODE_ALTSPEECHDATA:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEBEARERMODE_ALTSPEECHDATA": "NOT LINEBEARERMODE_ALTSPEECHDATA");
		UINT32 LINEBEARERMODE_NONCALLSIGNALING:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEBEARERMODE_NONCALLSIGNALING": "NOT LINEBEARERMODE_NONCALLSIGNALING");
		UINT32 LINEBEARERMODE_PASSTHROUGH:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEBEARERMODE_PASSTHROUGH": "NOT LINEBEARERMODE_PASSTHROUGH");
		UINT32 LINEBEARERMODE_RESTRICTEDDATA:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEBEARERMODE_RESTRICTEDDATA": "NOT LINEBEARERMODE_RESTRICTEDDATA");
		UINT32 Reserved1:24 = FormatString("                      (%s)", this.ToBitString);
	}
}

struct TRPLINETONEMODEFlag
{
	UINT32 LINETONEMODE
	{
		UINT32 LINETONEMODE_CUSTOM:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINETONEMODE_CUSTOM": "NOT LINETONEMODE_CUSTOM");
		UINT32 LINETONEMODE_RINGBACK:1 = FormatString("(%s) %s", this.ToBitString, this? "LINETONEMODE_RINGBACK": "NOT LINETONEMODE_RINGBACK");
		UINT32 LINETONEMODE_BUSY:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINETONEMODE_BUSY": "NOT LINETONEMODE_BUSY");
		UINT32 LINETONEMODE_BEEP:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINETONEMODE_BEEP": "NOT LINETONEMODE_BEEP");
		UINT32 LINETONEMODE_BILLING:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINETONEMODE_BILLING": "NOT LINETONEMODE_BILLING");
		UINT32 Reserved1:27 = FormatString("            (%s)", this.ToBitString);
	}
}

struct TRPLINEDIGITMODEFlag
{
	UINT32 LINEDIGITMODE
	{
		UINT32 LINEDIGITMODE_PULSE:1 = FormatString("  (%s) %s", this.ToBitString, this? "Uses rotary pulse sequences to signal digits. Valid digits are 0 through 9": " ");
		UINT32 LINEDIGITMODE_DTMF:1 = FormatString("   (%s) %s", this.ToBitString, this? "Uses DTMF tones to signal digits. Valid digits are 0 through 9, *, #, A, B, C, and D": " ");
		UINT32 LINEDIGITMODE_DTMFEND:1 = FormatString("(%s) %s", this.ToBitString, this? "Uses DTMF tones to signal digits and detect the down edges. Valid digits are 0 through 9, *, #, A, B, C, and D": " ");
		UINT32 Reserved1:29 = FormatString("            (%s)", this.ToBitString);
	}
}

struct TRPLINEDEVCAPFLAGSFlag
{
	UINT32 LINEDEVCAPFLAGS
	{
		UINT32 LINEDEVCAPFLAGS_CROSSADDRCONF:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_CROSSADDRCONF": "NOT LINEDEVCAPFLAGS_CROSSADDRCONF");
		UINT32 LINEDEVCAPFLAGS_HIGHLEVCOMP:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_HIGHLEVCOMP": "NOT LINEDEVCAPFLAGS_HIGHLEVCOMP");
		UINT32 LINEDEVCAPFLAGS_LOWLEVCOMP:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_LOWLEVCOMP": "NOT LINEDEVCAPFLAGS_LOWLEVCOMP");
		UINT32 LINEDEVCAPFLAGS_MEDIACONTROL:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_MEDIACONTROL": "NOT LINEDEVCAPFLAGS_MEDIACONTROL");
		UINT32 LINEDEVCAPFLAGS_MULTIPLEADDR:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_MULTIPLEADDR": "NOT LINEDEVCAPFLAGS_MULTIPLEADDR");
		UINT32 LINEDEVCAPFLAGS_CLOSEDROP:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_CLOSEDROP": "NOT LINEDEVCAPFLAGS_CLOSEDROP");
		UINT32 LINEDEVCAPFLAGS_DIALBILLING:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_DIALBILLING": "NOT LINEDEVCAPFLAGS_DIALBILLING");
		UINT32 LINEDEVCAPFLAGS_DIALQUIET:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_DIALQUIET": "NOT LINEDEVCAPFLAGS_DIALQUIET");
		UINT32 LINEDEVCAPFLAGS_DIALDIALTONE:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_DIALDIALTONE": "NOT LINEDEVCAPFLAGS_DIALDIALTONE");
		UINT32 Reserved1:1 = FormatString("                      (%s)", this.ToBitString);
		UINT32 LINEDEVCAPFLAGS_CALLHUB:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_CALLHUB": "NOT LINEDEVCAPFLAGS_CALLHUB");
		UINT32 LINEDEVCAPFLAGS_CALLHUBTRACKING:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_CALLHUBTRACKING": "NOT LINEDEVCAPFLAGS_CALLHUBTRACKING");
		UINT32 LINEDEVCAPFLAGS_PRIVATEOBJECTS:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_PRIVATEOBJECTS": "NOT LINEDEVCAPFLAGS_PRIVATEOBJECTS");
		UINT32 LINEDEVCAPFLAGS_LOCAL:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEDEVCAPFLAGS_LOCAL": "NOT LINEDEVCAPFLAGS_LOCAL");
		UINT32 Reserved2:18 = FormatString("                      (%s)", this.ToBitString);
	}
}

struct TRPLINEANSWERMODEFlag
{
	UINT32 LINEANSWERMODE
	{
		UINT32 LINEANSWERMODE_NONE:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEANSWERMODE_NONE": "NOT LINEANSWERMODE_NONE");
		UINT32 LINEANSWERMODE_DROP:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEANSWERMODE_DROP": "NOT LINEANSWERMODE_DROP");
		UINT32 LINEANSWERMODE_HOLD:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEANSWERMODE_HOLD": "NOT LINEANSWERMODE_HOLD");
		UINT32 Reserved1:29 = FormatString("          (%s)", this.ToBitString);
	}
}

struct TRPLINEDEVSTATEFlag
{
	UINT32 LINEDEVSTATE
	{
		UINT32 LINEDEVSTATE_OTHER:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEDEVSTATE_OTHER": "NOT LINEDEVSTATE_OTHER");
		UINT32 LINEDEVSTATE_RINGING:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEDEVSTATE_RINGING": "NOT LINEDEVSTATE_RINGING");
		UINT32 LINEDEVSTATE_CONNECTED:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEDEVSTATE_CONNECTED": "NOT LINEDEVSTATE_CONNECTED");
		UINT32 LINEDEVSTATE_DISCONNECTED:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEDEVSTATE_DISCONNECTED": "NOT LINEDEVSTATE_DISCONNECTED");
		UINT32 LINEDEVSTATE_MSGWAITON:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEDEVSTATE_MSGWAITON": "NOT LINEDEVSTATE_MSGWAITON");
		UINT32 LINEDEVSTATE_MSGWAITOFF:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEDEVSTATE_MSGWAITOFF": "NOT LINEDEVSTATE_MSGWAITOFF");
		UINT32 LINEDEVSTATE_INSERVICE:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEDEVSTATE_INSERVICE": "NOT LINEDEVSTATE_INSERVICE");
		UINT32 LINEDEVSTATE_OUTOFSERVICE:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEDEVSTATE_OUTOFSERVICE": "NOT LINEDEVSTATE_OUTOFSERVICE");
		UINT32 LINEDEVSTATE_MAINTENANCE:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDEVSTATE_MAINTENANCE": "NOT LINEDEVSTATE_MAINTENANCE");
		UINT32 LINEDEVSTATE_OPEN:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEDEVSTATE_OPEN": "NOT LINEDEVSTATE_OPEN");
		UINT32 LINEDEVSTATE_CLOSE:1 = FormatString("         (%s) %s", this.ToBitString, this? "LINEDEVSTATE_CLOSE": "NOT LINEDEVSTATE_CLOSE");
		UINT32 LINEDEVSTATE_NUMCALLS:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEDEVSTATE_NUMCALLS": "NOT LINEDEVSTATE_NUMCALLS");
		UINT32 LINEDEVSTATE_NUMCOMPLETIONS:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEDEVSTATE_NUMCOMPLETIONS": "NOT LINEDEVSTATE_NUMCOMPLETIONS");
		UINT32 LINEDEVSTATE_TERMINALS:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEDEVSTATE_TERMINALS": "NOT LINEDEVSTATE_TERMINALS");
		UINT32 LINEDEVSTATE_ROAMMODE:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEDEVSTATE_ROAMMODE": "NOT LINEDEVSTATE_ROAMMODE");
		UINT32 LINEDEVSTATE_BATTERY:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEDEVSTATE_BATTERY": "NOT LINEDEVSTATE_BATTERY");
		UINT32 LINEDEVSTATE_SIGNAL:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEDEVSTATE_SIGNAL": "NOT LINEDEVSTATE_SIGNAL");
		UINT32 LINEDEVSTATE_DEVSPECIFIC:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDEVSTATE_DEVSPECIFIC": "NOT LINEDEVSTATE_DEVSPECIFIC");
		UINT32 LINEDEVSTATE_REINIT:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEDEVSTATE_REINIT": "NOT LINEDEVSTATE_REINIT");
		UINT32 LINEDEVSTATE_LOCK:1 = FormatString("          (%s) %s", this.ToBitString, this? "LINEDEVSTATE_LOCK": "NOT LINEDEVSTATE_LOCK");
		UINT32 LINEDEVSTATE_CAPSCHANGE:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEDEVSTATE_CAPSCHANGE": "NOT LINEDEVSTATE_CAPSCHANGE");
		UINT32 LINEDEVSTATE_CONFIGCHANGE:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEDEVSTATE_CONFIGCHANGE": "NOT LINEDEVSTATE_CONFIGCHANGE");
		UINT32 Reserved1:1 = FormatString("                  (%s)", this.ToBitString);
		UINT32 LINEDEVSTATE_COMPLCANCEL:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDEVSTATE_COMPLCANCEL": "NOT LINEDEVSTATE_COMPLCANCEL");
		UINT32 LINEDEVSTATE_REMOVED:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEDEVSTATE_REMOVED": "NOT LINEDEVSTATE_REMOVED");
		UINT32 Reserved2:7 = FormatString("                  (%s)", this.ToBitString);
	}
}

struct TRPLINEFEATUREFlag
{
	UINT32 LINEFEATURE
	{
		UINT32 LINEFEATURE_DEVSPECIFIC:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEFEATURE_DEVSPECIFIC": "NOT LINEFEATURE_DEVSPECIFIC");
		UINT32 LINEFEATURE_DEVSPECIFICFEAT:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFEATURE_DEVSPECIFICFEAT": "NOT LINEFEATURE_DEVSPECIFICFEAT");
		UINT32 LINEFEATURE_FORWARD:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEFEATURE_FORWARD": "NOT LINEFEATURE_FORWARD");
		UINT32 LINEFEATURE_MAKECALL:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEFEATURE_MAKECALL": "NOT LINEFEATURE_MAKECALL");
		UINT32 LINEFEATURE_SETMEDIACONTROL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEFEATURE_SETMEDIACONTROL": "NOT LINEFEATURE_SETMEDIACONTROL");
		UINT32 LINEFEATURE_SETTERMINAL:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEFEATURE_SETTERMINAL": "NOT LINEFEATURE_SETTERMINAL");
		UINT32 LINEFEATURE_SETDEVSTATUS:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEFEATURE_SETDEVSTATUS": "NOT LINEFEATURE_SETDEVSTATUS");
		UINT32 LINEFEATURE_FORWARDFWD:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEFEATURE_FORWARDFWD": "NOT LINEFEATURE_FORWARDFWD");
		UINT32 LINEFEATURE_FORWARDDND:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEFEATURE_FORWARDDND": "NOT LINEFEATURE_FORWARDDND");
		UINT32 Reserved1:23 = FormatString("                  (%s)", this.ToBitString);
	}
}

struct TRPLINEDEVSTATUSFLAGSFlag
{
	UINT32 LINEDEVSTATUSFLAGS
	{
		UINT32 LINEDEVSTATUSFLAGS_CONNECTED:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEDEVSTATUSFLAGS_CONNECTED": "NOT LINEDEVSTATUSFLAGS_CONNECTED");
		UINT32 LINEDEVSTATUSFLAGS_MSGWAIT:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEDEVSTATUSFLAGS_MSGWAIT": "NOT LINEDEVSTATUSFLAGS_MSGWAIT");
		UINT32 LINEDEVSTATUSFLAGS_INSERVICE:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEDEVSTATUSFLAGS_INSERVICE": "NOT LINEDEVSTATUSFLAGS_INSERVICE");
		UINT32 LINEDEVSTATUSFLAGS_LOCKED:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINEDEVSTATUSFLAGS_LOCKED": "NOT LINEDEVSTATUSFLAGS_LOCKED");
		UINT32 Reserved1:28 = FormatString("                   (%s)", this.ToBitString);
	}
}

//34-lGetDevCaps
struct TRPLINEDEVCAPS
{
	[local.VarDataStart = FrameOffset]
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[local.StructEnd = FrameOffset + dwUsedSize - 12]
	UINT32 dwProviderInfoSize;
	UINT32 dwProviderInfoOffset;
	UINT32 dwSwitchInfoSize;
	UINT32 dwSwitchInfoOffset;
	UINT32 dwPermanentLineID;
	UINT32 dwLineNameSize;
	UINT32 dwLineNameOffset;
	UINT32 dwStringFormat = STRINGFORMATTable(this);
	TRPLINEADDRESSMODEFlag dwAddressModes;
	UINT32 dwNumAddresses;
	TRPLINEBEARERMODEFlag dwBearerModes;
	UINT32 dwMaxRate;
	TRPLINEMEDIAMODEFlag dwMediaModes;
	TRPLINETONEMODEFlag dwGenerateToneModes;
	UINT32 dwGenerateToneMaxNumFreq;
	TRPLINEDIGITMODEFlag dwGenerateDigitModes;
	UINT32 dwMonitorToneMaxNumFreq;
	UINT32 dwMonitorToneMaxNumEntries;
	UINT32 dwMonitorDigitModes;
	UINT32 dwGatherDigitsMinTimeout;
	UINT32 dwGatherDigitsMaxTimeout;
	UINT32 dwMedCtlDigitMaxListSize;
	UINT32 dwMedCtlMediaMaxListSize;
	UINT32 dwMedCtlToneMaxListSize;
	UINT32 dwMedCtlCallStateMaxListSize;
	TRPLINEDEVCAPFLAGSFlag dwDevCapFlags;
	UINT32 dwMaxNumActiveCalls;
	TRPLINEANSWERMODEFlag dwAnswerMode;
	UINT32 dwRingModes;
	TRPLINEDEVSTATEFlag dwLineStates;
	UINT32 dwUUIAcceptSize;
	UINT32 dwUUIAnswerSize;
	UINT32 dwUUIMakeCallSize;
	UINT32 dwUUIDropSize;
	UINT32 dwUUISendUserUserInfoSize;
	UINT32 dwUUICallInfoSize;
	TRPLINEDIALPARAMS MinDialParams;
	TRPLINEDIALPARAMS MaxDialParams;
	TRPLINEDIALPARAMS DefaultDialParams;
	UINT32 dwNumTerminals;
	UINT32 dwTerminalCapsSize;
	UINT32 dwTerminalCapsOffset;
	UINT32 dwTerminalTextEntrySize;
	UINT32 dwTerminalTextSize;
	UINT32 dwTerminalTextOffset;
	UINT32 dwDevSpecificSize;
	UINT32 dwDevSpecificOffset;
	TRPLINEFEATUREFlag dwLineFeatures;
	switch
	{
		case TRPTSPIVersion >= 0x20000:
			_struct TAPI20orHigher
			{
				TRPLINEDEVSTATUSFLAGSFlag dwSettableDevStatus;
				UINT32 dwDeviceClassesSize;
				UINT32 dwDeviceClassesOffset;
			}
	}
	switch
	{
		case TRPTSPIVersion >= 0x20002:
			GUID(1) PermanentLineGuid;
	}
	switch
	{
		case TRPTSPIVersion >= 0x30000:
		_struct extra
		{
			UINT32 dwAddressTypes;
			GUID(1) ProtocolGuid = TRPLINEDEVCAPSProtocolGUIDTable(this);
			UINT32 dwAvailableTracking;
		}
	}

	while [FrameOffset < local.StructEnd]
	{
		[local.ptrOffset = FrameOffset - local.VarDataStart]
		switch
		{
			case local.ptrOffset == dwProviderInfoOffset && dwProviderInfoSize > 0: BLOB(dwProviderInfoSize) ProviderInfo;
			case local.ptrOffset == dwSwitchInfoOffset && dwSwitchInfoSize > 0: BLOB(dwSwitchInfoSize) SwitchInfo;
			case local.ptrOffset == dwLineNameOffset && dwLineNameSize > 0: BLOB(dwLineNameSize) LineName;
			case local.ptrOffset == dwDevSpecificOffset && dwDevSpecificSize > 0: BLOB(dwDevSpecificSize) DevSpecific;
			case local.ptrOffset == dwTerminalCapsOffset && dwTerminalCapsSize > 0: TRPLINETERMCAPS TerminalCaps[dwTerminalCapsSize / 12];
			case local.ptrOffset == dwTerminalTextOffset && dwTerminalTextSize > 0: BLOB(dwTerminalTextSize) TerminalText;
			case TRPTSPIVersion >= 0x20000 &&
				 local.ptrOffset == TAPI20orHigher.dwDeviceClassesOffset &&
				 TAPI20orHigher.dwDeviceClassesSize > 0:
				 	_struct
					{
						[local.ClassEnd = FrameOffset + TAPI20orHigher.dwDeviceClassesSize]
						while [FrameOffset < local.ClassEnd]
						{
							AsciiString DeviceId;
						}
						UINT8 NULL;
					}
			default:
				UINT8 Pad;

		}
	}
}

struct TRPLINETERMDEVFlag
{
	UINT32 LINETERMDEV
	{
		UINT32 LINETERMDEV_PHONE:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINETERMDEV_PHONE": "NOT LINETERMDEV_PHONE");
		UINT32 LINETERMDEV_HEADSET:1 = FormatString("(%s) %s", this.ToBitString, this? "LINETERMDEV_HEADSET": "NOT LINETERMDEV_HEADSET");
		UINT32 LINETERMDEV_SPEAKER:1 = FormatString("(%s) %s", this.ToBitString, this? "LINETERMDEV_SPEAKER": "NOT LINETERMDEV_SPEAKER");
		UINT32 Reserved1:29 = FormatString("          (%s)", this.ToBitString);
	}
}
struct TRPLINETERMSHARINGFlag
{
	UINT32 LINETERMSHARING
	{
		UINT32 LINETERMSHARING_PRIVATE:1 = FormatString("   (%s) %s", this.ToBitString, this? "LINETERMSHARING_PRIVATE": "NOT LINETERMSHARING_PRIVATE");
		UINT32 LINETERMSHARING_SHAREDEXCL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINETERMSHARING_SHAREDEXCL": "NOT LINETERMSHARING_SHAREDEXCL");
		UINT32 LINETERMSHARING_SHAREDCONF:1 = FormatString("(%s) %s", this.ToBitString, this? "LINETERMSHARING_SHAREDCONF": "NOT LINETERMSHARING_SHAREDCONF");
		UINT32 Reserved1:29 = FormatString("                 (%s)", this.ToBitString);
	}
}

struct TRPLINETERMCAPS
{
	TRPLINETERMDEVFlag dwTermDev;
	UINT32 dwTermModes = TRPLineTermModeTable(this);
	TRPLINETERMSHARINGFlag dwTermSharing;
}

struct TRPLineGetDevCaps
{
	UINT32 hLineApp;
	UINT32 dwDeviceID ;
	UINT32 dwTSPIVersion;
	[
		TRPTSPIVersion = dwTSPIVersion,
		Conversation.TRPNegotiateAPIVersion = TRPTSPIVersion,
	]
	UINT32 dwExtVersion;
	UINT32 lpLineDevCaps;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpLineDevCaps > 0 && lpLineDevCaps != 0xFFFFFFFF: BLOB(lpLineDevCaps) Padding;
			}
			switch
			{
				case lpLineDevCaps != 0xFFFFFFFF: TRPLINEDEVCAPS DevCaps;
			}
		}
	}
}
//35-lGetDevConfig
struct TRPLineGetDevConfig
{
	UINT32 dwDeviceID;
	UINT32 lpDeviceConfig;
	UINT32 lpszDeviceClass;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	switch
	{
		case Property.MSRPCPType == 0x00:
		_struct TRPRequest
		{
			switch
			{
				case lpszDeviceClass > 0 && lpszDeviceClass != 0xFFFFFFFF: BLOB(lpszDeviceClass) Padding;
			}
			switch
			{
				case lpszDeviceClass != 0xFFFFFFFF: UnicodeString DeviceClass;
			}
		}
	}
	switch
	{
		case Property.MSRPCPType == 0x02:
		_struct TRPResponse
		{
			switch
			{
				case lpDeviceConfig > 0 && lpDeviceConfig != 0xFFFFFFFF: BLOB(lpDeviceConfig) Padding;
			}
			switch
			{
				case lpDeviceConfig != 0xFFFFFFFF: TRPVARSTRING DeviceConfig;
			}
		}
	}
}

//37-lGetID
struct TRPLineGetID
{
	UINT32 hLine;
	UINT32 dwAddressID;
	UINT32 hCall;
	UINT32 dwSelect
	{
		UINT32 LINECALLSELECT_LINE:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLSELECT_LINE": "NOT LINECALLSELECT_LINE");
		UINT32 LINECALLSELECT_ADDRESS:1 = FormatString(" (%s) %s", this.ToBitString, this? "LINECALLSELECT_ADDRESS": "NOT LINECALLSELECT_ADDRESS");
		UINT32 LINECALLSELECT_CALL:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINECALLSELECT_CALL": "NOT LINECALLSELECT_CALL");
		UINT32 LINECALLSELECT_DEVICEID:1 = FormatString("(%s) %s", this.ToBitString, this? "LINECALLSELECT_DEVICEID": "NOT LINECALLSELECT_DEVICEID");
		UINT32 LINECALLSELECT_CALLID:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINECALLSELECT_CALLID": "NOT LINECALLSELECT_CALLID");
		UINT32 Reserved1:27 = FormatString("              (%s)", this.ToBitString);
	}
	UINT32 lpDeviceID;
	UINT32 lpszDeviceClass;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;

	switch
	{
		case property.MSRPCPType == 0x00 && lpszDeviceClass > 0 && lpszDeviceClass != 0xFFFFFFFF:
			BLOB(lpszDeviceClass) Padding;
	}
	switch
	{
		case property.MSRPCPType == 0x00 && lpszDeviceClass != 0xFFFFFFFF: UnicodeString DeviceClass;
	}

	switch
	{
		case property.MSRPCPType == 0x02 && lpDeviceID > 0 && lpDeviceID != 0xFFFFFFFF:
			BLOB(lpDeviceID) Padding;
	}
	switch
	{
		case property.MSRPCPType == 0x02 && lpDeviceID != 0xFFFFFFFF: TRPVARSTRING DeviceID;
	}
}

struct TRPLineAppInfo
{
	UINT32 dwMachineNameSize;
	UINT32 dwMachineNameOffset;
	UINT32 dwUserNameSize;
	UINT32 dwUserNameOffset;
	UINT32 dwModuleFilenameSize;
	UINT32 dwModuleFilenameOffset;
	UINT32 dwFriendlyNameSize;
	UINT32 dwFriendlyNameOffset;
	UINT32 dwMediaModes;
	UINT32 dwAddressID;
	while[FrameOffset < FrameLength]
	{
		[local.VarDataOffset = Frameoffset - Property.TRPLineDevStatusOffsetStart]
		switch
		{
			case local.VarDataOffset == dwMachineNameOffset && dwMachineNameSize > 0:
				UnicodeString(dwMachineNameSize) MachineName;
			case local.VarDataOffset == dwUserNameOffset && dwUserNameSize > 0:
				UnicodeString(dwUserNameSize)	 UserName;
			case local.VarDataOffset == dwModuleFilenameOffset && dwModuleFilenameSize > 0:
				UnicodeString(dwModuleFilenameSize)	 ModuleFilename;
			case local.VarDataOffset == dwFriendlyNameOffset && dwFriendlyNameSize > 0:
				UnicodeString(dwFriendlyNameSize)	 FriendlyName;
			default:
				UINT8 Pad;
		}
	}
}

//38-lGetLineDevStatus
struct TRPLineDevStatus
{
	[Property.TRPLineDevStatusOffsetStart = Frameoffset]
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	UINT32 dwNumOpens;
	UINT32 dwOpenMediaModes;
	UINT32 dwNumActiveCalls;
	UINT32 dwNumOnHoldCalls;
	UINT32 dwNumOnHoldPendCalls;
	UINT32 dwLineFeatures;
	UINT32 dwNumCallCompletions;
	UINT32 dwRingMode;
	UINT32 dwSignalLevel;
	UINT32 dwBatteryLevel;
	UINT32 dwRoamMode;
	UINT32 dwDevStatusFlags;
	UINT32 dwTerminalModesSize;
	UINT32 dwTerminalModesOffset;
	UINT32 dwDevSpecificSize;
	UINT32 dwDevSpecificOffset;
	UINT32 dwAvailableMediaModes;
	UINT32 dwAppInfoSize;
	UINT32 dwAppInfoOffset;
	while[FrameOffset < FrameLength]
	{
		[local.VarDataOffset = Frameoffset - Property.TRPLineDevStatusOffsetStart]
		switch
		{
			case local.VarDataOffset == dwAppInfoOffset && dwAppInfoSize > 0:
				TRPLineAppInfo AppInfo[dwNumOpens];
			case local.VarDataOffset == dwDevSpecificOffset && dwDevSpecificSize > 0:
				Blob(dwDevSpecificSize)	 DevSpecific;
			default:
				UINT8 Pad;
		}
	}
}

struct TRPLineGetLineDevStatus
{
	UINT32  hLine;
	UINT32 lpLineDevStatus;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpLineDevStatus > 0 && lpLineDevStatus != 0xFFFFFFFF: BLOB(lpLineDevStatus) Padding;
			}
			switch
			{
				case lpLineDevStatus != 0xFFFFFFFF: TRPLineDevStatus DevStatus;
			}
		};
	}
}

//39-lGetNewCalls
//struct linecalllist has been defined.
struct TRPLineGetNewCalls
{
	UINT32 hdLine;
	UINT32 dwAddressID;
	UINT32 dwSelect = FormatString("%d - %s", this, TRPLineCallSelectTable(this));//**
	UINT32 pCallList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case pCallList > 0 && pCallList != 0xFFFFFFF: BLOB(pCallList) Padding;
			}
			switch
			{
				case pCallList != 0xFFFFFFF: TRPLineCallList CallList;
			}
		};
	}
}

//40-lGetNumAddressIDs
struct TRPLineGetNumAddressIDs
{
	UINT32  hLine;
	UINT32 lpdwNumAddressIDs;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//41-lGetNumRings

//42-lGetProviderList-LineProviderEntry
struct TRPLineProviderEntry
{
	UINT32 dwPermanentProviderID;
	UINT32 dwProviderFilenameSize;
	UINT32 dwProviderFilenameOffset;
}

struct TRPLineProviderList = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[TrpBufferEntrySize = this]
	UINT32 dwNumProviders;
	UINT32 dwProviderListSize;
	UINT32 dwProviderListOffset;

	TRPLineProviderEntry entry[TrpBufferEntrySize];

	[ParamIndex =0]
	While[ParamIndex < TrpBufferEntrySize]
	{
		[ParamIndex = ParamIndex + 1]
		UnicodeString ProviderFileName;
	}
}
struct TRPLineGetProviderList
{
	UINT32 dwAPIVersion;
	UINT32 lpProviderList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpProviderList > 0 && lpProviderList != 0xFFFFFFFF: BLOB(lpProviderList) Padding;
			}
			switch
			{
				case lpProviderList != 0xFFFFFFFF: TRPLineProviderList ProviderList;
			}
		}
	}
}


//43-lGetRequest
//http://msdn.microsoft.com/library/en-us/tapi/tapi2/linegetrequest.asp?frame=true
struct LineGetRequest
{
    //TODO
}

//44-lGetStatusMessages
//http://msdn.microsoft.com/library/en-us/tapi/tapi2/linegetstatusmessages.asp?frame=true

//45-lHandoff
//http://msdn.microsoft.com/library/en-us/tapi/tapi2/linehandoff.asp?frame=true

//46-lHold
struct TRPLineHold
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//47-lInitialize
struct TRPLineInitialize
{
	UINT32 hLineApp;
	UINT32 hInstance;
	UINT32 InitContext;
	UINT32 dwFriendlyNameOffset;
	UINT32 dwNumDevs;
	UINT32 dwModuleNameOffset;
	UINT32 dwAPIVersion;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	[VarDataStartOffset = FrameOffset]
	while [ FrameOffset < FrameLength ]
	{
		switch
		{
			case FrameOffset - VarDataStartOffset == dwFriendlyNameOffset: UnicodeString FriendlyName;
			case FrameOffset - VarDataStartOffset == dwModuleNameOffset: UnicodeString ModuleName;
			default: TRPTAPI32MsgPadding(VarDataStartOffset,dwFriendlyNameOffset,dwModuleNameOffset) Padding;
		}
	}
}

//48-lMakeCall
struct TRPLineMakeCall
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hLine;
	UINT32 lpParamsContext;
	UINT32 lpszDestAddress;
	UINT32 dwCountryCode;
	UINT32 lpCallParams;
	UINT32 dwCallParamsCodePage;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	[local.VarDataStart = FrameOffset]
	while[FrameOffset < FrameLength]
	{
		[local.ptrOffset = FrameOffset - local.VarDataStart]
		switch
		{
			case local.ptrOffset == lpszDestAddress && lpszDestAddress != 0xFFFFFFFF: UnicodeString DestAddress;
			case local.ptrOffset == lpCallParams && lpCallParams != 0xFFFFFFFF: TRPLINECALLPARAMS CallParams;
			default:
				UINT8 Pad;
		}
	}
}

//49-lMonitorDigits
struct TRPLineMonitorDigits
{
	HCALL  hCall;
	TRPLINEDIGITMODEFlag dwDigitModes;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//50-lMonitorMedia
struct TRPLineMonitorMedia
{
	HCALL  hCall;
	TRPLINEMEDIAMODEFlag dwMediaModes;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//51-lMonitorTones
struct TRPLineMonitorTone
{
	UINT32 dwAppSpecific;
	UINT32 dwDuration;
	UINT32 dwFrequency1;
	UINT32 dwFrequency2;
	UINT32 dwFrequency3;
}

struct TRPLineMonitorTones
{
	HCALL  hCall;
	UINT32 lpToneList;
	UINT32 dwNumEntries;
	UINT32 dwToneListID;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	
	switch
	{
		case lpToneList > 0 && lpToneList != 0xFFFFFFFF: BLOB(lpToneList) Pad;
	}
	switch
	{
		case lpToneList != 0xFFFFFFFF: TRPLineMonitorTone MonitorTone[dwNumEntries/20];
	}
}

//52-lNegotiateAPIVersion
struct TRPLineExtensionId
{
	UINT32 dwExtensionID0;
	UINT32 dwExtensionID1;
	UINT32 dwExtensionID2;
	UINT32 dwExtensionID3;
}

struct TRPLineNegotiateAPIVersion
{
	UINT32 hLineApp;
	UINT32 dwDeviceID;
	UINT32 dwVersion;
	UINT32 dwVersionCurrent;
	UINT32 dwNegotiatedVersion;
	UINT32 ExtensionID;
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	switch
	{
		case Property.MSRPCPType == 0x02 && dwSize > 0:
		_struct VarData
		{
			switch
			{
				case ExtensionID > 0 && ExtensionID != 0xFFFFFFFF: BLOB(ExtensionID) Padding;
			}
			TRPLineExtensionId ExtensionID;
		}
	}
}

//53-lNegotiateExtVersion
struct TRPLineNegotiateExtVersion
{
	UINT32 hLineApp;
	UINT32 dwDeviceID;
	UINT32 dwTSPIVersion;
	UINT32 dwLowVersion;
	UINT32 dwHighVersion;
	UINT32 lpdwExtVersion;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

table TRPTapiNODataTable(value)
{
	switch(value)
	{
		case 0xFFFFFFFF: "TAPI_NO_DATA";
		default:
			FormatString("%u", value);
	}
}

//54-lOpen
struct TRPLineOpen
{
	UINT32 hLineApp;
	UINT32 dwDeviceID;
	UINT32 hLine;
	[Property.TRPLineOpenNegotiatedVersion]
	UINT32 dwNegotiatedVersion;
	UINT32 dwExtVersion;
	UINT32 OpenContext;
	UINT32 dwPrivileges;
	UINT32 dwMediaModes;
	[TRPLineOpenPointerToCallParams = this]
	UINT32 pCallParams = TRPTapiNODataTable(this);
	UINT32 dwAsciiCallParamsCodePage = TRPTapiNODataTable(this);
	UINT32 pGetCallParams = TRPTapiNODataTable(this);
	UINT32 hRemoteLine;
	UINT32 Reserved2;
	switch
	{
		case pCallParams > 0 && pCallParams != 0xFFFFFFFF:blob(pCallParams) padding;
	}
	switch
	{
		case pCallParams != 0xFFFFFFFF:
		TRPLINECALLPARAMS CallPrams;
	}
}

//55-lPark
struct TRPLinePark
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32 hCall;
	TRPLINEPARKMODEFlag dwParkMode;
	UINT32 lpszDirAddress;
	UINT32 lpNonDirAddressContext;
	UINT32 lpNonDirAddress;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	[local.VarDataDirAddressOffset = FrameOffset + lpszDirAddress]
	[local.VarDataNonDirAddress = FrameOffset + lpNonDirAddress]
	switch
	{
		case dwParkMode == 0x00000001 && lpszDirAddress > 0 && lpszDirAddress != 0xFFFFFFFF:
			BLOB(lpszDirAddress) Padding1;
		case dwParkMode == 0x00000002 && lpNonDirAddress > 0 && lpNonDirAddress != 0xFFFFFFFF:
			BLOB(lpNonDirAddress) Padding2;
	}
	switch
	{
		case dwParkMode == 0x00000001 && FrameOffset  == local.VarDataDirAddressOffset:
			UnicodeString DirAddress;
		case dwParkMode == 0x00000002 && FrameOffset  == local.VarDataNonDirAddress:
			TRPVARSTRING NonDirAddress;
	}
}

//56-lPickup
struct TRPLinePickup
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32 hLine;
	UINT32 dwAddressID;
	UINT32 lphCallContext;
	UINT32 lpszDestAddress;
	UINT32 lpszGroupID;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	
	[local.VarDataStart = FrameOffset]
	while[FrameOffset < FrameLength]
	{
		[local.ptrOffset = FrameOffset - local.VarDataStart]
		switch
		{
			case local.ptrOffset == lpszDestAddress: UnicodeString DestAddress;
			case local.ptrOffset == lpszGroupID: UnicodeString GroupID;
			default:
				UINT8 Pad;
		}
	}
}

//57-lPrepareAddToConference
struct TRPLinePrepareAddToConference
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hdConfCall;
	UINT32 lpParamsContext;
	UINT32 lpCallParams;
	UINT32 dwAsciiCallParamsCodePage;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	
	switch
	{
		case lpCallParams > 0 && lpCallParams != 0xFFFFFFFF: BLOB(lpCallParams) Pad;
	}
	switch
	{
		case lpCallParams != 0xFFFFFFFF: TRPLINECALLPARAMS CallParams;
	}
}

//58-lProxyMessage
//http://msdn.microsoft.com/library/en-us/tapi/tapi2/lineproxymessage.asp?frame=true

//59-lProxyResponse
//http://msdn.microsoft.com/library/en-us/tapi/tapi2/lineproxyresponse.asp?frame=true
struct LineProxyResponse
{
    //TODO
}

//60-lRedirect
struct TRPLineRedirect
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32  lpszDestAddress;
	UINT32 dwCountryCode;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	
	switch
	{
		case lpszDestAddress > 0: BLOB(lpszDestAddress) Pad;
	}
	UnicodeString DestAddress;
}
//61-lRegisterRequestRecipient

//62-lReleaseUserUserInfo
struct TRPLineReleaseUserUserInfo
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//63-lRemoveFromConference
struct TRPLineRemoveFromConference
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//64-lSecureCall
struct TRPLineSecureCall
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//65-lSendUserUserInfo
struct TRPLineSendUserUserInfo
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 lpsUserUserInfo;
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	switch
	{
		case lpsUserUserInfo > 0 && lpsUserUserInfo != 0xFFFFFFFF: BLOB(lpsUserUserInfo) Padding;
	}
	switch
	{
		case dwSize > 0 && lpsUserUserInfo != 0xFFFFFFFF: BLOB(dwSize) UserUserInfo;
	}
}

//66-lSetAgentActivity
struct TRPLineSetAgentActivity
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32  hLine;
	UINT32 dwAddressID;
	UINT32 dwActivityID;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}

//67-lSetAgentGroup
struct TRPLineSetAgentGroup
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32  hLine;
	UINT32 dwAddressID;
	UINT32 lpAgentGroupList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	switch
	{
		case lpAgentGroupList > 0 && lpAgentGroupList != 0xFFFFFFFF: BLOB(lpAgentGroupList) Padding;
	}
	switch
	{
		case lpAgentGroupList != 0xFFFFFFFF: TRPagentgrouplist AgentGroupList;
	}	
}

//68-lSetAgentState
struct TRPLineSetAgentState
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32  hLine;
	UINT32 dwAddressID;
	UINT32 dwAgentState = FormatString("%d - %s", this, TRPLineAgentStateTable(this));
	UINT32 dwNextAgentState = FormatString("%d - %s", this, TRPLineAgentStateTable(this));
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
}

//69-lSetAppPriority
//http://msdn.microsoft.com/library/en-us/tapi/tapi2/linesetapppriority.asp?frame=true

//70-lSetAppSpecific
struct TRPLineSetAppSpecific
{
	HCALL  hCall;
	UINT32 dwAppSpecific;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//71-lSetCallData
struct TRPLineSetCallData
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 lpCallData;
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	
	switch
	{
		case lpCallData > 0: BLOB(lpCallData) Pad;
	}
	TRPLineCallInfo CallInfo;
}

//72-lSetCallParams
struct TRPLineSetCallParams
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 dwBearerMode = FormatString("%d - %s", this, TRPLineBearerModeTable(this));
	UINT32 dwMinRate;
	UINT32 dwMaxRate;
	UINT32 lpDialParams;
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	
	switch
	{
		case lpDialParams > 0 && lpDialParams != 0xFFFFFFFF: BLOB(lpDialParams) Pad;
	}
	switch
	{
		case lpDialParams != 0xFFFFFFFF: TRPLINEDIALPARAMS DialParams;
	}
}

//73-lSetCallPrivilege

//74-lSetCallQualityOfService
struct TRPLineSetCallQualityOfService
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 lpSendingFlowspec;
	UINT32 dwSendingFlowspecSize;
	UINT32 lpReceivingFlowspec;
	UINT32 dwReceivingFlowspecSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	
	[local.VarDataStart = FrameOffset]
	while [FrameOffset < FrameLength]
	{
		[local.ptrOffset = FrameOffset - local.VarDataStart]
		switch
		{
			case local.ptrOffset == lpSendingFlowspec: BLOB(dwSendingFlowspecSize) SendingFlowspec;
			case local.ptrOffset == lpReceivingFlowspec: BLOB(dwReceivingFlowspecSize) ReceivingFlowspec;
			default:
				UINT8 Pad;
		}
	}
}

//75-lSetCallTreatment
struct TRPLineSetCallTreatment
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 dwTreatment;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
}

//76-lSetDefaultMediaDetection
struct TRPLineSetDefaultMediaDetection
{
	UINT32  hLine;
	TRPLINEMEDIAMODEFlag dwMediaModes;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//77-lSetDevConfig
struct TRPLineSetDevConfig
{
	UINT32 dwDeviceID;
	INT32 lpDeviceConfig;
	UINT32 dwSize;
	INT32 lpszDeviceClass;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	[local.VarDataStart = FrameOffset]
	switch
	{
		case Property.MSRPCPType == 0x00:
		_struct Request
		{
			switch
			{
				case lpDeviceConfig > 0 && lpDeviceConfig != 0xFFFFFFFF: BLOB(lpDeviceConfig) Padding;
			}
			TRPVARSTRING DeviceConfig;
			switch
			{
				case lpszDeviceClass > 0 && lpszDeviceClass != 0xFFFFFFFF: BLOB(lpszDeviceClass - (FrameOffset - local.VarDataStart)) Padding;
			}
			switch
			{
				case lpszDeviceClass != 0xFFFFFFFF: UnicodeString DeviceClass;
			}
		}
	}
}

//78-lSetLineDevStatus
struct TRPLineSetLineDevStatus
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32  hLine;
	UINT32 dwStatusToChange = FormatString("%d - %s", this, TRPLineDevStatusFlagsTable(this));
	UINT32 fStatus = FormatString("%d - %s", this, this ? "TRUE : Turn on the indicated status bit(s)."
	: "FALSE : Turn off the indicated status bit(s).");
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}

//79-lSetMediaControl
struct TRPLINEMEDIACONTROLDIGIT
{
	UINT32 dwDigit;
	TRPLINEDIGITMODEFlag dwDigitModes;
	TRPLINEMEDIACONTROLFlag dwMediaControl;
}
struct TRPLINEMEDIACONTROLTONE
{
	UINT32 dwAppSpecific;
	UINT32 dwDuration;
	UINT32 dwFrequency1;
	UINT32 dwFrequency2;
	UINT32 dwFrequency3;
	TRPLINEMEDIACONTROLFlag dwMediaControl;
}

struct TRPLINEMEDIACONTROLFlag
{
	UINT32 LINEMEDIACONTROL
	{
		UINT32 LINEMEDIACONTROL_NONE:1 = FormatString("        (%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_NONE": "NOT LINEMEDIACONTROL_NONE");
		UINT32 LINEMEDIACONTROL_START:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_START": "NOT LINEMEDIACONTROL_START");
		UINT32 LINEMEDIACONTROL_RESET:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_RESET": "NOT LINEMEDIACONTROL_RESET");
		UINT32 LINEMEDIACONTROL_PAUSE:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_PAUSE": "NOT LINEMEDIACONTROL_PAUSE");
		UINT32 LINEMEDIACONTROL_RESUME:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_RESUME": "NOT LINEMEDIACONTROL_RESUME");
		UINT32 LINEMEDIACONTROL_RATEUP:1 = FormatString("      (%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_RATEUP": "NOT LINEMEDIACONTROL_RATEUP");
		UINT32 LINEMEDIACONTROL_RATEDOWN:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_RATEDOWN": "NOT LINEMEDIACONTROL_RATEDOWN");
		UINT32 LINEMEDIACONTROL_RATENORMAL:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_RATENORMAL": "NOT LINEMEDIACONTROL_RATENORMAL");
		UINT32 LINEMEDIACONTROL_VOLUMEUP:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_VOLUMEUP": "NOT LINEMEDIACONTROL_VOLUMEUP");
		UINT32 LINEMEDIACONTROL_VOLUMEDOWN:1 = FormatString("  (%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_VOLUMEDOWN": "NOT LINEMEDIACONTROL_VOLUMEDOWN");
		UINT32 LINEMEDIACONTROL_VOLUMENORMAL:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEMEDIACONTROL_VOLUMENORMAL": "NOT LINEMEDIACONTROL_VOLUMENORMAL");
		UINT32 Reserved1:21 = FormatString("                    (%s)", this.ToBitString);
	}
}

struct TRPLINEMEDIACONTROLCALLSTATE
{
	TRPLINECALLSTATEFlag dwCallStates;
	TRPLINEMEDIACONTROLFlag dwMediaControl;
}

struct TRPLineSetMediaControl
{
	UINT32  hLine;
	UINT32 dwAddressID;
	HCALL  hCall;
	UINT32 dwSelect = TRPLineCallSelectTable(this);
	UINT32 lpDigitList;
	UINT32 dwDigitNumEntries;
	UINT32 lpMediaList;
	UINT32 dwMediaNumEntries;
	UINT32 lpToneList;
	UINT32 dwToneNumEntries;
	UINT32 lpCallStateList;
	UINT32 dwCallStateNumEntries;
	UINT32 Reserved2;

	[local.VarDataStart = FrameOffset]
	while [FrameOffset < FrameLength]
	{
		[local.offsetVarData = FrameOffset - local.VarDataStart]
		switch
		{
			case dwDigitNumEntries/12 > 0 && local.offsetVarData == lpDigitList: TRPLINEMEDIACONTROLDIGIT MediaControlDigit[dwDigitNumEntries/12];
			case dwMediaNumEntries/12 > 0 && local.offsetVarData == lpMediaList: TRPLINEMEDIACONTROLMEDIA MediaControlMedia[dwMediaNumEntries/12];
			case dwToneNumEntries/24 > 0 && local.offsetVarData == lpToneList: TRPLINEMEDIACONTROLTONE MediaControlTone[dwToneNumEntries/24];
			case dwCallStateNumEntries/8 > 0 && local.offsetVarData == lpCallStateList: TRPLINEMEDIACONTROLCALLSTATE CallStateNum[dwCallStateNumEntries/8];
			default:
				UINT8 Pad;
		}
	}
}


struct TRPLINEMEDIACONTROLMEDIA
{
	TRPLINEMEDIAMODEFlag dwMdeiaModes;
	UINT32 dwDuration;
	TRPLINEMEDIACONTROLFlag dwMediaControl;

}

//80-lSetMediaMode
struct TRPLineSetMediaMode
{
	HCALL  hCall;
	TRPLINEMEDIAMODEFlag dwMediaMode;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//81-lSetNumRings

//82-lSetStatusMessages
struct TRPLineSetStatusMessages
{
	UINT32  hLine;
	TRPLINEDEVSTATEFlag dwLineStates;
	TRPLINEADDRESSSTATEFlag dwAddressStates;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
}

//83-lSetTerminal
struct TRPLineSetTerminal
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32  hLine;
	UINT32 dwAddressID;
	HCALL  hCall;
	UINT32 dwSelect = FormatString("%d - %s", this, TRPLineCallSelectTable(this));
	UINT32 dwTerminalModes = FormatString("%d - %s", this, TRPLineTermModeTable(this));
	UINT32 dwTerminalID;
	UINT32 bEnable = FormatString("%d - %s", this, this ? "TRUE: dwTerminalID is valid and the specified event classes are routed to or from that terminal."
	: "FALSE : these events are not routed to or from the dwTerminalID." );
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
}

//84-lSetupConference
struct TRPLineSetupConference
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	HCALL  hCall;
	UINT32  hLine;
	UINT32 lphConfCallContext;
	UINT32 lphConsultCallContext;
	UINT32 dwNumParties;
	UINT32 lpCallParams;
	UINT32 dwAsciiCallParamsCodePage;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	switch
	{
		case lpCallParams > 0 && lpCallParams != 0xFFFFFFFF: BLOB(lpCallParams) Padding;
	}
	switch
	{
		case lpCallParams != 0xFFFFFFFF: TRPLINECALLPARAMS CallParams;
	}	
}

//85-lSetupTransfer
struct TRPLineSetupTransfer
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	HCALL  hCall;
	UINT32 lpParamsContext;
	UINT32 lpCallParams;
	UINT32 dwAsciiCallParamsCodePage;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	switch
	{
		case lpCallParams > 0 && lpCallParams != 0xFFFFFFFF: BLOB(lpCallParams) Padding;
	}
	switch
	{
		case lpCallParams != 0xFFFFFFFF: TRPLINECALLPARAMS CallParams;
	}
}

//86-lShutdown
struct TRPLineShutdown
{
	UINT32 hLineApp;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	UINT32 Reserved13;
}

//87-lSwapHold
struct TRPLineSwapHold
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hdActiveCall;
	HCALL  hdHeldCall;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
}

//88-lUncompleteCall
struct TRPLineUncompleteCall
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32  hLine;
	UINT32 dwCompletionID;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
}

//89-lUnhold
struct TRPLineUnhold
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	HCALL  hCall;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//90-lUnpark
struct TRPLineUnpark
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hLine;
	UINT32 dwAddressID;
	UINT32 lphCallContext;
	INT32 lpszDestAddress;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	switch
	{
		case lpszDestAddress > 0 && lpszDestAddress != 0xFFFFFFFF: BLOB(lpszDestAddress) Padding;
	}
	switch
	{
		case lpszDestAddress != 0xFFFFFFFF: UnicodeString DestAddress;
	}
}

// 91-pClose
struct TRPPhoneClose
{
	UINT32 hPhone;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	UINT32 Reserved13;
}

// 92-pDevSpecific
struct TRPPhoneDevSpecific
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32  hPhone;
	UINT32 lpParamsContext;
	UINT32 lpParamsOffset;
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	switch
	{
		case lpParamsOffset > 0 && lpParamsOffset != 0xFFFFFFFF: BLOB(lpParamsOffset) Padding;
	}
	switch
	{
		case dwSize > 0: Blob(dwSize) Params ;
	}
}

// 93-pGetButtonInfo
struct TRPPhoneButtonInfo
{
	[local.VarDataStart = FrameOffset]
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	TRPPHONEBUTTONMODEFlag dwButtonMode;
	UINT32 dwButtonFunction = TRPPhoneButtonFunctionTable(this);
	UINT32 dwButtonTextSize;
	UINT32 dwButtonTextOffset;
	UINT32 dwDevSpecificSize;
	UINT32 dwDevSpecificOffset;
	TRPPHONEBUTTONSTATEFlag dwButtonState;
	
	while [FrameOffset < FrameLength]
	{
		[local.ptrOffset = FrameOffset - local.VarDataStart]
		switch
		{
			case local.ptrOffset == dwButtonTextOffset && dwButtonTextSize > 0: BLOB(dwButtonTextSize) ButtonText;
			case local.ptrOffset == dwDevSpecificOffset && dwDevSpecificSize > 0: BLOB(dwDevSpecificSize) DevSpecific;
			default:
				UINT8 Pad;
		}
	}
}

struct TRPPhoneGetButtonInfo
{
	UINT32 hPhone;
	UINT32 dwButtonLampID;
	UINT32 lpButtonInfo;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpButtonInfo > 0 && lpButtonInfo != 0xFFFFFFFF: BLOB(lpButtonInfo) Padding;
			}
			TRPPhoneButtonInfo BufferInfo;
		};
	}
}

// 94-pGetData
struct TRPPhoneGetData
{
	UINT32 hPhone;
	UINT32 dwDataID;
	UINT32 lpData;
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	switch
	{
		case Property.MSRPCPType == 0x02 && dwSize > 0:
		_struct VarData
		{
			switch
			{
				case lpData > 0 && lpData != 0xFFFFFFFF: BLOB(lpData) Padding;
			}
			BLOB(dwSize) Data;
		};
	}
}
struct TRPPHONEHOOKSWITCHDEVFlag
{
	UINT32 PHONEHOOKSWITCHDEV
	{

		UINT32 PHONEHOOKSWITCHDEV_HANDSET:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEHOOKSWITCHDEV_HANDSET": "NOT PHONEHOOKSWITCHDEV_HANDSET");
		UINT32 PHONEHOOKSWITCHDEV_SPEAKER:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEHOOKSWITCHDEV_SPEAKER": "NOT PHONEHOOKSWITCHDEV_SPEAKER");
		UINT32 PHONEHOOKSWITCHDEV_HEADSET:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEHOOKSWITCHDEV_HEADSET": "NOT PHONEHOOKSWITCHDEV_HEADSET");
		UINT32 Reserved1:29 = FormatString("                 (%s)", this.ToBitString);
	}
}
struct TRPPHONEHOOKSWITCHMODEFlag
{
	UINT32 PHONEHOOKSWITCHMODE
	{
		UINT32 PHONEHOOKSWITCHMODE_ONHOOK:1 = FormatString("    (%s) %s", this.ToBitString, this? "PHONEHOOKSWITCHMODE_ONHOOK": "NOT PHONEHOOKSWITCHMODE_ONHOOK");
		UINT32 PHONEHOOKSWITCHMODE_MIC:1 = FormatString("       (%s) %s", this.ToBitString, this? "PHONEHOOKSWITCHMODE_MIC": "NOT PHONEHOOKSWITCHMODE_MIC");
		UINT32 PHONEHOOKSWITCHMODE_SPEAKER:1 = FormatString("   (%s) %s", this.ToBitString, this? "PHONEHOOKSWITCHMODE_SPEAKER": "NOT PHONEHOOKSWITCHMODE_SPEAKER");
		UINT32 PHONEHOOKSWITCHMODE_MICSPEAKER:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEHOOKSWITCHMODE_MICSPEAKER": "NOT PHONEHOOKSWITCHMODE_MICSPEAKER");
		UINT32 PHONEHOOKSWITCHMODE_UNKNOWN:1 = FormatString("   (%s) %s", this.ToBitString, this? "PHONEHOOKSWITCHMODE_UNKNOWN": "NOT PHONEHOOKSWITCHMODE_UNKNOWN");
		UINT32 Reserved1:27 = FormatString("                     (%s)", this.ToBitString);
	}
}
struct TRPPHONEFEATUREFlag
{
	UINT32 PHONEFEATURE
	{
		UINT32 PHONEFEATURE_GETBUTTONINFO:1 = FormatString("       (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETBUTTONINFO": "NOT PHONEFEATURE_GETBUTTONINFO");
		UINT32 PHONEFEATURE_GETDATA:1 = FormatString("             (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETDATA": "NOT PHONEFEATURE_GETDATA");
		UINT32 PHONEFEATURE_GETDISPLAY:1 = FormatString("          (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETDISPLAY": "NOT PHONEFEATURE_GETDISPLAY");
		UINT32 PHONEFEATURE_GETGAINHANDSET:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETGAINHANDSET": "NOT PHONEFEATURE_GETGAINHANDSET");
		UINT32 PHONEFEATURE_GETGAINSPEAKER:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETGAINSPEAKER": "NOT PHONEFEATURE_GETGAINSPEAKER");
		UINT32 PHONEFEATURE_GETGAINHEADSET:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETGAINHEADSET": "NOT PHONEFEATURE_GETGAINHEADSET");
		UINT32 PHONEFEATURE_GETHOOKSWITCHHANDSET:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEFEATURE_GETHOOKSWITCHHANDSET": "NOT PHONEFEATURE_GETHOOKSWITCHHANDSET");
		UINT32 PHONEFEATURE_GETHOOKSWITCHSPEAKER:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEFEATURE_GETHOOKSWITCHSPEAKER": "NOT PHONEFEATURE_GETHOOKSWITCHSPEAKER");
		UINT32 PHONEFEATURE_GETHOOKSWITCHHEADSET:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEFEATURE_GETHOOKSWITCHHEADSET": "NOT PHONEFEATURE_GETHOOKSWITCHHEADSET");
		UINT32 PHONEFEATURE_GETLAMP:1 = FormatString("             (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETLAMP": "NOT PHONEFEATURE_GETLAMP");
		UINT32 PHONEFEATURE_GETRING:1 = FormatString("             (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETRING": "NOT PHONEFEATURE_GETRING");
		UINT32 PHONEFEATURE_GETVOLUMEHANDSET:1 = FormatString("    (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETVOLUMEHANDSET": "NOT PHONEFEATURE_GETVOLUMEHANDSET");
		UINT32 PHONEFEATURE_GETVOLUMESPEAKER:1 = FormatString("    (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETVOLUMESPEAKER": "NOT PHONEFEATURE_GETVOLUMESPEAKER");
		UINT32 PHONEFEATURE_GETVOLUMEHEADSET:1 = FormatString("    (%s) %s", this.ToBitString, this? "PHONEFEATURE_GETVOLUMEHEADSET": "NOT PHONEFEATURE_GETVOLUMEHEADSET");
		UINT32 PHONEFEATURE_SETBUTTONINFO:1 = FormatString("       (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETBUTTONINFO": "NOT PHONEFEATURE_SETBUTTONINFO");
		UINT32 PHONEFEATURE_SETDATA:1 = FormatString("             (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETDATA": "NOT PHONEFEATURE_SETDATA");
		UINT32 PHONEFEATURE_SETDISPLAY:1 = FormatString("          (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETDISPLAY": "NOT PHONEFEATURE_SETDISPLAY");
		UINT32 PHONEFEATURE_SETGAINHANDSET:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETGAINHANDSET": "NOT PHONEFEATURE_SETGAINHANDSET");
		UINT32 PHONEFEATURE_SETGAINSPEAKER:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETGAINSPEAKER": "NOT PHONEFEATURE_SETGAINSPEAKER");
		UINT32 PHONEFEATURE_SETGAINHEADSET:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETGAINHEADSET": "NOT PHONEFEATURE_SETGAINHEADSET");
		UINT32 PHONEFEATURE_SETHOOKSWITCHHANDSET:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEFEATURE_SETHOOKSWITCHHANDSET": "NOT PHONEFEATURE_SETHOOKSWITCHHANDSET");
		UINT32 PHONEFEATURE_SETHOOKSWITCHSPEAKER:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEFEATURE_SETHOOKSWITCHSPEAKER": "NOT PHONEFEATURE_SETHOOKSWITCHSPEAKER");
		UINT32 PHONEFEATURE_SETHOOKSWITCHHEADSET:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONEFEATURE_SETHOOKSWITCHHEADSET": "NOT PHONEFEATURE_SETHOOKSWITCHHEADSET");
		UINT32 PHONEFEATURE_SETLAMP:1 = FormatString("             (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETLAMP": "NOT PHONEFEATURE_SETLAMP");
		UINT32 PHONEFEATURE_SETRING:1 = FormatString("             (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETRING": "NOT PHONEFEATURE_SETRING");
		UINT32 PHONEFEATURE_SETVOLUMEHANDSET:1 = FormatString("    (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETVOLUMEHANDSET": "NOT PHONEFEATURE_SETVOLUMEHANDSET");
		UINT32 PHONEFEATURE_SETVOLUMESPEAKER:1 = FormatString("    (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETVOLUMESPEAKER": "NOT PHONEFEATURE_SETVOLUMESPEAKER");
		UINT32 PHONEFEATURE_SETVOLUMEHEADSET:1 = FormatString("    (%s) %s", this.ToBitString, this? "PHONEFEATURE_SETVOLUMEHEADSET": "NOT PHONEFEATURE_SETVOLUMEHEADSET");
		UINT32 PHONEFEATURE_GENERICPHONE:1 = FormatString("        (%s) %s", this.ToBitString, this? "PHONEFEATURE_GENERICPHONE": "NOT PHONEFEATURE_GENERICPHONE");
		UINT32 Reserved1:3 = FormatString("                        (%s)", this.ToBitString);
	}
}

// 95-pGetDevCaps
struct TRPPhoneCaps
{
	[local.VarDataStart = FrameOffset]
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[local.StructEnd = FrameOffset + dwUsedSize - 12]
	UINT32 dwProviderInfoSize;
	UINT32 dwProviderInfoOffset;
	UINT32 dwPhoneInfoSize;
	UINT32 dwPhoneInfoOffset;
	UINT32 dwPermanentPhoneID;
	UINT32 dwPhoneNameSize;
	UINT32 dwPhoneNameOffset;
	UINT32 dwStringFormat = STRINGFORMATTable(this);
	TRPPHONESTATEFlag dwPhoneStates;
	TRPPHONEHOOKSWITCHDEVFlag dwHookSwitchDevs;
	TRPPHONEHOOKSWITCHMODEFlag dwHandsetHookSwitchModes;
	TRPPHONEHOOKSWITCHMODEFlag dwSpeakerHookSwitchModes;
	TRPPHONEHOOKSWITCHMODEFlag dwHeadsetHookSwitchModes;
	UINT32 dwVolumeFlags;
	UINT32 dwGainFlags;
	UINT32 dwDisplayNumRows;
	UINT32 dwDisplayNumColumns;
	UINT32 dwNumRingModes;
	UINT32 dwNumButtonLamps;
	UINT32 dwButtonModesSize;
	UINT32 dwButtonModesOffset;
	UINT32 dwButtonFunctionsSize;
	UINT32 dwButtonFunctionsOffset;
	UINT32 dwLampModesSize;
	UINT32 dwLampModesOffset;
	UINT32 dwNumSetData;
	UINT32 dwSetDataSize;
	UINT32 dwSetDataOffset;
	UINT32 dwNumGetData;
	UINT32 dwGetDataSize;
	UINT32 dwGetDataOffset;
	UINT32 dwDevSpecificSize;
	UINT32 dwDevSpecificOffset;
	switch
	{
		case TRPTSPIVersion >= 0x20000:
			_struct Version2orHigher
			{
				UINT32 dwDeviceClassesSize;
				UINT32 dwDeviceClassesOffset;

				TRPPHONEFEATUREFlag dwPhoneFeatures;

				TRPPHONEHOOKSWITCHMODEFlag dwSettableHandsetHookSwitchModes;
				TRPPHONEHOOKSWITCHMODEFlag dwSettableSpeakerHookSwitchModes;
				TRPPHONEHOOKSWITCHMODEFlag dwSettableHeadsetHookSwitchModes;
				TRPPHONEHOOKSWITCHMODEFlag dwMonitoredHandsetHookSwitchModes;
				TRPPHONEHOOKSWITCHMODEFlag dwMonitoredSpeakerHookSwitchModes;
				TRPPHONEHOOKSWITCHMODEFlag dwMonitoredHeadsetHookSwitchModes;
			}
	}
	GUID(1) PermanentPhoneGuid;


	while [FrameOffset < local.StructEnd]
	{
		[local.ptrOffset = FrameOffset - local.VarDataStart]
		switch
		{
			case local.ptrOffset == dwProviderInfoOffset && dwProviderInfoSize > 0: BLOB(dwProviderInfoSize) ProviderInfo;
			case local.ptrOffset == dwPhoneInfoOffset && dwPhoneInfoSize > 0: BLOB(dwPhoneInfoSize) PhoneInfo;
			case local.ptrOffset == dwPhoneNameOffset && dwPhoneNameSize > 0: BLOB(dwPhoneNameSize) PhoneName;
			case local.ptrOffset == dwButtonModesOffset && dwButtonModesSize > 0: TRPPHONEBUTTONMODEFlag ButtonModes[dwButtonModesSize / 4];
			case local.ptrOffset == dwButtonFunctionsOffset && dwButtonFunctionsSize > 0:
				_struct
				{
					[local.FunctionCount = dwButtonFunctionsSize / 4]
					while[local.FunctionCount > 0]
					{
						[local.FunctionCount = local.FunctionCount - 1]
						UINT32 ButtonFunction = TRPPhoneButtonFunctionTable(this);
					}
				}
			case local.ptrOffset == dwLampModesOffset && dwLampModesSize > 0: TRPPHONELAMPMODEFlag LampMode[dwLampModesSize / 4];
			case local.ptrOffset == dwSetDataOffset && dwSetDataSize > 0: BLOB(dwSetDataSize) SetData;
			case local.ptrOffset == dwGetDataOffset && dwGetDataSize > 0: BLOB(dwGetDataSize) GetData;
			case local.ptrOffset == dwDevSpecificOffset && dwDevSpecificSize > 0: BLOB(dwDevSpecificSize) DevSpecific;
			case TRPTSPIVersion >= 0x20000 &&
				 local.ptrOffset ==  Version2orHigher.dwDeviceClassesOffset &&
				 Version2orHigher.dwDeviceClassesSize > 0:
				 	_struct
				 	{
 						[local.ClassEnd = FrameOffset + Version2orHigher.dwDeviceClassesSize]
						while [FrameOffset < local.ClassEnd]
						{
							AsciiString DeviceId;
						}
						UINT8 NULL;
				 	}
		}
	}
}

struct TRPPhoneGetDevCaps
{
	UINT32 hPhoneApp;
	UINT32 dwDeviceID;
	[TRPTSPIVersion = this]
	UINT32 dwTSPIVersion;
	UINT32 dwExtVersion;
	UINT32 lpPhoneCaps;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpPhoneCaps > 0 && lpPhoneCaps != 0xFFFFFFFF: BLOB(lpPhoneCaps) Padding;
			}
			TRPPhoneCaps DevCaps;
		}
	}
}

// 96-pGetDisplay
struct TRPPhoneGetDisplay
{
	UINT32 hPhone;
	UINT32 lpDisplay;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpDisplay > 0 && lpDisplay != 0xFFFFFFFF: BLOB(lpDisplay) Padding;
			}
			TRPVARSTRING Display;
		}
	}
}

// 97-pGetGain
struct TRPPhoneGetGain
{
	UINT32 hPhone;
	UINT32 dwHookSwitchDev = FormatString("%d - %s", this, TRPPhoneHookSwitchDevTable(this));
	UINT32 lpdwGain;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
}

// 98-pGetHookSwitch
struct TRPPhoneGetHookSwitch
{
	UINT32 hPhone;
	UINT32 lpdwHookSwitchDevs;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

// 99-pGetID
struct TRPPhoneGetID
{
	UINT32 hPhone;
	UINT32 lpDeviceID;
	UINT32 lpszDeviceClass;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	switch
	{
		case Property.MSRPCPType == 0x02:
		_struct TRPResponse
		{
			switch
			{
				case lpDeviceID > 0 && lpDeviceID != 0xFFFFFFFF: BLOB(lpDeviceID) Padding;
			}
			TRPVARSTRING DeviceID;
		}

		case Property.MSRPCPType == 0x00:
		_struct TRPRequest
		{
			switch
			{
				case lpszDeviceClass > 0 && lpszDeviceClass != 0xFFFFFFFF: BLOB(lpszDeviceClass) Padding;
			}
			switch
			{
				case lpszDeviceClass != 0xFFFFFFFF: UnicodeString DeviceClass;
			}
		}
	}
}

// 100-pGetIcon
//http://msdn.microsoft.com/library/en-us/tapi/tapi2/phonegeticon.asp?frame=true
struct PhoneGetIcon
{
    //TODO
}

struct TRPPHONELAMPMODEFlag
{
	UINT32 PHONELAMPMODE
	{
		UINT32 PHONELAMPMODE_DUMMY:1 = FormatString("        (%s) %s", this.ToBitString, this? "PHONELAMPMODE_DUMMY": "NOT PHONELAMPMODE_DUMMY");
		UINT32 PHONELAMPMODE_OFF:1 = FormatString("          (%s) %s", this.ToBitString, this? "PHONELAMPMODE_OFF": "NOT PHONELAMPMODE_OFF");
		UINT32 PHONELAMPMODE_STEADY:1 = FormatString("       (%s) %s", this.ToBitString, this? "PHONELAMPMODE_STEADY": "NOT PHONELAMPMODE_STEADY");
		UINT32 PHONELAMPMODE_WINK:1 = FormatString("         (%s) %s", this.ToBitString, this? "PHONELAMPMODE_WINK": "NOT PHONELAMPMODE_WINK");
		UINT32 PHONELAMPMODE_FLASH:1 = FormatString("        (%s) %s", this.ToBitString, this? "PHONELAMPMODE_FLASH": "NOT PHONELAMPMODE_FLASH");
		UINT32 PHONELAMPMODE_FLUTTER:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONELAMPMODE_FLUTTER": "NOT PHONELAMPMODE_FLUTTER");
		UINT32 PHONELAMPMODE_BROKENFLUTTER:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONELAMPMODE_BROKENFLUTTER": "NOT PHONELAMPMODE_BROKENFLUTTER");
		UINT32 PHONELAMPMODE_UNKNOWN:1 = FormatString("      (%s) %s", this.ToBitString, this? "PHONELAMPMODE_UNKNOWN": "NOT PHONELAMPMODE_UNKNOWN");
		UINT32 Reserved1:24 = FormatString("                  (%s)", this.ToBitString);
	}
}

// 101-pGetLamp
struct TRPPhoneGetLamp
{
	UINT32 hPhone;
	UINT32 dwButtonLampID;
	TRPPHONELAMPMODEFlag lpdwLampMode;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
}

// 102-pGetRing
struct TRPPhoneGetRing
{
	UINT32 hPhone;
	UINT32 lpdwRingMode = FormatString("%d - %s", this, this ? this.ToString
	: "The phone is not ringing.");
	UINT32 lpdwVolume = FormatString("%s", TRPVolumeTable(this));
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
}

struct TRPPHONESTATUSFLAGSFlag
{
	UINT32 PHONESTATUSFLAGS
	{
		UINT32 PHONESTATUSFLAGS_CONNECTED:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONESTATUSFLAGS_CONNECTED": "NOT PHONESTATUSFLAGS_CONNECTED");
		UINT32 PHONESTATUSFLAGS_SUSPENDED:1 = FormatString("(%s) %s", this.ToBitString, this? "PHONESTATUSFLAGS_SUSPENDED": "NOT PHONESTATUSFLAGS_SUSPENDED");
		UINT32 Reserved1:30 = FormatString("                 (%s)", this.ToBitString);
	}
}

// 103-pGetStatus
struct TRPPHONESTATUS
{
	[local.Start = FrameOffset]
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	TRPPHONESTATUSFLAGSFlag dwStatusFlags;
	UINT32 dwNumOwners;
	UINT32 dwNumMonitors;
	UINT32 dwRingMode;
	UINT32 dwRingVolume;
	TRPPHONEHOOKSWITCHMODEFlag dwHandsetHookSwitchMode;
	UINT32 dwHandsetVolume;
	UINT32 dwHandsetGain;
	TRPPHONEHOOKSWITCHMODEFlag dwSpeakerHookSwitchMode;
	UINT32 dwSpeakerVolume;
	UINT32 dwSpeakerGain;
	TRPPHONEHOOKSWITCHMODEFlag dwHeadsetHookSwitchMode;
	UINT32 dwHeadsetVolume;
	UINT32 dwHeadsetGain;
	UINT32 dwDisplaySize;
	UINT32 dwDisplayOffset;
	UINT32 dwLampModesSize;
	UINT32 dwLampModesOffset;
	UINT32 dwOwnerNameSize;
	UINT32 dwOwnerNameOffset;
	UINT32 dwDevSpecificSize;
	UINT32 dwDevSpecificOffset;
	switch
	{
		case TRPTSPIVersion >= 0x20000:	TRPPHONEFEATUREFlag dwPhoneFeatures;
	}
	
	while [FrameOffset < FrameLength]
	{
		[local.ptrOffset = FrameOffset - local.Start]
		switch
		{
			case local.ptrOffset == dwDisplayOffset && dwDisplaySize > 0: TRPVARSTRING DisplayInfo;
			case local.ptrOffset == dwLampModesOffset && dwLampModesSize > 0: TRPPHONELAMPMODEFlag LampModes[dwLampModesSize / 4];
			case local.ptrOffset == dwOwnerNameOffset && dwOwnerNameSize > 0: BLOB(dwOwnerNameSize) OwnerName;
			case local.ptrOffset == dwDevSpecificOffset && dwDevSpecificSize > 0: BLOB(dwDevSpecificSize) DevSpecific;
			default:
				UINT8 Pad;
		}
	}
}

// 104-pGetStatusMessages
struct TRPPhoneGetStatus
{
	UINT32 hPhone;
	UINT32 lpPhoneStatus;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	UINT32 Reserved13;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpPhoneStatus > 0 && lpPhoneStatus != 0xFFFFFFFF: BLOB(lpPhoneStatus) Padding;
			}
			TRPPHONESTATUS PhoneStatus;
		};
	}
}

// 105-pGetVolume
struct TRPPhoneGetVolume
{
	UINT32 hPhone;
	UINT32 dwHookSwitchDev = FormatString("%d - %s", this, TRPPhoneHookSwitchDevTable(this));
	UINT32 lpdwVolume;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
}

//106-pInitialize
struct TRPPhoneInitialize
{
	UINT32 hPhoneApp;
	UINT32 hInstance;
	UINT32 InitContext;
	UINT32 dwFriendlyNameOffset;
	UINT32 dwNumDevs;
	UINT32 dwModuleNameOffset;
	UINT32 dwAPIVersion;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;

	[VarDataStartOffset = FrameOffset]
	while [ FrameOffset < FrameLength ]
	{
		switch
		{
			case FrameOffset - VarDataStartOffset == dwFriendlyNameOffset: UnicodeString FriendlyName;
			case FrameOffset - VarDataStartOffset == dwModuleNameOffset: UnicodeString ModuleName;
			default: TRPTAPI32MsgPadding(VarDataStartOffset,dwFriendlyNameOffset,dwModuleNameOffset) Padding;
		}
	}
}

// 107-pOpen
struct TRPPhoneOpen
{
	UINT32 hPhoneApp;
	UINT32 dwDeviceID;
	UINT32 hPhone;
	UINT32 dwNegotiatedVersion;
	UINT32 dwExtVersion;
	UINT32 OpenContext;
	UINT32 dwPrivilege = FormatString("%d - %s", this, TRPPhonePrivilegeTable(this));
	UINT32 hRemotePhone;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
}

// 108-pNegotiateAPIVersion
struct TRPPhoneExtensionId
{
	UINT32 dwExtensionID0;
	UINT32 dwExtensionID1;
	UINT32 dwExtensionID2;
	UINT32 dwExtensionID3;
}

struct TRPPhoneNegotiateAPIVersion
{
	UINT32 hPhoneApp;
	UINT32 dwDeviceIDLocal;
	UINT32 dwVersion;
	UINT32 dwVersionCurrent;
	UINT32 dwNegotiatedVersion;
	UINT32 ExtensionID;
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case ExtensionID > 0 && ExtensionID != 0xFFFFFFFF: BLOB(ExtensionID) Padding;
			}
			switch
			{
				case dwSize > 0: TRPPhoneExtensionId ExtensionID;
			}
		};
	}
}

// 109-pNegotiateExtVersion
struct TRPPhoneNegotiateExtVersion
{
	UINT32 hPhoneApp;
	UINT32 dwDeviceID;
	UINT32 dwTSPIVersion;
	UINT32 dwLowVersion;
	UINT32 dwHighVersion;
	UINT32 lpdwExtVersion;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

// 110-pSetButtonInfo
struct TRPPhoneSetButtonInfo
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hPhone;
	UINT32 dwButtonLampID;
	UINT32 lpButtonInfo;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	TRPPhoneButtonInfo ButtonInfo;
}

// 111-pSetData
struct TRPPhoneSetData
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hPhone;
	UINT32 dwDataID;
	UINT32 lpData;
	[TRPPhoneSetDataSize = this]
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	Blob(dwSize) Data;
}

// 112-pSetDisplay
struct TRPPhoneSetDisplay
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hPhone;
	UINT32 dwRow;
	UINT32 dwColumn;
	UINT32 lpsDisplay;
	UINT32 dwSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	switch
	{
		case lpsDisplay > 0 && lpsDisplay != 0XFFFFFFFF: BLOB( lpsDisplay ) Padding;
	}
	switch
	{
		case dwSize > 0:
			AsciiString(dwSize) Display;
	}
}

// 113-pSetGain
struct TRPPhoneSetGain
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hPhone;
	UINT32 dwHookSwitchDev = FormatString("%d - %s", this, TRPPhoneHookSwitchDevTable(this));
	UINT32 dwGain;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}

// 114-pSetHookSwitch
struct TRPPhoneSetHookSwitch
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hPhone;
	TRPPHONEHOOKSWITCHMODEFlag dwHookSwitchDevs;
	TRPPHONEHOOKSWITCHMODEFlag dwHookSwitchMode;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}

// 115-pSetLamp
struct TRPPhoneSetLamp
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hPhone;
	UINT32 dwButtonLampID;
	TRPPHONELAMPMODEFlag dwLampMode;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}

// 116-pSetRing
struct TRPPhoneSetRing
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hPhone;
	UINT32 dwRingMode ;
	UINT32 dwVolume = FormatString("%s", TRPVolumeTable(this));
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}

// 117-pSetStatusMessages
struct TRPPhoneSetStatusMessages
{
	UINT32 hPhone;
	TRPPHONESTATEFlag dwPhoneStates;
	TRPPHONEBUTTONMODEFlag dwButtonModes;
	TRPPHONEBUTTONSTATEFlag dwButtonStates;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}

// 118-pSetVolume
struct TRPPhoneSetVolume
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hPhone;
	UINT32 dwHookSwitchDev = FormatString("%d - %s", this, TRPPhoneHookSwitchDevTable(this));
	UINT32 dwVolume = FormatString("%s", TRPVolumeTable(this));
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}

// 119-pShutdown
struct TRPPhoneShutdown
{
	UINT32 hPhoneApp;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	UINT32 Reserved13;
}

// 120-tRequestDrop
// The tapiRequestDrop function is nonfunctional and obsolete for all classes of Windows-based applications. It should not be used.

// 121-tRequestMakeCall
//http://msdn.microsoft.com/library/en-us/tapi/tapi2/tapirequestmakecall.asp?frame=true
struct TapiRequestMakeCall
{
	NdrStringPtr lpszDestAddress;
	NdrStringPtr lpszAppName;
	NdrStringPtr lpszCalledParty;
	NdrStringPtr lpszComment;
}

// 122-tRequestMediaCall
//The tapiRequestMediaCall function was never implemented in any version of TAPI. This function is obsolete and should not be used.

// 123-tReadLocations
// 124-tWriteLocations
// 125-tAllocNewID
// 126-tPerformance

//127-lConditionalMediaDetection
struct TRPLineConditionalMediaDetection
{
	UINT32 hLine;
	TRPLINEMEDIAMODEFlag dwMediaModes;
	UINT32 lpCallParams;
	UINT32 dwAsciiCallParamsCodePage;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	switch
	{
		case lpCallParams > 0 && lpCallParams != 0xFFFFFFFF: BLOB(lpCallParams) Padding;
	}
	switch
	{
		case lpCallParams != 0xFFFFFFFF: TRPLINECALLPARAMS CallParams;
	}
}

//128-lSelectExtVersion
struct TRPLineSelectExtVersion
{
	UINT32 hline;
	UINT32 dwExtVersion;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}


//129-pSelectExtVersion
struct TRPPhoneSelectExtVersion
{
	UINT32 hPhone;
	UINT32 dwExtVersion;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
}

//130-xNegotiateAPIVersionForAllDevices
struct TRPNegotiateAPIVersionForAllDevices
{
	UINT32 hLineApp;
	UINT32 dwNumLineDevices;
	UINT32 dwNumPhoneDevices;
	UINT32 dwAPIHighVersion;
	UINT32 dwLineAPIVersionListOffset;
	UINT32 dwLineAPIVersionListSize;
	UINT32 dwLineExtensionIDListOffset;
	UINT32 dwLineExtensionIDListSize;
	UINT32 dwPhoneAPIVersionListOffset;
	UINT32 dwPhoneAPIVersionListSize;
	UINT32 dwPhoneExtensionIDListOffset;
	UINT32 dwPhoneExtensionIDListSize;
	UINT32 Reserved2;
	[VarDataStartOffset = FrameOffset]
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			while [ FrameOffset < FrameLength ]
			{
				switch
				{
					case FrameOffset - VarDataStartOffset == dwLineAPIVersionListOffset: UINT32 LineAPIVersion[dwLineAPIVersionListSize/4];
					case FrameOffset - VarDataStartOffset == dwLineExtensionIDListOffset: TRPLineExtensionId LineExtensionID[dwLineExtensionIDListSize/16];
					case FrameOffset - VarDataStartOffset == dwPhoneAPIVersionListOffset: UINT32 PhoneAPIVersion[dwPhoneAPIVersionListSize/4];
					case FrameOffset - VarDataStartOffset == dwPhoneExtensionIDListOffset: TRPPhoneExtensionId PhoneExtensionIDList[dwPhoneExtensionIDListSize/16];
					default: UINT8 Padding;
				}
			}
		}
	}
}

//131-mGetAvailableProviders-AvailableProviderEntry
struct TRPAvailableProviderEntry
{
	UINT32 dwFileNameSize;
	UINT32 dwFileNameOffset;
	UINT32 dwFriendlyNameSize;
	UINT32 dwFriendlyNameOffset;
	UINT32 dwOptions
	{
		UINT32 INSTALLABLE:1 = FormatString(" (%s) %s", this.ToBitString, this? "AVAILABLEPROVIDER_INSTALLABLE": "");
		UINT32 CONFIGURABLE:1 = FormatString("(%s) %s", this.ToBitString, this? "AVAILABLEPROVIDER_CONFIGURABLE": "");
		UINT32 REMOVABLE:1 = FormatString("   (%s) %s", this.ToBitString, this? "AVAILABLEPROVIDER_REMOVABLE": "");
		UINT32 Reserved1:29 = FormatString("   (%s)", this.ToBitString);
	}
}

struct TRPAvailableProviderList = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[TrpBufferEntrySize = this]
	UINT32 dwNumProviderListEntries;
	UINT32 dwProviderListSize;
	UINT32 dwProviderListOffset;

	TRPAvailableProviderEntry entry[TrpBufferEntrySize];

	[ParamIndex =0]
	While[ParamIndex < TrpBufferEntrySize]
	{
		[ParamIndex = ParamIndex + 1]
		UnicodeString FileName;
		UnicodeString FriendlyName;
	}
}

struct TRPMMCGetAvailableProviders
{
	UINT32 hLineApp;
	UINT32 lpProviderList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpProviderList > 0 && lpProviderList != 0xFFFFFFFF: BLOB(lpProviderList) Padding;
			}
			TRPAvailableProviderList ProviderList;
		};
	}
}

//132-mGetLineInfo
struct TRPDEVICEINFO
{
	[ParamIndex = ParamIndex + 1]
	UINT32 dwPermanentDeviceID;
	UINT32 dwProviderID;
	[Global.TrpDeviceNameSize$[makebyteArray(FrameNumber, ParamIndex)]]
	UINT32 dwDeviceNameSize;
	UINT32 dwDeviceNameOffset;
	[Global.TrpAddressesSize$[makebyteArray(FrameNumber, ParamIndex)]]
	UINT32 dwAddressesSize;
	UINT32 dwAddressesOffset;
	[Global.TrpDomainUserNamesSize$[makebyteArray(FrameNumber, ParamIndex)]]
	UINT32 dwDomainUserNamesSize;
	UINT32 dwDomainUserNamesOffset;
	[Global.TrpFriendlyUserNamesSize$[makebyteArray(FrameNumber, ParamIndex)]]
	UINT32 dwFriendlyUserNamesSize;
	UINT32 dwFriendlyUserNamesOffset;
}

struct TRPDEVICEINFOLIST = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[TrpBufferEntrySize = this]
	UINT32 dwNumDeviceInfoEntries;
	UINT32 dwDeviceInfoSize;
	UINT32 dwDeviceInfoOffset;

	[ParamIndex =0]
	TRPDEVICEINFO deviceEntry[TrpBufferEntrySize];

	[ParamIndex =0]
	While[ParamIndex < TrpBufferEntrySize]
	{
		[ParamIndex = ParamIndex + 1]
		switch
		{
			case Global.TrpDeviceNameSize$[makebyteArray(FrameNumber, ParamIndex)] > 0:
			UnicodeString(Global.TrpDeviceNameSize$[makebyteArray(FrameNumber, ParamIndex)]/2) DeviceName;
		}
		switch
		{
			case Global.TrpAddressesSize$[makebyteArray(FrameNumber, ParamIndex)] > 0:
			UnicodeString(Global.TrpAddressesSize$[makebyteArray(FrameNumber, ParamIndex)]/2) Addresses;
		}
		switch
		{
			case Global.TrpDomainUserNamesSize$[makebyteArray(FrameNumber, ParamIndex)] > 0:
			UnicodeString(Global.TrpDomainUserNamesSize$[makebyteArray(FrameNumber, ParamIndex)]/2) DomainUserNames;
		}
		switch
		{
			case Global.TrpFriendlyUserNamesSize$[makebyteArray(FrameNumber, ParamIndex)] > 0:
			UnicodeString(Global.TrpFriendlyUserNamesSize$[makebyteArray(FrameNumber, ParamIndex)]/2) FriendlyUserNames;
		}

	}
}
struct TRPMMCGetLineInfo
{
	UINT32 hMmcApp;
	UINT32 lpDeviceInfoList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpDeviceInfoList > 0 && lpDeviceInfoList != 0xFFFFFFFF: BLOB(lpDeviceInfoList) Padding;
			}
			TRPDEVICEINFOLIST DeviceInfoList;
		};
	}
}

//133-mGetPhoneInfo
struct TRPMMCGetPhoneInfo
{
	UINT32 hMmcApp;
	UINT32 lpDeviceInfoList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpDeviceInfoList > 0 && lpDeviceInfoList != 0xFFFFFFFF: BLOB(lpDeviceInfoList) Padding;
			}
			TRPDEVICEINFOLIST DeviceInfoList;
		};
	}
}

//134-mGetServerConfig
struct TRPMMCGetServerConfig
{
	UINT32 hLineApp;
	UINT32 lpProviderList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpProviderList > 0 && lpProviderList != 0xFFFFFFFF: BLOB(lpProviderList) Padding;
			}
			TAPISERVERCONFIG ServerConfig;
		};
	}
}

struct TAPISERVERCONFIG
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	UINT32 dwFlags
	{
		UINT32 ISSERVER:1 = FormatString("      (%s) %s", this.ToBitString, this? "TAPISERVERCONFIGFLAGS_ISSERVER": " ");
		UINT32 ENABLESERVER:1 = FormatString("  (%s) %s", this.ToBitString, this? "TAPISERVERCONFIGFLAGS_ENABLESERVER": " ");
		UINT32 SETACCOUNT:1 = FormatString("    (%s) %s", this.ToBitString, this? "TAPISERVERCONFIGFLAGS_SETACCOUNT": " ");
		UINT32 LOCKMMCWRITE:1 = FormatString("  (%s) %s", this.ToBitString, this? "TAPISERVERCONFIGFLAGS_LOCKMMCWRITE": " ");
		UINT32 UNLOCKMMCWRITE:1 = FormatString("(%s) %s", this.ToBitString, this? "TAPISERVERCONFIGFLAGS_UNLOCKMMCWRITE": " ");
		UINT32 Rererved : 27 = FormatString("    (%s)", this.ToBitString);
	}
	UINT32 dwDomainNameSize;
	UINT32 dwDomainNameOffset;
	UINT32 dwUserNameSize;
	UINT32 dwUserNameOffset;
	UINT32 dwPasswordSize;
	UINT32 dwPasswordOffset;
	UINT32 dwAdministratorsSize;
	UINT32 dwAdministratorsOffset;
}

//135
struct TRPMMCSetLineInfo
{
	UINT32 hMmcApp;
	UINT32 lpDeviceInfoList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpDeviceInfoList > 0 && lpDeviceInfoList != 0xFFFFFFFF: TRPDEVICEINFOLIST InfoList;
			}
		}
	}
}

//136-SetPhoneInfo
struct TRPMMCSetPhoneInfo
{
	UINT32 hMmcApp;
	UINT32 lpDeviceInfoList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpDeviceInfoList > 0 && lpDeviceInfoList != 0xFFFFFFFF: TRPDEVICEINFOLIST InfoList;
			}
		}
	}
}

//137-mSetServerConfig
struct TRPMMCSetServerConfig
{
	UINT32 hLineApp;
	UINT32 dwServerConfigOffset;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case dwServerConfigOffset > 0 && dwServerConfigOffset != 0xFFFFFFFF: BLOB(dwServerConfigOffset) Padding;
			}
			TAPISERVERCONFIG ServerConfig;
		}
	}
}

//138-lMSPIdentify 
//139-lReceiveMSPData

//140-lGetCallHubTracking
struct TRPLINECALLHUBTRACKINGFlag
{
	UINT32 LINECALLHUBTRACKING
	{
		UINT32 LINECALLHUBTRACKING_PROVIDERLEVEL:1= FormatString("(%s) %s", this.ToBitString, this? "Call hubs are tracked at the service provider level. Call-by-call changes must be reported": " ");
		UINT32 LINECALLHUBTRACKING_ALLCALLS:1 = FormatString("    (%s) %s", this.ToBitString, this? "Call-hub tracking is provided at the call level": " ");
		UINT32 Reserved1:30 = FormatString("                       (%s)", this.ToBitString);
	}
}
struct TRPLINECALLHUBTRACKINGINFO
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	TRPLINECALLHUBTRACKINGFlag dwAvailableTracking;
	UINT32 dwCurrentTracking;
}

struct TRPLineGetCallHubTracking
{
	UINT32 hLine;
	UINT32 lpTrackingInfo;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpTrackingInfo > 0 && lpTrackingInfo != 0xFFFFFFFF: BLOB(lpTrackingInfo) Padding;
			}
			switch
			{
				case lpTrackingInfo != 0xFFFFFFFF: TRPLINECALLHUBTRACKINGINFO TrackingInfo;
			}
		};
	}
}

//141-lGetCallIDs
struct TRPLineGetCallIDs
{
	HCALL hCall;
	UINT32 lpdwAddressID;
	UINT32 lpdwCallID;
	UINT32 lpdwRelatedCallID;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}

//142-lGetHubRelatedCalls
//http://www.df.unipi.it/~flaminio/laboratori/lcc/include/tapi.h
//  LONG WINAPI
//  lineGetHubRelatedCalls(
//    HCALLHUB hCallHub,
//    HCALL hCall,
//    LPLINECALLLIST lpCallList
//  );

//143-lSetCallHubTracking
struct TRPLineSetCallHubTracking
{
	UINT32 hLine;
	UINT32 lpTrackingInfo;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	UINT32 Reserved11;
	UINT32 Reserved12;
	
	switch
	{
		case lpTrackingInfo > 0: BLOB(lpTrackingInfo) Pad;
	}
	TRPLINECALLHUBTRACKINGINFO TrackingInfo;
}

//144-xPrivateFactoryIdentify
//145-lDevSpecificEx

//146-lCreateAgent
struct TRPLineCreateAgent
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32 hLine;
	INT32 lpszAgentID;
	INT32 lpszAgentPIN;
	UINT32 lpParamsContext;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	[VarDataStartOffset = FrameOffset]
	while [ FrameOffset < FrameLength ]
	{
		switch
		{
			case FrameOffset - VarDataStartOffset == lpszAgentPIN: UnicodeString AgentPIN;
			case FrameOffset - VarDataStartOffset == lpszAgentID: UnicodeString AgentID;
			default: TRPTAPI32MsgPadding(VarDataStartOffset,lpszAgentPIN,lpszAgentID) Padding;
		}
	}
}

//147-lCreateAgentSession
struct TRPLineCreateAgentSession
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32 hLine;
	UINT32 hAgent;
	INT32 lpszAgentPIN;
	UINT32 dwWorkingAddressID;
	INT32 lpGroupID;
	[TrpLineCreateAgentSessionGroupIDSize = this]
	UINT32 dwSize;
	UINT32 lphAgentSessionContext;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	[VarDataStartOffset = FrameOffset]
	while [ FrameOffset < FrameLength ]
	{
		switch
		{
			case FrameOffset - VarDataStartOffset == lpszAgentPIN: UnicodeString AgentPIN;
			case FrameOffset - VarDataStartOffset == lpGroupID:
			switch( dwSize )
			{
				case 16: GUID(true) GroupID;
				default: BLOB(dwSize) UnknownGroupID;
			}
			default: TRPTAPI32MsgPadding(VarDataStartOffset,lpszAgentPIN,lpGroupID) Padding;
		}
	}
}
//148-lGetAgentInfo
struct TRPLINEAGENTINFO
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	TRPLINEAGENTSTATEEXFlag dwAgentState;
	TRPLINEAGENTSTATEEXFlag dwNextAgentState;
	UINT32 dwMeasurementPeriod;
	TRPCURRENCY cyOverallCallRate;
	UINT32 dwNumberOfACDCalls;
	UINT32 dwNumberOfIncomingCalls;
	UINT32 dwNumberOfOutgoingCalls;
	UINT32 dwTotalACDTalkTime;
	UINT32 dwTotalACDCallTime;
	UINT32 dwTotalACDWrapUpTime;
}

struct TRPLineGetAgentInfo
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32 hLine;
	UINT32 hAgent;
	UINT32 lpAgentInfoContext;
	UINT32 lpAgentInfo;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

//149-lGetAgentSessionInfo
struct TRPLINEAGENTSESSIONINFO
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	UINT32 dwAgentSessionState;
	UINT32 dwNextAgentSessionState;
	SystemTime dateSessionStartTime;
	UINT32 dwSessionDuration;
	UINT32 dwNumberOfCalls;
	UINT32 dwTotalTalkTime;
	UINT32 dwAverageTalkTime;
	UINT32 dwTotalCallTime;
	UINT32 dwAverageCallTime;
	UINT32 dwTotalWrapUpTime;
	UINT32 dwAverageWrapUpTime;
	TRPCURRENCY cyACDCallRate;
	UINT32 dwLongestTimeToAnswer;
	UINT32 dwAverageTimeToAnswer;
}

struct TRPLineGetAgentSessionInfo
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32 hLine;
	UINT32 hAgentSession;
	UINT32 lpAgentSessionInfoContext;
	UINT32 lpAgentSessionInfo;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

//150-lGetAgentSessionList-lineagentsessionentry 
struct TRPLINEAGENTSESSIONENTRY
{
	UINT32 hAgentSession;
	UINT32 hAgent;
	GUID(1) GroupID;
	UINT32 dwWorkingAddressID;
}

struct TRPLINEAGENTSESSIONLIST = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[TrpBufferEntrySize = this]
	UINT32 dwNumEntries;
	UINT32 dwListSize;
	UINT32 dwListOffset;

	TRPLINEAGENTSESSIONENTRY entry[TrpBufferEntrySize];
}

struct TRPLineGetAgentSessionList
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32 hLine;
	UINT32 hAgent;
	UINT32 lpAgentSessionListContext;
	UINT32 lpAgentSessionList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

//151-lGetQueueInfo
struct TRPLineQueueInfo
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	UINT32 dwMeasurementPeriod;
	UINT32 dwTotalCallsQueued;
	UINT32 dwCurrentCallsQueued;
	UINT32 dwTotalCallsAbandoned;
	UINT32 dwTotalCallsFlowedIn;
	UINT32 dwTotalCallsFlowedOut;
	UINT32 dwLongestEverWaitTime;
	UINT32 dwCurrentLongestWaitTime;
	UINT32 dwAverageWaitTime;
	UINT32 dwFinalDisposition;
}

struct TRPLineGetQueueInfo
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32 hLine;
	UINT32 dwQueueID;
	UINT32 lpQueueInfoContext;
	UINT32 lpQueueInfo;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

//152-lGetGroupList
struct TRPLineGetGroupList
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 lpContext;
	UINT32 hLine;
	UINT32 lpGroupListContext;
	UINT32 lpAgentGroupListSize;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
}

//153-lGetQueueList
struct TRPLINEQUEUEENTRY
{
	UINT32 dwQueueID;
	UINT32 dwNameSize;
	UINT32 dwNameOffset;
}

struct TRPLINEQUEUELIST = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[TrpBufferEntrySize = this]
	UINT32 dwNumEntries;
	UINT32 dwListSize;
	UINT32 dwListOffset;

	TRPLINEQUEUEENTRY entry[TrpBufferEntrySize];
}

struct TRPLineGetQueueList
{
	[post.conversation.tcp.TrpRequestedIdTable$[dwRequestID > 0? dwRequestID: -1] = property.TrpBufferReqFunc]
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hLine;
	UINT32 pGroupID;
	UINT32 cbGUID;
	UINT32 lpQueueListContext;
	UINT32 lpQueueList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	[local.VarDataOffset = FrameOffset]
	while[FrameOffset < FrameLength]
	{
		switch
		{
			case FrameOffset - local.VarDataOffset == pGroupID:GUID(false) GroupID;
			default:UINT8 Pad;
		}
	}
}

//154-lSetAgentMeasurementPeriod
struct TRPLineSetAgentMeasurementPeriod
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hLine;
	UINT32 hAgent;
	UINT32 dwMeasurementPeriod;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}

//155-lSetAgentSessionState
struct TRPLineSetAgentSessionState
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hLine;
	UINT32 hAgentSession;
	UINT32 dwAgentState = this == 0 ? "leave the agent session state unchanged and modify only the next state" : TRPLineAgentSessionStateTable(this);
	UINT32 dwNextAgentState = TRPLineAgentSessionStateTable(this);
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
}

//156-lSetQueueMeasurementPeriod
struct TRPLineSetQueueMeasurementPeriod
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32 hLine;
	UINT32 dwQueueID;
	UINT32 dwMeasurementPeriod;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
}
struct TRPLINEAGENTSTATEEXFlag
{
	UINT32 LINEAGENTSTATEEX
	{
		UINT32 LINEAGENTSTATEEX_NOTREADY:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEAGENTSTATEEX_NOTREADY": "NOT LINEAGENTSTATEEX_NOTREADY");
		UINT32 LINEAGENTSTATEEX_READY:1 = FormatString("       (%s) %s", this.ToBitString, this? "LINEAGENTSTATEEX_READY": "NOT LINEAGENTSTATEEX_READY");
		UINT32 LINEAGENTSTATEEX_BUSYACD:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEAGENTSTATEEX_BUSYACD": "NOT LINEAGENTSTATEEX_BUSYACD");
		UINT32 LINEAGENTSTATEEX_BUSYINCOMING:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEAGENTSTATEEX_BUSYINCOMING": "NOT LINEAGENTSTATEEX_BUSYINCOMING");
		UINT32 LINEAGENTSTATEEX_BUSYOUTGOING:1 = FormatString("(%s) %s", this.ToBitString, this? "LINEAGENTSTATEEX_BUSYOUTGOING": "NOT LINEAGENTSTATEEX_BUSYOUTGOING");
		UINT32 LINEAGENTSTATEEX_UNKNOWN:1 = FormatString("     (%s) %s", this.ToBitString, this? "LINEAGENTSTATEEX_UNKNOWN": "NOT LINEAGENTSTATEEX_UNKNOWN");
		UINT32 LINEAGENTSTATEEX_RELEASED:1 = FormatString("    (%s) %s", this.ToBitString, this? "LINEAGENTSTATEEX_RELEASED": "NOT LINEAGENTSTATEEX_RELEASED");
		UINT32 Reserved1:25 = FormatString("                    (%s)", this.ToBitString);
	}
}

//157-lSetAgentStateEx
struct TRPLineSetAgentStateEx
{
	UINT32 dwRequestID = FormatString("0x%08X - %s", this, TRPRequestIDTable (this) );
	UINT32  hLine;
	UINT32 hAgent;
	TRPLINEAGENTSTATEEXFlag dwAgentState;
	TRPLINEAGENTSTATEEXFlag dwNextAgentState;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
}

//158-lGetProxyStatus
struct TRPLINEPROXYREQUESTLIST = FormatString(" Number=%d", TrpBufferEntrySize)
{
	UINT32 dwTotalSize;
	UINT32 dwNeededSize;
	UINT32 dwUsedSize;
	[TrpBufferEntrySize = this]
	UINT32 dwNumEntries;
	UINT32 dwListSize;
	UINT32 dwListOffset;

	UINT32 entry[TrpBufferEntrySize];
}

struct TRPLineGetProxyStatus
{
	UINT32 hLineApp;
	UINT32 dwDeviceID;
	UINT32 dwAppAPIVersion;
	UINT32 lpLineProxyRequestList;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
	UINT32 Reserved9;
	UINT32 Reserved10;
	switch
	{
		case Property.MSRPCPType == 0x02 && FrameOffset < FrameLength:
		_struct VarData
		{
			switch
			{
				case lpLineProxyRequestList > 0 && lpLineProxyRequestList != 0xFFFFFFFF: BLOB(lpLineProxyRequestList) Padding;
			}
			switch
			{
				case lpLineProxyRequestList != 0xFFFFFFFF: TRPLINEPROXYREQUESTLIST ProxyRequestList;
			}
		}
	}

}

//159-lCreateMSPInstance
//160-lCloseMSPInstance

//http://msdn.microsoft.com/library/en-us/tapi/tspi/tspi_lineclosemspinstance.asp?frame=true
struct TRPLineCloseMSPInstance
{
	UINT32 hLine;
	UINT32 Padding1;
	UINT32 Padding2;
	UINT32 Padding3;
	UINT32 Padding4;
	UINT32 Padding5;
	UINT32 Padding6;
	UINT32 Padding7;
	UINT32 Padding8;
	UINT32 Padding9;
	UINT32 Padding10;
	UINT32 Padding11;
	UINT32 Padding12;
}

//161-tSetEventMasksOrSubMasks
struct TRPOtherRSPSetEventFilterMasks
{
	UINT32 dwObjType = TRPObjectIDTypeTable(this);
	UINT32 lObjectID;
	BOOL fSubMask = FormatString("%s", this ? "TRUE : The ulEventMasksLo and ulEventMasksHi fields will have only one valid bit that is set for both of them. dwSubMasks is treated as a bit array of sub-types of that message."
	: "FALSE : The ulEventMasksLo and ulEventMasksHi are treated as bit arrays (dwSubMasks is ignored).");
	UINT32 dwSubMasks;
	UINT32 ulEventMasksLo;
	UINT32 ulEventMasksHi;
	UINT32 dwDeviceID;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
}

//165-mGetDeviceFlags
struct TRPMMCGetDeviceFlags
{
	UINT32 hLineApp;
	UINT32 fLine = FormatString("%s", this ? "TRUE : It is a line devices."
	: "FALSE : It is a phone devices.");
	UINT32 dwProviderID;
	UINT32 dwPermanentDeviceID ;
	TRPLINEDEVCAPFLAGSFlag dwFlags;
	UINT32 dwDeviceID;
	UINT32 Reserved2;
	UINT32 Reserved3;
	UINT32 Reserved4;
	UINT32 Reserved5;
	UINT32 Reserved6;
	UINT32 Reserved7;
	UINT32 Reserved8;
}

//
//TAPI32_MSG Body
//
struct TrpTAPI32Message = TrpTAPI32MessageDescription
{
	NdrConformantVarying NdrConformant;
	[
		MAX_TAPI_FUNC_ARGS = 13,
		TAPI_BUFFR_PADDING_SIZE = ( NdrConformant.ActualCount - 60),
		TapiBufferSize = NdrConformant.ActualCount,
		DataFieldFrameLength = FrameOffset + TapiBufferSize
	]
	_struct BufferParams = TrpTAPI32MessageDescription
	{
        //The union - u
      
		Switch( Property.MSRPCPType )
		{
			Case 0x00: //Request
			[
				Conversation.TrpBufferReqFuncCode$[MakeByteArray(MSRPCPContId,MSRPCCallId)] = this,Property.TrpBufferReqFunc = this,
				TrpTAPI32MessageDescription = FormatString("TAPIFunction: %s (%d)", TrpBufferRequestFuncTable(this), this)
			]
			UINT32 ReqFunc = FormatString("%d: %s", this, TrpBufferRequestFuncTable(this));

			Case 0x02: //Response
			[
				Conversation.TrpBuffserFuncPerFrameTable$[FrameNumber] = Conversation.TrpBufferReqFuncCode$[MakeByteArray(MSRPCPContId,MSRPCCallId)],
				Property.TrpBufferReqFunc = Conversation.TrpBuffserFuncPerFrameTable$[FrameNumber],
				TrpTAPI32MessageDescription = FormatString("TAPIFunction: %s (%d)", TrpBufferRequestFuncTable(TrpBufferReqFunc), TrpBufferReqFunc)
			]
			UINT32 AckReturnValue = FormatString("%d (%s)", this, TRPAckReturnValueTable(this));
		}
		UINT32 Reserved1 = Property.TrpBufferReqFunc;
		switch(Property.TrpBufferReqFunc )
		{
			case 0: TRPGetAsyncEvents getAsyncEvents;
			case 1: TRPGetUIDllName GetUIDllName;
			case 2: TRPUIDLLCallback UIDLLCallback;
			case 3: TRPFreeDialogInstance freeDialogInstance;
			case 4: TRPLineAccept lineAccept;
			case 5: TRPLineAddToConference lineAddToConference;
			case 6: TRPLineAgentSpecific lineAgentSpecific;
			case 7: TRPLineAnswer lineAnswer;
			case 8: TRPLineBlindTransfer lineBlindTransfer;
			case 9: TRPLineClose lineClose;
			case 10: TRPLineCompleteCall lineCompleteCall;
			case 11: TRPLineCompleteTransfer lineCompleteTransfer;
			case 12: TRPLineCloseCall lineCloseCall;
			case 13: TRPLineDevSpecific lineDevSpecific;
			case 14: TRPLineDevSpecificFeature lineDevSpecificFeature;
			case 15: TRPLineDial lineDial;
			case 16: TRPLineDrop lineDrop;
			case 17: TRPLineForward lineForward;
			case 18: TRPLineGatherDigits lineGatherDigits;
			case 19: TRPLineGenerateDigits lineGenerateDigits;
			case 20: TRPLineGenerateTone lineGenerateTone;
			case 21: TRPLineGetAddressCaps lineGetAddressCaps;
			case 22: TRPLineGetAddressID lineGetAddressID;
			case 23: TRPLineGetAddressStatus lineGetAddressStatus;
			case 24: TRPLineGetAgentActivityList lineGetAgentActivityList;
			case 25: TRPLineGetAgentCaps lineGetAgentCaps;
			case 26: TRPLineGetAgentGroupList lineGetGroupList;
			case 27: TRPLineGetAgentStatus lineGetAgentStatus;
			case 30: TRPLineGetCallInfo lineGetCallInfo;
			case 31: TRPLineGetCallStatus lineGetCallStatus;
			case 34: TRPLineGetDevCaps lineGetDevCaps;
			case 35: TRPLineGetDevConfig lineGetDevConfig;

			case 37: TRPLineGetID lineGetID;
			case 38: TRPLineGetLineDevStatus lineGetLineDevStatus;
			case 39: TRPLineGetNewCalls lineGetNewCalls;
			case 40: TRPLineGetNumAddressIDs lineGetNumAddressIDs;
			case 42: TRPLineGetProviderList lineGetProviderList;

			case 46: TRPLineHold lineHold;
			case 47: TRPLineInitialize lineInitialize;
			case 48: TRPLineMakeCall lineMakeCall;
			case 49: TRPLineMonitorDigits lineMonitorDigits;
			case 50: TRPLineMonitorMedia lineMonitorMedia;
			case 51: TRPLineMonitorTones lineMonitorTones;
			case 52: TRPLineNegotiateAPIVersion NegotiateAPIVersion;
			case 53: TRPLineNegotiateExtVersion lineNegotiateExtVersion;
			case 54: TRPLineOpen lineOpen;
			case 55: TRPLinePark linePark;
			case 56: TRPLinePickup linePickup;
			case 57: TRPLinePrepareAddToConference linePrepareAddToConference;

			case 60: TRPLineRedirect lineRedirect;

			case 62: TRPLineReleaseUserUserInfo lineReleaseUserUserInfo;
			case 63: TRPLineRemoveFromConference lineRemoveFromConference;
			case 64: TRPLineSecureCall lineSecureCall;
			case 65: TRPLineSendUserUserInfo lineSendUserUserInfo;
			case 66: TRPLineSetAgentActivity lineSetAgentActivity;
			case 67: TRPLineSetAgentGroup lineSetAgentGroup;
			case 68: TRPLineSetAgentState lineSetAgentState;

			case 70: TRPLineSetAppSpecific lineSetAppSpecific;
			case 71: TRPLineSetCallData lineSetCallData;
			case 72: TRPLineSetCallParams lineSetCallParams;
			case 74: TRPLineSetCallQualityOfService lineSetCallQualityOfService;
			case 75: TRPLineSetCallTreatment lineSetCallTreatment;
			case 76: TRPLineSetDefaultMediaDetection lineSetDefaultMediaDetection;
			case 77: TRPLineSetDevConfig lineSetDevConfig;
			case 78: TRPLineSetLineDevStatus lineSetLineDevStatus;
			case 79: TRPLineSetMediaControl lineSetMediaControl;
			case 80: TRPLineSetMediaMode lineSetMediaMode;

			case 82: TRPLineSetStatusMessages lineSetStatusMessages;
			case 83: TRPLineSetTerminal lineSetTerminal;
			case 84: TRPLineSetupConference lineSetupConference;
			case 85: TRPLineSetupTransfer lineSetupTransfer;
			case 86: TRPLineShutdown lineShutdown;
			case 87: TRPLineSwapHold lineSwapHold;
			case 88: TRPLineUncompleteCall lineUncompleteCall;
			case 89: TRPLineUnhold lineUnhold;
			case 90: TRPLineUnpark lineUnpark;
			case 91: TRPPhoneClose phoneClose;
			case 92: TRPPhoneDevSpecific phoneDevSpecific;
			case 93: TRPPhoneGetButtonInfo phoneGetButtonInfo;
			case 94: TRPPhoneGetData phoneGetData;
			case 95: TRPPhoneGetDevCaps phoneGetDevCaps;
			case 96: TRPPhoneGetDisplay phoneGetDisplay;
			case 97: TRPPhoneGetGain phoneGetGain;
			case 98: TRPPhoneGetHookSwitch phoneGetHookSwitch;
			case 99: TRPPhoneGetID phoneGetID;

			case 101: TRPPhoneGetLamp phoneGetLamp;
			case 102: TRPPhoneGetRing phoneGetRing;
			case 103: TRPPhoneGetStatus phoneStatus;
			case 105: TRPPhoneGetVolume phoneGetVolume;
			case 106: TRPPhoneInitialize PhoneInitialize;
			case 107: TRPPhoneOpen phoneOpen;
			case 108: TRPPhoneNegotiateAPIVersion phoneNegotiateAPIVersion;
			case 109: TRPPhoneNegotiateExtVersion phoneNegotiateExtVersion;
			case 110: TRPPhoneSetButtonInfo phoneSetButtonInfo;
			case 111: TRPPhoneSetData phoneSetData;
			case 112: TRPPhoneSetDisplay phoneSetDisplay;
			case 113: TRPPhoneSetGain phoneSetGain;
			case 114: TRPPhoneSetHookSwitch phoneSetHookSwitch;
			case 115: TRPPhoneSetLamp phoneSetLamp;
			case 116: TRPPhoneSetRing phoneSetRing;
			case 117: TRPPhoneSetStatusMessages phoneSetStatusMessages;
			case 118: TRPPhoneSetVolume setVolume;
			case 119: TRPPhoneShutdown phoneShutdown;

			case 127: TRPLineConditionalMediaDetection conditionalMediaDetection;
			case 128: TRPLineSelectExtVersion SelectExtVersion;
			case 129: TRPPhoneSelectExtVersion phoneSelectExtVersion;

			case 130: TRPNegotiateAPIVersionForAllDevices xNegotiateAPIVersionForAllDevices;
			case 131: TRPMMCGetAvailableProviders getAvailableProvidersRequest;
			case 132: TRPMMCGetLineInfo getLineInfo;
			case 133: TRPMMCGetPhoneInfo getPhoneInfo;
			case 134: TRPMMCGetServerConfig getServerConfig;
			case 135: TRPMMCSetLineInfo setLineInfo;
			case 136: TRPMMCSetPhoneInfo setPhoneInfo;
			case 137: TRPMMCSetServerConfig setServerConfig;
			case 140: TRPLineGetCallHubTracking getCallHubTracking;
			case 141: TRPLineGetCallIDs getCallIDs;

			case 143: TRPLineSetCallHubTracking setCallHubTracking;

			case 146: TRPLineCreateAgent createAgent;
			case 147: TRPLineCreateAgentSession createAgentSession;
			case 148: TRPLineGetAgentInfo getAgentInfo;
			case 149: TRPLineGetAgentSessionInfo getAgentSessionInfo;
			case 150: TRPLineGetAgentSessionList getAgentSessionList;
			case 151: TRPLineGetQueueInfo getQueueInfo;
			case 152: TRPLineGetGroupList getGroupList;
			case 153: TRPLineGetQueueList getQueueList;
			case 154: TRPLineSetAgentMeasurementPeriod setAgentMeasurementPeriod;
			case 155: TRPLineSetAgentSessionState setAgentSessionState;
			case 156: TRPLineSetQueueMeasurementPeriod setQueueMeasurementPeriod;
			case 157: TRPLineSetAgentStateEx setAgentStateEx;
			case 158: TRPLineGetProxyStatus getProxyStatus;
			case 160: TRPLineCloseMSPInstance closeMSPInstance;
			case 161: TRPOtherRSPSetEventFilterMasks RSPSetEventFilterMasks;
			case 165: TRPMMCGetDeviceFlags getDeviceFlags;
		}
		switch
		{
			case FrameOffset < FrameLength: BLOB(FrameLength - FrameOffset) Padding;
		}
	}
}
