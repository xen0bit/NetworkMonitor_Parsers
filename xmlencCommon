//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  XML Encryption Syntax and Processing (XML-Encryption)
//#
//#  Details:                
//#
//#  Public References:      http://www.w3.org/TR/xmlenc-core/#sec-eg-Super-Encryption
//#
//#  Comments:               
//#
//#  Revision Class and Date:Major, 11/27/2009
//#                          Minor, 3/11/2010
//#
//####
[RegisterBefore(SoapBody.DefaultSoapBody.SoapBodyNodes, EncryptedData, Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedData"))]
struct XMLENCEncryptedData = this.STag.ToString
{
	XMLTag("EncryptedData") STag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				XMLENCxencEncryptedType EncryptedType;
				XMLTag("EncryptedData") ETag;
			}
	}
}

//
// ComplexType EncryptedType
//
Struct XMLENCxencEncryptedType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptionMethod") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct EncryptionMethod = this.STag.ToString
			{
				[Post.Local.EncryptionMethod_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("EncryptionMethod") STag;
				switch
				{
					Case !Local.EncryptionMethod_IsEmpty:
						struct
						{
							XMLENCxencEncryptionMethodType EncryptionMethod;
							XmlTag("EncryptionMethod") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "KeyInfo") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			XMLENCdsKeyInfoElement KeyInfo;
	}
	
	XMLENCxencCipherDataElement CipherData;
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptionProperties") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			XMLENCxencEncryptionPropertiesElement EncryptionProperties;
	}
	
}

//
// Element KeyInfo
//
struct XMLENCdsKeyInfoElement = this.STag.ToString
{
	[Post.Local.XMLENCdsKeyInfoElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("KeyInfo") STag;
	switch
	{
		Case !Local.XMLENCdsKeyInfoElement_IsEmpty:
			struct
			{
				XMLENCdsKeyInfoType KeyInfoType;
				XmlTag("KeyInfo") ETag;
			}
	}
}

//
// ComplexType KeyInfoType
//
Struct XMLENCdsKeyInfoType
{
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		Switch
		{
			Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedKey"):
				XMLENCxencEncryptedKeyElement EncryptedKey;
			Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "AgreementMethod"):
				XMLENCxencAgreementMethodElement AgreementMethod;
			Default:
				XmlElement(true) AnyChoice;
		}
		
	}
}

//
// ComplexType EncryptionMethodType
//
Struct XMLENCxencEncryptionMethodType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "KeySize") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct KeySize = this.STag.ToString
			{
				[Post.Local.KeySize_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("KeySize") STag;
				switch
				{
					Case !Local.KeySize_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) KeySize;
							XmlTag("KeySize") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "OAEPparams") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct OAEPparams = this.OAEPparams
			{
				[Post.Local.OAEPparams_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("OAEPparams") STag;
				switch
				{
					Case !Local.OAEPparams_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) OAEPparams;
							XmlTag("OAEPparams") ETag;
						}
				}
			}
			
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// Element CipherData
//
struct XMLENCxencCipherDataElement = this.STag.ToString
{
	[Post.Local.XMLENCxencCipherDataElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("CipherData") STag;
	switch
	{
		Case !Local.XMLENCxencCipherDataElement_IsEmpty:
			struct
			{
				XMLENCxencCipherDataType CipherDataType;
				XmlTag("CipherData") ETag;
			}
	}
}

//
// ComplexType CipherDataType
//
Struct XMLENCxencCipherDataType
{
	Switch
	{
		Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "CipherValue"):
			struct CipherValue = this.CipherValue
			{
				[Post.Local.CipherValue_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("CipherValue") STag;
				switch
				{
					Case !Local.CipherValue_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) CipherValue;
							XmlTag("CipherValue") ETag;
						}
				}
			}
			
		Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "xenc:CipherReference"):
			XMLENCxencCipherReferenceElement XencCipherReference;
		Default:
			ReportParserError("ParserErrorProtocolClassMsOffice", "Security", "There is no such choice") ChoiceError;
	}
	
}

//
// Element CipherReference
//
struct XMLENCxencCipherReferenceElement = this.STag.ToString
{
	[Post.Local.XMLENCxencCipherReferenceElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("CipherReference") STag;
	switch
	{
		Case !Local.XMLENCxencCipherReferenceElement_IsEmpty:
			struct
			{
				XMLENCxencCipherReferenceType CipherReferenceType;
				XmlTag("CipherReference") ETag;
			}
	}
}

//
// ComplexType CipherReferenceType
//
Struct XMLENCxencCipherReferenceType
{
	Switch
	{
		Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Transforms"):
			struct Transforms = this.STag.ToString
			{
				[Post.Local.Transforms_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Transforms") STag;
				switch
				{
					Case !Local.Transforms_IsEmpty:
						struct
						{
							XMLENCxencTransformsType Transforms;
							XmlTag("Transforms") ETag;
						}
				}
			}
			
	}
	
}

//
// ComplexType TransformsType
//
Struct XMLENCxencTransformsType
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Transform") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) Transform;
	}
}


//
// Element EncryptedKey
//
struct XMLENCxencEncryptedKeyElement = this.STag.ToString
{
	[Post.Local.XMLENCxencEncryptedKeyElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("EncryptedKey") STag;
	switch
	{
		Case !Local.XMLENCxencEncryptedKeyElement_IsEmpty:
			struct
			{
				XMLENCxencEncryptedKeyType EncryptedKeyType;
				XmlTag("EncryptedKey") ETag;
			}
	}
}

//
// ComplexType EncryptedKeyType
//
Struct XMLENCxencEncryptedKeyType
{
	XMLENCxencEncryptedType EncryptedType;
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ReferenceList") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			XMLENCxencReferenceListElement ReferenceList;
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "CarriedKeyName") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct CarriedKeyName = this.CarriedKeyName
			{
				[Post.Local.CarriedKeyName_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("CarriedKeyName") STag;
				switch
				{
					Case !Local.CarriedKeyName_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) CarriedKeyName;
							XmlTag("CarriedKeyName") ETag;
						}
				}
			}
			
	}
	
}

//
// Element AgreementMethod
//
struct XMLENCxencAgreementMethodElement = this.STag.ToString
{
	[Post.Local.XMLENCxencAgreementMethodElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("AgreementMethod") STag;
	switch
	{
		Case !Local.XMLENCxencAgreementMethodElement_IsEmpty:
			struct
			{
				XMLENCxencAgreementMethodType AgreementMethodType;
				XmlTag("AgreementMethod") ETag;
			}
	}
}

//
// ComplexType AgreementMethodType
//
Struct XMLENCxencAgreementMethodType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "KA-Nonce") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct KANonce = this.KANonce
			{
				[Post.Local.KANonce_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("KA-Nonce") STag;
				switch
				{
					Case !Local.KANonce_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) KANonce;
							XmlTag("KA-Nonce") ETag;
						}
				}
			}
			
	}
	
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "OriginatorKeyInfo")]
	{
		XmlElement(true) OtherElement;
	}
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "OriginatorKeyInfo") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct OriginatorKeyInfo = this.STag.ToString
			{
				[Post.Local.OriginatorKeyInfo_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("OriginatorKeyInfo") STag;
				switch
				{
					Case !Local.OriginatorKeyInfo_IsEmpty:
						struct
						{
							XMLENCdsKeyInfoType OriginatorKeyInfo;
							XmlTag("OriginatorKeyInfo") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "RecipientKeyInfo") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct RecipientKeyInfo = this.STag.ToString
			{
				[Post.Local.RecipientKeyInfo_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("RecipientKeyInfo") STag;
				switch
				{
					Case !Local.RecipientKeyInfo_IsEmpty:
						struct
						{
							XMLENCdsKeyInfoType RecipientKeyInfo;
							XmlTag("RecipientKeyInfo") ETag;
						}
				}
			}
			
	}
	
}

//
// Element ReferenceList
// Embedded ComplexType 
//
struct XMLENCxencReferenceListElement = this.STag.ToString
{
	[Post.Local.XMLENCxencReferenceListElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ReferenceList") STag;
	switch
	{
		Case !Local.XMLENCxencReferenceListElement_IsEmpty:
			struct
			{
				While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
				{
					Switch
					{
						Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "DataReference"):
							struct DataReference = this.STag.ToString
							{
								[Post.Local.DataReference_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("DataReference") STag;
								switch
								{
									Case !Local.DataReference_IsEmpty:
										struct
										{
											XMLENCxencReferenceType DataReference;
											XmlTag("DataReference") ETag;
										}
								}
							}
							
						Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "KeyReference"):
							struct KeyReference = this.STag.ToString
							{
								[Post.Local.KeyReference_IsEmpty = Property.IsXmlEmptyElement]
								XmlTag("KeyReference") STag;
								switch
								{
									Case !Local.KeyReference_IsEmpty:
										struct
										{
											XMLENCxencReferenceType KeyReference;
											XmlTag("KeyReference") ETag;
										}
								}
							}
							
					}
					
				}
				XmlTag("ReferenceList") ETag;
			}
	}
}

//
// ComplexType ReferenceType
//
Struct XMLENCxencReferenceType
{
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XmlElement(true) OtherElement;
	}
}

//
// Element EncryptionProperties
//
struct XMLENCxencEncryptionPropertiesElement = this.STag.ToString
{
	[Post.Local.XMLENCxencEncryptionPropertiesElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("EncryptionProperties") STag;
	switch
	{
		Case !Local.XMLENCxencEncryptionPropertiesElement_IsEmpty:
			struct
			{
				XMLENCxencEncryptionPropertiesType EncryptionPropertiesType;
				XmlTag("EncryptionProperties") ETag;
			}
	}
}

//
// ComplexType EncryptionPropertiesType
//
Struct XMLENCxencEncryptionPropertiesType
{
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptionProperty") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		XMLENCxencEncryptionPropertyElement EncryptionProperty;
	}
}

//
// Element EncryptionProperty
//
struct XMLENCxencEncryptionPropertyElement = this.STag.ToString
{
	[Post.Local.XMLENCxencEncryptionPropertyElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("EncryptionProperty") STag;
	switch
	{
		Case !Local.XMLENCxencEncryptionPropertyElement_IsEmpty:
			struct
			{
				XMLENCxencEncryptionPropertyType EncryptionPropertyType;
				XmlTag("EncryptionProperty") ETag;
			}
	}
}

//
// ComplexType EncryptionPropertyType
//
Struct XMLENCxencEncryptionPropertyType
{
	While [!Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		Switch
		{
			Default:
				XmlElement(true) AnyChoice;
		}
		
	}
}

[RegisterBefore(SoapHeader.SoapHeaderNodes.Node, EncryptedHeader, Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "EncryptedHeader"))]
struct XMLENCEncryptedHeader = this.STag.ToString
{
	XMLTag("EncryptedHeader") STag;
	switch
	{
		case !(Property.IsXmlEmptyElement):
			struct
			{
				XMLENCEncryptedData EncryptedType;
				XMLTag("EncryptedHeader") ETag;
			}
	}
}
