//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Remote Desktop Protocol: Smart Card Virtual Channel Extension
//#
//#  Details:                Remote Desktop Protocol parser family - root parser
//#
//#  Microsoft References:   [MS-RDPESC]:   Remote Desktop Protocol: Smart Card Virtual Channel Extension
//#
//#  Comments:               
//#
//#  Revision Class and Date:
//#
//####

[DataTypeByteOrder = LittleEndian]
Protocol RDPESC = local.MSRPCOnRDPSummary
{
	[local.MSRPCOnRDPSummary = "Unknown Data"]
	switch
	{
		// Smard Card, DeviceId == 1
		case Property.RDOEFSIODeviceID == 1:
			[local.MSRPCOnRDPSummary = RDPESCIoControlCodeTable(Property.RDPEFSIOControlCode)]
			switch (Property.RDPEFSIOControlCode)
			{
				case 0x00090014:
				case 0x00090018:
				case 0x0009001C:
				case 0x000900A8:
				case 0x00090020:
				case 0x00090024:
				case 0x00090028:
				case 0x0009002C:
				case 0x00090050:
				case 0x00090058:
				case 0x00090068:
				case 0x00090054:
				case 0x0009005C:
				case 0x0009006C:
				case 0x00090060:
				case 0x00090070:
				case 0x00090078:
				case 0x00090064:
				case 0x00090074:
				case 0x0009007C:
				case 0x00090098:
				case 0x0009009C:
				case 0x000900A0:
				case 0x000900A4:
				case 0x000900AC:
				case 0x000900B0:
				case 0x000900B4:
				case 0x000900B8:
				case 0x000900BC:
				case 0x000900C0:
				case 0x000900C4:
				case 0x000900C8:
				case 0x000900CC:
				case 0x000900D0:
				case 0x000900D4:
				case 0x000900D8:
				case 0x000900DC:
				case 0x000900E8:
				case 0x000900EC:
				case 0x000900F0:
				case 0x000900F4:
				case 0x000900F8:
				case 0x000900FC:
				case 0x00090100:
					_struct RDPESCSmartCardCallWithMSRPCHeader
					{
						RPCECommonTypeHeader CommonTypeHeader;
						RPCEPrivateTypeHeader PrivateTypeHeader;
		
						switch (Property.RDPEFSIOControlCode)
						{
							case 0x0090014:
								RDPESCEstablishContextCall RDPDrEstablishContextCall;
							case 0x0090018:
							case 0x009001C:
							case 0x00900A8:
								RDPESCContextCall RDPDrContextCall;
							case 0x0090020:
							case 0x0090024:
								RDPESCListReaderGroupsCall RDPDrListReaderGroupsCall;
							case 0x0090028:
							case 0x009002C:
								RDPESCListReadersCall RDPDrListReadersCall;
							case 0x0090050:
							case 0x0090058:
							case 0x0090068:
								RDPESCContextAndStringACall RDPDrContextAndStringACall;
							case 0x0090054:
							case 0x009005C:
							case 0x009006C:
								RDPESCContextAndStringWCall RDPDrContextAndStringWCall;
							case 0x0090060:
							case 0x0090070:
							case 0x0090078:
								RDPESCContextAndTwoStringACall RDPDrContextAndTwoStringACall;
							case 0x0090064:
							case 0x0090074:
							case 0x009007C:
								RDPESCContextAndTwoStringWCall RDPDrContextAndTwoStringWCall;
							case 0x0090098:
								RDPESCLocateCardsACall RDPDrLocateCardsACall;
							case 0x009009C:
								RDPESCLocateCardsWCall RDPDrLocateCardsWCall;
							case 0x00900A0:
								RDPESCGetStatusChangeACall RDPDrGetStatusChangeACall;
							case 0x00900A4:
								RDPESCGetStatusChangeWCall RDPDrGetStatusChangeWCall;
							case 0x00900AC:
								RDPESCConnectACall RDPDrConnectACall;
							case 0x00900B0:
								RDPESCConnectWCall RDPDrConnectWCall;
							case 0x00900B4:
								RDPESCReconnectCall RDPDrReconnectCall;
							case 0x00900B8:
							case 0x00900C0:
								_struct RDPESCDisposition
								{
									RDPESCHCardAndDispositionCall(true) RDPDrHCardAndDispositionCall;
								}
							case 0x00900BC:
								_struct RDPESCWithoutDisposition
								{
									RDPESCHCardAndDispositionCall(false) RDPDrHCardAndDispositionCall;
								}
							case 0x00900C4:
								RDPESCStateCall RDPDrStateCall;
							case 0x00900C8:
							case 0x00900CC:
								RDPESCStatusCall RDPDrStatusCall;
							case 0x00900D0:
								RDPESCTransmitCall RDPDrTransmitCall;
							case 0x00900D4:
								RDPESCControlCall RDPDrControlCall;
							case 0x00900D8:
								RDPESCGetAttribCall RDPDrGetAttribCall;
							case 0x00900DC:
								RDPESCSetAttribCall RDPDrSetAttribCall;
							case 0x00900E8:
								RDPESCLocateCardsByATRACall RDPDrLocateCardsByATRACall;
							case 0x00900EC:
								RDPESCLocateCardsByATRWCall RDPDrLocateCardsByATRWCall;
							case 0x000900F0:
								RDPESCReadCacheACall RDPDrReadCacheACall;
							case 0x000900F4:
								RDPESCReadCacheWCall RDPDrReadCacheWCall;
							case 0x000900F8:
								RDPESCWriteCacheACall RDPDrWriteCacheACall;
							case 0x000900FC:
								RDPESCWriteCacheWCall RDPDrWriteCacheWCall;
							case 0x00090100:
								RDPESCGetTransmitCountCall RDPDrGetTransmitCountCall;
						}
					}
				// SmartCardCall W/O MSRPCHeader
				case 0x000900E0:
					UINT32 Unused;
				default:
					BLOB(FrameLength - FrameOffset) UndefinedFunctionCall;
			}
	}
	switch
	{
		case FrameOffset < FrameLength:
			Blob(FrameLength - FrameOffset) Pad;
	}
}

Table RDPESCIoControlCodeTable(code)
{
	switch (code)
	{
		case 0x00090014: "SCARD_IOCTL_ESTABLISHCONTEXT";
		case 0x00090018: "SCARD_IOCTL_RELEASECONTEXT";
		case 0x0009001C: "SCARD_IOCTL_ISVALIDCONTEXT";
		case 0x00090020: "SCARD_IOCTL_LISTREADERGROUPSA";
		case 0x00090024: "SCARD_IOCTL_LISTREADERGROUPSW";
		case 0x00090028: "SCARD_IOCTL_LISTREADERSA";
		case 0x0009002C: "SCARD_IOCTL_LISTREADERSW";
		case 0x00090050: "SCARD_IOCTL_INTRODUCEREADERGROUPA";
		case 0x00090054: "SCARD_IOCTL_INTRODUCEREADERGROUPW";
		case 0x00090058: "SCARD_IOCTL_FORGETREADERGROUPA";
		case 0x0009005C: "SCARD_IOCTL_FORGETREADERGROUPW";
		case 0x00090060: "SCARD_IOCTL_INTRODUCEREADERA";
		case 0x00090064: "SCARD_IOCTL_INTRODUCEREADERW";
		case 0x00090068: "SCARD_IOCTL_FORGETREADERA";
		case 0x0009006C: "SCARD_IOCTL_FORGETREADERW";
		case 0x00090070: "SCARD_IOCTL_ADDREADERTOGROUPA";
		case 0x00090074: "SCARD_IOCTL_ADDREADERTOGROUPW";
		case 0x00090078: "SCARD_IOCTL_REMOVEREADERFROMGROUPA";
		case 0x0009007C: "SCARD_IOCTL_REMOVEREADERFROMGROUPW";
		case 0x00090098: "SCARD_IOCTL_LOCATECARDSA";
		case 0x0009009C: "SCARD_IOCTL_LOCATECARDSW";
		case 0x000900A0: "SCARD_IOCTL_GETSTATUSCHANGEA";
		case 0x000900A4: "SCARD_IOCTL_GETSTATUSCHANGEW";
		case 0x000900A8: "SCARD_IOCTL_CANCEL";
		case 0x000900AC: "SCARD_IOCTL_CONNECTA";
		case 0x000900B0: "SCARD_IOCTL_CONNECTW";
		case 0x000900B4: "SCARD_IOCTL_RECONNECT";
		case 0x000900B8: "SCARD_IOCTL_DISCONNECT";
		case 0x000900BC: "SCARD_IOCTL_BEGINTRANSACTION";
		case 0x000900C0: "SCARD_IOCTL_ENDTRANSACTION";
		case 0x000900C4: "SCARD_IOCTL_STATE";
		case 0x000900C8: "SCARD_IOCTL_STATUSA";
		case 0x000900CC: "SCARD_IOCTL_STATUSW";
		case 0x000900D0: "SCARD_IOCTL_TRANSMIT";
		case 0x000900D4: "SCARD_IOCTL_CONTROL";
		case 0x000900D8: "SCARD_IOCTL_GETATTRIB";
		case 0x000900DC: "SCARD_IOCTL_SETATTRIB";
		case 0x000900E0: "SCARD_IOCTL_ACCESSSTARTEDEVENT";
		case 0x000900E8: "SCARD_IOCTL_LOCATECARDSBYATRA";
		case 0x000900EC: "SCARD_IOCTL_LOCATECARDSBYATRW";
		case 0x000900F0: "SCARD_IOCTL_READCACHEA";
		case 0x000900F4: "SCARD_IOCTL_READCACHEW";
		case 0x000900F8: "SCARD_IOCTL_WRITECACHEA";
		case 0x000900FC: "SCARD_IOCTL_WRITECACHEW";
		case 0x00090100: "SCARD_IOCTL_GETTRANSMITCOUNT";
		default: "Undefined value: " + FormatString("0x%08X", code);
	}
}

table RDPESCEstablishContextCallScopeTable(value)
{
	switch(value)
	{
		case 0x00000000: "User Context";
		case 0x00000002: "System Context";
	}
}

struct RDPESCEstablishContextCall = FormatString("Scope = %u", Scope)
{
	UINT32 Scope = RDPESCEstablishContextCallScopeTable(this);
}

struct RDPESCRedirScardContext = FormatString("Context = %u", ContextCount)
{
	UINT32 ContextCount;
	[property.ContextPtr = ptrContext.ReferentID]
	NdrPtr ptrContext;
}

struct RDPESCRedirScardContextRef = FormatString("Length = %u", ContextConformant.MaxCount)
{
	NdrConformant ContextConformant;
	BLOB(ContextConformant.MaxCount) ContextData;
}

struct RDPESCContextCall
{
	RDPESCRedirScardcontext Context;
	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
}

struct RDPESCListReaderGroupsCall
{
	RDPESCRedirScardcontext Context;
	bool GroupsIsNULL = this? "Only retrieve data length": "False";
	switch(GroupsIsNULL)
	{
		case true: UINT32 Unused;
		default: UINT32 Groups = this == 0xFFFFFFFF? "Auto Allocate": FormatString("Length = %d", this);
	}

	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
}

struct RDPESCListReadersCall
{
	RDPESCRedirScardcontext Context;
	UINT32 Bytes;
	NdrPtr ptrGroups;
	bool ReadersIsNULL = this? "Only retrieve data length": "False";
	switch(ReadersIsNULL)
	{
		case true: UINT32 Unused;
		default: UINT32 Readers = this == 0xFFFFFFFF? "Auto Allocate": FormatString("Length = %d", this);
	}
	switch
	{
		case property.ContextPtr:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case ptrGroups.ReferentID:
			_struct GroupsRef
			{
				NdrConformant GroupsConformant;
				switch(Property.RDPEFSIOControlCode)
				{
					case 0x0090028:
						[local.ASCIImultistringEndOffset = FrameOffset + GroupsConformant.MaxCount]
						_struct ASCIImultistring
						{
							while [FrameOffset < local.ASCIImultistringEndOffset]
							{
								AsciiString ReaderGroupName;
							}
						}
					case 0x009002C:
						[local.UnicodemultistringEndOffset = FrameOffset + GroupsConformant.MaxCount]
						_struct Unicodemultistring
						{
							while [FrameOffset < local.UnicodemultistringEndOffset]
							{
								UnicodeString ReaderGroupName;
							}
						}
				}
			}
	}
}

struct RDPESCContextAndStringACall = local.Sz
{
	RDPESCRedirScardcontext Context;
	NdrPtr ptrSz;
	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case ptrSz.ReferentID:
			switch(Property.RDPEFSIOControlCode)
			{
				case 0x0090050:
				case 0x0090058: [local.Sz] NdrString ReaderGroupName;
				case 0x0090068: [local.Sz] NdrString ReaderName;
			}
	}
}

struct RDPESCContextAndStringWCall = local.Sz
{
	RDPESCRedirScardcontext Context;
	NdrPtr ptrSz;
	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case ptrSz.ReferentID:
			switch(Property.RDPEFSIOControlCode)
			{
				case 0x0090054:
				case 0x009005C: [local.Sz] NdrWideString ReaderGroupName;
				case 0x009006C: [local.Sz] NdrWideString ReaderName;
			}
	}
}

struct RDPESCContextAndTwoStringACall = ReaderName + ", " + local.Sz2
{
	RDPESCRedirScardcontext Context;
	NdrPtr ptrSz1;
	NdrPtr ptrSz2;
	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case ptrSz1.ReferentID:	NdrString ReaderName;
	}
	switch
	{
		case ptrSz2.ReferentID:
			switch(Property.RDPEFSIOControlCode)
			{
				case 0x0090060: [local.Sz2] NdrString DeviceName;
				case 0x0090070:
				case 0x0090078: [local.Sz2] NdrString ReaderGroupName;
			}
	}
}

struct RDPESCContextAndTwoStringWCall = ReaderName + ", " + local.Sz2
{
	RDPESCRedirScardcontext Context;
	NdrPtr ptrSz1;
	NdrPtr ptrSz2;
	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case ptrSz1.ReferentID:	NdrWideString ReaderName;
	}
	switch
	{
		case ptrSz2.ReferentID:
			switch(Property.RDPEFSIOControlCode)
			{
				case 0x0090064: [local.Sz2] NdrWideString DeviceName;
				case 0x0090074:
				case 0x009007C: [local.Sz2] NdrWideString ReaderGroupName;
			}
	}
}

struct RDPESCLocateCardsATRMask = FormatString("cbAtr = %u", cbAtr)
{
	UINT32 cbAtr;
	BLOB(36) rgbAtr;
	BLOB(36) rgbMask;
}

struct RDPESCReaderStateCommonCall = dwCurrentState.ToString
{
	UINT32 dwCurrentState = this ? "" : "SCARD_STATE_UNAWARE"
	{
		UINT32 Ignore:1 = FormatString("     (%s) %s",this.ToBitString,this ? "SCARD_STATE_IGNORE" : "Not SCARD_STATE_IGNORE");
		UINT32 Reserved1:2 = FormatString("  (%s)",this.ToBitString);
		UINT32 Unavailable:1 = FormatString("(%s) %s",this.ToBitString,this ? "SCARD_STATE_UNAVAILABLE" : "Not SCARD_STATE_UNAVAILABLE");
		UINT32 Empty:1 = FormatString("      (%s) %s",this.ToBitString,this ? "SCARD_STATE_EMPTY" : "Not SCARD_STATE_EMPTY");
		UINT32 Present:1 = FormatString("    (%s) %s",this.ToBitString,this ? "SCARD_STATE_PRESENT" : "Not SCARD_STATE_PRESENT");
		UINT32 Atrmatch:1 = FormatString("   (%s) %s",this.ToBitString,this ? "SCARD_STATE_ATRMATCH" : "Not SCARD_STATE_ATRMATCH");
		UINT32 Exclusive:1 = FormatString("  (%s) %s",this.ToBitString,this ? "SCARD_STATE_EXCLUSIVE" : "Not SCARD_STATE_EXCLUSIVE");
		UINT32 Inuse:1 = FormatString("      (%s) %s",this.ToBitString,this ? "SCARD_STATE_INUSE" : "Not SCARD_STATE_INUSE");
		UINT32 Mute:1 = FormatString("       (%s) %s",this.ToBitString,this ? "SCARD_STATE_MUTE" : "Not SCARD_STATE_MUTE");
		UINT32 Reserved2:22 = FormatString("  (%s)",this.ToBitString);
	};
	UINT32 dwEventState
	{
		UINT32 Ignore:1 = FormatString("     (%s) %s",this.ToBitString,this ? "SCARD_STATE_IGNORE" : "Not SCARD_STATE_IGNORE");
		UINT32 Changed:1 = FormatString("    (%s) %s",this.ToBitString,this ? "SCARD_STATE_CHANGED" : "Not SCARD_STATE_CHANGED");
		UINT32 Unknown:1 = FormatString("    (%s) %s",this.ToBitString,this ? "SCARD_STATE_UNKNOWN" : "Not SCARD_STATE_UNKNOWN");
		UINT32 Unavailable:1 = FormatString("(%s) %s",this.ToBitString,this ? "SCARD_STATE_UNAVAILABLE" : "Not SCARD_STATE_UNAVAILABLE");
		UINT32 Empty:1 = FormatString("      (%s) %s",this.ToBitString,this ? "SCARD_STATE_EMPTY" : "Not SCARD_STATE_EMPTY");
		UINT32 Present:1 = FormatString("    (%s) %s",this.ToBitString,this ? "SCARD_STATE_PRESENT" : "Not SCARD_STATE_PRESENT");
		UINT32 Atrmatch:1 = FormatString("   (%s) %s",this.ToBitString,this ? "SCARD_STATE_ATRMATCH" : "Not SCARD_STATE_ATRMATCH");
		UINT32 Exclusive:1 = FormatString("  (%s) %s",this.ToBitString,this ? "SCARD_STATE_EXCLUSIVE" : "Not SCARD_STATE_EXCLUSIVE");
		UINT32 Inuse:1 = FormatString("      (%s) %s",this.ToBitString,this ? "SCARD_STATE_INUSE" : "Not SCARD_STATE_INUSE");
		UINT32 Mute:1 = FormatString("       (%s) %s",this.ToBitString,this ? "SCARD_STATE_MUTE" : "Not SCARD_STATE_MUTE");
		UINT32 Reserved:22 = FormatString("   (%s)",this.ToBitString);
	};
	UINT32 cbAtr;
	BLOB(36) rgbAtr;
}

struct RDPESCReaderStateA = FormatString("ReaderStatePtr = %d", ReaderStatePtr)
{
	[Post.ReaderStatePtr = ReaderStatePtr | ((ptrReader.ReferentID ? 1 : 0) << CurrentReaderState), Post.CurrentReaderState = CurrentReaderState + 1]
	NdrPtr ptrReader;
	RDPESCReaderStateCommonCall Common;
}

struct RDPESCReaderStateARef = Reader.ToString
{
	[Post.CurrentReaderState = CurrentReaderState + 1]
	switch
	{
		case ReaderStatePtr & (1 << CurrentReaderState):
			NdrString Reader;
	}
}

struct RDPESCLocateCardsACall
{
	RDPESCRedirScardcontext Context;
	UINT32 Bytes;
	NdrPtr ptrCards;
	UINT32 Readers;
	NdrPtr ptrReaderStates;

	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case ptrCards.ReferentID:
			_struct mszCards
			{
				NdrConformant CardsConformant;
				[local.mszCardsLength = FrameOffset + CardsConformant.MaxCount]
				while [FrameOffset < local.mszCardsLength]
				{
					AsciiString CardName;
				}
				ALIGN4 Pad;
			}
	}
	switch
	{
		case ptrReaderStates.ReferentID:
			_struct Readers
			{
				NdrConformant ReaderStateConformant;
				[CurrentReaderState = 0, ReaderStatePtr = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateA RDPDrReaderState;
				}
				[CurrentReaderState = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateARef RDPDrReaderStateRef;
				}
			}
	}
}

struct RDPESCReaderStateW = FormatString("ReaderStatePtr = %d", ReaderStatePtr)
{
	[Post.ReaderStatePtr = ReaderStatePtr | ((ptrReader.ReferentID ? 1 : 0) << CurrentReaderState), Post.CurrentReaderState = CurrentReaderState + 1]
	NdrPtr ptrReader;
	RDPESCReaderStateCommonCall Common;
}

struct RDPESCReaderStateWRef = Reader.ToString
{
	[Post.CurrentReaderState = CurrentReaderState + 1]
	switch
	{
		case ReaderStatePtr & (1 << CurrentReaderState):
			NdrWideString Reader;
	}
}

struct RDPESCLocateCardsWCall
{
	RDPESCRedirScardcontext Context;
	UINT32 Bytes;
	NdrPtr ptrCards;
	UINT32 Readers;
	NdrPtr ptrReaderStates;

	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case ptrCards.ReferentID:
			_struct mszCards
			{
				NdrConformant CardsConformant;
				[local.mszCardsLength = FrameOffset + CardsConformant.MaxCount]
				while [FrameOffset < local.mszCardsLength]
				{
					UnicodeString CardName;
				}
				ALIGN4 Pad;
			}
	}
	switch
	{
		case ptrReaderStates.ReferentID:
			_struct ReadersRef
			{
				NdrConformant ReaderStateConformant;
				[CurrentReaderState = 0, ReaderStatePtr = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateW RDPDrReaderState;
				}
				[CurrentReaderState = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateWRef RDPDrReaderStateRef;
				}
			}
	}
}

struct RDPESCGetStatusChangeACall
{
	RDPESCRedirScardcontext Context;
	UINT32 TimeOut = this == 0xFFFFFFFF? "Infinite": FormatString("%u ms", this);
	UINT32 Readers;
	NdrPtr ptrReaderState;

	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case ptrReaderState.ReferentID:
			_struct ReaderStatesRef
			{
				NdrConformant ReaderStateConformant;
				[CurrentReaderState = 0, ReaderStatePtr = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateA RDPDrReaderState;
				}
				[CurrentReaderState = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateARef RDPDrReaderStateRef;
				}
			}
	}
}

struct RDPESCGetStatusChangeWCall
{
	RDPESCRedirScardcontext Context;
	UINT32 TimeOut = this == 0xFFFFFFFF? "Infinite": FormatString("%u ms", this);
	UINT32 Readers;
	NdrPtr ptrReaderState;

	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case ptrReaderState.ReferentID:
			_struct ReaderStatesRef
			{
				NdrConformant ReaderStateConformant;
				[CurrentReaderState = 0, ReaderStatePtr = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateW RDPDrReaderState;
				}
				[CurrentReaderState = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateWRef RDPDrReaderStateRef;
				}
			}
	}
}

struct RDPESCConnectCommon
{
	RDPESCRedirScardcontext Context;
	UINT32 ShareMode;
	UINT32 PreferredProtocols;
}

struct RDPESCConnectCommonRef
{
	switch
	{
		case property.ContextPtr:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
}

struct RDPESCConnectACall = Reader.ToString
{
	NdrPtr ptrReader;
	RDPESCConnectCommon Common;
	switch
	{
		case ptrReader.ReferentID:
			NdrString Reader;
	}
	RDPESCConnectCommonRef RDPDrConnectCommonRef;
}

struct RDPESCConnectWCall = Reader.ToString
{
	NdrPtr ptrReader;
	RDPESCConnectCommon Common;
	switch
	{
		case ptrReader.ReferentID:
			NdrWideString Reader;
	}
	RDPESCConnectCommonRef RDPDrConnectCommonRef;
}

struct RDPESCRedirScardhandle = FormatString("Handle = %u", Handle)
{
	RDPESCRedirScardcontext Context;
	UINT32 Handle;
	[property.HandlePtr = ptrHandle.ReferentID]
	NdrPtr ptrHandle;
}

struct RDPESCRedirScardhandleRef
{
	switch
	{
		case property.ContextPtr:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case property.HandlePtr:
			_struct RDPDrRedirScardhandleRef
			{
				NdrConformant HandleConformant;
				BLOB(HandleConformant.MaxCount) pbHandle;
			}
	}
}

table RDPESCCardAccessModeFlagTable(value)
{
	switch(value)
	{
		case 0x00000001: "Not share Smart Card with other applications";
		case 0x00000002: "Share Smart Card with other applications";
		case 0x00000003: "Direct control of the Smart Card Reader";
		default:
			"Unknown value";
	}
}

table RDPESCCadrInitializationtable(value)
{
	switch(value)
	{
		case 0x00000000: "Don not do anything";
		case 0x00000001: "Reset the Smart Card";
		case 0x00000002: "Power down and reset the Smart Card";
		default:
			"Unknown value";
	}
}

struct RDPESCReconnectCall
{
	RDPESCRedirScardhandle CardHandle;
	UINT32 ShareMode = RDPESCCardAccessModeFlagTable(this);
	UINT32 PreferredProtocols
	{
		UINT32 T0:1 = FormatString("(%s) %s", this.ToBitString, this? "Transmission protocol 0 (T=0) is active":"");
		UINT32 T1:1 = FormatString("(%s) %s", this.ToBitString, this? "Transmission protocol 1 (T=1) is active":"");
		UINT32 Reserved1:14 = FormatString("(%s)", this.ToBitString);
		UINT32 Raw:1 = FormatString("(%s) %s", this.ToBitString, this? "Transmission protocol raw is active":"");
		UINT32 Reserved2:15 = FormatString("(%s)", this.ToBitString);
	}
	UINT32 Initialization = RDPESCCadrInitializationtable(this);
	RDPESCRedirScardhandleRef RDPDrRedirScardhandleRef;
}

table RDPESCCadrDispositionTable(value)
{
	switch(value)
	{
		case 0x00000000: "Don not do anything";
		case 0x00000001: "Reset the Smart Card";
		case 0x00000002: "Power down and reset the Smart Card";
		case 0x00000003: "Eject the Smart Card";
		default:
			"Unknown value";
	}
}

struct RDPESCHCardAndDispositionCall(bDisposition)
{
	RDPESCRedirScardhandle CardHandle;
	switch(bDisposition)
	{
		case true: UINT32 Disposition = RDPESCCadrDispositionTable(this);
		default: UINT32 Unused;
	}
	
	RDPESCRedirScardhandleRef RDPDrRedirScardhandleRef;
}

struct RDPESCStateCall
{
		RDPESCRedirScardhandle CardHandle;
		bool AtrIsNULL = this? "Only retrieve data length": "False";
		switch(AtrIsNULL)
		{
			case true: UINT32 Unused;
			default: UINT32 AtrLen = this == 0xFFFFFFFF? "Auto Allocate": FormatString("Length = %d", this);
		}
		RDPESCRedirScardhandleRef RDPDrRedirScardhandleRef;
}

struct RDPESCStatusCall
{
	RDPESCRedirScardhandle CardHandle;
	bool ReaderNamesIsNULL = this? "Only retrieve data length": "False";
	switch(ReaderNamesIsNULL)
	{
		case true: UINT32 Unused;
		default: UINT32 Reader = this == 0xFFFFFFFF? "Auto Allocate": FormatString("Length = %d", this);
	}
	UINT32 AtrLen = FormatString("%d (Unused)", this);
	RDPESCRedirScardhandleRef RDPDrRedirScardhandleRef;
}

struct RDPESCSCardIORequest
{
	UINT32 Protocol;
	UINT32 ExtraBytes;
	[property.ExtraBytesPtr = ptrExtraBytes.ReferentID]
	NdrPtr ptrExtraBytes;
}

struct RDPESCSCardIORequestRef
{
	NdrConformant ExtraBytesConformant;
	BLOB(ExtraBytesConformant.MaxCount) pbExtraBytes;
}

struct RDPESCTransmitCall
{
	RDPESCRedirScardhandle CardHandle;
	[local.ioSendExtBytePtr1 = ioSendPci.ptrExtraBytes.ReferentID]
	RDPESCSCardIORequest ioSendPci;
	UINT32 SendLength;
	NdrPtr ptrSendBuffer;
	[local.ioRecvPtr = ptrIoRecvPci.ReferentID]
	NdrPtr ptrIoRecvPci;
	bool RecvBufferIsNULL = this? "Only retrieve data length": "False";
	switch(RecvBufferIsNULL)
	{
		case true: UINT32 Unused;
		default: UINT32 RecvLength = this == 0xFFFFFFFF? "Auto Allocate": FormatString("Length = %d", this);
	}

	RDPESCRedirScardhandleRef RDPDrRedirScardhandleRef;
	switch
	{
		case local.ioSendExtBytePtr1:
			RDPESCSCardIORequestRef RDPDrSCardIORequestIoSendPciRef;
	}
	switch
	{
		case ptrSendBuffer.ReferentID:
			_struct IoSendPci
			{
				NdrConformant SendBufferConformant;
				BLOB(SendBufferConformant.MaxCount) pbSendBuffer;
			}
	}
	switch
	{
		case local.ioRecvPtr:
			_struct ptrIoRecvPci
			{
				RDPESCSCardIORequest ioRecvPci;
				switch(ioRecvPci.ptrExtraBytes.ReferentID)
				{
					case true: RDPESCSCardIORequestRef RDPDrSCardIORequestIoSendPciRef;
				}
			}
	}
}

struct RDPESCControlCall
{
	RDPESCRedirScardhandle CardHandle;
	UINT32 ControlCode;
	UINT32 InBufferSize;
	NdrPtr ptrInBuffer;
	bool OutBufferIsNULL = this? "Only retrieve data length": "False";
	switch(OutBufferIsNULL)
	{
		case true: UINT32 Unused;
		default: UINT32 OutBufferSize;
	}
	
	RDPESCRedirScardhandleRef RDPDrRedirScardhandleRef;
	switch
	{
		case ptrInBuffer.ReferentID:
			_struct InBufferRef
			{
				NdrConformant InBufferConformant;
				BLOB(InBufferConformant.MaxCount) pvInBuffer;
			}
	}
}

struct RDPESCGetAttribCall
{
	RDPESCRedirScardhandle CardHandle;
	UINT32 AttrId;
	bool AttrIsNULL = this? "Only retrieve data length": "False";
	switch(AttrIsNULL)
	{
		case true: UINT32 Unused;
		default: UINT32 AttrLen = this == 0xFFFFFFFF? "Auto Allocate": FormatString("Length = %d", this);
	}
	RDPESCRedirScardhandleRef RDPDrRedirScardhandleRef;
}

struct RDPESCSetAttribCall
{
	RDPESCRedirScardhandle CardHandle;
	UINT32 AttrId;
	UINT32 AttrLen;
	NdrPtr ptrAttr;
	
	RDPESCRedirScardhandleRef RDPDrRedirScardhandleRef;
	switch
	{
		case ptrAttr.ReferentID:
			_struct pbAttr
			{
				NdrConformant AttrConformant;
				BLOB(AttrConformant.MaxCount) AttrData;
			}
	}
}

struct RDPESCLocateCardsByATRACall
{
	RDPESCRedirScardcontext Context;
	UINT32 Atrs;
	NdrPtr ptrAtrs;
	UINT32 Readers;
	NdrPtr ptrReaderStates;
	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case PtrAtrs.ReferentID:
			_struct RDPESCAtrsRef
			{
				NdrConformant AtrMasksConformant;
				RDPESCLocateCardsATRMask pbAttr[AtrMasksConformant.MaxCount];
			}
	}
	switch
	{
		case ptrReaderStates.ReferentID:
			_struct RDPESCReadersRef
			{
				NdrConformant ReaderStateConformant;
				[CurrentReaderState = 0, ReaderStatePtr = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateA RDPDrReaderState;
				}
				[CurrentReaderState = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateARef RDPDrReaderStateRef;
				}
			}
	}
}

struct RDPESCLocateCardsByATRWCall
{
	RDPESCRedirScardcontext Context;
	UINT32 Atrs;
	NdrPtr ptrAtrs;
	UINT32 Readers;
	NdrPtr ptrReaderStates;

	switch
	{
		case Context.ptrContext.ReferentID:
			RDPESCRedirScardcontextRef RDPDrRedirScardcontextRef;
	}
	switch
	{
		case ptrAtrs.ReferentID:
			_struct RDPESCAtrsRef
			{
				NdrConformant AtrMasksConformant;
				RDPESCLocateCardsATRMask pbAttr[AtrMasksConformant.MaxCount];
			}
	}
	switch
	{
		case ptrReaderStates.ReferentID:
			_struct RDPESCReadersRef
			{
				NdrConformant ReaderStateConformant;
				[CurrentReaderState = 0, ReaderStatePtr = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateW RDPDrReaderState;
				}
				[CurrentReaderState = 0]
				while [CurrentReaderState < ReaderStateConformant.MaxCount]
				{
					RDPESCReaderStateWRef RDPDrReaderStateRef;
				}
			}
	}
}


[DataTypeByteOrder = LittleEndian]
struct RDPESCGetTransmitCountCall
{
	RDPESCRedirScardhandle CardHandle;
	RDPESCRedirScardhandleRef RDPDrRedirScardhandleRef;
}

[DataTypeByteOrder = LittleEndian]
struct RDPESCWriteCacheCommon
{
	RDPESCRedirScardcontext Context;
	[property.ptrUUID = ptrUUID.referentID]
	NdrPtr ptrUUID;
	UINT32 FreshCounter;
	UINT32 DataLen;
	[property.ptrWriteData = ptrData.referentID]
	NdrPtr ptrData;
}

[DataTypeByteOrder = LittleEndian]
struct RDPESCWriteCacheCommonRef
{
	switch
	{
		case property.ContextPtr:
			RDPESCRedirScardcontextRef ContextRef;
	}
	switch
	{
		case property.ptrUUID: UUID(false) CardID;
	}
	switch
	{
		case property.ptrWriteData:
			_struct RDPESCWriteData
			{
				NdrConformant ContextConformant;
				BLOB(ContextConformant.MaxCount) WriteDataBLOB;
			}
	}
}

[DataTypeByteOrder = LittleEndian]
struct RDPESCWriteCacheACall
{
	[local.ptr = ptrLookupName.ReferentID]
	NdrPtr ptrLookupName;
	RDPESCWriteCacheCommon WriteCacheCommon;

	switch
	{
		case local.ptr: NdrString LookupName;
	}
	RDPESCWriteCacheCommonRef RDPDrWriteCacheCommonRef;
}

[DataTypeByteOrder = LittleEndian]
struct RDPESCWriteCacheWCall
{
	[local.ptr = ptrLookupName.ReferentID]
	NdrPtr ptrLookupName;
	RDPESCWriteCacheCommon WriteCacheCommon;

	switch
	{
		case local.ptr: NdrWideString LookupName;
	}
	RDPESCWriteCacheCommonRef RDPDrWriteCacheCommonRef;
}

[DataTypeByteOrder = LittleEndian]
struct RDPESCReadCacheCommon
{
	RDPESCRedirScardcontext Context;
	[property.ptrUUID = ptrUUID.referentID]
	NdrPtr ptrUUID;
	UINT32 FreshCounter;
	bool DataIsNULL = this? "Only retrieve data length": "False";
	switch(DataIsNULL)
	{
		case true: UINT32 Unused;
		default: UINT32 DataLen = this == 0xFFFFFFFF? "Auto Allocate": FormatString("Length = %d", this);
	}	
}

[DataTypeByteOrder = LittleEndian]
struct RDPESCReadCacheCommonRef
{
	switch
	{
		case property.ContextPtr:
			RDPESCRedirScardcontextRef ContextRef;
	}
	switch
	{
		case ptrUUID: UUID(false) CardID;
	}
}

[DataTypeByteOrder = LittleEndian]
struct RDPESCReadCacheACall
{
	[local.ptr = ptrLookupName.ReferentID]
	NdrPtr ptrLookupName;
	RDPESCReadCacheCommon ReadCacheCommon;

	switch
	{
		case local.ptr: NdrString LookupName;
	}
	RDPESCReadCacheCommonRef RDPDrReadCacheCommonRef;
}

[DataTypeByteOrder = LittleEndian]
struct RDPESCReadCacheWCall
{
	[local.ptr = ptrLookupName.ReferentID]
	NdrPtr ptrLookupName;
	RDPESCReadCacheCommon ReadCacheCommon;

	switch
	{
		case local.ptr: NdrWideString LookupName;
	}
	RDPESCReadCacheCommonRef RDPDrReadCacheCommonRef;
}