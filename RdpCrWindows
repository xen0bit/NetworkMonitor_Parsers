//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  RDP - Composited Remoting Protocol
//#
//#  Details:                Remote Desktop Protocol parser family
//#
//#  Microsoft References:   [MS-RDPCR]: Remote Desktop Protocol: Composited Remoting Specification
//#
//#  Comments:               Lack 2.2.7 Render Data Drawing Instructions to be finish in Win7 phase
//#
//#  Revision Class and Date:Minor, 3/17/2009
//#
//####

[DataTypeByteOrder = LittleEndian]
[BuildConversationWithParent]
Protocol RDPCR = RDPCrPacketControlCodeTable(ControlCode)
{
	UINT32 ControlCode = RDPCrPacketControlCodeTable(this);
	UINT32 MessageSize;
	[
		Post.Conversation.ConversationDescription = 
			Conversation.RDPCR.ConversationDescription? Conversation.RDPCR.ConversationDescription :
			FormatString("(ConnectionType: %s) ConvID = %d",Property.RDPCRConnectionType, ConvID)
	]
	switch (ControlCode)
	{
		case 0x01:
			RDPMilCtrlCmdVersionRequest MilCtrlCmdVersionRequest;
		case 0x02:
			RDPMilCtrlCmdVersionAnnouncement MilCtrlCmdVersionAnnouncement;
		case 0x03:
			RDPMilCtrlCmdOpenConnection MilCtrlCmdOpenConnection;
		case 0x06:
			RDPMilCtrlCmdOpenChannel MilCtrlCmdOpenChannel;
		case 0x07:
			RDPMilCtrlCmdCloseChannel MilCtrlCmdCloseChannel;
		case 0x08:
			RDPMilCtrlCmdSubmitBatch MilCtrlCmdSubmitBatch;
		//case 0x0A:
		//	RDPMilCtrlCmdConnectionNotification MilCtrlCmdConnectionNotification;
		//case 0x0B:
		//	RDPMilCtrlCmdChannelNotification MilCtrlCmdChannelNotification;
		//case 0x0C:
		//	RDPMilCtrlCmdConnectionBroadcast MilCtrlCmdConnectionBroadcast;
		default:
			BLOB(MessageSize - 8) UnkownCmd;
	}
}

Table RDPMilBitmapInterpolationModeTable(value)
{
	switch(value)
	{
		case  0x00000000: "NearestNeighbor";
		case  0x00000001: "Linear";
		case  0x00000002: "Cubic";
		case  0x00000003: "Fant";
		case  0x00000004: "TriLinear";
		case  0x00000005: "Anisotropic";
		case  0x00000006: "SuperSample";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilBitmapScalingModeTable(value)
{
	switch(value)
	{
		case  0x00000000: "Unspecified";
		case  0x00000001: "LowQuality";
		case  0x00000002: "HighQuality";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilBrushMappingModeTable(value)
{
	switch(value)
	{
		case  0x00000000: "Absolute";
		case  0x00000001: "RelativeToBoundingBox";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilCachingHintTable(value)
{
	switch(value)
	{
		case  0x00000000: "Unspecified";
		case  0x00000001: "Cache";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilColorInterpolationModeTable(value)
{
	switch(value)
	{
		case  0x00000000: "ScRgbLinearInterpolation";
		case  0x00000001: "SRgbLinearInterpolation";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilCompositingModeTable(value)
{
	switch(value)
	{
		case  0x00000000: "SourceOver";
		case  0x00000001: "SourceCopy";
		case  0x00000002: "SourceAdd";
		case  0x00000003: "SourceAlphaMultiply";
		case  0x00000004: "SourceInverseAlphaMultiply";
		case  0x00000005: "SourceUnder";
		case  0x00000006: "SourceOverNonPremultiplied";
		case  0x00000007: "SourceInverseAlphaOverNonPremultiplied";
		case  0x00000008: "DestInvert";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilCompositionDeviceStateTable(value)
{
	switch(value)
	{
		case  0x00000000: "Normal";
		case  0x00000001: "NoDevice";
		case  0x00000002: "Occluded";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilConnectionFlagsTable(value)
{
	switch(value)
	{
		case  0x00000000: "Default";
		case  0x00000001: "IsDwm";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilEdgeModeTable(value)
{
	switch(value)
	{
		case  0x00000000: "Unspecified";
		case  0x00000001: "Aliased";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilFillRuleTable(value)
{
	switch(value)
	{
		case  0x00000000: "EvenOdd";
		case  0x00000001: "Nonzero";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilGeometryCombineModeTable(value)
{
	switch(value)
	{
		case  0x00000000: "Union";
		case  0x00000001: "Intersect";
		case  0x00000002: "Xor";
		case  0x00000003: "Exclude";
		default:
			FormatString("Unknown value: %u", value);
	}
}

struct RDPMilGlyphRunFlags
{
	UINT16 Flags
	{
		UINT16 Hinting:1 = FormatString("         (%s) %s", this.ToBitString, this? "MilGlyphRunHinting": "");
		UINT16 BoldSimulation:1 = FormatString("  (%s) %s", this.ToBitString, this? "MilGlyphRunBoldSimulation": "");
		UINT16 ItalicSimulation:1 = FormatString("(%s) %s", this.ToBitString, this? "MilGlyphRunItalicSimulation": "");
		UINT16 Sideways:1 = FormatString("        (%s) %s", this.ToBitString, this? "MilGlyphRunSideways": "");
		UINT16 TrueType:1 = FormatString("        (%s) %s", this.ToBitString, this? "MilGlyphRunIsTrueType": "");
		UINT16 Outline:1 = FormatString("         (%s) %s", this.ToBitString, this? "MilGlyphRunOutline": "");
		UINT16 ForceVAA:1 = FormatString("        (%s) %s", this.ToBitString, this? "MilGlyphRunForceVAA": "");
		UINT16 Reserved1:1 = FormatString("       (%s)", this.ToBitString);
		UINT16 OverContrast:1 = FormatString("    (%s) %s", this.ToBitString, this? "MilGlyphRunOverContrast": "");
		UINT16 HasYPositions:1 = FormatString("   (%s) %s", this.ToBitString, this? "MilGlyphRunHasYPositions": "");
		UINT16 LeftToRight:1 = FormatString("     (%s) %s", this.ToBitString, this? "MilGlyphRunIsLeftToRight": "");
		UINT16 PrecontrastLevel:3 = FormatString("(%s) %s", this.ToBitString, this? "Contrast Control": "");
		UINT16 Reserved2:2 = FormatString("       (%s)", this.ToBitString);
	}
}

Table RDPMilGradientSpreadMethodTable(value)
{
	switch(value)
	{
		case  0x00000000: "Pad";
		case  0x00000001: "Reflect";
		case  0x00000002: "Repeat";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilHorizontalAlignmentTable(value)
{
	switch(value)
	{
		case  0x00000000: "Left";
		case  0x00000001: "Center";
		case  0x00000002: "Right";
		default:
			FormatString("Unknown value: %u", value);
	}
}

struct RDPMilPathFigureFlags
{
	UINT32 Flags
	{
		UINT32 Gaps:1 = FormatString("         (%s) %s", this.ToBitString, this? "PathFigureFlagsHasGaps": "");
		UINT32 Curves:1 = FormatString("       (%s) %s", this.ToBitString, this? "PathFigureFlagsHasCurves": "");
		UINT32 Closed:1 = FormatString("       (%s) %s", this.ToBitString, this? "PathFigureFlagsIsClosed": "");
		UINT32 Fillable:1 = FormatString("     (%s) %s", this.ToBitString, this? "PathFigureFlagsIsFillable": "");
		UINT32 RectangleData:1 = FormatString("(%s) %s", this.ToBitString, this? "PathFigureFlagsIsRectangleData": "");
		UINT32 Reserved:27 = FormatString("     (%s)", this.ToBitString);
	}
}

struct RDPMilPathGeometryFlags
{
	UINT32 Flags
	{
		UINT32 Curves:1 = FormatString("     (%s) %s", this.ToBitString, this? "PathGeometryFlagsHasCurves": "");
		UINT32 BoundsValid:1 = FormatString("(%s) %s", this.ToBitString, this? "PathGeometryFlagsBoundsValid": "");
		UINT32 Gaps:1 = FormatString("       (%s) %s", this.ToBitString, this? "PathGeometryFlagsHasGaps": "");
		UINT32 Hollows:1 = FormatString("    (%s) %s", this.ToBitString, this? "PathGeometryFlagsHasHollows": "");
		UINT32 RegionData:1 = FormatString(" (%s) %s", this.ToBitString, this? "PathGeometryFlagsIsRegionData": "");
		UINT32 Reserved:27 = FormatString("   (%s)", this.ToBitString);
	}
}

struct RDPMilPathSegmentFlags
{
	UINT32 Flags
	{
		UINT32 Reserved1:2 = FormatString(" (%s)", this.ToBitString);
		UINT32 Gap:1 = FormatString("       (%s) %s", this.ToBitString, this? "PathSegmentFlagsIsAGap": "");
		UINT32 SmoothJoin:1 = FormatString("(%s) %s", this.ToBitString, this? "PathSegmentFlagsSmoothJoin": "");
		UINT32 Closed:1 = FormatString("    (%s) %s", this.ToBitString, this? "PathSegmentFlagsClosed": "");
		UINT32 Curved:1 = FormatString("    (%s) %s", this.ToBitString, this? "PathSegmentFlagsIsCurved": "");
		UINT32 Reserved:26 = FormatString("  (%s)", this.ToBitString);
	}
}

Table RDPMilPenLineCapTable(value)
{
	switch(value)
	{
		case  0x00000000: "Flat";
		case  0x00000001: "Square";
		case  0x00000002: "Round";
		case  0x00000003: "Triangle";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilPenLineJoinTable(value)
{
	switch(value)
	{
		case  0x00000000: "Miter";
		case  0x00000001: "Bevel";
		case  0x00000002: "Round";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilPixelFormatTable(value)
{
	switch(value)
	{
		case  0x00000001: "MILPixelFormat1bppIndexed";
		case  0x00000002: "MILPixelFormat2bppIndexed";
		case  0x00000003: "MILPixelFormat4bppIndexed";
		case  0x00000004: "MILPixelFormat8bppIndexed";
		case  0x00000005: "MILPixelFormatBlackWhite";
		case  0x00000006: "MILPixelFormat2bppGray";
		case  0x00000007: "MILPixelFormat4bppGray";
		case  0x00000008: "MILPixelFormat8bppGray";
		case  0x00000009: "MILPixelFormat16bppBGR555";
		case  0x0000000A: "MILPixelFormat16bppBGR565";
		case  0x0000000B: "MILPixelFormat16bppGray";
		case  0x0000000C: "MILPixelFormat24bppBGR";
		case  0x0000000D: "MILPixelFormat24bppRGB";
		case  0x0000000E: "MILPixelFormat32bppBGR";
		case  0x0000000F: "MILPixelFormat32bppBGRA";
		case  0x00000010: "MILPixelFormat32bppPBGRA";
		case  0x00000011: "MILPixelFormat32bppGrayFloat";
		case  0x00000012: "MILPixelFormat48bppRGBFixedPoint";
		case  0x00000013: "MILPixelFormat16bppGrayFixedPoint";
		case  0x00000014: "MILPixelFormat32bppBGR101010";
		case  0x00000015: "MILPixelFormat48bppRGB";
		case  0x00000016: "MILPixelFormat64bppRGBA";
		case  0x00000017: "MILPixelFormat64bppPRGBA";
		case  0x00000018: "MILPixelFormat96bppBGRFixedPoint";
		case  0x00000019: "MILPixelFormat128bppRGBAFloat";
		case  0x0000001A: "MILPixelFormat128bppPRGBAFloat";
		case  0x0000001B: "MILPixelFormat128bppRGBFloat";
		case  0x0000001C: "MILPixelFormat32bppCMYK";
		case  0x0000001D: "MILPixelFormat64bppRGBAFixedPoint";
		case  0x0000001E: "MILPixelFormat128bppRGBAFixedPoint";
		case  0x0000001F: "MILPixelFormat64bppCMYK";
		case  0x0000002C: "MILPixelFormat40bppCMYKAlpha";
		case  0x0000002D: "MILPixelFormat80bppCMYKAlpha";
		default:
			FormatString("Unknown value: %u", value);
	}
}

struct RDPMilRenderOptionFlags
{
	UINT32 Flags
	{
		UINT32 BitmapScalingMode:1 = FormatString("   (%s) %s", this.ToBitString, this? "BitmapScalingMode": "");
		UINT32 TrilinearFiltering:1 = FormatString("  (%s) %s", this.ToBitString, this? "DisableTrilinearFiltering": "");
		UINT32 ZBuffer:1 = FormatString("             (%s) %s", this.ToBitString, this? "DisableZBuffer": "");
		UINT32 EdgeMode:1 = FormatString("            (%s) %s", this.ToBitString, this? "EdgeMode": "");
		UINT32 InterpolationMode:1 = FormatString("   (%s) %s", this.ToBitString, this? "InterpolationMode": "");
		UINT32 CompositingMode:1 = FormatString("     (%s) %s", this.ToBitString, this? "CompositingMode": "");
		UINT32 AnisotropicFiltering:1 = FormatString("(%s) %s", this.ToBitString, this? "DisableAnisotropicFiltering": "");
		UINT32 Reserved:25 = FormatString("            (%s)", this.ToBitString);
	}
}

Table RDPMilRTInitializationTable(value)
{
	switch(value)
	{
		case  0x00000000: "MIL_RT_INITIALIZE_DEFAULT";
		case  0x00000001: "MIL_RT_SOFTWARE_ONLY";
		case  0x00000002: "MIL_RT_HARDWARE_ONLY";
		case  0x00000003: "MIL_RT_NULL";
		case  0x00000004: "MIL_RT_PRESENT_IMMEDIATELY";
		case  0x00000008: "MIL_RT_PRESENT_RETAIN_CONTENTS";
		case  0x00000010: "MIL_RT_FULLSCREEN";
		case  0x00000020: "MIL_RT_LINEAR_GAMMA";
		case  0x00000040: "MIL_RT_NEED_DESTINATION_ALPHA";
		case  0x00000080: "MIL_RT_ALLOW_LOW_PRECISION";
		case  0x00000100: "MIL_RT_SINGLE_THREADED_USAGE";
		case  0x00000200: "MIL_RT_RENDER_NONCLIENT";
		case  0x00000400: "MIL_RT_PRESENT_FLIP";
		case  0x00000800: "MIL_RT_FULLSCREEN_NO_AUTOROTATE";
		case  0x00001000: "MIL_RT_DISABLE_DISPLAY_CLIPPING";
		case  0x00002000: "MIL_UCE_RT_ENABLE_OCCLUSION";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilSegmentTypeTable(value)
{
	switch(value)
	{
		case  0x00000001: "MilSegmentLine";
		case  0x00000002: "MilSegmentBezier";
		case  0x00000003: "MilSegmentQuadraticBezier";
		case  0x00000004: "MilSegmentArc";
		case  0x00000005: "MilSegmentPolyLine";
		case  0x00000006: "MilSegmentPolyBezier";
		case  0x00000007: "MilSegmentPolyQuadraticBezier";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilSourceModificationTable(value)
{
	switch(value)
	{
		case  0x00000000: "None";
		case  0x00000001: "IgnoreAlpha";
		case  0x00000002: "ColorKey";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilStretchTable(value)
{
	switch(value)
	{
		case  0x00000000: "None";
		case  0x00000001: "Fill";
		case  0x00000002: "Uniform";
		case  0x00000003: "UniformToFill";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilTileModeTable(value)
{
	switch(value)
	{
		case  0x00000000: "None";
		case  0x00000004: "Tile";
		case  0x00000001: "FlipX";
		case  0x00000002: "FlipY";
		case  0x00000003: "FlipXY";
		case  0x00000005: "Extend";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilTransparencyFlagsTable(value)
{
	switch(value)
	{
		case  0x00000000: "Opaque";
		case  0x00000001: "ConstantAlpha";
		case  0x00000002: "PerPixelAlpha";
		case  0x00000004: "ColorKey";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilVerticalAlignmentTable(value)
{
	switch(value)
	{
		case  0x00000000: "Top";
		case  0x00000001: "Center";
		case  0x00000002: "Bottom";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilWindowLayerTypeTable(value)
{
	switch(value)
	{
		case  0x00000000: "NotLayered";
		case  0x00000001: "SystemManagedLayer";
		case  0x00000002: "ApplicationManagedLayer";
		default:
			FormatString("Unknown value: %u", value);
	}
}

Table RDPMilWindowTargetCachingModeTable(value)
{
	switch(value)
	{
		case  0x00000000: "NotCached";
		case  0x00000001: "Cached";
		default:
			FormatString("Unknown value: %u", value);
	}
}

table RdpCrResourceTypesTable
{
	switch(value)
	{
		case 0x00000001: "TYPE_MEDIAPLAYER";
		case 0x00000002: "TYPE_ROTATION3D";
		case 0x00000003: "TYPE_AXISANGLEROTATION3D";
		case 0x00000004: "TYPE_QUATERNIONROTATION3D";
		case 0x00000005: "TYPE_SCENE3D";
		case 0x00000008: "TYPE_PERSPECTIVECAMERA";
		case 0x00000009: "TYPE_ORTHOGRAPHICCAMERA";
		case 0x0000000a: "TYPE_MATRIXCAMERA";
		case 0x0000000c: "TYPE_MODEL3DGROUP";
		case 0x0000000e: "TYPE_AMBIENTLIGHT";
		case 0x0000000f: "TYPE_DIRECTIONALLIGHT";
		case 0x00000011: "TYPE_POINTLIGHT";
		case 0x00000012: "TYPE_SPOTLIGHT";
		case 0x00000013: "TYPE_GEOMETRYMODEL3D";
		case 0x00000015: "TYPE_MESHGEOMETRY3D";
		case 0x00000017: "TYPE_MESHGEOMETRY2D";
		case 0x00000018: "TYPE_GEOMETRY2DGROUP";
		case 0x0000001a: "TYPE_MATERIALGROUP";
		case 0x0000001b: "TYPE_DIFFUSEMATERIAL";
		case 0x0000001c: "TYPE_SPECULARMATERIAL";
		case 0x0000001d: "TYPE_EMISSIVEMATERIAL";
		case 0x0000001f: "TYPE_TRANSFORM3DGROUP";
		case 0x00000021: "TYPE_TRANSLATETRANSFORM3D";
		case 0x00000022: "TYPE_SCALETRANSFORM3D";
		case 0x00000023: "TYPE_ROTATETRANSFORM3D";
		case 0x00000024: "TYPE_MATRIXTRANSFORM3D";
		case 0x00000025: "TYPE_BITMAPEFFECTDRAWING";
		case 0x00000026: "TYPE_GLYPHCACHE";
		case 0x00000027: "TYPE_VISUAL";
		case 0x00000028: "TYPE_VIEWPORT3DVISUAL";
		case 0x00000029: "TYPE_VISUAL3D";
		case 0x0000002a: "TYPE_WINDOWNODE";
		case 0x0000002b: "TYPE_GLYPHRUN";
		case 0x0000002c: "TYPE_RENDERDATA";
		case 0x0000002f: "TYPE_HWNDRENDERTARGET";
		case 0x00000030: "TYPE_DESKTOPRENDERTARGET";
		case 0x00000035: "TYPE_DOUBLERESOURCE";
		case 0x00000036: "TYPE_COLORRESOURCE";
		case 0x00000037: "TYPE_POINTRESOURCE";
		case 0x00000038: "TYPE_RECTRESOURCE";
		case 0x00000039: "TYPE_SIZERESOURCE";
		case 0x0000003a: "TYPE_MATRIXRESOURCE";
		case 0x0000003b: "TYPE_POINT3DRESOURCE";
		case 0x0000003c: "TYPE_VECTOR3DRESOURCE";
		case 0x0000003d: "TYPE_QUATERNIONRESOURCE";
		case 0x0000003e: "TYPE_COLORTRANSFORMRESOURCE";
		case 0x00000040: "TYPE_DRAWINGIMAGE";
		case 0x00000041: "TYPE_CACHEDVISUALIMAGE";
		case 0x00000043: "TYPE_TRANSFORMGROUP";
		case 0x00000044: "TYPE_TRANSLATETRANSFORM";
		case 0x00000045: "TYPE_SCALETRANSFORM";
		case 0x00000046: "TYPE_SKEWTRANSFORM";
		case 0x00000047: "TYPE_ROTATETRANSFORM";
		case 0x00000048: "TYPE_MATRIXTRANSFORM";
		case 0x0000004a: "TYPE_LINEGEOMETRY";
		case 0x0000004b: "TYPE_RECTANGLEGEOMETRY";
		case 0x0000004c: "TYPE_ELLIPSEGEOMETRY";
		case 0x0000004d: "TYPE_GEOMETRYGROUP";
		case 0x0000004e: "TYPE_COMBINEDGEOMETRY";
		case 0x0000004f: "TYPE_PATHGEOMETRY";
		case 0x00000051: "TYPE_SOLIDCOLORBRUSH";
		case 0x00000053: "TYPE_LINEARGRADIENTBRUSH";
		case 0x00000054: "TYPE_RADIALGRADIENTBRUSH";
		case 0x00000056: "TYPE_IMAGEBRUSH";
		case 0x00000057: "TYPE_DRAWINGBRUSH";
		case 0x00000058: "TYPE_VISUALBRUSH";
		case 0x00000059: "TYPE_DashStyle";
		case 0x0000005a: "TYPE_PEN";
		case 0x0000005b: "TYPE_DRAWING";
		case 0x0000005c: "TYPE_GEOMETRYDRAWING";
		case 0x0000005d: "TYPE_GLYPHRUNDRAWING";
		case 0x0000005e: "TYPE_IMAGEDRAWING";
		case 0x0000005f: "TYPE_VIDEODRAWING";
		case 0x00000060: "TYPE_DRAWINGGROUP";
		case 0x00000061: "TYPE_GUIDELINESET";
		case 0x00000062: "TYPE_BITMAPSOURCE";
		case 0x00000064: "TYPE_GDISPRITEBITMAP";
		default:
			FormatString("Unknown value: %u", value);
	}
}

table RdpCrchannelMessagesTable(value)
{
	switch(value)
	{
		case 0x00000001: "MilCmd_TRANSPORT_SYNCFLUSH";
		case 0x00000003: "MilCmd_TRANSPORT_ROUNDTRIPREQUEST";
		case 0x00000004: "MilCmd_TRANSPORT_ASYNCFLUSH";
		case 0x00000005: "MilCmd_PARTITION_REGISTERFORNOTIFICATIONS";
		case 0x00000009: "MilCmd_CHANNEL_REQUESTTIER";
		case 0x0000000C: "MilCmd_CHANNEL_CREATERESOURCE";
		case 0x0000000D: "MilCmd_CHANNEL_DELETERESOURCE";
		case 0x0000000E: "MilCmd_CHANNEL_DUPLICATEHANDLE";
		case 0x00000010: "MilCmd_BITMAP_PIXELS";
		case 0x00000012: "MilCmd_DOUBLERESOURCE";
		case 0x00000013: "MilCmd_COLORRESOURCE";
		case 0x00000014: "MilCmd_POINTRESOURCE";
		case 0x00000015: "MilCmd_RECTRESOURCE";
		case 0x00000016: "MilCmd_SIZERESOURCE";
		case 0x00000017: "MilCmd_MATRIXRESOURCE";
		case 0x00000018: "MilCmd_POINT3DRESOURCE";
		case 0x00000019: "MilCmd_VECTOR3DRESOURCE";
		case 0x0000001A: "MilCmd_QUATERNIONRESOURCE";
		case 0x0000001B: "MilCmd_COLORTRANSFORMRESOURCE";
		case 0x0000001C: "MilCmd_MEDIAPLAYER";
		case 0x0000001D: "MilCmd_RENDERDATA";
		case 0x0000001E: "MilCmd_DRAWINGGROUP_SETCONTENT";
		case 0x00000020: "MilCmd_TILEBRUSH_SETSOURCEMODIFICATIONS";
		case 0x00000022: "MilCmd_VISUAL_SETOFFSET";
		case 0x00000023: "MilCmd_VISUAL_SETTRANSFORM";
		case 0x00000024: "MilCmd_VISUAL_SETCLIP";
		case 0x00000025: "MilCmd_VISUAL_SETALPHA";
		case 0x00000026: "MilCmd_VISUAL_SETRENDEROPTIONS";
		case 0x00000027: "MilCmd_VISUAL_SETCONTENT";
		case 0x00000028: "MilCmd_VISUAL_SETALPHAMASK";
		case 0x00000029: "MilCmd_VISUAL_REMOVEALLCHILDREN";
		case 0x0000002A: "MilCmd_VISUAL_REMOVECHILD";
		case 0x0000002B: "MilCmd_VISUAL_INSERTCHILDAT";
		case 0x0000002C: "MilCmd_VISUAL_SETGUIDELINECOLLECTION";
		case 0x0000002D: "MilCmd_VISUAL_SETCOLORTRANSFORM";
		case 0x0000002E: "MilCmd_VIEWPORT3DVISUAL_SETCAMERA";
		case 0x0000002F: "MilCmd_VIEWPORT3DVISUAL_SETVIEWPORT";
		case 0x00000030: "MilCmd_VIEWPORT3DVISUAL_SET3DCHILD";
		case 0x00000031: "MilCmd_VISUAL3D_SETCONTENT";
		case 0x00000032: "MilCmd_VISUAL3D_SETTRANSFORM";
		case 0x00000033: "MilCmd_VISUAL3D_REMOVEALLCHILDREN";
		case 0x00000034: "MilCmd_VISUAL3D_REMOVECHILD";
		case 0x00000035: "MilCmd_VISUAL3D_INSERTCHILDAT";
		case 0x00000036: "MilCmd_WINDOWNODE_CREATE";
		case 0x00000037: "MilCmd_WINDOWNODE_DETACH";
		case 0x0000003A: "MilCmd_WINDOWNODE_SETBOUNDS";
		case 0x0000003C: "MilCmd_WINDOWNODE_UPDATESPRITEHANDLE";
		case 0x0000003E: "MilCmd_WINDOWNODE_SETSPRITEIMAGE";
		case 0x00000040: "MilCmd_WINDOWNODE_SETSPRITECLIP";
		case 0x00000041: "MilCmd_WINDOWNODE_SETDXCLIP";
		case 0x00000042: "MilCmd_WINDOWNODE_SETSOURCEMODIFICATIONS";
		case 0x00000043: "MilCmd_WINDOWNODE_SETALPHAMARGINS";
		case 0x00000044: "MilCmd_WINDOWNODE_SETCOMPOSEONCE";
		case 0x00000045: "MilCmd_WINDOWNODE_COPYCOMPOSITOROWNEDRESOURCES";
		case 0x00000046: "MilCmd_WINDOWNODE_SETMAXIMIZEDCLIPMARGINS";
		case 0x00000047: "MilCmd_WINDOWNODE_NOTIFYVISRGNUPDATE";
		case 0x00000049: "MilCmd_HWNDTARGET_CREATE";
		case 0x0000004B: "MilCmd_TARGET_UPDATEWINDOWSETTINGS";
		case 0x0000004D: "MilCmd_TARGET_SETROOT";
		case 0x0000004E: "MilCmd_TARGET_SETCLEARCOLOR";
		case 0x0000004F: "MilCmd_TARGET_INVALIDATE";
		case 0x00000051: "MilCmd_TARGET_CAPTUREBITS";
		case 0x00000053: "MilCmd_GLYPHCACHE_ADDBITMAPS";
		case 0x00000055: "MilCmd_GLYPHCACHE_REMOVEBITMAPS";
		case 0x00000056: "MilCmd_GLYPHRUN_CREATE";
		case 0x00000057: "MilCmd_GLYPHRUN_ADDREALIZATION";
		case 0x00000058: "MilCmd_GLYPHRUN_REMOVEREALIZATION";
		case 0x00000059: "MilCmd_GLYPHRUN_GEOMETRY";
		case 0x0000005A: "MilCmd_GDISPRITEBITMAP";
		case 0x0000005B: "MilCmd_GDISPRITEBITMAP_UPDATEMARGINS";
		case 0x0000005C: "MilCmd_GDISPRITEBITMAP_TSUPDATESECTION";
		case 0x0000005D: "MilCmd_GDISPRITEBITMAP_UNMAPSECTION";
		case 0x00000067: "MilCmd_MESHGEOMETRY2D_SETCONSTANTOPACITY";
		case 0x00000087: "MilCmd_AXISANGLEROTATION3D";
		case 0x00000088: "MilCmd_QUATERNIONROTATION3D";
		case 0x00000089: "MilCmd_SCENE3D";
		case 0x0000008A: "MilCmd_PERSPECTIVECAMERA";
		case 0x0000008B: "MilCmd_ORTHOGRAPHICCAMERA";
		case 0x0000008C: "MilCmd_MATRIXCAMERA";
		case 0x0000008D: "MilCmd_MODEL3DGROUP";
		case 0x0000008E: "MilCmd_AMBIENTLIGHT";
		case 0x0000008F: "MilCmd_DIRECTIONALLIGHT";
		case 0x00000090: "MilCmd_POINTLIGHT";
		case 0x00000091: "MilCmd_SPOTLIGHT";
		case 0x00000092: "MilCmd_GEOMETRYMODEL3D";
		case 0x00000093: "MilCmd_MESHGEOMETRY3D";
		case 0x00000094: "MilCmd_MESHGEOMETRY2D";
		case 0x00000095: "MilCmd_GEOMETRY2DGROUP";
		case 0x00000096: "MilCmd_MATERIALGROUP";
		case 0x00000097: "MilCmd_DIFFUSEMATERIAL";
		case 0x00000098: "MilCmd_SPECULARMATERIAL";
		case 0x00000099: "MilCmd_EMISSIVEMATERIAL";
		case 0x0000009A: "MilCmd_TRANSFORM3DGROUP";
		case 0x0000009B: "MilCmd_TRANSLATETRANSFORM3D";
		case 0x0000009C: "MilCmd_SCALETRANSFORM3D";
		case 0x0000009D: "MilCmd_ROTATETRANSFORM3D";
		case 0x0000009E: "MilCmd_MATRIXTRANSFORM3D";
		case 0x0000009F: "MilCmd_BITMAPEFFECTDRAWING";
		case 0x000000A0: "MilCmd_DRAWINGIMAGE";
		case 0x000000A1: "MilCmd_CACHEDVISUALIMAGE";
		case 0x000000A2: "MilCmd_TRANSFORMGROUP";
		case 0x000000A3: "MilCmd_TRANSLATETRANSFORM";
		case 0x000000A4: "MilCmd_SCALETRANSFORM";
		case 0x000000A5: "MilCmd_SKEWTRANSFORM";
		case 0x000000A6: "MilCmd_ROTATETRANSFORM";
		case 0x000000A7: "MilCmd_MATRIXTRANSFORM";
		case 0x000000A8: "MilCmd_LINEGEOMETRY";
		case 0x000000A9: "MilCmd_RECTANGLEGEOMETRY";
		case 0x000000AA: "MilCmd_ELLIPSEGEOMETRY";
		case 0x000000AB: "MilCmd_GEOMETRYGROUP";
		case 0x000000AC: "MilCmd_COMBINEDGEOMETRY";
		case 0x000000AD: "MilCmd_PATHGEOMETRY";
		case 0x000000AE: "MilCmd_SOLIDCOLORBRUSH";
		case 0x000000AF: "MilCmd_LINEARGRADIENTBRUSH";
		case 0x000000B0: "MilCmd_RADIALGRADIENTBRUSH";
		case 0x000000B1: "MilCmd_IMAGEBRUSH";
		case 0x000000B2: "MilCmd_DRAWINGBRUSH";
		case 0x000000B3: "MilCmd_VISUALBRUSH";
		case 0x000000B4: "MilCmd_DashStyle";
		case 0x000000B5: "MilCmd_PEN";
		case 0x000000B6: "MilCmd_GEOMETRYDRAWING";
		case 0x000000B7: "MilCmd_GLYPHRUNDRAWING";
		case 0x000000B8: "MilCmd_IMAGEDRAWING";
		case 0x000000B9: "MilCmd_VIDEODRAWING";
		case 0x000000BA: "MilCmd_DRAWINGGROUP";
		case 0x000000BB: "MilCmd_GUIDELINESET";
		default:
			FormatString("Unkown value: %u", value);
	}
}

struct RDPMil3DPoint 	
{	
	Float X;
	Float Y;
	Float Z;
}	
	
struct RDPMil3DVector 	
{	
	Float X;
	Float Y;
	Float Z;
}	
	
struct RDPMil3x2Matrix 	
{	
	Double M11;
	Double M12;
	Double M21;
	Double M22;
	Double OffsetX;
	Double OffsetY;
}	
	
struct RDPMil4x4Matrix 	
{	
	Float M11;
	Float M12;
	Float M13;
	Float M14;
	Float M21;
	Float M22;
	Float M23;
	Float M24;
	Float M31;
	Float M32;
	Float M33;
	Float M34;
	Float OffsetX;
	Float OffsetY;
	Float OffsetZ;
	Float M44;
}	
	
struct RDPMilColor 	
{	
	Float R;
	Float G;
	Float B;
	Float A;
}	
	
struct RDPMilColorTransform 	
{	
	Float M11;
	Float M12;
	Float M13;
	Float M14;
	Float M15;
	Float M21;
	Float M22;
	Float M23;
	Float M24;
	Float M25;
	Float M31;
	Float M32;
	Float M33;
	Float M34;
	Float M35;
	Float M41;
	Float M42;
	Float M43;
	Float M44;
	Float M45;
	Float M51;
	Float M52;
	Float M53;
	Float M54;
	Float M55;
}	
	
struct RDPMilGlyphBitmap 	
{	
	UINT32 Unused;
	INT16 HorOriginX;
	INT16 HorOriginY;
	INT16 HorAdvance;
	INT16 VerOriginX;
	INT16 VerOriginY;
	UINT16 Width;
	UINT16 Height;
	UINT16 Stride;
}

struct RDPMilPoint 	
{	
	Double X;
	Double Y;
}	
	
struct RDPMilPointF 	
{	
	Float X;
	Float Y;
}	
	
struct RDPMilQuaternion 	
{	
	Float X;
	Float Y;
	Float Z;
	Float W;
}	
	
struct RDPMilRect 	
{	
	Double X;
	Double Y;
	Double Width;
	Double Height;
}	
	
// Be called by 2.2.7.23 MILCMD_PUSH_OPACITY_MASK
struct RDPMilRectFRB 	
{	
	Float Left;
	Float Top;
	Float Right;
	Float Bottom;
}	
	
struct RDPMilRectI 	
{	
	INT32 Left;
	INT32 Top;
	INT32 Right;
	INT32 Bottom;
}	
	
struct RDPMilRectRB 	
{	
	Double Left;
	Double Top;
	Double Right;
	Double Bottom;
}	
	
//2.2.3.17 MilRenderOptions Structure
struct RDPMilRenderOptions 	
{	
	RDPMilRenderOptionFlags Flags;
	UINT32 EdgeMode = RDPMilEdgeModeTable(this);
	UINT32 InterpolationMode = RDPMilBitmapInterpolationModeTable(this);
	UINT32 CompositingMode = RDPMilCompositingModeTable(this);
	UINT32 BitmapScalingMode = RDPMilBitmapScalingModeTable(this);
	UINT32 ForcePacking;
}	
	
struct RDPMilSize 	
{	
	Double Width;
	Double Height;
}	
	
struct RDPMilWindowMargins 	
{	
	INT32 CxLeftWidth;
	INT32 CxRightWidth;
	INT32 CyTopHeight;
	INT32 CyBottomHeight;
}

struct RDPMilCtrlCmdVersionRequest
{
	UINT32 Unused0;
	UINT32 Unused1;
}

struct RDPMilCtrlCmdVersionAnnouncement
{
	UINT32 ProtocolVersion = FormatString("0x%08X (Must set to 0x200184C0)", this);
	UINT32 Unused;
}

struct RDPMilCtrlCmdOpenConnection
{
	UINT32 GenerationID;
	[Property.RDPCRConnectionType = RDPMilConnectionFlagsTable(this)]
	UINT32 Flags = RDPMilConnectionFlagsTable(this);
}

struct RDPMilCtrlCmdOpenChannel
{
	UINT32 ChannelHandle;
	UINT32 SourceChannelHandle;
}

struct RDPMilCtrlCmdCloseChannel
{
	UINT32 ChannelHandle;
	UINT32 Unused;
}

struct RDPMilCtrlCmdSubmitBatch
{
	UINT32 ChannelHandle;
	UINT32 Unused;
	while [FrameOffset < FrameLength]
	{
		struct Payload = RdpCrchannelMessagesTable(ControlCode)
		{
			UINT32 MessageSize;
			UINT32 ControlCode = RdpCrchannelMessagesTable(this);
			switch (ControlCode)
			{
				case 0x00000001: _struct RDPMilCmdTransportSyncFlush{};
				case 0x00000003: _struct RDPMilCmdTransportRoundtripRequest{};
				case 0x00000004: RDPMilCmdTransportAsyncFlush MilCmdTransportAsyncFlush;
				case 0x00000005: RDPMilCmdPartitionRegisterForNotifications MilCmdPartitionRegisterForNotifications;
				case 0x00000009: RDPMilCmdChannelRequesttier MilCmdChannelRequesttier;
				case 0x0000000C: RDPMilCmdChannelCreateResource MilCmdChannelCreateResource;
				case 0x0000000D: RDPMilCmdChannelDeleteResource MilCmdChannelDeleteResource;
				case 0x0000000E: RDPMilCmdChannelDuplicateHandle MilCmdChannelDuplicateHandle;
				case 0x00000010: RDPMilCmdBitmapPixels MilCmdBitmapPixels;
				case 0x00000012: RDPMilCmdDoubleResource MilCmdDoubleResource;
				case 0x00000013: RDPMilCmdColorResource MilCmdColorResource;
				case 0x00000014: RDPMilCmdPointResource MilCmdPointResource;
				case 0x00000015: RDPMilCmdRectResource MilCmdRectResource;
				case 0x00000016: RDPMilCmdSizeResource MilCmdSizeResource;
				case 0x00000017: RDPMilCmdMatrixResource MilCmdMatrixResource;
				case 0x00000018: RDPMilCmdPoint3DResource MilCmdPoint3DResource;
				case 0x00000019: RDPMilCmdVector3DResource MilCmdVector3DResource;
				case 0x0000001A: RDPMilCmdQuaternionResource MilCmdQuaternionResource;
				case 0x0000001B: RDPMilCmdColorTransformResource MilCmdColorTransformResource;
				case 0x0000001C: RDPMilCmdMediaPlayer MilCmdMediaPlayer;
				case 0x0000001D: RDPMilCmdRenderData MilCmdRenderData;
				case 0x0000001E: RDPMilCmdDrawingGroupSetcontent MilCmdDrawingGroupSetcontent;
				case 0x00000020: RDPMilCmdTileBrushSetsourcemoDifications MilCmdTileBrushSetsourcemoDifications;
				case 0x00000022: RDPMilCmdVisualSetOffset MilCmdVisualSetOffset;
				case 0x00000023: RDPMilCmdVisualSetTransform MilCmdVisualSetTransform;
				case 0x00000024: RDPMilCmdVisualSetClip MilCmdVisualSetClip;
				case 0x00000025: RDPMilCmdVisualSetAlpha MilCmdVisualSetAlpha;
				case 0x00000026: RDPMilCmdVisualSetRenderOptions MilCmdVisualSetRenderOptions;
				case 0x00000027: RDPMilCmdVisualSetContent MilCmdVisualSetContent;
				case 0x00000028: RDPMilCmdVisualSetAlphaMask MilCmdVisualSetAlphaMask;
				case 0x00000029: RDPMilCmdVisualRemoveAllChildren MilCmdVisualRemoveAllChildren;
				case 0x0000002A: RDPMilCmdVisualRemoveChild MilCmdVisualRemoveChild;
				case 0x0000002B: RDPMilCmdVisualInsertChildAt MilCmdVisualInsertChildAt;
				case 0x0000002C: RDPMilCmdVisualSetGuidelineCollection MilCmdVisualSetGuidelineCollection;
				case 0x0000002D: RDPMilCmdVisualSetColorTransform MilCmdVisualSetColorTransform;
				case 0x0000002E: RDPMilCmdViewport3DVisualSetCamera MilCmdViewport3DVisualSetCamera;
				case 0x0000002F: RDPMilCmdViewport3DVisualSetViewport MilCmdViewport3DVisualSetViewport;
				case 0x00000030: RDPMilCmdViewport3DVisualSet3DChild MilCmdViewport3DVisualSet3DChild;
				case 0x00000031: RDPMilCmdVisual3DSetContent MilCmdVisual3DSetContent;
				case 0x00000032: RDPMilCmdVisual3DSetTransform MilCmdVisual3DSetTransform;
				case 0x00000033: RDPMilCmdVisual3DRemoveAllChildren MilCmdVisual3DRemoveAllChildren;
				case 0x00000034: RDPMilCmdVisual3DRemoveChild MilCmdVisual3DRemoveChild;
				case 0x00000035: RDPMilCmdVisual3DInsertChildAt MilCmdVisual3DInsertChildAt;
				case 0x00000036: RDPMilCmdWindownodeCreate MilCmdWindownodeCreate;
				case 0x00000037: RDPMilCmdWindownodeDetach MilCmdWindownodeDetach;
				case 0x0000003A: RDPMilCmdWindownodeSetbounds MilCmdWindownodeSetbounds;
				case 0x0000003C: RDPMilCmdWindownodeUpdateSpriteHandle MilCmdWindownodeUpdateSpriteHandle;
				case 0x0000003E: RDPMilCmdWindownodeSetSpriteImage MilCmdWindownodeSetSpriteImage;
				case 0x00000040: RDPMilCmdWindownodeSetSpriteClip MilCmdWindownodeSetSpriteClip;
				case 0x00000041: RDPMilCmdWindownodeSetDxClip MilCmdWindownodeSetDxClip;
				case 0x00000042: RDPMilCmdWindownodeSetSourceModifications MilCmdWindownodeSetSourceModifications;
				case 0x00000043: RDPMilCmdWindownodeSetAlphaMargins MilCmdWindownodeSetAlphaMargins;
				case 0x00000044: RDPMilCmdWindownodeSetComposeonce MilCmdWindownodeSetComposeonce;
				case 0x00000045: RDPMilCmdWindownodeCopyCompositorOwnedResources MilCmdWindownodeCopyCompositorOwnedResources;
				case 0x00000046: RDPMilCmdWindownodeSetmaximizedClipMargins MilCmdWindownodeSetmaximizedClipMargins;
				case 0x00000047: RDPMilCmdWindownodeNotifyvisrgnUpdate MilCmdWindownodeNotifyvisrgnUpdate;
				case 0x00000049: RDPMilCmdHwndtargetCreate MilCmdHwndtargetCreate;
				case 0x0000004B: RDPMilCmdTargetUpdateWindowSettings MilCmdTargetUpdateWindowSettings;
				case 0x0000004D: RDPMilCmdTargetSetRoot MilCmdTargetSetRoot;
				case 0x0000004E: RDPMilCmdTargetSetClearColor MilCmdTargetSetClearColor;
				case 0x0000004F: RDPMilCmdTargetInvalidate MilCmdTargetInvalidate;
				case 0x00000051: RDPMilCmdTargetCapturebits MilCmdTargetCapturebits;
				case 0x00000053: RDPMilCmdGlyphCacheAddBitmaps MilCmdGlyphCacheAddBitmaps;
				case 0x00000055: RDPMilCmdGlyphcacheRemoveBitmaps MilCmdGlyphcacheRemoveBitmaps;
				case 0x00000056: RDPMilCmdGlyphRunCreate MilCmdGlyphRunCreate;
				case 0x00000057: RDPMilCmdGlyphRunAddrealization MilCmdGlyphRunAddrealization;
				case 0x00000058: RDPMilCmdGlyphRunRemoveRealization MilCmdGlyphRunRemoveRealization;
				case 0x00000059: RDPMilCmdGlyphRunGeometry MilCmdGlyphRunGeometry;
				case 0x0000005A: RDPMilCmdGdiSpriteBitmap MilCmdGdiSpriteBitmap;
				case 0x0000005B: RDPMilCmdGdiSpriteBitmapUpdatemargins MilCmdGdiSpriteBitmapUpdatemargins;
				case 0x0000005C: RDPMilCmdGdiSpriteBitmapTsupdatesection MilCmdGdiSpriteBitmapTsupdatesection;
				case 0x0000005D: RDPMilCmdGdiSpriteBitmapUnmapsection MilCmdGdiSpriteBitmapUnmapsection;
				case 0x00000067: RDPMilCmdMeshGeometry2DSetConstantOpacity MilCmdMeshGeometry2DSetConstantOpacity;
				case 0x00000087: RDPMilCmdAxisangleRotation3D MilCmdAxisangleRotation3D;
				case 0x00000088: RDPMilCmdQuaternionRotation3D MilCmdQuaternionRotation3D;
				case 0x00000089: RDPMilCmdScene3D MilCmdScene3D;
				case 0x0000008A: RDPMilCmdPerspectiveCamera MilCmdPerspectiveCamera;
				case 0x0000008B: RDPMilCmdOrthographicCamera MilCmdOrthographicCamera;
				case 0x0000008C: RDPMilCmdMatrixCamera MilCmdMatrixCamera;
				case 0x0000008D: RDPMilCmdModel3DGroup MilCmdModel3DGroup;
				case 0x0000008E: RDPMilCmdAmbientLight MilCmdAmbientLight;
				case 0x0000008F: RDPMilCmdDirectionAllight MilCmdDirectionAllight;
				case 0x00000090: RDPMilCmdPointLight MilCmdPointLight;
				case 0x00000091: RDPMilCmdSpotLight MilCmdSpotLight;
				case 0x00000092: RDPMilCmdGeometryModel3D MilCmdGeometryModel3D;
				case 0x00000093: RDPMilCmdMeshGeometry3D MilCmdMeshGeometry3D;
				case 0x00000094: RDPMilCmdMeshGeometry2D MilCmdMeshGeometry2D;
				case 0x00000095: RDPMilCmdGeometry2DGroup MilCmdGeometry2DGroup;
				case 0x00000096: RDPMilCmdMaterialGroup MilCmdMaterialGroup;
				case 0x00000097: RDPMilCmdDiffuseMaterial MilCmdDiffuseMaterial;
				case 0x00000098: RDPMilCmdSpecularMaterial MilCmdSpecularMaterial;
				case 0x00000099: RDPMilCmdEmissiveMaterial MilCmdEmissiveMaterial;
				case 0x0000009A: RDPMilCmdTransform3DGroup MilCmdTransform3DGroup;
				case 0x0000009B: RDPMilCmdTranslateTransform3D MilCmdTranslateTransform3D;
				case 0x0000009C: RDPMilCmdScaleTransform3D MilCmdScaleTransform3D;
				case 0x0000009D: RDPMilCmdRotateTransform3D MilCmdRotateTransform3D;
				case 0x0000009E: RDPMilCmdMatrixTransform3D MilCmdMatrixTransform3D;
				case 0x0000009F: RDPMilCmdBitmapEffectDrawing MilCmdBitmapEffectDrawing;
				case 0x000000A0: RDPMilCmdDrawingImage MilCmdDrawingImage;
				case 0x000000A1: RDPMilCmdCachedVisualImage MilCmdCachedVisualImage;
				case 0x000000A2: RDPMilCmdTransformGroup MilCmdTransformGroup;
				case 0x000000A3: RDPMilCmdTranslateTransform MilCmdTranslateTransform;
				case 0x000000A4: RDPMilCmdScaleTransform MilCmdScaleTransform;
				case 0x000000A5: RDPMilCmdSkewTransform MilCmdSkewTransform;
				case 0x000000A6: RDPMilCmdRotateTransform MilCmdRotateTransform;
				case 0x000000A7: RDPMilCmdMatrixTransform MilCmdMatrixTransform;
				case 0x000000A8: RDPMilCmdLineGeometry MilCmdLineGeometry;
				case 0x000000A9: RDPMilCmdRectangleGeometry MilCmdRectangleGeometry;
				case 0x000000AA: RDPMilCmdEllipseGeometry MilCmdEllipseGeometry;
				case 0x000000AB: RDPMilCmdGeometryGroup MilCmdGeometryGroup;
				case 0x000000AC: RDPMilCmdCombinedGeometry MilCmdCombinedGeometry;
				case 0x000000AD: RDPMilCmdPathGeometry MilCmdPathGeometry;
				case 0x000000AE: RDPMilCmdSolidColorBrush MilCmdSolidColorBrush;
				case 0x000000AF: RDPMilCmdLineargradientBrush MilCmdLineargradientBrush;
				case 0x000000B0: RDPMilCmdRadialgradientBrush MilCmdRadialgradientBrush;
				case 0x000000B1: RDPMilCmdImageBrush MilCmdImageBrush;
				case 0x000000B2: RDPMilCmdDrawingBrush MilCmdDrawingBrush;
				case 0x000000B3: RDPMilCmdVisualBrush MilCmdVisualBrush;
				case 0x000000B4: RDPMilCmdDashStyle MilCmdDashStyle;
				case 0x000000B5: RDPMilCmdPen MilCmdPen;
				case 0x000000B6: RDPMilCmdGeometryDrawing MilCmdGeometryDrawing;
				case 0x000000B7: RDPMilCmdGlyphRunDrawing MilCmdGlyphRunDrawing;
				case 0x000000B8: RDPMilCmdImageDrawing MilCmdImageDrawing;
				case 0x000000B9: RDPMilCmdVideoDrawing MilCmdVideoDrawing;
				case 0x000000BA: RDPMilCmdDrawingGroup MilCmdDrawingGroup;
				case 0x000000BB: RDPMilCmdGuidelineSet MilCmdGuidelineSet;				
			}
		}
//		ALIGN4 Pad;
	}
}

struct RDPMilCmdTransportAsyncFlush
{
	UINT32 ResponseToken;
	UINT32 ProcessToken = SHOULDBeSetToTable(this, "zero");
}

struct RDPMilCmdPartitionRegisterForNotifications
{
	bool Enable;
}

struct RDPMilCmdChannelRequesttier
{
	bool ReturnCommonMinimum;
}

struct RDPMilCmdChannelCreateResource
{
	UINT32 HNewResource;
	UINT32 ResType = RdpCrResourceTypesTable(this);
}

struct RDPMilCmdChannelDeleteResource
{
	UINT32 HNewResource;
	UINT32 ResType = RdpCrResourceTypesTable(this);
}

struct RDPMilCmdChannelDuplicateHandle
{
	UINT32 Original;
	UINT32 TargetChannel;
	UINT32 Duplicate;
}

struct RDPMilCmdBitmapPixels
{
	UINT32 TargetResource;
	UINT32 Width;
	UINT32 Height;
	UINT32 Format;
	UINT32 Stride;
	UINT32 Offset;
	UINT32 Unused;
	UINT32 UiPaletteColorCount;
	DOUBLE DpiX;
	DOUBLE DpiY;
	[Local.StartOffset = FrameOffset]
	BLOB(Height * Stride) ImageBitmap;
	Align(Local.StartOffset, 4) Padding1;
	BLOB(UiPaletteColorCount * 4) ImagePalette;
}

struct RDPMilCmdDoubleResource
{
	UINT32 TargetResource;
	DOUBLE Value;
}

struct RDPMilCmdColorResource
{
	UINT32 TargetResource;
	RDPMilColor Value;
}

struct RDPMilCmdPointResource
{
	UINT32 TargetResource;
	RDPMilPoint Value;
}

struct RDPMilCmdRectResource
{
	UINT32 TargetResource;
	RDPMilRect Value;
}

struct RDPMilCmdSizeResource
{
	UINT32 TargetResource;
	RDPMilSize Value;
}

struct RDPMilCmdMatrixResource
{
	UINT32 TargetResource;
	RDPMil3x2Matrix Value;
}

struct RDPMilCmdPoint3DResource
{
	UINT32 TargetResource;
	RDPMil3DPoint Value;
}

struct RDPMilCmdVector3DResource
{
	UINT32 TargetResource;
	RDPMil3DVector Value;
}

struct RDPMilCmdQuaternionResource
{
	UINT32 TargetResource;
	RDPMilQuaternion Value;
}

struct RDPMilCmdColorTransformResource
{
	UINT32 TargetResource;
	RDPMilColorTransform Value;
}

struct RDPMilCmdMediaPlayer
{
	UINT32 TargetResource;
	UINT64 Unused0;
	UINT32 HImageSource;
	UINT32 Unused1;
}

struct RDPMilCmdRenderData
{
	UINT32 TargetResource;
	UINT32 CbData;
	BLOB(CbData) RenderData;
}

struct RDPMilCmdDrawingGroupSetContent
{
	UINT32 TargetResource;
	UINT32 HContent;
}

struct RDPMilCmdTileBrushSetsourcemoDifications
{
	UINT32 TargetResource;
	UINT32 SourceModifications = RDPMilSourceModificationTable(this);
	RDPMilColor LowColorKey;
	RDPMilColor HighColorKey;
}

struct RDPMilCmdVisualSetOffset
{
	UINT32 TargetResource;
	Double OffsetX;
	Double OffsetY;
}

struct RDPMilCmdVisualSetTransform
{
	UINT32 TargetResource;
	UINT32 HTransform;
}

struct RDPMilCmdVisualSetClip
{
	UINT32 TargetResource;
	UINT32 HClip;
}

struct RDPMilCmdVisualSetAlpha
{
	UINT32 TargetResource;
	Double Alpha;
}

struct RDPMilCmdVisualSetRenderOptions
{
	UINT32 TargetResource;
	RDPMilRenderOptions MilRenderOptions;
}

struct RDPMilCmdVisualSetContent
{
	UINT32 TargetResource;
	UINT32 HContent;
}

struct RDPMilCmdVisualSetAlphaMask
{
	UINT32 TargetResource;
	UINT32 HAlphaMask;
}

struct RDPMilCmdVisualRemoveAllChildren
{
	UINT32 TargetResource;
}

struct RDPMilCmdVisualRemoveChild
{
	UINT32 TargetResource;
	UINT32 HChild;
}

struct RDPMilCmdVisualInsertChildAt
{
	UINT32 TargetResource;
	UINT32 HChild;
	UINT32 Index;
}

struct RDPMilCmdVisualSetGuidelineCollection
{
	UINT32 TargetResource;
	UINT16 CountX;
	UINT16 CountY;
	float HorizontalGuidelines[CountX];
	float VerticalGuidelines[CountY];
}

struct RDPMilCmdVisualSetColorTransform
{
	UINT32 TargetResource;
	UINT32 HTransform;
}

struct RDPMilCmdViewport3DVisualSetCamera
{
	UINT32 TargetResource;
	UINT32 HCamera;
}

struct RDPMilCmdViewport3DVisualSetViewport
{
	UINT32 TargetResource;
	RDPMilRect Viewport;
}

struct RDPMilCmdViewport3DVisualSet3DChild
{
	UINT32 TargetResource;
	UINT32 HChild;
}

struct RDPMilCmdVisual3DSetContent
{
	UINT32 TargetResource;
	UINT32 HContent;
}

struct RDPMilCmdVisual3DSetTransform
{
	UINT32 TargetResource;
	UINT32 HTransform;
}

struct RDPMilCmdVisual3DRemoveAllChildren
{
	UINT32 TargetResource;
}

struct RDPMilCmdVisual3DRemoveChild
{
	UINT32 TargetResource;
	UINT32 HChild;
}

struct RDPMilCmdVisual3DInsertChildAt
{
	UINT32 TargetResource;
	UINT32 HChild;
	UINT32 Index;
}

struct RDPMilCmdWindownodeCreate
{
	UINT32 TargetResource;
	UINT64 Hsprite;
	UINT64 Hwnd;
	UINT32 WindowTargetCachingMode = RDPMilWindowTargetCachingModeTable(this);
}

struct RDPMilCmdWindownodeDetach
{
	UINT32 TargetResource;
}

struct RDPMilCmdWindownodeSetbounds
{
	UINT32 TargetResource;
	RDPMilRectI RcWindow;
	RDPMilRectI RcClient;
	RDPMilRectI RcContent;
}

struct RDPMilCmdWindownodeUpdateSpriteHandle
{
	UINT32 TargetResource;
	UINT64 Hsprite;
}

struct RDPMilCmdWindownodeSetSpriteImage
{
	UINT32 TargetResource;
	UINT32 HImage;
}

struct RDPMilCmdWindownodeSetSpriteClip
{
	UINT32 TargetResource;
	BOOL FForDirtyAccum;
	UINT32 HClip;
}

struct RDPMilCmdWindownodeSetDxClip
{
	UINT32 TargetResource;
	UINT32 HClip;
}

struct RDPMilCmdWindownodeSetSourceModifications
{
	UINT32 TargetResource;
	UINT32 SourceModifications = RDPMilSourceModificationTable(this);
	RDPMilColor LowColorKey;
	RDPMilColor HighColorKey;
}

struct RDPMilCmdWindownodeSetAlphaMargins
{
	UINT32 TargetResource;
	RDPMilWindowMargins Margins;
}

struct RDPMilCmdWindownodeSetComposeonce
{
	UINT32 TargetResource;
	BOOL FComposeOnce;
}

struct RDPMilCmdWindownodeCopyCompositorOwnedResources
{
	UINT32 TargetResource;
	UINT32 HSourceNode;
}

struct RDPMilCmdWindownodeSetmaximizedClipMargins
{
	UINT32 TargetResource;
	RDPMilWindowMargins MaximizedClipMargins;
}

struct RDPMilCmdWindownodeNotifyvisrgnUpdate
{
	UINT32 TargetResource;
}

struct RDPMilCmdHwndtargetCreate
{
	UINT32 TargetResource;
	UINT64 Hwnd;
	UINT64 Unused0;
	UINT64 Unused1;
	UINT32 Width;
	UINT32 Height;
	RDPMilColor ClearColor;
	UINT32 Flags = RDPMilRTInitializationTable(this);
	UINT32 PreFilteringDisabled;
	GUID(true) Unused2;
	UINT32 Unused3;
	UINT32 Unused4;
	UINT32 Unused5;
}

struct RDPMilCmdTargetUpdateWindowSettings
{
	UINT32 TargetResource;
	RDPMilRectI WindowRect;
	UINT32 WindowLayerType = RDPMilWindowLayerTypeTable(this);
	UINT32 TransparencyMode = RDPMilTransparencyFlagsTable(this);
	Float ConstantAlpha;
	BOOL IsChild;
	BOOL IsRTL;
	BOOL RenderingEnabled;
	RDPMilColor ColorKey;
	UINT32 DisableCookie;
	UINT32 Unused;
}

struct RDPMilCmdTargetSetRoot
{
	UINT32 TargetResource;
	UINT32 HRoot;
}

struct RDPMilCmdTargetSetClearColor
{
	UINT32 TargetResource;
	RDPMilColor ClearColor;
}

struct RDPMilCmdTargetInvalidate
{
	UINT32 TargetResource;
	RDPMilRectI Rc;
}

struct RDPMilCmdTargetCapturebits
{
	UINT32 TargetResource;
	UINT32 X;
	UINT32 Y;
	UINT32 Width;
	UINT32 Height;
}

struct RDPMilCmdGlyphCacheAddBitmaps
{
	UINT32 TargetResource;
	UINT32 FontFaceHandle;
	UINT16 GlyphCount;
	RDPMilGlyphRunFlags FaceFlags;
	RDPMilGlyphBitmap BitmapsToAdd[GlyphCount];
}

struct RDPMilCmdGlyphcacheRemoveBitmaps
{
	UINT32 TargetResource;
	UINT32 FontFaceHandle;
	UINT32 GlyphCount;
	UINT16 BitmapsToRemove[GlyphCount];
}

struct RDPMilCmdGlyphRunCreate
{
	UINT32 TargetResource;
	UINT32 HGlyphCache;
	UINT16 GlyphCount;
	RDPMilGlyphRunFlags Flags;
	RDPMilPointF Origin;
	Float MuSize;
	UINT16 Ypositions[GlyphCount];
	UINT16 GlyphIndices[GlyphCount];
}

struct RDPMilCmdGlyphRunAddrealization
{
	UINT32 TargetResource;
	UINT32 RealizationHandle;
	UINT32 FontFaceHandle;
	Float ScaleX;
	Float ScaleY;
}

struct RDPMilCmdGlyphRunRemoveRealization
{
	UINT32 TargetResource;
	UINT32 RealizationHandle;
}

struct RDPMilCmdGlyphRunGeometry
{
	UINT32 TargetResource;
	UINT32 HGeometry;
}

struct RDPMilCmdGdiSpriteBitmap
{
	UINT32 TargetResource;
	UINT64 Hsprite;
}

struct RDPMilCmdGdiSpriteBitmapUpdatemargins
{
	UINT32 TargetResource;
	RDPMilWindowMargins Margins;
}

struct RDPMilCmdGdiSpriteBitmapTsupdatesection
{
	UINT32 TargetResource;
	UINT32 Width;
	UINT32 Height;
	UINT32 Format = RDPMilPixelFormatTable(this);
}

struct RDPMilCmdGdiSpriteBitmapUnmapsection
{
	UINT32 TargetResource;
}

struct RDPMilCmdMeshGeometry2DSetConstantOpacity
{
	UINT32 TargetResource;
	INT32 Opacity;
}

struct RDPMilCmdAxisangleRotation3D
{
	UINT32 TargetResource;
	Double Angle;
	RDPMil3DVector Axis;
	UINT32 HAxisAnimations;
	UINT32 HAngleAnimations;
}

struct RDPMilCmdQuaternionRotation3D
{
	UINT32 TargetResource;
	RDPMilQuaternion Quaternion;
	UINT32 HQuaternionAnimations;
}

struct RDPMilCmdScene3D
{
	UINT32 TargetResource;
	RDPMilRect Viewport;
	UINT32 Hmodels;
	UINT32 Hcamera;
	UINT32 HViewportAnimations;
}

struct RDPMilCmdPerspectiveCamera
{
	UINT32 TargetResource;
	Double NearPlaneDistance;
	Double FarPlaneDistance;
	Double FieldOfView;
	RDPMil3DPoint Position;
	UINT32 Htransform;
	RDPMil3DVector LookDirection;
	UINT32 HNearPlaneDistanceAnimations;
	RDPMil3DVector UpDirection;
	UINT32 HFarPlaneDistanceAnimations;
	UINT32 HPositionAnimations;
	UINT32 HLookDirectionAnimations;
	UINT32 HUpDirectionAnimations;
	UINT32 HFieldOfViewAnimations;
}

struct RDPMilCmdOrthographicCamera
{
	UINT32 TargetResource;
	Double NearPlaneDistance;
	Double FarPlaneDistance;
	Double Width;
	RDPMil3DPoint Position;
	UINT32 Htransform;
	RDPMil3DVector LookDirection;
	UINT32 HNearPlaneDistanceAnimations;
	RDPMil3DVector UpDirection;
	UINT32 HFarPlaneDistanceAnimations;
	UINT32 HPositionAnimations;
	UINT32 HLookDirectionAnimations;
	UINT32 HUpDirectionAnimations;
	UINT32 HWidthAnimations;
}

struct RDPMilCmdMatrixCamera
{
	UINT32 TargetResource;
	RDPMil4x4Matrix ViewMatrix;
	RDPMil4x4Matrix ProjectionMatrix;
	UINT32 Htransform;
}

struct RDPMilCmdModel3DGroup
{
	UINT32 TargetResource;
	UINT32 Htransform;
	UINT32 ChildrenCollectionSize;
	UINT32 ChildrenCollection[ChildrenCollectionSize / 4];
}

struct RDPMilCmdAmbientLight
{
	UINT32 TargetResource;
	RDPMilColor Color;
	UINT32 Htransform;
	UINT32 HColorAnimations;
}

struct RDPMilCmdDirectionAllight
{
	UINT32 TargetResource;
	RDPMilColor Color;
	RDPMil3DVector Direction;
	UINT32 Htransform;
	UINT32 HColorAnimations;
	UINT32 HDirectionAnimations;
}

struct RDPMilCmdPointLight
{
	UINT32 TargetResource;
	RDPMilColor Color;
	Double Range;
	Double ConstantAttenuation;
	Double LinearAttenuation;
	Double QuadraticAttenuation;
	RDPMil3DPoint Position;
	UINT32 Htransform;
	UINT32 HColorAnimations;
	UINT32 HPositionAnimations;
	UINT32 HRangeAnimations;
	UINT32 HConstantAttenuationAnimations;
	UINT32 HLinearAttenuationAnimations;
	UINT32 HQuadraticAttenuationAnimations;
}

struct RDPMilCmdSpotLight
{
	UINT32 TargetResource;
	RDPMilColor Color;
	Double Range;
	Double ConstantAttenuation;
	Double LinearAttenuation;
	Double QuadraticAttenuation;
	Double OuterConeAngle;
	Double InnerConeAngle;
	RDPMil3DPoint Position;
	UINT32 Htransform;
	RDPMil3DVector Direction;
	UINT32 HColorAnimations;
	UINT32 HPositionAnimations;
	UINT32 HRangeAnimations;
	UINT32 HConstantAttenuationAnimations;
	UINT32 HLinearAttenuationAnimations;
	UINT32 HQuadraticAttenuationAnimations;
	UINT32 HDirectionAnimations;
	UINT32 HOuterConeAngleAnimations;
	UINT32 HInnerConeAngleAnimations;
}

struct RDPMilCmdGeometryModel3D
{
	UINT32 TargetResource;
	UINT32 Htransform;
	UINT32 Hgeometry;
	UINT32 Hmaterial;
	UINT32 HbackMaterial;
}

struct RDPMilCmdMeshGeometry3D
{
	UINT32 TargetResource;
	UINT32 PositionsCollectionSize;
	UINT32 NormalsCollectionSize;
	UINT32 TextureCoordinatesCollectionSize;
	UINT32 TriangleIndicesCollectionSize;
	UINT32 BlendColorsCollectionSize;
	RDPMil3DPoint PositionsCollection[PositionsCollectionSize / 12];
	RDPMil3DVector NormalsCollection[NormalsCollectionSize /12];
	RDPMilPoint TextureCoordinatesCollection[TextureCoordinatesCollectionSize / 16];
	UINT32 TriangleIndicesCollection[TriangleIndicesCollectionSize / 4];
	UINT32 BlendColorsCollection[BlendColorsCollectionSize / 4];
}

struct RDPMilCmdMeshGeometry2D
{
	UINT32 TargetResource;
	UINT32 PositionsCollectionSize;
	UINT32 TextureCoordinatesCollectionSize;
	UINT32 VertexOpacitiesCollectionSize;
	UINT32 TriangleIndicesCollectionSize;
	RDPMil3DPoint PositionsCollection[PositionsCollectionSize / 12];
	RDPMilPoint TextureCoordinatesCollection[TextureCoordinatesCollectionSize /16];
	UINT32 VertexOpacitiesCollection[VertexOpacitiesCollectionSize / 4];
	UINT32 TriangleIndicesCollection[TriangleIndicesCollectionSize / 4];
}

struct RDPMilCmdGeometry2DGroup
{
	UINT32 TargetResource;
	UINT32 ChildrenCollectionSize;
	UINT32 ChildrenCollection[ChildrenCollectionSize / 4];
}

struct RDPMilCmdMaterialGroup
{
	UINT32 TargetResource;
	UINT32 ChildrenCollectionSize;
	UINT32 ChildrenCollection[ChildrenCollectionSize / 4];
}

struct RDPMilCmdDiffuseMaterial
{
	UINT32 TargetResource;
	RDPMilColor Color;
	RDPMilColor AmbientColor;
	UINT32 Hbrush;
}

struct RDPMilCmdSpecularMaterial
{
	UINT32 TargetResource;
	RDPMilColor Color;
	Double SpecularPower;
	UINT32 Hbrush;
}

struct RDPMilCmdEmissiveMaterial
{
	UINT32 TargetResource;
	RDPMilColor Color;
	UINT32 Hbrush;
}

struct RDPMilCmdTransform3DGroup
{
	UINT32 TargetResource;
	UINT32 ChildrenCollectionSize;
	UINT32 ChildrenCollection[ChildrenCollectionSize / 4];
}

struct RDPMilCmdTranslateTransform3D
{
	UINT32 TargetResource;
	Double OffsetX;
	Double OffsetY;
	Double OffsetZ;
	UINT32 HOffsetXAnimations;
	UINT32 HOffsetYAnimations;
	UINT32 HOffsetZAnimations;
}

struct RDPMilCmdScaleTransform3D
{
	UINT32 TargetResource;
	Double ScaleX;
	Double ScaleY;
	Double ScaleZ;
	Double CenterX;
	Double CenterY;
	Double CenterZ;
	UINT32 HScaleXAnimations;
	UINT32 HScaleYAnimations;
	UINT32 HScaleZAnimations;
	UINT32 HCenterXAnimations;
	UINT32 HCenterYAnimations;
	UINT32 HCenterZAnimations;
}

struct RDPMilCmdRotateTransform3D
{
	UINT32 TargetResource;
	Double CenterX;
	Double CenterY;
	Double CenterZ;
	UINT32 HCenterXAnimations;
	UINT32 HCenterYAnimations;
	UINT32 HCenterZAnimations;
	UINT32 Hrotation;
}

struct RDPMilCmdMatrixTransform3D
{
	UINT32 TargetResource;
	RDPMil4x4Matrix Matrix;
}

struct RDPMilCmdBitmapEffectDrawing
{
	UINT32 TargetResource;
	UINT32 WorldTransformsCollectionSize;
	UINT32 DrawingsCollectionSize;
	UINT32 WorldTransformsCollection[WorldTransformsCollectionSize / 4];
	UINT32 DrawingsCollection[DrawingsCollectionSize / 4];
}

struct RDPMilCmdDrawingImage
{
	UINT32 TargetResource;
	UINT32 HDrawing;
}

struct RDPMilCmdCachedVisualImage
{
	UINT32 TargetResource;
	RDPMilRect Viewbox;
	RDPMilSize RealizationSize;
	UINT32 HVisual;
	UINT32 ViewboxUnits = RDPMilBrushMappingModeTable(this);
	UINT32 HViewboxAnimations;
	UINT32 HRealizationSizeAnimations;
}

struct RDPMilCmdTransformGroup
{
	UINT32 TargetResource;
	UINT32 ChildrenCollectionSize;
	UINT32 ChildrenCollection[ChildrenCollectionSize / 4];
}

struct RDPMilCmdTranslateTransform
{
	UINT32 TargetResource;
	Double X;
	Double Y;
	UINT32 HXAnimations;
	UINT32 HYAnimations;
}

struct RDPMilCmdScaleTransform
{
	UINT32 TargetResource;
	Double ScaleX;
	Double ScaleY;
	Double CenterX;
	Double CenterY;
	UINT32 HScaleXAnimations;
	UINT32 HScaleYAnimations;
	UINT32 HCenterXAnimations;
	UINT32 HCenterYAnimations;
}

struct RDPMilCmdSkewTransform
{
	UINT32 TargetResource;
	Double AngleX;
	Double AngleY;
	Double CenterX;
	Double CenterY;
	UINT32 HAngleXAnimations;
	UINT32 HAngleYAnimations;
	UINT32 HCenterXAnimations;
	UINT32 HCenterYAnimations;
}

struct RDPMilCmdRotateTransform
{
	UINT32 TargetResource;
	Double Angle;
	Double CenterX;
	Double CenterY;
	UINT32 HAngleAnimations;
	UINT32 HCenterXAnimations;
	UINT32 HCenterYAnimations;
}

struct RDPMilCmdMatrixTransform
{
	UINT32 TargetResource;
	RDPMil3x2Matrix Matrix;
	UINT32 HMatrixAnimations;
}

struct RDPMilCmdLineGeometry
{
	UINT32 TargetResource;
	RDPMilPoint StartPoint;
	RDPMilPoint EndPoint;
	INT32 HTransform;
	UINT32 HStartPointAnimations;
	UINT32 HEndPointAnimations;
}

struct RDPMilCmdRectangleGeometry
{
	UINT32 TargetResource;
	Double RadiusX;
	Double RadiusY;
	RDPMilRect Rect;
	UINT32 HTransform;
	UINT32 HRadiusXAnimations;
	UINT32 HRadiusYAnimations;
	UINT32 HRectAnimations;
}

struct RDPMilCmdEllipseGeometry
{
	UINT32 TargetResource;
	Double RadiusX;
	Double RadiusY;
	RDPMilPoint Center;
	UINT32 HTransform;
	UINT32 HRadiusXAnimations;
	UINT32 HRadiusYAnimations;
	UINT32 HCenterAnimations;
}

struct RDPMilCmdGeometryGroup
{
	UINT32 TargetResource;
	UINT32 HTransform;
	UINT32 FillRule = RDPMilFillRuleTable(this);
	UINT32 ChildrenCollectionSize;
	UINT32 ChildrenCollection[ChildrenCollectionSize / 4];
}

struct RDPMilCmdCombinedGeometry
{
	UINT32 TargetResource;
	UINT32 HTransform;
	UINT32 GeometryCombineMode = RDPMilGeometryCombineModeTable(this);
	UINT32 HGeometry1;
	UINT32 HGeometry2;
}

struct RDPMilCmdPathGeometry
{
	UINT32 TargetResource;
	UINT32 HTransform;
	UINT32 FillRule = RDPMilFillRuleTable(this);
	UINT32 PathSize;
	RDPMilPathgeometry PathData;
}

struct RDPMilCmdSolidColorBrush
{
	UINT32 TargetResource;
	Double Opacity;
	RDPMilColor Color;
	UINT32 HOpacityAnimations;
	UINT32 HTransform;
	UINT32 HRelativeTransform;
	UINT32 HColorAnimations;
}

struct RDPMilCmdLineargradientBrush
{
	UINT32 TargetResource;
	Double Opacity;
	RDPMilPoint StartPoint;
	RDPMilPoint EndPoint;
	UINT32 HOpacityAnimations;
	UINT32 HTransform;
	UINT32 HRelativeTransform;
	UINT32 ColorInterpolationMode = RDPMilColorInterpolationModeTable(this);
	UINT32 MappingMode = RDPMilBrushMappingModeTable(this);
	UINT32 SpreadMethod = RDPMilGradientSpreadMethodTable(this);
	UINT32 GradientStopsCollectionSize;
	UINT32 HStartPointAnimations;
	UINT32 HEndPointAnimations;
	UINT32 GradientStopsCollection[GradientStopsCollectionSize / 4];
}

struct RDPMilCmdRadialgradientBrush
{
	UINT32 TargetResource;
	Double Opacity;
	RDPMilPoint Center;
	Double RadiusX;
	Double RadiusY;
	RDPMilPoint GradientOrigin;
	UINT32 HOpacityAnimations;
	UINT32 HTransform;
	UINT32 HRelativeTransform;
	UINT32 ColorInterpolationMode = RDPMilColorInterpolationModeTable(this);
	UINT32 MappingMode = RDPMilBrushMappingModeTable(this);
	UINT32 SpreadMethod = RDPMilGradientSpreadMethodTable(this);
	UINT32 GradientStopsCollectionSize;
	UINT32 HCenterAnimations;
	UINT32 HRadiusXAnimations;
	UINT32 HRadiusYAnimations;
	UINT32 HGradientOriginAnimations;
	UINT32 GradientStopsCollection[GradientStopsCollectionSize / 4];
}

struct RDPMilCmdImageBrush
{
	UINT32 TargetResource;
	Double Opacity;
	RDPMilRect Viewport;
	RDPMilRect Viewbox;
	Double CacheInvalidationThresholdMinimum;
	Double CacheInvalidationThresholdMaximum;
	UINT32 HOpacityAnimations;
	UINT32 HTransform;
	UINT32 HRelativeTransform;
	UINT32 ViewportUnits = RDPMilBrushMappingModeTable(this);
	UINT32 ViewboxUnits = RDPMilBrushMappingModeTable(this);
	UINT32 HViewportAnimations;
	UINT32 HViewboxAnimations;
	UINT32 Stretch = RDPMilStretchTable(this);
	UINT32 TileMode = RDPMilTileModeTable(this);
	UINT32 AlignmentX = RDPMilHorizontalAlignmentTable(this);
	UINT32 AlignmentY = RDPMilVerticalAlignmentTable(this);
	UINT32 CachingHint = RDPMilCachingHintTable(this);
	UINT32 HImageSource;
}

struct RDPMilCmdDrawingBrush
{
	UINT32 TargetResource;
	Double Opacity;
	RDPMilRect Viewport;
	RDPMilRect Viewbox;
	Double CacheInvalidationThresholdMinimum;
	Double CacheInvalidationThresholdMaximum;
	UINT32 HOpacityAnimations;
	UINT32 HTransform;
	UINT32 HRelativeTransform;
	UINT32 ViewportUnits = RDPMilBrushMappingModeTable(this);
	UINT32 ViewboxUnits = RDPMilBrushMappingModeTable(this);
	UINT32 HViewportAnimations;
	UINT32 HViewboxAnimations;
	UINT32 Stretch = RDPMilStretchTable(this);
	UINT32 TileMode = RDPMilTileModeTable(this);
	UINT32 AlignmentX = RDPMilHorizontalAlignmentTable(this);
	UINT32 AlignmentY = RDPMilVerticalAlignmentTable(this);
	UINT32 CachingHint = RDPMilCachingHintTable(this);
	UINT32 HDrawing;
}

struct RDPMilCmdVisualBrush
{
	UINT32 TargetResource;
	Double Opacity;
	RDPMilRect Viewport;
	RDPMilRect Viewbox;
	Double CacheInvalidationThresholdMinimum;
	Double CacheInvalidationThresholdMaximum;
	UINT32 HOpacityAnimations;
	UINT32 HTransform;
	UINT32 HRelativeTransform;
	UINT32 ViewportUnits = RDPMilBrushMappingModeTable(this);
	UINT32 ViewboxUnits = RDPMilBrushMappingModeTable(this);
	UINT32 HViewportAnimations;
	UINT32 HViewboxAnimations;
	UINT32 Stretch = RDPMilStretchTable(this);
	UINT32 TileMode = RDPMilTileModeTable(this);
	UINT32 AlignmentX = RDPMilHorizontalAlignmentTable(this);
	UINT32 AlignmentY = RDPMilVerticalAlignmentTable(this);
	UINT32 CachingHint = RDPMilCachingHintTable(this);
	UINT32 HVisual;
}

struct RDPMilCmdDashStyle
{
	UINT32 TargetResource;
	Double Offset;
	UINT32 HOffsetAnimations;
	UINT32 DashesCollectionSize;
	Double DashesCollection[DashesCollectionSize / 8];
}

struct RDPMilCmdPen
{
	UINT32 TargetResource;
	Double Thickness;
	Double MiterLimit;
	UINT32 HBrush;
	UINT32 HThicknessAnimations;
	UINT32 StartLineCap = RDPMilPenLineCapTable(this);
	UINT32 EndLineCap = RDPMilPenLineCapTable(this);
	UINT32 DashCap = RDPMilPenLineCapTable(this);
	UINT32 LineJoin = RDPMilPenLineJoinTable(this);
	UINT32 HDashStyle;
}

struct RDPMilCmdGeometryDrawing
{
	UINT32 TargetResource;
	UINT32 HBrush;
	UINT32 HPen;
	UINT32 HGeometry;
}

struct RDPMilCmdGlyphRunDrawing
{
	UINT32 TargetResource;
	UINT32 HGlyphRun;
	UINT32 HForegroundBrush;
}

struct RDPMilCmdImageDrawing
{
	UINT32 TargetResource;
	RDPMilRect Rect;
	UINT32 HImageSource;
	UINT32 HRectAnimations;
}

struct RDPMilCmdVideoDrawing
{
	UINT32 TargetResource;
	RDPMilRect Rect;
	UINT32 HPlayer;
	UINT32 HRectAnimations;
}

struct RDPMilCmdDrawingGroup
{
	UINT32 TargetResource;
	Double Opacity;
	UINT32 ChildrenCollectionSize;
	UINT32 HClipGeometry;
	UINT32 HOpacityAnimations;
	UINT32 HOpacityMask;
	UINT32 HTransform;
	UINT32 HGuidelineSet;
	UINT32 EdgeMode = RDPMilEdgeModeTable(this);
	UINT32 BitmapScalingMode = RDPMilBitmapScalingModeTable(this);
	UINT32 ChildrenCollection[ChildrenCollectionSize / 4];
}

struct RDPMilCmdGuidelineSet
{
	UINT32 TargetResource;
	UINT32 GuidelinesXCollectionSize;
	UINT32 GuidelinesYCollectionSize;
	BOOL IsDynamic;
	Double GuidelinesXCollection[GuidelinesXCollectionSize / 8];
	Double GuidelinesYCollection[GuidelinesYCollectionSize / 8];
}

struct RDPMilPathGeometry
{
	UINT32 MessageSize;
	RDPMilPathGeometryFlags Flags;
	RDPMilRectRB Bounds;
	UINT32 FigureCount;
	UINT32 Unused;
	RDPMilPathfigure Figures[FigureCount];
}

struct RDPMilPathFigure
{
	UINT32 BackSize;
	RDPMilPathFigureFlags Flags;
	UINT32 SegmentCount;
	UINT32 MessageSize;
	RDPMilPoint StartPoint;
	UINT32 OffsetToLastSegment;
	UINT32 Unused;
	RDPMilSegment Segments[SegmentCount];
}

struct RDPMilSegment
{
	UINT32 Type = RDPMilSegmentTypeTable(this);
	RDPMilPathSegmentFlags Flags;
	UINT32 BackSize;
	switch (Type)
	{
		case 1: RDPMilSegmentLine MilSegmentLine;
		case 2: RDPMilSegmentBezier MilSegmentBezier;
		case 3: RDPMilSegmentQuadRaticBezier MilSegmentQuadRaticBezier;
		case 4: RDPMilSegmentArc MilSegmentArc;
		case 5:
		case 6:
		case 7: RDPMilSegmentPoly MilSegmentPoly;
	}
}

struct RDPMilSegmentLine
{
	UINT32 Unused;
	RDPMilPoint Point;
}

struct RDPMilSegmentBezier
{
	UINT32 Unused;
	RDPMilPoint Point1;
	RDPMilPoint Point2;
	RDPMilPoint Point3;
}

struct RDPMilSegmentQuadRaticBezier
{
	UINT32 Unused;
	RDPMilPoint Point1;
	RDPMilPoint Point2;
}

struct RDPMilSegmentArc
{
	UINT32 LargeArc;
	RDPMilPoint Point;
	RDPMilSize Size;
	DOUBLE XRotation;
	UINT32 Sweep = this ? "Clockwise" : "Counter-clockwise";
	UINT32 Unused;
}

struct RDPMilSegmentPoly
{
	UINT32 Count;
	RDPMilPoint ControlPoints[Count];
}



// TODO: should be removed, client to server
//struct RDPMilCtrlCmdConnectionNotification
//{
//	UINT32 Unused0;
//	UINT32 Unused1;
//	//TODO: notification
//}
//
//struct RDPMilCtrlCmdChannelNotification
//{
//	UINT32 ChannelHandle;
//	UINT32 Unused;
//	//TODO: notification
//}
//
//struct RDPMilCtrlCmdConnectionBroadcast
//{
//	UINT32 Unused0
//	UINT32 Unused1
//	//TODO: notification
//}

Table RDPCrPacketControlCodeTable(code)
{
	switch (code)
	{
		case 0x01: "MilCtrlCmdVersionRequest";
		case 0x02: "RDPMilCtrlCmdVersionAnnouncement";
		case 0x03: "RDPMilCtrlCmdOpenConnection";
		case 0x06: "RDPMilCtrlCmdOpenChannel";
		case 0x07: "RDPMilCtrlCmdCloseChannel";
		case 0x08: "RDPMilCtrlCmdSubmitBatch";
		case 0x0A: "RDPMilCtrlCmdConnectionNotification";
		case 0x0B: "RDPMilCtrlCmdChannelNotification";
		case 0x0C: "RDPMilCtrlCmdConnectionBroadcast";
		default: FormatString("Undefined Value(%d)", code);
	}
}

