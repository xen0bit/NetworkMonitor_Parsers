//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  H.245 Protocol
//#
//#  Details:                Control protocol for multimedia communication
//#
//#  Public References:      H.323 Pack-based multimedia communications systems.pdf (ITU.org)
//#                          H.323 Amendment1.pdf (ITU.org)
//#                          H.323 Amendment2.pdf (ITU.org)
//#
//#  Microsoft References:   [MS-H245]: H.245 Protocol: Microsoft Extensions
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 6/18/2009
//#
//####

[DataTypeBitAlign]
Protocol H245 = FormatString("H.245.0: %s%s%s%s",
                             Message.ToString,
                             MSExtensionExist ? ", Microsoft Extension: the 16-kHz DVI4 codec is supported" : "",
                             RTPAddPort ? ", Media Channel:" + RTPAddPort : "",
                             RTCPAddPort ? ", Media Control Channel:" + RTCPAddPort : "") 
{
    MultimediaSystemControlMessage Message;
}

[DataTypeBitAlign]
struct V42bis // SEQUENCE   
{
    UINT8 V42bisExtension:1;
           
    AsnPerConstrainedInteger(1, 65536) numberOfCodewords;
    AsnPerConstrainedInteger(1, 256) maximumStringLength;
    
    //Maybe extension here
}

[DataTypeBitAlign]
struct CompressionType   // CHOICE  
{
	  UINT8 CompressionTypeExtension:1;
    switch
    {
        case CompressionTypeExtension:
             _struct ExtensionChoice
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                 AsnPerLengthDeterminant Length;
             }
        default:
             _struct NoneExtension
             {
                 AsnPerConstrainedInteger(0, 0) ChoiceValue;             	   
             	   switch (ConstrainedValue)
             	   {
        	           case 0: V42bis v42bis;
        	       }
        	   }
    }
}

[DataTypeBitAlign]
struct DataProtocolCapability = H245DataProtocolCapabilityTable(DataProtocolCapabilityExtension, DataProtocolCapabilityChoiceValue)   // CHOICE  
{
	UINT8 DataProtocolCapabilityExtension:1;
    switch
    {
        case DataProtocolCapabilityExtension:
             _struct ExtensionChoice
             {
             	 [Post.DataProtocolCapabilityChoiceValue = PERSmallNumber]
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245DataProtocolCapabilityTable(DataProtocolCapabilityExtension, DataProtocolCapabilityChoiceValue);
                 AsnPerLengthDeterminant Length;
                 [ExtensionEndoffset = FrameOffset + PERLengthValue]
                 switch( PERSmallNumber )
                 {
                     case 4: 
                            struct v76wCompression  //CHOICE
                            {
                                UINT8 V76wCompressionExtension:1;
                                switch
                                {
                                    case V76wCompressionExtension:
                                         _struct ExtensionChoice
                                         {
                                             //AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H225DataProtocolCapabilityExtensionTable( PER_SmallNumber );
                                             //AsnPerLengthDeterminant Length;
                                             // empty
                                         };
                                    default:
                                         _struct NoneExtension
                                         {
                                             AsnPerConstrainedInteger(0,2) ChoiceValue;             	   
                                         	   switch (ConstrainedValue)
                                         	   {
                                    	           case 0: CompressionType transmitCompression;
                                    	           case 1: CompressionType receiveCompression;
                                    	           case 2: CompressionType transmitAndReceiveCompression;
                                    	       }
                                    	   }
                                }    	           
                            }//End CHOICE
                 }
                 switch
                 {
                     case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
                 }
             };
        default:
             _struct NoneExtension
             {
             	   [Post.DataProtocolCapabilityChoiceValue = PERSmallNumber]
                 AsnPerConstrainedInteger(0,6) ChoiceValue = H245DataProtocolCapabilityTable( DataProtocolCapabilityExtension, DataProtocolCapabilityChoiceValue );             	   
             	   switch (ConstrainedValue)
             	   {
        	           case 0: H245NonStandardParameter nonStandardParameter;
        	       }
        	   }
    }
}

[DataTypeBitAlign]
struct H245TransportAddress = TransportAdd
{
    UINT8  H245TransportAddressExtension:1;
    switch
    {
        case H245TransportAddressExtension:
            _struct ExtensionChoice
            {
            }
        default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,1) ChoiceValue;
                switch( ConstrainedValue )
                {
                    case 0: UnicastAddress unicastAddress;
                    case 1: MulticastAddress multicastAddress;
                }
            };
    }
}

Table UnicastAddressroutingTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "strict";
		case (ExtensionBit == 0) && (Choice== 1): "loose";
	}
}

[DataTypeBitAlign]
struct UnicastAddress = TransportAdd
{
    UINT8 UnicastAddressExtension:1;
    switch
    {
        case UnicastAddressExtension:
            _struct ExtensionChoice
            {   
                AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                AsnPerLengthDeterminant Length;
                [UnicastAddressEnd = FrameOffset + PERLengthValue]
                switch( PERSmallNumber )
                {
                    case 0: AsnPerOctetString(1, 20) nsap;
                    case 1: H245NonStandardParameter nonStandardAddress;
                }
                switch
                {
                    case FrameBitOffset < UnicastAddressEnd * 8:
                        AsnPerPadding(UnicastAddressEnd * 8 - FrameBitOffset) Padding;
                }    
            }
        default: _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,4) ChoiceValue;
                     switch( ConstrainedValue )
                     {
                         case 0: 
                                 [TransportAdd = this.ToString]
                                 struct iPAddress = FormatString("%s:%d",network.ToString,tsapIdentifier)
                                 {
                                     UINT8 iPAddressExtension:1;
                                     AsnPerAlign align;
                                     [property.H245UnicastIPv4Address]
                                     IPv4Address network;
                                     [property.H245UnicastTsapIdentifier]
                                     UINT16 tsapIdentifier;
                                 };
                         case 1: 
                                 [TransportAdd = this.ToString]
                                 struct iPXAddress = FormatString("%s, %s, %s",
                                                                  node.ToString,
                                                                  netnum.ToString,
                                                                  tsapIdentifier.ToString)
                                 {
                                     UINT8 iPXAddressExtension:1;
                                     AsnPerOctetString(6,6) node = IPXNodeFormatTable( this );
                                     AsnPerOctetString(4,4) netnum = IPXNetworkNumberTable( this );
                                     AsnPerOctetString(2,2) tsapIdentifier = IPXSocketNumberTable( this );
                                 };
                         case 2: 
                                 [TransportAdd = this.ToString]
                                 struct iP6Address = FormatString("%s:%d",
                                                                  network.ToString,
                                                                  tsapIdentifier)
                                 {
                                     UINT8 iP6AddressExtension:1;
                                     AsnPerAlign align;
                                     IPv6Address network;
                                     UINT16 tsapIdentifier;
                                 };
                         case 3: AsnPerOctetString(16,16) netBios;
                         case 4: struct iPSourceRouteAddress
                                 {
                                     UINT8 iPSourceRouteAddressExtension:1;
                                     struct routing
                                     {
										                     [Post.routingChoice = ConstrainedValue]
                                         AsnPerConstrainedInteger(0,1) ChoiceValue = UnicastAddressroutingTable(0, routingChoice);
                                     };
                                     AsnPerAlign align;
                                     IPv4Address network;
                                     AsnPerConstrainedInteger(0,65535) tsapIdentifier;
                                     [Post.routeSize = PERLengthValue]
                                     AsnPerLengthDeterminant Size;
                                     IPv4Address route[routeSize];
                                 };
                     }
                 };
    }
};

[DataTypeBitAlign]
struct MulticastAddress = TransportAdd
{
    UINT8 MulticastAddressExtension:1;
    switch
    {
        case MulticastAddressExtension:
            _struct ExtensionChoice
            {   
                AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                AsnPerLengthDeterminant Length;
                [MulticastAddressEnd = FrameOffset + PERLengthValue]
                switch( PERSmallNumber )
                {
                    case 0: AsnPerOctetString(1, 20) nsap;
                    case 1: H245NonStandardParameter nonStandardAddress;
                }
                switch
                {
                    case FrameBitOffset < MulticastAddressEnd * 8:
                        AsnPerPadding(MulticastAddressEnd * 8 - FrameBitOffset) Padding;
                }    
            }
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,1) ChoiceValue;
            switch( ConstrainedValue )
            {
                case 0: 
                        [TransportAdd = this.ToString]
                        struct iPAddress = FormatString("%s:%d",network.ToString,tsapIdentifier)
                        {
                            UINT8 iPAddressExtension:1;
                            AsnPerAlign align;
                            IPv4Address network;
                            UINT16 tsapIdentifier;
                        };
                case 1: 
                        [TransportAdd = this.ToString]
                        struct iP6Address = FormatString("%s:%d",
                                                         network.ToString,
                                                         tsapIdentifier)
                        {
                            UINT8 iP6AddressExtension:1;
                            AsnPerAlign align;
                            IPv6Address network;
                            UINT16 tsapIdentifier;
                        };
            }
        };
    }
}
    
[DataTypeBitAlign]
struct H245NonStandardParameter
{
    H245NonStandardIdentifier nonStandardIdentifier;
    [MSExtensionDataExist = ( CONTEXT_HANDLE(FrameData,FrameOffset+1) == 0x11000100803E0000401F00000100040002001400 ? 1 : 0 ) ]
    AsnPerOctetString(-1, -1) data;
}

[DataTypeBitAlign]
struct H245NonStandardIdentifier
{
    AsnPerConstrainedInteger(0,1) ChoiceValue;
    switch( ConstrainedValue )
    {
        case 0: 
              [post.MSExtensionOIDExist = ( ASNOID == "1.3.6.1.4.1.311.19.2" ) ?  1 : 0 ]
              AsnPerObjectIdentifier object;
        case 1: struct h221NonStandard = FormatString("%s %s",H221ManufacturerCodeTable(H221ManufacturerCode), t35CountryCode.ToString)
                {
                    AsnPerConstrainedInteger(0,255) t35CountryCode = T35CountryCodeTable( ConstrainedValue );
                    [H221ManufacturerCode = UINT32(FrameData,offset-1)]
                    AsnPerConstrainedInteger(0,255) t35Extension;
                    AsnPerConstrainedInteger(0,65535) manufactureCode;
                };
    }
}


Table H245MultimediaSystemControlMessageTypeTable( type )
{
    switch( type )
    {
        case 0: "RequestMessage";
        case 1: "ResponseMessage";
        case 2: "CommandMessage";
        case 3: "IndicationMessage";
        default: FormatString("%d", type);
    }
}

[DataTypeBitAlign]
struct MultimediaSystemControlMessage = FormatString("%s:%s%s%s%s",
                                                     H245MSCMType,
                                                     H245RequestMessageDescription ? H245RequestMessageDescription : "",
                                                     H245ResponseMessageDescription ? H245ResponseMessageDescription : "",
                                                     H245CommandMessageDescription ? H245CommandMessageDescription : "",
                                                     H245IndicationMessageDescription ? H245IndicationMessageDescription : "")
{
    UINT8 MultimediaSystemControlMessageExtension:1;
    switch
    {
        case MultimediaSystemControlMessageExtension:
        _struct ExtensionChoice
        {
        };
        default:
        _struct NoneExtension
        {
            [H245MSCMType = this.ToString]
            AsnPerConstrainedInteger(0,3) ChoiceValue = H245MultimediaSystemControlMessageTypeTable( ConstrainedValue );
            switch( ConstrainedValue )
            {
                case 0: RequestMessage Request;
                case 1: ResponseMessage Response;
                case 2: CommandMessage Command;
                case 3: IndicationMessage Indication;
            }
        };
    }
}

Table H245RequestMessageTypeTable ( value )
{
    switch( value )
    {
        case 0: "H245NonStandardMessage";
        case 1: "MasterSlaveDetermination";
        case 2: "TerminalCapabilitySet";
        case 3: "OpenLogicalChannel";
        case 4: "CloseLogicalChannel";
        case 5: "RequestChannelClose";
        case 6: "MultiplexEntrySend";
        case 7: "RequestMultiplexEntry";
        case 8: "RequestMode";
        case 9: "RoundTripDelayRequest";
        case 10: "MaintenanceLoopRequest";
        default: "Unknown";
    }
}

Table H245RequestMessageExtensionTypeTable ( value )
{
     switch( value )
     {
       case 0: "CommunicationModeRequest";
       case 1: "ConferenceRequest";
       case 2: "MultilinkRequest";
       case 3: "LogicalChannelRateRequest";
       case 4: "GenericMessage";
       default: "Unknown";
     }
}     

Table H223LogicalChannelParametersAdaptationLayerTypeTable(value){
	switch(value){
		case 0: "nonStandard";
		case 1: "al1Framed";
		case 2: "al1NotFramed";
		case 3: "al2WithoutSequenceNumbers";
		case 4: "al2WithSequenceNumbers";
		case 5: "al3";
		default: "Unknown Value";
	}
}

//Add 2011
[DataTypeBitAlign]
struct H223LogicalChannelParameters //SEQUENCE
{
    UINT8 H223LogicalChannelParametersExtension:1;
    struct adaptationLayerType   // CHOICE  
    {
	      UINT8 AdaptationLayerTypeExtension:1;
        switch
        {
            case AdaptationLayerTypeExtension:
                 _struct ExtensionChoice
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                     [ExtensionEndoffset = FrameOffset + PERLengthValue]
                     switch( PERSmallNumber )
                     {
                         case 0: H223AL1MParameters al1M;
                         case 1: H223AL2MParameters al2M;
                         case 2: H223AL3MParameters al3M;
                     }
                     switch
                     {
                         case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
                     }
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,5) ChoiceValue = H223LogicalChannelParametersAdaptationLayerTypeTable(ConstrainedValue);             	   
                 	   switch (ConstrainedValue)
                 	   {
                 	       case 0: H245NonStandardParameter nonStandard;
                 	       case 5: 
                 	             struct a13 //SEQUENCE
                 	             {
                 	                  AsnPerConstrainedInteger(0, 2) controlFieldOctets;
                 	                  AsnPerConstrainedInteger(0, 16777215) sendBufferSize = FormatString("%d Bytes", ConstrainedValue);
                 	             }
                 	   }
                 }
        }
    }
    AsnPerBoolean(0) segmentableFlag;
    //switch
    //{
    //    case H223LogicalChannelParametersExtension
    //}
}

Table H245CRCLengthTable( value )
{
    switch( value )
    {
        case 0: "crc8bit";
        case 1: "crc16bit";
        case 2: "crc32bit";
        default: FormatString("%d(%X)", value, value);
    }
}

[DataTypeBitAlign]
struct CRCLength = CRCLengthDescription
{
    UINT8 CRCLengthExtension:1;
    switch
    {
        case CRCLengthExtension:
        _struct ExtensionChoice
        {
        //empty
        };
        default:
        _struct NoneExtension
        {
            [CRCLengthDescription = this.ToString]
            AsnPerConstrainedInteger(0,2) ChoiceValue = H245CRCLengthTable( ConstrainedValue );
        };
    }
}

[DataTypeBitAlign]
struct V76HDLCParameters
{
    UINT8 V76HDLCParametersExtension:1;
    CRCLength crcLength;
    AsnPerConstrainedInteger(1,4095) n401;
    AsnPerBoolean(0) loopbackTestProcedure;
    //switch
    //{
    //    case V76HDLCParameters_Extension:
    //}
}

Table suspendResumeTable( value )
{
    switch( value )
    {
        case 0: "noSuspendResume";
        case 1: "suspendResumewAddress";
        case 2: "suspendResumewoAddress";
        default: FormatString("%d(%X)", value, value);
    }
}

Table V76LogicalChannelParametersRecoveryTable( value )
{
    switch( value )
    {
        case 0: "rej";
        case 1: "sREJ";
        case 2: "mSREJ";
        default: FormatString("%d(%X)", value, value);
    }
}


Table V76LogicalChannelParametersmodeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "eRM";
		case (ExtensionBit == 0) && (Choice== 1): "uNERM";

	}
}

[DataTypeBitAlign]
struct V76LogicalChannelParameters
{
    UINT8 V76LogicalChannelParametersExtension:1;
    V76HDLCParameters hdlcParameters;
    struct suspendResume = SuspendResumeDes
    {
        UINT8 suspendResumeExtension:1;
        switch
        {
            case suspendResumeExtension:
            _struct ExtensionChoice
            {
                //empty
            };
            default:
            _struct NoneExtension
            {   
                [SuspendResumeDes = this.ToString]
                AsnPerConstrainedInteger(0,2) Choicevalue = suspendResumeTable(ConstrainedValue);
            };
        }
    };
    AsnPerBoolean(0) uIH;
    struct mode
    {
        UINT8 modeExtension:1;
        switch
        {
            case modeExtension:
	            _struct ExtensionChoide
	            {
	                //empty
	            };
            
			default:
				_struct NoneExtension
				{
					[Post.modeChoice = ConstrainedValue]
					AsnPerConstrainedInteger(0, 1) ChoiceValue = V76LogicalChannelParametersmodeTable(modeExtension, modeChoice);
					switch (modeChoice)
					{
						case 0:
							struct eRM
		                    {
		                        UINT8 eRMExtension:1;
		                        AsnPerConstrainedInteger(1,127) windowSize;
		                        struct recovery = RecoveryDes
		                        {
		                            UINT8 recoveryExtension:1;
		                            switch
		                            {
		                                case recoveryExtension:
		                                _struct ExtensionChoice
		                                {
		                                    //empty
		                                };
		                                default:
		                                _struct NoneExtension
		                                {
		                                    [RecoveryDes = this.ToString]
		                                    AsnPerConstrainedInteger(0,2) ChoiceValue = V76LogicalChannelParametersRecoveryTable( ConstrainedValue );
		                                };
		                            }
		                        };
		                        //switch
		                        //{
		                        //    case eRM_Extension:
		                        //}
		                    };
					}
				}
		}
	}
    V75Parameters v75Parameters;
    //switch
    //{
    //    case V76LogicalChannelParameters_Extension:
    //}
}

[DataTypeBitAlign]
struct v75Parameters
{
    UINT8 V75ParametersExtension:1;
    AsnPerBoolean(0) audioHeaderPresent;
    //switch
    //{
    //    case V75Parameters_Extension:
    //}
}

[DataTypeBitAlign]
struct NetworkAccessParameters
{
    UINT8 NetworkAccessParametersExtension:1;
    UINT8 distributionPresent:1;
    UINT8 externalReferencePresent:1;
    switch
    {
        case distributionPresent:
            Distribution distribution;
    }
    H245NetworkAddress networkAddress;
    AsnPerBoolean(0) associateConference;
    switch
    {
        case externalReferencePresent:
            AsnPerOctetString(1, 255) externalReference;
    } 
    switch
    {
        case NetworkAccessParametersExtension:
            struct Extension
            {
                AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
                UINT8 t120SetupProcedurePresent:1;
                switch
                {
                    case t120SetupProcedurePresent:
                        struct t120SetupProcedure
                        {
                            AsnPerLengthDeterminant Length;
                            [t120SetupProcedureEnd = FrameOffset + PERLengthValue]
                            T120SetupProcedure t120SetupProcedure;
                            switch
                            {
                                case FrameBitOffset < t120SetupProcedureEnd * 8:
                                    AsnPerPadding(t120SetupProcedureEnd * 8 - FrameBitOffset) Padding;
                            }
                        }
                }
            }
    }
}

[DataTypeBitAlign]
struct T120SetupProcedure = NetworkAccessT120SetupProcedure
{
    UINT8 t120SetupProcedureExtension:1;
    switch
    {
        case t120SetupProcedureExtension:
            _struct ExtensionChoice
            {
            }
        default:
            _struct NoneExtension
            {
                [post.NetworkAccessT120SetupProcedure = H245T120SetupProcedureTable( ConstrainedValue )]
                AsnPerConstrainedInteger(0, 2) ChoiceValue;
            }
    }
}

Table H245T120SetupProcedureTable( procedure )
{
    switch( procedure )
    {
        case 0: "originate Call";
        case 1: "wait For Call";
        case 2: "issue Query";
        default: FormatString("%d(0x%X)",procedure,procedure);
    }

}

[DataTypeBitAlign]
struct Distribution = NetworkAccessParametersDistribution
{
    UINT8 DistributionExtension:1;
    switch
    {
        case DistributionExtension:
            _struct ExtensionChoice
            {
            }
        default:
            _struct NoneExtension
            {
                [post.NetworkAccessParametersDistribution = H245NetworkAccessParametersDistributionTable( ConstrainedValue )]
                AsnPerConstrainedInteger(0, 1) ChoiceValue;
            }
    }
}

[DataTypeBitAlign]
struct H245NetworkAddress
{
    UINT8 NetworkAddressExtension:1;
    switch
    {
        case NetworkAddressExtension:
            _struct ExtensionChoice
            {
            }
        default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0, 2) ChoiceValue;
                switch( ConstrainedValue )
                {
                    case 0: Q2931Address q2931Address;
                    case 1: AsnPerIA5String(1, 128) e164Address = AsciiString(FrameData, OctetStringStartOffset, OCTETSTRINGLENGTH); 
                    case 2: H245TransportAddress localAreaAddress;
                }
            }
    }
}

Table H245NetworkAccessParametersDistributionTable( value )
{
    switch( value )
    {
        case 0: "unicast";  
        case 1: "multicast";
        default: FormatString("%d(0x%X)",value,value);
    }
}

[DataTypeBitAlign]
struct LogicalChannelNumber
{
    AsnPerConstrainedInteger(1, 65535) number;
}

[DataTypeBitAlign]
struct OpenLogicalChannel
{
    UINT8 OpenLogicalChannelExtension:1;
    
    UINT8 reverseLogicalChannelParametersPresent:1;
    
    AsnPerConstrainedInteger(1,65535) forwardLogicalChannelNumber;
    struct forwardLogicalChannelParameters // SEQUENCE
    {
        UINT8 forwardLogicalChannelParametersExtension:1;
        
        UINT8 portNumberPresent:1;
        
        switch
        {
            case portNumberPresent: AsnPerConstrainedInteger(0,65535) portNumber;
        }
        DataType dataType;
        struct multiplexParameters// CHOICE
        {
            UINT8 multiplexParametersExtension:1;
            switch
            {
                case multiplexParametersExtension:
                _struct ExtensionChoice
                {
                    AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                    AsnPerLengthDeterminant Length;
                    [ExtensionEndoffset = FrameOffset + PERLengthValue]
                    switch( PERSmallNumber )
                    {
                        case 0: H2250LogicalChannelParameters h2250LogicalChannelParameters;
                    }
                    switch
                    {
                        case FrameBitOffset < ExtensionEndoffset * 8:
                            AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
                    }
                };
                
                default:
                _struct NoneExtension
                {
                    AsnPerConstrainedInteger(0,2) ChoiceValue;
                    switch (ConstrainedValue)                         
                    {                                                 
                        case 0: H222LogicalChannelParameters h222LogicalChannelParameters;        
                        case 1: H223LogicalChannelParameters h223LogicalChannelParameters;         
                        case 2: V76LogicalChannelParameters v76LogicalChannelParameters;      
                    }
                };
            }
        };
        
        switch 
        {
            case forwardLogicalChannelParametersExtension:
                 struct ForwardLogicalChannelParametersExtension
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
                  	  UINT8 forwardLogicalChannelDependencyPresent:1;
                  	  switch
                  	  {
                  	      case PERSmallNumber >= 1: UINT8 replacementForPresent:1;
                  	  }
                  	  
                  	 switch 
                     { 
                         case  forwardLogicalChannelDependencyPresent:
                             struct ForwardLogicalChannelDependency
                             { 
                                 AsnPerLengthDeterminant Length;
                                 [ForwardLogicalChannelDependencyEndoffset = FrameOffset + PERLengthValue] 
                                 LogicalChannelNumber forwardLogicalChannelDependency;
                                 switch
                                 {
                                     case FrameBitOffset < ForwardLogicalChannelDependencyEndoffset * 8:
                                         AsnPerPadding(ForwardLogicalChannelDependencyEndoffset * 8 - FrameBitOffset) padding;
                                 }
                             }
                     }
                     switch 
                     { 
                         case replacementForPresent:
                             struct ReplacementFor
                             { 
                                 AsnPerLengthDeterminant Length;
                                 [ReplacementForEndoffset = FrameOffset + PERLengthValue] 
                                 LogicalChannelNumber replacementFor;
                                 switch
                                 {
                                     case FrameBitOffset < ReplacementForEndoffset * 8:
                                         AsnPerPadding(ReplacementForEndoffset * 8 - FrameBitOffset) padding;
                                 }
                             }
                     }
                 }
        }
    };
    
    switch 
    { 
        case reverseLogicalChannelParametersPresent:
             struct reverseLogicalChannelParameters // SEQUENCE
             {
                 UINT8 reverseLogicalChannelParametersExtensionBit:1;
                 UINT8 multiplexParametersPresent:1;

                 DataType dataType;
                 switch 
                 {
                 	   case multiplexParametersPresent:
                          struct multiplexParameters // CHOICE
                          {
                              UINT8 multiplexParametersExtension:1;
                               switch
                               {
                                   case multiplexParametersExtension:
                                        _struct ExtensionChoice
                                        {
                                            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                                            AsnPerLengthDeterminant Length;
                                            [ExtensionEndoffset = FrameOffset + PERLengthValue]
                                             switch( PERSmallNumber )
                                             {
                                                 case 0: H2250LogicalChannelParameters h2250LogicalChannelParameters;
                                             }
                                             switch
                                             {
                                                 case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
                                             }
                                         };
                                  
                                   default:
                                       _struct NoneExtension
                                       {
                                           AsnPerConstrainedInteger(0,1) ChoiceValue;
                                           switch (ConstrainedValue)                         
                                           {                                                 
                                               case 0: H223LogicalChannelParameters h223LogicalChannelParameters;         
                                               case 1: V76LogicalChannelParameters v76LogicalChannelParameters;      
                                           }
                              
                                       };  
                               }  
                          }          
                 };   
                         
                 switch 
                 {
                     case reverseLogicalChannelParametersExtensionBit:
                         struct ReverseLogicalChannelParametersExtension
                         {
                             AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
                         	   UINT8 reverseLogicalChannelDependencyPresent:1;
                          	 switch
                          	 {
                          	     case PERSmallNumber >= 1: UINT8 replacementForPresent:1;
                          	 }
                          	  
                          	 switch 
                             { 
                                 case  reverseLogicalChannelDependencyPresent: 
                                     struct ReverseLogicalChannelDependency
                                     { 
                                         AsnPerLengthDeterminant Length;
                                         [reverseLogicalChannelDependencyEndoffset = FrameOffset + PERLengthValue] 
                                         LogicalChannelNumber reverseLogicalChannelDependency;
                                         switch
                                         {
                                             case FrameBitOffset < reverseLogicalChannelDependency * 8:
                                                 AsnPerPadding(reverseLogicalChannelDependency * 8 - FrameBitOffset) padding;
                                         }
                                     }
                             }
                             switch 
                             { 
                                 case replacementForPresent:
                                     struct ReplacementFor
                                     { 
                                         AsnPerLengthDeterminant Length;
                                         [ReplacementForEndoffset = FrameOffset + PERLengthValue] 
                                         LogicalChannelNumber replacementFor;
                                         switch
                                         {
                                             case FrameBitOffset < ReplacementForEndoffset * 8:
                                                 AsnPerPadding(ReplacementForEndoffset * 8 - FrameBitOffset) padding;
                                         }
                                     }
                             }
                         }
                 }            
             }                    
    }
     switch 
     {
         case OpenLogicalChannelExtension:
             struct OpenLogicalChannelExtension
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
             	   UINT8 separateStackPresent:1;
              	 switch
              	 {
              	     case PERSmallNumber >= 1: UINT8 encryptionSyncPresent:1;
              	 }
              	  
              	 switch 
                 { 
                     case  separateStackPresent: 
                         struct SeparateStack
                         {
                             AsnPerLengthDeterminant Length;                               
                             [separateStackEndOffset = FrameOffset + PERLengthValue]
                             NetworkAccessParameters separateStack;
                             switch
                             {
                                 case FrameBitOffset < separateStackEndOffset * 8:
                                     AsnPerPadding(separateStackEndOffset * 8 - FrameBitOffset) Padding;
                             }
                         }
                 }
                 switch 
                 { 
                     case encryptionSyncPresent:
                         struct EncryptionSync
                         {
                             AsnPerLengthDeterminant Length;
                             [encryptionSyncEndOffset = FrameOffset + PERLengthValue]
                             EncryptionSync encryptionSync;
                             switch
                             {
                                 case FrameBitOffset < encryptionSyncEndOffset * 8:
                                     AsnPerPadding(encryptionSyncEndOffset * 8 - FrameBitOffset) Padding;
                             }
                         }
                 }
             }
     }            
}

[DataTypeBitAlign]
struct H222LogicalChannelParameters
{
    UINT8 H222LogicalChannelParametersExtension:1;
    UINT8 pcrpidPresent:1;
    UINT8 programDescriptorsPresent:1;
    UINT8 streamDescriptorsPresent:1;
    AsnPerConstrainedInteger(0,65535) resourceID;
    AsnPerConstrainedInteger(0,8191) subChannelID;
    switch
    {
        case pcrpidPresent: AsnPerConstrainedInteger(0,8191) pcrpid;
    }
    
    switch
    {
        case programDescriptorsPresent: AsnPerOctetString(-1,-1) programDescriptors;
    }
    
    switch
    {
        case streamDescriptorsPresent: AsnPerOctetString(-1,-1) streamDescriptors;
    }
}

[DataTypeBitAlign]
struct H2250LogicalChannelParameters
{
    UINT8 H2250LogicalChannelParametersExtension:1;
    UINT8 nonStandardPresent:1;
    UINT8 associatedSessionIDPresent:1;
    UINT8 mediaChannelPresent:1;
    UINT8 mediaGuaranteedDeliveryPresent:1;
    UINT8 mediaControlChannelPresent:1;
    UINT8 mediaControlGuaranteedDeliveryPresent:1;
    UINT8 silenceSuppressionPresent:1;
    UINT8 destinationPresent:1;
    UINT8 dynamicRTPPayloadTypePresent:1;
    UINT8 mediaPacketizationPresent:1;
    switch
    {
        case nonStandardPresent: 
             struct NonStandardParameterList
             {
                 [post.NonStandardParameterCount = PERLengthValue]
                 AsnPerLengthDeterminant Size;
                 while [ NonStandardParameterCount > 0 ]
                 {
                     [ NonStandardParameterCount = NonStandardParameterCount - 1 ]
                     H245NonStandardParameter nonStandard;
                 }
             };
    }
    
    AsnPerConstrainedInteger(0,255) sessionID;
    
    switch
    {
        case associatedSessionIDPresent: AsnPerConstrainedInteger(1,255) associatedSessionID;
    }
    
    switch
    {
        case mediaChannelPresent: H245TransportAddress mediaChannel;
    }
    
    switch
    {
        case mediaGuaranteedDeliveryPresent: AsnPerBoolean(0) mediaGuaranteedDelivery;
    }
    
    switch
    {
        case mediaControlChannelPresent: H245TransportAddress mediaControlChannel;
    }
    
    switch
    {
        case mediaControlGuaranteedDeliveryPresent: AsnPerBoolean(0) mediaControlGuaranteedDelivery;
    }
    
    switch
    {
        case silenceSuppressionPresent: AsnPerBoolean(0) silenceSuppression;
    }
    
    switch
    {
        case destinationPresent: TerminalLabel destination;
    }
    
    switch
    {
        case dynamicRTPPayloadTypePresent: AsnPerConstrainedInteger(96,127) dynamicRTPPayloadType;
    }
    
    switch
    {
        case mediaPacketizationPresent: 
        struct mediaPacketization
        {
            UINT8 mediaPacketizationExtension:1;
            switch
            {
                case mediaPacketizationExtension:
                    _struct ExtensionChoice
                    {
                        AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                        AsnPerLengthDeterminant Length;
                        [mediaPacketizationEnd = FrameOffset + PERLengthValue]
                        switch( PERSmallNumber )
                        {
                            case 0: RTPPayloadType RTPPayloadType;
                        } 
                        switch
                        {
                            case FrameBitOffset < mediaPacketizationEnd * 8:
                                AsnPerPadding(mediaPacketizationEnd * 8 - FrameBitOffset) Padding;
                        }
                    }
                default:
                    _struct NoneExtension
                    {
                        AsnPerConstrainedInteger(0,0) ChoiceValue = H2250MediaPacketzationTable( ConstrainedValue );
                    };
            }
        };
    }
    switch
    {
        case H2250LogicalChannelParametersExtension: H2250LogicalChannelParametersExtension Extension;
    }
}

[DataTypeBitAlign]
struct H2250LogicalChannelParametersExtension
{
    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    UINT8 transportCapabilityPresent:1;
    switch
    {
        case PERSmallNumber >= 1: UINT8 redundancyEncodingPresent:1;
    }
    switch
    {
        case PERSmallNumber >= 2: UINT8 soucePresent:1;
    }
    switch
    {
        case transportCapabilityPresent:
            struct TransportCapability
            {
                AsnPerLengthDeterminant Length;
                [TransportCapabilityEnd = PERLengthValue]
                TransportCapability transportCapability;
                switch
                {
                    case FrameBitOffset < TransportCapabilityEnd * 8:
                        AsnPerPadding(TransportCapabilityEnd * 8 - FrameBitOffset) Padding;
                }
            }
    }
    switch
    {
        case redundancyEncodingPresent: 
            struct RedundancyEncoding
            {
                AsnPerLengthDeterminant Length;
                [RedundancyEncodingEnd = PERLengthValue]
                RedundancyEncoding redundancyEncoding; 
                switch
                {
                    case FrameBitOffset < RedundancyEncodingEnd * 8:
                        AsnPerPadding(RedundancyEncodingEnd - FrameBitOffset) Padding;
                }
            }
    }
    switch
    {
        case soucePresent: 
            struct Source
            {
                AsnPerLengthDeterminant Length;
                [SourceEnd = PERLengthValue]
                TerminalLabel source;
                switch
                {
                    case FrameBitOffset < SourceEnd * 8:
                        AsnPerPadding(SourceEnd - FrameBitOffset) Padding;
                }
            }
    }
    
}

Table H2250MediaPacketzationTable( value )
{
    switch( value )
    {
        case 0: "h261aVideoPacketization";
        default: FormatString("%d(0x%0X)",value,value);
    }
}

[DataTypeBitAlign]
struct RTPPayloadType
{
    UINT8 RTPPayloadTypeExtension:1;
    UINT8 payloadTypePresent:1;
    PayloadDescriptor payloadDescriptor;
    switch
    {
        case payloadTypePresent: AsnPerConstrainedInteger(0, 127) payloadType;
    }
}

[DataTypeBitAlign]
struct PayloadDescriptor
{  
    UINT8 PayloadDescriptorExtension:1;
    switch
    {
        case PayloadDescriptorExtension: 
            _struct ExtenstionChoice
            {
            }
        default:
            _struct NoneExtension
            {   
                AsnPerConstrainedInteger(0, 2) ChoiceValue;
                switch( ConstrainedValue )
                {
                    case 0: H245NonStandardParameter nonStandardIdentifier;  
                    case 1: AsnPerExtensibleConstrainedInteger(1,32768) rfcnumber;
                    case 2: AsnPerObjectIdentifier oid;
                }
            }
    }
}

[DataTypeBitAlign]
struct TerminalLabel 
{
    UINT8 TerminalLabelExtension:1;
    AsnPerConstrainedInteger(0,192) mcuNumber;
    AsnPerConstrainedInteger(0,192) terminalNumber;
}

[DataTypeBitAlign]
struct DataType
{
    UINT8 DataTypeExtension:1;
    switch
    {
        case DataTypeExtension:
            _struct ExtensionChoice
            {
                AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue; 
                AsnPerLengthDeterminant Length;
                [DataTypeExtensionEndOffset = FrameOffset + PERLengthValue]
                switch
                {
                    case 0: H245NonStandardParameter h235Control;
                    case 1: H235Media h235Media;
                    case 2: MultiplexedStreamParameter multiplexedStream;
                    case 3: RedundancyEncoding redundancyEncoding;
                    case 4: MultiplePayloadStream multiplePayloadStream;
                    case 5: H245DepFECData depFec;
                    case 6: H245FECData fec;
                }
                switch
                {
                    case FrameBitOffset < DataTypeExtensionEndOffset * 8:
                        AsnPerPadding(DataTypeExtensionEndOffset * 8 - FrameBitOffset) Padding;
                }
            }
        default:
            _struct NoneExtension
            { 
                AsnPerConstrainedInteger(0,5) ChoiceValue = H245DataTypeTable( ConstrainedValue );
                switch( ConstrainedValue )
                {
                    case 0: H245NonStandardParameter nonStandard;
                    case 2: VideoCapability videoData;
                    case 3: AudioCapability audioData;
                    case 4: DataApplicationCapability data;
                    case 5: EncryptionMode encryptionData;
                }
            };
    }
}

[DataTypeBitAlign]
struct H235Media
{  
    UINT8 H235MediaExtension:1;
    EncryptionAuthenticationAndIntegrity encryptionAuthenticationAndIntegrity;
    MediaType mediaType;
}


Table H245DepFECDataTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "rfc2733";
	}
}

[DataTypeBitAlign]
struct H245DepFECData  = H245DepFECDataTable(0, Property.H245DepFECDataChoice)		// CHOICE
{
	_struct NoneExtension
	{
		[Post.H245DepFECDataChoice = ConstrainedValue]
		AsnPerConstrainedInteger(0, 0) ChoiceValue;
		switch (H245DepFECDataChoice)
		{
			case 0: H245DepFECDatarfc2733 rfc2733;
		}
	}
}

[DataTypeBitAlign]
struct H245DepFECDatarfc2733	//Sequence
{
	UINT8 ExtensionBit:1;
	
	
	H245DepFECDataMode mode;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table H245modeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "redundancyEncoding";
		case (ExtensionBit == 0) && (Choice== 1): "separateStream";
	}
}

[DataTypeBitAlign]
struct H245DepFECDataMode = H245modeTable(ExtensionBit, H245modeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.H245modeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.H245modeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue;
				switch (H245modeChoice)
				{
					case 1: H245SeparateStream separateStream;
				}
			}
	}
}

Table H245separateStreamTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "differentPort";
		case (ExtensionBit == 0) && (Choice== 1): "samePort";

	}
}

[DataTypeBitAlign]
struct H245separateStream = H245separateStreamTable(ExtensionBit, H245separateStreamChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.H245separateStreamChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.H245separateStreamChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue;
				switch (H245separateStreamChoice)
				{
					case 0: H245FECDataDifferentPort differentPort;
					case 1: H245FECDataSamePort samePort;
				}
			}
	}
}


[DataTypeBitAlign]
struct H245FECDataDifferentPort	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 protectedPayloadTypePresent:1;
	
	AsnPerConstrainedInteger(1, 255) protectedSessionID;
	switch
	{
		case protectedPayloadTypePresent : AsnPerConstrainedInteger(0, 127) protectedPayloadType;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct H245FECDataSamePort	//Sequence
{
	UINT8 ExtensionBit:1;

	AsnPerConstrainedInteger(0, 127) protectedPayloadType;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table H245FECDataTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "rfc2733";
	}
}

[DataTypeBitAlign]
struct H245FECData = H245FECDataTable(ExtensionBit, H245FECDataChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.H245FECDataChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.H245FECDataChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 0) ChoiceValue;
				switch (H245FECDataChoice)
				{
					case 0: H245FECDataRFC2733 rfc2733;
				}
			}
	}
}

[DataTypeBitAlign]
struct H245FECDatarfc2733	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 fecSchemePresent:1;
	
	AsnPerConstrainedInteger(0, 127) protectedPayloadType;
	switch
	{
		case fecSchemePresent : AsnPerObjectIdentifier fecScheme;
	}
	H245FECDataPktMode pktMode;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table H245FECDataPktModeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "rfc2198coding";
		case (ExtensionBit == 0) && (Choice== 1): "rfc2733sameport";
		case (ExtensionBit == 0) && (Choice== 2): "rfc2733diffport";
	}
}

[DataTypeBitAlign]
struct H245FECDataPktMode = H245FECDataPktModeTable(ExtensionBit, H245pktModeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.H245pktModeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.H245pktModeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 2) ChoiceValue;
				switch (H245pktModeChoice)
				{
					case 1: H245Rfc2733sameport rfc2733sameport;
					case 2: H245rfc2733diffport rfc2733diffport;
				}
			}
	}
}

[DataTypeBitAlign]
struct H245rfc2733diffport	//Sequence
{
	UINT8 ExtensionBit:1;
	
	LogicalChannelNumber protectedChannel;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct H245rfc2733sameport	//Sequence
{
	UINT8 ExtensionBit:1;
	
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

Table H245mediaTypeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "nonStandard";
		case (ExtensionBit == 0) && (Choice== 1): "videoData";
		case (ExtensionBit == 0) && (Choice== 2): "audioData";
		case (ExtensionBit == 0) && (Choice== 3): "data";
		case (ExtensionBit == 1) && (Choice== 0): "redundancyEncoding";
		case (ExtensionBit == 1) && (Choice== 1): "multiplePayloadStream";
		case (ExtensionBit == 1) && (Choice== 2): "depFec";
		case (ExtensionBit == 1) && (Choice== 3): "fec";

	}
}

[DataTypeBitAlign]
struct MediaType = H245mediaTypeTable(ExtensionBit, H245mediaTypeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.H245mediaTypeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch(H245mediaTypeChoice)
				{
					case 0: RedundancyEncoding redundancyEncoding;
					case 1: MultiplePayloadStream multiplePayloadStream;
					case 2: H245DepFECData depFec;
					case 3: H245FECData fec;
				}
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.H245mediaTypeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue;
				switch (H245mediaTypeChoice)
				{
					case 0: H245NonStandardParameter nonStandard;
					case 1: VideoCapability videoData;
					case 2: AudioCapability audioData;
					case 3: DataApplicationCapability data;
				}
			}
	}
}

Table H245DataTypeTable( type )
{
    switch( type )
    {
        case 0: "nonStandard";   
        case 1: "nullData";      
        case 2: "videoData";     
        case 3: "audioData";     
        case 4: "data";          
        case 5: "encryptionData";
        default: FormatString("%d(%x0X)", type, type);
    }
}

Table H245ResponseMessageTable( type )
{
    switch( type )
    {
        case 0: "H245NonStandardMessage";
        case 1: "MasterSlaveDeterminationAck";
        case 2: "MasterSlaveDeterminationReject";
        case 3: "TerminalCapabilitySetAck";
        case 4: "TerminalCapabilitySetReject";
        case 5: "OpenLogicalChannelAck";
        case 6: "OpenLogicalChannelReject";
        case 7: "CloseLogicalChannelAck";
        case 8: "RequestChannelCloseAck";
        case 9: "RequestChannelCloseReject";
        case 10: "MultiplexEntrySendAck";
        case 11: "MultiplexEntrySendReject";
        case 12: "RequestMultiplexEntryAck";
        case 13: "RequestMultiplexEntryReject";
        case 14: "RequestModeAck";
        case 15: "RequestModeReject";
        case 16: "RoundTripDelayResponse";
        case 17: "MaintenanceLoopAck";
        case 18: "MaintenanceLoopReject";
    }
}

Table H245ResponseExtensionMessageTable( Value )
{
    switch( value )
    {
        case 0: "CommunicationModeResponse";
        case 1: "ConferenceResponse";
        case 2: "MultilinkResponse";
        case 3: "LogicalChannelRateAcknowledge";
        case 4: "LogicalChannelRateReject";
        case 5: "GenericMessage";
        default: "Unknown";
    }
}       
   
[DataTypeBitAlign]
struct ResponseMessage = H245ResponseMessageDescription
{
    UINT8 ResponseMessageExtension:1;
    switch
    {
        case ResponseMessageExtension:
             _struct ExtensionChoice
             {
             	   [H245ResponseMessageDescription = this.ToString]
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue=H245ResponseExtensionMessageTable( PERSmallNumber );
                 AsnPerLengthDeterminant Length;
                 [ResponseMessageEndOffset = FrameOffset + PERLengthValue]
                 switch( PERSmallNumber )
                 {
                     case 0: CommunicationModeResponse communicationModeResponse;
                     case 1: ConferenceResponse conferenceResponse;
                     case 2: MultilinkResponse multilinkResponse;
                     case 3: LogicalChannelRateAcknowledge logicalChannelRateAcknowledge;
                     case 4: LogicalChannelRateReject logicalChannelRateReject;
                     case 5: GenericMessage genericResponse;
                 }
                 switch
                 {
                     case FrameBitOffset < ResponseMessageEndOffset * 8: AsnPerPadding(ResponseMessageEndOffset * 8 - FrameBitOffset) Padding;
                 }
             };
        default:
        _struct NoneExtension
        {
            [H245ResponseMessageDescription = this.ToString]
            AsnPerConstrainedInteger(0,18) ChoiceValue = H245ResponseMessageTable( ConstrainedValue );
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardMessage nonStandard;
                case 1: MasterSlaveDeterminationAck masterSlaveDeterminationAck;
                case 2: MasterSlaveDeterminationReject masterSlaveDeterminationReject;
                case 3: TerminalCapabilitySetAck terminalCapabilitySetAck;
                case 4: TerminalCapabilitySetReject terminalCapabilitySetReject;
                case 5: OpenLogicalChannelAck openLogicalChannelAck;
                case 6: OpenLogicalChannelReject openLogicalChannelReject;
                case 7: CloseLogicalChannelAck closeLogicalChannelAck;
                case 8: RequestChannelCloseAck requestChannelCloseAck;
                case 9: RequestChannelCloseReject requestChannelCloseReject;
                case 10: MultiplexEntrySendAck multiplexEntrySendAck;
                case 11: MultiplexEntrySendReject multiplexEntrySendReject;
                case 12: RequestMultiplexEntryAck requestMultiplexEntryAck;
                case 13: RequestMultiplexEntryReject requestMultiplexEntryReject;
                case 14: RequestModeAck requestModeAck;
                case 15: RequestModeReject requestModeReject;
                case 16: RoundTripDelayResponse roundTripDelayResponse;
                case 17: MaintenanceLoopAck maintenanceLoopAck;
                case 18:MaintenanceLoopReject maintenanceLoopReject;
            }
        };
    }
}

Table H245MSDACKDecisionTable( value )
{
    switch( value )
    {
        case 0: "master";
        case 1: "slave";
        default: "Unknown";
    }
}

[DataTypeBitAlign]
struct CommunicationModeTableEntry
{
    UINT8 CommunicationModeTableEntryExtension:1;
    UINT8 nonStandardPresent:1;
    UINT8 associatedSessionIDPresent:1;
    UINT8 terminalLabelPresent:1;
    UINT8 mediaChannelPresent:1;
    UINT8 mediaGuaranteedDeliveryPresent:1;
    UINT8 mediaControlChannelPresent:1;
    UINT8 mediaControlGuaranteedDeliveryPresent:1;
    switch
    {
        case nonStandardPresent:
             struct SequenceOfH245NonStandardParameter
             {
                 [post.nonStandardSize = PERLengthValue]
                 AsnPerLengthDeterminant Size;
                 while [ nonStandardSize > 0 ]
                 {
                     [ nonStandardSize = nonStandardSize - 1 ]
                     H245NonStandardParameter nonStandard;
                 }
             };
    }
    AsnPerConstrainedInteger(1,255) sessionID;
    switch
    {
        case associatedSessionIDPresent: AsnPerConstrainedInteger(1,255) associatedSessionID;
    }
    
    switch
    {
        case terminalLabelPresent: TerminalLabel terminalLabel;
    }
    
    AsnPerBMPString(1,128) sessionDescription;
    
    struct dataType
    {
        UINT8 dataTypeExtension:1;
        switch
        {
            case dataTypeExtension:
            _struct ExtensionChoice
            {
            }
            default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,2) ChoiceValue;
                switch( ConstrainedValue )
                {
                    case 0: VideoCapability videoData;
                    case 1: AudioCapability audioData;
                    case 2: DataApplicationCapability data;
                }
            };
        }
    };
    
    switch
    {
        case mediaChannelPresent: H245TransportAddress mediaChannel;
    }
    
    switch
    {
        case mediaGuaranteedDeliveryPresent: AsnPerBoolean(0) mediaGuaranteedDelivery;
    }
    
    switch
    {
        case mediaControlChannelPresent: H245TransportAddress mediaControlChannel;
    }
    
    switch
    {
        case mediaControlGuaranteedDeliveryPresent: AsnPerBoolean(0) mediaControlGuaranteedDelivery;
    }
    
    switch
    {
        case CommunicationModeTableEntryExtension:
             struct CommunicationModeTableEntryExtension
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
                 UINT8 redundancyEncodingPresent:1;
                 switch
                 {
                     case PERSmallNumber >= 1: UINT8 sessionDependencyPresent:1;
                 }
                 
                 switch
                 {
                     case PERSmallNumber >= 2: UINT8 destinationPresent:1;
                 }
                 
                 switch
                 {
                     case redundancyEncodingPresent: 
                         struct RedundancyEncoding
                         {
                             AsnPerLengthDeterminant Length;
                             [ExtensionEndoffset = FrameOffset + PERLengthValue]
                             RedundancyEncoding redundancyEncoding;
                             switch
                             {
                                 case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding( ExtensionEndoffset * 8 - FrameBitOffset ) Padding;
                             }
                         }
                                                     
                 }
                 
                 switch
                 {
                     case sessionDependencyPresent: 
                         struct sessionDependency
                         {
                             AsnPerLengthDeterminant Length;
                             [ExtensionEndoffset = FrameOffset + PERLengthValue]
                             AsnPerConstrainedInteger(1,255) sessionDependency;
                             switch
                             {
                                 case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding( ExtensionEndoffset * 8 - FrameBitOffset ) Padding;
                             }
                         }
                 }
                 
                 switch
                 {
                     case destinationPresent: 
                         struct destination
                         {
                             AsnPerLengthDeterminant Length;
                             [ExtensionEndoffset = FrameOffset + PERLengthValue]
                             TerminalLabel destination;
                             switch
                             {
                                 case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding( ExtensionEndoffset * 8 - FrameBitOffset ) Padding;
                             }
                         }
                 }
             };
    }
}

[DataTypeBitAlign]
struct RedundancyEncoding
{
    UINT8 RedundancyEncodingExtension:1;
    UINT8 secondaryEncodingPresent:1;
    RedundancyEncodingMethod redundancyEncodingMethod;
    switch
    {
        case secondaryEncodingPresent: DataType secondaryEncoding;
    }
    
	switch{
		case RedundancyEncodingExtension:
			_struct Extension{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
				UINT8 rtpRedundancyEncodingPresent:1;
				switch{
					case rtpRedundancyEncodingPresent:
						_struct rtpRedundancyEncodingPresent{
							AsnPerLengthDeterminant length;
							[rtpRedundancyEncodingEndoffset = FrameOffset + PERLengthValue]
							struct rtpRedundancyEncoding{
								UINT8 rtpRedundancyEncodingExtension:1;
								UINT8 primaryPresent:1;
								UINT8 secondaryPresent:1;
								
								switch{
									case primaryPresent: RedundancyEncodingElement primary;
								}
								switch{
									case secondaryPresent:
										_struct secondaryPresent{
											struct SequenceOfSecondary{
												[Post.PERArraySize = PERLengthValue]
												AsnPerLengthDeterminant Size;
												while [PERArraySize > 0]
												{
													[PERArraySize = PERArraySize -1]
													RedundancyEncodingElement secondary;
												}
											}
	
							            }
								}
							}
							switch
			                {
			                    case FrameBitOffset < rtpRedundancyEncodingEndoffset * 8:
			                        AsnPerPadding( rtpRedundancyEncodingEndoffset * 8 - FrameBitOffset ) Padding;
			                }
		            	}
				}
			}
	}
}

[DataTypeBitAlign]
struct CommunicationModeResponse
{
    UINT8 CommunicationModeResponseExtension:1;
    switch
    {
        case CommunicationModeResponseExtension:
            _struct ExtensionChoice
            {
            }
        default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,0) ChoiceValue;
                switch( ConstrainedValue )
                {
                    case 0:
                        struct SetOfCommunicationModeTableEntry
                        {
                            [post.CommunicationModeTableEntrySize = ConstrainedValue]
                            AsnPerConstrainedInteger(1,256) Size;
                            while [ CommunicationModeTableEntrySize > 0 ]
                            {
                                [ CommunicationModeTableEntrySize = CommunicationModeTableEntrySize - 1 ]
                                CommunicationModeTableEntry communicationModeTable;
                            }
                        };
                }
            }
    }
}

Table H245ConferenceResponseTypeTable( value )
{
    switch( value )
    {
        case 0: "mCTerminalIDResponse";
        case 1: "terminalIDResponse";
        case 2: "conferenceIDResponse";
        case 3: "passwordResponse";
        case 4: "terminalListResponse";
        case 5: "videoCommandReject";
        case 6: "terminalDropReject";
        case 7: "makeMeChairResponse";
        default: "Unknown";
     }
}             

[DataTypeBitAlign]
struct BroadcastMyLogicalChannelResponse = ConstrainedValue ? "deniedBroadcastMyLogicalChannel" : "grantedBroadcastMyLogicalChannel"
{
    UINT8 broadcastMyLogicalChannelResponseExtension:1;
    switch
    {
        case broadcastMyLogicalChannelResponseExtension:
            _struct ExtensionChoice
            {
            }
        default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0, 1) ChoiceValue;
            }
    }
}

[DataTypeBitAlign]
struct MakeTerminalBroadcasterResponse = ConstrainedValue ? "deniedMakeTerminalBroadcaster" : "grantedMakeTerminalBroadcaster"
{
    UINT8 makeTerminalBroadcasterResponseExtension:1;
    switch
    {
        case makeTerminalBroadcasterResponseExtension:
            _struct ExtensionChoice
            {
            }
        default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0, 1) ChoiceValue;
            }
    }
}

[DataTypeBitAlign]
struct SendThisSourceResponse = ConstrainedValue ? "deniedSendThisSource" : "grantedSendThisSource"
{
    UINT8 sendThisSourceResponseExtension:1;
    switch
    {
        case sendThisSourceResponseExtension:
            _struct ExtensionChoice
            {
            }
        default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0, 1) ChoiceValue;
            }
    }
}

[DataTypeBitAlign]
struct RequestAllTerminalIDsResponse
{
    UINT8 requestAllTerminalIDsResponseExtension:1;
    [post.TerminalInformationCount = PERLengthValue]
    AsnPerLengthDeterminant Size;
    while [ TerminalInformationCount > 0 ]
    {
        [ TerminalInformationCount = TerminalInformationCount  - 1 ]
        TerminalInformation terminalInformation;
    }
}

[DataTypeBitAlign]
struct TerminalInformation
{
    UINT8 terminalInformationExtension:1;
    TerminalLabel terminalLabel;
    AsnPerOctetString(1, 128) terminalID;
}

[DataTypeBitAlign]
struct ConferenceResponse
{
    UINT8 ConferenceResponseExtension:1;
    switch
    {
        case ConferenceResponseExtension:
        _struct ExtensionChoice
        {
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
            AsnPerLengthDeterminant Length;
            [ConferenceResponseExtensionEnd = FrameOffset + PERLengthValue]
            switch( PERSmallNumber )
            {
                case 0:
                    struct extensionAddressResponse
                    {
                        UINT8 extensionAddressResponseExtension:1;
                        AsnPerOctetString(1, 128) extensionAddress; 
                    }
                case 1:
                    struct chairTokenOwnerResponse
                    {
                        UINT8 chairTokenOwnerResponseExtension:1;
                        TerminalLabel terminalLabel;
                        AsnPerOctetString(1, 128) terminalID;
                    }
                case 2:
                     struct terminalCertificateResponse  
                     {
                         UINT8 terminalCertificateResponseExtension:1;
                         TerminalLabel terminalLabel;
                         AsnPerOctetString(1, 65535) certificateResponse;
                     }
                 case 3:
                     BroadcastMyLogicalChannelResponse broadcastMyLogicalChannelResponse;
                 case 4:
                     MakeTerminalBroadcasterResponse makeTerminalBroadcasterResponse;
                 case 5:
                     SendThisSourceResponse sendThisSourceResponse;
                 case 6:
                     RequestAllTerminalIDsResponse requestAllTerminalIDsResponse;
                 case 7:
                     RemoteMCResponse remoteMCResponse;
            }
            switch
            {
                case FrameBitOffset < ConferenceResponseExtensionEnd * 8:
                    AsnPerPadding(ConferenceResponseExtensionEnd * 8 - FrameOffset) Padding;
            }
        }
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,7) ChoiceValue=H245ConferenceResponseTypeTable( ConstrainedValue );
            switch( ConstrainedValue )
            {
                case 0: struct mCTerminalIDResponse
                        {
                            UINT8 mCTerminalIDResponseExtension:1;
                            TerminalLabel terminalLabel;
                            AsnPerOctetString(1,128) terminalID;
                            
                            //switch
                            //{
                            //    case mCTerminalIDResponse_Extension:
                            //    ??? there may be some extensions
                            //}
                            
                        };
                case 1: struct terminalIDResponse
                        {
                            UINT8 terminalIDResponseExtension:1;
                            TerminalLabel terminalLabel;
                            AsnPerOctetString(1,128) terminalID;
                            
                            //switch
                            //{
                            //    case terminalIDResponse_Extension:
                            //    ??? there may be some extensions
                            //}
                            
                        };
                case 2: struct conferenceIDResponse
                        {
                            UINT8 conferenceIDResponseExtension:1;
                            TerminalLabel terminalLabel;
                            AsnPerOctetString(1,32) conferenceID;
                            
                            //switch
                            //{
                            //    case conferenceIDResponse_Extension:
                            //    ??? there may be some extension values
                            //}
                            
                        };
                case 3: struct passwordResponse
                        {
                            UINT8 passwordResponseExtension:1;
                            TerminalLabel terminalLabel;
                            AsnPerOctetString(1,32) password;
                            
                            //switch
                            //{
                            //    case passwordResponse_Extension:
                            //    ??? there may be some extension values
                            //}
                            
                        };
                case 4: struct terminalListResponse
                        {
                            [post.TerminalSize = ConstrainedValue]
                            AsnPerConstrainedInteger(1,256) Size;
                            while [ TerminalSize > 0 ]
                            {
                                [ TerminalSize = TerminalSize - 1 ]
                                TerminalLabel terminal;
                            }
                        };
                case 7: struct makeMeChairResponse
                        {
                            UINT8 makeMeChairResponseExtension:1;
                            switch
                            {
                                case makeMeChairResponseExtension:
                                _struct Extension{};
                                default:
                                _struct NoneExtension
                                {
                                    AsnPerConstrainedInteger(0,1) ChoiceValue = ConstrainedValue? "deniedChairToken": "grantedChairToken";
                                };
                            }
                        };
            }
        };
    }
}

Table H245responseCodeTypeTable( value )
{
    switch( value )
    {
        case 0: "accepted";
        case 1: "rejected";
        default: "Unknown";
    }
}
    
Table H245rejectedTypeTable( value )
{
    switch( value )
    {
        case 0: "connectionsNotAvailable";
        case 1: "userRejected";
        default: "Unknown";
    }
}

[DataTypeBitAlign]
struct MultilinkResponse
{
    UINT8 MultilinkResponseExtension:1;
    switch
    {
        case MultilinkResponseExtension:
        _struct ExtensionChoice
        {
        }
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,4) ChoiceValue;
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardMessage nonStandard;
                case 1: struct callInformation
                        {
                            UINT8 callInformationExtension:1;
                            DialingInformation dialingInformation;
                            AsnPerConstrainedInteger(0,4294967295) callAssociationNumber;
                            
                            //switch
                            //{
                            //    //case callInformation_Extension:
                            //    //??? there may be some extension values
                            //}
                            
                        };
                case 2: struct addConnection
                        {
                            UINT8 addConnectionExtension:1;
                            AsnPerConstrainedInteger(0, 255) sequenceNumber;
                            struct responseCode
                            {
                                UINT8 responseCodeExtension:1;
                                switch
                                {
                                    case responseCodeExtension:
                                    _struct responseCodeExtension
                                    {
                                    //empty
                                    };
                                    default:
                                    _struct NoneExtension
                                    {
                                        AsnPerConstrainedInteger(0,1) ChoiceValue=H245responseCodeTypeTable( ConstrainedValue );
                                        switch( ConstrainedValue )
                                        {
                                            case 1: struct rejected
                                                    {
                                                        UINT8 rejectedExtension:1;
                                                        switch
                                                        {
                                                            case rejectedExtension:
                                                            _struct Extension{};
                                                            default:
                                                            _struct NoneExtension
                                                            {
                                                                AsnPerConstrainedInteger(0,1) ChoiceValue=H245rejectedTypeTable( ConstrainedValue );
                                                            };
                                                        }
                                                    };
                                        }
                                    };
                                }
                            };
                        };
                case 3: struct removeConnection
                        {
                            UINT8 removeConnectionExtension:1;
                            ConnectionIdentifier connectionIdentifier;
                            
                            //switch
                            //{
                            //    case removeConnection_Extension:
                            //    ??? there may be some extension values;
                            //}
                            
                        };
                case 4: struct maximumHeaderInterval
                        {
                            UINT8 maximumHeaderIntervalExtension:1;
                            AsnPerConstrainedInteger(0,65535) currentInterval = FormatString("%d milliseconds", ConstrainedValue);
                            
                            //switch
                            //{
                            //    case maximumHeaderInterval_Extension:
                            //    ??? there may be some extension values
                            //}
                            
                        };
            }
        };
    }
}

[DataTypeBitAlign]
struct LogicalChannelRateAcknowledge
{
    UINT8 LogicalChannelRateAcknowledgeExtension:1;
    AsnPerConstrainedInteger(0,255) sequenceNumber;
    AsnPerConstrainedInteger(1, 65535) logicalChannelNumber;
    AsnPerConstrainedInteger(0, 4294967295) maximumBitRate = FormatString("%d bit/s", ConstrainedValue * 100);
    
    //switch
    //{
    //    case LogicalChannelRateAcknowledge_Extension:
    //    ??? there may be some extension values;
    //}
    
}

[DataTypeBitAlign]
struct LogicalChannelRateReject
{
    UINT8 LogicalChannelRateRejectExtension:1;
    UINT8 currentMaximumBitRatePresent:1;
    AsnPerConstrainedInteger(0,255) sequenceNumber;
    AsnPerConstrainedInteger(1, 65535) logicalChannelNumber;
    LogicalChannelRateRejectReason rejectReason;
    switch
    {
        case currentMaximumBitRatePresent: AsnPerConstrainedInteger(0, 4294967295) currentMaximumBitRate = FormatString("%d bit/s", ConstrainedValue*100);
    }
}

Table H245LogicalChannelRateRejectReasonTypeTable( value )
{
    switch( value )
    {
        case 0: "undefinedReason";
        case 1: "insufficientResources";
        default: "Unknown";
    }
}
             
[DataTypeBitAlign]
struct LogicalChannelRateRejectReason
{
    UINT8 LogicalChannelRateRejectReasonExtension:1;
    switch
    {
        case LogicalChannelRateRejectReasonExtension:
        _struct Extension{};
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,1) ChoiceValue=H245LogicalChannelRateRejectReasonTypeTable( ConstrainedValue );
        };
    }
}
     
[DataTypeBitAlign]
struct MaintenanceLoopAck
{
    UINT8 MaintenanceLoopAckExtension:1;
    struct type
    {
        UINT8 typeExtension:1;
        switch
        {
            case typeExtension:
                _struct ExtensionChoice
                {
                }
            default:
                _struct NoneExtension
                {  
                    [post.MaintenanceLoopAckType = H245MaintenanceLoopTypeTable( ConstrainedValue )]
                    AsnPerConstrainedInteger(0,2) ChoiceValue;
                    switch( ConstrainedValue )
                    {
                       case 1: AsnPerConstrainedInteger(1, 65535) mediaLoop;
                       case 2: AsnPerConstrainedInteger(1, 65535) logicalChannelLoop;
                    }
                };
        }
    };
    
    //switch
    //{
    //    case MaintenanceLoopAck_Extension:
    //    ??? there may be some extension values
    //}
    
}

[DataTypeBitAlign]
struct MaintenanceLoopReject
{
    UINT8 MaintenanceLoopRejectExtension:1;
    struct type = MaintenanceLoopRejectType
    {
        UINT8 typeExtension:1;
        switch
        {
            case typeExtension:
                _struct ExtensionChoice
                {
                }
            default:
                _struct NoneExtension
                {
                    [post.MaintenanceLoopRejectType = H245MaintenanceLoopTypeTable( ConstrainedValue )]
                    AsnPerConstrainedInteger(0,2) ChoiceValue;
                    switch( ConstrainedValue )
                    {
                       case 1: AsnPerConstrainedInteger(1, 65535) mediaLoop;
                       case 2: AsnPerConstrainedInteger(1, 65535) logicalChannelLoop;
                    }
                }
        }
    }

    struct cause=MaintenanceLoopRejectCause
    {
        UINT8 causeExtension:1;
        switch
        {
            case causeExtension:
                _struct ExtensionChoice
                {
                }
            default:
                _struct NoneExtension
                {
                    [post.MaintenanceLoopRejectCause = this.tostring]
                    AsnPerConstrainedInteger(0, 0) ChoiceValue = H245MaintenanceLoopRejectCauseTable( ConstrainedValue );
                }
        }
    }
    
    //switch
    //{
    //    case MaintenanceLoopReject_Extension:
    //    ??? there may be some extension values
    //}
    
}

Table H245MaintenanceLoopRejectCauseTable( cause )
{
    switch( cause )
    {
        case 0: "canNotPerformLoop";
        default: FormatString("%d(0x%X)",cause,cause);
    }
}

Table H245responseTypeTable( value )
{
    switch( value )
    {
        case 0: "willTransmitMostPreferredMode";
        case 1: "willTransmitLessPreferredMode";
        default: "Unknown";
     }
}

[DataTypeBitAlign]
struct RequestModeAck
{
    UINT8 RequestModeAckExtension:1;
    AsnPerConstrainedInteger(0,255) sequenceNumber;
    struct response
    {
        UINT8 responseExtension:1;
        switch
        {
            case responseExtension:
            	_struct responseExtension
            	{
            	}
            default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,1) ChoiceValue=H245responseTypeTable( ConstrainedValue );
            };
        }
    };
    
    //switch
    //{
    //    case RequestModeAck_Extension:
    //    ??? there may be some extension values
    //}
    
}

Table H245RequestModeRejectCaseTypeTable( value )
{
    switch( value )
    {
        case 0: "modeUnavailable";
        case 1: "multipointConstraint";
        case 2: "requestDenied";
        default: "Unknown";
    }
}

[DataTypeBitAlign]
struct RequestModeReject
{
    UINT8 RequestModeRejectExtension:1;
    AsnPerConstrainedInteger(0,255) sequenceNumber;
    struct cause
    {
        UINT8 causeExtension:1;
        switch
        {
            case causeExtension:
	            _struct causeExtension
	            {
	            }
            default:
	            _struct NoneExtension
	            {
	                AsnPerConstrainedInteger(0,2) ChoiceValue=H245RequestModeRejectCaseTypeTable( ConstrainedValue );
	            };
        }
    };
    
    //switch
    //{
    //    case RequestModeReject_Extension:
    //    ??? there may be some extension values
    //}
    
}

[DataTypeBitAlign]
struct RequestModeRelease
{
    UINT8 RequestModeReleaseExtension:1;
    /*
    switch
    {
        //case RequestModeRelease_Extension:
        //??? there may be some extension values
    }
    */
}

[DataTypeBitAlign]
struct RoundTripDelayResponse
{
    UINT8 RoundTripDelayResponseExtension:1;
    AsnPerConstrainedInteger(0,255) sequenceNumber;
    /*
    switch
    {
        //case RoundTripDelayResponse_Extension:
        //??? there may be some extension values
    }
    */
}

[DataTypeBitAlign]
struct RequestMultiplexEntryReject
{
    UINT8 RequestMultiplexEntryRejectExtension:1;
    [post.entryNumbersSize = ConstrainedValue]
    AsnPerConstrainedInteger(1,15) EntrySize;
    while [ entryNumbersSize > 0 ]
    {
        [ entryNumbersSize = entryNumbersSize - 1 ]
        AsnPerConstrainedInteger(1,15) entryNumber;
    }
    [post.rejectionDescriptionsSize = ConstrainedValue]
    AsnPerConstrainedInteger(1,15) Size;
    while [ rejectionDescriptionsSize > 0 ]
    {
        [ rejectionDescriptionsSize = rejectionDescriptionsSize - 1 ]
        MultiplexEntryRejectionDescriptions rejectionDescription;
    }
}

[DataTypeBitAlign]
struct RequestMultiplexEntryAck
{
    UINT8 RequestMultiplexEntryAckExtension:1;
    [post.entryNumbersSize = ConstrainedValue]
    AsnPerConstrainedInteger(1,15) Size;
    while [ entryNumbersSize > 0 ]
    {
        [ entryNumbersSize = entryNumbersSize - 1 ]
        AsnPerConstrainedInteger(1,15) entryNumber;
    }
    /*
    switch
    {
        //case RequestMultiplexEntryAck_Extension:
        //??? there may be some extension values
    }
    */
}

Table H245MultiplexEntryRejectionDescriptionsCaseTypeTable( value )
{
    switch( value )
    {
        case 0: "unspecifiedCause";
        case 1: "descriptorTooComplex";
        default: "Unknown";
    }
}      

[DataTypeBitAlign]
struct MultiplexEntryRejectionDescriptions
{
    UINT8 MultiplexEntryRejectionDescriptionsExtension:1;
    AsnPerConstrainedInteger(1,15) multiplexTableEntryNumber;
    struct cause
    {
        UINT8 causeExtension:1;
        switch
        {
            case causeExtension:
	            _struct Extension
	            {
	            }
            default:
	            _struct NoneExtension
	            {
	                AsnPerConstrainedInteger(0,1) ChoiceValue=H245MultiplexEntryRejectionDescriptionsCaseTypeTable( ConstrainedValue );
	            };
        }
    };
    /*
    switch
    {
        //case MultiplexEntryRejectionDescriptions_Extension:
        //??? there may be some extension values
    }
    */
}

[DataTypeBitAlign]
struct MultiplexEntrySendReject
{
    UINT8 MultiplexEntrySendRejectExtension:1;
    AsnPerConstrainedInteger(0,255) sequenceNumber;
    [post.rejectionDescriptionsSize = ConstrainedValue]
    AsnPerConstrainedInteger(1,15) Size;
    while [ rejectionDescriptionsSize > 0 ]
    {
        [ rejectionDescriptionsSize = rejectionDescriptionsSize - 1 ]
        MultiplexEntryRejectionDescriptions rejectionDescription;
    }
}

[DataTypeBitAlign]
struct MultiplexEntrySendAck
{
    UINT8 MultiplexEntrySendAckExtension:1;
    AsnPerConstrainedInteger(0,255) sequenceNumber;
    [post.multiplexTableEntryNumberSize = ConstrainedValue]
    AsnPerConstrainedInteger(1,15) Size;
    while [ multiplexTableEntryNumberSize > 0 ]
    {
        [ multiplexTableEntryNumberSize = multiplexTableEntryNumberSize - 1 ]
        AsnPerConstrainedInteger(1,15) multiplexTableEntryNumber;
    }
}

Table H245RequestChannelCloseRejectCauseTable( cause)
{
    switch( cause )
    {
        case 0: "unspecified";
        default: FormatString("%d(0x%X)",cause,cause);
    }
}
[DataTypeBitAlign]
struct RequestChannelCloseReject
{
    UINT8 RequestChannelCloseRejectExtension:1;
    AsnPerConstrainedInteger(1, 65535) forwardLogicalChannelNumber;
    struct cause = RequestChannelCloseRejectCause
    {
        UINT8 causeExtension:1;
        switch
        {
            case causeExtension:
                _struct ExtensionChoice
                {
                }
            default:
                _struct NoneExtension
                {
                    [post.RequestChannelCloseRejectCause = this.tostring]
                    AsnPerConstrainedInteger(0,0) ChoiceValue = H245RequestChannelCloseRejectCauseTable( ConstrainedValue );
                }
        }
    }
}

[DataTypeBitAlign]
struct RequestChannelCloseAck
{
    UINT8 RequestChannelCloseAckExtension:1;
    AsnPerConstrainedInteger(1, 65535) forwardLogicalChannelNumber;
    /*
    switch
    {
        //case RequestChannelCloseAck_Extension:
        // there may be some extensions
    }
    */
}

[DataTypeBitAlign]
struct CloseLogicalChannelAck
{
    UINT8 CloseLogicalChannelAckExtension:1;
    AsnPerConstrainedInteger(1, 65535) forwardLogicalChannelNumber;
    /*
    switch
    {
        //case CloseLogicalChannelAck_Extension:
        // there may be some extensions
    }
    */
}

Table H245OpenLogicalChannelRejectCauseTypeTable( value )
{
    switch( value )
    {
        case 0: "unspecified";
        case 1: "unsuitableReverseParameters";
        case 2: "dataTypeNotSupported";
        case 3: "dataTypeNotAvailable";
        case 4: "unknownDataType";
        case 5: "dataTypeALCombinationNotSupported";
        default: "Unknown";
    }
}    

Table H245OpenLogicalChannelRejectCauseExtensionTypeTable( value )
{
    switch( value )
    {
        case 0: "multicastChannelNotAllowed";
        case 1: "insufficientBandwidth";
        case 2: "separateStackEstablishmentFailed";
        case 3: "invalidSessionID";
        case 4: "masterSlaveConflict";
        case 5: "waitForCommunicationMode";
        case 6: "invalidDependentChannel";
        case 7: "replacementForRejected";
        case 8: "securityDenied";
        default: "Unknown";
    }
}   
    
[DataTypeBitAlign]
struct OpenLogicalChannelReject
{
    UINT8 OpenLogicalChannelRejectExtensionBit:1;
    AsnPerConstrainedInteger(1, 65535) forwardLogicalChannelNumber;
    struct cause
    {
        UINT8 causeExtension:1;
        switch
        {
            case causeExtension:
            _struct ExtensionChoice
            {
                AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue=H245OpenLogicalChannelRejectCauseExtensionTypeTable( PERSmallNumber );
                AsnPerLengthDeterminant Length;
                [ExtensionEndOffset = FrameOffset + PERLengthValue]
                switch
                {
                    case FrameBitOffset < ExtensionEndOffset * 8:
                         AsnPerPadding(ExtensionEndOffset * 8 - FrameBitOffset) Padding;
                }
            };
            
            default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,5) ChoiceValue=H245OpenLogicalChannelRejectCauseTypeTable( ConstrainedValue );
            };
        }
    };
    switch
    {
        case OpenLogicalChannelRejectExtensionBit:
        struct OpenLogicalChannelRejectExtension
        {
            AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
            UINT8 genericInformationPresent:1;
            switch
            {
                case genericInformationPresent:
                struct SequenceOfGenericInformation
                {
                    AsnPerLengthDeterminant Length;
                    [ SequenceOfGenericInfoEndOffset = FrameOffset + PERLengthValue, 
                      post.GenericInfoSize = PERLengthValue ]
                    AsnPerLengthDeterminant Size;
                    while [GenericInfoSize > 0]
                    {
                        [GenericInfoSize = GenericInfoSize - 1]
                        GenericInformation GenericInfo;
                    }
                    switch
                    {
                        case FrameBitOffset < SequenceOfGenericInfoEndOffset * 8:
                        AsnPerPadding( SequenceOfGenericInfoEndOffset * 8 - FrameBitOffset ) Padding;
                    }
                }
            }
        }
    }
}

Table H245TerminalCapabilitySetRejectCauseTypeTable( value )
{
    switch( value )
    {
        case 0: "unspecified";
        case 1: "undefinedTableEntryUsed";
        case 2: "descriptorCapacityExceeded";
        case 3: "tableEntryCapacityExceeded";
        default: "Unknown";
     }
}

Table H245TerminalCapabilitySetRejectCausetableEntryCapacityExceededTypeTable( value )
{
    switch( value )
    {
        case 0: "highestEntryNumberProcessed";
        case 1: "noneProcessed";
        default: "Unknown";
     }
}

[DataTypeBitAlign]
struct TerminalCapabilitySetReject
{
    UINT8 TerminalCapabilitySetRejectExtension:1;
    AsnPerConstrainedInteger(0,255) sequenceNumber;
    struct cause
    {
        UINT8 causeExtension:1;
        switch
        {
            case causeExtension:
            _struct ExtensionChoice
            {
            };
            
            default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,3) ChoiceValue=H245TerminalCapabilitySetRejectCauseTypeTable( ConstrainedValue );
                switch( ConstrainedValue )
                {
                    case 3:
                    struct tableEntryCapacityExceeded
                    {
                        AsnPerConstrainedInteger(0,1) ChoiceValue=H245TerminalCapabilitySetRejectCausetableEntryCapacityExceededTypeTable( ConstrainedValue );
                        switch( ConstrainedValue )
                        {
                            case 0: AsnPerConstrainedInteger(1,65535) highestEntryNumberProcessed;
                        }
                    };
                }
            };
        }
    };
    switch{
    	case TerminalCapabilitySetRejectExtension:
    		_struct Extension{
    			AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    			UINT8 genericInformationPresent:1;
    			switch{
    				case genericInformationPresent:
    					struct SequenceOfGenericInformation{
    						AsnPerLengthDeterminant Length;
    						[SequenceOfGenericInformationEndoffset = FrameOffset + PERLengthValue]
							[Post.PERArraySize = PERLengthValue]
							AsnPerLengthDeterminant Size;
							while [PERArraySize > 0]
							{
								[PERArraySize = PERArraySize -1]
								GenericInformation genericInformation;
							}
							switch{
								case FrameBitOffset < SequenceOfGenericInformationEndoffset * 8:
									AsnPerPadding(SequenceOfGenericInformationEndoffset * 8 - FrameOffset) Padding;
							}
						}
				}
			}
	}
}

Table H245MasterSlaveDeterminationRejectCauseTable( cause )
{
    switch( cause )
    {
        case 0: "identical Numbers";
        default: FormatString("%d(0x%X)",cause,cause);
    }
}

[DataTypeBitAlign]
struct MasterSlaveDeterminationReject
{
    UINT8 MasterSlaveDeterminationRejectExtension:1;
    struct cause = MasterSlaveDeterminationRejectCause
    {
        UINT8 causeExtension:1;
        switch
        {
            case causeExtension:
                _struct ExtensionChoice
                {
                }
            default:
                _struct NoneExtension
                {
                    [post.MasterSlaveDeterminationRejectCause = H245MasterSlaveDeterminationRejectCauseTable( ConstrainedValue )]
                    AsnPerConstrainedInteger(0,0) ChoiceValue;
                };
        }     
    };         
}               

[DataTypeBitAlign]
struct ReverseLogicalChannelParameters  = FormatString("PortNumber = %d", PortNumber)
{   
    UINT8 reverseLogicalChannelParametersExtension:1;
    UINT8 portNumberPresent:1;
    UINT8 multiplexParametersPresent:1;
    AsnPerConstrainedInteger(1,65535) reverseLogicalChannelNumber;   
    switch
    {
        case portNumberPresent: 
            [post.PortNumber = ConstrainedValue]
            AsnPerConstrainedInteger(0,65535) portNumber;   
    }  
    switch
    {
        case multiplexParametersPresent:
            struct multiplexParameters
            {
                UINT8 multiplexParametersExtension:1;
                switch
                {
                    case multiplexParametersExtension:
                        _struct ExtensionChoice
                        { 
                            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                            AsnPerLengthDeterminant Length;
                            [multiplexParametersExtensionEnd = FrameOffset + PERLengthValue]
                            switch( PERSmallNumber)
                            {
                                case 0: h2250LogicalChannelParameters h2250LogicalChannelParameters; 
                            }
                            switch
                            {
                                case FrameBitOffset < multiplexParametersExtensionEnd * 8:
                                    AsnPerPadding(multiplexParametersExtensionEnd * 8 - FrameBitOffset) Padding;
                            }
                        }
                    default:
                        _struct NoneExtension
                        { 
                            AsnPerConstrainedInteger(0,0) ChoiceValue;
                            switch( ConstrainedValue )
                            {
                                case 0: h222LogicalChannelParameters h222LogicalChannelParameters;
                            }
                        }
                }
            }
    }
    switch
    {
        case reverseLogicalChannelParametersExtension:
            struct Extension
            {
                AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
                UINT8 replacementForPresent:1; 
                switch
                {
                    case replacementForPresent:
                        struct ReplacementFor
                        {  
                            AsnPerLengthDeterminant Length;
                            [ReplacementForEnd = FrameOffset + PERLengthValue]
                            AsnPerConstrainedInteger(1, 65535) replacementFor;
                            switch
                            {
                                case FrameBitOffset < ReplacementForEnd * 8:
                                    AsnPerPadding(ReplacementForEnd * 8 - FrameBitOffset) Padding;
                            }
                        }
                }
                
            }
    }
}

[DataTypeBitAlign]
struct OpenLogicalChannelAck = FormatString("%s%s",
                                            RTPAddPort ? "Media Channel:" + RTPAddPort : "",
                                            RTCPAddPort ? ", Media Control Channel:" + RTCPAddPort : "")
{
    UINT8 OpenLogicalChannelAckExtension:1;
    UINT8 reverseLogicalChannelParametersPresent:1;
    AsnPerConstrainedInteger(1,65535) forwardLogicalChannelNumber;
    switch
    {
        case reverseLogicalChannelParametersPresent:
            ReverseLogicalChannelParameters reverseLogicalChannelParameters;
    }
    
    switch
    {
        case OpenLogicalChannelAckExtension: OpenLogicalChannelAckExtension Extension;
    }
}


Table H245forwardMultiplexAckParametersTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "h2250LogicalChannelAckParameters";

	}
}

[DataTypeBitAlign]
struct H245forwardMultiplexAckParameters = H245forwardMultiplexAckParametersTable(ExtensionBit, H245forwardMultiplexAckParametersChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	_struct NoneExtension
	{
		[Post.H245forwardMultiplexAckParametersChoice = ConstrainedValue]
		AsnPerConstrainedInteger(0, 0) ChoiceValue;
		switch (H245forwardMultiplexAckParametersChoice)
		{
			case 0: H2250LogicalChannelAckParameters h2250LogicalChannelAckParameters;

		}
	}
}


[DataTypeBitAlign]
struct OpenLogicalChannelAckExtension
{
    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    UINT8 separateStackPresent:1;
    switch
    {
        case PERSmallNumber >= 1: UINT8 forwardMultiplexAckParametersPresent:1;
    }
    switch
    {
        case PERSmallNumber >= 2: UINT8 encryptionSyncPresent:1;
    }
	switch 
	{
		case PERSmallNumber >= 3: UINT8 genericInformationPresent:1;
	}
    switch
    {
       case separateStackPresent:
           struct SeparateStack
           {
               AsnPerLengthDeterminant Length;
               [OpenLogicalChannelAckExtensionEnd = FrameOffset + PERLengthValue]
               NetworkAccessParameters separateStack;
               switch
               {
                   case FrameBitOffset < OpenLogicalChannelAckExtensionEnd * 8:
                       AsnPerPadding(OpenLogicalChannelAckExtensionEnd * 8 - FrameBitOffset) Padding;
               }
           }
    }
    switch
    {
        case forwardMultiplexAckParametersPresent:
             struct forwardMultiplexAckParameters
             {
                 AsnPerLengthDeterminant length;
                 [OpenLogicalChannelAckExtensionEnd = FrameOffset + PERLengthValue]
                 UINT8 forwardMultiplexAckParametersExtension:1;
                 switch
                 {
                     case forwardMultiplexAckParametersExtension:
                     	_struct Extension
                     	{
                     	}
                     default:
                     	_struct NoneExtension
						{
							[Post.H245forwardMultiplexAckParametersChoice = ConstrainedValue]
							AsnPerConstrainedInteger(0, 0) ChoiceValue;
							switch (H245forwardMultiplexAckParametersChoice)
							{
								case 0: H2250LogicalChannelAckParameters h2250LogicalChannelAckParameters;
							}
						}
                 }
                 switch
                 {
                     case FrameBitOffset < OpenLogicalChannelAckExtensionEnd * 8:
                         AsnPerPadding(OpenLogicalChannelAckExtensionEnd * 8 - FrameBitOffset) Padding;
                 }
             }
    }
    switch
    {
        case encryptionSyncPresent:
             struct EncryptionSyncExtension
             {
                 AsnPerLengthDeterminant Length;
                 [EncryptionSyncEndOffset = FrameOffset + PERLengthValue]
                 EncryptionSync encryptionSync;
                 switch
                 {
                     case FrameBitOffset < EncryptionSyncEndOffset * 8:
                         AsnPerPadding(EncryptionSyncEndOffset * 8 - FrameBitOffset) Padding;
                 }
             };
            
    }
    switch 
    {
    	case genericInformationPresent:
    		struct genericInformation
            {
            	AsnPerLengthDeterminant Length;
                [genericInformationEndOffset = FrameOffset + PERLengthValue]
                
				[Post.PERArraySize = PERLengthValue]
				AsnPerLengthDeterminant Size;
				while [PERArraySize > 0]
				{
					[PERArraySize = PERArraySize - 1]
					GenericInformation genericInformation;
				}
                switch
                {
                    case FrameBitOffset < genericInformationEndOffset * 8:
                        AsnPerPadding(genericInformationEndOffset * 8 - FrameBitOffset) Padding;
                }
            };
	}
}

[DataTypeBitAlign]
struct H2250LogicalChannelAckParameters = FormatString("%s%s",
                                                       RTPAddPort ? "Media Channel:" + RTPAddPort : "",
                                                       RTCPAddPort ? ", Media Control Channel:" + RTCPAddPort : "")
{
    UINT8 H2250LogicalChannelAckParametersExtensionBit:1;
    UINT8 nonStandardPresent:1;
    UINT8 sessionIDPresent:1;
    UINT8 mediaChannelPresent:1;
    UINT8 mediaControlChannelPresent:1;
    UINT8 dynamicRTPPayloadTypePresent:1;
    switch
    {
        case nonStandardPresent:
        struct NonStandardParameterList
        {
            [post.NonStandSize = PERLengthValue]
            AsnPerLengthDeterminant Size;
            while [ NonStandSize > 0 ]
            {
                [ NonStandSize = NonStandSize - 1 ]
                H245NonStandardParameter nonStandard;
            }
        };
    }
    
    switch
    {
        case sessionIDPresent: AsnPerConstrainedInteger(1,255) sessionID;
    }
    
    switch
    {
        case mediaChannelPresent: 
        [Post.Global.RTPPort$[MakeByteArray(property.H245UnicastIPv4Address, property.H245UnicastTsapIdentifier)] = TRUE, RTPAddPort = this.ToString]
        H245TransportAddress mediaChannel;
    }
    
    switch
    {
        case mediaControlChannelPresent: 
        [Post.Global.RTCPPort$[MakeByteArray(property.H245UnicastIPv4Address, property.H245UnicastTsapIdentifier)] = TRUE, RTCPAddPort = this.ToString]
        H245TransportAddress mediaControlChannel;
    }
    
    switch
    {
        case dynamicRTPPayloadTypePresent: AsnPerConstrainedInteger(96,127) dynamicRTPPayloadType;
    }
    
    switch
    {
        case H2250LogicalChannelAckParametersExtensionBit: H2250LogicalChannelAckParametersExtension Extension;
    }
}

[DataTypeBitAlign]
struct H2250LogicalChannelAckParametersExtension
{
    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    UINT8 flowControlToZeroPresent:1;
    switch
    {
        case PERSmallNumber >= 1: UINT8 portNumberPresent:1;
    }
    switch
    {
        case flowControlToZeroPresent: AsnPerBoolean(1) flowControlToZero;
    }
    
    switch
    {
        case portNumberPresent: 
             struct portnumber
             {
                 AsnPerLengthDeterminant length;
                 [portnumberEnd = FrameOffset + PERLengthValue]
                 AsnPerConstrainedInteger(0,65535) portNumber;
                 switch
                 {
                     case FrameBitOffset < portnumberEnd * 8:
                         AsnPerPadding( portnumberEnd * 8 - FrameBitOffset ) Padding;
                 }
             };
    }
};
        
[DataTypeBitAlign]
struct MasterSlaveDeterminationAck = decision.ToString
{
    UINT8 MasterSlaveDeterminationAckExtension:1;
    //struct decision = ChoiceValue.ToString
    //{
    //    AsnPerConstrainedInteger(0,1) decision = H245MSDACKDecisionTable( ConstrainedValue );
    //};
    UINT8 decision:1 = H245MSDACKDecisionTable( this );
}

[DataTypeBitAlign]
struct TerminalCapabilitySetAck
{
    UINT8 TerminalCapabilitySetAckExtension:1;
    AsnPerConstrainedInteger(0,255) sequenceNumber;
    switch
    {
        case TerminalCapabilitySetAckExtension:
	        _struct TerminalCapabilitySetAckExtension
	        {
	            AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
	            UINT8 genericInformationPresent:1;
	            switch
	            {
	                case genericInformationPresent:
	                _struct SequenceOfGenericInformation
	                {
	                    AsnPerLengthDeterminant length;
	                    [GenericInformationEndOffset = FrameOffset + PERLengthValue, post.GenericInformationSize = PERLengthValue]
	                    AsnPerLengthDeterminant Size;
	                    while [ GenericInformationSize > 0 ]
	                    {
	                        [GenericInformationSize = GenericInformationSize-1]
	                        GenericInformation genericInformation;
	                    }
	                    switch
	                    {
	                        case FrameBitOffset < GenericInformationEndOffset * 8:
	                        AsnPerPadding(GenericInformationEndOffset * 8 - FrameBitOffset) Padding;
	                    }
	                };
	            }
	        };
    }
}

[DataTypeBitAlign]
struct MasterSlaveDetermination
{
    UINT8 MasterSlaveDeterminationExtension:1;
    AsnPerConstrainedInteger(0,255) terminalType;
    AsnPerConstrainedInteger(0,16777215) statusDeterminationNumber; 
}

[DataTypeBitAlign]
struct TerminalCapabilitySet
{
    UINT8 TerminalCapabilitySetExtensionBit:1;
    UINT8 multiplexCapabilityPresent:1;
    UINT8 capabilityTablePresent:1;
    UINT8 capabilityDescriptorsPresent:1;
    AsnPerConstrainedInteger(0,255) sequenceNumber;
    AsnPerObjectIdentifier protocolIdentifier;
    switch
    {
        case multiplexCapabilityPresent: MultiplexCapability MultiplexCapability;
    }
    switch
    {
        case capabilityTablePresent:
             struct capabilityTable
             {
             	   [post.SizeOfCapabilityTableEntry = ConstrainedValue]
                 AsnPerConstrainedInteger(1,256) Size;
                 while [ SizeOfCapabilityTableEntry > 0 ]
                 {
                     [ SizeOfCapabilityTableEntry = SizeOfCapabilityTableEntry - 1 ]
                     CapabilityTableEntry capabilityTable;
                 };
             };
    }
    
    switch
    {
        case capabilityDescriptorsPresent:
             struct capabilityDescriptors
             {
                 [post.SizeOfCapabilityDescriptor = ConstrainedValue]
                 AsnPerConstrainedInteger(1,256) Size;
                 while [ SizeOfCapabilityDescriptor > 0 ]
                 {
                     [ SizeOfCapabilityDescriptor = SizeOfCapabilityDescriptor - 1 ]
                     CapabilityDescriptor capabilityDescriptor;
                 }
             };
    }
    switch
    {
        case TerminalCapabilitySetExtensionBit:
        _struct TerminalCapabilitySetExtension
        {
            AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
            UINT8 genericInformationPresent:1;
            switch
            {
                case genericInformationPresent:
                _struct SequenceOfGenericInformation
                {
                    AsnPerLengthDeterminant length;
                    [GenericInformationEndOffset = FrameOffset + PERLengthValue, post.GenericInformationSize = PERLengthValue]
                    AsnPerLengthDeterminant Size;
                    while [ GenericInformationSize > 0 ]
                    {
                        [GenericInformationSize = GenericInformationSize-1]
                        GenericInformation genericInformation;
                    }
                    switch
                    {
                        case FrameBitOffset < GenericInformationEndOffset * 8:
                        AsnPerPadding(GenericInformationEndOffset * 8 - FrameBitOffset) Padding;
                    }
                };
            }
        };
    }
}

[DataTypeBitAlign]
struct CapabilityDescriptor
{
    UINT8 simultaneousCapabilitiesPresent:1;
    AsnPerConstrainedInteger(0,255) capabilityDescriptorNumber;
    switch
    {
        case simultaneousCapabilitiesPresent:
             struct simultaneousCapabilities
             {
                 [post.SizeOfACS = ConstrainedValue]
                 AsnPerConstrainedInteger(1,256) Size;
                 while [ SizeOfACS > 0 ]
                 {
                     [ SizeOfACS = SizeOfACS - 1 ]
                     AlternativeCapabilitySet simultaneousCapabilities;
                 }
             };
    }
}

[DataTypeBitAlign]
struct AlternativeCapabilitySet
{
    [post.SizeOfCTE = ConstrainedValue]
    AsnPerConstrainedInteger(1,256) Size;
    //AsnPerConstrainedInteger(1,65535) CapabilityTableEntryNumber[ SizeOfCTE ];
    UINT16 CapabilityTableEntryNumber[ SizeOfCTE ];
}

[DataTypeBitAlign]
struct CapabilityTableEntry = FormatString("Capability Table Entry Number: %d", ATEntryNumber)
{
    UINT8 capabilityPresent:1;
    [post.ATEntryNumber = ConstrainedValue]
    AsnPerConstrainedInteger(1,65535) capabilityTableEntryNumber;
    switch
    {
        case capabilityPresent: Capability capability;
    }
}

Table H245CapabilityChoiceTypeTable( type )
{
    switch( type )
    {
        case 0: "nonStandard";
        case 1: "receiveVideoCapability";
        case 2: "transmitVideoCapability";
        case 3: "receiveAndTransmitVideoCapability";
        case 4: "receiveAudioCapability";
        case 5: "transmitAudioCapability";
        case 6: "receiveAndTransmitAudioCapability";
        case 7: "receiveDataApplicationCapability";
        case 8: "transmitDataApplicationCapability";
        case 9: "receiveAndTransmitDataApplicationCapability";
        case 10: "h233EncryptionTransmitCapability";
        case 11: "h233EncryptionReceiveCapability";
        default: FormatString("%d", type);
    }
}

Table H245CapabilityExtensionChoiceTable( type )
{
    switch( type )
    {
        case 0: "conferenceCapability";
        case 1: "h235SecurityCapability";
        case 2: "maxPendingReplacementFor";
        case 3: "receiveUserInputCapability";
        case 4: "transmitUserInputCapability";
        case 5: "receiveAndTransmitUserInputCapability";
        case 6: "genericControlCapability";
        case 7: "receiveMultiplexedStreamCapability";
        case 8: "transmitMultiplexedStreamCapability";
        case 9: "receiveAndTransmitMultiplexedStreamCapability";
        case 10: "receiveRTPAudioTelephonyEventCapability";
        case 11: "receiveRTPAudioToneCapability";
        case 12: "depFecCapability";
        case 13: "multiplePayloadStreamCapability";
        case 14: "fecCapability";
        case 15: "redundancyEncodingCap";
        case 16: "oneOfCapabilities";
        default: FormatString("%d", type);
    }
}

[DataTypeBitAlign]
struct Capability = CapabilityChoice
{
    UINT8 CapabilityExtension:1;
    switch
    {
        case CapabilityExtension:
        _struct ExtensionChoice
        {
            [ CapabilityChoice = this.ToString ]
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245CapabilityExtensionChoiceTable( PERSmallNumber );
            AsnPerLengthDeterminant Length;
            [CapabilityExtensionEndOffset = FrameOffset + PERLengthValue]
            switch( PERSmallNumber )
            {
                case 0: ConferenceCapability conferenceCapability;
                case 1: H235SecurityCapability h235SecurityCapability;
                case 2: AsnPerConstrainedInteger(0,255) maxPendingReplacementFor;
                case 3: UserInputCapability receiveUserInputCapability;
                case 4: UserInputCapability transmitUserInputCapability;
                case 5: UserInputCapability receiveAndTransmitUserInputCapability;
                case 6: GenericCapability genericControlCapability;
                case 7: MultiplexedStreamCapability receiveMultiplexedStreamCapability;
                case 8: MultiplexedStreamCapability transmitMultiplexedStreamCapability;
                case 9: MultiplexedStreamCapability receiveAndTransmitMultiplexedStreamCapability;
                case 10: AudioTelephonyEventCapability receiveRTPAudioTelephonyEventCapability;
                case 11: AudioToneCapability receiveRTPAudioToneCapability;
                case 12: DepFECCapability depFecCapability;
                case 13: MultiplePayloadStreamCapability multiplePayloadStreamCapability;
                case 14: FECCapability fecCapability;
                case 15: RedundancyEncodingCapability redundancyEncodingCap;
                case 16: AlternativeCapabilitySet oneOfCapabilities;
            }
            switch
            {
                case FrameBitOffset < CapabilityExtensionEndOffset * 8:
                AsnPerPadding(CapabilityExtensionEndOffset * 8 - FrameBitOffset) Padding;
            }
        };
        default:
        _struct NoneExtension
        {
            [ CapabilityChoice = this.ToString]
            AsnPerConstrainedInteger(0,11) ChoiceValue = H245CapabilityChoiceTypeTable(ConstrainedValue);
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardParameter nonStandard;
                case 1: VideoCapability receiveVideoCapability;
                case 2: VideoCapability transmitVideoCapability;
                case 3: VideoCapability receiveAndTransmitVideoCapability;
                case 4: AudioCapability receiveAudioCapability;
                case 5: AudioCapability transmitAudioCapability;
                case 6: AudioCapability receiveAndTransmitAudioCapability;
                case 7: DataApplicationCapability receiveDataApplicationCapability;
                case 8: DataApplicationCapability transmitDataApplicationCapability;
                case 9: DataApplicationCapability receiveAndTransmitDataApplicationCapability;
                case 10: AsnPerBoolean(0) h233EncryptionTransmitCapability;
                case 11: struct h233EncryptionReceiveCapability
                         {
                             UINT8 h233EncryptionReceiveCapabilityExtension:1;
                             AsnPerConstrainedInteger(0,255) h233IVResponseTime = FormatString("%d milliseconds", ConstrainedValue);
                             //switch
                             //{
                             //    case h233EncryptionReceiveCapability_Extension
                             //}
                         };
            }
        };
    }
}

[DataTypeBitAlign]
struct MultiplexedStreamCapability
{
    UINT8 MultiplexedStreamCapabilityExtensionBit:1;
    UINT8 capabilityOnMuxStreamPresent:1;
    MultiplexFormat multiplexFormat;
    AsnPerBoolean(0) controlOnMuxStream;
    switch
    {
        case capabilityOnMuxStreamPresent: 
        struct capabilityOnMuxStream
        {
            [post.AlternativeCapabilitySetSize = ConstrainedValue]
            AsnPerConstrainedInteger(1,256) Size;
            while [ AlternativeCapabilitySetSize > 0 ]
            {
                [ AlternativeCapabilitySetSize = AlternativeCapabilitySetSize  - 1 ]
                AlternativeCapabilitySet alternativeCapabilitySet;
            }
        };
    }
    //switch
    //{
    //    case MultiplexedStreamCapabilityExtensionBit:
    //}
}

[DataTypeBitAlign]
struct MultiplexFormat
{
    UINT8 MultiplexFormatExtension:1;
    switch
    {
       case MultiplexFormatExtension:
       _struct ExtensionChoice
       {
           
       };
       default:
       _struct NoneExtension
       {
          AsnPerConstrainedInteger(0,2) ChoiceIndex;
          switch( ConstrainedValue )
          {
              case 0: H245NonStandardParameter nonStandard;
              case 1: H222Capability h222Capability;
              case 2: H223Capability h223Capability;
          }
       };
    }
}

[DataTypeBitAlign]
struct AudioTelephonyEventCapability
{
    UINT8 AudioTelephonyEventCapabilityExensionBit:1;
    AsnPerConstrainedInteger(96,127) dynamicRTPPayloadType;
    AsnPerGeneralString audioTelephoneEvent;
    //switch
    //{
    //    case AudioTelephonyEventCapabilityExensionBit
    //}
}

[DataTypeBitAlign]
struct AudioToneCapability
{
    UINT8 AudioToneCapabilityExtensionBit:1;
    AsnPerConstrainedInteger(96,127) dynamicRTPPayloadType;
    //switch
    //{
    //    case AudioToneCapabilityExtensionBit
    //}
}

[DataTypeBitAlign]
struct DepFECCapability
{
    UINT8 DepFECCapabilityExtensionBit:1;
    switch
    {
        case DepFECCapabilityExtensionBit:
        _struct ExtensionChoice
        {
        };
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,1) ChoiceValue;
            switch( ConstrainedValue )
            {
                case 0: struct rfc2733
                        {
                            UINT8 rfc2733ExtensionBit:1;
                            AsnPerBoolean(0) redundancyEncoding;
                            struct separateStream
                            {
                                UINT8 separateStreamExtensionBit:1;
                                AsnPerBoolean(0) separatePort;
                                AsnPerBoolean(0) samePort;
                                //switch
                                //{
                                //    case separateStreamExtensionBit
                                //}
                            };
                            //switch
                            //{
                            //    case rfc2733ExtensionBit
                            //}
                        };
            }
        };
    }
}

[DataTypeBitAlign]
struct MultiplePayloadStreamCapability
{
    UINT8 MultiplePayloadStreamCapabilityExtensionBit:1;
    [post.AlternativeCapabilitySetSize = ConstrainedValue]
    AsnPerConstrainedInteger(1,256) Size;
    while [ AlternativeCapabilitySetSize > 0 ]
    {
        [ AlternativeCapabilitySetSize = AlternativeCapabilitySetSize  - 1 ]
        AlternativeCapabilitySet alternativeCapabilitySet;
    }
    //switch
    //{
    //    case MultiplePayloadStreamCapabilityExtensionBit
    //}
}

[DataTypeBitAlign]
struct FECCapability
{
    UINT8 FECCapabilityExtensionBit:1;
    UINT8 fecSchemePresent:1;
    UINT8 rfc2733FormatPresent:1;
    AsnPerConstrainedInteger(1,65535) protectedCapability;
    switch
    {
        case fecSchemePresent: AsnPerObjectIdentifier fecScheme;
    }
    switch
    {
        case rfc2733FormatPresent:
        struct rfc2733Format
        {
            AsnPerConstrainedInteger(0,2) ChoiceValue;
            switch( ConstrainedValue )
            {
                case 0: AsnPerSemiConstrainedInteger(1) rfc2733rfc2198;
                case 1: AsnPerSemiConstrainedInteger(1) rfc2733sameport;
                case 2: AsnPerSemiConstrainedInteger(1) rfc2733diffport;
            }
        };
    }
    //switch
    //{
    //    case FECCapabilityExtensionBit
    //}
}


Table UserInputCapabilityTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "nonStandard";
		case (ExtensionBit == 0) && (Choice== 1): "basicString";
		case (ExtensionBit == 0) && (Choice== 2): "iA5String";
		case (ExtensionBit == 0) && (Choice== 3): "generalString";
		case (ExtensionBit == 0) && (Choice== 4): "dtmf";
		case (ExtensionBit == 0) && (Choice== 5): "hookflash";
		case (ExtensionBit == 1) && (Choice== 0): "extendedAlphanumeric";
		case (ExtensionBit == 1) && (Choice== 1): "encryptedBasicString";
		case (ExtensionBit == 1) && (Choice== 2): "encryptedIA5String";
		case (ExtensionBit == 1) && (Choice== 3): "encryptedGeneralString";
		case (ExtensionBit == 1) && (Choice== 4): "secureDTMF";
		case (ExtensionBit == 1) && (Choice== 5): "genericUserInputCapability";

	}
}

[DataTypeBitAlign]
struct UserInputCapability
{
    UINT8 UserInputCapabilityExtension:1;
    switch
    {
        case UserInputCapabilityExtension:
	        _struct ExtensionChoice
	        {
	            [Post.UserInputCapabilityChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = UserInputCapabilityTable(UserInputCapabilityExtension, UserInputCapabilityChoice);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch(UserInputCapabilityChoice)
				{
					case 5: GenericCapability genericUserInputCapability;
				}
	        };
        default:
	        _struct NoneExtension
	        {
	        	[Post.UserInputCapabilityChoice = PERSmallNumber]
	           AsnPerConstrainedInteger(0,5) ChoiceValue = UserInputCapabilityTable(UserInputCapabilityExtension, UserInputCapabilityChoice);
	           switch( ConstrainedValue )
	           {
	               case 0:
		               struct nonStandardList
		               {
		                   [post.NonStandardParameterCount = ConstrainedValue]
		                   AsnPerConstrainedInteger(1,16) Size;
		                   while [ NonStandardParameterCount > 0 ]
		                   {
		                       [ NonStandardParameterCount = NonStandardParameterCount - 1 ]
		                       H245NonStandardParameter nonStandard;
		                   }
		               };
	           }
	        };
    }
}

[DataTypeBitAlign]
struct H235SecurityCapability
{
    UINT8 H235SecurityCapabilityExtension:1;
    EncryptionAuthenticationAndIntegrity encryptionAuthenticationAndIntegrity;
    AsnPerConstrainedInteger(1, 65535) mediaCapability;
    //switch
    //{
    //    case H235SecurityCapability_Extension:
    //}
}

[DataTypeBitAlign]
struct ConferenceCapability
{
    UINT8 ConferenceCapabilityExtension:1;
    UINT8 nonStandardDataPresent:1;
    switch
    {
        case nonStandardDataPresent:
        struct nonStandardData
        {
            [post.nonStandardDataCount = PERLengthValue]
            AsnPerLengthDeterminant Length;
            while [ nonStandardDataCount > 0 ]
            {
                [ nonStandardDataCount = nonStandardDataCount - 1 ]
                H245NonStandardParameter nonStandardData;
            }
        };
    }
    AsnPerBoolean(0) chairControlCapability;
	switch{
		case ConferenceCapabilityExtension:
			_struct Extension{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
				UINT8 videoIndicateMixingCapabilityPresent:1;
				switch{
					case PERSmallNumber >= 1: UINT8 multipointVisualizationCapability:1;
				}
				switch{
					case videoIndicateMixingCapabilityPresent: AsnPerBoolean(1) videoIndicateMixingCapability;
				}
				switch{
					case multipointVisualizationCapability: AsnPerBoolean(1) multipointVisualizationCapability;
				}
			}
		}		
}

[DataTypeBitAlign]
struct ExtendedVideoCapability	//Sequence
{
	UINT8 ExtensionBit:1;

	struct videoCapability
	{
		[Post.PERArraySize = PERLengthValue]
		AsnPerLengthDeterminant Size;
		VideoCapability videoCapability[PERArraySize];
	}
	struct videoCapabilityExtension
	{
		[Post.PERArraySize = PERLengthValue]
		AsnPerLengthDeterminant Size;
		GenericCapability videoCapabilityExtension[PERArraySize];
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}

[DataTypeBitAlign]
struct VideoCapability
{
    UINT8 VideoCapabilityExtension:1;
    switch
    {
        case VideoCapabilityExtension:
        _struct ExtensionChoice
        {
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
            AsnPerLengthDeterminant Length;
            [VideoCapabilityExtensionEndOffset = FrameOffset + PERLengthValue]
            switch( PERSmallNumber )
            {
                case 0: GenericCapability genericVideoCapability;
                case 1: ExtendedVideoCapability extendedVideoCapability;
            }
            switch
            {
                case FrameBitOffset < VideoCapabilityExtensionEndOffset * 8:
                     AsnPerPadding(VideoCapabilityExtensionEndOffset * 8 - FrameBitOffset ) Padding;
            }
        }
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,4) ChoiceValue;
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardParameter  nonStandard;
                case 1: H261VideoCapability h261VideoCapability;
                case 2: H262VideoCapability h262VideoCapability;
                case 3: H263VideoCapability h263VideoCapability;
                case 4: IS11172VideoCapability is11172VideoCapability;
            }
        };
    }
}

[DataTypeBitAlign]
struct IS11172VideoCapability
{
    UINT8 IS11172VideoCapabilityExtensionBit:1;
    UINT8 videoBitRatePresent:1;
    UINT8 vbvBufferSizePresent:1;
    UINT8 samplesPerLinePresent:1;
    UINT8 linesPerFramePresent:1;
    UINT8 pictureRatePresent:1;
    UINT8 luminanceSampleRatePresent:1;
    AsnPerBoolean(0) constrainedBitstream;
    switch
    {
        case videoBitRatePresent: AsnPerConstrainedInteger(0,1073741823) videoBitRate = FormatString("%d bits", ConstrainedValue * 400);
    }
    switch
    {
        case vbvBufferSizePresent: AsnPerConstrainedInteger(0,262143) vbvBufferSize = FormatString("%d bits", ConstrainedValue * 16384);
    }
    switch
    {
        case samplesPerLinePresent: AsnPerConstrainedInteger(0,16383) samplesPerLine = FormatString("%d (samples/line)", ConstrainedValue);
    }
    switch
    {
        case linesPerFramePresent: AsnPerConstrainedInteger(0,16383) linesPerFrame = FormatString("%d (lines/frame)", ConstrainedValue);
    }
    switch
    {
        case pictureRatePresent: AsnPerConstrainedInteger(0,15) pictureRate;
    }
    switch
    {
        case luminanceSampleRatePresent: AsnPerConstrainedInteger(0,4294967295) luminanceSampleRate = FormatString("%d (samples/s)", ConstrainedValue);
    }
	
	switch{
		case IS11172VideoCapabilityExtensionBit:
			_struct Extension{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
				UINT8 videoBadMBsCapPresent:1;
				switch{
					case videoBadMBsCapPresent: AsnPerBoolean(1) videoBadMBsCap;
				}
			}
	}	
}

[DataTypeBitAlign]
struct H261VideoCapability
{
    UINT8 H261VideoCapabilityExtension:1;
    UINT8 qcifMPIPresent:1;
    UINT8 cifMPIPresent:1;
    switch
    {
        case qcifMPIPresent: AsnPerConstrainedInteger(1,4) qcifMPI = FormatString("%d * (1/29.97 Hz)", ConstrainedValue);
    }
    
    switch
    {
        case cifMPIPresent: AsnPerConstrainedInteger(1,4) cifMPI = FormatString("%d * (1/29.97 Hz)", ConstrainedValue);
    }
    
    AsnPerBoolean(0) temporalSpatialTradeOffCapability;
    AsnPerConstrainedInteger(1,19200) maxBitRate = FormatString("%d bits", ConstrainedValue * 100);
    AsnPerBoolean(0) stillImageTransmission;
    
}

[DataTypeBitAlign]
struct H262VideoCapability
{
    UINT8 H262VideoCapabilityExtension:1;
    UINT8 videoBitRatePresent:1;
    UINT8 vbvBufferSizePresent:1;
    UINT8 samplesPerLinePresent:1;
    UINT8 linesPerFramePresent:1;
    UINT8 framesPerSecondPresent:1;
    UINT8 luminanceSampleRatePresent:1;
    AsnPerBoolean(0) profileAndLevelSPatML;
    AsnPerBoolean(0) profileAndLevelMPatLL;
    AsnPerBoolean(0) profileAndLevelMPatML;
    AsnPerBoolean(0) profileAndLevelMPatH14;
    AsnPerBoolean(0) profileAndLevelMPatHL;
    AsnPerBoolean(0) profileAndLevelSNRatLL;
    AsnPerBoolean(0) profileAndLevelSNRatML;
    AsnPerBoolean(0) profileAndLevelSpatialatH14;
    AsnPerBoolean(0) profileAndLevelHPatML;
    AsnPerBoolean(0) profileAndLevelHPatH14;
    AsnPerBoolean(0) profileAndLevelHPatHL;
    
    switch
    {
        case videoBitRatePresent: AsnPerConstrainedInteger(0,1073741823) videoBitRate = FormatString("%d bits", ConstrainedValue*400);
    }
    
    switch
    {
        case vbvBufferSizePresent: AsnPerConstrainedInteger(0,262143) vbvBufferSize = FormatString("%d bits", ConstrainedValue*16384);
    }
    
    switch
    {
        case samplesPerLinePresent: AsnPerConstrainedInteger(0,16383) samplesPerLine = FormatString("%d (samples/line)", ConstrainedValue);
    }
    
    switch
    {
        case linesPerFramePresent: AsnPerConstrainedInteger(0,16383) linesPerFrame = FormatString("%d (lines/frame)", ConstrainedValue);
    }
    
    switch
    {
        case framesPerSecondPresent: AsnPerConstrainedInteger(0,15) framesPerSecond;
    }
    
    switch
    {
        case luminanceSampleRatePresent: AsnPerConstrainedInteger(0,4294967295) luminanceSampleRate = FormatString("%d (samples/s)", ConstrainedValue);
    }
    AsnPerBoolean(0) videoBadMBsCap;
}

[DataTypeBitAlign]
struct H263VideoCapability
{
    UINT8 H263VideoCapabilityExtension:1;
    UINT8 sqcifMPIPresent:1;
    UINT8 qcifMPIPresent:1;
    UINT8 cifMPIPresent:1;
    UINT8 cif4MPIPresent:1;
    UINT8 cif16MPIPresent:1;
    UINT8 hrdBPresent:1;
    UINT8 bppMaxKbPresent:1;
    
    switch
    {
        case sqcifMPIPresent: AsnPerConstrainedInteger(1,32) sqcifMPI = FormatString("%d (1/29.97 Hz)", ConstrainedValue);
    }
    
    switch
    {
        case qcifMPIPresent: AsnPerConstrainedInteger(1,32) qcifMPI = FormatString("%d (1/29.97 Hz)", ConstrainedValue);
    }
    
    switch
    {
        case cifMPIPresent: AsnPerConstrainedInteger(1,32) cifMPI = FormatString("%d (1/29.97 Hz)", ConstrainedValue);
    }
    
    switch
    {
        case cif4MPIPresent: AsnPerConstrainedInteger(1,32) cif4MPI = FormatString("%d (1/29.97 Hz)", ConstrainedValue);
    }
    
    switch
    {
        case cif16MPIPresent: AsnPerConstrainedInteger(1,32) cif16MPI = FormatString("%d (1/29.97 Hz)", ConstrainedValue);
    }
    
    AsnPerConstrainedInteger(1,192400) maxBitRate = FormatString("%d bits", ConstrainedValue * 100);
    
    AsnPerBoolean(0) unrestrictedVector;
    AsnPerBoolean(0) arithmeticCoding;
    AsnPerBoolean(0) advancedPrediction;
    AsnPerBoolean(0) pbFrames;
    AsnPerBoolean(0) temporalSpatialTradeOffCapability;
    
    switch
    {
        case hrdBPresent: AsnPerConstrainedInteger(0,524287) hrdB = FormatString("%d bits", ConstrainedValue * 128);
    }
    
    switch
    {
        case bppMaxKbPresent: AsnPerConstrainedInteger(0,65535) bppMaxKb = FormatString("%d kbits", ConstrainedValue);
    }
    
    switch{
    	case H263VideoCapabilityExtension:
    		_struct Extension{
    			AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    			UINT8 slowSqcifMPIPresent:1;
    			switch{
    				case PERSmallNumber >= 1: UINT8 slowQcifMPIPresent:1;
    			}
    			switch{
    				case PERSmallNumber >= 2: UINT8 slowCifMPIPresent:1;
    			}
    			switch{
    				case PERSmallNumber >= 3: UINT8 slowCif4MPIPresent:1;
    			}
    			switch{
    				case PERSmallNumber >= 4: UINT8 slowCif16MPIPresent:1;
    			}
    			switch{
    				case PERSmallNumber >= 5: UINT8 errorCompensationPresent:1;
    			}
    			switch{
    				case PERSmallNumber >= 6: UINT8 enhancementLayerInfoPresent:1;
    			}
    			switch{
    				case PERSmallNumber >= 7: UINT8 h263OptionsPresent:1;
    			}
    			
    			switch{
    				case slowSqcifMPIPresent: 
    					_struct slowSqcifMPIPresent{
    						AsnPerLengthDeterminant length;
    						[slowSqcifMPIEndoffset = FrameOffset + PERLengthValue]
    						AsnPerConstrainedInteger(1, 3600) slowSqcifMPI = FormatString("%d (seconds/frame)", COnstrainedValue);
    						switch{
    							case FrameBitOffset < slowSqcifMPIEndoffset:
    								AsnPerPadding( slowSqcifMPIEndoffset * 8 - FrameBitOffset) Padding;
    						}
    					}
    			}
    			switch{
    				case slowQcifMPIPresent: 
    					_struct slowQcifMPIPresent{
	    					AsnPerLengthDeterminant length;
	    					[slowQcifMPIEndoffset = FrameOffset + PERLengthValue]	
	    					AsnPerConstrainedInteger(1, 3600) slowQcifMPI = FormatString("%d (seconds/frame)", ConstrainedValue);
	    					switch{
	    						case FrameBitOffset < slowQcifMPIEndoffset * 8:
	    							AsnPerPadding( slowQcifMPIEndoffset * 8 - FrameBitOffset) Padding;
	    					}
	    				}    					
    			}
    			switch{
    				case slowCifMPIPresent: 
    					_struct slowCifMPIPresent{
	    					AsnPerLengthDeterminant length;
	    					[slowCifMPIEndoffset = FrameOffset + PERLengthValue]	
	    					AsnPerConstrainedInteger(1, 3600) slowCifMPI = FormatString("%d (seconds/frame)", ConstrainedValue);
	    					switch{
	    						case FrameBitOffset < slowCifMPIEndoffset * 8:
	    							AsnPerPadding( slowCifMPIEndoffset * 8 - FrameBitOffset) Padding;
	    					}
	    				}    					
    			}
    			switch{
    				case slowCif4MPIPresent: 
    					_struct slowCif4MPIPresent{
    						AsnPerLengthDeterminant length;
    						[slowCif4MPIEndoffset = FrameOffset + PERLengthValue]
    						AsnPerConstrainedInteger(1, 3600) slowCif4MPI = FormatString("%d (seconds/frame)", ConstrainedValue);
    						switch{
    							case FrameBitOffset < slowCif4MPIEndoffset * 8:
    								AsnPerPadding(slowCif4MPIEndoffset * 8 - FrameBitOffset) Padding;
    						}
    					}
    			}
    			switch{
    				case slowCif16MPIPresent:
    					_struct slowCif16MPIPresent{
    						AsnPerLengthDeterminant length;
    						[slowCif16MPIEndoffset = FrameOffset + PERLengthValue]
    						AsnPerConstrainedInteger(1, 3600) slowCif16MPI = FormatString("%d (seconds/frame)", ConstrainedValue);
    						switch{
    							case FrameBitOffset < slowCif16MPIEndoffset * 8:
    								AsnPerPadding(slowCif16MPIEndoffset * 8 - FrameBitOffset) Padding;
    						}
    					}
    			}
    			switch{
    				case errorCompensationPresent: AsnPerBoolean(1) errorCompensation;
    			}
    			switch{
    				case enhancementLayerInfoPresent:
    					_struct enhancementLayerInfoPresent{
    						AsnPerLengthDeterminant length;
    						[enhancementLayerInfoEndoffset = FrameOffset + PERLengthValue]
    						EnhancementLayerInfo enhancementLayerInfo;
    						switch{
    							case FrameBitOffset < enhancementLayerInfoEndoffset * 8:
    								AsnPerPadding(enhancementLayerInfoEndoffset * 8 - FrameBitOffset) Padding;
    						}
    					} 
    			}
    			switch{
    				case h263OptionsPresent: 
    					_struct h263OptionsPresent{
    						AsnPerLengthdeterminant length;
    						[h263OptionsEndoffset = FrameOffset + PERLengthValue]
    						H263Options h263Options;
    						switch{
    							case FrameBitOffset < h263OptionsEndoffset * 8:
    								AsnPerPadding( h263OptionsEndoffset * 8 - FrameBitOffset ) Padding;
    						}
    					}    						
    			}
    		}
    }    
}

[DataTypeBitAlign]
struct GSMAudioCapability
{
    UINT8 GSMAudioCapabilityExtension:1;
    AsnPerConstrainedInteger(1,256) audioUnitSize;
    AsnPerBoolean(0) comfortNoise;
    AsnPerBoolean(0) scrambled;
    //switch
    //{
    //    case GSMAudioCapability_Extension
    //}
}

[DataTypeBitAlign]
struct G7231AnnexCCapability
{
    UINT8 G7231AnnexCCapabilityExtension:1;
    UINT8 g723AnnexCAudioModePresent:1;
    AsnPerConstrainedInteger(1,256) maxAlsduAudioFrames;
    AsnPerBoolean(0) silenceSuppression;
    switch
    {
        case g723AnnexCAudioModePresent:
        struct g723AnnexCAudioMode
        {
            UINT8 g723AnnexCAudioModeExtension:1;
            AsnPerConstrainedInteger(27,78) highRateMode0 = FormatString("%d Bytes", ConstrainedValue);
            AsnPerConstrainedInteger(27,78) highRateMode1 = FormatString("%d Bytes", ConstrainedValue);
            AsnPerConstrainedInteger(23,66) lowRateMode0 = FormatString("%d Bytes", ConstrainedValue);
            AsnPerConstrainedInteger(23,66) lowRateMode1 = FormatString("%d Bytes", ConstrainedValue);
            AsnPerConstrainedInteger(6,17) sidMode0 = FormatString("%d Bytes", ConstrainedValue);
            AsnPerConstrainedInteger(6,17) sidMode1 = FormatString("%d Bytes", ConstrainedValue);
            //switch
            //{
            //    case g723AnnexCAudioMode_Extension
            //}
        };
    }
    //switch
    //{
    //    case G7231AnnexCCapability_Extension:
    //}
}

[DataTypeBitAlign]
struct AudioCapability = FormatString("%s", ( MSExtensionExist && EnterNonStandard ) ? "Microsoft Extension: the 16-kHz DVI4 codec is supported" : "")
{
    UINT8 AudioCapabilityExtension:1;
    switch
    {
        case AudioCapabilityExtension:
        _struct ExtensionChoice
        {
                AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                AsnPerLengthDeterminant Length;
                [AudioCapabilityExtensionEndOffset = FrameOffset + PERLengthValue]
                switch( PERSmallNumber )
                {
                    case 0: AsnPerConstrainedInteger(1,256) g729wAnnexB;
                    case 1: AsnPerConstrainedInteger(1,256) g729AnnexAwAnnexB;
                    case 2: G7231AnnexCCapability g7231AnnexCCapability;
                    case 3: GSMAudioCapability gsmFullRate;
                    case 4: GSMAudioCapability gsmHalfRate;
                    case 5: GSMAudioCapability gsmEnhancedFullRate;
                    case 6: GenericCapability genericAudioCapability;
                    case 7: G729Extensions g729Extensions;
                    case 8: VBDCapability vbd;
                    case 9: NoPTAudioTelephonyEventCapability audioTelephonyEvent;
                    case 10: NoPTAudioToneCapability audioTone;
                    
                }
                switch
                {
                    case FrameBitOffset < AudioCapabilityExtensionEndOffset * 8:
                        AsnPerPadding(AudioCapabilityExtensionEndOffset * 8 - FrameBitOffset ) Padding;
                }
        };
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,13) ChoiceValue;
            [EnterNonStandard = 0]
            switch( ConstrainedValue )
            {
                case 0: 
                [post.MSExtensionExist = MSExtensionOIDExist && MSExtensionDataExist, EnterNonStandard = 1]
                H245NonStandardParameter nonStandard;
                case 1: AsnPerConstrainedInteger(1,256) g711Alaw64k;
                case 2: AsnPerConstrainedInteger(1,256) g711Alaw56k;
                case 3: AsnPerConstrainedInteger(1,256) g711Ulaw64k;
                case 4: AsnPerConstrainedInteger(1,256) g711Ulaw56k;
                case 5: AsnPerConstrainedInteger(1,256) g72264k;
                case 6: AsnPerConstrainedInteger(1,256) g72256k;	
                case 7: AsnPerConstrainedInteger(1,256) g72248k;
                case 8: struct g7231
                        {
                            AsnPerConstrainedInteger(1,256) maxAlsduAudioFrames;
                            AsnPerBoolean(0) silenceSuppression;
                        };
                case 9: AsnPerConstrainedInteger(1,256) g728;
                case 10: AsnPerConstrainedInteger(1,256) g729;
                case 11: AsnPerConstrainedInteger(1,256) g729AnnexA;
                case 12: IS11172AudioCapability is11172AudioCapability;
                case 13: IS13818AudioCapability is13818AudioCapability;
            }
        };
    }
}

[DataTypeBitAlign]
struct IS11172AudioCapability
{
    UINT8 IS11172AudioCapabilityExtension:1;
    AsnPerBoolean(0) audioLayer1;
    AsnPerBoolean(0) audioLayer2;
    AsnPerBoolean(0) audioLayer3;
    AsnPerBoolean(0) audioSampling32k;
    AsnPerBoolean(0) audioSampling44k1;
    AsnPerBoolean(0) audioSampling48k;
    AsnPerBoolean(0) singleChannel;
    AsnPerBoolean(0) twoChannels;
    AsnPerConstrainedInteger(1,448) bitRate = FormatString("%d kbit/s", ConstrainedValue);
}

[DataTypeBitAlign]
struct IS13818AudioCapability
{
    UINT8 IS13818AudioCapabilityExtension:1;
    AsnPerBoolean(0) audioLayer1;
    AsnPerBoolean(0) audioLayer2;
    AsnPerBoolean(0) audioLayer3;
    AsnPerBoolean(0) audioSampling16k;
    AsnPerBoolean(0) audioSampling22k05;
    AsnPerBoolean(0) audioSampling24k;
    AsnPerBoolean(0) audioSampling32k;
    AsnPerBoolean(0) audioSampling44k1;
    AsnPerBoolean(0) audioSampling48k;
    AsnPerBoolean(0) singleChannel;
    AsnPerBoolean(0) twoChannels;
    AsnPerBoolean(0) threeChannels21;
    AsnPerBoolean(0) threeChannels30;
    AsnPerBoolean(0) fourChannels2020;
    AsnPerBoolean(0) fourChannels22;
    AsnPerBoolean(0) fourChannels31;
    AsnPerBoolean(0) fiveChannels3020;
    AsnPerBoolean(0) fiveChannels32;
    AsnPerBoolean(0) lowFrequencyEnhancement;
    AsnPerBoolean(0) multilingual;
    AsnPerConstrainedInteger(1,1130) bitRate = FormatString("%d kbit/s", ConstrainedValue);

}

[DataTypeBitAlign]
struct DataApplicationCapability
{
   UINT8 DataApplicationCapabilityExtension:1;
   Application application;
   AsnPerConstrainedInteger(0, 4294967295) maxBitRate = FormatString("%d bit/s", ConstrainedValue * 100); 
   //switch
   //{
   //    case DataApplicationCapability_Extension
   //}
}

Table H245ApplicationChoiceTable( value )
{
    switch( value )
    {
        case 0: "nonStandard";         
        case 1: "t120";	               
        case 2: "dsm-cc";              
        case 3: "userData";            
        case 4: "t84";                 
        case 5: "t434";                
        case 6: "h224";                
        case 7: "nlpid";               
        case 8: "dsvdControl";         
        case 9: "h222DataPartitioning";
        default: FormatString("%d(0x%X)", value, value);
    }
}

[DataTypeBitAlign]
struct Application
{
    UINT8 ApplicationExtension:1;
    switch
    {
        case ApplicationExtension:
            _struct ExtensionChoice
            {
                AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                AsnPerLengthDeterminant Length;
                [ApplicationExtensionEndOffset = FrameOffset + PERLengthValue]
                switch( PERSmallNumber )
                {
                    case 0: DataProtocolCapability t30fax;
                    case 1: DataProtocolCapability t140;
                    case 2:
                        struct t38fax
                        {
                            DataProtocolCapability t38FaxProtocol;
                            T38FaxProfile t38FaxProfile;
                        }
                    case 3: GenericCapability genericDataCapability;
                }
                switch
                {
                    case FrameBitOffset < ApplicationExtensionEndOffset * 8:
                        AsnPerPadding(ApplicationExtensionEndOffset * 8 - FrameBitOffset ) Padding;
                }
            }
        default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0, 9) ChoiceValue = H245ApplicationChoiceTable( ConstrainedValue );
                switch( ConstrainedValue )
                {
                    case 0: H245NonStandardParameter nonStandard;
                    case 1: DataProtocolCapability t120;
                    case 2: DataProtocolCapability dsmcc;
                    case 3: DataProtocolCapability userData;
                    case 4: 
                        struct t84
                        {
                            DataProtocolCapability t84Protocol;
                            T84Profile t84Profile;
                        } 
                    case 5: DataProtocolCapability t434;
                    case 6: DataProtocolCapability h224;
                    case 7:
                        struct nlpid
                        {
                            DataProtocolCapability nlpidProtocol;
                            AsnPerOctetString(-1, -1) nlpidData;
                        }
                    case 9: DataProtocolCapability h222DataPartitioning;
                }
            }
    }
}

[DataTypeBitAlign]
struct T84Profile = T84ProfileChoice ? "t84Restricted" : "t84Unrestricted"
{
    [post.T84ProfileChoice = ConstrainedValue]
    AsnPerConstrainedInteger(0, 1) ChoiceValue;
    switch( T84ProfileChoice )
    {
        case 1: T84Restricted t84Restricted;
    }
}

[DataTypeBitAlign]
struct T84Restricted
{
    UINT8 T84RestrictedExtension:1;
    AsnPerBoolean(0) qcif;	          
    AsnPerBoolean(0) cif;		          
    AsnPerBoolean(0) ccir601Seq;	    
    AsnPerBoolean(0) ccir601Prog;	    
    AsnPerBoolean(0) hdtvSeq;	        
    AsnPerBoolean(0) hdtvProg;	      
    AsnPerBoolean(0) g3FacsMH200x100;	
    AsnPerBoolean(0) g3FacsMH200x200;	
    AsnPerBoolean(0) g4FacsMMR200x100;
    AsnPerBoolean(0) g4FacsMMR200x200;
    AsnPerBoolean(0) jbig200x200Seq;	
    AsnPerBoolean(0) jbig200x200Prog;	
    AsnPerBoolean(0) jbig300x300Seq;	
    AsnPerBoolean(0) jbig300x300Prog;	
    AsnPerBoolean(0) digPhotoLow;	    
    AsnPerBoolean(0) digPhotoMedSeq;	
    AsnPerBoolean(0) digPhotoMedProg;	
    AsnPerBoolean(0) digPhotoHighSeq;	
    AsnPerBoolean(0) digPhotoHighProg;
}

[DataTypeBitAlign]
struct MediaDistributionCapability
{
    UINT8 MediaDistributionCapabilityExtension:1;
    UINT8 centralizedDataPresent:1;
    UINT8 distributedDataPresent:1;
    AsnPerBoolean(0) centralizedControl;
    AsnPerBoolean(0) distributedControl;
    AsnPerBoolean(0) centralizedAudio;
    AsnPerBoolean(0) distributedAudio;
    AsnPerBoolean(0) centralizedVideo;
    AsnPerBoolean(0) distributedVideo;
    
    switch
    {
        case centralizedDataPresent:
        struct CentralizedDataApplicationCapabilityList
        {
            [post.DataApplicationCapabilityCount = PERLengthValue]
            AsnPerLengthDeterminant Size;
            while [ DataApplicationCapabilityCount > 0 ]
            {
                [DataApplicationCapabilityCount = DataApplicationCapabilityCount - 1]
                DataApplicationCapability centralizedData;
            }
        };
    }
    
    switch
    {
        case distributedDataPresent:
        struct DistributeDataApplicationCapabilityList
        {
            [post.DataApplicationCapabilityCount = PERLengthValue]
            AsnPerLengthDeterminant Size;
            while [ DataApplicationCapabilityCount > 0 ]
            {
                [DataApplicationCapabilityCount = DataApplicationCapabilityCount-1]
                DataApplicationCapability distributedData;
            }
        };
    }
}

[DataTypeBitAlign]
struct MultipointCapability
{
    UINT8 MultipointCapabilityExtension:1;
    AsnPerBoolean(0) multicastCapability;
    AsnPerBoolean(0) multiUniCastConference;
    [post.mediaDistributionCapabilitySize = PERLengthValue]
    AsnPerLengthDeterminant Length;
    MediaDistributionCapability mediaDistributionCapability[mediaDistributionCapabilitySize];
}

[DataTypeBitAlign]
struct MediaPacketizationCapability
{
    UINT8 MediaPacketizationCapabilityExtensionBit:1;
    AsnPerBoolean(0) h261aVideoPacketization;
    switch
    {
        case MediaPacketizationCapabilityExtensionBit:
        struct MediaPacketizationCapabilityExtension
        {
            AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
            UINT8 rtpPayloadTypePresent:1;
            switch
            {
                case rtpPayloadTypePresent: 
                struct rtpPayloadTypeList
                {
                    AsnPerLengthDeterminant Length;
                    [rtpPayloadTypeListEndOffset = FrameOffset + PERLengthValue, post.rtpPayloadTypeCount = ConstrainedValue]
                    AsnPerConstrainedInteger(1,256) Size;
                    while [ rtpPayloadTypeCount > 0 ]
                    {
                        [ rtpPayloadTypeCount = rtpPayloadTypeCount - 1 ]
                        RTPPayloadType rtpPayloadType;
                    }
                    switch
                    {
                        case FrameBitOffset < rtpPayloadTypeListEndOffset * 8:
                        AsnPerPadding( rtpPayloadTypeListEndOffset * 8 - FrameBitOffset ) Padding;
                    }
                };
            }
        };
    }
}

[DataTypeBitAlign]
struct H2250Capability
{
    UINT8 H2250CapabilityExtensionBit:1;
    AsnPerConstrainedInteger(0,1023) maximumAudioDelayJitter = FormatString("%d Milliseconds", ConstrainedValue);
    MultipointCapability receiveMultipointCapability;
    MultipointCapability transmitMultipointCapability;
    MultipointCapability receiveAndTransmitMultipointCapability;
    struct mcCapability
    {
        UINT8 mcCapabilityExtension:1;
        AsnPerBoolean(0) centralizedConferenceMC;
        AsnPerBoolean(0) decentralizedConferenceMC;
    };
    AsnPerBoolean(0) rtcpVideoControlCapability = this? "True - FIR and NACK": "False";
    MediaPacketizationCapability mediaPacketizationCapability;
    
    switch
    {
        case H2250CapabilityExtensionBit: H2250CapabilityExtension extension;
    }
}

[DataTypeBitAlign]
struct TransportCapability 
{
    UINT8 TransportCapabilityExtension:1;
    UINT8 nonStandardPresent:1;
    UINT8 qOSCapabilitiesPresent:1;
    UINT8 mediaChannelCapabilitiesPresent:1;
    switch
    {
        case nonStandardPresent:
            H245NonStandardParameter nonStandard;
    }
    switch
    {
        case qOSCapabilitiesPresent:
           struct QOSCapabilities
           {
               [post.QOSCapabilityCount = ConstrainedValue]
               AsnPerConstrainedInteger(1, 256) Size;
               while [ QOSCapabilityCount > 0 ]
               {
                   [ QOSCapabilityCount = QOSCapabilityCount - 1 ]
                   QOSCapability qOSCapability;
               }
           } 
    }
    switch
    {
        case mediaChannelCapabilitiesPresent:
           struct MediaChannelCapabilities
           {
               [post.MediaChannelCapabilityCount = ConstrainedValue]
               AsnPerConstrainedInteger(1, 256) Size;
               while [ MediaChannelCapabilityCount > 0 ]
               {
                   [ MediaChannelCapabilityCount = MediaChannelCapabilityCount - 1 ]
                   MediaChannelCapability  mediaChannelCapability;
               }
           }
    }
}

[DataTypeBitAlign]
struct MediaChannelCapability
{
    UINT8 MediaChannelCapabilityExtension:1;
    UINT8 mediaTransportPresent:1;
    switch
    {
        case mediaTransportPresent:
            MediaTransportType mediaTransport;
    }
}

Table H245MediaTransportTypeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "ipUDP";
		case (ExtensionBit == 0) && (Choice== 1): "ipTCP";
		case (ExtensionBit == 0) && (Choice== 2): "atmAAL5UNIDIR";
		case (ExtensionBit == 0) && (Choice== 3): "atmAAL5BIDIR";
		case (ExtensionBit == 1) && (Choice== 0): "AtmAal5Compressed";
	}
}

[DataTypeBitAlign]
struct MediaTransportType = H245MediaTransportTypeTable(ExtensionBit, H245MediaTransportTypeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.H245MediaTransportTypeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch(H245MediaTransportTypeChoice)
				{
					case 0: H245AtmAal5Compressed AtmAal5Compressed;
				}
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.H245MediaTransportTypeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 3) ChoiceValue;
			}
	}
}

[DataTypeBitAlign]
struct H245AtmAal5Compressed	//Sequence
{
	UINT8 ExtensionBit:1;
	
	AsnPerBoolean(0) variabledelta;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
			}
	}
}

[DataTypeBitAlign]
struct H2250CapabilityExtension
{
    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    UINT8 transportCapabilityPresent:1;
    switch
    {
        case PERSmallNumber >= 1: UINT8 redundancyEncodingCapabilityPresent:1;
    }
    
    switch
    {
        case PERSmallNumber >= 2: UINT8 logicalChannelSwitchingCapabilityPresent:1;
    }
    
    switch
    {
        case PERSmallNumber >= 3: UINT8 t120DynamicPortCapabilityPresent:1;
    }
    
    switch
    {
        case transportCapabilityPresent: 
             struct transportCapability
             {
                 AsnPerLengthDeterminant Length;
                 [transportCapabilityEnd = FrameOffset + PERLengthValue]
                 TransportCapability transportCapability;
                 switch
                 {
                     case FrameBitOffset < transportCapabilityEnd * 8:
                         AsnPerPadding(transportCapabilityEnd * 8 - FrameBitOffset) Padding;
                 }
             };
    }
    
    switch
    {
        case redundancyEncodingCapabilityPresent: 
             struct redundancyEncodingCapability
             {
                 AsnPerLengthDeterminant Length;
                 [redundancyEncodingCapabilityEndOffset = FrameOffset + PERLengthValue]
                 
                 [post.redundancyEncodingCapabilitySize = ConstrainedValue]                 
                 AsnPerConstrainedInteger(1, 256) Size;
                 
                 while [redundancyEncodingCapabilitySize > 0]
                 {
                 	[redundancyEncodingCapabilitySize = redundancyEncodingCapabilitySize -1]
                 	RedundancyEncodingCapability capability;
                 }
                 switch
                 {
                     case FrameBitOffset < redundancyEncodingCapabilityEndOffset * 8:
                     AsnPerPadding(redundancyEncodingCapabilityEndOffset * 8 - FrameBitOffset) Padding;
                 }
             }
    }
    
    switch
    {
        case logicalChannelSwitchingCapabilityPresent: AsnPerBoolean(1) logicalChannelSwitchingCapability;
    }
    
    switch
    {
        case t120DynamicPortCapabilityPresent: AsnPerBoolean(1) t120DynamicPortCapability;
    }
}

[DataTypeBitAlign]
struct RedundancyEncodingCapability
{
    UINT8 RedundancyEncodingCapabilityExtension:1;
    UINT8 secondaryEncodingPresent:1;
    RedundancyEncodingMethod redundancyEncodingMethod;
    AsnPerConstrainedInteger(1,65535) primaryEncoding;
    switch
    {
        case secondaryEncodingPresent:
        struct CapabilityTableEntryNumberList
        {
            [post.CapabilityTableEntryNumberCount = ConstrainedValue]
            AsnPerConstrainedInteger(1,256) Size;
            INT16 secondaryEncoding[CapabilityTableEntryNumberCount];
        };
    }
    //switch
    //{
    //    case RedundancyEncodingCapability_Extension:
    //}
}

[DataTypeBitAlign]
struct MultiplexCapability
{
    UINT8 MultiplexCapabilityExtension:1;
    switch
    {
        case MultiplexCapabilityExtension:
        _struct ExtensionChoice
        {
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
            AsnPerLengthDeterminant length;
            [MultiplexCapabilityExtensionEnd = FrameOffset + PERLengthValue]
            switch( PERSmallNumber )
            {
                case 0: H2250Capability h2250Capability;
                case 1: GenericCapability genericMultiplexCapability;
            }
            switch
            {
                case FrameBitOffset < MultiplexCapabilityExtensionEnd * 8:
                    AsnPerPadding(MultiplexCapabilityExtensionEnd * 8 - FrameBitOffset) Padding;
            }
        };
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,3) ChoiceValue;
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardParameter nonStandard;
                case 1: H222Capability h222Capability;
                case 2: H223Capability h223Capability;
                case 3: V76Capability v76Capability;
            }
        };
    }

}

[DataTypeBitAlign]
struct H222Capability
{
    UINT8 H222CapabilityExtension:1;
    AsnPerConstrainedInteger(1,256) numberOfCs;
    
    [Post.PERArraySize = PERLengthValue]
    AsnPerLengthDeterminant Size;
    while [PERArraySize > 0]
    {
    	[PERArraySize = PERArraySize -1]
    	VCCapability vcCapability;
    }
    
    switch{
    	case H222CapabilityExtension:
    		_struct Extension{};
    }
}

Table H245h223MultiplexTableCapabilityTypeTable( value )
{
    switch( value )
    {
        case 0: "basic";
        case 1: "enhanced";
        default: "Unknown";
    }
}    

[DataTypeBitAlign]
struct H223Capability
{
    UINT8 H223CapabilityExtension:1;
    AsnPerBoolean(0) videoWithAL1;
    AsnPerBoolean(0) videoWithAL2;
    AsnPerBoolean(0) videoWithAL3;
    AsnPerBoolean(0) audioWithAL1;
    AsnPerBoolean(0) audioWithAL2;
    AsnPerBoolean(0) audioWithAL3;
    AsnPerBoolean(0) dataWithAL1;
    AsnPerBoolean(0) dataWithAL2;
    AsnPerBoolean(0) dataWithAL3;
    AsnPerConstrainedInteger(0,65535) maximumAl2SDUSize = FormatString("%d Bytes", ConstrainedValue);
    AsnPerConstrainedInteger(0,65535) maximumAl3SDUSize = FormatString("%d Bytes", ConstrainedValue);
    AsnPerConstrainedInteger(0,1023) maximumDelayJitter = FormatString("%d Milliseconds", ConstrainedValue);
    struct h223MultiplexTableCapability
    {
        AsnPerConstrainedInteger(0,1) ChoiceValue=H245h223MultiplexTableCapabilityTypeTable( ConstrainedValue );
        switch( ConstrainedValue )
        {
            case 1: struct enhanced
                    {
                        UINT8 enhancedExtension:1;
                        AsnPerConstrainedInteger(1,15) maximumNestingDepth;
                        AsnPerConstrainedInteger(2,255) maximumElementListSize;
                        AsnPerConstrainedInteger(2,255) maximumSubElementListSize;
                    }; 
        }
    };
    
    switch
    {
        case H223CapabilityExtension: H223CapabilityExtension extension;
    }
}

[DataTypeBitAlign]
struct H223CapabilityExtension
{
    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    UINT8 maxMUXPDUSizeCapabilityPresent:1;
    switch
    {
        case PERSmallNumber >= 1: UINT8 nsrpSupportPresent:1;
    }
    
    switch
    {
        case PERSmallNumber >= 2: UINT8 mobileOperationTransmitCapabilityPresent:1;
    }
    
    switch
    {
        case PERSmallNumber >= 3: UINT8 h223AnnexCCapabilityPresent:1;
    }
    
    switch
    {
    	case PERSmallNumber >= 4: UINT8 bitRatePresent:1;
    }
    switch
    {
    	case PERSmallNumber >= 5: UINT8 mobileMultilinkFrameCapabilityPresent:1;
    }
    
    switch
    {
        case maxMUXPDUSizeCapabilityPresent: AsnPerBoolean(1) maxMUXPDUSizeCapability;
    }
    
    switch
    {
        case nsrpSupportPresent: AsnPerBoolean(1) nsrpSupport;
    }
    
    switch
    {
        case mobileOperationTransmitCapabilityPresent:
        	_struct mobileOperationTransmitCapabilityPresent{
				AsnPerLengthDeterminant Length;
	        	[mobileOperationTransmitCapabilityEndoffset = FrameOffset + PERLengthValue]        	
	             struct mobileOperationTransmitCapability
	             {
	                 AsnPerLengthDeterminant Length;
	                 UINT8 mobileOperationTransmitCapabilityExtension:1;
	                 AsnPerBoolean(0) modeChangeCapability;
	                 AsnPerBoolean(0) h223AnnexA;
	                 AsnPerBoolean(0) h223AnnexADoubleFlag;
	                 AsnPerBoolean(0) h223AnnexB;
	                 AsnPerBoolean(0) h223AnnexBwithHeader;
	             };
	        	switch{
	        		case FrameBitOffset < mobileOperationTransmitCapabilityEndoffset * 8:
	        			AsnPerPadding( mobileOperationTransmitCapabilityEndoffset * 8 - FrameBitOffset) Padding;
	        	} 
        	}
    }
    
    switch
    {
        case h223AnnexCCapabilityPresent:
        	_struct h223AnnexCCapabilityPresent{
				AsnPerLengthDeterminant Length;
	        	[h223AnnexCCapabilityEndoffset = FrameOffset + PERLengthValue] 
	             struct H223AnnexCCapability
	             {
	                 AsnPerLengthDeterminant Length;
	                 H223AnnexCCapability h223AnnexCCapability;
	             };
	        	switch{
	        		case FrameBitOffset < h223AnnexCCapabilityEndoffset * 8:
	        			AsnPerPadding( h223AnnexCCapabilityEndoffset * 8 - FrameBitOffset) Padding;
	        	}
        	}
    }
    
    switch
    {
    	case bitRatePresent:
    		_struct bitRatePresent{
				AsnPerLengthDeterminant Length;
	        	[bitRateEndoffset = FrameOffset + PERLengthValue] 
	    		AsnPerConstrainedInteger(1, 19200) bitRate = FormatString("%d bits", ConstrainedValue * 100);
	        	switch{
	        		case FrameBitOffset < bitRateEndoffset * 8:
	        			AsnPerPadding( bitRateEndoffset * 8 - FrameBitOffset) Padding;
	        	}
        	}
    }
    switch
    {
    	case mobileMultilinkFrameCapabilityPresent:
    		_struct mobileMultilinkFrameCapabilityPresent{
				AsnPerLengthDeterminant Length;
	        	[mobileMultilinkFrameCapabilityEndoffset = FrameOffset + PERLengthValue]
	    		struct mobileMultilinkFrameCapability{
	    			UINT8 mobileMultilinkFrameCapabilityExtension:1;
	    			AsnPerConstrainedInteger(1, 255) maximumSampleSize = FormatString("%d Bytes", ConstrainedValue);
	    			AsnPerCOnstrainedInteger(1, 65025) maximumPayloadLength = FormatString("%d Bytes", ConstrainedValue);
	    			
	    			switch{
	    				case mobileMultilinkFrameCapabilityExtension:
	    					_struct Extension{};
	    			}
	    		}
	        	switch{
	        		case FrameBitOffset < mobileMultilinkFrameCapabilityEndoffset * 8:
	        			AsnPerPadding( mobileMultilinkFrameCapabilityEndoffset * 8 - FrameBitOffset) Padding;
	        	}
        	}    		
    }
}

[DataTypeBitAlign]
struct V76Capability
{
    UINT8 V76CapabilityExtension:1;
    AsnPerBoolean(0) suspendResumeCapabilitywAddress;
    AsnPerBoolean(0) suspendResumeCapabilitywoAddress;
    AsnPerBoolean(0) rejCapability;
    AsnPerBoolean(0) sREJCapability;
    AsnPerBoolean(0) mREJCapability;
    AsnPerBoolean(0) crc8bitCapability;
    AsnPerBoolean(0) crc16bitCapability;
    AsnPerBoolean(0) crc32bitCapability;
    AsnPerBoolean(0) uihCapability;
    AsnPerConstrainedInteger(2,8191) numOfDLCS;
    AsnPerBoolean(0) twoOctetAddressFieldCapability;
    AsnPerBoolean(0) loopBackTestCapability;
    AsnPerConstrainedInteger(1,4095) n401Capability;
    AsnPerConstrainedInteger(1,127) maxWindowSizeCapability;
    V75Capability v75Capability;
}

[DataTypeBitAlign]
struct V75Capability
{
    UINT8 V75CapabilityExtension:1;
    AsnPerBoolean(0) audioHeader;
}

[DataTypeBitAlign]
struct H223AnnexCCapability
{
    UINT8 H223AnnexCCapabilityExtensionBit:1;
    AsnPerBoolean(0) videoWithAL1M;
    AsnPerBoolean(0) videoWithAL2M;
    AsnPerBoolean(0) videoWithAL3M;
    AsnPerBoolean(0) audioWithAL1M;
    AsnPerBoolean(0) audioWithAL2M;
    AsnPerBoolean(0) audioWithAL3M;
    AsnPerBoolean(0) dataWithAL1M;
    AsnPerBoolean(0) dataWithAL2M;
    AsnPerBoolean(0) dataWithAL3M;
    AsnPerBoolean(0) alpduInterleaving;
    AsnPerConstrainedInteger(0,65535) maximumAL1MPDUSize = FormatString("%d Bytes", ConstrainedValue);
    AsnPerConstrainedInteger(0,65535) maximumAL2MSDUSize = FormatString("%d Bytes", ConstrainedValue);
    AsnPerConstrainedInteger(0,65535) maximumAL3MSDUSize = FormatString("%d Bytes", ConstrainedValue);
    switch
    {
        case H223AnnexCCapabilityExtensionBit: 
        struct H323AnnexCCapabilityExtension
        {
            AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
            UINT8 rsCodeCapabilityPresent:1;
            switch
            {
                case rsCodeCapabilityPresent: AsnPerBoolean(1) rsCodeCapability;
            }
        };
    }
}

[DataTypeBitAlign]
struct VCCapability
{
    UINT8 VCCapabilityExtensionBit:1;
    UINT8 aal1Present:1;
    UINT8 aal5Present:1;
    switch
    {
        case aal1Present:
             struct aal1
             {
                 UINT8 aal1Extension:1;
                 AsnPerBoolean(0) nullClockRecovery;
                 AsnPerBoolean(0) srtsClockRecovery;
                 AsnPerBoolean(0) adaptiveClockRecovery;
                 AsnPerBoolean(0) nullErrorCorrection;
                 AsnPerBoolean(0) longInterleaver;
                 AsnPerBoolean(0) shortInterleaver;
                 AsnPerBoolean(0) errorCorrectionOnly;
                 AsnPerBoolean(0) structuredDataTransfer;
                 AsnPerBoolean(0) partiallyFilledCells;
             };
    }
    switch
    {
        case aal5Present:
             struct aal5
             {
                 UINT8 aal5Extension:1;
                 AsnPerConstrainedInteger(0,65535) forwardMaximumSDUSize;
                 AsnPerConstrainedInteger(0,65535) backwardMaximumSDUSize;
             };
    }
    AsnPerBoolean(0) transportStream;
    AsnPerBoolean(0) programStream;
    struct availableBitRates
    {
        UINT8 availableBitRatesExtension:1;
        struct type
        {
            AsnPerConstrainedInteger(0,1) ChoiceValue;
            switch( ConstrainedValue )
            {
                case 0: AsnPerConstrainedInteger(1,65535) singleBitRate;
                case 1: struct rangeOfBitRates
                        {
                            AsnPerConstrainedInteger(1,65535) lowerBitRate;
                            AsnPerConstrainedInteger(1,65535) higherBitRate;
                        };
            }
        };
    };
    switch
    {
        case VCCapabilityExtensionBit: VCCapabilityExtension extension;
    }
}

struct VCCapabilityExtension
{
    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    UINT8 aal1ViaGatewayPresent:1;
    switch
    {
        case aal1ViaGatewayPresent: 
             struct aal1ViaGateway
             {
                 AsnPerLengthDeterminant DeterminantLength;
                 UINT8 aal1ViaGatewayExtension:1;
                 [Post.Q2931AddressCount = ConstrainedValue]
                 AsnPerConstrainedInteger(1,256) Size;
                 Q2931Address gatewayAddress[Q2931AddressCount];
                 AsnPerBoolean(0) nullClockRecovery;
                 AsnPerBoolean(0) srtsClockRecovery;
                 AsnPerBoolean(0) adaptiveClockRecovery;
                 AsnPerBoolean(0) nullErrorCorrection;
                 AsnPerBoolean(0) longInterleaver;
                 AsnPerBoolean(0) shortInterleaver;
                 AsnPerBoolean(0) errorCorrectionOnly;
                 AsnPerBoolean(0) structuredDataTransfer;
                 AsnPerBoolean(0) partiallyFilledCells;
             };
    }
}

[DataTypeBitAlign]
struct Q2931Address
{
    UINT8 Q2931AddressExtension:1;
    UINT8 subaddressPresent:1;
    struct address
    {
        UINT8 addressExtension:1;
        AsnPerConstrainedInteger(0,1) ChoiceValue;
        switch(ChoiceValue)
        {
            case 0: AsnPerNumericString(1,16) internationalNumber;
            case 1: AsnPerOctetString(1,20) nsapAddress;
        }  
    };
    switch
    {
        case subaddressPresent: AsnPerOctetString(1,20) subaddress;
    }
}

[DataTypeBitAlign]
struct AlternateTransportAddresses
{
    UINT8 AlternateTransportAddressesExtension:1;
    
    UINT8 annexEPresent:1;
    
    switch
    {
        case annexEPresent: 
             struct AnnexE
             {
             	   [post.AnnexECount = PERLengthValue]
             	   AsnPerLengthDeterminant size;
                 TransportAddress annexE[AnnexECount];
             }
    }
   
		// Maybe needs extension here 
}

[DataTypeBitAlign]
struct CommunicationModeRequest // SEQUENCE   
{
    UINT8 CommunicationModeRequestExtension:1;
    //No any non-optional field here
    //Maybe needs extension here
}

[DataTypeBitAlign]
struct Criteria // SEQUENCE
{
    UINT8 CriteriaExtension:1;
    
    AsnPerObjectIdentifier field;
    AsnPerOctetString(1, 65535) value;
    //Maybe extension
}

[DataTypeBitAlign]
struct CertSelectionCriteria
{
    [post.CriteriaCount = ConstrainedValue]
    AsnPerConstrainedInteger(1, 16) size;   
    Criteria certSelectionCriteria[CriteriaCount];
}

//-- ===================================================================================
//-- Remote MC Request definitions
//-- ===================================================================================
Table H245RemoteMCRequestTable( type )
{
    switch( type )
    {
        case 0: "masterActivate";
        case 1: "slaveActivate";
        case 2: "deActivate";
        default: FormatString("Undefined remote request(%d)", type);
    }
}

[DataTypeBitAlign]
struct RemoteMCRequest = H245RemoteMCRequest  // CHOICE  
{
	  UINT8 RemoteMCRequestExtension:1;
    switch
    {
        case RemoteMCRequestExtension:
             _struct ExtensionChoice
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                 AsnPerLengthDeterminant Length;
             };
        default:
             _struct NoneExtension
             {
                 [H245RemoteMCRequest = this.ToString]
                 AsnPerConstrainedInteger(0,2) ChoiceValue = H245RemoteMCRequestTable( ConstrainedValue );             	   
         	   }
    }
}          	   
	
[DataTypeBitAlign]
struct RemoteMCResponse = RemoteMCResponseChoice ? "Reject" : "Accept"   // CHOICE  
{
	  UINT8 RemoteMCResponseExtension:1;
    switch
    {
        case RemoteMCResponseExtension:
             _struct ExtensionChoice
             {
             }
        default:
             _struct NoneExtension
             {
                 [post.RemoteMCResponseChoice = ConstrainedValue]
                 AsnPerConstrainedInteger(0,1) ChoiceValue;    
                 switch (ConstrainedValue)
             	   {
        	           case 1: 
        	                  struct Reject = RemoteMCResponseRejectReason ? "function Not Supported" : "unspecified" // CHOICE
        	                  {
        	                       UINT8 RemoteMCResponseExtension:1;
                                 switch
                                 {
                                     case RemoteMCResponseExtension:
                                          _struct ExtensionChoice
                                          {
                                          };
                                     default:
                                          _struct NoneExtension
                                          {
                                              [post.RemoteMCResponseRejectReason = ConstrainedValue]
                                              AsnPerConstrainedInteger(0,1) ChoiceValue;   
                                          }
                                  } 
                 
        	                  }
        	       }
         	   }
    }
}          	   
//End

Table H245DialingInformationNetworkTypeTable( extension, type )
{
    switch
    {
        case extension == 1 && type == 0: "mobile";
        case extension == 0 && type == 0: "nonStandard";
        case extension == 0 && type == 1: "n-isdn";
        case extension == 0 && type == 2: "gstn";
        default: FormatString("Undefined Dialing Information Network Type(%d)", type);
    }
}

[DataTypeBitAlign]
struct DialingInformationNetworkType = H245DialingInformationNetworkType   // CHOICE  
{
	UINT8 DialingInformationNetworkTypeExtension:1;
    switch
    {
        case DialingInformationNetworkTypeExtension:
             _struct ExtensionChoice
             {
                 [H245DialingInformationNetworkType = this.ToString]
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245DialingInformationNetworkTypeTable(1, PERSmallNumber);
                 AsnPerLengthDeterminant Length;
                 [ExtensionEndoffset = FrameOffset + PERLengthValue]
                 switch
                 {
                     case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
                 }
             };
        default:
             _struct NoneExtension
             {
                 [H245DialingInformationNetworkType = this.ToString]
                 AsnPerConstrainedInteger(0,2) ChoiceValue = H245DialingInformationNetworkTypeTable( 0, ConstrainedValue );    
                 switch (ConstrainedValue)
             	   {
        	           case 0: H245NonStandardMessage nonStandard;
        	       }
        	   }
    }
}

[DataTypeBitAlign]        	    
struct H245NonStandardMessage
{
    UINT8 NonStandardMessageExtension:1;
    H245NonStandardParameter nonStandardData;
}

[DataTypeBitAlign]
struct DialingInformationNumber // SEQUENCE   
{
    UINT8 DialingInformationNumberExtension:1;
    
    UINT8 subAddressPresent:1;
    
    AsnPerNumericString(0, 40) networkAddress;
    switch
    {
        case subAddressPresent: AsnPerIA5String(1, 40) subAddress;
    }
    struct NetworkType
    {
        [ post.NetWorkTypeSize = ConstrainedValue ]
        AsnPerConstrainedInteger(1, 255) size;
        while [ NetWorkTypeSize > 0 ]
        {
            [ NetWorkTypeSize = NetWorkTypeSize - 1]
            DialingInformationNetworkType networkType;
        }
    }
}       

[DataTypeBitAlign]
struct DialingInformation   // CHOICE  
{
	  UINT8 DialingInformationExtension:1;
    switch
    {
        case DialingInformationExtension:
             _struct ExtensionChoice
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                 AsnPerLengthDeterminant Length;
             };
        default:
             _struct NoneExtension
             {
                 AsnPerConstrainedInteger(0,2) ChoiceValue;    
                 switch (ConstrainedValue)
             	   {
        	           case 0: H245NonStandardMessage nonStandard;
        	           case 1: 
        	                   struct Differential
        	                   {
        	                   	   [post.DifferentialCount = ConstrainedValue]
        	                   	   AsnPerConstrainedInteger(1, 65535) size;
        	                   	   while [ DifferentialCount > 0 ]
        	                   	   {
        	                   	       [ DifferentialCount = DifferentialCount  - 1 ]
        	                           DialingInformationNumber differential;
        	                       }
        	                   }
        	           case 2: AsnPerConstrainedInteger(1, 65535) infoNotAvailable;
        	       }
        	   }
    }
}
        	           
[DataTypeBitAlign]
struct ConnectionIdentifier    // SEQUENCE   
{
    UINT8 ConnectionIdentifierExtension:1;
    
    AsnPerConstrainedInteger(0, 4294967295) channelTag;
    AsnPerConstrainedInteger(0, 4294967295) sequenceNumber;
    //Maybe needs extension here
}

[DataTypeBitAlign]
struct LogicalChannelRateRequest    // SEQUENCE   
{
    UINT8 LogicalChannelRateRequestExtension:1;
    
    AsnPerConstrainedInteger(0, 255) sequenceNumber;
    AsnPerConstrainedInteger(1, 65535) logicalChannelNumber;
    AsnPerConstrainedInteger(0, 4294967295) maximumBitRate = FormatString("%d bit/s", ConstrainedValue*100);
    //Maybe needs extension here
}

Table H245MultilinkRequestmaximumHeaderIntervalrequestTypeTable( type )
{
    switch( type )
    {
        case 0: "currentIntervalInformation";
        case 1: "requestedInterval";
        default: FormatString("Undefined request type(%d)", type);
    }
}

[DataTypeBitAlign]
struct MultilinkRequest   // CHOICE  
{
	  UINT8 MultilinkRequestExtension:1;
    switch
    {
        case MultilinkRequestExtension:
             _struct ExtensionChoice
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                 AsnPerLengthDeterminant Length;
             };
        default:
             _struct NoneExtension
             {
                 AsnPerConstrainedInteger(0,4) ChoiceValue;    
                 switch (ConstrainedValue)
             	   {
        	           case 0: H245NonStandardMessage nonStandard;
        	           case 1: 
        	                   struct callInformation	//SEQUENCE
        	                   {
        	                       	UINT8 callInformationExtension:1;
        	                       	
        	                       	AsnPerConstrainedInteger(1, 65535) maxNumberOfAdditionalConnections;
        	                       	//Maybe Extension
        	                   }
        	           case 2: 
        	                   struct addConnection 	//SEQUENCE
        	                   {
        	                       	UINT8 addConnectionExtension:1;
        	                       	
        	                       	AsnPerConstrainedInteger(0, 255) sequenceNumber;
        	                       	DialingInformation dialingInformation;
        	                       	//Maybe Extension
        	                   } 
        	           case 3: 
        	                   struct removeConnection 	//SEQUENCE
        	                   {
        	                       	UINT8 removeConnectionExtension:1;
        	                       	
        	                       	ConnectionIdentifier connectionIdentifier;
        	                       	//Maybe Extension
        	                   } 
                     case 4: 
        	                   struct maximumHeaderInterval 	//SEQUENCE
        	                   {
        	                       	UINT8 maximumHeaderIntervalExtension:1;
        	                       	
        	                       	struct requestType	//CHOICE
                                  {
                                      UINT8 requestTypeExtension:1;
                                      switch
                                      {
                                          case requestTypeExtension:
                                               _struct ExtensionChoice
                                               {
                                                   AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                                                   AsnPerLengthDeterminant Length;
                                               };
                                          default:
                                               _struct NoneExtension
                                               {
                                                   AsnPerConstrainedInteger(0,1) ChoiceValue = H245MultilinkRequestmaximumHeaderIntervalrequestTypeTable(ConstrainedValue);             	   
                                               	   switch (ConstrainedValue)
                                               	   {
                                          	           case 1: AsnPerConstrainedInteger(0, 65535) requestedInterval = FormatString("%d milliseconds", ConstrainedValue);
                                          	       }
                                          	   }
                                      } 
                                  }
        	                       	//Maybe Extension
        	                   }   
        	       }
        	   }
    }
} 

Table H245CloseLogicalChannelSourceTable( source ) 
{
    switch( source )
    {
        case 0: "user";
        case 1: "lcse";
        default: FormatString("%d(0x%X)",source,source);
    }
}

Table H245CloseLogicalChannelReasonTable( reason ) 
{
    switch( reason )
    {
        case 0: "unknown";
        case 1: "reopen";
        case 2: "reservation Failure";
        default: FormatString("%d(0x%X)",reason,reason);
    }
}

[DataTypeBitAlign]
struct CloseLogicalChannel // SEQUENCE   
{
    UINT8 CloseLogicalChannelExtensionBit:1;
    
    AsnPerConstrainedInteger(1, 65535) forwardLogicalChannelNumber;
    struct Source = CloseLogicalChannelSource // CHOICE
    {   
        [post.CloseLogicalChannelSource = H245CloseLogicalChannelSourceTable( ConstrainedValue )]
        AsnPerConstrainedInteger(0,1) ChoiceValue; 
    }
    
    //Extension field
    switch 
    {
        case CloseLogicalChannelExtensionBit:
             struct CloseLogicalChannelExtension
             {
             	    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
             	    UINT8 reasonPresent:1;
             	                 	   
                  switch 
                  { 
                      case  reasonPresent: 
                            struct 	Reason = CloseLogicalChannelReason
                            {
                                AsnPerLengthDeterminant length;  
                                [ReasonEndOffset = FrameOffset + PERLengthValue]
                                UINT8 ConferenceRequestExtension:1;
                                switch
                                {
                                    case ConferenceRequestExtension:
                                         _struct ExtensionChoice
                                         {
                                         }
                                    default:                                                 
                                         _struct NoneExtension                               
                                         {   
                                             [CloseLogicalChannelReason = this.ToString]                                               
                                    	       AsnPerConstrainedInteger(0,2) ChoiceValue = H245CloseLogicalChannelReasonTable( ConstrainedValue );         
                                    	   }
                                }
                            	  switch
                                {
                                    case FrameBitOffset < ReasonEndOffset * 8:
                                    AsnPerPadding(ReasonEndOffset * 8 - FrameBitOffset) Padding;
                                }
                            }
                  }
              }
     }   
}

Table H245ConferenceRequestTable( extension, type )
{
    switch
    {
            case extension == 1 && type == 0: "enterExtensionAddress";
            case extension == 1 && type == 1: "requestChairTokenOwner";
            case extension == 1 && type == 2: "requestTerminalCertificate";
            case extension == 1 && type == 3: "broadcastMyLogicalChannel";
            case extension == 1 && type == 4: "makeTerminalBroadcaster";
            case extension == 1 && type == 5: "sendThisSource";
            case extension == 1 && type == 6: "requestAllTerminalIDs";
            case extension == 1 && type == 7: "remoteMCRequest";
            case extension == 0 && type == 0: "terminalListRequest";
            case extension == 0 && type == 1: "makeMeChair";
            case extension == 0 && type == 2: "cancelMakeMeChair";
            case extension == 0 && type == 3: "dropTerminal";
            case extension == 0 && type == 4: "requestTerminalID";
            case extension == 0 && type == 5: "enterH243Password";
            case extension == 0 && type == 6: "enterH243TerminalID";
            case extension == 0 && type == 7: "enterH243ConferenceID";
            default: FormatString("Undefined conference request type(%d)", type);
        
    }

}
    	                 
[DataTypeBitAlign]
struct ConferenceRequest = H245ConferenceRequestType  // CHOICE  
{
	  UINT8 ConferenceRequestExtension:1;
    switch
    {
        case ConferenceRequestExtension:
             _struct ExtensionChoice
             {
                 [H245ConferenceRequestType = this.ToString]
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245ConferenceRequestTable(1, PERSmallNumber);
                 AsnPerLengthDeterminant Length;
                 [ExtensionEndoffset = FrameOffset + PERLengthValue]
                 switch( PERSmallNumber )
                 {
                     case 2: 
                             struct RequestTerminalCertificate //SEQUENCE
                             {
                                 UINT8 RequestTerminalCertificateExtension:1;
    
                                 UINT8 terminalLabelPresent:1;
                                 UINT8 certSelectionCriteriaPresent:1;
                                 UINT8 sRandomPresent:1;
                                 
                                 switch
                                 {
                                     case terminalLabelPresent: TerminalLabel terminalLabel;
                                 }
                                 switch
                                 {
                                     case certSelectionCriteriaPresent: CertSelectionCriteria certSelectionCriteria;
                                 }
                                 switch
                                 {
                                     case sRandomPresent: AsnPerConstrainedInteger(1, 4294967295) sRandom;
                                 }
                                 //Maybe extension
                             }
                     case 3: AsnPerConstrainedInteger(1, 65535) broadcastMyLogicalChannel;
                     case 4: TerminalLabel makeTerminalBroadcaster;
                     case 5: TerminalLabel sendThisSource;
                     case 7: RemoteMCRequest remoteMCRequest;
                 }
                 switch
                 {
                     case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
                 }
             };
        default:
             _struct NoneExtension
             {
                 [H245ConferenceRequestType = this.ToString]
                 AsnPerConstrainedInteger(0,7) ChoiceValue = H245ConferenceRequestTable(0,ConstrainedValue);             	   
             	   switch (ConstrainedValue)
             	   {
        	           case 3: TerminalLabel dropTerminal;
        	           case 4: TerminalLabel requestTerminalID;
        	        }
             };        
    }                 
}

Table H245RequestChannelCloseReasonTable( reason)
{
    switch( reason )
    {
        case 0: "unknown";	         
        case 1: "normal";	           
        case 2: "reopen";	           
        case 3: "reservationFailure";
        default: FormatString("%d(0x%X)",reason,reason);
    }
}

[DataTypeBitAlign]
struct RequestChannelClose // SEQUENCE   
{
    UINT8 RequestChannelCloseExtensionBit:1;
            
    AsnPerConstrainedInteger(1, 65535) forwardLogicalChannelNumber;
    
    
    switch 
    {
        case RequestChannelCloseExtensionBit:
             struct RequestChannelCloseExtension
             {
             	    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
             	    UINT8 qosCapabilityPresent:1;
             	    switch
             	    {
             	        case PERSmallNumber >= 1: UINT8 reasonPresent:1;
             	    }
             	   
                  switch 
                  { 
                  	  case qosCapabilityPresent:
                  	      struct QOSCapability 
                            {
                                AsnPerLengthDeterminant length;  
                                [QOSCapabilityEndOffset = FrameOffset + PERLengthValue]
                            	  QOSCapability  qosCapability ;
                            	  switch
                                {
                                    case FrameBitOffset < QOSCapabilityEndOffset * 8: 
                                         AsnPerPadding(QOSCapabilityEndOffset * 8 - FrameBitOffset) Padding;
                                }
                            }
                  }
                  switch 
                  { 
                      case reasonPresent:
                           struct Reason = RequestChannelCloseReason
                           {
                                AsnPerLengthDeterminant length; 
                                [ReasonEndOffset = FrameOffset + PERLengthValue]
                                UINT8 ReasonExtension:1;
                                switch
                                {
                                    case ReasonExtension:
                                         _struct ExtensionChoice
                                         {
                                         };
                                    default:
                                         _struct NoneExtension
                                         {
                                             [RequestChannelCloseReason = this.ToString]
                                             AsnPerConstrainedInteger(0,3) ChoiceValue = H245RequestChannelCloseReasonTable( ConstrainedValue );
                                         }
                                }
                                switch 
                                {
                                    case FrameBitOffset < ReasonEndOffset * 8: 
                                    AsnPerPadding(ReasonEndOffset * 8 - FrameBitOffset) Padding;
                                }
                           }
                  }
             }
     }
}



Table QOSModeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "guaranteedQOS";
		case (ExtensionBit == 0) && (Choice== 1): "controlledLoad";
	}
}

[DataTypeBitAlign]
struct QOSMode = QOSModeTable(ExtensionBit, QOSModeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.QOSModeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.QOSModeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue;
			}
	}
}

[DataTypeBitAlign]
struct RSVPParameters //SEQUENCE
{
    UINT8 RSVPParametersExtension:1;
    
    UINT8 qosModePresent:1;
    UINT8 tokenRatePresent:1;
    UINT8 bucketSizePresent:1;
    UINT8 peakRatePresent:1;
    UINT8 minPolicedPresent:1;
    UINT8 maxPktSizePresent:1;
            
    switch
    {
        case qosModePresent: QOSMode qosMode ;
    }
    switch
    {
        case tokenRatePresent: AsnPerConstrainedInteger(1, 4294967295) tokenRate = FormatString("%d Bytes/s", ConstrainedValue);
    }
    switch
    {
        case bucketSizePresent: AsnPerConstrainedInteger(1, 4294967295) bucketSize = FormatString("%d Bytes", ConstrainedValue);
    }
    switch
    {
        case peakRatePresent: AsnPerConstrainedInteger(1, 4294967295) peakRate = FormatString("%d Bytes/s", ConstrainedValue);
    }
    switch
    {
        case minPolicedPresent: AsnPerConstrainedInteger(1, 4294967295) minPoliced;
    }
    switch
    {
        case maxPktSizePresent: AsnPerConstrainedInteger(1, 4294967295) maxPktSize = FormatString("%d Bytes", ConstrainedValue);
    }
    
    //Maybe extension here
}

[DataTypeBitAlign]
struct ATMParameters //SEQUENCE
{
    UINT8 ATMParametersExtension:1;
    
    AsnPerConstrainedInteger(0, 65535) maxNTUSize = FormatString("%d Bytes", ConstrainedValue);
    AsnPerBoolean(0) atmUBR;
    AsnPerBoolean(0) atmrtVBR;
    AsnPerBoolean(0) atmnrtVBR;
    AsnPerBoolean(0) atmABR;
    AsnPerBoolean(0) atmCBR;
    
    //Maybe extension here
}


[DataTypeBitAlign]
struct H245ServicePriority	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardDataPresent:1;
	UINT8 servicePriorityValuePresent:1;
	
	switch
	{
		case nonStandardDataPresent : H245NonStandardParameter nonStandardData;
	}
	AsnPerBoolean(0) servicePrioritySignalled;
	switch
	{
		case servicePriorityValuePresent : ServicePriorityValue servicePriorityValue;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}


Table H245QOSClassTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "class0";
		case (ExtensionBit == 0) && (Choice== 1): "class1";
		case (ExtensionBit == 0) && (Choice== 2): "class2";
		case (ExtensionBit == 0) && (Choice== 3): "class3";
		case (ExtensionBit == 0) && (Choice== 4): "class4";
		case (ExtensionBit == 0) && (Choice== 5): "class5";

	}
}

[DataTypeBitAlign]
struct H245QOSClass = H245QOSClassTable(ExtensionBit, H245QOSClassChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice{};
		default:
			_struct NoneExtension
			{
				[Post.H245QOSClassChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 5) ChoiceValue = H245QOSClassTable(ExtensionBit, H245QOSClassChoice);
			}
	}
}

Table H245QOSTypeTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "desired";
		case (ExtensionBit == 0) && (Choice== 1): "required";

	}
}

[DataTypeBitAlign]
struct H245QOSType = H245QOSTypeTable(ExtensionBit, H245QOSTypeChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.H245QOSTypeChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.H245QOSTypeChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue;
			}
	}
}

[DataTypeBitAlign]
struct QOSDescriptor	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardDataPresent:1;
	
	switch
	{
		case nonStandardDataPresent : H245NonStandardParameter nonStandardData;
	}
	H245QOSType qosType;
	H245QOSClass qosClass;
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
			}
	}
}
[DataTypeBitAlign]
struct QOSCapability	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 nonStandardDataPresent:1;
	UINT8 rsvpParametersPresent:1;
	UINT8 atmParametersPresent:1;
	
	switch
	{
		case nonStandardDataPresent : H245NonStandardParameter nonStandardData;
	}
	switch
	{
		case rsvpParametersPresent : RSVPParameters rsvpParameters;
	}
	switch
	{
		case atmParametersPresent : ATMParameters atmParameters;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension
			{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;                                        
				
				switch
				{
					case PERSmallNumber >= 0 : UINT8 localQoSPresent:1;
				}
				switch
				{
					case PERSmallNumber >= 1 : UINT8 genericTransportParametersPresent:1;
				}
				switch
				{
					case PERSmallNumber >= 2 : UINT8 servicePriorityPresent:1;
				}
				switch
				{
					case PERSmallNumber >= 3 : UINT8 authorizationParameterPresent:1;
				}
				switch
				{
					case PERSmallNumber >= 4 : UINT8 qosDescriptorPresent:1;
				}
				switch
				{
					case PERSmallNumber >= 5 : UINT8 dscpValuePresent:1;
				}
				
				switch
				{
					case localQoSPresent :
						struct RemoteExtensionAddress = localQoS.ToString
						{
							AsnPerBoolean(1) localQoS;
						}
				}
				switch
				{
					case genericTransportParametersPresent :
						struct genericTransportParameters = genericTransportParameters.ToString
						{
							AsnPerLengthDeterminant length;
							[RemoteExtensionAddressEndOffset = FrameOffset + PERLengthValue]
							H245GenericTransportParameters genericTransportParameters;
							switch
							{
								case FrameBitOffset < RemoteExtensionAddressEndOffset * 8: 
									AsnPerPadding(RemoteExtensionAddressEndOffset * 8 - FrameBitOffset) Padding;
							}
						}
				}
				switch
				{
					case servicePriorityPresent :
						struct servicePriority = servicePriority.ToString
						{
							AsnPerLengthDeterminant length;
							[RemoteExtensionAddressEndOffset = FrameOffset + PERLengthValue]
							H245ServicePriority servicePriority;
							switch
							{
								case FrameBitOffset < RemoteExtensionAddressEndOffset * 8: 
									AsnPerPadding(RemoteExtensionAddressEndOffset * 8 - FrameBitOffset) Padding;
							}
						}
				}
				switch
				{
					case authorizationParameterPresent :
						struct authorizationParameter = authorizationParameter.ToString
						{
							AsnPerLengthDeterminant length;
							[RemoteExtensionAddressEndOffset = FrameOffset + PERLengthValue]
							H245AuthorizationParameters authorizationParameter;
							switch
							{
								case FrameBitOffset < RemoteExtensionAddressEndOffset * 8: 
									AsnPerPadding(RemoteExtensionAddressEndOffset * 8 - FrameBitOffset) Padding;
							}
						}
				}
				switch
				{
					case qosDescriptorPresent :
						struct qosDescriptor = qosDescriptor.ToString
						{
							AsnPerLengthDeterminant length;
							[RemoteExtensionAddressEndOffset = FrameOffset + PERLengthValue]
							QOSDescriptor qosDescriptor;
							switch
							{
								case FrameBitOffset < RemoteExtensionAddressEndOffset * 8: 
									AsnPerPadding(RemoteExtensionAddressEndOffset * 8 - FrameBitOffset) Padding;
							}
						}
				}
				switch
				{
					case dscpValuePresent :
						struct dscpValue = ConstrainedValue
						{
							AsnPerLengthDeterminant length;
							[RemoteExtensionAddressEndOffset = FrameOffset + PERLengthValue]
							AsnPerConstrainedInteger(0, 63) dscpValue;
							switch
							{
								case FrameBitOffset < RemoteExtensionAddressEndOffset * 8: 
									AsnPerPadding(RemoteExtensionAddressEndOffset * 8 - FrameBitOffset) Padding;
							}
						}
				}
			}
	}
}


Table H245repeatCountTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "finite";
		case (ExtensionBit == 0) && (Choice== 1): "untilClosingFlag";

	}
}

[DataTypeBitAlign]
struct MultiplexElement //SEQUENCE
{
    
    struct Type // CHOICE
    {
         AsnPerConstrainedInteger(0,1) ChoiceValue;             	   
         switch (ConstrainedValue)
         {
             case 0: AsnPerConstrainedInteger(0,65535) logicalChannelNumber;
        	   case 1: 
        	           struct subElementList
        	           {
        	               [ post.SubElementSize = ConstrainedValue ]
        	               AsnPerConstrainedInteger(2,255) size;
        	               while [ SubElementSize > 0 ]
        	               {
        	                   [ SubElementSize = SubElementSize - 1 ]
                             MultiplexElement subElement;
                         }
        	           }
         }
    }
    struct repeatCount = H245repeatCountTable(0, H245repeatCountChoice) // CHOICE
    {
    	[Post.H245repeatCountChoice = ConstrainedValue]
         AsnPerConstrainedInteger(0,1) ChoiceValue = H245repeatCountTable(0, H245repeatCountChoice);             	   
         switch (ConstrainedValue)
         {
             case 0: AsnPerConstrainedInteger(1,65535) finite;
         }
    }
}  
    
[DataTypeBitAlign]
struct MultiplexEntryDescriptor //SEQUENCE
{   
    UINT8 elementListPresentBit:1;

    AsnPerConstrainedInteger(1, 15) multiplexTableEntryNumber;       
    switch
    {
        case elementListPresentBit: 
             _struct ElementList
             {
                 [post.ElementListSize = ConstrainedValue]
                 AsnPerConstrainedInteger(1,256) size;
                 while [ ElementListSize > 0 ]
                 {
                     [ ElementListSize = ElementListSize - 1 ]
                     MultiplexElement element;
                 }
             }
    }
    //Maybe extension here
}


Table V76ModeParametersTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "suspendResumewAddress";
		case (ExtensionBit == 0) && (Choice== 1): "suspendResumewoAddress";

	}
}

[DataTypeBitAlign]
struct V76ModeParameters = V76ModeParametersTable(ExtensionBit, V76ModeParametersChoice)	// CHOICE
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit:
			_struct ExtensionChoice
			{
				[Post.V76ModeParametersChoice = PERSmallNumber]
				AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = V76ModeParametersTable(ExtensionBit, V76ModeParametersChoice);
				AsnPerLengthDeterminant Length;
				[ExtensionEndoffset = FrameOffset + PERLengthValue]
				switch
				{
					case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
				}
			}
		default:
			_struct NoneExtension
			{
				[Post.V76ModeParametersChoice = ConstrainedValue]
				AsnPerConstrainedInteger(0, 1) ChoiceValue = V76ModeParametersTable(ExtensionBit, V76ModeParametersChoice);
			}
	}
}      

[DataTypeBitAlign]
struct RTPH263VideoRedundancyFrameMapping // SEQUENCE   
{
    UINT8 RTPH263VideoRedundancyFrameMappingExtension:1;
    
    AsnPerConstrainedInteger(0, 15) threadNumber;
    struct FrameSequence
    {
        [post.FrameSequenceSize = ConstrainedValue ]
        AsnPerConstrainedInteger(1,256) size;
        while [ FrameSequenceSize > 0 ]
        {
            [ FrameSequenceSize = FrameSequenceSize - 1 ]
            AsnPerConstrainedInteger(0,255) frameSequence;
        }
    }
}

Table RTPH263VideoRedundancyEncodingframeToThreadMappingTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "roundrobin";
		case (ExtensionBit == 0) && (Choice== 1): "custom";

	}
}

[DataTypeBitAlign]
struct RTPH263VideoRedundancyEncoding // SEQUENCE   
{
    UINT8 RTPH263VideoRedundancyEncodingExtension:1;
    UINT8 containedThreadsPresent:1;       
    AsnPerConstrainedInteger(1,16) numberOfThreads;
    AsnPerConstrainedInteger(1,256) framesBetweenSyncPoints;
    struct FrameToThreadMapping  = RTPH263VideoRedundancyEncodingframeToThreadMappingTable(FrameToThreadMappingExtension, frameToThreadMappingChoice)  //CHOICE
    {
         UINT8 FrameToThreadMappingExtension:1;
         switch
         {
             case FrameToThreadMappingExtension:
                  _struct ExtensionChoice
                  {
                      AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                      AsnPerLengthDeterminant Length;
                  };
             default:
                  _struct NoneExtension
                  {
                  		[Post.frameToThreadMappingChoice = ConstrainedValue]
                      AsnPerConstrainedInteger(0,1) ChoiceValue = RTPH263VideoRedundancyEncodingframeToThreadMappingTable(FrameToThreadMappingExtension, frameToThreadMappingChoice);  
                      switch (ConstrainedValue)
    	                 {
                          case 1: 
                               struct custom
                               {
                                   [post.CustomsSize = ConstrainedValue]
                                   AsnPerConstrainedInteger(1,256) size;
                                   while [ CustomsSize > 0 ]
                                   {
                                       [ CustomsSize = CustomsSize - 1 ]
                                       RTPH263VideoRedundancyFrameMapping customs;
                                   }
                               }
                      }
                  }
         }
     }
     switch
     {
         case containedThreadsPresent:
              struct ContainedThreads  
              {
                  [post.ContainedThreadsSize = ConstrainedValue]  
                  AsnPerConstrainedInteger(1,256) size;
                  while [ ContainedThreadsSize > 0 ]
                  {
                      [ ContainedThreadsSize = ContainedThreadsSize  -  1 ]
                      AsnPerConstrainedInteger(0,15) containedThreads;
                  }
              }
     }
}

Table RedundancyEncodingMethodTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "nonStandard";
		case (ExtensionBit == 0) && (Choice== 1): "rtpAudioRedundancyEncoding";
		case (ExtensionBit == 1) && (Choice== 0): "rtpH263VideoRedundancyEncoding";

	}
}

[DataTypeBitAlign]
struct RedundancyEncodingMethod = RedundancyEncodingMethodDescription //CHOICE
{
     UINT8 RedundancyEncodingMethodExtension:1;
     switch
     {
         case RedundancyEncodingMethodExtension:
              _struct ExtensionChoice
              {
              	  [RedundancyEncodingMethodDescription = this.ToString]
                  AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = RedundancyEncodingMethodTable(RedundancyEncodingMethodExtension, ConstrainedValue);
                  AsnPerLengthDeterminant Length;
                  [ExtensionEndoffset = FrameOffset + PERLengthValue]
                  switch( PERSmallNumber )
                  {
                      case 0: RTPH263VideoRedundancyEncoding rtpH263VideoRedundancyEncoding;
                  }
                  switch
                  {
                      case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
                  }
              };
         default:
              _struct NoneExtension
              {
              	  [RedundancyEncodingMethodDescription = this.ToString]
                  AsnPerConstrainedInteger(0,1) ChoiceValue = RedundancyEncodingMethodTable(RedundancyEncodingMethodExtension, ConstrainedValue);  
                  switch (ConstrainedValue)
	                 {
                      case 0: H245NonStandardParameter nonStandardParameter;
                   }
              }
    };
}

[DataTypeBitAlign]
struct RedundancyEncodingMode // SEQUENCE   
{
    UINT8 RedundancyEncodingModeExtension:1;
    
    UINT8 secondaryEncodingPresent:1;  
    
    RedundancyEncodingMethod redundancyEncodingMethod;
    switch
    {
        case secondaryEncodingPresent: 
             struct SecondaryEncoding //CHOICE
             {
                  UINT8 SecondaryEncodingExtension:1;
                  switch
                  {
                      case SecondaryEncodingExtension:
                           _struct ExtensionChoice
                           {
                               AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                               AsnPerLengthDeterminant Length;
                           };
                      default:
                           _struct NoneExtension
                           {
                               AsnPerConstrainedInteger(0,1) ChoiceValue;  
                               switch (ConstrainedValue)
             	                 {
        	                         case 0: H245NonStandardParameter nonStandardParameter;
        	                         case 1: AudioMode audioMode; 
        	                     }
                           }
                 };
             }
    }     

    //Maybe extension here
}

[DataTypeBitAlign]
struct H2250ModeParameters // SEQUENCE   
{
    UINT8 H2250ModeParametersExtension:1;
    
    UINT8 redundancyEncodingModePresent:1;  
    
    switch
    {
        case redundancyEncodingModePresent: RedundancyEncodingMode redundancyEncodingMode;
    }     
    
    //Maybe extension here
} 
   
[DataTypeBitAlign]
struct CapabilityIdentifier   // CHOICE  
{
	  UINT8 CapabilityIdentifierExtension:1;
    switch
    {
        case CapabilityIdentifierExtension:
             _struct ExtensionChoice
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                 AsnPerLengthDeterminant Length;
             };
        default:
             _struct NoneExtension
             {
                 AsnPerConstrainedInteger(0,3) ChoiceValue;             	   
             	   switch (ConstrainedValue)
             	   {
        	           case 0: AsnPerObjectIdentifier standard;
        	           case 1: H245NonStandardParameter h221NonStandard;
        	           case 2: 
        	           _struct UUIDType
        	           {
        	               AsnPerAlign align;
        	               UUID(1) uuid;
        	           };
        	           case 3: AsnPerIA5String(1, 64) domainBased;
        	       }
        	   }
    }
}        	           

[DataTypeBitAlign]
struct ParameterIdentifier   // CHOICE  
{
	  UINT8 ParameterIdentifierExtension:1;
    switch
    {
        case ParameterIdentifierExtension:
             _struct ExtensionChoice
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                 AsnPerLengthDeterminant Length;
             };
        default:
             _struct NoneExtension
             {
                 AsnPerConstrainedInteger(0,3) ChoiceValue;             	   
             	   switch (ConstrainedValue)
             	   {
        	           case 0: AsnPerConstrainedInteger(0, 127) standard;
        	           case 1: H245NonStandardParameter h221NonStandard;
        	           case 2: AsnPerOctetString(16, 16) uuid;
         	           case 3: AsnPerIA5String(1, 64) domainBased;
         	       }
         	   }
    }
}

[DataTypeBitAlign]
struct ParameterValue   // CHOICE  
{
	  UINT8 ParameterValueExtension:1;
    switch
    {
        case ParameterValueExtension:
             _struct ExtensionChoice
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                 AsnPerLengthDeterminant Length;
             };
        default:
             _struct NoneExtension
             {
                 AsnPerConstrainedInteger(0,7) ChoiceValue;             	   
             	   switch (ConstrainedValue)
             	   {
        	           case 1: AsnPerConstrainedINteger(0, 255) booleanArray;
        	           case 2: AsnPerConstrainedINteger(0, 65535) unsignedMin;
         	           case 3: AsnPerConstrainedINteger(0, 65535) unsignedMax;
        	           case 4: AsnPerConstrainedINteger(0, 4294967295) unsigned32Min;
        	           case 5: AsnPerConstrainedINteger(0, 4294967295) unsigned32Max;
         	           case 6: AsnPerOctetString(-1, -1) octetString;         	           
        	           case 7: 
        	                   struct SequenceOfGenericParameter
        	                   {
        	                       [post.genericParameterSize = PERLengthValue]
        	                       AsnPerLengthDeterminant size;
        	                       while [ genericParameterSize > 0 ]
        	                       {
        	                           [ genericParameterSize = genericParameterSize - 1 ]
        	                           GenericParameter genericParameter;
        	                       }
        	                   }
        	        }
        	   }
    }
}

[DataTypeBitAlign]
struct GenericParameter // SEQUENCE   
{
    UINT8 GenericParameterExtension:1;
    
    UINT8 supersedesPresent:1;  
    
    ParameterIdentifier parameterIdentifier;
    ParameterValue parameterValue;
        
    switch
    {
        case supersedesPresent: 
             struct supersedes
             {
                 [post.supersedesSize = PERLengthValue]
                 AsnPerLengthDeterminant size;
                 while [ supersedesSize > 0 ]
                 {
                     [supersedesSize=supersedesSize-1]
                     ParameterIdentifier supersedes;
                 }
             }
    }     
    //Maybe extension here
}
        	         
[DataTypeBitAlign]
struct GenericCapability // SEQUENCE   
{
    UINT8 GenericCapabilityExtension:1;
    
    UINT8 maxBitRatePresent:1;  
    UINT8 collapsingPresent:1;  
    UINT8 nonCollapsingPresent:1;  
    UINT8 nonCollapsingRawPresent:1;  
    UINT8 transportPresent:1;  
    
    CapabilityIdentifier capabilityIdentifier;
    
    switch
    {
        case maxBitRatePresent: AsnPerConstrainedInteger(0, 4294967295) maxBitRate = FormatString("%d bit/s", ConstrainedValue*100);
    }
    switch
    {
        case collapsingPresent: 
             struct Collapsing
             {
                 [post.CollapsingSize = PERLengthValue]
                 AsnPerLengthDeterminant Length;
                 while [ CollapsingSize > 0 ]
                 {
                     [ CollapsingSize = CollapsingSize - 1 ]
                     GenericParameter collapsing;
                 }
             }
    }     
    switch
    {
        case nonCollapsingPresent: 
             struct NonCollapsing
             {
                 [post.CollapsingSize = PERLengthValue]
                 AsnPerLengthDeterminant Length;
                 while [ CollapsingSize > 0 ]
                 {
                     [ CollapsingSize = CollapsingSize - 1 ]
                     GenericParameter nonCollapsing;
                 }
             }
    }     
    switch
    {
        case nonCollapsingRawPresent: 
			AsnPerOctetString(-1, -1) nonCollapsingRaw;
    }     
    
    switch
    {
        case transportPresent: DataProtocolCapability transport;
    }     
    
    //Maybe extension here
} 



Table H261VideoModeresolutionTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "qcif";
		case (ExtensionBit == 0) && (Choice== 1): "cif";

	}
}

[DataTypeBitAlign]
struct H261VideoMode // SEQUENCE   
{
    UINT8 H261VideoModeExtension:1;
    
    struct Resolution = H261VideoModeresolutionTable(0, Property.resolutionChoice)	//CHOICE
    {
		[Post.resolutionChoice = ConstrainedValue]
		AsnPerConstrainedInteger(0, 1) ChoiceValue = H261VideoModeresolutionTable(0, Property.resolutionChoice);
    }
    AsnPerConstrainedInteger(1, 19200) bitRate = FormatString("%d bit/s", ConstrainedValue * 100);
    AsnPerBoolean(0) stillImageTransmission;
    //Maybe extension here
}

Table H262VideoModeProfileAndLevelTable(value){
	switch(value){
		case 0: "profileAndLevel-SPatML";
		case 1: "profileAndLevel-MPatLL";
		case 2: "profileAndLevel-MPatML";
		case 3: "profileAndLevel-MPatH-14";
		case 4: "profileAndLevel-MPatHL";
		case 5: "profileAndLevel-SNRatLL";
		case 6: "profileAndLevel-SNRatML";
		case 7: "profileAndLevel-Spatiala";
		case 8: "profileAndLevel-HPatML";
		case 9: "profileAndLevel-HPatH-14";
		case 10: "profileAndLevel-HPatHL";
		default: "Unknown Value";
	}
}

[DataTypeBitAlign]
struct H262VideoMode // SEQUENCE   
{
    UINT8 H262VideoModeExtension:1;
    
    UINT8 videoBitRatePresent:1;
    UINT8 vbvBufferSizePresent:1;
    UINT8 samplesPerLinePresent:1;
    UINT8 linesPerFramePresent:1;
    UINT8 framesPerSecondPresent:1;
    UINT8 luminanceSampleRatePresent:1;
    
    struct ProfileAndLevel	//CHOICE
    {
        UINT8 ProfileAndLevelExtension:1;
        switch
        {
            case ProfileAndLevelExtension:
                 _struct ExtensionChoice
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,10) ChoiceValue = H262VideoModeProfileAndLevelTable(ConstrainedValue);  
                 }
        }
    }//End CHOICE
    
    switch
    {
        case videoBitRatePresent: AsnPerConstrainedInteger(0, 1073741823) videoBitRate = FormatString("%d bit/s", ConstrainedValue*400);
    }
    switch
    {
        case vbvBufferSizePresent: AsnPerConstrainedInteger(0, 262143) vbvBufferSize = FormatString("%d bits", ConstrainedValue*16384);
    }
    switch
    {
        case samplesPerLinePresent: AsnPerConstrainedInteger(0, 16383) samplesPerLine= FormatString("%d samples/line", COnstrainedValue);
    }
    switch
    {
        case linesPerFramePresent: AsnPerConstrainedInteger(0, 16383) linesPerFrame = FormatString("%d lines/frame", ConstrainedValue);
    }
    switch
    {
        case framesPerSecondPresent: AsnPerConstrainedInteger(0, 15) framesPerSecond = FormatString("%d samples/s", ConstrainedValue);
    }
    switch
    {
        case luminanceSampleRatePresent: AsnPerConstrainedInteger(0, 4294967295) luminanceSampleRate;
    }
    //Maybe extension here
}

[DataTypeBitAlign]
struct H263ModeComboFlags // SEQUENCE   
{
    UINT8 H263ModeComboFlagsExtension:1;
          
    AsnPerBoolean(0) unrestrictedVector;
    
    AsnPerBoolean(0) arithmeticCoding;
    AsnPerBoolean(0) advancedPrediction;
    AsnPerBoolean(0) pbFrames;
    AsnPerBoolean(0) advancedIntraCodingMode;
    AsnPerBoolean(0) deblockingFilterMode;
    
    AsnPerBoolean(0) unlimitedMotionVectors;
    AsnPerBoolean(0) slicesInOrderNonRect;
    AsnPerBoolean(0) slicesInOrderRect;
    AsnPerBoolean(0) slicesNoOrderNonRect;
    AsnPerBoolean(0) slicesNoOrderRect;
    
    AsnPerBoolean(0) improvedPBFramesMode;
    AsnPerBoolean(0) referencePicSelect;
    AsnPerBoolean(0) dynamicPictureResizingByFour;
    AsnPerBoolean(0) dynamicPictureResizingSixteenthPel;
    AsnPerBoolean(0) dynamicWarpingHalfPel;
    
    AsnPerBoolean(0) dynamicWarpingSixteenthPel;
    AsnPerBoolean(0) reducedResolutionUpdate;
    AsnPerBoolean(0) independentSegmentDecoding;
    AsnPerBoolean(0) alternateInterVLCMode;
    AsnPerBoolean(0) modifiedQuantizationMode;
    //Maybe extension here
    switch{
    	case H263ModeComboFlagsExtension:
    		_struct Extension{
    			AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    			UINT8 enhancedReferencePicSelectPresent:1;
    			switch{
    				case PERSmallNumber >= 1: UINT8 h263Version3OptionsPresent:1;
    			}
    			
    			switch{
    				case enhancedReferencePicSelectPresent: AsnPerBoolean(1) enhancedReferencePicSelect;
    			}
    			switch{
    				case h263Version3OptionsPresent:
    					_struct h263Version3OptionsPresent{
    						AsnPerLengthDeterminant length;
    						[h263Version3OptionsEndoffset = FrameOffset + PERLengthValue]
    						H263Version3Options h263Version3Options;
    						switch{
    							case FrameBitOffset < h263Version3OptionsEndoffset * 8:
    								AsnPerPadding( h263Version3OptionsEndoffset * 8 - FrameBitOffset) Padding;
    						}
    					}
    			}
    		}
    }    					
}
 
// v-leishe 8.22.06   
//[DataTypeBitAlign]
//struct H263VideoMode // SEQUENCE   
//{
//    UINT8 H263VideoModeExtension:1;
//    
//    H263ModeComboFlags h263VideoUncoupledModes;
//    
//    struct H263VideoCoupledModes 
//    {
//        [post.H263VideoCoupleModeSize = ConstrainedValue]
//        AsnPerCOnstrainedInteger(1, 16) size;
//        while [ H263VideoCoupleModeSize > 0 ]
//        {
//            [ H263VideoCoupleModeSize = H263VideoCoupleModeSize - 1 ]
//            H263ModeComboFlags h263VideoCoupledMode;
//        }
//    }
//    //Maybe extension here
//}

Table H263VideoModeResolutionTable(value){
	switch(value){
		case 0: "sqcif";
		case 1: "qcif";
		case 2: "cif";
		case 3: "cif4";
		case 4: "cif16";
		default: "Unknown Value";
	}
}

[DataTypeBitAlign]
struct H263VideoMode{
	UINT8 H263VideoModeExtension:1;
	struct resolution{
		UINT8 resolutionextension:1;
		switch{
			case resolutionextension:
				_struct Extension{
		            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = PERSmallNumber? "Unknown": "Custom";
		            AsnPerLengthDeterminant Length;
		            [resolutionextensionEndoffset = FrameOffset + PERLengthValue]		            
                    switch{
		                case FrameBitOffset < resolutionextensionEndoffset * 8:
		                AsnPerPadding( resolutionextensionEndoffset * 8 - FrameBitOffset ) Padding;
		            }					
				}							
			default:
				_struct nonExtension{
					AsnPerConstrainedInteger(0,4) ChoiceValue = H263VideoModeResolutionTable(ConstrainedValue);						
				}
		}
	}
	AsnPerConstrainedInteger(1, 19200) bitRate = FormatString("%d bit/s", ConstrainedValue*100);
	AsnPerBoolean(0) unrestrictedVector;
	AsnPerBoolean(0) arithmeticCoding;
	AsnPerBoolean(0) advancedPrediction;
	AsnPerBoolean(0) pbFrames;
					
	switch{
		case H263VideoModeExtension:
			_struct Extension{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
				UINT8 errorCompensationPresent:1;
				switch{
					case PERSmallNumber >= 1: UINT8 enhancementLayerInfoPresent:1;
				}
				switch{
					case PerSmallNumber >= 2: UINT8 h263OptionsPresent:1;
				}
				
				switch{
					case errorCompensationPresent: 
						_struct errorCompensation{
							AsnPerBoolean(1) errorCompensation;
						}
				}
				switch{
					case enhancementLayerInfoPresent: 
						_struct enhancementLayerInfo{
							AsnPerLengthDeterminant length;
							[RemoteExtensionAddressEndOffset = FrameOffset + PERLengthValue]
							EnhancementLayerInfo enhancementLayerInfo;
							switch
							{
								case FrameBitOffset < RemoteExtensionAddressEndOffset * 8: 
									AsnPerPadding(RemoteExtensionAddressEndOffset * 8 - FrameBitOffset) Padding;
							}
						}
				}
				switch{
					case h263OptionsPresent: 
						_struct h263Options{
							AsnPerLengthDeterminant length;
							[RemoteExtensionAddressEndOffset = FrameOffset + PERLengthValue]
							H263Options h263Options;
							switch
							{
								case FrameBitOffset < RemoteExtensionAddressEndOffset * 8: 
									AsnPerPadding(RemoteExtensionAddressEndOffset * 8 - FrameBitOffset) Padding;
							}								
						}
				}
			}	
	}
}



[DataTypeBitAlign]
struct IS11172VideoMode // SEQUENCE   
{
    UINT8 IS11172VideoModeExtension:1;
    
    UINT8 videoBitRatePresent:1;
    UINT8 vbvBufferSizePresent:1;
    UINT8 samplesPerLinePresent:1;
    UINT8 linesPerFramePresent:1;
    UINT8 pictureRatePresent:1;
    UINT8 luminanceSampleRatePresent:1;
    
    AsnPerBoolean(0) constrainedBitstream;
    switch
    {
        case videoBitRatePresent: AsnPerConstrainedInteger(0, 1073741823) videoBitRate = FormatString("%d bit/s", ConstrainedValue*400);
    }
    switch
    {
        case vbvBufferSizePresent: AsnPerConstrainedInteger(0, 262143) vbvBufferSize = FormatString("%d bits", ConstrainedValue*16384);
    }
    switch
    {
        case samplesPerLinePresent: AsnPerConstrainedInteger(0, 16383) samplesPerLine = FormatString("%d (samples/line)", ConstrainedValue);
    }
    switch
    {
        case linesPerFramePresent: AsnPerConstrainedInteger(0, 16383) linesPerFrame = FormatString("%d (lines/frame)", ConstrainedValue);
    }
    switch
    {
        case pictureRatePresent: AsnPerConstrainedInteger(0, 15) pictureRate;
    }
    switch
    {
        case luminanceSampleRatePresent: AsnPerConstrainedInteger(0, 4294967295) luminanceSampleRate = FormatString("%d (samples/s)", ConstrainedValue);
    }
    //Maybe extension here
}

[DataTypeBitAlign]  
struct VideoMode  // CHOICE
{
    UINT8 VideoModeExtension:1;
    switch
    {
        case VideoModeExtension:
             _struct ExtensionChoice
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                 AsnPerLengthDeterminant Length;
                 [ExtensionEndoffset = FrameOffset + PERLengthValue]
                 switch( PERSmallNumber )
                 {
                     case 0: GenericCapability genericVideoMode;
                 }
                 switch
                 {
                     case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
                 }
             };
        default:
             _struct NoneExtension
             {
                 AsnPerConstrainedInteger(0,4) ChoiceValue;             	   
             	   switch (ConstrainedValue)
             	   {
        	           case 0: H245NonStandardParameter nonStandard;
        	           case 1: H261VideoMode H261VideoMode;
        	           case 2: H262VideoMode H262VideoMode;
        	           case 3: H263VideoMode H263VideoMode;
        	           case 4: IS11172VideoMode is11172VideoMode;
        	        }
        	    }
    }
}

[DataTypeBitAlign]
struct AuthenticationCapability // SEQUENCE   
{
    UINT8 AuthenticationCapabilityExtension:1;
    
    UINT8 nonStandardPresent:1;
    switch
    {
        case nonStandardPresent: 
             H245NonStandardParameter nonStandard;
    }
    
    switch{
    	case AuthenticationCapabilityExtension:
    		_struct Extension{
    			AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    			UINT8 antiSpamAlgorithmPresent:1;
    			switch{
    				case antiSpamAlgorithmPresent:
    					_struct antiSpamAlgorithm{
    						AsnPerLengthDeterminant length;
    						[antiSpamAlgorithmEndoffset = FrameOffset + PERLengthValue]
    						AsnPerObjectIdentifier antiSpamAlgorithm;
    						switch{
    							case FrameBitOffset < antiSpamAlgorithmEndoffset * 8:
    								AsnPerPadding( antiSpamAlgorithmEndoffset * 8 - FrameBitOffset) Padding;
    						}
    					}
    			}
    		}
    }
}

[DataTypeBitAlign]
struct IntegrityCapability // SEQUENCE   
{
    UINT8 IntegrityCapabilityExtension:1;
    
    UINT8 nonStandardPresent:1;
    switch
    {
        case nonStandardPresent: 
             H245NonStandardParameter nonStandard;
    }
    //Extension here
}
    
[DataTypeBitAlign]
struct MediaEncryptionAlgorithm   // CHOICE  
{
	UINT8 MediaEncryptionAlgorithmExtension:1;
    switch
    {
        case MediaEncryptionAlgorithmExtension:
             _struct ExtensionChoice
             {
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                 AsnPerLengthDeterminant Length;
             };
        default:
             _struct NoneExtension
             {
                 AsnPerConstrainedInteger(0,1) ChoiceValue;             	   
             	   switch (ConstrainedValue)
             	   {
        	           case 0: H245NonStandardParameter nonStandard;
        	           case 1: AsnPerObjectIdentifier algorithm;
        	       }
        	   }
    }
}        	           

[DataTypeBitAlign]
struct EncryptionAuthenticationAndIntegrity // SEQUENCE   
{
    UINT8 EncryptionAuthenticationAndIntegrityExtension:1;
    
    UINT8 encryptionCapabilityPresent:1;
    UINT8 authenticationCapabilityPresent:1;
    UINT8 integrityCapabilityPresent:1;
    
    switch
    {
        case encryptionCapabilityPresent: 
             struct
             {
                 [post.EncryptionCapabilitySize = ConstrainedValue]
                 AsnPerConstrainedInteger(1, 256) size;
                 while [ EncryptionCapabilitySize > 0 ]
                 {
                     [ EncryptionCapabilitySize = EncryptionCapabilitySize - 1 ]
                     MediaEncryptionAlgorithm  encryptionCapability;
                 }
             }
    }
    switch
    {
        case authenticationCapabilityPresent: AuthenticationCapability authenticationCapability;
    }
    switch
    {
        case integrityCapabilityPresent: IntegrityCapability integrityCapability;
    }
    //Extension here
}

Table H245AudioModeTable( type )
{
    switch( type )
    {
        case 0 : "nonStandard";
        case 1 : "g711Alaw64k";
        case 2 : "g711Alaw56k";
        case 3 : "g711Ulaw64k";
        case 4 : "g711Ulaw56k";
        case 5 : "g722-64k";
        case 6 : "g722-56k";
        case 7 : "g722-48k";
        case 8 : "g728";
        case 9 : "g729";
        case 10: "g729AnnexA";
        case 11: "g7231";
        case 12: "is11172AudioMode";
        case 13: "is13818AudioMode";
        default: FormatString("%d", type);
    }
}

Table H245AudioModeG7231Table( type )
{
    switch( type )
    {
        case 0: "noSilenceSuppressionLowRate";
        case 1: "noSilenceSuppressionHighRate";
        case 2: "silenceSuppressionLowRate";
        case 3: "silenceSuppressionHighRate";
        default: FormatString("%d", type );
    }
}

[DataTypeBitAlign]
struct AudioMode = AudioModeDescription
{
    UINT8 AudioModeExtensionBit:1;
    switch
    {
        case AudioModeExtensionBit:
        _struct ExtensionChoice
        {
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
            AsnPerLengthDeterminant Length;
            [AudioModeExtensionEndoffset = FrameOffset + PERLengthValue]
            switch( PERSmallNumber )
            {
                case 0: AsnPerConstrainedInteger(1,256) g729wAnnexB;
                case 1: AsnPerConstrainedInteger(1,256) g729AnnexAwAnnexB;
                case 2: G7231AnnexCMode g7231AnnexCMode;
                case 3: GSMAudioCapability gsmFullRate;
                case 4: GSMAudioCapability gsmHalfRate;
                case 5: GSMAudioCapability gsmEnhancedFullRate;
                case 6: GenericCapability genericAudioMode;
                case 7: G729Extensions g729Extensions;
                case 8: VBDMode vbd;
            }
            switch
            {
                case FrameBitOffset < AudioModeExtensionEndoffset * 8:
                AsnPerPadding( AudioModeExtensionEndoffset * 8 - FrameBitOffset ) Padding;
            }
        };
        default:
        _struct NoneExtension
        {
            [AudioModeDescription = this.ToString]
            AsnPerConstrainedInteger(0,13) ChoiceValue = H245AudioModeTable( ConstrainedValue );
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardParameter nonStandard;
                case 11: AsnPerConstrainedInteger(0,3) g7231 = H245AudioModeG7231Table( ConstrainedValue );
                case 12: IS11172AudioMode is11172AudioMode;
                case 13: IS13818AudioMode is13818AudioMode;
            }
        };
    }
}

[DataTypeBitAlign]
struct G7231AnnexCMode
{
    UINT8 G7231AnnexCModeExtensionBit:1;
    AsnPerConstrainedInteger(1,256) maxAl_sduAudioFrames;
    AsnPerBoolean(0) silenceSuppression;
    struct g723AnnexCAudioMode
    {
        UINT8 g723AnnexCAudioModeExtensionBit:1;
        AsnPerConstrainedInteger(27,78) highRateMode0 = FormatString("%d Bytes)", ConstrainedValue);
        AsnPerConstrainedInteger(27,78) highRateMode1 = FormatString("%d Bytes)", ConstrainedValue);
        AsnPerConstrainedInteger(23,66) lowRateMode0 = FormatString("%d Bytes)", ConstrainedValue);
        AsnPerConstrainedInteger(23,66) lowRateMode1 = FormatString("%d Bytes)", ConstrainedValue);
        AsnPerConstrainedInteger(6,17) sidMode0 = FormatString("%d Bytes)", ConstrainedValue);
        AsnPerConstrainedInteger(6,17) sidMode1 = FormatString("%d Bytes)", ConstrainedValue);
        //switch
        //{
        //    case g723AnnexCAudioModeExtensionBit:
        //}
    };
    //switch
    //{
    //    case G7231AnnexCModeExtensionBit:
    //}
}

Table H245IS11172AudioModeAudioLayerTable( type )
{
    switch( type )
    {
        case 0: "audioLayer1";
        case 1: "audioLayer2";
        case 2: "audioLayer3";
        default: FormatString("%d", type);
    }
}

Table H245IS11172AudioModeAudioSamplingTable( type )
{
    switch( type )
    {
        case 0: "audioSampling32k";
        case 1: "audioSampling44k1";
        case 2: "audioSampling48k";
        default: FormatString("%d", type);
    }
}

Table H245IS11172AudioModeMultiChannelTypeTable( type )
{
    switch( type )
    {
        case 0: "singleChannel";
        case 1: "twoChannelStereo";
        case 2: "twoChannelDual";
        default: FormatString("%d", type);
    }
}

[DataTypeBitAlign]
struct IS11172AudioMode
{
    UINT8 IS11172AudioModeExtensionBit:1;
    AsnPerConstrainedInteger(0,2) audioLayer = H245IS11172AudioModeAudioLayerTable( ConstrainedValue );
    AsnPerConstrainedInteger(0,2) audioSampling = H245IS11172AudioModeAudioSamplingTable( ConstrainedValue );
    AsnPerConstrainedInteger(0,2) multichannelType = H245IS11172AudioModeMultiChannelTypeTable( ConstrainedValue );
    AsnPerConstrainedInteger(1,448) bitRate = FormatString("%d kbit/s", ConstrainedValue);
    //switch
    //{
    //    case IS11172AudioModeExtensionBit:
    //}
}

Table H245IS13818AudioModeaudioLayerTable( type )
{
    switch( type )
    {
        case 0: "audioLayer1";
        case 1: "audioLayer2";
        case 2: "audioLayer3";
        default: FormatString("%d", type);
    }
}

Table H245IS13818AudioModeaudioSamplingTable( type )
{
    switch( type )
    {
        case 0: "audioSampling16k";
        case 1: "audioSampling22k05";
        case 2: "audioSampling24k";
        case 3: "audioSampling32k";
        case 4: "audioSampling44k1";
        case 5: "audioSampling48k";
        default: FormatString("%d", type);
    }
}

Table H245IS13818AudioModemultichannelTypeTable( type )
{
    switch( type )
    {
        case 0: "singleChannel";
        case 1: "twoChannelStereo";
        case 2: "twoChannelDual";
        case 3: "threeChannels2-1";
        case 4: "threeChannels3-0";
        case 5: "fourChannels2-0-2-0";
        case 6: "fourChannels2-2";
        case 7: "fourChannels3-1";
        case 8: "fiveChannels3-0-2-0";
        case 9: "fiveChannels3-2";
        default: FormatString("%d", type);
    }
}

[DataTypeBitAlign]
struct IS13818AudioMode
{
    UINT8 IS13818AudioModeExtensionBit:1;
    AsnPerConstrainedInteger(0,2) audioLayer = H245IS13818AudioModeaudioLayerTable( ConstrainedValue );
    AsnPerConstrainedInteger(0,5) audioSampling = H245IS13818AudioModeaudioSamplingTable( ConstrainedValue );
    AsnPerConstrainedInteger(0,9) multichannelType = H245IS13818AudioModemultichannelTypeTable( ConstrainedValue );
    AsnPerBoolean(0) lowFrequencyEnhancement;
    AsnPerBoolean(0) multilingual;
    AsnPerConstrainedInteger(1,1130) bitRate = FormatString("%d kbit/s", ConstrainedValue);
    //switch
    //{
    //    case IS13818AudioModeExtensionBit:
    //}
}


Table DataModeApplicationTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "nonStandard";
		case (ExtensionBit == 0) && (Choice== 1): "t120";
		case (ExtensionBit == 0) && (Choice== 2): "dsm-cc";
		case (ExtensionBit == 0) && (Choice== 3): "userData";
		case (ExtensionBit == 0) && (Choice== 4): "t84";
		case (ExtensionBit == 0) && (Choice== 5): "t434";
		case (ExtensionBit == 0) && (Choice== 6): "h224";
		case (ExtensionBit == 0) && (Choice== 7): "nlpid";
		case (ExtensionBit == 0) && (Choice== 8): "dsvdControl";
		case (ExtensionBit == 0) && (Choice== 9): "h222DataPartitioning";

	}
}

[DataTypeBitAlign]
struct DataMode
{
    UINT8 DataModeExtensionBit:1;
    struct application
    {
        UINT8 applicationExtensionBit:1;
        switch
        {
            case applicationExtensionBit:
            _struct ExtensionChoice
            {
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                 AsnPerLengthDeterminant Length;
                 [applicationExtensionEndoffset = FrameOffset + PERLengthValue]
                 switch( PERSmallNumber )
                 {
                     case 0: DataProtocolCapability t30fax;
                     case 1: DataProtocolCapability t140;
                     case 2: struct t38fax
                             {
                                 DataProtocolCapability t38FaxProtocol;
                                 T38FaxProfile t38FaxProfile;
                             };
                     case 3: GenericCapability genericDataMode;
                 }
                 switch
                 {
                     case FrameBitOffset < applicationExtensionEndoffset * 8:
                          AsnPerPadding(applicationExtensionEndoffset * 8 - FrameBitOffset) Padding;
                 }
            };
            default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,9) ChoiceValue = DataModeApplicationTable(0, ConstrainedValue);
                switch( ConstrainedValue )
                {
                    case 0: H245NonStandardParameter nonStandard;
                    case 1: DataProtocolCapability t120;
                    case 2: DataProtocolCapability dsm_cc;
                    case 3: DataProtocolCapability userData;
                    case 4: DataProtocolCapability t84;
                    case 5: DataProtocolCapability t434;
                    case 6: DataProtocolCapability h224;
                    case 7: struct nlpid
                            {
                                DataProtocolCapability nlpidProtocol;
                                AsnPerOctetString(-1,-1) nlpidData;
                            };
                    case 9: DataProtocolCapability h222DataPartitioning;
                }
            };
        }
    };
    AsnPerConstrainedInteger(0,4294967295) bitRate = FormatString("%d bit/s", ConstrainedValue * 100);
    //switch
    //{
    //    case DataModeExtensionBit:
    //}
}

Table H245EncryptionModeTable( value )
{
    switch( value )
    {
        case 0: "nonStandard";
        case 1: "h233Encryption";
        default: FormatString("%d", value);
    }
}

[DataTypeBitAlign]
struct EncryptionMode
{
    UINT8 EncryptionModeExtensionBit:1;
    switch
    {
        case EncryptionModeExtensionBit:
        _struct ExtensionChoice
        {
        };
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,1) ChoiceValue = H245EncryptionModeTable( ConstrainedValue ) ;
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardParameter nonStandard;
            }
        };
    }
}
                        
[DataTypeBitAlign]
struct H235Mode //SEQUENCE
{
    UINT8 H235ModeExtension:1;
    
    EncryptionAuthenticationAndIntegrity encryptionAuthenticationAndIntegrity;
    
    struct mediaMode  // CHOICE
    {
        UINT8 MediaModeExtension:1;
        switch
        {
            case MediaModeExtension:
                 _struct ExtensionChoice
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,3) ChoiceValue;             	   
                 	   switch (ConstrainedValue)
                 	   {
            	           case 0: H245NonStandardParameter nonStandard;
            	           case 1: VideoMode videoMode;
            	           case 2: AudioMode audioMode;
            	           case 3: DataMode dataMode;
            	        }
            	  }
        }
    }
    //Extension here
}     

Table H223AnnexCArqParametersTable(value){
	switch(value){
		case 0: "finite";
		case 1: "infinite";
		default: "Unknown Value";
	}
}

[DataTypeBitAlign]
struct H223AnnexCArqParameters // SEQUENCE   
{
    UINT8 H223AnnexCArqParametersExtension:1;
    
    struct NumberOfRetransmissions // CHOICE
    {
        UINT8 NumberOfRetransmissionsExtension:1;
        switch
        {
            case NumberOfRetransmissionsExtension:
                 _struct ExtensionChoice
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,1) ChoiceValue = H223AnnexCArqParametersTable(ConstrainedValue);             	   
                 	   switch (ConstrainedValue)
                 	   {
            	           case 0: AsnPerConstrainedInteger(0, 16) finite;
            	       }
            	   }
        }
    }

    AsnPerConstrainedInteger(0,16777215) sendBufferSize = FormatString("%d Bytes", ConstrainedValue);    
    //Maybe extension here        	          
}  
    
Table CRCLengthExtensionTable( value )
{
    switch( value )
    {
        case 0: "crc8bit";
        case 1: "crc16bit";
        case 2: "crc32bit";
        case 3: "crcNotUsed";
        default: FormatString("%d(%X)", value, value);
    }
}


Table CRCLengthTable( value )
{
    switch( value )
    {
        case 0: "crc4bit";
        case 1: "crc12bit";
        case 2: "crc20bit";
        case 3: "crc28bit";
        default: FormatString("%d(%X)", value, value);
    }
}

Table H223AL1MParametersArqTypeTable(value){
	switch(value){
		case 0: "noArq";
		case 1: "typeIArq";
		case 2: "typeIIArq";
		default: "Unknown Value";
	}
}

[DataTypeBitAlign]
struct H223AL1MParameters // SEQUENCE   
{     
    UINT8 H223AL1MParametersExtensionBit:1;
      
    struct TransferMode	//CHOICE
    {
        UINT8 TransferModeExtension:1;
        switch
        {
            case TransferModeExtension:
                 _struct TransferModeExtension
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,1) ChoiceValue = ConstrainedValue? "unframed": "framed";    
                 }
        }
    }         	   
    struct HeaderFEC	//CHOICE
    {
        UINT8 HeaderFECExtension:1;
        switch
        {
            case HeaderFECExtension:
                 _struct HeaderFECExtension
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,1) ChoiceValue = ConstrainedValue? "golay24-12": "sebch16-7";
                 }
        }
    }     
    struct CrcLength = CrcLengthDes	//CHOICE
    {
        UINT8 CrcLengthExtension:1;
        switch
        {
            case CrcLengthExtension:
                 _struct CrcLengthExtension
                 {
                     [CrcLengthDes = this.ToString]
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = CRCLengthExtensionTable(PERSmallNumber);
                     AsnPerLengthDeterminant Length;
                     [CrcLengthEndoffset = FrameOffset + PERLengthValue]
                     switch{
                     	case FrameBitOffset < CrcLengthEndoffset * 8:
                     		AsnPerPadding(CrcLengthEndoffset * 8 - FrameBitOffset) Padding;
                     }
                 };
            default:
                 _struct NoneExtension
                 {
                     [CrcLengthDes = this.ToString]
                     AsnPerConstrainedInteger(0,3) ChoiceValue = CRCLengthTable(ConstrainedValue);    
                 }
        }
    }    
    AsnPerConstrainedInteger(8,32) rcpcCodeRate;
    struct ArqType	//CHOICE
    {
        UINT8 ArqTypeExtension:1;
        switch
        {
            case ArqTypeExtension:
                 _struct ArqTypeExtension
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,2) ChoiceValue = H223AL1MParametersArqTypeTable(ConstrainedValue);   
                     switch (ConstrainedValue)
             	       {
        	               case 1: H223AnnexCArqParameters typeIArq;
        	               case 2: H223AnnexCArqParameters typeIIArq;
                     }
                 }
        }        
    }  
    
    AsnPerBoolean(0) alpduInterleaving;
    AsnPerBoolean(0) alsduSplitting;          
    
    switch 
    {
        case H223AL1MParametersExtensionBit:
             struct H223AL1MParametersExtension
             {
             	    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
             	    UINT8 rsCodeCorrectionPresent:1;
             	    
                  switch 
                  { 
                      case  rsCodeCorrectionPresent: 
                            struct 	RsCodeCorrection
                            {
                                AsnPerLengthDeterminant length;  
                                [RsCodeCorrectionEndOffset = FrameOffset + PERLengthValue]
                            	  AsnPerConstrainedInteger(0, 127) rsCodeCorrection;
                            	  switch
                                {
                                    case FrameBitOffset < RsCodeCorrectionEndOffset * 8: 
                                    AsnPerPadding(RsCodeCorrectionEndOffset * 8 - FrameBitOffset) Padding;
                                }
                            }
                  }
             }
    }
}           	          	       

[DataTypeBitAlign]
struct H223AL2MParameters // SEQUENCE   
{
    UINT8 H223AL2MParametersExtension:1;
    
    struct HeaderFEC // CHOICE
    {
        UINT8 HeaderFECExtension:1;
        switch
        {
            case HeaderFECExtension:
                 _struct ExtensionChoice
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,1) ChoiceValue = ConstrainedValue? "golay24-12": "sebch16-5";             	   
            	   }
        }
    }

    AsnPerBoolean(0) alpduInterleaving;    
    //Maybe extension here        	          
}  


Table H223AL3MParametersArqTypeTable(value){
	switch(value){
		case 0: "noArq";
		case 1: "typeIArq";
		case 2: "typeIIArq";
		default: "Unknown Value";
	}
}

[DataTypeBitAlign]
struct H223AL3MParameters // SEQUENCE   
{     
    UINT8 H223AL3MParametersExtensionBit:1;
      
    struct HeaderFormat	//CHOICE
    {
        UINT8 HeaderFormatExtension:1;
        switch
        {
            case HeaderFormatExtension:
                 _struct Extension
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,1) ChoiceValue = ConstrainedValue? "golay24-12": "sebch16-7";    
                 }
        }
    }         	   
    struct CrcLength = CrcLengthDes	//CHOICE
    {
        UINT8 CrcLengthExtension:1;
        switch
        {
            case CrcLengthExtension:
                 _struct CrcLengthExtension
                 {
                     [CrcLengthDes = this.ToString]
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = CRCLengthExtensionTable(PERSmallNumber);
                     AsnPerLengthDeterminant Length;
                     //# ???
                     [CrcLengthEndoffset = FrameOffset + PERLengthValue]
                     switch{
                     	case FrameBitOffset < CrcLengthEndoffset * 8:
                     		AsnPerPadding(CrcLengthEndoffset * 8 - FrameBitOffset) Padding;
                     }
                 };
            default:
                 _struct NoneExtension
                 {
                     [CrcLengthDes = this.ToString]
                     AsnPerConstrainedInteger(0,3) ChoiceValue = CRCLengthTable(ConstrainedValue);   
                 }
        }
    }    
    AsnPerConstrainedInteger(8,32) rcpcCodeRate;
    struct ArqType	//CHOICE
    {
        UINT8 ArqTypeExtension:1;
        switch
        {
            case ArqTypeExtension:
                 _struct ArqTypeExtension
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,2) ChoiceValue = H223AL3MParametersArqTypeTable(ConstrainedValue);   
                     switch (ConstrainedValue)
             	       {
        	               case 1: H223AnnexCArqParameters typeIArq;
        	               case 2: H223AnnexCArqParameters typeIIArq;
                     }
                 }
        }        
    }  
    
    AsnPerBoolean(0) alpduInterleaving;      
    
    switch 
    {
        case H223AL3MParametersExtensionBit:
             struct H223AL3MParametersExtension
             {
             	    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
             	    UINT8 rsCodeCorrectionPresent:1;
             	    
                  switch 
                  { 
                      case  rsCodeCorrectionPresent: 
                            struct RsCodeCorrection
                            {
                                AsnPerLengthDeterminant length;  
                                [RsCodeCorrectionEndOffset = FrameOffset + PERLengthValue]
                            	  AsnPerConstrainedInteger(0, 127) rsCodeCorrection;
                            	  switch
                                {
                                    case FrameBitOffset < RsCodeCorrectionEndOffset * 8: 
                                    AsnPerPadding(RsCodeCorrectionEndOffset * 8 - FrameBitOffset) Padding;
                                }
                            }
                  }
             }
    }
}

Table H223ModeParametersTable(value){
	switch(value){
		case 0: "nonStandard";
		case 1: "al1Framed";
		case 2: "al1NotFramed";
		case 3: "al2WithoutSequenceNumbers";
		case 4: "al2WithSequenceNumbers";
		case 5: "al3";
		default: "Unknown Value";
	}
}

[DataTypeBitAlign]
struct H223ModeParameters // SEQUENCE   
{
    UINT8 H223ModeParametersExtension:1;
    
    struct AdaptationLayerType	//CHOICE
    {
        UINT8 AdaptationLayerTypeExtension:1;
        switch
        {
            case AdaptationLayerTypeExtension:
                 _struct ExtensionChoice
                 {
                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
                     AsnPerLengthDeterminant Length;
                     [ExtensionEndoffset = FrameOffset + PERLengthValue]
                     switch( PERSmallNumber )
                     {
                         case 0: H223AL1MParameters al1M;
                         case 1: H223AL2MParameters al2M;
                         case 2: H223AL3MParameters al3M;
                     }
                     switch
                     {
                         case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
                     }
                 };
            default:
                 _struct NoneExtension
                 {
                     AsnPerConstrainedInteger(0,5) ChoiceValue = H223ModeParametersTable(ConstrainedValue);             	   
                 	   switch (ConstrainedValue)
                 	   {
            	           case 0: H245NonStandardParameter nonStandard;
             	           case 5: 
             	                   struct Al3 //   SEQUENCE
             	                   {
             	                       AsnPerConstrainedInteger(0, 2) controlFieldOctets;
             	                       AsnPerConstrainedInteger(0, 16777215) sendBufferSize = FormatString("%d Bytes", ConstrainedValue);
             	                   }
             	       }
             	   }
        }
    }//End CHOICE
    AsnPerBoolean(0) segmentableFlag;
    //Maybe extension here
}

//comment out by v-leishe 8.22.06
//[DataTypeBitAlign]
//struct ModeElement //SEQUENCE
//{
//    UINT8 ModeElementExtensionBit:1;
//    
//    UINT8 h223ModeParametersPresent:1;
//     
//    struct Type  // CHOICE
//    {
//        UINT8 TypeExtension:1;
//        switch
//        {
//            case TypeExtension:
//                 _struct ExtensionChoice
//                 {
//                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
//                     AsnPerLengthDeterminant Length;
//                     [ExtensionEndoffset = FrameOffset + PERLengthValue]
//                     switch( PERSmallNumber )
//                     {
//                         case 0: H235Mode h235Mode;
//                     }
//                     switch
//                     {
//                         case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
//                     }
//                 };
//            default:
//                 _struct NoneExtension
//                 {
//                     AsnPerConstrainedInteger(0,4) ChoiceValue;             	   
//                 	   switch (ConstrainedValue)
//                 	   {
//            	           case 0: H245NonStandardParameter nonStandard;
//            	           case 1: VideoMode videoMode;
//            	           case 2: AudioMode audioMode;
//            	           case 3: DataMode dataMode;
//            	           case 4: EncryptionMode encryptionMode;
//            	       }
//            	   }
//        }
//    }// END CHOICE
//    
//    switch
//    {
//        case h223ModeParametersPresent: H223ModeParameters h223ModeParameters;
//    }
//    
//    //Below is extension
//    switch 
//    {
//        case ModeElementExtensionBit:
//             struct ModeElementExtension
//             {
//             	    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
//             	    UINT8 v76ModeParametersPresent:1;
//             	    switch
//             	    {
//             	        case PERSmallNumber >= 1: UINT8 h2250ModeParametersPresent:1;
//             	    }
//             	    switch
//             	    {
//             	        case PERSmallNumber >= 2: UINT8 genericModeParametersPresent:1;
//             	    }
//             	    
//                  switch 
//                  { 
//                      case  v76ModeParametersPresent: 
//                            struct 	V76ModeParameters
//                            {
//                                AsnPerLengthDeterminant length;  
//                                [V76ModeParameters, EndOffset = FrameOffset + PERLengthValue]
//                            	V76ModeParameters v76ModeParameters;
//                            	switch
//                                {
//                                    case FrameBitOffset < V76ModeParameters * 8: 
//                                    AsnPerPadding(V76ModeParameters * 8 - FrameBitOffset) Padding;
//                                }
//                            }
//                  }
//                  switch 
//                  { 
//                      case h2250ModeParametersPresent:
//                           struct H2250ModeParameters 
//                           {
//                                AsnPerLengthDeterminant length; 
//                                [H2250ModeParametersEndOffset = FrameOffset + PERLengthValue]
//                                H2250ModeParameters h2250ModeParameters;
//                                switch
//                                {
//                                    case FrameBitOffset < H2250ModeParametersEndOffset * 8: 
//                                    AsnPerPadding(H2250ModeParametersEndOffset * 8 - FrameBitOffset) Padding;
//                                }
//                           }
//                  }
//                  switch 
//                  { 
//                      case genericModeParametersPresent:
//                           struct GenericCapability 
//                           {
//                                AsnPerLengthDeterminant length; 
//                                [GenericCapabilityEndOffset = FrameOffset + PERLengthValue]
//                                GenericCapability genericCapability;
//                                switch
//                                {
//                                    case FrameBitOffset < GenericCapabilityEndOffset * 8: 
//                                    AsnPerPadding(GenericCapabilityEndOffset * 8 - FrameBitOffset) Padding;
//                                }
//                           }
//                  }
//             }
//             
//     }   
//}
[DataTypeBitAlign]
struct ModeElement{		//Squence
	UINT8 ModeElementExtension:1;
	UINT8 h223ModeParametersPresent:1;
		
	ModeElementType type;
	switch{
		case h223ModeParametersPresent: H223ModeParameters h223ModeParameters;
	}
	
	switch{
		case ModeElementExtension:
			_struct Extension{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
				UINT8 v76ModeParametersPresent:1;
				switch{
					case PERSmallNumber >= 1: UINT8 h2250ModeParametersPresent:1;
				}
				switch{
					case PERSmallNumber >= 2: UINT8 genericModeParametersPresent:1;
				}
				switch{
					case PERSmallNumber >= 3: UINT8 multiplexedStreamModeParametersPresent:1;
				}
				switch{
					case PERSmallNumber >= 4: UINT8 logicalChannelNumberPresent:1;
				}
				
				switch{ 
                      case  v76ModeParametersPresent: 
                            struct 	V76ModeParameters
                            {
                                AsnPerLengthDeterminant length;  
                                [V76ModeParameters, EndOffset = FrameOffset + PERLengthValue]
                            	  V76ModeParameters v76ModeParameters;
                            	  switch
                                {
                                    case FrameBitOffset < V76ModeParameters * 8: 
                                    AsnPerPadding(V76ModeParameters * 8 - FrameBitOffset) Padding;
                                }
                            }
                  }
                  switch{ 
                      case h2250ModeParametersPresent:
                           struct H2250ModeParameters 
                           {
                                AsnPerLengthDeterminant length; 
                                [H2250ModeParametersEndOffset = FrameOffset + PERLengthValue]
                                H2250ModeParameters h2250ModeParameters;
                                switch
                                {
                                    case FrameBitOffset < H2250ModeParametersEndOffset * 8: 
                                    AsnPerPadding(H2250ModeParametersEndOffset * 8 - FrameBitOffset) Padding;
                                }
                           }
                  }
                  switch{ 
                      case genericModeParametersPresent:
                           struct GenericCapability 
                           {
                                AsnPerLengthDeterminant length; 
                                [GenericCapabilityEndOffset = FrameOffset + PERLengthValue]
                                GenericCapability genericCapability;
                                switch
                                {
                                    case FrameBitOffset < GenericCapabilityEndOffset * 8: 
                                    AsnPerPadding(GenericCapabilityEndOffset * 8 - FrameBitOffset) Padding;
                                }
                           }
                  }
                  switch{
                  	case multiplexedStreamModeParametersPresent:
                  		struct MultiplexedStreamModeParameters{
	                          AsnPerLengthDeterminant length; 
	                          [MultiplexedStreamModeParametersEndOffset = FrameOffset + PERLengthValue]
	                          MultiplexedStreamModeParameters multiplexedStreamModeParameters;
	                          switch
	                          {
	                              case FrameBitOffset < MultiplexedStreamModeParametersEndOffset * 8: 
	                              AsnPerPadding(MultiplexedStreamModeParametersEndOffset * 8 - FrameBitOffset) Padding;
	                          }
                        }
                  }
                  switch{
                  	case logicalChannelNumberPresent:
                  		struct LogicalChannelNumber{
	                          AsnPerLengthDeterminant length; 
	                          [LogicalChannelNumberEndOffset = FrameOffset + PERLengthValue]
	                          LogicalChannelNumber logicalChannelNumber;
	                          switch
	                          {
	                              case FrameBitOffset < LogicalChannelNumberEndOffset * 8: 
	                              AsnPerPadding(LogicalChannelNumberEndOffset * 8 - FrameBitOffset) Padding;
	                          }                  			
                  		}	   
                  }
            }    	
    }
}

[DataTypeBitAlign]
struct MultiplexedStreamModeParameters{		//Squence
	UINT8 MultiplexedStreamModeParametersExtension:1;
	LogicalChannelNumber logicalChannelNumber;
	
	switch{
		case MultiplexedStreamModeParametersExtension:
			_struct Extension{};				
	}	
}

Table H245ModeElementTypeExtensionTable( value )
{
    switch( value )
    {
        case 0: "h235Mode";
        case 1: "multiplexedStreamMode";
        case 2: "redundancyEncodingDTMode";
        case 3: "multiplePayloadStreamMode";
        case 4: "depFecMode";
        case 5: "fecMode";
        default: FormatString("Undefined type(%d)", value);
    }
}

Table H245ModeElementTypeTable( value )
{
    switch( value )
    {
        case 0: "nonStandard";
        case 1: "videoMode";
        case 2: "audioMode";
        case 3: "dataMode";
        case 4: "encryptionMode";
        default: FormatString("Undefined type(%d)", value);
    }
}

[DataTypeBitAlign]
struct ModeElementType{		//Choice
	UINT8 ModeElementTypeExtension:1;
	switch{
		case ModeElementTypeExtension:
			_struct Extension{				
                AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245ModeElementTypeExtensionTable(PERSmallNumber);
                AsnPerLengthDeterminant Length;
                [ModeElementTypeExtensionEndoffset = FrameOffset + PERLengthValue]
                switch( PERSmallNumber )
                {
                    case 0: H235Mode h235Mode;
                    case 1: MultiplexedStreamParameter multiplexedStreamParameter;
                    case 2: RedundancyEncodingDTMode redundancyEncodingDTMode;
                    case 3: MultiplePayloadStreamMode multiplePayloadStreamMode;
                    case 4: DepFECMode depFECMode;
                    case 5: FECMode fecMode;
                }
                switch
                {
                    case FrameBitOffset < RequestMessageEndoffset * 8: AsnPerPadding(RequestMessageEndoffset * 8 - FrameBitOffset) padding;
                }
            }
        default:
        	_struct nonExtension{
        		AsnPerConstrainedInteger(0,4) ChoiceValue = H245ModeElementTypeTable(ConstrainedValue);
        		switch(ConstrainedValue){
        			case 0: H245NonStandardParameter nonStandard;
        			case 1: VideoMode videoMode;
        			case 2: AudioMode audioMode;
        			case 3: DataMode dataMode;
        			case 4: EncryptionMode encryptionMode;
        		}
        	}
    }
}
                
                
[DataTypeBitAlign]
struct RoundTripDelayRequest // SEQUENCE   
{
    UINT8 RoundTripDelayRequestExtension:1;
    
    AsnPerConstrainedInteger(0, 255) sequenceNumber;
    //Maybe extension here
}

Table H245MaintenanceLoopTypeTable( type )
{
    switch( type )
    {
        case 0: "system Loop";
        case 1: "media Loop";
        case 2: "logical Channel Loop";  
        default: FormatString("%d(0x%X)",type,type);
    }
}

[DataTypeBitAlign]
struct MaintenanceLoopRequest //SEQUENCE
{
    UINT8 MaintenanceLoopRequestExtension:1;
    
    struct Type = MaintenanceLoopRequestType   // CHOICE  
    {
	      UINT8 TypeExtension:1;
        switch
        {
            case TypeExtension:
                 _struct ExtensionChoice
                 {
                 };
            default:
                 _struct NoneExtension
                 {
                     [post.MaintenanceLoopRequestType = H245MaintenanceLoopTypeTable( ConstrainedValue )]
                     AsnPerConstrainedInteger(0,2) ChoiceValue;             	   
                 	   switch (ConstrainedValue)
                 	   {
            	           case 1: AsnPerConstrainedInteger(1, 65535) mediaLoop;
            	           case 2: AsnPerConstrainedInteger(1, 65535) logicalChannelLoop;
            	       }
            	   }
        }
    }
    //Maybe extension here
}


[DataTypeBitAlign]
struct MultiplexEntrySend // SEQUENCE   
{
    UINT8 MultiplexEntrySendExtension:1;
    
    AsnPerConstrainedInteger(0, 255) sequenceNumber;
    struct MultiplexEntryDescriptor
    {
        [post.MultiplexEntryDescriptorCount = ConstrainedValue]
        AsnPerConstrainedInteger(1, 15) size;
        MultiplexEntryDescriptor multiplexEntryDescriptors[MultiplexEntryDescriptorCount];  
    }
    //Maybe extension here
}

[DataTypeBitAlign]
struct RequestMultiplexEntry    // SEQUENCE   
{
    UINT8 RequestMultiplexEntryExtension:1;
    
    struct MultiplexTableEntryNumberSet
    {
        [post.MultiplexTableEntryNumberCount = ConstrainedValue]
        AsnPerConstrainedInteger(1, 15) size;
        while [ MultiplexTableEntryNumberCount > 0 ]
        {
            [ MultiplexTableEntryNumberCount = MultiplexTableEntryNumberCount - 1 ]
            AsnPerConstrainedInteger(1, 15) MultiplexTableEntryNumber;
        }
    }
    //Maybe extension here
}

[DataTypeBitAlign]
struct ModeDescription
{
    [post.ModeElementCount = ConstrainedValue]
    AsnPerConstrainedInteger(1, 256) size;   
    ModeElement modeDescription[ModeElementCount];
}

[DataTypeBitAlign]
struct RequestMode    // SEQUENCE   
{
    UINT8 RequestModeExtension:1;
    
    AsnPerConstrainedInteger(0, 255) sequenceNumber;
    struct MultiplexEntryDescriptor
    {
        [post.RequestedModesCount = ConstrainedValue]
        AsnPerConstrainedInteger(1, 256) size;
        while [ RequestedModesCount > 0 ]
        {
            [ RequestedModesCount = RequestedModesCount - 1 ]
            ModeDescription requestedMode;  
        }
    }
    //Maybe extension here
}

[DataTypeBitAlign]
struct RequestMessage = H245RequestMessageDescription  //CHOICE
{  
    UINT8 ContentExtension:1;
    switch
    {
        case ContentExtension:
             _struct ExtensionChoice
             {
             	   [H245RequestMessageDescription = this.ToString]
                 AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue=H245RequestMessageExtensionTypeTable( PERSmallNumber );
                 AsnPerLengthDeterminant Length;
                 [RequestMessageEndoffset = FrameOffset + PERLengthValue]
                 switch( PERSmallNumber )
                 {
                     case 0: CommunicationModeRequest communicationModeRequest;
                     case 1: ConferenceRequest conferenceRequest;
                     case 2: MultilinkRequest multilinkRequest;
                     case 3: LogicalChannelRateRequest logicalChannelRateRequest;
                     case 4: GenericMessage genericRequest;
                 }
                 switch
                 {
                     case FrameBitOffset < RequestMessageEndoffset * 8: AsnPerPadding(RequestMessageEndoffset * 8 - FrameBitOffset) padding;
                 }
             };
        default:
             _struct NoneExtension
             {
             	   [H245RequestMessageDescription = this.ToString]
                 AsnPerConstrainedInteger(0,10) ChoiceValue = H245RequestMessageTypeTable( ConstrainedValue );
             	   switch (ConstrainedValue)
             	   {
        	           case 0: H245NonStandardMessage nonStandard;
        	           case 1: MasterSlaveDetermination masterSlaveDetermination;
        	           case 2: TerminalCapabilitySet terminalCapabilitySet;
        	           case 3: OpenLogicalChannel openLogicalChannel;
        	           case 4: CloseLogicalChannel closeLogicalChannel;
        	           case 5: RequestChannelClose requestChannelClose;
        	           case 6: MultiplexEntrySend multiplexEntrySend;
        	           case 7: RequestMultiplexEntry requestMultiplexEntry;
        	           case 8: RequestMode requestMode;
        	           case 9: RoundTripDelayRequest roundTripDelayRequest;
        	           case 10: MaintenanceLoopRequest maintenanceLoopRequest;
        	       }
             };        
    }                 
}

Table H245CommandMessageTypeTable( value )
{
    switch( value )
    {
        case 0: "H245NonStandardMessage";
        case 1: "MaintenanceLoopOffCommand";
        case 2: "SendTerminalCapabilitySet";
        case 3: "EncryptionCommand";    
        case 4: "FlowControlCommand";
        case 5: "EndSessionCommand";
        case 6: "MiscellaneousCommand";
        default: "Unknown";
     }
} 
    
Table H245CommandMessageExtensionTypeTable( value )
{
    switch( value )
    {
        case 0: "CommunicationModeCommand";
        case 1: "ConferenceCommand";
        case 2: "H223MultiplexReconfiguration";
        case 3: "NewATMVCCommand";
        case 4: "MobileMultilinkReconfigurationCommand";
        case 5: "GenericMessage";
        default: "Unknown";
    }
}    

[DataTypeBitAlign]
struct MobileMultilinkReconfigurationCommand
{
    UINT8 MobileMultilinkReconfigurationCommandExtensionBit:1;
    AsnPerConstrainedInteger(1,255) sampleSize;
    AsnPerConstrainedInteger(1,255) samplesPerFrame;
    struct status
    {
        UINT8 statusExtensionBit:1;
        switch
        {
            case statusExtensionBit:
            _struct ExtensionChoice
            {
            }
            default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,1) ChoiceValue = FormatString("%s%s(%d)", ConstrainedValue == 0 ? "synchronized" : "",
                                                                                     ConstrainedValue == 1 ? "reconfiguration" : "",
                                                                                     ConstrainedValue);
            }
        }
    };
    //switch
    //{
    //    case MobileMultilinkReconfigurationCommandExtensionBit
    //}
}

[DataTypeBitAlign]
struct CommandMessage = H245CommandMessageDescription
{
    UINT8 CommandMessageExtension:1;
    switch
    {
        case CommandMessageExtension:
        _struct ExtensionChoice
        {
            [H245CommandMessageDescription = this.ToString]
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue=H245CommandMessageExtensionTypeTable( PERSmallNumber );
            AsnPerLengthDeterminant Length;
            [CommandMessageEndOffset = FrameOffset + PERLengthValue]
            switch( PERSmallNumber )
            {
                case 0: CommunicationModeCommand communicationModeCommand;
                case 1: ConferenceCommand  conferenceCommand;
                case 2: H223MultiplexReconfiguration h223MultiplexReconfiguration;
                case 3: NewATMVCCommand newATMVCCommand;
                case 4: MobileMultilinkReconfigurationCommand mobileMultilinkReconfigurationCommand;
                case 5: GenericMessage genericCommand;
            }
            switch
            {
                case FrameBitOffset < CommandMessageEndOffset * 8: AsnPerPadding(CommandMessageEndOffset * 8 - FrameBitOffset) Padding;
            }
        };
        default:
        _struct NoneExtension
        {
            [H245CommandMessageDescription = this.ToString]
            AsnPerConstrainedInteger(0,6) ChoiceValue=H245CommandMessageTypeTable( ConstrainedValue );
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardMessage nonStandard;
                case 1: MaintenanceLoopOffCommand maintenanceLoopOffCommand;
                case 2: SendTerminalCapabilitySet sendTerminalCapabilitySet;
                case 3: EncryptionCommand encryptionCommand;
                case 4: FlowControlCommand flowControlCommand;
                case 5: EndSessionCommand endSessionCommand;
                case 6: MiscellaneousCommand miscellaneousCommand;
            }
        };
    }
}

[DataTypeBitAlign]
struct MaintenanceLoopOffCommand
{
    UINT8 MaintenanceLoopOffCommandExtension:1;
    /*
    switch
    {
        //case MaintenanceLoopOffCommand_Extension:
        //??? there may be some extension values
    }
    */
}

Table SendTerminalCapabilitySetTable(value){
	switch(value){
		case 0: "Specific Request";
		case 1: "Generic Request";
		default: "Unknown Request";
	}
}

[DataTypeBitAlign]
struct SendTerminalCapabilitySet
{
    UINT8 SendTerminalCapabilitySetExtension:1;
    switch
    {
        case SendTerminalCapabilitySetExtension:
        _struct Extension{};
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,1) ChoiceValue = SendTerminalCapabilitySetTable(ConstrainedValue);
            switch( ConstrainedValue )
            {
                case 0: struct specificRequest
                        {
                            UINT8 specificRequestExtension:1;
                            UINT8 capabilityTableEntryNumbersPresent:1;
                            UINT8 capabilityDescriptorNumbersPresent:1;
                            AsnPerBoolean(0) multiplexCapability;
                            switch
                            {
                                case capabilityTableEntryNumbersPresent:
                                     struct capabilityTableEntryNumbers
                                     {
                                         AsnPerConstrainedInteger(1,65535) Size;
                                         UINT16 capabilityTableEntryNumber[ConstrainedValue];
                                     };
                            }
                            switch
                            {
                                case capabilityDescriptorNumbersPresent:
                                     struct capabilityDescriptorNumbers
                                     {
                                         AsnPerConstrainedInteger(1,256) Size;
                                         UINT8 capabilityDescriptorNumber[ConstrainedValue]; 
                                     };
                            }
                        };
            }
        };
    }
}

Table EncryptionCommandTable(value){
	switch(value){
		case 0: "Encryption SE";
		case 1: "Encryption IV Request";
		case 2: "Encryption AlgorithmID";
		default: "Unknown Value";
	}
}


[DataTypeBitAlign]
struct EncryptionCommand
{
    UINT8 EncryptionCommandExtension:1;
    switch
    {
        case EncryptionCommandExtension:
        _struct Extension{};
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,2) ChoiceValue = EncryptionCommandTable(ConstrainedValue);
            switch( ConstrainedValue )
            {
                case 0: AsnPerOctetString(-1,-1) encryptionSE;
                case 2: struct encryptionAlgorithmID
                        {
                            AsnPerConstrainedInteger(0,255) SequenceNumber;
                            H245NonStandardParameter associatedAlgorithm;
                        };
            }
        };
    }
}

Table FlowControlCommandScopeTable(value){
	switch(value){
		case 0: "Logical Channel Number";
		case 1: "Resource ID";
		case 2: "Whole Multiplex";
		default: "Unknown Value";
	}
}
Table FlowControlCommandRestrictionTable(value){
	switch(value){
		case 0: "Maximum Bit Rate";
		case 1: "No Restriction";
		default: "Unknown Value";
	}
}


[DataTypeBitAlign]
struct FlowControlCommand
{
    UINT8 FlowControlCommandExtension:1;
    struct scope
    {
        AsnPerConstrainedInteger(0,2) ChoiceValue = FlowControlCommandScopeTable(ConstrainedValue);
        switch( ConstrainedValue )
        {
            case 0: AsnPerConstrainedInteger(1,65535) logicalChannelNumber;
            case 1: AsnPerConstrainedInteger(0,65535) resourceID;            
        }
    };
    struct restriction
    {
        AsnPerConstrainedInteger(0,1) ChoiceValue = FlowControlCommandRestrictionTable(ConstrainedValue);
        switch( ConstrainedValue )
        {
            case 0: AsnPerConstrainedInteger(0,16777215) maximumBitRate = FormatString("%d bit/s", ConstrainedValue*100);
        }
    };
    /*
    switch
    {
        //case FlowControlCommand_Extension:
        //??? there may be some extension values
    }
    */
}

Table H245EndSessionCommandChoiceTable( value )
{
    switch( value )
    {
        case 0: "nonStandard";
        case 1: "disconnect";
        case 2: "gstnOptions";
        default: FormatString("%d", value);
    }
}

Table H245EndSessionCommandExtensionChoiceTable( value )
{
    switch( value )
    {
        case 0: "isdnOptions";
        default: FormatString("%d", value );
    }
}

Table H245IsdnOptionTable( value )
{
    switch( value )
    {
        case 0: "telephonyMode";
        case 1: "v140";
        case 2: "terminalOnHold";
        default: FormatString("%d", value);
    }
}

Table H245GstnOptionTable( value )
{
    switch( value )
    {
        case 0: "telephonyMode";
        case 1: "v8bis";
        case 2: "v34DSVD";
        case 3: "v34DuplexFAX";
        case 4: "v34H324";
        default: FormatString("%d", value);
    }
}

[DataTypeBitAlign]
struct EndSessionCommand = H245EndSessionCommandDescription
{
    UINT8 EndSessionCommandExtension:1;
    switch
    {
        case EndSessionCommandExtension:
        _struct ExtensionChoice
        {
            [H245EndSessionCommandDescription = this.ToString]
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245EndSessionCommandExtensionChoiceTable( PERSmallNumber );
            [post.EndSessionCommandExtensionEndOffset = FrameOffset + PERLengthValue]
            AsnPerLengthDeterminant Length;
            switch( PERSmallNumber )
            {
                case 0: struct isdnOptions
                        {
                            UINT8 isdnOptionsExtension:1;
                            switch
                            {
                                case isdnOptionsExtension:
                            	_struct Extension{};
                                default:
                                _struct NoneExtension
                                {
                                    AsnPerConstrainedInteger(0,2) ChoiceValue = H245IsdnOptionTable( ConstrainedValue );
                                };
                            }
                        };
				case 1: struct genericInformation
                        {
							[Post.PER_ArraySize = PERLengthValue]
							AsnPerLengthDeterminant Size;
							GenericInformation genericInformation[PER_ArraySize];
                        };
            }
            switch
            {
                case FrameBitOffset < EndSessionCommandExtensionEndOffset * 8:
                AsnPerPadding( EndSessionCommandExtensionEndOffset * 8 - FrameBitOffset ) Padding;
            }
        };
        default:
        _struct NoneExtension
        {
            [H245EndSessionCommandDescription = this.ToString]
            AsnPerConstrainedInteger(0,2) ChoiceValue = H245EndSessionCommandChoiceTable( ConstrainedValue );
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardParameter nonStandard;
                case 2: struct gstnOptions
                        {
                            UINT8 gstnOptionsExtension:1;
                            switch
                            {
                                case gstnOptionsExtension:
                                _struct Extension{};
                                default:
                                _struct NoneExtension
                                {
                                    AsnPerConstrainedInteger(0,4) ChoiceValue;
                                };
                            }
                        };
            }
        };
    }
}

Table H245MiscellaneousCommandChoiceTable( value )
{
    switch( value )
    {
        case 0: "equaliseDelay";
        case 1: "zeroDelay";
        case 2: "multipointModeCommand";
        case 3: "cancelMultipointModeCommand";
        case 4: "videoFreezePicture";
        case 5: "videoFastUpdatePicture";
        case 6: "videoFastUpdateGOB";
        case 7: "videoTemporalSpatialTradeOff";
        case 8: "videoSendSyncEveryGOB";
        case 9: "videoSendSyncEveryGOBCancel";
        default: FormatString("%d", value);
    }
}

Table H245MiscellaneousCommandExtensionChoiceTable( value )
{
    switch( value )
    {
        case 0: "videoFastUpdateMB";
        case 1: "maxH223MUXPDUsize";
        case 2: "encryptionUpdate";
        case 3: "encryptionUpdateRequest";
        case 4: "switchReceiveMediaOff";
        case 5: "switchReceiveMediaOn";
        case 6: "progressiveRefinementStart";
        case 7: "progressiveRefinementAbortOne";
        case 8: "progressiveRefinementAbortContinuous";
        case 9: "videoBadMBs";
        case 10: "lostPicture";
        case 11: "lostPartialPicture";
        case 12: "recoveryReferencePicture";
        case 13: "encryptionUpdateCommand";
        case 14: "encryptionUpdateAck";
        default: FormatString("%d", value);
    }
}

[DataTypeBitAlign]
struct PictureReference
{
    UINT8 PictureReferenceExtension:1;
    switch
    {
        case PictureReferenceExtension:
        _struct ExtensionChoice
        {
        };
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,1) ChoiceValue = FormatString("%s%s", 
                                                                     ConstrainedValue == 0 ? "pictureNumber" : "", 
                                                                     ConstrainedValue == 1 ? "longTermPictureIndex" : "");
            switch( ConstrainedValue )
            {
                case 0: AsnPerConstrainedInteger(0,1023) pictureNumber;
                case 1: AsnPerConstrainedInteger(0,255) longTermPictureIndex;
            }
        };
    }
}

[DataTypeBitAlign]
struct MultiplePayloadStream
{
    UINT8 MultiplePayloadStreamExtensionBit:1;
    [post.SizeOfMultiplePayloadStreamElement = PERLengthValue]
    AsnPerLengthDeterminant Size;
    while [ SizeOfMultiplePayloadStreamElement > 0 ]
    {
        [ SizeOfMultiplePayloadStreamElement = SizeOfMultiplePayloadStreamElement - 1 ]
        MultiplePayloadStreamElement element;
    }
}

[DataTypeBitAlign]
struct MultiplePayloadStreamElement
{
    UINT8 MultiplePayloadStreamElementExtension:1;
    UINT8 payloadTypePresent:1;
    DataType dataType;
    switch
    {
        case payloadTypePresent:
        AsnPerConstrainedInteger(0,127) payloadType;
    }
}

Table progressiveRefinementStartrepeatCountTable( type )
{
    switch( type )
    {
        case 0: "doOneProgression";
        case 1: "doContinuousProgressions";
        case 2: "doOneIndependentProgression";
        case 3: "doContinuousIndependentProgressions";
        default: FormatString("Undefined repeat count(%d)", type);
    }
}

[DataTypeBitAlign]
struct MiscellaneousCommand = H245MiscellaneousCommandDescription
{
    UINT8 MiscellaneousCommandExtensionBit:1;
    AsnPerConstrainedInteger(1, 65535) logicalChannelNumber;
    struct type
    {
        UINT8 typeExtension:1;
        switch
        {
            case typeExtension:
            _struct ExtensionChoice
            {
                [H245MiscellaneousCommandDescription = this.ToString]
                AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245MiscellaneousCommandExtensionChoiceTable( PERSmallNumber );
                AsnPerLengthDeterminant Length;
                [MiscellaneousCommandExtensionEndOffset = FrameOffset + PERLengthValue]
                switch( PERSmallNumber )
                {
                    case 0: struct videoFastUpdateMB
                            {
                                UINT8 videoFastUpdateMBExtension:1;
                                UINT8 firstGOBPresent:1;
                                UINT8 firstMBPresent:1;
                                switch
                                {
                                    case firstGOBPresent: AsnPerConstrainedInteger(0,255) firstGOB;
                                }
                                switch
                                {
                                    case firstMBPresent: AsnPerConstrainedInteger(1,8192) firstMB;
                                }
                                AsnPerConstrainedInteger(1,8192) numberOfMBs;
                                //switch
                                //{
                                //    case videoFastUpdateMB_Extension:
                                //    ???there may be some extension values
                                //}
                            };
                    case 1: AsnPerConstrainedInteger(1,65535) maxH223MUXPDUsize = FormatString("%d octet%s", ConstrainedValue, ConstrainedValue > 1 ? "s" : "");
                    case 2: EncryptionSync encryptionUpdate;
                    case 3: EncryptionUpdateRequest encryptionUpdateRequest;
                    case 6: struct progressiveRefinementStart
                            {
                                UINT8 progressiveRefinementStartExtension:1;
                                struct repeatCount
                                {
                                    UINT8 repeatCountExtension:1;
                                    switch
                                    {
                                        //case repeatCount_Extension:
                                        default:
                                        _struct NoneExtension
                                        {
                                            AsnPerConstrainedInteger(0,3) ChoiceValue = progressiveRefinementStartrepeatCountTable( ConstrainedValue );
                                        };
                                    }
                                };
                                //switch
                                //{
                                //    case progressiveRefinementStart_Extension:
                                //}
                            };
                    case 9: struct videoBadMBs
                            {
                                UINT8 videoBadMBsExtensionBit:1;
                                AsnPerConstrainedInteger(1,9216) firstMB;
                                AsnPerConstrainedInteger(1,9216) numberOfMBs;
                                AsnPerConstrainedInteger(0,1023) temporalReference;
                            };
                    case 10: struct lostPicture
                             {
                                 [post.PictureReferenceSize = PERLengthValue]
                                 AsnPerLengthDeterminant Size;
                                 while [ PictureReferenceSize > 0 ]
                                 {
                                     [PictureReferenceSize = PictureReferenceSize - 1]
                                     PictureReference pictureReference;
                                 }
                             };
                    case 11: struct lostPartialPicture
                             {
                                 UINT8 lostPartialPictureExtensionBit:1;
                                 PictureReference pictureReference;
                                 AsnPerConstrainedInteger(1,9216) firstMB;
                                 AsnPerConstrainedInteger(1,9216) numberOfMBs;
                             };
                    case 12: struct recoveryReferencePicture
                             {
                                 [post.PictureReferenceSize = PERLengthValue]
                                 AsnPerLengthDeterminant Size;
                                 while [ PictureReferenceSize > 0 ]
                                 {
                                     [PictureReferenceSize = PictureReferenceSize - 1]
                                     PictureReference pictureReference;
                                 }
                             }
                    case 13: struct encryptionUpdateCommand
                             {
                                 UINT8 encryptionUpdateCommandExtensionBit:1;
                                 UINT8 multiplePayloadStreamPresent:1;
                                 EncryptionSync encryptionSync;
                                 switch
                                 {
                                     case multiplePayloadStreamPresent: MultiplePayloadStream multiplePayloadStream;
                                 }
                             };
                    case 14: struct encryptionUpdateAck
                             {
                                 UINT8 encryptionUpdateAckExtension:1;
                                 AsnPerConstrainedInteger(0,255) synchFlag;
                             };
                             
                }
                switch
                {
                    case FrameBitOffset < MiscellaneousCommandExtensionEndOffset * 8:
                    AsnPerPadding( MiscellaneousCommandExtensionEndOffset * 8 - FrameBitOffset ) Padding;
                }
            };
            default:
            _struct NoneExtension
            {
                [H245MiscellaneousCommandDescription = this.ToString]
                AsnPerConstrainedInteger(0,9) ChoiceValue = H245MiscellaneousCommandChoiceTable( ConstrainedValue );
                switch( ConstrainedValue )
                {
                    case 6: struct videoFastUpdateGOB
                            {
                                AsnPerConstrainedInteger(0,17) firstGOB;
                                AsnPerConstrainedInteger(1,18) numberOfGOBs;
                            };
                    case 7: AsnPerConstrainedInteger(0,31) videoTemporalSpatialTradeOff;
                }
            };
        }
    };
    switch
    {
        case MiscellaneousCommandExtensionBit:
        struct MiscellaneousCommandExtension
        {
            AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
            UINT8 directionPresent:1;
            switch
            {
                case directionPresent:
                struct direction
                {
                    AsnPerLengthDeterminant Length;
                    [EncryptionUpdateDirectionEndOffset = FrameOffset + PERLengthValue]
                    EncryptionUpdateDirection direction;
                    switch
                    {
                        case FrameBitOffset < EncryptionUpdateDirectionEndOffset * 8:
                        AsnPerPadding( EncryptionUpdateDirectionEndOffset * 8 - FrameBitOffset ) Padding;
                    }
                };
            }
        };
    }
}

Table H245EncryptionUpdateDirectionTypeTable( type )
{
    switch( type )
    {
        case 0: "masterToSlave";
        case 1: "slaveToMaster";
        default: FormatString("Undefined type(%d)", type);
    }
}

[DataTypeBitAlign]
struct EncryptionUpdateDirection
{
    UINT8 EncryptionUpdateDirectionExtension:1;
    switch
    {
        case EncryptionUpdateDirectionExtension:
        _struct ExtensionChoice
        {
        };
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,1) ChoiceValue = H245EncryptionUpdateDirectionTypeTable( ConstrainedValue );
        }
    }
}

[DataTypeBitAlign]
struct EncryptionSync
{
    UINT8 EncryptionSyncExtensionBit:1;
    UINT8 nonStandardPresent:1;
    UINT8 escrowentryPresent:1;
    switch
    {
        case nonStandardPresent: H245NonStandardParameter nonStandard;
    }
    
    AsnPerConstrainedInteger(0,255) synchFlag;
    
    AsnPerOctetString(1,65535) h235Key;
    
    switch
    {
        case escrowentryPresent:
             struct escrowentry
             {
                 [post.escrowentrySize = ConstrainedValue]
                 AsnPerConstrainedInteger(1, 256) Size;
                 while [ escrowentrySize > 0 ]
                 {
                     [ escrowentrySize = escrowentrySize - 1 ]
                     EscrowData escroData;
                 }
             };
    }
    
    switch{
    	case EncryptionSyncExtensionBit:
    		_struct Extension{
    			AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    			UINT8 genericParameterPresent:1;
    			switch{
    				case genericParameterPresent:
    					_struct genericParameterPresent{
    						AsnPerLengthDeterminant Length;
    						[genericParameterEndoffset = FrameOffset + PERLengthValue]
    						GenericParameter genericParameter;
    						switch{
    							case FrameBitOffset < genericParameterEndoffset * 8:
    								AsnPerPadding(genericParameterEndoffset * 8 - FrameBitOffset) Padding;
    						}
    					}
    			}
    		}
    	}
}

[DataTypeBitAlign]
struct EscrowData
{
    UINT8 EscrowDataExtension:1;
    AsnPerObjectIdentifier escrowID;
    AsnPerBitString(1,65535) escrowValue;
    //switch
    //{
    //    case EscrowData_Extension:
    //}
}

[DataTypeBitAlign]
struct EncryptionUpdateRequest
{
    UINT8 EncryptionUpdateRequestExtensionBit:1;
    UINT8 keyProtectionMethodPresent:1;
    switch
    {
        case keyProtectionMethodPresent: KeyProtectionMethod keyProtectionMethod;
    }
    switch
    {
        case EncryptionUpdateRequestExtensionBit:
        _struct EncryptionUpdateRequestExtension
        {
            AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
            UINT8 synchFlagPresent:1;
            switch
            {
                case synchFlagPresent:
                _struct synchFlag
                {
                    AsnPerLengthDeterminant Length;
                    [synchFlagEndOffset = FrameOffset + PERLengthValue]
                    AsnPerConstrainedInteger(0,255) synchFlag;
                    switch
                    {
                        case FrameBitOffset < synchFlagEndOffset * 8:
                        AsnPerPadding( synchFlagEndOffset * 8 - FrameBitOffset ) Padding;
                    }
                };
            }
        };
    }
}

[DataTypeBitAlign]
struct KeyProtectionMethod
{
    UINT8 KeyProtectionMethodExtension:1;
    AsnPerBoolean(0) secureChannel;
    AsnPerBoolean(0) sharedSecret;
    AsnPerBoolean(0) certProtectedKey;
    //switch
    //{
    //    case KeyProtectionMethod_Extension:
    //}
}

[DataTypeBitAlign]
struct CommunicationModeCommand
{
    UINT8 CommunicationModeCommandExtension:1;
    [post.communicationModeTableSize = ConstrainedValue]
    AsnPerConstrainedInteger(1,256) Size;
    while [ communicationModeTableSize > 0 ]
    {
        [ communicationModeTableSize = communicationModeTableSize - 1 ]
        CommunicationModeTableEntry communicationModeTable;
    }
}

[DataTypeBitAlign]
struct ConferenceCommand
{
    UINT8 ConferenceCommandExtension:1;
    switch
    {
        case ConferenceCommandExtension:
        _struct ExtensionChoice
        {
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
            AsnPerLengthDeterminant Length;
            switch( PERSmallNUmber )
            {
                case 0: SubstituteConferenceIDCommand substituteConferenceIDCommand;
            }
        };
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,6) ChoiceValue;
            switch( ConstrainedValue )
            {
                case 0: AsnPerConstrainedInteger(1, 65535) broadcastMyLogicalChannel;
                case 1: AsnPerConstrainedInteger(1, 65535) cancelBroadcastMyLogicalChannel;
                case 2: TerminalLabel makeTerminalBroadcaster;
                case 4: TerminalLabel sendThisSource;
            }
        };
    }
}

[DataTypeBitAlign]
struct SubstituteConferenceIDCommand
{
    UINT8 SubstituteConferenceIDCommandExtension:1;
    AsnPerGUID conferenceIdentifier;
    //switch
    //{
    //    case SubstituteConferenceIDCommand_Extension:
    //}
}

Table H245H223MultiplexReconfigurationTable( value )
{
    switch( value )
    {
        case 0: "h223ModeChange";
        case 1: "h223AnnexADoubleFlag";
        default: FormatString("Undefined value(%d)", value);
    }
}

Table H245H223MultiplexReconfigurationh223ModeChangeTable( value )
{
    switch( value )
    {
        case 0: "toLevel0";
        case 1: "toLevel1";
        case 2: "toLevel2";
        case 3: "toLevel2withOptionalHeader";
        default: FormatString("Undefined H323 Mode Change(%d)", value );
    }
}

Table H245H223MultiplexReconfigurationh223AnnexADoubleFlagTable( value )
{
    switch( value )
    {
        case 0: "start";
        case 1: "stop";
        default: FormatString("Undefined h223 AnnexA Double Flag(%d)", value);
    }
}

[DataTypeBitAlign]
struct H223MultiplexReconfiguration
{
    UINT8 H223MultiplexReconfigurationExtension:1;
    switch
    {
       //case H223MultiplexReconfiguration_Extension:
        default:
        _struct NoneExtension
        {
            AsnPerConstrainedInteger(0,1) ChoiceValue = H245H223MultiplexReconfigurationTable( ConstrainedValue );
            switch( ConstrainedValue )
            {
                case 0: struct h223ModeChange
                        {
                            UINT8 h223ModeChangeExtension:1;
                            switch
                            {
                                //case h223ModeChange_Extension:
                                default:
                                _struct NoneExtension
                                {
                                    AsnPerConstrainedInteger(0,3) ChoiceValue = H245H223MultiplexReconfigurationh223ModeChangeTable( ConstrainedValue );
                                };
                            }
                        };
                case 1: struct h223AnnexADoubleFlag
                        {
                            UINT8 h223AnnexADoubleFlagExtension:1;
                            switch
                            {
                                //case h223AnnexADoubleFlag_Extension:
                                default:
                                _struct NoneExtension
                                {
                                    AsnPerConstrainedInteger(0,1) ChoiceValue = H245H223MultiplexReconfigurationh223AnnexADoubleFlagTable( ConstrainedValue );
                                };
                            }
                        };
            }
        }
    }
}

Table H245NewATMVCCommandclockRecoveryTable( value )
{
    switch( value )
    {
        case 0: "nullClockRecovery";
        case 1: "srtsClockRecovery";
        case 2: "adaptiveClockRecovery";
        default: FormatString("Undefined clock recovery(%d)", value);
    }
}

Table H245NewATMVCCommanderrorCorrectionTable( value )
{
    switch( value )
    {
        case 0: "nullErrorCorrection";
        case 1: "longInterleaver";
        case 2: "shortInterleaver";
        case 3: "errorCorrectionOnly";
        default: FormatString("Undefined error correction(%d)", value);
    }
}

Table H245NewATMVCCommandmultiplexTable( value )
{
    switch( value )
    {
        case 0: "noMultiplex";
        case 1: "transportStream";
        case 2: "programStream";
        default: FormatString("%d", value);
    }
}

[DataTypeBitAlign]
struct NewATMVCCommand
{
    UINT8 NewATMVCCommandExtension:1;
    AsnPerConstrainedInteger(0,65535) resourceID;
    AsnPerConstrainedInteger(1,65535) bitRate = FormatString("%d kbit/s", ConstrainedValue*64);
    AsnPerBoolean(0) bitRateLockedToPCRClock;
    AsnPerBoolean(0) bitRateLockedToNetworkClock;
    struct aal
    {
        UINT8 aalExtension:1;
        switch
        {
            //case aal_Extension:
            default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,1) ChoiceValue;
                switch( ConstrainedValue )
                {
                    case 0: struct aal1
                            {
                                UINT8 aal1Extension:1;
                                struct clockRecovery
                                {
                                    UINT8 clockRecoveryExtension:1;
                                    switch
                                    {
                                        //case clockRecovery_Extension:
                                        default:
                                        _struct NoneExtension
                                        {
                                            AsnPerConstrainedInteger(0,2) ChoiceValue = H245NewATMVCCommandclockRecoveryTable( ConstrainedValue );
                                        };
                                    }
                                };
                                struct errorCorrection
                                {
                                    UINT8 errorCorrectionExtension:1;
                                    switch
                                    {
                                        //case errorCorrection_Extension:
                                        default:
                                        _struct NoneExtension
                                        {
                                            AsnPerConstrainedInteger(0,3) ChoiceValue = H245NewATMVCCommanderrorCorrectionTable( ConstrainedValue );
                                        };
                                    }
                                };
                                AsnPerBoolean(0) structuredDataTransfer;
                                AsnPerBoolean(0) partiallyFilledCells;
                                //switch
                                //{
                                //    case aal1_Extension:
                                //}
                            };
                    case 1: struct aal5
                            {
                                UINT8 aal5Extension:1;
                                AsnPerConstrainedInteger(0,65535) forwardMaximumSDUSize;
                                AsnPerConstrainedInteger(0,65535) backwardMaximumSDUSize;
                                //switch
                                //{
                                //    case aal5_Extension:
                                //}
                            };
                }
            };
        }
    };
    struct multiplex
    {
        UINT8 multiplexExtension:1;
        switch
        {
            //case multiplex_Extension:
            default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,2) ChoiceValue = H245NewATMVCCommandmultiplexTable( ConstrainedValue );
            };
        }
    };
    
    struct reverseParameters
    {
        UINT8 reverseParametersExtension:1;
        AsnPerConstrainedInteger(1,65535) bitRate = FormatString("%d kbit/s", ConstrainedValue*64);
        AsnPerBoolean(0) bitRateLockedToPCRClock;
        AsnPerBoolean(0) bitRateLockedToNetworkClock;
        struct multiplex
        {
            UINT8 multiplexExtension:1;
            switch
            {
                //case multiplex_Extension:
                default:
                _struct NoneExtension
                {
                    AsnPerConstrainedInteger(0,2) ChoiceValue = H245NewATMVCCommandmultiplexTable( ConstrainedValue );
                };
            }
        };
    }
    
    //switch
    //{
    ////
    //}
}

Table H245IndicationMessageTable( type )
{
    switch( type )
    {
        case 0: "H245NonStandardMessage";
        case 1: "FunctionNotUnderstood";
        case 2: "MasterSlaveDeterminationRelease";
        case 3: "TerminalCapabilitySetRelease";
        case 4: "OpenLogicalChannelConfirm";
        case 5: "RequestChannelCloseRelease";
        case 6: "MultiplexEntrySendRelease";
        case 7: "RequestMultiplexEntryRelease";
        case 8: "RequestModeRelease";
        case 9: "MiscellaneousIndication";
        case 10: "JitterIndication";
        case 11: "H223SkewIndication";
        case 12: "NewATMVCIndication";
        case 13: "UserInputIndication";
        default: FormatString("%d", type);
    }
}

Table H245IndicationMessageExtensionTypeTable( type )
{
    switch( type )
    {
        case 0: "H2250MaximumSkewIndication";
        case 1: "MCLocationIndication";
        case 2: "ConferenceIndication";
        case 3: "VendorIdentification";
        case 4: "FunctionNotSupported";
        case 5: "MultilinkIndication";
        case 6: "LogicalChannelRateRelease";
        case 7: "FlowControlIndication";
        case 8: "MobileMultilinkReconfigurationIndication";
        case 9: "GenericMessage";
        default: FormatString("%d", type);
    }
}

[DataTypeBitAlign]
struct IndicationMessage = H245IndicationMessageDescription
{
    UINT8 IndicationMessageExtension:1;
    switch
    {
        case IndicationMessageExtension:
        _struct ExtensionChoice
        {
            [H245IndicationMessageDescription = this.ToString]
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245IndicationMessageExtensionTypeTable( PERSmallNumber );
            AsnPerLengthDeterminant Length;
            [IndicationMessageEndOffset = FrameOffset + PERLengthValue]
            switch( PERSmallNumber )
            {
                case 0: H2250MaximumSkewIndication h2250MaximumSkewIndication;
                case 1: MCLocationIndication mcLocationIndication;
                case 2: ConferenceIndication conferenceIndication;
                case 3: VendorIdentification vendorIdentification;
                case 4: FunctionNotSupported functionNotSupported;
                case 5: MultilinkIndication multilinkIndication;
                case 6: LogicalChannelRateRelease logicalChannelRateRelease;
                case 7: FlowControlIndication flowControlIndication;
                case 8: MobileMultilinkReconfigurationIndication mobileMultilinkReconfigurationIndication;
                case 9: GenericMessage genericIndication;
            }
            switch
            {
                case FrameBitOffset < IndicationMessageEndOffset * 8: AsnPerPadding(IndicationMessageEndOffset * 8 - FrameBitOffset) Padding;
            }
        };
        default:
        _struct NoneExtension
        {
            [H245IndicationMessageDescription = this.ToString]
            AsnPerConstrainedInteger(0,13) ChoiceValue = H245IndicationMessageTable( ConstrainedValue );
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardMessage nonStandard;
                case 1: FunctionNotUnderstood functionNotUnderstood;
                case 2: MasterSlaveDeterminationRelease masterSlaveDeterminationRelease;
                case 3: TerminalCapabilitySetRelease terminalCapabilitySetRelease;
                case 4: OpenLogicalChannelConfirm openLogicalChannelConfirm;
                case 5: RequestChannelCloseRelease requestChannelCloseRelease;
                case 6: MultiplexEntrySendRelease multiplexEntrySendRelease;
                case 7: RequestMultiplexEntryRelease requestMultiplexEntryRelease;
                case 8: RequestModeRelease requestModeRelease;
                case 9: MiscellaneousIndication miscellaneousIndication;
                case 10: JitterIndication jitterIndication;
                case 11: H223SkewIndication h223SkewIndication;
                case 12: NewATMVCIndication newATMVCIndication;
                case 13: UserInputIndication userInput;
            }
        };
    }
}

[DataTypeBitAlign]
struct MobileMultilinkReconfigurationIndication
{
    UINT8 MobileMultilinkReconfigurationIndicationExtensionBit:1;
    AsnPerConstrainedInteger(1,255) sampleSize;
    AsnPerConstrainedInteger(1,255) samplesPerFrame;
    //switch
    //{
    //    case MobileMultilinkReconfigurationIndicationExtensionBit
    //}
}

[DataTypeBitAlign]
struct FunctionNotUnderstood
{
    AsnPerConstrainedInteger(0,2) ChoiceValue;
    switch( ConstrainedValue )
    {
        case 0: RequestMessage request;
        case 1: ResponseMessage response;
        case 2: CommandMessage command;
    }
}

[DataTypeBitAlign]
struct MasterSlaveDeterminationRelease
{
   UINT8 MasterSlaveDeterminationReleaseExtension:1;
   //switch
   //{
   //    case MasterSlaveDeterminationRelease_Extension:
   //}
}

[DataTypeBitAlign]
struct TerminalCapabilitySetRelease
{
    UINT8 TerminalCapabilitySetReleaseExtension:1;
	switch{
		case TerminalCapabilitySetReleaseExtension:
			_struct Extension{
    			AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
    			UINT8 genericInformationPresent:1;
    			switch{
    				case genericInformationPresent:
    					struct SequenceOfGenericInformation{
    						AsnPerLengthDeterminant Length;
    						[SequenceOfGenericInformationEndoffset = FrameOffset + PERLengthValue]
							[Post.PERArraySize = PERLengthValue]
							AsnPerLengthDeterminant Size;
							while [PERArraySize > 0]
							{
								[PERArraySize = PERArraySize -1]
								GenericInformation genericInformation;
							}
							switch{
								case FrameBitOffset < SequenceOfGenericInformationEndoffset * 8:
									AsnPerPadding(SequenceOfGenericInformationEndoffset * 8 - FrameOffset) Padding;
							}
						}
				}
			}
	}
}

[DataTypeBitAlign]
struct OpenLogicalChannelConfirm
{
    UINT8 OpenLogicalChannelConfirmExtensionBit:1;
    AsnPerConstrainedInteger(1,65535) forwardLogicalChannelNumber;
    switch
    {
        case OpenLogicalChannelConfirmExtensionBit:
        struct OpenLogicalChannelConfirmExtension
        {
            AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
            UINT8 genericInformationPresent:1;
            switch
            {
                case genericInformationPresent:
                struct SequenceOfGenericInfo
                {
                    AsnPerLengthDeterminant Length;
                    [GenericInfoEndOffset = FrameOffset + PERLengthValue, post.GenericInfoSize = PERLengthValue]
                    AsnPerLengthDeterminant Size;
                    while [ GenericInfoSize > 0 ]
                    {
                        [ GenericInfoSize = GenericInfoSize - 1 ]
                        GenericInformation genericInfo;
                    }
                    switch
                    {
                        case FrameBitOffset < GenericInfoEndOffset * 8:
                        AsnPerPadding( GenericInfoEndOffset * 8 - FrameBitOffset ) Padding;
                    }
                };
            }
        };
    }
}

[DataTypeBitAlign]
struct GenericInformation
{
    GenericMessage genericMessage;
}

[DataTypeBitAlign]
struct GenericMessage
{
    UINT8 GenericMessageExtensionBit:1;
    UINT8 subMessageIdentifierPresent:1;
    UINT8 messageContentPresent:1;
    CapabilityIdentifier messageIdentifier;
    switch
    {
        case subMessageIdentifierPresent: AsnPerConstrainedInteger(0,127) subMessageIdentifier;
    }
    switch
    {
        case messageContentPresent: 
        struct SequenceOfGenericParameter
        {
            [post.GenericParameterSize = PERLengthValue]
            AsnPerLengthDeterminant Length;
            while [ GenericParameterSize > 0 ]
            {
                [GenericParameterSize=GenericParameterSize-1]
                GenericParameter genericParam;
            }
        };
    }
    //switch
    //{
    //    case GenericMessageExtensionBit
    //}
}


[DataTypeBitAlign]
struct RequestChannelCloseRelease
{
    UINT8 RequestChannelCloseReleaseExtension:1;
    AsnPerConstrainedInteger(1,65535) forwardLogicalChannelNumber;
    //switch
    //{
    //    case RequestChannelCloseRelease_Extension:
    //}
}

[DataTypeBitAlign]
struct MultiplexEntrySendRelease
{
    UINT8 MultiplexEntrySendReleaseExtension:1;
    [post.multiplexTableEntryNumberSize = ConstrainedValue]
    AsnPerConstrainedInteger(1,15) Size;
    while [ multiplexTableEntryNumberSize > 0 ]
    {
        [ multiplexTableEntryNumberSize = multiplexTableEntryNumberSize - 1 ]
        AsnPerConstrainedInteger(1,15) multiplexTableEntryNumber;
    }
    //switch
    //{
    //    case MultiplexEntrySendRelease_Extension
    //}
}

[DataTypeBitAlign]
struct RequestMultiplexEntryRelease
{
    UINT8 RequestMultiplexEntryReleaseExtension:1;
    [post.entryNumberSize = ConstrainedValue]
    AsnPerConstrainedInteger(1,15) Size;
    while [ entryNumberSize > 0 ]
    {
        [ entryNumberSize = entryNumberSize - 1 ]
        AsnPerConstrainedInteger(1,15) entryNumber;
    }
    //switch
    //{
    //    case RequestMultiplexEntryRelease_Extension
    //}
}
Table H245MiscellaneousIndicationTypeTable( value )
{
    switch( value )
    {
        case 0: "logicalChannelActive";
        case 1: "logicalChannelInactive";
        case 2: "multipointConference";
        case 3: "cancelMultipointConference";
        case 4: "multipointZeroComm";
        case 5: "cancelMultipointZeroComm";
        case 6: "multipointSecondaryStatus";
        case 7: "cancelMultipointSecondaryStatus";
        case 8: "videoIndicateReadyToActivate";
        case 9: "videoTemporalSpatialTradeOff";
        default: FormatString("%d", value);
    }
}

Table H245MiscellaneousIndicationTypeExtensionTable( value )
{
    switch( value )
    {
        case 0: "videoNotDecodedMBs";
        case 1: "transportCapability";
        default: FormatString("Unknown Type(%d)", value);
    }
}

[DataTypeBitAlign]
struct MiscellaneousIndication
{
    UINT8 MiscellaneousIndicationExtension:1;
    AsnPerConstrainedInteger(1,65535) logicalChannelNumber;
    struct type = H245MiscellaneousIndicationTypeDescription
    {
        UINT8 typeExtension:1;
        switch
        {
            case typeExtension:
            _struct ExtensionChoice
            {
                [H245MiscellaneousIndicationTypeDescription = this.ToString]
                AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245MiscellaneousIndicationTypeExtensionTable( PERSmallNumber );
                AsnPerLengthDeterminant Length;
                [TypeExtensionEndOffset = FrameOffset + PERLengthValue]
                switch( PERSmallNumber )
                {
                    case 0: struct videoNotDecodedMBs
                            {
                                UINT8 videoNotDecodedMBsExtension:1;
                                AsnPerConstrainedInteger(1,8192) firstMB;
                                AsnPerConstrainedInteger(1,8192) numberOfMBs;
                                AsnPerConstrainedInteger(0,255) temporalReference;
                                //switch
                                //{
                                //    case videoNotDecodedMBs_Extension:
                                //}
                            };
                    case 1: TransportCapability transportCapability;
                }
                switch
                {
                    case FrameBitOffset < TypeExtensionEndOffset * 8: 
                    AsnPerPadding( TypeExtensionEndOffset * 8 - FrameBitOffset ) Padding;
                }
            };
            default:
            _struct NoneExtension
            {
                [H245MiscellaneousIndicationTypeDescription = this.ToString]
                AsnPerConstrainedInteger(0,9) ChoiceValue = H245MiscellaneousIndicationTypeTable( ConstrainedValue );
                switch( ConstrainedValue )
                {
                    case 9: AsnPerConstrainedInteger(0,31) videoTemporalSpatialTradeOff;
                }  
            };
        }
    };
    //switch
    //{
    //    case type_Extension:
    //}
}
Table H245JitterIndicationScopeTable( value )
{
    switch( value )
    {
        case 0: "logicalChannelNumber";
        case 1: "resourceID";
        case 2: "wholeMultiplex";
        default: FormatString("Unknown Scope type(%d)", value);
    }
}

[DataTypeBitAlign]
struct JitterIndication
{
    UINT8 JitterIndicationExtension:1;
    UINT8 skippedFrameCountPresent:1;
    UINT8 additionalDecoderBufferPresent:1;
    struct scope = ChoiceValue.ToString
    {
        AsnPerConstrainedInteger(0,2) ChoiceValue = H245JitterIndicationScopeTable( ConstrainedValue );
        switch( ConstrainedValue )
        {
            case 0: AsnPerConstrainedInteger(1,65535) logicalChannelNumber;
            case 1: AsnPerConstrainedInteger(0,65535) resourceID;
        }
    };
    AsnPerConstrainedInteger(0,3) estimatedReceivedJitterMantissa;
    AsnPerConstrainedInteger(0,7) estimatedReceivedJitterExponent;
    switch
    {
        case skippedFrameCountPresent: AsnPerConstrainedInteger(0,15) skippedFrameCount;
    }
    
    switch
    {
        case additionalDecoderBufferPresent: AsnPerConstrainedInteger(0,262143) additionalDecoderBuffer;
    }
    
    //switch
    //{
    //    case JitterIndication_Extension:
    //}
}

[DataTypeBitAlign]
struct H223SkewIndication
{
    UINT8 H223SkewIndicationExtension:1;
    AsnPerConstrainedInteger(1,65535) logicalChannelNumber1;
    AsnPerConstrainedInteger(1,65535) logicalChannelNumber2;
    AsnPerConstrainedInteger(0,4095) skew = FormatString("%d millisecond%s",ConstrainedValue, ConstrainedValue > 1 ? "s" : "");
    //switch
    //{
    //    case H223SkewIndication_Extension:
    //}
}

Table H245NewATMVCIndicationAALclockRecoveryTable( value )
{
    switch( value )
    {
        case 0: "nullClockRecovery";
        case 1: "srtsClockRecovery";
        case 2: "adaptiveClockRecovery";
        default: FormatString("%d", value);
    }
}

Table H245NewATMVCIndicationAALerrorCorrectionTable( value )
{
    switch( value )
    {
        case 0: "nullErrorCorrection";
        case 1: "longInterleaver";
        case 2: "shortInterleaver";
        case 3: "errorCorrectionOnly";
        default: FormatString("%d", value);
        
    }
}

Table H245NewATMVCIndicationmultiplexTable( value )
{
    switch( value )
    {
        case 0: "noMultiplex";
        case 1: "transportStream";
        case 2: "programStream";
        default: FormatString("%d", value);
    }
}

[DataTypeBitAlign]
struct NewATMVCIndication
{
    UINT8 NewATMVCIndicationExtensionbit:1;
    AsnPerConstrainedInteger(0,65535) resourceID;
    AsnPerConstrainedInteger(1,65535) bitRate = FormatString("%d kbit/s", ConstrainedValue * 64);
    AsnPerBoolean(0) bitRateLockedToPCRClock;
    AsnPerBoolean(0) bitRateLockedToNetworkClock;
    struct aal
    {
        UINT8 aalExtension:1;
        switch
        {
            //case aal_Extension:
            default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,1) ChoiceValue;
                switch( ConstrainedValue )
                {
                    case 0: struct aal1
                            {
                                UINT8 aal1Extension:1;
                                struct clockRecovery = H245NewATMVCIndicationAALclockRecoveryTable( ConstrainedValue )
                                {
                                    UINT8 clockRecoveryExtension:1;
                                    switch
                                    {
                                        //case clockRecovery_Extension:
                                        default:
                                        _struct NoneExtension
                                        {
                                            AsnPerConstrainedInteger(0,2) ChoiceValue = H245NewATMVCIndicationAALclockRecoveryTable( ConstrainedValue );
                                        };
                                    }
                                };
                                struct errorCorrection = H245NewATMVCIndicationAALerrorCorrectionTable( ConstrainedValue )
                                {
                                    UINT8 errorCorrectionExtension:1;
                                    switch
                                    {
                                        //case errorCorrection_Extension:
                                        default:
                                        _struct NoneExtension
                                        {
                                            AsnPerConstrainedInteger(0,3) ChoiceValue = H245NewATMVCIndicationAALerrorCorrectionTable( ConstrainedValue );
                                        };
                                    }
                                };
                                AsnPerBoolean(0) structuredDataTransfer;
                                AsnPerBoolean(0) partiallyFilledCells;
                                //switch
                                //{
                                //    case aal1_Extension:
                                //}
                            };
                    case 1: struct aal5
                            {
                                UINT8 aal5Extension:1;
                                AsnPerConstrainedInteger(0,65535) forwardMaximumSDUSize;
                                AsnPerConstrainedInteger(0,65535) backwardMaximumSDUSize;
                                //switch
                                //{
                                //    case aal5_Extension:
                                //}
                            };
                }
            };
        }
    };
    struct multiplex = H245NewATMVCIndicationmultiplexTable( ConstrainedValue )
    {
        UINT8 multiplexExtension:1;
        switch
        {
            //case multiplex_Extension:
            default:
            _struct NoneExtension
            {
                AsnPerConstrainedInteger(0,2) ChoiceValue = H245NewATMVCIndicationmultiplexTable( ConstrainedValue );
            };
        }
    };
    switch
    {
        case NewATMVCIndicationExtensionbit:
        struct NewATMVCIndicationExtension
        {
            AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
            UINT8 reverseParametersPresent:1;
            switch
            {
                case reverseParametersPresent:
                struct reverseParameters
                {
                    AsnPerLengthDeterminant Length;
                    [ExtensionEndOffset = FrameOffset + PERLengthValue]
                    UINT8 reverseParametersExtension:1;
                    AsnPerConstrainedInteger(1,65535) bitRate = FormatString("%d kbit/s", ConstrainedValue * 64);
                    AsnPerBoolean(0) bitRateLockedToPCRClock;
                    AsnPerBoolean(0) bitRateLockedToNetworkClock;
                    struct multiplex = H245NewATMVCIndicationmultiplexTable( ConstrainedValue )
                    {
                        UINT8 multiplexExtension:1;
                        switch
                        {
                            //case multiplex_Extension:
                            default:
                            _struct NoneExtension
                            {
                                AsnPerConstrainedInteger(0,2) ChoiceValue = H245NewATMVCIndicationmultiplexTable( ConstrainedValue );
                            };
                        }
                    };
                    switch
                    {
                        case FrameBitOffset < ExtensionEndOffset * 8: AsnPerPadding( ExtensionEndOffset * 8 - FrameBitOffset ) Padding;
                    }
                };
            }
        }
    }
}

Table H245UserInputIndicationTable( value )
{
    switch( value )
    {
        case 0: "nonStandard";
        case 1: "alphanumeric";
        default: FormatString("%d", value);
    }
}

Table H245UserInputIndicationExtensionTable( value )
{
    switch( value )
    {
       case 0: "userInputSupportIndication";
       case 1: "signal";
       case 2: "signalUpdate";
       case 3: "extendedAlphanumeric";
       case 4: "encryptedAlphanumeric";
       case 5: "genericInformation";
       default: FormatString("%d", value);
    }
}

Table H245UserInputIndicationuserInputSupportIndicationTable( value )
{
    switch( value )
    {
        case 0: "nonStandard";
        case 1: "basicString";
        case 2: "iA5String";
        case 3: "generalString";
        default: FormatString("%d", value);
    }
}

Table H245UserInputIndicationuserInputSupportIndicationExtensionTable( value )
{
    switch( value )
    {
       case 0: "encryptedBasicString";
       case 1: "encryptedIA5String";
       case 2: "encryptedGeneralString";
       default: FormatString("%d", value);
    }
}

[DataTypeBitAlign]
struct UserInputIndication = H245UserInputIndicationDescription
{
    UINT8 UserInputIndicationExtension:1;
    switch
    {
        case UserInputIndicationExtension:
        _struct ExtensionChoice
        {
            [ H245UserInputIndicationDescription = this.ToString ]
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245UserInputIndicationExtensionTable( PERSmallNumber );
            AsnPerLengthDeterminant Length;
            [ExtensionEndOffset = FrameOffset + PERLengthValue]
            switch( PERSmallNumber )
            {
                case 0: struct userInputSupportIndication = userInputSupportIndicationDescription
                        {
                            UINT8 userInputSupportIndicationExtension:1;
                            switch
                            {
                                case userInputSupportIndicationExtension:
                                _struct ExtensionChoice
                                {
                                    [userInputSupportIndicationDescription = this.ToString]
                                    AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245UserInputIndicationuserInputSupportIndicationExtensionTable( PERSmallNumber );
                                };
                                default:
                                _struct NoneExtension
                                {
                                    [userInputSupportIndicationDescription = this.ToString]
                                    AsnPerConstrainedInteger(0,3) ChoiceValue = H245UserInputIndicationuserInputSupportIndicationTable( ConstrainedValue );
                                    switch( ConstrainedValue )
                                    {
                                        case 0: H245NonStandardParameter nonStandard;
                                    }
                                };
                            }
                        };
                case 1: struct signal
                        {
                            UINT8 signalExtensionBit:1;
                            UINT8 durationPresent:1;
                            UINT8 rtpPresent:1;
                            AsnPerIA5String(1,1) signalType = AsciiString(FrameData, OctetStringStartOffset, OCTETSTRINGLENGTH); 
                            switch
                            {
                                case durationPresent: AsnPerConstrainedInteger(1,65535) duration = FormatString("%d millisecond%s", ConstrainedValue, ConstrainedValue > 1 ? "s" : "");
                            }
                            switch
                            {
                                case rtpPresent: struct rtp
                                                  {
                                                      UINT8 rtpExtension:1;
                                                      UINT8 timeStampPresent:1;
                                                      UINT8 expirationTimePresent:1;
                                                      switch
                                                      {
                                                          case timeStampPresent: H235TimeStamp timeStamp;
                                                      }
                                                      switch
                                                      {
                                                          case expirationTimePresent: H235TimeStamp expirationTime;
                                                      }
                                                      AsnPerConstrainedInteger(1,65535) logicalChannelNumber;
                                                      //switch
                                                      //{
                                                      //    case rtp_Extension:
                                                      //}
                                                  };
                            }
                            switch
                            {
                                case signalExtensionBit:
                                struct signalExtension
                                {
                                    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
                                    UINT8 rtpPayloadIndicationPresent:1;
                                    switch
                                    {
                                        case PERSmallNumber >= 1: UINT8 paramSPresent:1;
                                    }
                                    switch
                                    {
                                        case PERSmallNumber >= 2: UINT8 encryptedSignalTypePresent:1;
                                    }
                                    switch
                                    {
                                        case PERSmallNumber >= 3: UINT8 algorithmOIDPresent:1;
                                    }
                                    switch
                                    {
                                        case rtpPayloadIndicationPresent:
                                        struct rtpPayloadIndication
                                        {
                                            AsnPerLengthDeterminant Length; // this length value should be 0
                                            switch
                                            {
                                                case PERLengthValue: BLOB(PERLengthValue) Padding;
                                            }
                                        };
                                    }
                                    switch
                                    {
                                        case paramSPresent:
                                        struct ParamsStruct
                                        {
                                            AsnPerLengthDeterminant Length;
                                            [ParamsExtensionEndOffset = FrameOffset + PERLengthValue]
                                            Params params;
                                            switch
                                            {
                                                case FrameBitOffset < ParamsExtensionEndOffset * 8:
                                                AsnPerPadding(ParamsExtensionEndOffset * 8 - FrameBitOffset) Padding;
                                            }
                                        };
                                    }
                                    switch
                                    {
                                        case encryptedSignalTypePresent:
                                        struct EncryptedSignalType
                                        {
                                            AsnPerLengthDeterminant Length;
                                            [EncryptedSignalEndOffset = FrameOffset + PERLengthValue]
                                            AsnPerOctetString(1,1) encryptedSignalType;
                                            switch
                                            {
                                                case FrameBitOffset < EncryptedSignalEndOffset * 8:
                                                AsnPerPadding(EncryptedSignalEndOffset * 8 - FrameBitOffset) Padding;
                                            }
                                        };
                                    }
                                    switch
                                    {
                                        case algorithmOIDPresent:
                                        struct AlgorithmOID
                                        {
                                            AsnPerLengthDeterminant Length;
                                            [AlgorithmOIDEndOffset = FrameOffset + PERLengthValue]
                                            AsnPerObjectIdentifier AlgorithmOID;
                                            switch
                                            {
                                                case FrameBitOffset < AlgorithmOIDEndOffset * 8:
                                                AsnPerPadding(AlgorithmOIDEndOffset * 8 - FrameBitOffset) Padding;
                                            }
                                        };
                                    }
                                };
                            }
                        };
                case 2: struct signalUpdate
                        {
                            UINT8 signalUpdateExtension:1;
                            UINT8 rtpPresent:1;
                            AsnPerConstrainedInteger(1,65535) duration  = FormatString("%d millisecond%s", ConstrainedValue, ConstrainedValue > 1 ? "s" : "");
                            switch
                            {
                                case rtpPresent:
                                     struct rtp
                                     {
                                         UINT8 rtpExtension:1;
                                         AsnPerConstrainedInteger(1,65535) logicalChannelNumber;
                                         //switch
                                         //{
                                         //    case rtp_Extension:
                                         //}
                                     };
                            }
                            //switch
                            //{
                            //    case signalUpdate_Extension:
                            //}
                        };
                case 3: struct extendedAlphanumeric
                        {
                            UINT8 extendedAlphanumericExtensionBit:1;
                            UINT8 rtpPayloadIndicationPresent:1;
                            AsnPerGeneralString alphanumeric;
                            switch
                            {
                                case extendedAlphanumericExtensionBit:
                                struct extendedAlphanumericExtension
                                {
                                    AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
                                    UINT8 encryptedAlphanumericPresent:1;
                                    switch
                                    {
                                        case encryptedAlphanumericPresent:
                                        struct encryptedAlphanumeric
                                        {
                                            AsnPerLengthDeterminant Length;
                                            [encryptedAlphanumericEndOffset = FrameOffset + PERLengthValue]
                                            UINT8 encryptedAlphanumericExtensionBit:1;
                                            UINT8 paramSPresent:1;
                                            AsnPerObjectIdentifier algorithmOID;
                                            switch
                                            {
                                                case paramSPresent: Params params;
                                            }
                                            AsnPerOctetString(-1,-1) encrypted;
                                            //switch
                                            //{
                                            //    case encryptedAlphanumericExtensionBit:
                                            //}
                                            switch
                                            {
                                                case FrameBitOffset < encryptedAlphanumericEndOffset * 8:
                                                AsnPerPadding( encryptedAlphanumericEndOffset * 8 - FrameBitOffset) Padding;
                                            }
                                        };
                                    }
                                };
                            }
                        };
                case 4: struct encryptedAlphanumeric
                        {
                            UINT8 encryptedAlphanumericExtensionBit:1;
                            UINT8 paramSPresent:1;
                            AsnPerObjectIdentifier algorithmOID;
                            switch
                            {
                                case paramSPresent: Params params;
                            }
                            AsnPerOctetString(-1,-1) encrypted;
                            //switch
                            //{
                            //    case encryptedAlphanumericExtensionBit
                            //}
                        }
                case 5: struct SequenceOfgenericInformation
                        {
                            [post.SizeOfGenericInfo = PERLengthValue]
                            AsnPerLengthDeterminant Length;
                            while [ SizeOfGenericInfo > 0 ]
                            {
                                [ SizeOfGenericInfo = SizeOfGenericInfo - 1 ]
                                GenericInformation genericInfo;
                            }
                        }
            }
            switch
            {
                case FrameBitOffset < ExtensionEndOffset * 8: AsnPerPadding(ExtensionEndOffset * 8- FrameBitOffset) Padding;
            }
        };
        default:
        _struct NoneExtension
        {
            [H245UserInputIndicationDescription = this.ToString]
            AsnPerConstrainedInteger(0,1) ChoiceValue = H245UserInputIndicationTable( ConstrainedValue );
            switch( ConstrainedValue )
            {
                case 0: H245NonStandardParameter nonStandard;
                case 1: AsnPerGeneralString alphanumeric;
            }
        };
    }
}

[DataTypeBitAlign]
struct H2250MaximumSkewIndication
{
    UINT8 H2250MaximumSkewIndicationExtension:1;
    AsnPerConstrainedInteger(1,65535) logicalChannelNumber1;
    AsnPerConstrainedInteger(1,65535) logicalChannelNumber2;
    AsnPerConstrainedInteger(0,4095) maximumSkew = FormatString("%d millisecond%s", ConstrainedValue, ConstrainedValue > 1 ? "s" : "");
    //switch
    //{
    //    case H2250MaximumSkewIndication_Extension:
    //}
}

[DataTypeBitAlign]
struct MCLocationIndication
{
    UINT8 MCLocationIndicationExtension:1;
    H245TransportAddress signalAddress;
    //switch
    //{
    //    case MCLocationIndication_Extension:
    //}
}

[DataTypeBitAlign]
struct TerminalYouAreSeeingInSubPictureNumber
{
    UINT8 TerminalYouAreSeeingInSubPictureNumberExtensionBit:1;
    AsnPerConstrainedInteger(0,192) terminalNumber;
    AsnPerConstrainedInteger(0,255) subPictureNumber;
    //switch
    //{
    //    case TerminalYouAreSeeingInSubPictureNumberExtensionBit:
    //}
}

[DataTypeBitAlign]
struct VideoIndicateCompose
{
    UINT8 VideoIndicateComposeExtensionBit:1;
    AsnPerConstrainedInteger(0,255) compositionNumber;
    //switch
    //{
    //    case VideoIndicateComposeExtensionBit
    //}
}
Table H245ConferenceIndicationTable( value )
{
    switch( value )
    {
        case 0: "sbeNumber";
        case 1: "terminalNumberAssign";
        case 2: "terminalJoinedConference";
        case 3: "terminalLeftConference";
        case 4: "seenByAtLeastOneOther";
        case 5: "cancelSeenByAtLeastOneOther";
        case 6: "seenByAll";
        case 7: "cancelSeenByAll";
        case 8: "terminalYouAreSeeing";
        case 9: "requestForFloor";
        default: FormatString("%d", value );
    }
}

Table H245ConferenceIndicationExtensionTable( value )
{
    switch( value )
    {
        case 0: "withdrawChairToken";
        case 1: "floorRequested";
        case 2: "terminalYouAreSeeingInSubPictureNumber";
        case 3: "videoIndicateCompose";
        default: FormatString("%d", value);
    }
}

[DataTypeBitAlign]
struct ConferenceIndication = H245ConferenceIndicationDescription
{
    UINT8 ConferenceIndicationExtension:1;
    switch
    {
        case ConferenceIndicationExtension:
        _struct ExtensionChoice
        {
            [H245ConferenceIndicationDescription = this.ToString]
            AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue = H245ConferenceIndicationExtensionTable( PERSmallNumber );
            AsnPerLengthDeterminant Length;
            [ExtensionEndOffset = FrameOffset + PERLengthValue]
            switch( PERSmallNumber )
            {
                case 1: TerminalLabel floorRequested;
                case 2: TerminalYouAreSeeingInSubPictureNumber terminalYouAreSeeingInSubPictureNumber;
                case 3: VideoIndicateCompose videoIndicateCompose;
            }
            switch
            {
                case FrameBitOffset < ExtensionEndOffset * 8: AsnPerPadding(ExtensionEndOffset * 8 - FrameBitOffset) Padding;
            }
        };
        default:
        _struct NoneExtension
        {
            [H245ConferenceIndicationDescription = this.ToString]
            AsnPerConstrainedInteger(0,9) ChoiceValue = H245ConferenceIndicationTable( ConstrainedValue );
            switch( ConstrainedValue )
            {
                case 0: AsnPerConstrainedInteger(0,9) sbeNumber;
                case 1: TerminalLabel terminalNumberAssign;
                case 2: TerminalLabel terminalJoinedConference;
                case 3: TerminalLabel terminalLeftConference;
                case 8: TerminalLabel terminalYouAreSeeing;
            }
        };
    }
}

[DataTypeBitAlign]
struct VendorIdentification
{
    UINT8 VendorIdentificationExtension:1;
    UINT8 productNumberPresent:1;
    UINT8 versionNumberPresent:1;
    H245NonStandardIdentifier vendor;
    switch
    {
        case productNumberPresent: AsnPerOctetString(1,256) productNumber;
    }
    switch
    {
        case versionNumberPresent: AsnPerOctetString(1,256) versionNumber;
    }
    //switch
    //{
    //    case VendorIdentification_Extension
    //}
}
Table H245FunctionNotSupportedCauseTable( value )
{
    switch( value )
    {
        case 0: "syntaxError";
        case 1: "semanticError";
        case 2: "unknownFunction";
        default: FormatString("%d", value);
    }
}

[DataTypeBitAlign]
struct FunctionNotSupported
{
    UINT8 FunctionNotSupportedExtension:1;
    UINT8 returnedFunctionPresent:1;
    struct cause = CauseDescription            
    {                
        UINT8 causeExtension:1;                
        switch                
        {                
            //case cause_Extension:                
            default:                
            _struct NoneExtension                
            {   
                [CauseDescription = this.ToString]       
                AsnPerConstrainedInteger(0,2) ChoiceValue = H245FunctionNotSupportedCauseTable( ConstrainedValue );  
            };                
        }                
    };                
    switch                
    {                
        case returnedFunctionPresent: AsnPerOctetString(-1,-1) returnedFunction;
    }                
                    
    //switch                
    //{                
    //    case FunctionNotSupported_Extension:              
    //}                
}                
                
[DataTypeBitAlign]                
struct MultilinkIndication                
{                
    UINT8 MultilinkIndicationExtension:1;                
    switch                
    {                
        case MultilinkIndicationExtension:
        _struct Extension{};
                       
        default:                
        _struct NoneExtension                
        {                
            AsnPerConstrainedInteger(0,2) ChoiceValue;      
            switch( ConstrainedValue )                
            {                
                case 0: H245NonStandardMessage nonStandard;     
                case 1: struct crcDesired                
                        {                
                            UINT8 crcDesiredExtension:1;    
                            //switch                
                            //{                
                            //    case crcDesired_Extension 
                            //}                
                        };                
                case 2: struct excessiveError               
                        {                
                            UINT8 excessiveErrorExtension:1;
                            ConnectionIdentifier connectionIdentifier;
                            //switch                
                            //{                
                            //    case excessiveError_Extension:
                            //}                
                        };                
            }                
        };                
    }                
}                
                
[DataTypeBitAlign]                
struct LogicalChannelRateRelease                
{                
    UINT8 LogicalChannelRateReleaseExtension:1;             
    //switch                
    //{                
    //    case LogicalChannelRateRelease_Extension:         
    //}                
}

Table H245FlowControlIndicationScopeTable(value){
	switch(value){
		case 0: "logicalChannelNumber";
		case 1: "resourceID";
		case 2: "wholeMultiplex";
		default: "Unknown Value";
	}
}

Table H245FlowControlIndicationRestrictionTable(value){
	switch(value){
		case 0: "maximumBitRate";
		case 1: "noRestriction";
		default: "Unknown Value";
	}
}


[DataTypeBitAlign]                
struct FlowControlIndication                
{                
    UINT8 FlowControlIndicationExtension:1;                
    struct scope = ChoiceValue.ToString                
    {                
        AsnPerConstrainedInteger(0,2) ChoiceValue = H245FlowControlIndicationScopeTable(ConstrainedValue);          
        switch( ConstrainedValue )                
        {                
            case 0: AsnPerConstrainedInteger(1,65535) logicalChannelNumber;
            case 1: AsnPerConstrainedInteger(0,65535) resourceID;
        }                
    };                
    struct restriction = ChoiceValue.ToString           
    {                
        AsnPerConstrainedInteger(0,1) ChoiceValue = H245FlowControlIndicationRestrictionTable(ConstrainedValue);          
        switch( ConstrainedValue )                
        {                
            case 0: AsnPerConstrainedInteger(0,16777215) maximumBitRate = FormatString("%d bit/s", ConstrainedValue * 100);
        }                
    };                
                    
    //switch                
    //{                
    //    case FlowControlIndication_Extension:             
    //}                
}                

[DataTypeBitAlign] 
struct ServicePriorityValue{		//Squence
	UINT8 ServicePriorityValueExtension:1;
	UINT8 H245nonStandardParameterPresent:1;

	switch{
		case H245nonStandardParameterPresent: H245NonStandardParameter nonStandardParameter;
	}
	switch{
		case ServicePriorityValueExtension:
		_struct Extension{};	
	}
}

[DataTypeBitAlign] 
struct H245AuthorizationParameters{		//Squence
	UINT8 AuthorizationParametersExtension:1;
	UINT8 H245nonStandardParameterPresent:1;	

	switch{
		case H245nonStandardParameterPresent: H245NonStandardParameter nonStandardParameter;
	}
	switch{
		case AuthorizationParametersExtension:
		_struct Extension{};
	}
}

[DataTypeBitAlign] 
struct ServicePriority{		//Squence
	UINT8 ServicePriorityExtension:1;
	UINT8 nonStandardDataPresent:1;
	UINT8 servicePriorityValuePresent:1;
		
	switch{
		case nonStandardDataPresent: H245NonStandardParameter nonStandardData;
	}
	AsnPerBoolean(0) servicePrioritySignalled;
	
	switch{
		case servicePriorityValuePresent: ServicePriorityValue servicePriorityValue;
	}
	switch{
		case ServicePriorityExtension:
		_struct Extension{};				
	}
}

[DataTypeBitAlign]
struct H245GenericTransportParameters{		//Squence
	UINT8 GenericTransportParametersExtension:1;
	UINT8 nonStandardDataPresent:1;
	UINT8 averageRatePresent:1;
	UINT8 burstPresent:1;
	UINT8 peakRatePresent:1;
	UINT8 maxPktSizePresent:1;
		
	switch{
		case nonStandardDataPresent: H245NonStandardParameter nonStandardData;
	}
	switch{
		case averageRatePresent: AsnPerConstrainedInteger(1, 4294967295) averageRate = FormatString("%d bytes/sec", ConstrainedValue);
	}
	switch{
		case burstPresent: AsnPerConstrainedInteger(1, 4294967295) burst = FormatString("%d bytes", ConstrainedValue);
	}
	switch{
		case peakRatePresent: AsnPerConstrainedInteger(1, 4294967295) peakRate = FormatString("%d bytes/sec", ConstrainedValue);
	}
	switch{
		case maxPktSizePresent: AsnPerConstrainedInteger(1, 4294967295) maxPktSize = FormatString("%d bytes", ConstrainedValue);
	}
	switch{
		case GenericTransportParametersExtension:
			_struct Extension{};
	}
}

[DataTypeBitAlign]
struct MultiplexedStreamParameter	//Sequence
{
	UINT8 ExtensionBit:1;
	
	
	MultiplexFormat multiplexFormat;
	AsnPerBoolean(0) controlOnMuxStream;
	switch
	{
		case ExtensionBit: 
			_struct Extension{};
	}
}

[DataTypeBitAlign]
struct RedundancyEncodingDTMode{		//Squence
	UINT8 RedundancyEncodingDTModeExtension:1;
	RedundancyEncodingMethod redundancyEncodingMethod;
	RedundancyEncodingDTModeElement primary;
			
	struct SequenceOfRedundancyEncodingDTModeElement{
		[post.secondarySize = PERLengthValue]
		AsnPerLengthDeterminant Size;
        while [ secondarySize > 0 ]
        {
            [ secondarySize = secondarySize - 1 ]
            RedundancyEncodingDTModeElement secondary;
        }
    }    
   	switch{
		case RedundancyEncodingDTModeExtension:
			_struct Extension{};
	}
}

[DataTypeBitAlign]
struct MultiplePayloadStreamMode{		//Squence
	UINT8 MultiplePayloadStreamModeExtension:1;

	struct SequenceOfMultiplePayloadStreamElementMode{
		[post.elementsSize = PERLengthValue]
		AsnPerLengthDeterminant Size;
		while [ elementsSize > 0 ]
		{
			[ elementsSize = elementsSize -1 ]
			MultiplePayloadStreamElementMode elements;
		}
	}
	switch{
		case MultiplePayloadStreamModeExtension:
			_struct Extension{};
	}
}

[DataTypeBitAlign]
struct DepFECMode{	//deprecated, do not use
	UINT8 DepFECModeExtension:1;
	switch{
		case DepFECModeExtension:
			_struct Extension{};
		default:
			_struct nonExtension{
					AsnPerConstrainedInteger(0,0) ChoiceValue = ConstrainedValue? "": "rfc2733Mode";
					switch(ConstrainedValue){
						case 0:
							struct rfc2733Mode{
								UINT8 rfc2733ModeExtension:1;
											struct mode{
												UINT8 modeExtension:1;
												switch{
													case modeExtension:
														_struct Extension{};
													default:
														_struct nonExtension{															
															AsnPerConstrainedInteger(0,1) Choicevalue = ConstrainedValue? "separateStream": "redundancyEncoding";
															switch(ConstrainedValue){
																case 1: 
																	struct separateStream{
																		UINT8 separateStreamExtension:1;
																		switch{
																			case separateStreamExtension:
																				_struct Extension{};
																			default:
																				_struct nonExtension{
																					AsnPerConstrainedInteger(0,1) ChoiceValue = ConstrainedValue? "samePort": "differentPort";
																					switch(ConstrainedValue){
																						case 0:
																							struct differentPort{
																								UINT8 differentPortExtension:1;
																								UINT8 protectedPayloadTypePresent:1;
																											
																								AsnPerConstrainedInteger(1,255) protectedSessionID;
																								switch{
																									case protectedPayloadTypePresent: AsnPerConstrainedInteger(1,127) protectedPayloadType;
																								}																										
																								switch{
																									case differentPortExtension:
																										_struct Extension{};
																								}	
																							}
																						case 1:
																							struct samePort{
																								UINT8 samePortExtension:1;
																								
																								ModeElementType protectedType;
																								switch{
																									case samePortextension:
																										_struct Extension{};
																								}
																										
																								
																							}
																					}
																				}
																		}
																	}
															}
														}
												}
											}
											
								switch{
									case rfc2733ModeExtension:
										_struct Extension{};
								}
							}
						}

				}
	}
}
Table RedundancyEncodingDTModeElementTypetable(extension, value){
	switch{
		case extension == 0 && value == 0: "NonStandardParameter";			
		case extension == 0 && value == 1: "VideoMode";
		case extension == 0 && value == 2: "AudioMode";
		case extension == 0 && value == 3: "DataMode";
		case extension == 0 && value == 4: "EncryptionMode";
		case extension == 0 && value == 5: "H235Mode";
		case extension == 1 && value == 0: "fecMode";
		default: "Unknown Value";
	}
}
																								
[DataTypeBitAlign]
struct RedundancyEncodingDTModeElement{		//Squence
	UINT8 RedundancyEncodingDTModeElementExtension:1;

	struct type{
		UINT8 typeExtension:1;
		switch{
			case typeExtension:
				_struct Extension{							    
	                     AsnPerNormallySmallNonnegativeWholeNumber ChoiceValue;
	                     AsnPerLengthDeterminant Length;
	                     [ExtensionEndoffset = FrameOffset + PERLengthValue]
	                     switch( PERSmallNumber )
	                     {
	                         case 0: FECMode fecMode;
	                     }
	                     switch
	                     {
	                         case FrameBitOffset < ExtensionEndoffset * 8: AsnPerPadding(ExtensionEndoffset * 8 - FrameBitOffset) padding;
	                     }				                
				};
			default:
				_struct nonExtension{
					AsnPerConstrainedInteger(0,5) ChoiceValue = RedundancyEncodingDTModeElementTypetable(0, ConstrainedValue);
					switch(ConstrainedValue){
						case 0: H245NonStandardParameter nonStandard;
						case 1: VideoMode videoMode;
						case 2: AudioMode audioMode;
						case 3: DataMode dataMode;
						case 4: EncryptionMode encryptionMode;
						case 5: H235Mode h235Mode;
					}
				}
		}
	}
	switch{
		case RedundancyEncodingDTModeElementExtension:
			_struct Extension{};
	}
}


Table rfc2733FormatTable(value){
	switch(value){
		case 0: "rfc2733rfc2198";
		case 1: "rfc2733sameport";
		case 2: "rfc2733diffport";
		default: "Unknown Value";
	}
}

[DataTypeBitAlign]
struct FECMode{		//Squence
	UINT8 FECModeExtension:1;
	UINT8 fecSchemePresent:1;
	UINT8 rfc2733FormatPresent:1;

	ModeElementType protectedElement;
	switch{
		case fecSchemePresent: AsnPerObjectIdentifier fecScheme;
	}
	switch{
		case rfc2733FormatPresent:
			struct rfc2733Format{
				AsnPerConstrainedInteger(0,2) ChoiceValue = rfc2733FormatTable(ConstrainedValue);
				switch(ConstrainedValue){
					case 0: MaxRedundancy rfc2733rfc2198;
					case 1: MaxRedundancy rfc2733sameport;
					case 2: MaxRedundancy rfc2733diffport;
				}
			}
	}
	switch{
		case FECModeExtension:
			_struct Extension{};
	}		
}

[DataTypeBitAlign]
struct MaxRedundancy = maxRedundancy.ToString{
	AsnPerSemiConstrainedInteger(1) maxRedundancy;
}

[DataTypeBitAlign]
struct MultiplePayloadStreamElementMode{		//Squence
	UINT8 MultiplePayloadStreamElementModeExtension:1;
	ModeElementType type;
	
	switch{
		case MultiplePayloadStreamElementModeExtension:
			_struct Extension{};
	}
}

[DataTypeBitAlign]
struct EnhancementLayerInfo{		//Squence
	UINT8 EnhancementLayerInfoExtension:1;
	UINT8 snrEnhancementPresent:1;
	UINT8 spatialEnhancementPresent:1;
	UINT8 bPictureEnhancementPresent:1;

	AsnPerBoolean(0) baseBitRateConstrained;
	switch{
		case snrEnhancementPresent:						
			struct snrEnhancement{
				[post.snrEnhancementSize = ConstrainedValue]
				AsnPerConstrainedInteger(1,14) Size;
				while [snrEnhancementSize > 0]
				{
					[snrEnhancementSize = snrEnhancementSize -1]
					EnhancementOptions snrEnhancement;
				}
			}
	}
	switch{
		case spatialEnhancementPresent:
			struct spatialEnhancement{
				[post.spatialEnhancementSize = ConstrainedValue]
				AsnPerConstrainedInteger(1, 14) Size;
				while [spatialEnhancementSize > 0]
				{
					[spatialEnhancementSize = spatialEnhancementSize -1]
					EnhancementOptions spatialEnhancement;
				}
			}
	}
	switch{
		case bPictureEnhancementPresent:
			struct bPictureEnhancement{
				[post.bPictureEnhancementSize = ConstrainedValue]
				AsnPerConstrainedInteger(1, 14) Size;
				while [bPictureEnhancementSize > 0]
				{
					[bPictureEnhancementSize = bPictureEnhancementSize -1]
					BEnhancementParameters bPictureEnhancement;
				}
			}
	}
		
	switch{
	case EnhancementLayerInfoExtension:
		_struct Extension{};
	}
}


[DataTypeBitAlign]
struct EnhancementOptions	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 sqcifMPIPresent:1;
	UINT8 qcifMPIPresent:1;
	UINT8 cifMPIPresent:1;
	UINT8 cif4MPIPresent:1;
	UINT8 cif16MPIPresent:1;
	UINT8 slowSqcifMPIPresent:1;
	UINT8 slowQcifMPIPresent:1;
	UINT8 slowCifMPIPresent:1;
	UINT8 slowCif4MPIPresent:1;
	UINT8 slowCif16MPIPresent:1;
	UINT8 h263OptionsPresent:1;
	
	switch
	{
		case sqcifMPIPresent : AsnPerConstrainedInteger(1, 32) sqcifMPI = FormatString("%d * (1/29.97 Hz)", ConstrainedValue);
	}
	switch
	{
		case qcifMPIPresent : AsnPerConstrainedInteger(1, 32) qcifMPI = FormatString("%d * (1/29.97 Hz)", ConstrainedValue);
	}
	switch
	{
		case cifMPIPresent : AsnPerConstrainedInteger(1, 32) cifMPI = FormatString("%d * (1/29.97 Hz)", ConstrainedValue);
	}
	switch
	{
		case cif4MPIPresent : AsnPerConstrainedInteger(1, 32) cif4MPI = FormatString("%d * (1/29.97 Hz)", ConstrainedValue);
	}
	switch
	{
		case cif16MPIPresent : AsnPerConstrainedInteger(1, 32) cif16MPI = FormatString("%d * (1/29.97 Hz)", ConstrainedValue);
	}
	AsnPerConstrainedInteger(1, 192400) maxBitRate = FormatString("%d bit/s", ConstrainedValue*100);
	AsnPerBoolean(0) unrestrictedVector;
	AsnPerBoolean(0) arithmeticCoding;
	AsnPerBoolean(0) temporalSpatialTradeOffCapability;
	switch
	{
		case slowSqcifMPIPresent : AsnPerConstrainedInteger(1, 3600) slowSqcifMPI = FormatString("%d * (sec/frame)", ConstrainedValue);
	}
	switch
	{
		case slowQcifMPIPresent : AsnPerConstrainedInteger(1, 3600) slowQcifMPI = FormatString("%d * (sec/frame)", ConstrainedValue);
	}
	switch
	{
		case slowCifMPIPresent : AsnPerConstrainedInteger(1, 3600) slowCifMPI = FormatString("%d * (sec/frame)", ConstrainedValue);
	}
	switch
	{
		case slowCif4MPIPresent : AsnPerConstrainedInteger(1, 3600) slowCif4MPI = FormatString("%d * (sec/frame)", ConstrainedValue);
	}
	switch
	{
		case slowCif16MPIPresent : AsnPerConstrainedInteger(1, 3600) slowCif16MPI = FormatString("%d * (sec/frame)", ConstrainedValue);
	}
	AsnPerBoolean(0) errorCompensation;
	switch
	{
		case h263OptionsPresent : H263Options h263Options;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension{};
	}
}



[DataTypeBitAlign]
struct BEnhancementParameters	//Sequence
{
	UINT8 ExtensionBit:1;
	
	
	EnhancementOptions enhancementOptions;
	AsnPerConstrainedInteger(1, 64) numberOfBPictures;
	switch
	{
		case ExtensionBit: 
			_struct Extension{};
	}
}

[DataTypeBitAlign]
struct H263Options{		//Squence
	UINT8 H263OptionsExtension:1;
	UINT8 transparencyParametersPresent:1;
	UINT8 refPictureSelectionPresent:1;
	UINT8 customPictureClockFrequencyPresent:1;
	UINT8 customPictureFormatPresent:1;
	UINT8 modeCombosPresent:1;


	AsnPerBoolean(0) advancedIntraCodingMode;
	AsnPerBoolean(0) deblockingFilterMode;
	AsnPerBoolean(0) improvedPBFramesMode;
	AsnPerBoolean(0) unlimitedMotionVectors;
	AsnPerBoolean(0) fullPictureFreeze;
	AsnPerBoolean(0) partialPictureFreezeAndRelease;
	AsnPerBoolean(0) resizingPartPicFreezeAndRelease;
	AsnPerBoolean(0) fullPictureSnapshot;
	AsnPerBoolean(0) partialPictureSnapshot;
	AsnPerBoolean(0) videoSegmentTagging;
	AsnPerBoolean(0) progressiveRefinement;
	AsnPerBoolean(0) dynamicPictureResizingByFour;
	AsnPerBoolean(0) dynamicPictureResizingSixteenthPel;
	AsnPerBoolean(0) dynamicWarpingHalfPel;
	AsnPerBoolean(0) dynamicWarpingSixteenthPel;
	AsnPerBoolean(0) independentSegmentDecoding;
	AsnPerBoolean(0) slicesInOrderNonRect;
	AsnPerBoolean(0) slicesInOrderRect;
	AsnPerBoolean(0) slicesNoOrderNonRect;
	AsnPerBoolean(0) slicesNoOrderRect;
	AsnPerBoolean(0) alternateInterVLCMode;
	AsnPerBoolean(0) modifiedQuantizationMode;
	AsnPerBoolean(0) reducedResolutionUpdate;
	
	switch{
		case transparencyParametersPresent: TransparencyParameters transparencyParameters;
	}
	AsnPerBoolean(0) separateVideoBackChannel;
	
	switch{
		case refPictureSelectionPresent: RefPictureSelection refPictureSelection;
	}
	switch{
		case customPictureClockFrequencyPresent:
			struct SequenceOfCustomPictureClockFrequency{
				[post.CustomPictureClockFrequencySize = ConstrainedValue]
				AsnPerConstrainedInteger(1, 16) Size;
				while [CustomPictureClockFrequencySize > 0]
				{
					[CustomPictureClockFrequencySize = CustomPictureClockFrequencySize -1]
					CustomPictureClockFrequency customPictureClockFrequency;
				}
			}
	}
	switch{
		case customPictureFormatPresent:
			struct SequenceOfCustomPictureFormat{
				[post.CustomPictureFormatSize = ConstrainedValue]
				AsnPerConstrainedInteger(1, 16) Size;
				while [CustomPictureFormatSize > 0]
				{
					[CustomPictureFormatSize = CustomPictureFormatSize -1]
					CustomPictureFormat customPictureFormat;
				}
			}
	}
	switch{
		case modeCombosPresent:
			struct SequenceOfH263VideoModeCombos{
				[post.H263VideoModeCombosSize = ConstrainedValue]
				AsnPerConstrainedInteger(1, 16) Size;
				while [H263VideoModeCombosSize > 0]
				{
					[H263VideoModeCombosSize = H263VideoModeCombosSize -1]
					H263VideoModeCombos modeCombos;
				}
			}
	}
	
	switch{
		case H263OptionsExtension:
			_struct Extension{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
				UINT8 videoBadMBsCapPresent:1;
				switch{
					case PERSmallNumber >= 1: UINT8 h263Version3OptionsPresent:1;
				}
					
				switch{
					case videoBadMBsCapPresent: AsnPerBoolean(1) videoBadMBsCap;
				}
				switch{
					case h263Version3OptionsPresent:
						struct h263Version3Options{
							AsnPerLengthDeterminant length;
							[h263Version3OptionsEndoffset = Frameoffset+PERLengthValue]
							H263Version3Options h263Version3Options;
							switch
		          {
		              case FrameBitOffset < h263Version3OptionsEndoffset * 8: AsnPerPadding(h263Version3OptionsEndoffset * 8 - FrameBitOffset) padding;
		          }
		          }							
							
				}
		}
	}
}


[DataTypeBitAlign]
struct H263Version3Options	//Sequence
{
	UINT8 ExtensionBit:1;
	
	
	AsnPerBoolean(0) dataPartitionedSlices;
	AsnPerBoolean(0) fixedPointIDCT0;
	AsnPerBoolean(0) interlacedFields;
	AsnPerBoolean(0) currentPictureHeaderRepetition;
	AsnPerBoolean(0) previousPictureHeaderRepetition;
	AsnPerBoolean(0) nextPictureHeaderRepetition;
	AsnPerBoolean(0) pictureNumber;
	AsnPerBoolean(0) spareReferencePictures;
	switch
	{
		case ExtensionBit: 
			_struct Extension{};
	}
}

[DataTypeBitAlign]
struct TransparencyParameters	//Sequence
{
	UINT8 ExtensionBit:1;	
	
	AsnPerConstrainedInteger(1, 256) presentationOrder;
	AsnPerConstrainedInteger(-262144, 262143) offsetX = FormatString("%d * (1/8 pixels)", ConstrainedValue);
	AsnPerConstrainedInteger(-262144, 262143) offsetY = FormatString("%d * (1/8 pixels)", ConstrainedValue);
	AsnPerConstrainedInteger(1, 255) scaleX;
	AsnPerConstrainedInteger(1, 255) scaleY;
	switch
	{
		case ExtensionBit: 
			_struct Extension{};
	}
}



Table RefPictureSelectionvideoBackChannelSendTable(ExtensionBit, Choice)
{
	switch 
	{
		case (ExtensionBit == 0) && (Choice== 0): "none";
		case (ExtensionBit == 0) && (Choice== 1): "ackMessageOnly";
		case (ExtensionBit == 0) && (Choice== 2): "nackMessageOnly";
		case (ExtensionBit == 0) && (Choice== 3): "ackOrNackMessageOnly";
		case (ExtensionBit == 0) && (Choice== 4): "ackAndNackMessage";

	}
}

[DataTypeBitAlign]
struct RefPictureSelection{		//Sequence
	UINT8 RefPictureSelectionExtension:1;
	UINT8 additionalPictureMemoryPresent:1;
	
	switch{
		case additionalPictureMemoryPresent:
			struct additionalPictureMemory{
				UINT8 additionalPictureMemoryExtension:1;
					
				UINT8 sqcifAdditionalPictureMemoryPresent:1;
				UINT8 qcifAdditionalPictureMemoryPresent:1;
				UINT8 cifAdditionalPictureMemoryPresent:1;
				UINT8 cif4AdditionalPictureMemoryPresent:1;
				UINT8 cif16AdditionalPictureMemoryPresent:1;
				UINT8 bigCpfAdditionalPictureMemoryPresent:1;
				
				switch{
					case sqcifAdditionalPictureMemoryPresent : 
						AsnPerConstrainedInteger(1, 256) sqcifAdditionalPictureMemory = FormatString("%d (frames)", ConstrainedValue);
				}
				switch{
					case qcifAdditionalPictureMemoryPresent :
						AsnPerConstrainedInteger(1, 256) qcifAdditionalPictureMemory = FormatString("%d (frames)", ConstrainedValue);
				}
				switch{
					case cifAdditionalPictureMemoryPresent :
						AsnPerConstrainedInteger(1, 256) cifAdditionalPictureMemory = FormatString("%d (frames)", ConstrainedValue);
				}
				switch{
					case cif4AdditionalPictureMemoryPresent : 
						AsnPerConstrainedInteger(1, 256) cif4AdditionalPictureMemory = FormatString("%d (frames)", ConstrainedValue);
				}
				switch{
					case cif16AdditionalPictureMemoryPresent : 
						AsnPerConstrainedInteger(1, 256) cif16AdditionalPictureMemory = FormatString("%d (frames)", ConstrainedValue);
				}
				switch{
					case bigCpfAdditionalPictureMemoryPresent : 
						AsnPerConstrainedInteger(1, 256) bigCpfAdditionalPictureMemory = FormatString("%d (frame(s))", ConstrainedValue);
				}
				switch{
					case additionalPictureMemoryExtension: 
						_struct Extension{};
				}
			}
	}
	AsnPerBoolean(0) videoMux;
	struct videoBackChannelSend = RefPictureSelectionvideoBackChannelSendTable(ExtensionBit, videoBackChannelSendChoice)	// CHOICE
	{
		UINT8 ExtensionBit:1;
		switch
		{
			case ExtensionBit:
				_struct ExtensionChoice{};
			default:
				_struct NoneExtension{
					[Post.videoBackChannelSendChoice = ConstrainedValue]
					AsnPerConstrainedInteger(0, 4) ChoiceValue = RefPictureSelectionvideoBackChannelSendTable(ExtensionBit, videoBackChannelSendChoice);
				}
		}
	}
	switch{
		case RefPictureSelectionExtension:
			_struct Extension{
				AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
				UINT8 enhancedReferencePicSelectPresent:1;					
				switch{
					case enhancedReferencePicSelectPresent:
						struct enhancedReferencePicSelect{
							AsnPerLengthDeterminant length;
							[enhancedReferencePicSelectEndoffset = FrameOffset + PERLengthValue]
							
							UINT8 enhancedReferencePicSelectExtension:1;
							UINT8 subPictureRemovalParametersPresent:1;
							
							switch{
								case subPictureRemovalParametersPresent:
									struct subPictureRemovalParameters	//Sequence
									{
										UINT8 ExtensionBit:1;
										AsnPerConstrainedInteger(1, 128) mpuHorizMBs;
										AsnPerConstrainedInteger(1, 72) mpuVertMBs;
										AsnPerConstrainedInteger(1, 65536) mpuTotalNumber;
										switch{
											case ExtensionBit: 
												_struct Extension{};
										}
									}
							}
							switch{
								case enhancedReferencePicSelectExtension:
									_struct Extension{};
							}
							
							switch{
								case FrameBitOffset < enhancedReferencePicSelectEndoffset * 8:
									AsnPerPadding(enhancedReferencePicSelectEndoffset * 8 - FrameBitOffset) Padding;
							}
						}
				}
			}
	}
}
				
				

[DataTypeBitAlign]
struct CustomPictureClockFrequency	//Sequence
{
	UINT8 ExtensionBit:1;
	
	UINT8 sqcifMPIPresent:1;
	UINT8 qcifMPIPresent:1;
	UINT8 cifMPIPresent:1;
	UINT8 cif4MPIPresent:1;
	UINT8 cif16MPIPresent:1;
	
	AsnPerConstrainedInteger(1000, 1001) clockConversionCode;
	AsnPerConstrainedInteger(1, 127) clockDivisor;
	switch
	{
		case sqcifMPIPresent : AsnPerConstrainedInteger(1, 2048) sqcifMPI;
	}
	switch
	{
		case qcifMPIPresent : AsnPerConstrainedInteger(1, 2048) qcifMPI;
	}
	switch
	{
		case cifMPIPresent : AsnPerConstrainedInteger(1, 2048) cifMPI;
	}
	switch
	{
		case cif4MPIPresent : AsnPerConstrainedInteger(1, 2048) cif4MPI;
	}
	switch
	{
		case cif16MPIPresent : AsnPerConstrainedInteger(1, 2048) cif16MPI;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension{};
	}
}


[DataTypeBitAlign]
struct CustomPictureFormat{		//Sequence
	UINT8 CustomPictureFormatExtension:1;
	AsnPerConstrainedInteger(1, 2048) maxCustomPictureWidth = FormatString("%d pixels", ConstrainedValue*4);
	AsnPerConstrainedInteger(1, 2048) maxCustomPictureHeight = FormatString("%d pixels", ConstrainedValue*4);
	AsnPerConstrainedInteger(1, 2048) minCustomPictureWidth = FormatString("%d pixels", ConstrainedValue*4);
	AsnPerConstrainedInteger(1, 2048) minCustomPictureHeight = FormatString("%d pixels", ConstrainedValue*4);
	struct mPI{
		UINT8 mPIExtension:1;
		UINT8 standardMPIPresent:1;
		UINT8 customPCFPresent:1;
		
		switch{
			case standardMPIPresent: AsnPerConstrainedInteger(1, 31) standardMPI;
		}
		switch{
			case customPCFPresent:
				_struct customPCF{
					[post.AsnPerConstrainedIntegerSize = ConstrainedValue]		
					AsnPerConstrainedInteger(1, 16) Size;
					
					while [AsnPerConstrainedIntegerSize >0 ]
					{
						[AsnPerConstrainedIntegerSize = AsnPerConstrainedIntegerSize -1]
						struct customPCF{
							UINT8 clockConversionCodePresent:1;
							AsnPerConstrainedInteger(1000, 1001) clockConversionCode;
							AsnPerConstrainedInteger(1, 127) clockDivisor;
							AsnPerConstrainedInteger(1, 2048) customMPI;
							
							switch{
								case clockConversionCodePresent:
									_struct Extension{
									AsnPerNormallySmallNonnegativeWholeNumber ExtensionNumber;
									AsnPerAlign Padding;
									};
							}
						}
					}
				}
		}
		switch{
			case mPIExtension:
				_struct Extension{};
		}
	}
	
	struct pixelAspectInformation{
		UINT8 pixelAspectInformationExtension:1;
		switch{
			case pixelAspectInformationExtension:
				_struct Extension{};
			default:
				_struct nonExtension{
					AsnPerConstrainedInteger(0, 2) ChoiceValue;
					switch(ConstrainedValue){
						case 0: AsnPerBoolean(0) anyPixelAspectRatio;
						case 1:
							_struct pixelAspectCode{
								[post.pixelAspectCodeSize = ConstrainedValue]
								AsnPerConstrainedInteger(1, 14) Size;
								
								while [pixelAspectCodeSize > 0]
								{
									[pixelAspectCodeSize = pixelAspectCodeSize -1 ]
									AsnPerConstrainedInteger(1, 14) pixelAspectCode;
								}
							}
						case 2: 
							_struct extendedPAR{
								[post.extendedPARSize = ConstrainedValue]
								AsnPerConstrainedInteger(1, 256) Size;
								
								while [extendedPARSize > 0]
								{
									[extendedPARSize = extendedPARSize -1]
									struct extendedPAR{
										UINT8 extendedPARExtension:1;
										AsnPerConstrainedInteger(1, 255) width;
										AsnPerConstrainedInteger(1, 255) height;
										
										switch{
											case extendedPARExtension:
												_struct Extension{};
										}
									}
								}
							}
						}
				}
		}
	}
	switch{
		case CustomPictureFormatExtension:
			_struct Extension{};
	}
}

[DataTypeBitAlign]
struct H263VideoModeCombos{		//Squence
	UINT8 H263VideoModeCombosExtension:1;
	H263ModeComboFlags h263VideoUncoupledModes;
	
	[post.h263VideoCoupledModesSize = ConstrainedValue]
	AsnPerConstrainedInteger(1, 16) Size;
	
	while [h263VideoCoupledModesSize >0]
	{
		[h263VideoCoupledModesSize = h263VideoCoupledModesSize -1]
		H263ModeComboFlags h263ModeComboFlags;
	}
	
	switch{
		case H263VideoModeCombosExtension:
			_struct Extension{};
	}
}


[DataTypeBitAlign]
struct G729Extensions	//Sequence
{
	UINT8 ExtensionBit:1;	
	UINT8 audioUnitPresent:1;	
	switch
	{
		case audioUnitPresent : AsnPerConstrainedInteger(1, 256) audioUnit;
	}
	AsnPerBoolean(0) annexA;
	AsnPerBoolean(0) annexB;
	AsnPerBoolean(0) annexD;
	AsnPerBoolean(0) annexE;
	AsnPerBoolean(0) annexF;
	AsnPerBoolean(0) annexG;
	AsnPerBoolean(0) annexH;
	switch{
		case ExtensionBit: 
			_struct Extension{};
	}
}



[DataTypeBitAlign]
struct VBDMode	//Sequence
{
	UINT8 ExtensionBit:1;	
	AudioMode type;
	switch{
		case ExtensionBit: 
			_struct Extension{};
	}
}


[DataTypeBitAlign]
struct VBDCapability	//Sequence
{
	UINT8 ExtensionBit:1;
	AudioCapability type;
	switch
	{
		case ExtensionBit: 
			_struct Extension{};
	}
}


[DataTypeBitAlign]
struct NoPTAudioTelephonyEventCapability	//Sequence
{
	UINT8 ExtensionBit:1;
	AsnPerGeneralString audioTelephoneEvent;
	switch
	{
		case ExtensionBit: 
			_struct Extension{};
	}
}


[DataTypeBitAlign]
struct NoPTAudioToneCapability	//Sequence
{
	UINT8 ExtensionBit:1;
	switch
	{
		case ExtensionBit: 
			_struct Extension{};
	}
}


[DataTypeBitAlign]
struct RedundancyEncodingElement	//Sequence
{
	UINT8 ExtensionBit:1;	
	UINT8 payloadTypePresent:1;
	
	DataType dataType;
	switch
	{
		case payloadTypePresent : AsnPerConstrainedInteger(0, 127) payloadType;
	}
	switch
	{
		case ExtensionBit: 
			_struct Extension{};
	}
}