//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Active Directory Web Services: Data Model and Common Elements
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-ADDM]: Active Directory Web Services: Data Model and Common Elements (5.1)
//#
//#  Comments:               Microsoft implementation is encrypted
//#
//#  Revision Class and Date:Major, 8/24/2009
//#                          Minor, 3/11/2010
//#
//####

//
// Element FaultDetail
//
[RegisterBefore(SoapDetail.OtherElement, ADDMadFaultDetailElement, StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false).contains("FaultDetail") 
				&& Contains( Property.SoapEnvelopeAttributes, "http://schemas.microsoft.com/2008/1/ActiveDirectory" ))]
struct ADDMadFaultDetailElement
{
	[Post.Local.ADDMadFaultDetailElement_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("FaultDetail") STag;
	switch
	{
		Case !Local.ADDMadFaultDetailElement_IsEmpty:
			struct
			{
				ADDMadFaultDetailType FaultDetailType;
				XmlTag("FaultDetail") ETag;
			}
	}
}

//
// ComplexType FaultDetailType
//
Struct ADDMadFaultDetailType
{
	Switch
	{
		Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ArgumentError"):
			struct ArgumentError = this.STag.ToString
			{
				[Post.Local.ArgumentError_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ArgumentError") STag;
				switch
				{
					Case !Local.ArgumentError_IsEmpty:
						struct
						{
							ADDMadArgumentErrorType ArgumentError;
							XmlTag("ArgumentError") ETag;
						}
				}
			}
			
		Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "DirectoryError"):
			struct DirectoryError = this.STag.ToString
			{
				[Post.Local.DirectoryError_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("DirectoryError") STag;
				switch
				{
					Case !Local.DirectoryError_IsEmpty:
						struct
						{
							ADDMadDirectoryErrorType DirectoryError;
							XmlTag("DirectoryError") ETag;
						}
				}
			}
			
		Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "InvalidAttributeType"):
			struct InvalidAttributeType = this.InvalidAttributeType
			{
				[Post.Local.InvalidAttributeType_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("InvalidAttributeType") STag;
				switch
				{
					Case !Local.InvalidAttributeType_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) InvalidAttributeType;
							XmlTag("InvalidAttributeType") ETag;
						}
				}
			}
			
		Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "InvalidOperation"):
			struct InvalidOperation = this.InvalidOperation
			{
				[Post.Local.InvalidOperation_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("InvalidOperation") STag;
				switch
				{
					Case !Local.InvalidOperation_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) InvalidOperation;
							XmlTag("InvalidOperation") ETag;
						}
				}
			}
			
		Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "InvalidChange"):
			struct InvalidChange = this.STag.ToString
			{
				[Post.Local.InvalidChange_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("InvalidChange") STag;
				switch
				{
					Case !Local.InvalidChange_IsEmpty:
						struct
						{
							ADDMadChangeType InvalidChange;
							XmlTag("InvalidChange") ETag;
						}
				}
			}
			
		Case Contains(StringTerm(FrameData, FrameOffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "InvalidAttributeTypeOrValue"):
			struct InvalidAttributeTypeOrValue = this.STag.ToString
			{
				[Post.Local.InvalidAttributeTypeOrValue_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("InvalidAttributeTypeOrValue") STag;
				switch
				{
					Case !Local.InvalidAttributeTypeOrValue_IsEmpty:
						struct
						{
							ADDMadInvalidAttributeTypeOrValueType InvalidAttributeTypeOrValue;
							XmlTag("InvalidAttributeTypeOrValue") ETag;
						}
				}
			}
			
		Default:
			ReportParserError("ParserErrorProtocolClassMsOffice", "ADDM", "There is no such choice") ChoiceError;
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Error") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct Error = this.Error
			{
				[Post.Local.Error_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Error") STag;
				switch
				{
					Case !Local.Error_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Error;
							XmlTag("Error") ETag;
						}
				}
			}
	}
	
}

//
// ComplexType ArgumentErrorType
//
Struct ADDMadArgumentErrorType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Message") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct Message = this.Message
			{
				[Post.Local.Message_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Message") STag;
				switch
				{
					Case !Local.Message_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Message;
							XmlTag("Message") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ParameterName") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct ParameterName = this.ParameterName
			{
				[Post.Local.ParameterName_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ParameterName") STag;
				switch
				{
					Case !Local.ParameterName_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) ParameterName;
							XmlTag("ParameterName") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ShortMessage") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct ShortMessage = this.ShortMessage
			{
				[Post.Local.ShortMessage_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ShortMessage") STag;
				switch
				{
					Case !Local.ShortMessage_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) ShortMessage;
							XmlTag("ShortMessage") ETag;
						}
				}
			}
			
	}
	
}

//
// ComplexType DirectoryErrorType
//
Struct ADDMadDirectoryErrorType
{
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Message") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct Message = this.Message
			{
				[Post.Local.Message_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Message") STag;
				switch
				{
					Case !Local.Message_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Message;
							XmlTag("Message") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ErrorCode") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct ErrorCode = this.ErrorCode
			{
				[Post.Local.ErrorCode_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ErrorCode") STag;
				switch
				{
					Case !Local.ErrorCode_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) ErrorCode;
							XmlTag("ErrorCode") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ExtendedErrorMessage") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct ExtendedErrorMessage = this.ExtendedErrorMessage
			{
				[Post.Local.ExtendedErrorMessage_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ExtendedErrorMessage") STag;
				switch
				{
					Case !Local.ExtendedErrorMessage_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) ExtendedErrorMessage;
							XmlTag("ExtendedErrorMessage") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "MatchedDN") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct MatchedDN = this.MatchedDN
			{
				[Post.Local.MatchedDN_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("MatchedDN") STag;
				switch
				{
					Case !Local.MatchedDN_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) MatchedDN;
							XmlTag("MatchedDN") ETag;
						}
				}
			}
			
	}
	
	While [Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Referral") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</")]
	{
		struct Referral = this.Referral
		{
			[Post.Local.Referral_IsEmpty = Property.IsXmlEmptyElement]
			XmlTag("Referral") STag;
			switch
			{
				Case !Local.Referral_IsEmpty:
					struct
					{
						StringTerm(Property.XMLEncoding, "<", true, false, false) Referral;
						XmlTag("Referral") ETag;
					}
			}
		}
		
	}
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "Win32ErrorCode") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct Win32ErrorCode = this.Win32ErrorCode
			{
				[Post.Local.Win32ErrorCode_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("Win32ErrorCode") STag;
				switch
				{
					Case !Local.Win32ErrorCode_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) Win32ErrorCode;
							XmlTag("Win32ErrorCode") ETag;
						}
				}
			}
			
	}
	
	Switch
	{
		Case Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "ShortMessage") && !Contains(StringTerm(Framedata, Frameoffset, Property.XMLEncoding, Property.XMLElementNameTerm, true, false, false), "</"):
			struct ShortMessage = this.ShortMessage
			{
				[Post.Local.ShortMessage_IsEmpty = Property.IsXmlEmptyElement]
				XmlTag("ShortMessage") STag;
				switch
				{
					Case !Local.ShortMessage_IsEmpty:
						struct
						{
							StringTerm(Property.XMLEncoding, "<", true, false, false) ShortMessage;
							XmlTag("ShortMessage") ETag;
						}
				}
			}
			
	}
	
}

//
// ComplexType ChangeType
//
Struct ADDMadChangeType
{
	struct AttributeType = this.STag.ToString
	{
		[Post.Local.AttributeType_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("AttributeType") STag;
		switch
		{
			Case !Local.AttributeType_IsEmpty:
				struct
				{
					ADDMdaAttributeType AttributeType;
					XmlTag("AttributeType") ETag;
				}
		}
	}
	
	struct AttributeValue = this.STag.ToString
	{
		[Post.Local.AttributeValue_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("AttributeValue") STag;
		switch
		{
			Case !Local.AttributeValue_IsEmpty:
				struct
				{
					ADDMdaAttributeValue AttributeValue;
					XmlTag("AttributeValue") ETag;
				}
		}
	}
	
}

//
// ComplexType InvalidAttributeTypeOrValueType
//
Struct ADDMadInvalidAttributeTypeOrValueType
{
	struct AttributeType = this.STag.ToString
	{
		[Post.Local.AttributeType_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("AttributeType") STag;
		switch
		{
			Case !Local.AttributeType_IsEmpty:
				struct
				{
					ADDMdaAttributeType AttributeType;
					XmlTag("AttributeType") ETag;
				}
		}
	}
	
	struct AttributeValue = this.STag.ToString
	{
		[Post.Local.AttributeValue_IsEmpty = Property.IsXmlEmptyElement]
		XmlTag("AttributeValue") STag;
		switch
		{
			Case !Local.AttributeValue_IsEmpty:
				struct
				{
					ADDMdaAttributeValue AttributeValue;
					XmlTag("AttributeValue") ETag;
				}
		}
	}
	
}

//
// ComplexType ExtensibleType
//
Struct ADDMdaExtensibleType
{
	While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
	{
		XmlElement(true) ExtensibleType;
	}
}

//
// ComplexType AttributeType
//
Struct ADDMdaAttributeType
{
	ADDMdaExtensibleType AttributeType;
}

Struct ADDMdaAttributeValue = this.STag.ToString
{
	[Post.Local.ValueXmlType_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("ValueXmlType") STag;
	switch
	{
		Case !Local.ValueXmlType_IsEmpty:
			struct
			{
				While ElementNodes[String(FrameData, FrameOffset, Property.XMLEncoding, 1) == "<" && String(FrameData, FrameOffset, Property.XMLEncoding, 2) != "</"]
				{
					XmlElement(true) AttributeValue;
				}
				XmlTag("ValueXmlType") ETag;
			}
	}
}

//
//	No used, waitting for the implement of WXFR
//
Struct ADDMObjectReferenceProperty = this.STag.ToString
{
	[Post.Local.ObjectReferenceProperty_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("objectReferenceProperty") STag;
	switch
	{
		Case !Local.ObjectReferenceProperty_IsEmpty:
			struct
			{
				ADDMValue Value;
				XmlTag("objectReferenceProperty") ETag;
			}
	}
}

//
//	No used, waitting for the implement of ADWS protocol set
//
Struct ADDMContainerHierarchyParent = this.STag.ToString
{
	[Post.Local.ContainerHierarchyParent_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("container-hierarchy-parent") STag;
	switch
	{
		Case !Local.ContainerHierarchyParent_IsEmpty:
			struct
			{
				ADDMValue Value;
				XmlTag("container-hierarchy-parent") ETag;
			}
	}
}

//
//	No used, waitting for the implement of ADWS protocol set
//
Struct ADDMDistinguishedName = this.STag.ToString
{
	[Post.Local.DistinguishedName_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("distinguishedName") STag;
	switch
	{
		Case !Local.DistinguishedName_IsEmpty:
			struct
			{
				ADDMValue Value;
				XmlTag("distinguishedName") ETag;
			}
	}
}

//
//	No used, waitting for the implement of ADWS protocol set
//
Struct ADDMRelativeDistinguishedName = this.STag.ToString
{
	[Post.Local.RelativeDistinguishedName_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("relativeDistinguishedName") STag;
	switch
	{
		Case !Local.RelativeDistinguishedName_IsEmpty:
			struct
			{
				ADDMValue Value;
				XmlTag("relativeDistinguishedName") ETag;
			}
	}
}

//
//	No used, waitting for the implement of ADWS protocol set
//
Struct ADDMInstance = this.Value
{
	[Post.Local.Instance_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("instance") STag;
	switch
	{
		Case !Local.Instance_IsEmpty:
			struct
			{
				StringTerm(Property.XMLEncoding, "<", true, false, false) Value;
				XmlTag("instance") ETag;
			}
	}
}

Struct ADDMValue = this.Value
{
	[Post.Local.Value_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("value") STag;
	switch
	{
		Case !Local.Value_IsEmpty:
			struct
			{
				StringTerm(Property.XMLEncoding, "<", true, false, false) Value;
				XmlTag("value") ETag;
			}
	}
}

//
// ComplexType SelectionProperty - No used, waitting for the implement of MS-WSDS
//
Struct ADDMSelectionProperty = this.Value
{
	[Post.Local.SelectionProperty_IsEmpty = Property.IsXmlEmptyElement]
	XmlTag("SelectionProperty") STag;
	switch
	{
		Case !Local.SelectionProperty_IsEmpty:
			struct
			{
				StringTerm(Property.XMLEncoding, "<", true, false, false) Value;
				XmlTag("SelectionProperty") ETag;
			}
	}
}
