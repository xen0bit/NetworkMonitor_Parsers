//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-RPC-Local
//#
//#  Details:                
//#
//#  Public References:      RPC-Local.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 11/3/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsRPC, "{6ad52b32-d609-4be9-ae07-ce8dae937e39}")]
Protocol RPCLocal_MicrosoftWindowsRPC = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] RPCLocal_RpcEEInfoEvent RpcEEInfoEvent;
		case 2: [property.ETLSummary = this.ToString] RPCLocal_RpcFwRejectEvent RpcFwRejectEvent;
		case 3: [property.ETLSummary = this.ToString] RPCLocal_RpcGeneralDebugEvent RpcGeneralDebugEvent;
		case 4: [property.ETLSummary = this.ToString] RPCLocal_RPCLogEvent RPCLogEvent;
		case 5: [property.ETLSummary = this.ToString] RPCLocal_RpcClientCallStartEvent RpcClientCallStartEvent;
		case 6: [property.ETLSummary = this.ToString] RPCLocal_RpcServerCallStartEvent RpcServerCallStartEvent;
		case 7: [property.ETLSummary = this.ToString] RPCLocal_RpcClientCallEndEvent RpcClientCallEndEvent;
		case 8: [property.ETLSummary = this.ToString] RPCLocal_RpcServerCallEndEvent RpcServerCallEndEvent;
		case 9: [property.ETLSummary = this.ToString] RPCLocal_RpcRaiseExceptionEvent RpcRaiseExceptionEvent;
		case 10: [property.ETLSummary = this.ToString] RPCLocal_RpcPacketReceivedEvent RpcPacketReceivedEvent;
		case 11: [property.ETLSummary = this.ToString] RPCLocal_RpcPacketSentEvent RpcPacketSentEvent;
		case 12: [property.ETLSummary = this.ToString] RPCLocal_RpcHttpLogEventStartEvent RpcHttpLogEventStartEvent;
		case 13: [property.ETLSummary = this.ToString] RPCLocal_RpcHttpLogEventStopEvent RpcHttpLogEventStopEvent;
		case 14: [property.ETLSummary = this.ToString] RPCLocal_RpcRegisterEvent RpcRegisterEvent;
		case 15: [property.ETLSummary = this.ToString] RPCLocal_RpcUnregisterEvent RpcUnregisterEvent;
		case 16: [property.ETLSummary = this.ToString] RPCLocal_RpcUseProtocolEvent RpcUseProtocolEvent;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table RPCLocal_SubjectTypes(value)
{
	switch(value)
	{
		case 104: "HANDLE";
		case 110: "CCONN";
		case 78: "SCONN";
		case 97: "CASSOC";
		case 65: "SASSOC";
		case 99: "CCALL";
		case 67: "SCALL";
		case 112: "PACKET";
		case 101: "CENDPOINT";
		case 69: "ENGINE";
		case 46: "ASSOC";
		case 109: "MUTEX";
		case 84: "STABLE";
		case 68: "ADDRESS";
		case 72: "HEAP";
		case 98: "BCACHE";
		case 66: "BCACHE2";
		case 114: "REFOBJ";
		case 116: "THREAD";
		case 111: "TRANS_CONN";
		case 118: "EVENT";
		case 120: "EXCEPT";
		case 108: "CTXHANDLE";
		case 73: "EEINFO";
		case 71: "GC";
		case 105: "IF";
		case 83: "SECCRED";
		case 50: "HTTPv2";
		case 79: "CORRUPT";
		case 76: "ALPC";
		case 80: "PROVIDER";
		case 70: "CAUSAL_F";
		case 87: "PROTOCOL";
		case 115: "SSECCTX";
		case 77: "RESERVED_MEM";
		case 119: "TP_WAIT";
		case 107: "TP_WORK";
		case 117: "TP_TIMER";
		case 106: "TP_IO";
		case 100: "TP_ALPC";
		case 102: "TP_CALLBACK";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table RPCLocal_EventTypes(value)
{
	switch(value)
	{
		case 67: "CREATE";
		case 68: "DELETE";
		case 99: "START";
		case 100: "STOP";
		case 43: "INC";
		case 45: "DEC";
		case 127: "PROC";
		case 97: "ACK";
		case 76: "CALLBACK";
		case 78: "NOTIFY";
		case 65: "APC";
		case 83: "STATUS";
		case 120: "DISASSOC";
		case 61: "STATE";
		case 80: "POP";
		case 81: "PUSH";
		case 107: "PKT_IN";
		case 75: "PKT_OUT";
		case 98: "BUFFER_IN";
		case 66: "BUFFER_OUT";
		case 88: "BUFFER_FAIL";
		case 82: "ABORT";
		case 115: "SET";
		case 113: "QUERY";
		case 101: "SUSPEND";
		case 69: "RESUME";
		case 38: "LOCK_WRITER";
		case 124: "LOCK_READER";
		case 33: "LOCK_UNLOCK";
		case 126: "CALL_STATE";
		case 85: "PCONTEXT_ALLOC";
		case 117: "PCONTEXT_DELETE";
		case 42: "DROP";
		case 35: "DELAY";
		case 112: "PRUNE";
		case 84: "TRANSFER";
		case 114: "RESOLVED";
		case 119: "WINDOW";
		case 109: "REMOVED";
		case 44: "CLEANUP";
		case 79: "BHCOPY";
		case 116: "ALLOCATE";
		case 111: "OPER";
		case 105: "SEC_INIT1";
		case 73: "SEC_INIT3";
		case 106: "SEC_ACCEPT1";
		case 74: "SEC_ACCEPT3";
		case 71: "SEC_SIGN_OR_SEAL";
		case 86: "SEC_VERIFY_OR_UNSEAL";
		case 87: "TP_WAIT";
		case 118: "TP_CONVERT";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table RPCLocal_AuthenticationLevels(value)
{
	switch(value)
	{
		case 0: "Default";
		case 1: "None";
		case 2: "Connect";
		case 3: "Call";
		case 4: "Packet";
		case 5: "Packet Integrity";
		case 6: "Packet Privacy";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table RPCLocal_AuthenticationServices(value)
{
	switch(value)
	{
		case 9: "Negotiate";
		case 10: "NTLM";
		case 14: "SChannel";
		case 16: "Kerberos";
		case 20: "Kernel";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table RPCLocal_ProtocolSequences(value)
{
	switch(value)
	{
		case 1: "TCP";
		case 2: "Named Pipes";
		case 3: "LRPC";
		case 4: "RPC/HTTP";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table RPCLocal_ImpersonationLevels(value)
{
	switch(value)
	{
		case 0: "Default";
		case 1: "Anonymous";
		case 2: "Identify";
		case 3: "Impersonate";
		case 4: "Delegate";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table RPCLocal_RpcHttp2Operations(value)
{
	switch(value)
	{
		case 1: "SEND";
		case 2: "RECV";
		case 3: "COMPLETE_HELPER";
		case 4: "RECV_COMPLETE";
		case 5: "SEND_COMPLETE";
		case 6: "FREE_OBJECT";
		case 7: "ABORT";
		case 8: "IIS_IO_COMPLETED";
		case 9: "CHANNEL_RECYCLE";
		case 10: "DIRECT_SEND_COMPLETE";
		case 11: "SYNC_RECV";
		case 12: "COMPLEX_T_SEND";
		case 13: "COMPLEX_T_RECV";
		case 14: "DIRECT_RECV_COMPLETE";
		case 15: "WINHTTP_CALLBACK";
		case 16: "WHTTP_DRECV_COMPLETE";
		case 17: "WHTTP_DSEND_COMPLETE";
		case 18: "WHTTP_DELAYED_RECV";
		case 19: "WHTTP_ERROR";
		case 20: "OPEN";
		case 21: "CHECK_RECV_COMPLETE";
		case 22: "CLOSE";
		case 23: "SEND_CANCELLED";
		case 24: "UNPLUG";
		case 128: "WinHttpOpen";
		case 129: "WinHttpSetStatusCallback";
		case 130: "WinHttpSetOption";
		case 131: "WinHttpConnect";
		case 132: "WinHttpOpenRequest";
		case 133: "WinHttpQueryOption";
		case 134: "WinHttpSendRequest";
		case 135: "WinHttpWriteData";
		case 136: "WinHttpReceiveResponse";
		case 137: "WinHttpReadData";
		case 138: "WinHttpCloseHandle";
		case 139: "WinHttpQueryHeaders";
		case 140: "WinHttpQueryDataAvailable";
		case 141: "WinHttpQueryAuthSchemes";
		case 142: "WinHttpSetCredentials";
		case 143: "WinHttpAddRequestHeaders";
		case 144: "WinHttpGetIEProxyConfigForCurrentUser";
		case 145: "WinHttpGetProxyForUrl";
		case 146: "WinHttpAutoLogon";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table RPCLocal_RpcHttp2ObjectTypes(value)
{
	switch(value)
	{
		case 1: "SOCKET_CHANNEL";
		case 2: "PROXY_SOCKET_CHANNEL";
		case 3: "CHANNEL";
		case 4: "BOTTOM_CHANNEL";
		case 5: "IIS_CHANNEL";
		case 6: "RAW_CONNECTION";
		case 7: "INITIAL_RAW_CONNECTION";
		case 8: "IIS_SENDER_CHANNEL";
		case 9: "ENDPOINT_RECEIVER";
		case 10: "PLUG_CHANNEL";
		case 11: "CLIENT_VC";
		case 12: "SERVER_VC";
		case 13: "INPROXY_VC";
		case 14: "OUTPROXY_VC";
		case 15: "PROXY_VC";
		case 16: "CDATA_ORIGINATOR";
		case 17: "CLIENT_CHANNEL";
		case 18: "CALLBACK";
		case 19: "FLOW_CONTROL_SENDER";
		case 20: "WINHTTP_CALLBACK";
		case 21: "WINHTTP_CHANNEL";
		case 22: "WINHTTP_RAW";
		case 23: "PROXY_RECEIVER";
		case 24: "SERVER_CHANNEL";
		case 25: "FRAGMENT_RECEIVER";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct RPCLocal_RpcEEInfoEvent = FormatString("Extended Error Information:   ProcessName:  %s   ComputerName:  %s   ProcessId:  %s   Status:  %s   DetectionLocation:  %s", ImageName.ToString, ComputerName.ToString, ProcessID.ToString, Status.ToString, DetectionLocation.ToString)
{
	UnicodeString ImageName;
	UnicodeString ComputerName;
	UINT32 ProcessID;
	SystemTime TimeStamp;
	UINT32 GeneratingComponent;
	UINT32 Status;
	UINT16 DetectionLocation;
	UINT16 Flags;
	UINT16 NumberOfParameters;
	RPCLocal_Params Params[NumberOfParameters]; // Struct Array
}
Struct RPCLocal_RpcFwRejectEvent = FormatString("An RPC call was blocked by an RPC firewall filter.   ProcessName:  %s   InterfaceUuid:  %s   RpcFilterKey: %s", ImangeName.ToString, InterfaceUuid.ToString, FilterKey.ToString)
{
	UnicodeString ImangeName;
	GUID(true) InterfaceUuid;
	GUID(true) FilterKey;
}
Struct RPCLocal_RpcGeneralDebugEvent = FormatString("An error occured.   ProcessName:  %s   DetectionLocation:  %s   Status:  %s   AdditionaData:  %s   AddtionalData:  %s", ImageName.ToString, DetectionLocation.ToString, Status.ToString, AdditionalData1.ToString, AdditionalData2.ToString)
{
	UnicodeString ImageName;
	UINT16 DetectionLocation;
	UINT32 Status;
	UINT32 AdditionalData1;
	UINT32 AdditionalData2;
}
Struct RPCLocal_RPCLogEvent = FormatString("RPC Log Event.   Subject:  %s  Verb:  %s  SubjectPointer:  %s  ObjectPointer:  %s  Data:  %s", Subject.ToString, Verb.ToString, SubjectPointer.ToString, ObjectPointer.ToString, DataPointer.ToString)
{
	UINT8 Subject = RPCLocal_SubjectTypes(this);
	UINT8 Verb = RPCLocal_EventTypes(this);
	UINT64 SubjectPointer;
	UINT64 ObjectPointer;
	UINT64 DataPointer;
}
Struct RPCLocal_RpcClientCallStartEvent = FormatString("Client RPC call started.  InterfaceUuid:  %s  OpNum:  %s  Protocol:  %s  NetworkAddress  %s  Endpoint  %s  Binding Options  %s  Authentication Level  7  Authentication Service  8 Impersonation Level  9", InterfaceUuid.ToString, ProcNum.ToString, Protocol.ToString, NetworkAddress.ToString, Endpoint.ToString, Options.ToString)
{
	GUID(true) InterfaceUuid;
	UINT32 ProcNum;
	UINT32 Protocol = RPCLocal_ProtocolSequences(this);
	UnicodeString NetworkAddress;
	UnicodeString Endpoint;
	UnicodeString Options;
	UINT32 AuthenticationLevel = RPCLocal_AuthenticationLevels(this);
	UINT32 AuthenticationService = RPCLocal_AuthenticationServices(this);
	UINT32 ImpersonationLevel = RPCLocal_ImpersonationLevels(this);
}
Struct RPCLocal_RpcServerCallStartEvent = FormatString("Server RPC call started.  InterfaceUuid:  %s  OpNum:  %s  Protocol:  %s  Endpoint  %s  Authentication Level  7  Authentication Service  8", InterfaceUuid.ToString, ProcNum.ToString, Protocol.ToString, Endpoint.ToString)
{
	GUID(true) InterfaceUuid;
	UINT32 ProcNum;
	UINT32 Protocol = RPCLocal_ProtocolSequences(this);
	UnicodeString NetworkAddress;
	UnicodeString Endpoint;
	UnicodeString Options;
	UINT32 AuthenticationLevel = RPCLocal_AuthenticationLevels(this);
	UINT32 AuthenticationService = RPCLocal_AuthenticationServices(this);
	UINT32 ImpersonationLevel = RPCLocal_ImpersonationLevels(this);
}
Struct RPCLocal_RpcClientCallEndEvent = FormatString("Client RPC call completed.  Status:  %s", Status.ToString)
{
	UINT32 Status;
}
Struct RPCLocal_RpcServerCallEndEvent = FormatString("Server RPC call was completed.  Status:  %s", Status.ToString)
{
	UINT32 Status;
}
Struct RPCLocal_RpcRaiseExceptionEvent = FormatString("Call failed due to RpcRaiseException.  Status:  %s", Status.ToString)
{
	UINT32 Status;
}
Struct RPCLocal_RpcPacketReceivedEvent = FormatString("RPC received a packet")
{
	UINT64 SubjectPointer;
	UINT32 FragmentSize;
	BLOB(FragmentSize) Fragment;
}
Struct RPCLocal_RpcPacketSentEvent = FormatString("RPC sent a packet")
{
	UINT64 SubjectPointer;
	UINT32 FragmentSize;
	BLOB(FragmentSize) Fragment;
}
Struct RPCLocal_RpcHttpLogEventStartEvent = FormatString("RPC/HTTP start event")
{
	UINT32 ObjectType = RPCLocal_RpcHttp2ObjectTypes(this);
	UINT32 Operation = RPCLocal_RpcHttp2Operations(this);
	UINT64 Address;
	UINT64 Data;
}
Struct RPCLocal_RpcHttpLogEventStopEvent = FormatString("RPC/HTTP stop event")
{
	UINT32 ObjectType = RPCLocal_RpcHttp2ObjectTypes(this);
	UINT32 Operation = RPCLocal_RpcHttp2Operations(this);
	UINT64 Address;
	UINT64 Data;
}
Struct RPCLocal_RpcRegisterEvent = FormatString("RPC interface registered.  Interface UUID %s TypeMgr %s Flags %s Max Calls %s", InterfaceUuid.ToString, TypeMgrUuid.ToString, Flags.ToString, MaxCalls.ToString)
{
	GUID(true) InterfaceUuid;
	GUID(true) TypeMgrUuid;
	UINT32 Flags;
	UINT32 MaxCalls;
}
Struct RPCLocal_RpcUnregisterEvent = FormatString("RPC interface unregistered.  Interface UUID %s TypeMgr", InterfaceUuid.ToString)
{
	GUID(true) InterfaceUuid;
	GUID(true) TypeMgrUuid;
	UINT32 Flags;
	UINT32 MaxCalls;
}
Struct RPCLocal_RpcUseProtocolEvent = FormatString("RPC Server bound to protocol.  Protocol %s Endpoint %s", Protocol.ToString, Endpoint.ToString)
{
	UnicodeString Protocol;
	UnicodeString Endpoint;
	UnicodeString NetworkAddress;
	UINT32 PendingQueueSize;
	UINT32 EndpointFlags;
	UINT32 NicFlags;
}
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsRPCEvents, "{f4aed7c7-a898-4627-b053-44a7caa12fcd}")]
Protocol RPCLocal_MicrosoftWindowsRPCEvents = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 2: [property.ETLSummary = this.ToString] RPCLocal_RPC_EVENTLOG_SYNC_PIPE_USE_ERR RPC_EVENTLOG_SYNC_PIPE_USE_ERR;
		case 3: [property.ETLSummary = this.ToString] RPCLocal_RPC_EVENTLOG_ASYNC_HWND_USE_ERR RPC_EVENTLOG_ASYNC_HWND_USE_ERR;
		case 4: [property.ETLSummary = this.ToString] RPCLocal_RPC_EVENTLOG_NS_USE_ERR RPC_EVENTLOG_NS_USE_ERR;
		case 5: [property.ETLSummary = this.ToString] RPCLocal_RPC_EVENTLOG_DG_PIPE_USE_ERR RPC_EVENTLOG_DG_PIPE_USE_ERR;
		case 6: [property.ETLSummary = this.ToString] RPCLocal_RPC_EVENTLOG_DG_SRV_USE_ERR RPC_EVENTLOG_DG_SRV_USE_ERR;
		case 7: [property.ETLSummary = this.ToString] RPCLocal_RPC_EVENTLOG_DG_CLI_USE_ERR RPC_EVENTLOG_DG_CLI_USE_ERR;
		case 8: [property.ETLSummary = this.ToString] RPCLocal_RPC_EVENTLOG_FW_EP_ADD_ERR RPC_EVENTLOG_FW_EP_ADD_ERR;
		case 9: [property.ETLSummary = this.ToString] RPCLocal_RPC_EVENTLOG_NDR_MCCP_FAILURE RPC_EVENTLOG_NDR_MCCP_FAILURE;
		case 10: [property.ETLSummary = this.ToString] RPCLocal_RPC_EVENTLOG_NDR_CONSTANT_IID_FAILURE RPC_EVENTLOG_NDR_CONSTANT_IID_FAILURE;
		case 11: [property.ETLSummary = this.ToString] RPCLocal_RPC_EVENTLOG_NDR_ALLOCATE_LEAK_FAILURE RPC_EVENTLOG_NDR_ALLOCATE_LEAK_FAILURE;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Struct RPCLocal_RPC_EVENTLOG_SYNC_PIPE_USE_ERR = FormatString("Application (%s) (PID: %s) is using Windows functionality that is not present in this release of Windows. For obtaining an updated version of the application, please, contact the application vendor. The technical information that needs to be conveyed to the application vendor is this: 'An RPC method using synchronous pipes has been called on on protocol sequence %s interface with unique identifier %s. Usage and support of synchronous pipes on this protocol sequence has been deprecated for this release of Windows. For information on the deprecation process, please, see http://go.microsoft.com/fwlink/?LinkId=36415.'  User Action Contact the application vendor for updated version of the application.", ApplicationName.ToString, ProcessId.ToString, RPCProtocolSequence.ToString, InterfaceGUID.ToString)
{
	UnicodeString ApplicationName;
	UINT32 ProcessId;
	UnicodeString RPCProtocolSequence;
	GUID(true) InterfaceGUID;
}
Struct RPCLocal_RPC_EVENTLOG_ASYNC_HWND_USE_ERR = FormatString("Application (%s) (PID: %s) is using Windows functionality that is not present in this release of Windows. For obtaining an updated version of the application, please, contact the application vendor. The technical information that needs to be conveyed to the application vendor is this: 'An RPC method using synchronous pipes has been called on on protocol sequence %s interface with unique identifier %s. Usage and support of synchronous pipes has been deprecated for this release of Windows. For information on the deprecation process, please, see http://go.microsoft.com/fwlink/?LinkId=36415.'  User Action Contact the application vendor for updated version of the application.", ApplicationName.ToString, ProcessId.ToString, RPCProtocolSequence.ToString, InterfaceGUID.ToString)
{
	UnicodeString ApplicationName;
	UINT32 ProcessId;
	UnicodeString RPCProtocolSequence;
	GUID(true) InterfaceGUID;
}
Struct RPCLocal_RPC_EVENTLOG_NS_USE_ERR = FormatString("Application (%s) (PID: %s) is using Windows functionality that is not present in this release of Windows. For obtaining an updated version of the application, please, contact the application vendor. The technical information that needs to be conveyed to the application vendor is this: 'An RPC method using the name service has been called. Usage and support for the RPC name service has been deprecated for this release of Windows.  For information on the deprecation process, please, see http://go.microsoft.com/fwlink/?LinkId=36415.'  User Action Contact the application vendor for updated version of the application.", ApplicationName.ToString, ProcessId.ToString)
{
	UnicodeString ApplicationName;
	UINT32 ProcessId;
}
Struct RPCLocal_RPC_EVENTLOG_DG_PIPE_USE_ERR = FormatString("Application (%s) (PID: %s) is using Windows functionality that is not present in this release of Windows. For obtaining an updated version of the application, please, contact the application vendor. The technical information that needs to be conveyed to the application vendor is this: 'An RPC method using pipes has been called on on protocol sequence %s interface with unique identifier %s. Usage and support of pipes on this protocol sequence has been deprecated for this release of Windows. For information on the deprecation process, please, see http://go.microsoft.com/fwlink/?LinkId=36415.'  User Action Contact the application vendor for updated version of the application.", ApplicationName.ToString, ProcessId.ToString, RPCProtocolSequence.ToString, InterfaceGUID.ToString)
{
	UnicodeString ApplicationName;
	UINT32 ProcessId;
	UnicodeString RPCProtocolSequence;
	GUID(true) InterfaceGUID;
}
Struct RPCLocal_RPC_EVENTLOG_DG_SRV_USE_ERR = FormatString("Application (%s) (PID: %s) is using Windows functionality that is not present in this release of Windows. For obtaining an updated version of the application, please, contact the application vendor. The technical information that needs to be conveyed to the application vendor is this:  'An RPC method has been called on a connectionless protocol sequence %s. Usage and support of this protocol sequence has been deprecated for this release of Windows. For information on the deprecation process, please, see http://go.microsoft.com/fwlink/?LinkId=36415.'  User Action Contact the application vendor for updated version of the application.", ApplicationName.ToString, ProcessId.ToString, RPCProtocolSequence.ToString)
{
	UnicodeString ApplicationName;
	UINT32 ProcessId;
	UnicodeString RPCProtocolSequence;
}
Struct RPCLocal_RPC_EVENTLOG_DG_CLI_USE_ERR = FormatString("Application (%s) (PID: %s) is using Windows functionality that is not present in this release of Windows. For obtaining an updated version of the application, please, contact the application vendor. The technical information that needs to be conveyed to the application vendor is this:  'An RPC method has been called on a connectionless protocol sequence %s and interface with unique identifier %s. Usage and support of this protocol sequence has been deprecated for this release of Windows. For information on the deprecation process, please, see http://go.microsoft.com/fwlink/?LinkId=36415.'  User Action Contact the application vendor for updated version of the application.", ApplicationName.ToString, ProcessId.ToString, RPCProtocolSequence.ToString, InterfaceGUID.ToString)
{
	UnicodeString ApplicationName;
	UINT32 ProcessId;
	UnicodeString RPCProtocolSequence;
	GUID(true) InterfaceGUID;
}
Struct RPCLocal_RPC_EVENTLOG_FW_EP_ADD_ERR = FormatString("Application (%s) (PID: %s) has failed to add endpoint %s:%s for interface with unique identifier %s with error %s.  User Action Verify that the machine has sufficient memory.  Verify that no other process is listening on the endpoint.", ApplicationName.ToString, ProcessId.ToString, RPCProtocolSequence.ToString, RPCEndpoint.ToString, InterfaceGUID.ToString, RPCStatus.ToString)
{
	UnicodeString ApplicationName;
	UINT32 ProcessId;
	UnicodeString RPCProtocolSequence;
	UnicodeString RPCEndpoint;
	GUID(true) InterfaceGUID;
	UINT32 RPCStatus;
}
Struct RPCLocal_RPC_EVENTLOG_NDR_MCCP_FAILURE = FormatString("Application (%s) (PID: %s) has failed to complete a COM/RPC call because of an invalid message from server.  User Action Try the operation again. If the problem persists, contact your system administrator.", ApplicationName.ToString, ProcessId.ToString)
{
	UnicodeString ApplicationName;
	UnicodeString ProcessId;
}
Struct RPCLocal_RPC_EVENTLOG_NDR_CONSTANT_IID_FAILURE = FormatString("Application (%s) (PID: %s) has failed to complete a COM call because an incorrect interface ID was passed as a parameter.  The expected Interface ID was %s, and the Interface ID returned was %s.  User Action Contact the application vendor for updated version of the application.", ApplicationName.ToString, ProcessId.ToString, ExpectedInterfaceID.ToString, ReceivedInterfaceID.ToString)
{
	UnicodeString ApplicationName;
	UnicodeString ProcessId;
	UnicodeString ExpectedInterfaceID;
	UnicodeString ReceivedInterfaceID;
}
Struct RPCLocal_RPC_EVENTLOG_NDR_ALLOCATE_LEAK_FAILURE = FormatString("Possible Memory Leak.  Application (%s) (PID: %s) has passed a non-NULL pointer to RPC for an [out] parameter marked [allocate(all_nodes)].  [allocate(all_nodes)] parameters are always reallocated; if the original pointer contained the address of valid memory, that memory will be leaked.  The call originated on the interface with UUID (%s), Method number (%s).  User Action: Contact your application vendor for an updated version of the application.", ApplicationName.ToString, ProcessId.ToString, InterfaceId.ToString, Method.ToString)
{
	UnicodeString ApplicationName;
	UnicodeString ProcessId;
	GUID(true) InterfaceId;
	INT32 Method;
}
struct RPCLocal_Params //Array Struct
{
	INT32 ParameterType;
	AsciiString AnsiValue;
	UnicodeString UnicodeValue;
	UINT32 LValue;
	UINT64 PValue;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsRPC_Keyword, "{6ad52b32-d609-4be9-ae07-ce8dae937e39}")]
struct RPCLocal_MicrosoftWindowsRPC_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsRPCEvents_Keyword, "{f4aed7c7-a898-4627-b053-44a7caa12fcd}")]
struct RPCLocal_MicrosoftWindowsRPCEvents_Keyword
{
	UINT64 Reserved1:64 = FormatString("(%s)", this.ToBitString);
}
