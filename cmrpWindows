//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Failover Cluster: Management API (ClusAPI) Protocol
//#
//#  Details:                
//#
//#  Microsoft References:   [MS-CMRP]: Failover Cluster: Management API (ClusAPI) Protocol Specification (9.0)
//#
//#  Comments:               Parser Framework: PAC v2.1.1577.0
//#                          Microsoft implementation is encrypted.
//#
//#  Revision Class and Date:Major, 6/22/2009
//#                          Minor, 3/2/2010
//#
//####

Protocol CMRP = FormatString( "%s %s%s%s%s%s", 
	Property.CMRPMethodName,
	Property.MSRPCPType ? "Response" : "Request",
	Property.MSRPCPfcFlags & 0x03 == 0x01 ? ", RPC first fragment" : "",
	Property.MSRPCCompleteFrag == 0 ? ", partial" : "",
	Property.MSRPCEncrypted == ConstEncTypeEncrypted ? ", *Encrypted*" : Property.MSRPCEncrypted == ConstEncTypeUnknown ? "*Un-Interpreted*" : "",
	Property.CMRPSummary && Property.MSRPCEncrypted == ConstEncTypeClearData ? ", " + Property.CMRPSummary : "" )
{
	[Property.CMRPSummary = ""]
	[Property.CMRPMethodName = CMRPMethodNameTable( Property.MSRPCOpnum )]
	Switch( Property.MSRPCOpnum )
	{
		Case 0:
			_Struct ApiOpenCluster
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s", WinErrorCodeNameTable(status) )]
									Struct
									{
										ErrorStatus status;
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 1:
			_Struct ApiCloseCluster
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Cluster;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										ContextHandle Cluster;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 2:
			_Struct ApiSetClusterName
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NewClusterName=%s", NewClusterName.ToString )]
									Struct
									{
										NdrWideString NewClusterName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 3:
			_Struct ApiGetClusterName
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ClusterName=%s NodeName=%s ReturnValue=%s", ClusterName.ToString, NodeName.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr ClusterName;
										NdrWideStringPtr NodeName;
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 4:
			_Struct ApiGetClusterVersion
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "MajorVersion=%u MinorVersion=%u BuildNumber=%u VendorId=%s CSDVersion=%s ReturnValue=%s", MajorVersion, MinorVersion, BuildNumber, VendorId.ToString, CSDVersion.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT16 MajorVersion;
										UINT16 MinorVersion;
										UINT16 BuildNumber;
										NdrWideStringPtr VendorId;
										NdrWideStringPtr CSDVersion;
										Align4 pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 5:
			_Struct ApiGetQuorumResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ResourceName=%s DeviceName=%s MaxQuorumLogSize=%u ReturnValue=%s", ResourceName.ToString, DeviceName.ToString, MaxQuorumLogSize, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr ResourceName;
										NdrWideStringPtr DeviceName;
										Align4 Pad;
										UINT32 MaxQuorumLogSize;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 6:
			_Struct ApiSetQuorumResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "DeviceName=%s MaxQuorumLogSize=%u", DeviceName.ToString, MaxQuorumLogSize )]
									Struct
									{
										ContextHandle Resource;
										NdrWideString DeviceName;
										Align4 Pad;
										UINT32 MaxQuorumLogSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 7:
			_Struct ApiCreateEnum
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Type=%u", Type )]
									Struct
									{
										UINT32 Type = cmrpApiCreateEnumTypeTable(this);
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										CMRPEnumListPtr(7) ReturnEnum;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 8:
			_Struct ApiOpenResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ResourceName=%s", ResourceName.ToString )]
									Struct
									{
										NdrWideString ResourceName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s ", WinErrorCodeNameTable(status) )]
									Struct
									{
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 9:
			_Struct ApiCreateResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ResourceName=%s ResourceType=%s Flags=%u", ResourceName.ToString, ResourceType.ToString, Flags )]
									Struct
									{
										ContextHandle Group;
										NdrWideString ResourceName;
										NdrWideString ResourceType;
										Align4 Pad;
										UINT32 Flags = this ? "" : "CLUSTER_RESOURCE_DEFAULT_MONITOR - The resource is co-located with other resources."
										{
											UINT32 Flag:1 = FormatString("   (%s) %s",this.ToString,this ? "CLUSTER_RESOURCE_SEPARATE_MONITOR - The resource is hosted separately from other resources.":"Unset");
											UINT32 Unused:31 = FormatString("(%s)",this.ToString);
										}
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s ", WinErrorCodeNameTable(status))]
									Struct
									{
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 10:
			_Struct ApiDeleteResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 11:
			_Struct ApiCloseResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										ContextHandle Resource;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 12:
			_Struct ApiGetResourceState
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "State=%u NodeName=%s GroupName=%s ReturnValue=%s", State, NodeName.ToString, GroupName.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 State = CMRPApiGetResourceStateStateTable(this);
										NdrWideStringPtr NodeName;
										NdrWideStringPtr GroupName;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 13:
			_Struct ApiSetResourceName
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ResourceName=%s", ResourceName.ToString )]
									Struct
									{
										ContextHandle Resource;
										NdrWideString ResourceName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 14:
			_Struct ApiGetResourceId
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Guid=%s ReturnValue=%s", Guid.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr Guid;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 15:
			_Struct ApiGetResourceType
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ResourceType=%s ReturnValue=%s", ResourceType.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr ResourceType;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 16:
			_Struct ApiFailResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 17:
			_Struct ApiOnlineResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 18:
			_Struct ApiOfflineResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 19:
			_Struct ApiAddResourceDependency
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
										ContextHandle DependsOn;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 20:
			_Struct ApiRemoveResourceDependency
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
										ContextHandle DependsOn;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 21:
			_Struct ApiCanResourceBeDependent
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
										ContextHandle ResourceDependent;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 22:
			_Struct ApiCreateResEnum
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Type=%u", Type )]
									Struct
									{
										ContextHandle Resource;
										UINT32 Type = CMRPApiCreateResEnumTypeTable(this);
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										CMRPEnumListPtr(22) ReturnEnum;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 23:
			_Struct ApiAddResourceNode
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
										ContextHandle Node;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 24:
			_Struct ApiRemoveResourceNode
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
										ContextHandle Node;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 25:
			_Struct ApiChangeResourceGroup
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
										ContextHandle Group;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 26:
			_Struct ApiCreateResourceType
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "TypeName=%s DisplayName=%s DllName=%s LooksAlive=%u IsAlive=%u", TypeName.ToString, DisplayName.ToString, DllName.ToString, LooksAlive, IsAlive )]
									Struct
									{
										NdrWideString TypeName;
										NdrWideString DisplayName;
										NdrWideString DllName;
										Align4 Pad;
										UINT32 LooksAlive;
										UINT32 IsAlive;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 27:
			_Struct ApiDeleteResourceType
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "TypeName=%s", TypeName.ToString )]
									Struct
									{
										NdrWideString TypeName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 28:
			_Struct ApiGetRootKey
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "SamDesired=%s", SamDesired )]
									Struct
									{
										CMRPRegSam SamDesired;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s", WinErrorCodeNameTable(status) )]
									Struct
									{
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 29:
			_Struct ApiCreateKey
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "SubKey=%s Options=%u SamDesired=%s", SubKey.ToString, Options, SamDesired )]
									Struct
									{
										ContextHandle Key;
										NdrWideString SubKey;
										Align4 Pad1;
										UINT32 Options;
										CMRPRegSam SamDesired;
										CMRPRpcSecurityAttributesPtr SecurityAttributes;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Disposition=%u Status=%s", Disposition, WinErrorCodeNameTable(status) )]
									Struct
									{
										UINT32 Disposition = CMRPApiCreateKeyDispositionTable(this);
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 30:
			_Struct ApiOpenKey
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "SubKey=%s SamDesired=%s", SubKey.ToString, SamDesired )]
									Struct
									{
										ContextHandle Key;
										NdrWideString SubKey;
										Align4 Pad;
										CMRPRegSam SamDesired;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s", WinErrorCodeNameTable(status) )]
									Struct
									{
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle hKey;
									}
							}
						}
				}
			}
		
		Case 31:
			_Struct ApiEnumKey
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Index=%u", Index )]
									Struct
									{
										ContextHandle Key;
										UINT32 Index;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "KeyName=%s ReturnValue=%s", KeyName.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr KeyName;
										Align4 Pad1;
										FILETIME LpftLastWriteTime;
										Align4 Pad2;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 32:
			_Struct ApiSetValue
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ValueName=%s Type=%u Data1=%u", ValueName.ToString, Type, Data1 )]
									Struct
									{
										ContextHandle Key;
										NdrWideString ValueName;
										Align4 Pad1;
										UINT32 Type = CMRPApiSetValueTypeTable(this);
										NdrConformant Length;
										switch
										{
											case Length.MaxCount:
												BLOB(Length.MaxCount) lpData;
										}
										ALIGN4 Pad;
										UINT32 Data1;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 33:
			_Struct ApiDeleteValue
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ValueName=%s", ValueName.ToString )]
									Struct
									{
										ContextHandle Key;
										NdrWideString ValueName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 34:
			_Struct ApiQueryValue
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ValueName=%s Data1=%u", ValueName.ToString, Data1 )]
									Struct
									{
										ContextHandle Key;
										NdrWideString ValueName;
										Align4 Pad;
										UINT32 Data1;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ValueType=%u LpcbRequired=%u ReturnValue=%s", ValueType, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 ValueType;
										NdrConformant Length;
										switch
										{
											case Length.MaxCount: BLOB(Length.MaxCount) lpData;
										}
										Align4 Pad;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 35:
			_Struct ApiDeleteKey
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "SubKey=%s", SubKey.ToString )]
									Struct
									{
										ContextHandle Key;
										NdrWideString SubKey;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 36:
			_Struct ApiEnumValue
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Index=%u LpcbData=%u", Index, LpcbData )]
									Struct
									{
										ContextHandle Key;
										UINT32 Index;
										UINT32 LpcbData;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ValueName=%s Type=%u LpcbData=%u TotalSize=%u ReturnValue=%s", ValueName.ToString, Type, LpcbData, TotalSize, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr ValueName;
										Align4 Pad1;
										UINT32 Type;
										NdrConformant Length;
										switch
										{
											case Length.MaxCount: BLOB(Length.MaxCount) lpData;
										}
										ALIGN4 Pad2;
										UINT32 LpcbData;
										UINT32 TotalSize;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 37:
			_Struct ApiCloseKey
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Key;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										ContextHandle Key;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 38:
			_Struct ApiQueryInfoKey
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Key;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "LpcSubKeys=%u LpcbMaxSubKeyLen=%u LpcValues=%u LpcbMaxValueNameLen=%u LpcbMaxValueLen=%u LpcbSecurityDescriptor=%u ReturnValue=%s", LpcSubKeys, LpcbMaxSubKeyLen, LpcValues, LpcbMaxValueNameLen, LpcbMaxValueLen, LpcbSecurityDescriptor, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 LpcSubKeys;
										UINT32 LpcbMaxSubKeyLen;
										UINT32 LpcValues;
										UINT32 LpcbMaxValueNameLen;
										UINT32 LpcbMaxValueLen;
										UINT32 LpcbSecurityDescriptor;
										FILETIME LpftLastWriteTime;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 39:
			_Struct ApiSetKeySecurity
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "SecurityInformation=%u", SecurityInformation )]
									Struct
									{
										ContextHandle Key;
										UINT32 SecurityInformation;
										CMRPRpcSecurityAttributesPtr RpcSecurityDescriptor;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 40:
			_Struct ApiGetKeySecurity
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "SecurityInformation=%u", SecurityInformation )]
									Struct
									{
										ContextHandle Key;
										UINT32 SecurityInformation;
										CMRPRpcSecurityAttributesPtr RpcSecurityDescriptor;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										CMRPRpcSecurityAttributesPtr RpcSecurityDescriptor;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 41:
			_Struct ApiOpenGroup
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "GroupName=%s", GroupName.ToString )]
									Struct
									{
										NdrWideString GroupName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s", WinErrorCodeNameTable(status) )]
									Struct
									{
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 42:
			_Struct ApiCreateGroup
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "GroupName=%s", GroupName.ToString )]
									Struct
									{
										NdrWideString GroupName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s", WinErrorCodeNameTable(status) )]
									Struct
									{
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 43:
			_Struct ApiDeleteGroup
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Force=%d", Force )]
									Struct
									{
										ContextHandle Group;
										Switch(MSRPCIfVers)
										{
											case 3: BOOL force;
										}
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s",WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 44:
			_Struct ApiCloseGroup
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Group;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										ContextHandle Group;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 45:
			_Struct ApiGetGroupState
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Group;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NodeName=%s ReturnValue=%s", NodeName.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 2: UINT32 StateV2 = CMRPApiGetGroupStateStateV2Table(this);
											case 3: UINT32 StateV3 = CMRPApiGetGroupStateStateV3Table(this);
										}
										NdrWideStringPtr NodeName;
										Align4 Pad1;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 46:
			_Struct ApiSetGroupName
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "GroupName=%s", GroupName.ToString )]
									Struct
									{
										ContextHandle Group;
										NdrWideString GroupName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 47:
			_Struct ApiGetGroupId
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Group;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Guid=%s ReturnValue=%s", Guid.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr Guid;
										Align4 Pad1;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 48:
			_Struct ApiGetNodeId
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Node;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Guid=%s ReturnValue=%s", Guid.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr Guid;
										Align4 Pad1;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 49:
			_Struct ApiOnlineGroup
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Group;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 50:
			_Struct ApiOfflineGroup
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Group;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 51:
			_Struct ApiMoveGroup
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Group;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 52:
			_Struct ApiMoveGroupToNode
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Group;
										ContextHandle Node;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}										
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 53:
			_Struct ApiCreateGroupResourceEnum
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Type=%u", Type )]
									Struct
									{
										ContextHandle Group;
										UINT32 Type = CMRPApiCreateGroupResourceEnumTypeTable(this);
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										CMRPEnumListPtr(53) ReturnEnum;
										Align4 Pad1;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 54:
			_Struct ApiSetGroupNodeList
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ListSize=%u", ListSize )]
									Struct
									{
										ContextHandle Group;
										Switch(MSRPCIfVers)
										{
											case 2: NdrWideStringPtr multiSzNodeList;
											default:
												struct
												{
													NdrPtr Ptr;
													switch
													{
														case Ptr.referentid > 0:
															struct
															{
																NdrConformant Size;
																char NodeList[Size.MaxCount];
															}
													}
												}
										}
										Align4 Pad;
										UINT32 ListSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 55:
			_Struct ApiCreateNotify
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s", WinErrorCodeNameTable(Status) )]
									Struct
									{
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle NotificationPort;
									}
							}
						}
				}
			}
		
		Case 56:
			_Struct ApiCloseNotify
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Notify;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										ContextHandle Notify;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 57:
			_Struct ApiAddNotifyCluster
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u", Filter, NotifyKey )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle Cluster;
										UINT32 Filter;
										UINT32 NotifyKey;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 58:
			_Struct ApiAddNotifyNode
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u", Filter, NotifyKey )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle Node;
										UINT32 Filter;
										UINT32 NotifyKey;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "StateSequence=%u ReturnValue=%s", StateSequence, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 StateSequence;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 59:
			_Struct ApiAddNotifyGroup
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u", Filter, NotifyKey )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle Group;
										UINT32 Filter;
										UINT32 NotifyKey;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "StateSequence=%u ReturnValue=%s", StateSequence, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 StateSequence;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 60:
			_Struct ApiAddNotifyResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u", Filter, NotifyKey )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle Resource;
										UINT32 Filter;
										UINT32 NotifyKey;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "StateSequence=%u ReturnValue=%s", StateSequence, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 StateSequence;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 61:
			_Struct ApiAddNotifyKey
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NotifyKey=%u Filter=%u WatchSubTree=%d", NotifyKey, Filter, WatchSubTree )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle Key;
										UINT32 NotifyKey;
										UINT32 Filter;
										BOOL WatchSubTree;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 62:
			_Struct ApiReAddNotifyNode
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u StateSequence=%u", Filter, NotifyKey, StateSequence )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle Node;
										UINT32 Filter;
										UINT32 NotifyKey;
										UINT32 StateSequence;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 63:
			_Struct ApiReAddNotifyGroup
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u StateSequence=%u", Filter, NotifyKey, StateSequence )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle Group;
										UINT32 Filter;
										UINT32 NotifyKey;
										UINT32 StateSequence;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 64:
			_Struct ApiReAddNotifyResource
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u StateSequence=%u", Filter, NotifyKey, StateSequence )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle Resource;
										UINT32 Filter;
										UINT32 NotifyKey;
										UINT32 StateSequence;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 65:
			_Struct ApiGetNotify
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Notify;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NotifyKey=%u Filter=%u StateSequence=%u Name=%s ReturnValue=%s", NotifyKey, Filter, StateSequence, Name.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 NotifyKey;
										UINT32 Filter;
										UINT32 StateSequence;
										NdrWideStringPtr Name;
										Align4 Pad1;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 66:
			_Struct ApiOpenNode
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NodeName=%s", NodeName.ToString )]
									Struct
									{
										NdrWideString NodeName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s ",  WinErrorCodeNameTable(status) )]
									Struct
									{
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle ReturnValue;										
									}
							}
						}
				}
			}
		
		Case 67:
			_Struct ApiCloseNode
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Node;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										ContextHandle Node;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 68:
			_Struct ApiGetNodeState
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Node;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "State=%s ReturnValue=%s", State , WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 State = CMRPApiGetNodeStateStateTable(this);
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 69:
			_Struct ApiPauseNode
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Node;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 70:
			_Struct ApiResumeNode
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Node;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 71:
			_Struct ApiEvictNode
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Node;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 72:
			_Struct ApiNodeResourceControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Resource;
										ContextHandle Node;
										UINT32 ControlCode = CMRPApiResourceControlControlCodeTable(this);
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID > 0:
												Struct {
													NdrConformant Size;
													switch
													{
														case Size.MaxCount: BLOB(Size.MaxCount) lpOutBuffer;
													}
												}
										};
										Align4 Pad;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										}
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 73:
			_Struct ApiResourceControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Resource;
										UINT32 ControlCode = CMRPApiResourceControlControlCodeTable(this);
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID > 0:
												Struct {
													NdrConformant Size;
													switch
													{
														case Size.MaxCount: BLOB(Size.MaxCount) lpOutBuffer;
													}
												}
										};
										Align4 Pad;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										}
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 74:
			_Struct ApiNodeResourceTypeControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ResourceTypeName=%s ControlCode=%u InBufferSize=%u OutBufferSize=%u", ResourceTypeName.ToString, ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Cluster;
										NdrWideString ResourceTypeName;
										Align4 Pad1;
										ContextHandle Node;
										UINT32 ControlCode;
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID>0:
												Struct {
													NdrConformant Size;
													switch
													{
														case Size.MaxCount: BLOB(Size.MaxCount) lpOutBuffer;
													}
												}
										};
										Align4 Pad2;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										};
										Align4 Pad1;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 75:
			_Struct ApiResourceTypeControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ResourceTypeName=%s ControlCode=%u InBufferSize=%u OutBufferSize=%u", ResourceTypeName.ToString, ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Cluster;
										NdrWideString ResourceTypeName;
										Align4 Pad1;
										UINT32 ControlCode = CMRPApiResourceTypeControlControlCodeTable(this);
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID > 0:
												Struct {
													NdrConformant Size;
													switch
													{
														case Size.MaxCount: BLOB(Size.MaxCount) lpOutBuffer;
													}
												}
										};
										Align4 Pad2;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										};
										Align4 Pad1;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 76:
			_Struct ApiNodeGroupControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Group;
										ContextHandle Node;
										UINT32 ControlCode;
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID>0:
												Struct {
													NdrConformant Size;
													switch
													{
														case Size.MaxCount: BLOB(Size.MaxCount) lpOutBuffer;
													}
												}
										};
										Align4 Pad1;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										};
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 77:
			_Struct ApiGroupControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Group;
										UINT32 ControlCode = CMRPApiGroupControlControlCodeTable(this);
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID>0:
												Struct {
													NdrConformant Size;
													switch
													{
														case Size.MaxCount: BLOB(Size.MaxCount) lpOutBuffer;
													}
												}
										};
										Align4 Pad1;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										};
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 78:
			_Struct ApiNodeNodeControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Node;
										ContextHandle HostNode;
										UINT32 ControlCode;
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID>0:
												Struct {
													NdrConformant Size;
													switch
													{
														case Size.MaxCount: BLOB(Size.MaxCount) lpOutBuffer;
													}
												}
										};
										Align4 Pad1;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										};
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 79:
			_Struct ApiNodeControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Node;
										UINT32 ControlCode = CMRPApiNodeControlControlCodeTable(this);
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID>0:
												Struct {
													NdrConformant Size;
													switch
													{
														case Size.MaxCount: BLOB(Size.MaxCount) lpOutBuffer;
													}
												}
										};
										Align4 Pad1;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										};
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 81:
			_Struct ApiOpenNetwork
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NetworkName=%s", NetworkName.ToString )]
									Struct
									{
										NdrWideString NetworkName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s", WinErrorCodeNameTable(Status) )]
									Struct
									{
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle network;
									}
							}
						}
				}
			}
		
		Case 82:
			_Struct ApiCloseNetwork
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Network;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										ContextHandle Network;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 83:
			_Struct ApiGetNetworkState
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Network;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "State=%u ReturnValue=%s", State, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 State = CMRPApiGetNetworkStateStateTable(this);
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 84:
			_Struct ApiSetNetworkName
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NetworkName=%s", NetworkName.ToString )]
									Struct
									{
										ContextHandle Network;
										NdrWideString NetworkName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 85:
			_Struct ApiCreateNetworkEnum
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Type=%u", Type )]
									Struct
									{
										ContextHandle Network;
										UINT32 Type = CMRPApiCreateNetworkEnumTypeTable(this);
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										CMRPEnumListPtr(85) ReturnEnum;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 86:
			_Struct ApiGetNetworkId
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Network;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Guid=%s RpcStatus=%u ReturnValue=%s", Guid.ToString, RpcStatus, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr Guid;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 87:
			_Struct ApiSetNetworkPriorityOrder
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NetworkCount=%u NetworkIdList=%s", NetworkCount, NetworkIdList.ToString )]
									Struct
									{
										UINT32 NetworkCount;
										NdrConformant Size;
										NdrWideString NetworkIdList[Size.MaxCount];
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 88:
			_Struct ApiNodeNetworkControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Network;
										ContextHandle Node;
										UINT32 ControlCode = CMRPApiNetworkControlControlCodeTable(this);
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID>0:
											_struct
											{
												NdrConformant Length;
												switch
												{
													case Length.MaxCount: BLOB(Length.MaxCount) lpInBuffer;
												}
											}
										};
										Align4 Pad;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										}
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 89:
			_Struct ApiNetworkControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Network;
										UINT32 ControlCode = CMRPApiNetworkControlControlCodeTable(this);
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID>0:
											_struct
											{
												NdrConformant Length;
												switch
												{
													case Length.MaxCount: BLOB(Length.MaxCount) lpInBuffer;
												}
											}
										};
										Align4 Pad;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										}
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 90:
			_Struct ApiAddNotifyNetwork
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u", Filter, NotifyKey )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle Network;
										UINT32 Filter;
										UINT32 NotifyKey;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "StateSequence=%u ReturnValue=%s", StateSequence, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 StateSequence;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 91:
			_Struct ApiReAddNotifyNetwork
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u StateSequence=%u", Filter, NotifyKey, StateSequence )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle Network;
										UINT32 Filter;
										UINT32 NotifyKey;
										UINT32 StateSequence;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 92:
			_Struct ApiOpenNetInterface
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NetInterfaceName=%s", NetInterfaceName.ToString )]
									Struct
									{
										NdrWideString NetInterfaceName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Status=%s", WinErrorCodeNameTable(Status) )]
									Struct
									{
										ErrorStatus status;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 93:
			_Struct ApiCloseNetInterface
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle NetInterface;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										ContextHandle NetInterface;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 94:
			_Struct ApiGetNetInterfaceState
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle NetInterface;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "State=%u ReturnValue=%s", State, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 State = CMRPApiGetNetInterfaceStateStateTable(this);
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 95:
			_Struct ApiGetNetInterface
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NodeName=%s NetworkName=%s", NodeName.ToString, NetworkName.ToString )]
									Struct
									{
										NdrWideString NodeName;
										NdrWideString NetworkName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "LppszInterfaceName=%s ReturnValue=%s", LppszInterfaceName.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr LppszInterfaceName;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 96:
			_Struct ApiGetNetInterfaceId
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle NetInterface;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Guid=%s ReturnValue=%s", Guid.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr Guid;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 97:
			_Struct ApiNodeNetInterfaceControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle NetInterface;
										ContextHandle Node;
										UINT32 ControlCode;
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID>0:
											_struct
											{
												NdrConformant Length;
												switch
												{
													case Length.MaxCount: BLOB(Length.MaxCount) lpInBuffer;
												}
											}
										};
										Align4 Pad;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										}
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 98:
			_Struct ApiNetInterfaceControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle NetInterface;
										UINT32 ControlCode = CMRPApiNetInterfaceControlControlCodeTable(this);
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID>0:
											_struct
											{
												NdrConformant Length;
												switch
												{
													case Length.MaxCount: BLOB(Length.MaxCount) lpInBuffer;
												}
											}
										};
										Align4 Pad;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										};
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 99:
			_Struct ApiAddNotifyNetInterface
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u", Filter, NotifyKey )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle NetInterface;
										UINT32 Filter;
										UINT32 NotifyKey;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "StateSequence=%u ReturnValue=%s", StateSequence, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 StateSequence;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 100:
			_Struct ApiReAddNotifyNetInterface
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Filter=%u NotifyKey=%u StateSequence=%u", Filter, NotifyKey, StateSequence )]
									Struct
									{
										ContextHandle Notify;
										ContextHandle NetInterface;
										UINT32 Filter;
										UINT32 NotifyKey;
										UINT32 StateSequence;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 101:
			_Struct ApiCreateNodeEnum
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Type=%u", Type )]
									Struct
									{
										ContextHandle Node;
										UINT32 Type = CMRPApiCreateNodeEnumTypeTable(this);
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										CMRPEnumListPtr(101) ReturnEnum;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 102:
			_Struct ApiGetClusterVersion2
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "MajorVersion=%u MinorVersion=%u BuildNumber=%u VendorId=%s CSDVersion=%s ReturnValue=%s", MajorVersion, MinorVersion, BuildNumber, VendorId.ToString, CSDVersion.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT16 MajorVersion;
										UINT16 MinorVersion;
										UINT16 BuildNumber;
										NdrWideStringPtr VendorId;
										NdrWideStringPtr CSDVersion;
										CMRPClusterOperationalversionInfoPtr ClusterOpVerInfo;
										Align4 pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 103:
			_Struct ApiCreateResTypeEnum
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "TypeName=%s Type=%u", TypeName.ToString, Type )]
									Struct
									{
										NdrWideString TypeName;
										Align4 Pad;
										UINT32 Type = CMRPApiCreateResTypeEnumTypeTable(this);
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										CMRPEnumListPtr(103) ReturnEnum;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 104:
			_Struct ApiBackupClusterDatabase
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "PathName=%s", PathName.ToString )]
									Struct
									{
										NdrWideString PathName;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 105:
			_Struct ApiNodeClusterControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Cluster;
										ContextHandle HostNode;
										UINT32 ControlCode;
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID>0:
											_struct
											{
												NdrConformant Length;
												switch
												{
													case Length.MaxCount: BLOB(Length.MaxCount) lpInBuffer;
												}
											}
										};
										Align4 Pad;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										};
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 106:
			_Struct ApiClusterControl
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ControlCode=%u InBufferSize=%u OutBufferSize=%u", ControlCode, InBufferSize, OutBufferSize )]
									Struct
									{
										ContextHandle Cluster;
										UINT32 ControlCode = CMRPApiClusterControlControlCodeTable(this);
										NdrPtr	Pointer;
										switch
										{
											case Pointer.referentID > 0:
											_struct
											{
												NdrConformant Length;
												switch
												{
													case Length.MaxCount: BLOB(Length.MaxCount) lpInBuffer;
												}
											}
										};
										Align4 Pad;
										UINT32 InBufferSize;
										UINT32 OutBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "BytesReturned=%u LpcbRequired=%u ReturnValue=%s", BytesReturned, LpcbRequired, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Length;
										switch
										{
											case Length.ActualCount: BLOB(Length.ActualCount) lpOutBuffer;
										};
										Align4 Pad;
										UINT32 BytesReturned;
										UINT32 LpcbRequired;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 107:
			_Struct ApiUnblockGetNotifyCall
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Notify;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 108:
			_Struct ApiSetServiceAccountPassword
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NewPassword=%s ReturnStatusBufferSize=%u", NewPassword.ToString, ReturnStatusBufferSize )]
									Struct
									{
										NdrWideString NewPassword;
										Align4 Pad;
										CMRPIdlClusterSetPasswordFlags Flags;
										UINT32 ReturnStatusBufferSize;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "SizeReturned=%u ExpectedBufferSize=%u ReturnValue=%s", SizeReturned, ExpectedBufferSize, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrConformantVarying Size;
										Switch
										{
											case Size.ActualCount > 0:
												CMRPIdlClusterSetPasswordStatus Element[ Size.ActualCount ];
										}
										Align4 Pad;
										UINT32 SizeReturned;
										UINT32 ExpectedBufferSize;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 109:
			_Struct ApiSetResourceDependencyExpression
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "DependencyExpression=%s", DependencyExpression.ToString )]
									Struct
									{
										ContextHandle Resource;
										NdrWideStringPtr DependencyExpression;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 110:
			_Struct ApiGetResourceDependencyExpression
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "DependencyExpression=%s ReturnValue=%s", DependencyExpression.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr DependencyExpression;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 112:
			_Struct ApiGetResourceNetworkName
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Resource;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Name=%s ReturnValue=%s", Name.ToString, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										NdrWideStringPtr Name;
										Align4 Pad;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 113:
			_Struct ApiExecuteBatch
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Data=%u", Data )]
									Struct
									{
										ContextHandle Key;
										UINT32 Data;
										NdrConformant Length;
										switch
										{
											case Length.MaxCount: 
												CMRPClusterRegBatchUpdate(Length.MaxCount) lpData;
										}
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "FailedCommand=%d ReturnValue=%s", FailedCommand, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										INT32 FailedCommand;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 114:
			_Struct ApiCreateBatchPort
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle Key;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										ContextHandle BatchPort;
										Switch(MSRPCIfVers)
										{
											case 3: ErrorStatus RpcStatus;
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 115:
			_Struct ApiGetBatchNotification
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle BatchNotify;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "Data=%u ReturnValue=%s", Data, WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										UINT32 Data;
										NdrPtr Pointer;
										Switch
										{
											case Pointer.ReferentID > 0:
											Struct
											{
												NdrConformant Length;
												switch
												{
													case Length.MaxCount: 
														CMRPClusterRegBatchUpdate(Length.MaxCount) lpData;
												}
											}
										}
										Align4 Pad;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 116:
			_Struct ApiCloseBatchPort
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									Struct
									{
										ContextHandle BatchPort;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										ContextHandle BatchPort;
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		//OSs Win7 and above are encrypted from Opnum 117~123.
		Case 117:
			_Struct ApiOpenClusterEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "DesiredAccess=%u", DesiredAccess )]
									Struct
									{
										UINT32 DesiredAccess
										{
											UINT32 ReadAccess:1 = FormatString("       (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require Read access.": "Unset");
											UINT32 ChangeAccess:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require All access. The server MUST return ERROR_INVALID_PARAMETER (0x00000057) if the dwDesiredAccess bitwise OR includes CLUSAPI_CHANGE_ACCESS but not CLUSAPI_READ_ACCESS." : "Unset");
											UINT32 Reserved1:23 = FormatString("      (%s)",this.ToString);
											UINT32 MaximumAllowed:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require the maximum access level granted to the client, as specified in section .":"Unset");
											UINT32 Reserved2:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericExecute:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericWrite:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "GrantedAccess=%u Status=%s", GrantedAccess, WinErrorCodeNameTable(status) )]
									Struct
									{
										UINT32 GrantedAccess
										{
											UINT32 Reserved2:28 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 Reserved3:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
										ErrorStatus Status;
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 118:
			_Struct ApiOpenNodeEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NodeName=%s DesiredAccess=%u", NodeName.ToString, DesiredAccess )]
									Struct
									{
										NdrWideString NodeName;
										Align4 Pad;
										UINT32 DesiredAccess
										{
											UINT32 ReadAccess:1 = FormatString("       (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require Read access.": "Unset");
											UINT32 ChangeAccess:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require All access. The server MUST return ERROR_INVALID_PARAMETER (0x00000057) if the dwDesiredAccess bitwise OR includes CLUSAPI_CHANGE_ACCESS but not CLUSAPI_READ_ACCESS." : "Unset");
											UINT32 Reserved1:23 = FormatString("      (%s)",this.ToString);
											UINT32 MaximumAllowed:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require the maximum access level granted to the client, as specified in section .":"Unset");
											UINT32 Reserved2:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericExecute:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericWrite:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "GrantedAccess=%u Status=%s", GrantedAccess, WinErrorCodeNameTable(status) )]
									Struct
									{
										UINT32 GrantedAccess
										{
											UINT32 Reserved2:28 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 Reserved3:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
										ErrorStatus Status;
										Switch(MSRPCIfVers)
										{
											case 2: UINT32 RpcStatusV2 = ErrorStatusV2(this);
											case 3: UINT32 RpcStatusV3 = ErrorStatusV3(this);
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 119:
			_Struct ApiOpenGroupEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "GroupName=%s DesiredAccess=%u", GroupName.ToString, DesiredAccess )]
									Struct
									{
										NdrWideString GroupName;
										Align4 Pad;
										UINT32 DesiredAccess
										{
											UINT32 ReadAccess:1 = FormatString("       (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require Read access.": "Unset");
											UINT32 ChangeAccess:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require All access. The server MUST return ERROR_INVALID_PARAMETER (0x00000057) if the dwDesiredAccess bitwise OR includes CLUSAPI_CHANGE_ACCESS but not CLUSAPI_READ_ACCESS." : "Unset");
											UINT32 Reserved1:23 = FormatString("      (%s)",this.ToString);
											UINT32 MaximumAllowed:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require the maximum access level granted to the client, as specified in section .":"Unset");
											UINT32 Reserved2:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericExecute:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericWrite:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "GrantedAccess=%u Status=%s ", GrantedAccess, WinErrorCodeNameTable(status) )]
									Struct
									{
										UINT32 GrantedAccess
										{
											UINT32 Reserved2:28 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 Reserved3:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
										ErrorStatus Status;
										Switch(MSRPCIfVers)
										{
											case 2: UINT32 RpcStatusV2 = ErrorStatusV2(this);
											case 3: UINT32 RpcStatusV3 = ErrorStatusV3(this);
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 120:
			_Struct ApiOpenResourceEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ResourceName=%s DesiredAccess=%u", ResourceName.ToString, DesiredAccess )]
									Struct
									{
										NdrWideString ResourceName;
										Align4 Pad;
										UINT32 DesiredAccess
										{
											UINT32 ReadAccess:1 = FormatString("       (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require Read access.": "Unset");
											UINT32 ChangeAccess:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require All access. The server MUST return ERROR_INVALID_PARAMETER (0x00000057) if the dwDesiredAccess bitwise OR includes CLUSAPI_CHANGE_ACCESS but not CLUSAPI_READ_ACCESS." : "Unset");
											UINT32 Reserved1:23 = FormatString("      (%s)",this.ToString);
											UINT32 MaximumAllowed:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require the maximum access level granted to the client, as specified in section .":"Unset");
											UINT32 Reserved2:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericExecute:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericWrite:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "GrantedAccess=%u Status=%s", GrantedAccess, WinErrorCodeNameTable(status) )]
									Struct
									{
										UINT32 GrantedAccess
										{
											UINT32 Reserved2:28 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 Reserved3:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
										ErrorStatus Status;
										Switch(MSRPCIfVers)
										{
											case 2: UINT32 RpcStatusV2 = ErrorStatusV2(this);
											case 3: UINT32 RpcStatusV3 = ErrorStatusV3(this);
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 121:
			_Struct ApiOpenNetworkEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NetworkName=%s DesiredAccess=%u", NetworkName.ToString, DesiredAccess )]
									Struct
									{
										NdrWideString NetworkName;
										Align4 Pad;
										UINT32 DesiredAccess
										{
											UINT32 ReadAccess:1 = FormatString("       (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require Read access.": "Unset");
											UINT32 ChangeAccess:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require All access. The server MUST return ERROR_INVALID_PARAMETER (0x00000057) if the dwDesiredAccess bitwise OR includes CLUSAPI_CHANGE_ACCESS but not CLUSAPI_READ_ACCESS." : "Unset");
											UINT32 Reserved1:23 = FormatString("      (%s)",this.ToString);
											UINT32 MaximumAllowed:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require the maximum access level granted to the client, as specified in section .":"Unset");
											UINT32 Reserved2:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericExecute:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericWrite:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "GrantedAccess=%u Status=%s", GrantedAccess, WinErrorCodeNameTable(status) )]
									Struct
									{
										UINT32 GrantedAccess
										{
											UINT32 Reserved2:28 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 Reserved3:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
										ErrorStatus Status;
										Switch(MSRPCIfVers)
										{
											case 2: UINT32 RpcStatusV2 = ErrorStatusV2(this);
											case 3: UINT32 RpcStatusV3 = ErrorStatusV3(this);
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 122:
			_Struct ApiOpenNetInterfaceEx
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "NetInterfaceName=%s DesiredAccess=%u", NetInterfaceName.ToString, DesiredAccess )]
									Struct
									{
										NdrWideString NetInterfaceName;
										Align4 Pad;
										UINT32 DesiredAccess
										{
											UINT32 ReadAccess:1 = FormatString("       (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require Read access.": "Unset");
											UINT32 ChangeAccess:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require All access. The server MUST return ERROR_INVALID_PARAMETER (0x00000057) if the dwDesiredAccess bitwise OR includes CLUSAPI_CHANGE_ACCESS but not CLUSAPI_READ_ACCESS." : "Unset");
											UINT32 Reserved1:23 = FormatString("      (%s)",this.ToString);
											UINT32 MaximumAllowed:1 = FormatString("    (%s) %s",this.ToString,this ? "The client requests a context handle that can be used in subsequent method calls that require the maximum access level granted to the client, as specified in section .":"Unset");
											UINT32 Reserved2:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericExecute:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericWrite:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "GrantedAccess=%u Status=%s", GrantedAccess, WinErrorCodeNameTable(status) )]
									Struct
									{
										UINT32 GrantedAccess
										{
											UINT32 Reserved2:28 = FormatString("      (%s)",this.ToString);
											UINT32 GenericAll:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as the bitwise OR of CLUSAPI_READ_ACCESS and CLUSAPI_CHANGE_ACCESS.":"Unset");
											UINT32 Reserved3:2 = FormatString("      (%s)",this.ToString);
											UINT32 GenericRead:1 = FormatString("    (%s) %s",this.ToString,this ? "The server MUST treat this value the same as CLUSAPI_READ_ACCESS.":"Unset");
										};
										ErrorStatus Status;
										Switch(MSRPCIfVers)
										{
											case 2: UINT32 RpcStatusV2 = ErrorStatusV2(this);
											case 3: UINT32 RpcStatusV3 = ErrorStatusV3(this);
										}
										ContextHandle ReturnValue;
									}
							}
						}
				}
			}
		
		Case 123:
			_Struct ApiChangeCsvState
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						_Struct Request
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "State=%u", State )]
									Struct
									{
										ContextHandle Resource;
										UINT32 State;
									}
							}
						}
					
					Case 0x02: //RESPONSE
						_Struct Response
						{
							Switch
							{
								Case MSRPCAuthLevel == -1: Blob( FrameLength - FrameOffset ) PartialData = "May Need Reassemble";
								Case Property.MSRPCEncrypted != ConstEncTypeClearData: Blob (FrameLength - Frameoffset) PayloadData = MSRPCEncryptionTable( Property.MSRPCEncrypted );
								Default:
									[CMRPSummary = FormatString( "ReturnValue=%s", WinErrorCodeNameTable(ReturnValue) )]
									Struct
									{
										Switch(MSRPCIfVers)
										{
											case 2: UINT32 RpcStatusV2 = ErrorStatusV2(this);
											case 3: UINT32 RpcStatusV3 = ErrorStatusV3(this);
										}
										UINT32 ReturnValue = WinErrorCodeTable( this );
									}
							}
						}
				}
			}
		
		Case 80:
		Case 111:
			struct NotUsedOnWire
			{
				Switch( Property.MSRPCPType )
				{
					Case 0x00: //REQUEST
						[CMRPSummary = "OPNUM:" + Property.MSRPCOpnum + " request is Not used on wire"]
						_Struct Request
						{
							ReportParserWarning("CMRP", "Invalid clusapi method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
					
					Case 0x02: //RESPONSE
						[CMRPSummary = "OPNUM:" + Property.MSRPCOpnum + " response is Not used on wire"]
						_Struct Response
						{
							ReportParserWarning("CMRP", "Invalid clusapi method, Opnum:" + Property.MSRPCOpnum) ProtocolWarning;
							Blob(FrameLength - Offset) PayloadData;
						}
				}
			}
		
		Default:
			Switch
			{
				case IsValueNone(Property.MSRPCOpnum):
					struct
					{
						Blob( FrameLength - Offset ) data;
						ReportParserWarning("CMRP", "Property MSRPCOpnum is missing") ParserWarning;
					}
				default:
					ReportParserError( ParserErrorProtocolClassWindows, "CMRP", "Unknown clusapi method, Opnum:" + Property.MSRPCOpnum ) UnknownMethod;
			}
	}
}

Table CMRPApiClusterControlControlCodeTable( Value )
{
	Switch( Value )
	{
		Case 0x07000000: "CLUSCTL_CLUSTER_UNKNOWN - Verifies that control codes for the cluster are being processed.";
		Case 0x0700003D: "CLUSCTL_CLUSTER_GET_FQDN - Retrieves the fully qualified DNS name of the cluster.";
		Case 0x07000045: "CLUSCTL_CLUSTER_CHECK_VOTER_EVICT - Queries the cluster to determine whether evicting the specified node will cause the cluster to lose quorum.";
		Case 0x07000049: "CLUSCTL_CLUSTER_CHECK_VOTER_DOWN - Queries the cluster to determine whether taking the specified resource offline or stopping the specified active node will cause the cluster to lose quorum.";
		Case 0x0700004D: "CLUSCTL_CLUSTER_SHUTDOWN - Instructs the server to stop the cluster service on every active node.";
		Case 0x07000051: "CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES - Retrieves a list of the common property names for the designated cluster.";
		Case 0x07000055: "CLUSCTL_CLUSTER_GET_RO_COMMON_PROPERTIES - Retrieves the read-only common property values for the designated cluster.";
		Case 0x07000059: "CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES - Retrieves all common property values for the designated cluster.";
		Case 0x0740005E: "CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES - Sets the common property values for the designated cluster.";
		Case 0x07000061: "CLUSCTL_CLUSTER_VALIDATE_COMMON_PROPERTIES - Validates that the values supplied for the common properties are acceptable for the designated cluster.";
		Case 0x07000065: "CLUSCTL_CLUSTER_GET_COMMON_PROPERTY_FMTS - Retrieves a list of the common property formats for the designated cluster.";
		Case 0x07000079: "CLUSCTL_CLUSTER_ENUM_PRIVATE_PROPERTIES - Retrieves a list of the private property names for the designated cluster.";
		Case 0x0700007D: "CLUSCTL_CLUSTER_GET_RO_PRIVATE_PROPERTIES - Retrieves the read-only private property values for the designated cluster.";
		Case 0x07000081: "CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES - Gets the private property values for the designated cluster.";
		Case 0x07400086: "CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES - Sets the private property values for the designated cluster.";
		Case 0x07000089: "CLUSCTL_CLUSTER_VALIDATE_PRIVATE_PROPERTIES - Validates that the supplied private property list is valid.";
		Case 0x07000291: "CLUSCTL_CLUSTER_GET_SHARED_VOLUME_ID - Verifies that the file path is on the cluster shared volume and retrieves a unique volume identifier corresponding to that volume.";
		Default: "Unknown";
	}
}

Table CMRPApiCreateEnumTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "CLUSTER_ENUM_NODE - Returns an enumeration of names of cluster nodes.";
		Case 0x00000002: "CLUSTER_ENUM_RESTYPE - Returns an enumeration of names of resource types.";
		Case 0x00000004: "CLUSTER_ENUM_RESOURCE - Returns an enumeration of names of cluster resources.";
		Case 0x00000008: "CLUSTER_ENUM_GROUP - Returns an enumeration of names of cluster groups.";
		Case 0x00000010: "CLUSTER_ENUM_NETWORK - Returns an enumeration of names of cluster networks.";
		Case 0x00000020: "CLUSTER_ENUM_NETINTERFACE - Returns an enumeration of names of cluster network interfaces.";
		Case 0x80000000: "CLUSTER_ENUM_INTERNAL_NETWORK - Cannot be specified with any other value for this parameter. Returns an enumeration of names of cluster networks that can be used for internal communications. For protocol version 2.0, the list is ordered from highest to lowest priority order. For protocol version 3.0, the client MUST treat the order of the list as arbitrary.";
		Case 0x40000000: "CLUSTER_ENUM_SHARED_VOLUME_RESOURCE - Returns an enumeration of names of resources that represent cluster shared volumes.Protocol version 3.0 only: Cannot be specified with any other value for this parameter.This value is not supported in windows_server_2008.This enumeration is not used in protocol version 2.0.";
		Default: "Unknown";
	}
}

Table CMRPApiCreateGroupResourceEnumTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "CLUSTER_GROUP_ENUM_CONTAINS - Returns an enumeration of zero or more resource names that represent the resources that are contained in the specified group.";
		Case 0x00000002: "CLUSTER_GROUP_ENUM_NODES - Returns an enumeration of one or more node names that represent the prioritized list of nodes that are given preference when the server is making a decision for which node will host the specified group.";
		Default: "Unknown";
	}
}

Table CMRPApiCreateGroupStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00001392: "ERROR_OBJECT_ALREADY_EXISTS - See the preceding text for when this error can occur.";
		Default: "Unknown";
	}
}

Table CMRPApiCreateKeyDispositionTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "REG_CREATED_NEW_KEY - The key did not exist and was created.";
		Case 0x00000002: "REG_OPENED_EXISTING_KEY - The key existed and was opened.";
		Default: "Unknown";
	}
}

Table CMRPApiCreateKeyStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00000005: "ERROR_ACCESS_DENIED - The client is not permitted to create or open the specified subkey with the wanted access. Or, for protocol version 3.0, the client does not have an access level of All (section ).";
		Case 0x00000006: "ERROR_INVALID_HANDLE - The hKey value does not indicate a valid cluster registry key.";
		Case 0x00000057: "ERROR_INVALID_PARAMETER - Protocol version 2.0 only: Returned whenever dwOptions is set to 0x00000001 (REG_OPTION_VOLATILE).";
		Default: "Unknown";
	}
}

Table CMRPApiCreateNetworkEnumTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "CLUSTER_NETWORK_ENUM_NETINTERFACES - Return an enumeration of one or more names that represent the network interfaces that are installed on the specified network.";
		Default: "Unknown";
	}
}

Table CMRPApiCreateNodeEnumTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "CLUSTER_NODE_ENUM_NETINTERFACES - Return an enumeration of one or more network interface names that represent the network interfaces that are installed on the specified node.";
		Default: "Unknown";
	}
}

Table CMRPApiCreateNotifyStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00000046: "ERROR_SHARING_PAUSED - See the preceding text for when this error can occur.";
		Default: "Unknown";
	}
}

Table CMRPApiCreateResEnumTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "CLUSTER_RESOURCE_ENUM_DEPENDS - Returns an enumeration of zero or more resource names on which the resource that is specified by hResource depends.";
		Case 0x00000002: "CLUSTER_RESOURCE_ENUM_PROVIDES - Returns an enumeration of zero or more resource names that depend on the resource specified by hResource.";
		Case 0x00000004: "CLUSTER_RESOURCE_ENUM_NODES - Returns an enumeration of zero or more node names that can host the resource specified by hResource.";
		Default: "Unknown";
	}
}

Table CMRPApiCreateResourceStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00000006: "ERROR_INVALID_HANDLE - The hGroup parameter does not represent a valid HGROUP_RPC context handle.";
		Case 0x00000057: "ERROR_INVALID_PARAMETER - One or more flags in the dwFlags parameter are not valid.";
		Case 0x00001392: "ERROR_OBJECT_ALREADY_EXISTS - The resource name is not unique.";
		Case 0x00001394: "ERROR_GROUP_NOT_AVAILABLE - The group represented by the hGroup parameter is in the act of being deleted but still remains in the cluster state.";
		Case 0x00001395: "ERROR_GROUP_NOT_FOUND - The group represented by the hGroup parameter no longer exists in the nonvolatile cluster state.";
		Case 0x00001734: "ERROR_CLUSTER_SINGLETON_RESOURCE - The resource type has indicated via its characteristics that only one resource of its type is permitted in a cluster, and that a resource of that type already exists. Protocol version 2.0 servers do not support this value.";
		Case 0x00001735: "ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE - The resource type has indicated via its characteristics that only one resource of its type is permitted in a group, and a resource of that type already exists in the designated group. Protocol version 2.0 servers do not support this value.";
		Default: "Unknown";
	}
}

Table CMRPApiCreateResTypeEnumTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "CLUSTER_RESOURCE_TYPE_ENUM_NODES - Returns an enumeration of zero or more node names where the server implementation-specific object that codifies the resource's functionality is present, hence for which a resource of the type specified by lpszTypeName can be created or hosted.";
		Case 0x00000002: "CLUSTER_RESOURCE_TYPE_ENUM_RESOURCES - Returns an enumeration of zero or more resource names that contains all the resource instances in the cluster state that have the resource type specified by lpszTypeName.The support for dwType value CLUSTER_RESOURCE_TYPE_ENUM_RESOURCES initiates in windows_7.";
		Default: "Unknown";
	}
}

Table CMRPApiGetGroupStateStateV2Table( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ClusterGroupOnline - All the resources in the group are in the state ClusterResourceOnline.";
		Case 0x00000001: "ClusterGroupOffline - All the resources in the group are in the state ClusterResourceOffline. This is also the state of group that contains no resources.";
		Case 0x00000002: "ClusterGroupFailed - At least one resource in the group has failed; that is, the resources are in the state ClusterResourceFailed.";
		Case 0x00000003: "ClusterGroupPartialOnline - At least one resource in the group is in state ClusterResourceOnline, but not all resources are in this state. No resources are in the state ClusterResourceOnlinePending, ClusterResourceOfflinePending, or ClusterResourceFailed.";
		Case 0x00000004: "ClusterGroupPending - At least one resource in the group is in state ClusterResourceOnlinePending or ClusterResourceOfflinePending. There are no resources in the state ClusterResourceFailed.";
		Case 0xFFFFFFFF: "ClusterGroupStateUnknown - The operation to retrieve the group state was unsuccessful.";
		Default: "Unknown";
	}
}

Table CMRPApiGetGroupStateStateV3Table( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ClusterGroupOnline0 - All the top-level resources in the group (resources as specified in section ) are in the state ClusterResourceOnline.";
		Case 0x00000001: "ClusterGroupOffline0 - All the resources in the group are in the state ClusterResourceOffline. This is also the state of a group that contains no resources.";
		Case 0x00000002: "ClusterGroupFailed0 - At least one resource in the group has failed; that is, the resources are in the state ClusterResourceFailed.";
		Case 0x00000003: "ClusterGroupPartialOnline0 - At least one top-level resource in the group is in the state ClusterResourceOnline but not all resources are in this state. No top-level resources are in the state ClusterResourceOnlinePending, ClusterResourceOfflinePending, or ClusterResourceFailed.";
		Case 0x00000004: "ClusterGroupPending0 - At least one resource in the group is in the state ClusterResourceOnlinePending or ClusterResourceOfflinePending. There are no resources in the state ClusterResourceFailed.";
		Case 0xFFFFFFFF: "ClusterGroupStateUnknown0 - The operation to retrieve the group state was unsuccessful.";
		Default: "Unknown";
	}
}
Table CMRPApiGetNetInterfaceStateStateTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ClusterNetInterfaceFailed - The network interface cannot communicate with any other network interface.";
		Case 0x00000001: "ClusterNetInterfaceUnreachable - The network interface cannot communicate with at least one other network interface whose state is not ClusterNetInterfaceFailed or ClusterNetInterfaceUnavailable.";
		Case 0x00000002: "ClusterNetInterfaceUnavailable - The node on which this network interface is installed is not in either the ClusterNodeUp state or the ClusterNodePaused state.";
		Case 0x00000003: "ClusterNetInterfaceUp - The network interface can communicate with all other network interfaces whose state is not ClusterNetInterfaceFailed or ClusterNetInterfaceUnavailable.";
		Case 0xFFFFFFFF: "ClusterNetInterfaceStateUnknown - The operation to retrieve network interface state was not successful.";
		Default: "Unknown";
	}
}

Table CMRPApiGetNetworkStateStateTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ClusterNetworkUnavailable - All network interfaces on the network are in the ClusterNetInterfaceUnavailable state.";
		Case 0x00000001: "ClusterNetworkDown - All network interfaces on the network are in either the ClusterNetInterfaceFailed state or the ClusterNetInterfaceUnreachable state.";
		Case 0x00000002: "ClusterNetworkPartitioned - One or more network interfaces are in the ClusterNetInterfaceUnreachable state, and at least two interfaces are in the ClusterNetInterfaceUp state.";
		Case 0x00000003: "ClusterNetworkUp - All network interfaces are in the ClusterNetInterfaceUp state.";
		Case 0xFFFFFFFF: "ClusterNetworkStateUnknown - The operation to retrieve network state was not successful.";
		Default: "Unknown";
	}
}

Table CMRPApiGetNodeStateStateTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ClusterNodeUp - The node is active.";
		Case 0x00000001: "ClusterNodeDown - The node is not active.";
		Case 0x00000003: "ClusterNodeJoining - The node is in the process of becoming active by joining a cluster.";
		Case 0x00000002: "ClusterNodePaused - The node is active, but it has temporarily suspended activity, as specified in section .";
		Case 0xFFFFFFFF: "ClusterNodeStateUnknown - The operation to retrieve the node state was not successful.";
		Default: "Unknown";
	}
}

Table CMRPApiGetResourceStateStateTable( Value )
{
	Switch( Value )
	{
		Case 0x00000001: "ClusterResourceInitializing - The resource is performing initialization.";
		Case 0x00000002: "ClusterResourceOnline - The resource is active or available and functioning normally.";
		Case 0x00000003: "ClusterResourceOffline - The resource is not active or available.";
		Case 0x00000004: "ClusterResourceFailed - The resource failed to reach the online state.";
		Case 0x00000081: "ClusterResourceOnlinePending - The resource is in the process of transitioning to the ClusterResourceOnline state.";
		Case 0x00000082: "ClusterResourceOfflinePending - The resource is in the process of transitioning to the ClusterResourceOffline state.";
		Case 0xFFFFFFFF: "ClusterResourceStateUnknown - The operation to retrieve resource state was not successful.";
		Default: "Unknown";
	}
}

Table CMRPApiGetRootKeyStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00000005: "ERROR_ACCESS_DENIED - The client is not permitted to open the root key with the requested access.";
		Default: "Unknown";
	}
}

Table CMRPApiGroupControlControlCodeTable( Value )
{
	Switch( Value )
	{
		Case 0x3000000: "CLUSCTL_GROUP_UNKNOWN - Verifies that control codes for the group are being processed.";
		Case 0x3000005: "CLUSCTL_GROUP_GET_CHARACTERISTICS - Retrieves the intrinsic characteristics associated with the group.";
		Case 0x3000009: "CLUSCTL_GROUP_GET_FLAGS - Retrieves the flags that are set for the group.";
		Case 0x3000029: "CLUSCTL_GROUP_GET_NAME - Retrieves the name of the group.";
		Case 0x3000039: "CLUSCTL_GROUP_GET_ID - Retrieves the unique ID for the group.";
		Case 0x3000051: "CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES - Retrieves a list of the common property names for the designated group.";
		Case 0x3000055: "CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES - Retrieves the read-only common property values for the designated group.";
		Case 0x3000059: "CLUSCTL_GROUP_GET_COMMON_PROPERTIES - Retrieves all common property values for the designated group.";
		Case 0x340005E: "CLUSCTL_GROUP_SET_COMMON_PROPERTIES - Sets the common property values for the designated group.";
		Case 0x3000061: "CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES - Validates that the values supplied for the common properties are acceptable for the designated group.";
		Case 0x3000065: "CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS - Retrieves a list of the common property formats for the designated group.";
		Case 0x3000079: "CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES - Retrieves a list of the private property names for the designated group.";
		Case 0x300007D: "CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES - Retrieves the read-only private property values for the designated group.";
		Case 0x3000081: "CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES - Retrieves all private property values for the designated group.";
		Case 0x3400086: "CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES - Sets the private property values for the designated group.";
		Case 0x3000089: "CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES - Validates that the supplied property list is valid.";
		Default: "Unknown";
	}
}

Table CMRPApiNetInterfaceControlControlCodeTable( Value )
{
	Switch( Value )
	{
		Case 0x6000000: "CLUSCTL_NETINTERFACE_UNKNOWN - Verifies that control codes for the network interface are being processed.";
		Case 0x6000005: "CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS - Retrieves the intrinsic characteristics associated with the network interface.";
		Case 0x6000009: "CLUSCTL_NETINTERFACE_GET_FLAGS - Retrieves the flags that are set for the network interface.";
		Case 0x6000029: "CLUSCTL_NETINTERFACE_GET_NAME - Retrieves the name of the network interface.";
		Case 0x6000031: "CLUSCTL_NETINTERFACE_GET_NODE - Retrieves the name of the node on the network interface is installed.";
		Case 0x6000035: "CLUSCTL_NETINTERFACE_GET_NETWORK - Retrieves the name of the network to which the network interface is connected.";
		Case 0x6000039: "CLUSCTL_NETINTERFACE_GET_ID - Retrieves the unique ID for the network interface.";
		Case 0x6000051: "CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES - Retrieves a list of the common property names for the designated network interface.";
		Case 0x6000055: "CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES - Retrieves the read-only common property values for the designated network interface.";
		Case 0x6000059: "CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES - Retrieves all common property values for the designated network interface.";
		Case 0x640005E: "CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES - Sets the common property values for the designated network interface.";
		Case 0x6000061: "CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES - Validates that the values supplied for the common properties are acceptable for the designated network interface.";
		Case 0x6000079: "CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES - Retrieves a list of the private property names for the designated network interface.";
		Case 0x600007D: "CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES - Retrieves the read-only private property names for the designated network interface.";
		Case 0x6000081: "CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES - Retrieves all private property values for the designated network interface.";
		Case 0x6400086: "CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES - Sets the private property values for the designated network interface.";
		Case 0x6000089: "CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES - Validates that the supplied property list is valid.";
		Default: "Unknown";
	}
}

Table CMRPApiNetworkControlControlCodeTable( Value )
{
	Switch( Value )
	{
		Case 0x5000000: "CLUSCTL_NETWORK_UNKNOWN - Verifies that control codes for the network are being processed.";
		Case 0x5000005: "CLUSCTL_NETWORK_GET_CHARACTERISTICS - Retrieves the intrinsic characteristics associated with the network.";
		Case 0x5000009: "CLUSCTL_NETWORK_GET_FLAGS - Retrieves the flags that are set for the network.";
		Case 0x5000029: "CLUSCTL_NETWORK_GET_NAME - Retrieves the name of the network.";
		Case 0x5000039: "CLUSCTL_NETWORK_GET_ID - Retrieves the unique ID for the network.";
		Case 0x5000051: "CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES - Retrieves a list of the common property names for the designated network.";
		Case 0x5000055: "CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES - Retrieves the read-only common property values for the designated network.";
		Case 0x5000059: "CLUSCTL_NETWORK_GET_COMMON_PROPERTIES - Retrieves all common property values for the designated network.";
		Case 0x540005E: "CLUSCTL_NETWORK_SET_COMMON_PROPERTIES - Sets the common property values for the designated network.";
		Case 0x5000061: "CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES - Validates that the values supplied for the common properties are acceptable for the designated network.";
		Case 0x5000079: "CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES - Retrieves a list of the private property names for the designated network.";
		Case 0x500007D: "CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES - Retrieves the read-only private property names for the designated network.";
		Case 0x5000081: "CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES - Retrieves all private property values for the designated network.";
		Case 0x5400086: "CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES - Sets the private property values for the designated network.";
		Case 0x5000089: "CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES - Validates that the supplied property list is valid.";
		Default: "Unknown";
	}
}

Table CMRPApiNodeControlControlCodeTable( Value )
{
	Switch( Value )
	{
		Case 0x4000000: "CLUSCTL_NODE_UNKNOWN - Verifies that control codes for the node are being processed.";
		Case 0x4000005: "CLUSCTL_NODE_GET_CHARACTERISTICS - Retrieves the intrinsic characteristics associated with the node.";
		Case 0x4000009: "CLUSCTL_NODE_GET_FLAGS - Retrieves the flags that are set for the node.";
		Case 0x4000029: "CLUSCTL_NODE_GET_NAME - Retrieves the name of the node.";
		Case 0x4000039: "CLUSCTL_NODE_GET_ID - Retrieves the unique ID for the node.";
		Case 0x4000041: "CLUSCTL_NODE_GET_CLUSTER_SERVICE_ACCOUNT_NAME - Retrieves the identity of the service on the designated node.";
		Case 0x4000051: "CLUSCTL_NODE_ENUM_COMMON_PROPERTIES - Retrieves a list of the common property names for the designated node.";
		Case 0x4000055: "CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES - Retrieves the read-only common property values for the designated node.";
		Case 0x4000059: "CLUSCTL_NODE_GET_COMMON_PROPERTIES - Retrieves all common property values for the designated node.";
		Case 0x440005E: "CLUSCTL_NODE_SET_COMMON_PROPERTIES - Sets the common property values for the designated node.";
		Case 0x4000061: "CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES - Validates that the values supplied for the common properties are acceptable for the designated node.";
		Case 0x4000079: "CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES - Retrieves a list of the private property names for the designated node.";
		Case 0x400007D: "CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES - Retrieves the read-only private property names for the designated node.";
		Case 0x4000081: "CLUSCTL_NODE_GET_PRIVATE_PROPERTIES - Retrieves all private property values for the designated node.";
		Case 0x4400086: "CLUSCTL_NODE_SET_PRIVATE_PROPERTIES - Sets the private property values for the designated node.";
		Case 0x4000089: "CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES - Validates that the supplied property list is valid.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenClusterExGrantedAccessTable( Value )
{
	Switch( Value )
	{
		Case 0x80000000: "GENERIC_READ - The returned context handle can be used in subsequent methods that require Read access. If the client has backup privilege, the returned context handle can also be used in subsequent methods that require Read with Backup Privilege access.";
		Case 0x10000000: "GENERIC_ALL - The returned context handle can be used in subsequent methods that require All access.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenGroupExStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00000005: "ERROR_ACCESS_DENIED - dwDesiredAccess indicates a level of access exceeding what the client is entitled to (section ).";
		Case 0x00000057: "ERROR_INVALID_PARAMETER - dwDesiredAccess is invalid, as specified earlier in this section.";
		Case 0x00001395: "ERROR_GROUP_NOT_FOUND - A group that matches the name lpszGroupName was not found in the cluster configuration.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenGroupStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00001395: "ERROR_GROUP_NOT_FOUND - A group that matches the name lpszGroupName was not found in the cluster configuration.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenKeyStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00000005: "ERROR_ACCESS_DENIED - The client is not permitted to open the specified subkey with the requested access.";
		Case 0x00000006: "ERROR_INVALID_HANDLE - The hKey value does not indicate a valid cluster registry key.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenNetInterfaceExStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00000005: "ERROR_ACCESS_DENIED - dwDesiredAccess indicates a level of access exceeding what the client is entitled to (section ).";
		Case 0x00000057: "ERROR_INVALID_PARAMETER - dwDesiredAccess is invalid, as specified earlier in this section.";
		Case 0x000013b7: "ERROR_CLUSTER_NETINTERFACE_NOT_FOUND - A network interface that matches the name lpszNetInterfaceName was not found in the cluster configuration.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenNetInterfaceStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x000013b7: "ERROR_CLUSTER_NETINTERFACE_NOT_FOUND - A network interface that matches the name lpszNetInterfaceName was not found in the cluster configuration.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenNetworkExStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00000005: "ERROR_ACCESS_DENIED - dwDesiredAccess indicates a level of access exceeding what the client is entitled to (section ).";
		Case 0x00000057: "ERROR_INVALID_PARAMETER - dwDesiredAccess is invalid, as specified earlier in this section.";
		Case 0x000013B5: "ERROR_CLUSTER_NETWORK_NOT_FOUND - A network that matches the name lpszNetworkName was not found in the cluster configuration.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenNetworkStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x000013B5: "ERROR_CLUSTER_NETWORK_NOT_FOUND - A network that matches the name lpszNetworkName was not found in the cluster configuration.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenNodeExStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x00000005: "ERROR_ACCESS_DENIED - dwDesiredAccess indicates a level of access exceeding what the client is entitled to (section ).";
		Case 0x00000057: "ERROR_INVALID_PARAMETER - dwDesiredAccess is invalid, as specified earlier in this section.";
		Case 0x000013B2: "ERROR_CLUSTER_NODE_NOT_FOUND - A node that matches the name lpszNodeName was not found in the cluster configuration.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenNodeStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "ERROR_SUCCESS - Success.";
		Case 0x000013B2: "ERROR_CLUSTER_NODE_NOT_FOUND - A node that matches the name lpszNodeName was not found in the cluster configuration.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenResourceExStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x0000000: "ERROR_SUCCESS - Success.";
		Case 0x00000005: "ERROR_ACCESS_DENIED - dwDesiredAccess indicates a level of access exceeding what the client is entitled to (section ).";
		Case 0x00000057: "ERROR_INVALID_PARAMETER - dwDesiredAccess is invalid, as specified earlier in this section.";
		Case 0x0000138f: "ERROR_RESOURCE_NOT_FOUND - A resource that matches name lpszResourceName was not found in the cluster configuration.";
		Default: "Unknown";
	}
}

Table CMRPApiOpenResourceStatusTable( Value )
{
	Switch( Value )
	{
		Case 0x0000000: "ERROR_SUCCESS - Success.";
		Case 0x0000138f: "ERROR_RESOURCE_NOT_FOUND - A resource that matches name lpszResourceName was not found in the cluster configuration.";
		Default: "Unknown";
	}
}

Table CMRPApiResourceControlControlCodeTable( Value )
{
	Switch( Value )
	{
		Case 0x1000000: "CLUSCTL_RESOURCE_UNKNOWN - Verifies that control codes for the resource are being processed.";
		Case 0x1000005: "CLUSCTL_RESOURCE_GET_CHARACTERISTICS - Retrieves the intrinsic characteristics associated with the resource.";
		Case 0x1000009: "CLUSCTL_RESOURCE_GET_FLAGS - Retrieves the flags that are set for a resource.";
		Case 0x100000D: "CLUSCTL_RESOURCE_GET_CLASS_INFO - Retrieves info about the class to which the designated resource belongs.";
		Case 0x1000011: "CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES - Retrieves a list of the names of resource types on which the designated resource MUST be dependent on in order to properly operate.";
		Case 0x1000029: "CLUSCTL_RESOURCE_GET_NAME - Retrieves the name of the resource.";
		Case 0x100002D: "CLUSCTL_RESOURCE_GET_RESOURCE_TYPE - Retrieves the resource type of the designated resource.";
		Case 0x1000039: "CLUSCTL_RESOURCE_GET_ID - Retrieves the unique ID for the resource.";
		Case 0x1000051: "CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES - Retrieves a list of the common property names for the designated resource.";
		Case 0x1000055: "CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES - Retrieves the read-only common property values for the designated resource.";
		Case 0x1000059: "CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES - Retrieves all common property values for the designated resource.";
		Case 0x140005E: "CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES - Sets the common property values for the designated resource.";
		Case 0x1000061: "CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES - Validates that the values supplied for the common properties are acceptable for the designated resource.";
		Case 0x1000065: "CLUSCTL_RESOURCE_GET_COMMON_PROPERTY_FMTS - Retrieves a list of the common properties formats for the designated resource.";
		Case 0x1000079: "CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES - Retrieves a list of the private property names for the designated resource.";
		Case 0x100007D: "CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES - Retrieves the read-only private property values for the designated resource.";
		Case 0x1000081: "CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES - Retrieves all private property values for the designated resource.";
		Case 0x1400086: "CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES - Sets the private property values for the designated resource.";
		Case 0x1000089: "CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES - Validates that the values supplied for the private properties are acceptable for the designated resource.";
		Case 0x100008D: "CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTY_FMTS - Retrieves a list of the private property formats for the designated resource.";
		Case 0x14000A2: "CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT - Adds a registry checkpoint to the designated resource.";
		Case 0x14000A6: "CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT - Removes a registry checkpoint from the designated resource.";
		Case 0x10000A9: "CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS - Retrieves a list of registry checkpoints associated with the designated resource.";
		Case 0x14000AE: "CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT - Associates a cryptographic container checkpoint with the designated resource.";
		Case 0x14000B2: "CLUSCTL_RESOURCE_DELETE_CRYPTO_CHECKPOINT - Removes the cryptographic container checkpoint from the designated resource.";
		Case 0x010000B5: "CLUSCTL_RESOURCE_GET_CRYPTO_CHECKPOINTS - Retrieves a list of cryptographic container checkpoints associated with the designated resource.";
		Case 0x14000BA: "CLUSCTL_RESOURCE_UPGRADE_DLL - Instructs the server to change the resource DLL for the resource type of the designated resource without stopping the cluster service.";
		Case 0x14000BE: "CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_64BIT - Add a registry checkpoint to the designated resource.";
		Case 0x14000C2: "CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_32BIT - Add a registry checkpoint to the designated resource.";
		Case 0x1000169: "CLUSCTL_RESOURCE_GET_NETWORK_NAME - Queries the NetBIOS name of the designated resource.";
		Case 0x1000172: "CLUSCTL_RESOURCE_NETNAME_REGISTER_DNS_RECORDS - Instructs the server to register the Domain Name System (DNS) records associated with the designated resource.";
		Case 0x1000175: "CLUSCTL_RESOURCE_GET_DNS_NAME - Queries the DNS of the designated resource.";
		Case 0x100017A: "CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFO - Updates information about the security principal of the designated resource.";
		Case 0x100017E: "CLUSCTL_RESOURCE_NETNAME_DELETE_CO - Deletes the security principal of the designated resource.";
		Case 0x1000181: "CLUSCTL_RESOURCE_NETNAME_VALIDATE_VCO - Confirms whether the security principal of the designated resource can be managed by the cluster.";
		Case 0x1000185: "CLUSCTL_RESOURCE_NETNAME_RESET_VCO - Resets the password for the designated alternate computer name's associated security principal.";
		Case 0x1c0018a: "CLUSCTL_RESOURCE_NETNAME_CREDS_UPDATED - Notifies the resource that the credentials for the domain account associated with the resource have changed.";
		Case 0x1000191: "CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO - Retrieves data about the disk that the designated storage-class resource represents.";
		Case 0x1000199: "CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID - Confirms that the path exists on the designated resource.";
		Case 0x14001BE: "CLUSCTL_RESOURCE_IPADDRESS_RENEW_LEASE - Acquires or renews the IP address associated with the designated resource.";
		Case 0x14001C2: "CLUSCTL_RESOURCE_IPADDRESS_RELEASE_LEASE - Releases the IP address associated with the designated resource.";
		Case 0x1400296: "CLUSCTL_RESOURCE_SET_CSV_MAINTENANCE_MODE - Enables or disables volume maintenance mode on the designated cluster shared volume.";
		Case 0x10001E1: "CLUSCTL_RESOURCE_QUERY_MAINTENANCE_MODE - Queries the maintenance state of the designated storage-class resource.";
		Case 0x14001E6: "CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE - Places the designated storage-class resource into maintenance.";
		Case 0x14001EA: "CLUSCTL_RESOURCE_STORAGE_SET_DRIVELETTER - Modifies the drive letter associated with the designated storage-class resource.";
		Case 0x10001F1: "CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX - Retrieves data about the disk that the designated storage-class resource represents.";
		Case 0x1000219: "CLUSCTL_RESOURCE_STORAGE_GET_DIRTY - Retrieves a list of dirty volumes on the disk.";
		Case 0x1000211: "CLUSCTL_RESOURCE_STORAGE_GET_MOUNTPOINTS - Retrieves a list of volume path names for a partition on the disk.";
		Case 0x1000225: "CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_INFO - Retrieves information about a volume that is accessible from all cluster nodes.";
		Case 0x1600004: "CLUSCTL_RESOURCE_VM_START_MIGRATION - Indicates to the VM resource that it needs to migrate to the specified cluster node.";
		Case 0x1600008: "CLUSCTL_RESOURCE_VM_CANCEL_MIGRATION - Indicates to the VM resource that it needs to cancel any pending migration.";
		Case 0x140028a: "CLUSCTL_RESOURCE_ENABLE_SHARED_VOLUME_DIRECTIO - Disables volume redirected mode on the designated shared volume.";
		Case 0x140028e: "CLUSCTL_RESOURCE_DISABLE_SHARED_VOLUME_DIRECTIO - Enables redirected mode on the designated cluster shared volume.";
		Case 0x140029a: "CLUSCTL_RESOURCE_SET_SHARED_VOLUME_BACKUP_MODE - Enables or disables volume backup mode on the designated cluster shared volume.";
		Default: "Unknown";
	}
}

Table CMRPApiResourceTypeControlControlCodeTable( Value )
{
	Switch( Value )
	{
		Case 0x02000000: "CLUSCTL_RESOURCE_TYPE_UNKNOWN - Verifies that control codes for the resource type are being processed.";
		Case 0x02000005: "CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS - Retrieves the intrinsic characteristics associated with the resource type.";
		Case 0x02000009: "CLUSCTL_RESOURCE_TYPE_GET_FLAGS - Retrieves the flags that are set for the resource type.";
		Case 0x0200000D: "CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO - Retrieves info about the class to which the resource type belongs.";
		Case 0x02000011: "CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES - Retrieves a list of the names of resource types on which an instance of this resource type MUST be dependent on in order to properly operate.";
		Case 0x02000015: "CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT - Queries the arbitration time-out value for the designated storage class resource.";
		Case 0x02000051: "CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES - Retrieves a list of the common property names for the designated resource type.";
		Case 0x02000055: "CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES - Retrieves the read-only common property values for the designated resource type.";
		Case 0x02000059: "CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES - Retrieves all common property values for the designated resource type.";
		Case 0x0240005E: "CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES - Sets the common property values for the designated resource type.";
		Case 0x02000061: "CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES - Validates that the values supplied for the common properties are acceptable for the designated resource type.";
		Case 0x02000065: "CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTY_FMTS - Retrieves a list of the common property formats for the designated resource type.";
		Case 0x02000069: "CLUSCTL_RESOURCE_TYPE_GET_COMMON_RESOURCE_PROPERTY_FMTS - Retrieves a list of the common property formats for resource instances of the designated resource type.";
		Case 0x02000079: "CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES - Retrieves a list of the private property names for the designated resource type.";
		Case 0x0200007D: "CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES - Retrieves the read-only private property values for the designated resource type.";
		Case 0x02000081: "CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES - Retrieves all private property values for the designated resource type.";
		Case 0x02400086: "CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES - Sets the private property values for the designated resource type.";
		Case 0x02000089: "CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES - Validates that the values supplied for the private properties are acceptable for the designated resource type.";
		Case 0x0200008D: "CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTY_FMTS - Retrieves a list of the private property formats for the designated resource type.";
		Case 0x02000091: "CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_RESOURCE_PROPERTY_FMTS - Retrieves a list of the private property formats for resource instances of the designated resource type.";
		Case 0x02000195: "CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS - Queries information on the designated node about disks that can be placed under cluster control.";
		Case 0x02000235: "CLUSCTL_RESOURCE_TYPE_NETNAME_VALIDATE_NETNAME - Confirms that the name is valid as an alternate connection point for the cluster.";
		Case 0x02000231: "CLUSCTL_RESOURCE_TYPE_VALIDATE_PATH - Confirms that for resources of type \"Generic Application\", the server can access the file using the supplied path.";
		Case 0x02000239: "CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_DIRECTORY - Confirms that, for resources of type \"Generic Application\", the supplied directory exists.";
		Case 0x020001ED: "CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DRIVELETTERS - Queries a bitmask of the drive letters that are in use on the designated node.";
		Case 0x020001F5: "CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX - Queries information on the designated node about disks that can be placed under cluster control.";
		Case 0x02000201: "CLUSCTL_RESOURCE_TYPE_STORAGE_REMAP_DRIVELETTER - Modifies the drive letter of a disk on the designated node.";
		Case 0x02000205: "CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DISKID - Queries the ID of a disk on the designated node.";
		Case 0x02000209: "CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CLUSTERABLE - Confirms whether a disk on the designated node can be placed under cluster control.";
		Case 0x0240020E: "CLUSCTL_RESOURCE_TYPE_STORAGE_RELEASE_OWNERSHIP - Releases control of a disk on the designated node.";
		Case 0x1000229: "CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CSV_FILE - Queries whether a file is stored on a clustered volume that is accessible to all cluster nodes.";
		Default: "Unknown";
	}
}

Table CMRPApiSetValueTypeTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "REG_NONE - No defined value type, as specified in [MS-GLOS] section .";
		Case 0x00000001: "REG_SZ - A null-terminated Unicode string, as specified in [MS-GLOS] section .";
		Case 0x00000002: "REG_EXPAND_SZ - A null-terminated Unicode string that contains unexpanded references to environment variables, as specified in [MS-GLOS] section .";
		Case 0x00000003: "REG_BINARY - Binary data in any form.";
		Case 0x00000004: "REG_DWORD - A 32-bit unsigned integer, as specified in [MS-GLOS] section .";
		Case 0x00000007: "REG_MULTI_SZ - An array of null-terminated Unicode strings that are terminated by two NULL characters, as specified in [MS-GLOS] section .";
		Case 0x0000000B: "REG_QWORD - A 64-bit unsigned integer, as specified in [MS-GLOS] section .";
		Default: "Unknown";
	}
}

//
//	_CLUSTER_OPERATIONALVERSION_INFO
// alignment: Align4
//
Struct CMRPClusterOperationalversionInfo
{
	UINT32 Size = MustBeSetToTable(this,"20 Bytes");
	UINT32 ClusterHighestVersion = CMRPClusterOperationalversionInfoClusterHighestVersionTable(this);
	UINT32 ClusterLowestVersion = CMRPClusterOperationalversionInfoClusterLowestVersionTable(this);
	UINT32 Flags = CMRPClusterOperationalversionInfoFlagsTable(this);
	UINT32 Reserved = MustBeSetToTable(this,"0");
}

Table CMRPClusterOperationalversionInfoClusterHighestVersionTable( Value )
{
	Switch( Value )
	{
		Case 0x000100e0: "One or more nodes support an internal version that is no higher than 0x0001 with internal build number 0x00e0.The highest version value of 0x000100e0 is returned by a cluster of nodes that are running windows_nt_4_0 SP3.This value is also returned by a cluster that is running both windows_nt_4_0 SP3 and windows_nt_4_sp4.";
		Case 0x000200e0: " One or more nodes support an internal version that is no higher than 0x0002 with internal build number 0x00e0.The highest version value of 0x000200e0 is returned by a cluster of nodes that are running windows_nt_4_sp4.This value is also returned by a cluster that is running both windows_nt_4_sp4 and windows_2000_server.";
		Case 0x00030893: "One or more nodes support an internal version that is no higher than 0x0003 with internal build number 0x0893.The highest version value of 0x00030893 is returned by a cluster that is running windows_2000_server on all nodes.This value is also returned by a cluster that is running both windows_2000_server and windows_server_2003.";
		Case 0x00040ECE: "One or more nodes support an internal version that is no higher than 0x0004 with internal build number 0x0ECE.The highest version value of 0x00040ECE is returned by a cluster that is running windows_server_2003 on all nodes.";
		Case 0x00051771: "One or more nodes support an internal version that is no higher than 0x0005 with internal build number 0x6001.The highest version value of 0x00051771 is returned by a cluster that is running windows_server_2008 on all its nodes.";
		Case 0x00061B58: "One or more nodes support an internal version that is no higher than 0x0006 with internal build number 0x1B58.The higher version value of 0x00061B58 is returned by a cluster that is running windows_server_7 Beta on all its nodes. The highest version value for a cluster that is running windows_server_7 on all its nodes will not be finalized until windows_server_7 is released";
		Default: "Unknown";
	}
}

Table CMRPClusterOperationalversionInfoClusterLowestVersionTable( Value )
{
	Switch( Value )
	{
		Case 0x000100e0: "One or more nodes support an internal version that is no lower than 0x0001 with internal build number 0x00e0.The lowest version value of 0x000100e0 is returned by a cluster of nodes that are running windows_nt_4_0 SP3 or a cluster of nodes that are running windows_nt_4_0 SP4.This value is also returned by a cluster of nodes that are running windows_nt_4_0 SP3 and windows_nt_4_sp4.";
		Case 0x000200e0: "One or more nodes support an internal version that is no lower than 0x0002 with internal build number 0x00e0.The lowest version value of 0x000200e0 is returned by a cluster of nodes that are running windows_2000.This value is also returned by a cluster that is running both windows_2000_server and windows_nt_4_sp4.";
		Case 0x00030893: "One or more nodes support an internal version that is no lower than 0x0003 with internal build number 0x0893.A lowest version value of 0x00030893 is returned by a cluster that is running windows_server_2003 on all nodes.This value is also returned by a cluster that is running both windows_server_2003 and windows_2000_server.";
		Case 0x00051771: "One or more nodes support an internal version that is no lower than 0x0005 with internal build number 0x6001.A lowest version value of 0x00051771 is returned by a cluster that is running windows_server_2008 on all nodes.";
		Case 0x00061B58: "One or more nodes support an internal version that is no lower than 0x0006 with internal build number 0x1B58.The lowest version value of 0x00061B58 is returned by a cluster that is running windows_server_7 Beta on all its nodes. The lowest version value for a cluster that is running windows_server_7 on all its nodes will not be finalized until windows_server_7 is released.";
		Default: "Unknown";
	}
}

Table CMRPClusterOperationalversionInfoFlagsTable( Value )
{
	Switch( Value )
	{
		Case 0x00000000: "All nodes in the cluster are running the same version of the cluster software.";
		Case 0x00000001: "CLUSTER_VERSION_FLAG_MIXED_MODE - The cluster is configured with nodes that are running different versions of the cluster software.";
		Default: "Unknown";
	}
}

Struct CMRPClusterOperationalversionInfoPtr
{
	NdrPtr Pointer;
	Switch {
		Case Pointer.ReferentID != 0:
			CMRPClusterOperationalversionInfo ClusterOperationalversionInfo;
	}
}

//
//	_ENUM_ENTRY
// alignment: None
//
Struct CMRPEnumEntry(EntryCount,CMRPValue)
{
	[local.count = EntryCount]
	while [local.count > 0]
	{	[local.count = local.count - 1]
		CMRPEnumEntryType(CMRPValue) Type;
		NdrPtr Pointer;
	}
	[local.count = EntryCount]
	while [local.count > 0]
	{	[local.count = local.count - 1]
		NdrWideString Name;
	}
}

Struct CMRPEnumEntryType(CMRPValue)
{
	Switch( CMRPValue )
	{
		case 7:
		Struct
		{
			UINT32 ClusterEnumNode:1 = FormatString("                (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster node.":"Unset");
			UINT32 ClusterEnumRestype:1 = FormatString("             (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster resource type.":"Unset");
			UINT32 ClusterEnumResource:1 = FormatString("            (%s)%s",this.toBitString,this?"TThis ENUM_ENTRY list element contains the name of a cluster resource.":"Unset");
			UINT32 ClusterEnumGroup:1 = FormatString("               (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster group.":"Unset");
			UINT32 ClusterEnumNetwork:1 = FormatString("             (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster network.":"Unset");
			UINT32 ClusterEnumNetinterface:1 = FormatString("        (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster network interface.":"Unset");
			UINT32 Reserved1:24 = FormatString("                     (%s)%s",this.toBitString,this?"Reserved":"");
			UINT32 ClusterEnumSharedVolumeResource:1 = FormatString("(%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster resource that represents a cluster shared volume.":"Unset");
			UINT32 Reserved2:1 = FormatString("                      (%s)%s",this.toBitString,this?"Reserved":"");
		};
		case 22:
		Struct
		{
			UINT32 ClusterResourceEnumDepends:1 = FormatString(" (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster resource that is depended upon.":"Unset");
			UINT32 ClusterResourceEnumProvides:1 = FormatString("(%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster resource that depends upon.":"Unset");
			UINT32 ClusterResourceEnumNodes:1 = FormatString("   (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster node that can host the resource designated in the call to ApiCreateResEnum.":"Unset");
			UINT32 Reserved:29 = FormatString("          (%s)%s",this.toBitString,this?"Reserved":"");
		};
		case 53:
		Struct
		{
			UINT32 ClusterGroupEnumContains:1 = FormatString(" (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster resource that is contained in the group designated in the call to ApiCreateGroupResourceEnum.":"Unset");
			UINT32 ClusterGroupEnumNodes:1 = FormatString("    (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster node that can host the group designated in the call to ApiCreateGroupResourceEnum.":"Unset");
			UINT32 Reserved:30 = FormatString("        (%s)%s",this.toBitString,this?"Reserved":"");
		};
		case 85:
		Struct
		{
			UINT32 ClusterGroupEnumContains:1 = FormatString(" (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster network interface.":"Unset");
			UINT32 Reserved:31 = FormatString("        (%s)%s",this.toBitString,this?"Reserved":"");
		};
		case 101:
		Struct
		{
			UINT32 ClusterNodeEnumNetinterfaces:1 = FormatString(" (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster network interface.":"Unset");
			UINT32 Reserved:31 = FormatString("            (%s)%s",this.toBitString,this?"Reserved":"");
		};
		case 103:
		Struct
		{
			UINT32 ClusterNodeEnumNetinterfaces:1 = FormatString("    (%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster node.":"Unset");
			UINT32 ClusterResourceTypeEnumResources:1 = FormatString("(%s)%s",this.toBitString,this?"This ENUM_ENTRY list element contains the name of a cluster resource.":"Unset");
			UINT32 Reserved:30 = FormatString("               (%s)%s",this.toBitString,this?"Reserved":"");
		};
	}
}

//
//	_ENUM_LIST
// alignment: None
//
Struct CMRPEnumList(CMRPValue)
{
	NdrConformant Size;
	NdrAlign Pad1;
	UINT32 EntryCount;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad2;
	}
	Switch
	{
		case Size.MaxCount > 0:	CMRPEnumEntry(Size.MaxCount,CMRPValue) Entry;
	}
}

Struct CMRPEnumListPtr(CMRPValue)
{
	NdrPtr EnumListPtr;
	Switch {
		Case EnumListPtr.ReferentID != 0:
			CMRPEnumList(CMRPValue) EnumList;
	}
}

//
//	IDL_CLUSTER_SET_PASSWORD_FLAGS
//
Struct CMRPIdlClusterSetPasswordFlags
{
	Switch( Property.MSRPCByteOrder )
	{
		Case LittleEndian:
			Struct
			{
				UINT32 SetPasswordFlag : 1 = FormatString("  (%s)%s",this.toBitString,this?"IDL_CLUSTER_SET_PASSWORD_IGNORE_DOWN_NODES":"");
				UINT32 Reserved : 31 = FormatString("       (%s)%s",this.toBitString,this?"Reserved":"");
			};
		Default:
			Struct
			{
				UINT32 Reserved : 31 = FormatString("       (%s)%s",this.toBitString,this?"Reserved":"");
				UINT32 SetPasswordFlag : 1 = FormatString("  (%s)%s",this.toBitString,this?"IDL_CLUSTER_SET_PASSWORD_IGNORE_DOWN_NODES":"");
			};
	}
}

Struct ErrorStatus = StatusCode.ToString
{
	UINT32 StatusCode = WinErrorCodeTable( this );
}

Struct CMRPRegSam
{
	Switch( Property.MSRPCByteOrder )
	{
		Case LittleEndian:
			Struct
			{
				UINT32 QueryValue : 1 = FormatString("  (%s)%s",this.toBitString,this?"Query the values":"");
				UINT32 UpdateValue : 1 = FormatString(" (%s)%s",this.toBitString,this?"Delete,Create or set the values":"");
				UINT32 CreateSubkey : 1 = FormatString("(%s)%s",this.toBitString,this?"Create a Subkey":"");
				UINT32 Enumerate : 1 = FormatString("   (%s)%s",this.toBitString,this?"Enumerate subkey":"");
				UINT32 Notification : 1 = FormatString("(%s)%s",this.toBitString,this?"Change key's notification":"");
				UINT32 Symbolic : 1 = FormatString("    (%s)%s",this.toBitString,this?"Create a symbolic link":"");
				UINT32 Reserved67 : 2 = FormatString("  (%s)%s",this.toBitString,this?"Reserved":"");
				UINT32 Version64 : 1 = FormatString("   (%s)%s",this.toBitString,this?"Is 64-bit Version":"");
				UINT32 Version32 : 1 = FormatString("   (%s)%s",this.toBitString,this?"Is 32-bit Version":"");
				UINT32 Reserved10 : 22 = FormatString("(%s)%s",this.toBitString,this?"Reserved":"");
			};
		Default:
			Struct
			{
				UINT32 Reserved10 : 22 = FormatString("(%s)%s",this.toBitString,this?"Reserved":"");
				UINT32 Version32 : 1 = FormatString("   (%s)%s",this.toBitString,this?"Is 32-bit Version":"");
				UINT32 Version64 : 1 = FormatString("   (%s)%s",this.toBitString,this?"Is 64-bit Version":"");
				UINT32 Reserved67 : 2 = FormatString("  (%s)%s",this.toBitString,this?"Reserved":"");
				UINT32 Symbolic : 1 = FormatString("    (%s)%s",this.toBitString,this?"Create a symbolic link":"");
				UINT32 Notification : 1 = FormatString("(%s)%s",this.toBitString,this?"Change key's notification":"");
				UINT32 Enumerate : 1 = FormatString("   (%s)%s",this.toBitString,this?"Enumerate subkey":"");
				UINT32 CreateSubkey : 1 = FormatString("(%s)%s",this.toBitString,this?"Create a Subkey":"");
				UINT32 UpdateValue : 1 = FormatString(" (%s)%s",this.toBitString,this?"Delete,Create or set the values":"");
				UINT32 QueryValue : 1 = FormatString("  (%s)%s",this.toBitString,this?"Query the values":"");
			};
	}
}

//
//	IDL_CLUSTER_SET_PASSWORD_STATUS
// alignment: Align4
//
Struct CMRPIdlClusterSetPasswordStatus
{
	UINT32 NodeId;
	Boolean SetAttempted;
	Align4 Padding;
	UINT32 ReturnStatus;
	switch
	{
		case Property.MSRPCNdr64: Align4 Pad;
	}
}

//
//	_RPC_SECURITY_ATTRIBUTES
// alignment: Align4
//
Struct CMRPRpcSecurityAttributes
{
	UINT32 Length;
	CMRPRpcSecurityDescriptor RpcSecurityDescriptor;
	BOOL InheritHandle;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
}

Struct CMRPRpcSecurityAttributesPtr
{
	NdrPtr RpcSecurityAttributesPtr;
	Switch {
		Case RpcSecurityAttributesPtr.ReferentID != 0:
			CMRPRpcSecurityAttributes RpcSecurityAttributes;
	}
}

Table CMRPClusterRegBatchCommandTable(value)
{
	Switch(value)
	{
		case 1: "CLUSREG_SET_VALUE";
		case 2: "CLUSREG_CREATE_KEY";
		case 3: "CLUSREG_DELETE_KEY";
		case 4: "CLUSREG_DELETE_VALUE";
		case 6: "CLUSREG_VALUE_DELETED";
		Default: "Unknow value";
	}
}

//
// CLUSTER_REG_BATCH_UPDATE
// alignment: Align4
//
Struct CMRPClusterRegBatchUpdate(Value)
{
	UINT32 VersionNumber;
	[BatchUpdateCommandLength = Value - 4 + FrameOffset]
	While [FrameOffset < BatchUpdateCommandLength]
	{
		CMRPBatchUpdateCommand BatchUpdateCommand;
	}
}

//
// BATCH_UPDATE_COMMAND
// alignment: Align4
//
Struct CMRPBatchUpdateCommand
{
	UINT32 CommandType = CMRPClusterRegBatchCommandTable(this);
	UINT32 ValueType = CommandType == 1 ? CMRPApiSetValueTypeTable(this): "";
	UINT32 NameLength;
	UnicodeString(NameLength) Name;
	Align4 Pad1;
	UINT32 DataLength;
	switch
	{
		case DataLength > 0: UINT8 Data[DataLength];
	}
	[PadLength = DataLength/2 == 0 ? 0 : 1]
	Switch
	{
		case PadLength > 0: UINT8 Pad2;
	}
}

//
//	_RPC_SECURITY_DESCRIPTOR
// alignment: None
//
Struct CMRPRpcSecurityDescriptor
{
	NdrConformantVarying Length;
	BLOB(Length.ActualCount) SecurityDescriptor;
	ALIGN4 Pad;
	UINT32 cbInSecurityDescriptor;
	UINT32 cbOutSecurityDescriptor;
	switch
	{
		case Property.MSRPCNdr64: Align8 Pad;
	}
}

Table ErrorStatusV2(value)
{
	switch(value)
	{
		case 6: "ERROR_INVALID_HANDLE";
		case 1115: "ERROR_SHUTDOWN_IN_PROGRESS";
		case 1255: "ERROR_SERVER_SHUTDOWN_IN_PROGRESS";
		case 1702: "RPC_S_INVALID_BINDING";
		case 1717:	"RPC_S_UNKNOWN_IF";
		case 1722:	"RPC_S_SERVER_UNAVAILABLE";
		case 1723:	"RPC_S_SERVER_TOO_BUSY";
		case 1726:	"RPC_S_CALL_FAILED";
		case 1727:	"RPC_S_CALL_FAILED_DNE";
		case 1747:	"RPC_S_UNKNOWN_AUTHN_SERVICE";
		case 1753:	"EPT_S_NOT_REGISTERED";
		case 1775:	"RPC_X_SS_IN_NULL_CONTEXT";
		case 5072:	"ERROR_CLUSTER_NODE_NOT_READY";
		case 5073:	"ERROR_CLUSTER_NODE_SHUTTING_DOWN";
		Default: WinErrorCodeTable(value);
	}
}
Table ErrorStatusV3(value)
{
	switch(value)
	{
		case 1702:	"RPC_S_INVALID_BINDING";
		case 1717:	"RPC_S_UNKNOWN_IF";
		case 1722:	"RPC_S_SERVER_UNAVAILABLE";
		case 1723:	"RPC_S_SERVER_TOO_BUSY";
		case 1726:	"RPC_S_CALL_FAILED";
		case 1727:	"RPC_S_CALL_FAILED_DNE";
		case 1747:	"RPC_S_UNKNOWN_AUTHN_SERVICE";
		case 1753:	"EPT_S_NOT_REGISTERED";
		case 1775:	"RPC_X_SS_IN_NULL_CONTEXT";
		case 1825:	"RPC_S_SEC_PKG_ERROR";
		case 5072:	"ERROR_CLUSTER_NODE_NOT_READY";
		case 5073:	"ERROR_CLUSTER_NODE_SHUTTING_DOWN";
		Default: WinErrorCodeTable(value);
	}
}
Table CMRPMethodNameTable( Opnum )
{
	Switch( Opnum )
	{
		Case 0: "ApiOpenCluster";
		Case 1: "ApiCloseCluster";
		Case 2: "ApiSetClusterName";
		Case 3: "ApiGetClusterName";
		Case 4: "ApiGetClusterVersion";
		Case 5: "ApiGetQuorumResource";
		Case 6: "ApiSetQuorumResource";
		Case 7: "ApiCreateEnum";
		Case 8: "ApiOpenResource";
		Case 9: "ApiCreateResource";
		Case 10: "ApiDeleteResource";
		Case 11: "ApiCloseResource";
		Case 12: "ApiGetResourceState";
		Case 13: "ApiSetResourceName";
		Case 14: "ApiGetResourceId";
		Case 15: "ApiGetResourceType";
		Case 16: "ApiFailResource";
		Case 17: "ApiOnlineResource";
		Case 18: "ApiOfflineResource";
		Case 19: "ApiAddResourceDependency";
		Case 20: "ApiRemoveResourceDependency";
		Case 21: "ApiCanResourceBeDependent";
		Case 22: "ApiCreateResEnum";
		Case 23: "ApiAddResourceNode";
		Case 24: "ApiRemoveResourceNode";
		Case 25: "ApiChangeResourceGroup";
		Case 26: "ApiCreateResourceType";
		Case 27: "ApiDeleteResourceType";
		Case 28: "ApiGetRootKey";
		Case 29: "ApiCreateKey";
		Case 30: "ApiOpenKey";
		Case 31: "ApiEnumKey";
		Case 32: "ApiSetValue";
		Case 33: "ApiDeleteValue";
		Case 34: "ApiQueryValue";
		Case 35: "ApiDeleteKey";
		Case 36: "ApiEnumValue";
		Case 37: "ApiCloseKey";
		Case 38: "ApiQueryInfoKey";
		Case 39: "ApiSetKeySecurity";
		Case 40: "ApiGetKeySecurity";
		Case 41: "ApiOpenGroup";
		Case 42: "ApiCreateGroup";
		Case 43: "ApiDeleteGroup";
		Case 44: "ApiCloseGroup";
		Case 45: "ApiGetGroupState";
		Case 46: "ApiSetGroupName";
		Case 47: "ApiGetGroupId";
		Case 48: "ApiGetNodeId";
		Case 49: "ApiOnlineGroup";
		Case 50: "ApiOfflineGroup";
		Case 51: "ApiMoveGroup";
		Case 52: "ApiMoveGroupToNode";
		Case 53: "ApiCreateGroupResourceEnum";
		Case 54: "ApiSetGroupNodeList";
		Case 55: "ApiCreateNotify";
		Case 56: "ApiCloseNotify";
		Case 57: "ApiAddNotifyCluster";
		Case 58: "ApiAddNotifyNode";
		Case 59: "ApiAddNotifyGroup";
		Case 60: "ApiAddNotifyResource";
		Case 61: "ApiAddNotifyKey";
		Case 62: "ApiReAddNotifyNode";
		Case 63: "ApiReAddNotifyGroup";
		Case 64: "ApiReAddNotifyResource";
		Case 65: "ApiGetNotify";
		Case 66: "ApiOpenNode";
		Case 67: "ApiCloseNode";
		Case 68: "ApiGetNodeState";
		Case 69: "ApiPauseNode";
		Case 70: "ApiResumeNode";
		Case 71: "ApiEvictNode";
		Case 72: "ApiNodeResourceControl";
		Case 73: "ApiResourceControl";
		Case 74: "ApiNodeResourceTypeControl";
		Case 75: "ApiResourceTypeControl";
		Case 76: "ApiNodeGroupControl";
		Case 77: "ApiGroupControl";
		Case 78: "ApiNodeNodeControl";
		Case 79: "ApiNodeControl";
		Case 80: "Opnum80NotUsedOnWire";
		Case 81: "ApiOpenNetwork";
		Case 82: "ApiCloseNetwork";
		Case 83: "ApiGetNetworkState";
		Case 84: "ApiSetNetworkName";
		Case 85: "ApiCreateNetworkEnum";
		Case 86: "ApiGetNetworkId";
		Case 87: "ApiSetNetworkPriorityOrder";
		Case 88: "ApiNodeNetworkControl";
		Case 89: "ApiNetworkControl";
		Case 90: "ApiAddNotifyNetwork";
		Case 91: "ApiReAddNotifyNetwork";
		Case 92: "ApiOpenNetInterface";
		Case 93: "ApiCloseNetInterface";
		Case 94: "ApiGetNetInterfaceState";
		Case 95: "ApiGetNetInterface";
		Case 96: "ApiGetNetInterfaceId";
		Case 97: "ApiNodeNetInterfaceControl";
		Case 98: "ApiNetInterfaceControl";
		Case 99: "ApiAddNotifyNetInterface";
		Case 100: "ApiReAddNotifyNetInterface";
		Case 101: "ApiCreateNodeEnum";
		Case 102: "ApiGetClusterVersion2";
		Case 103: "ApiCreateResTypeEnum";
		Case 104: "ApiBackupClusterDatabase";
		Case 105: "ApiNodeClusterControl";
		Case 106: "ApiClusterControl";
		Case 107: "ApiUnblockGetNotifyCall";
		Case 108: "ApiSetServiceAccountPassword";
		Case 109: "ApiSetResourceDependencyExpression";
		Case 110: "ApiGetResourceDependencyExpression";
		Case 111: "Opnum111NotUsedOnWire";
		Case 112: "ApiGetResourceNetworkName";
		Case 113: "ApiExecuteBatch";
		Case 114: "ApiCreateBatchPort";
		Case 115: "ApiGetBatchNotification";
		Case 116: "ApiCloseBatchPort";
		Case 117: "ApiOpenClusterEx";
		Case 118: "ApiOpenNodeEx";
		Case 119: "ApiOpenGroupEx";
		Case 120: "ApiOpenResourceEx";
		Case 121: "ApiOpenNetworkEx";
		Case 122: "ApiOpenNetInterfaceEx";
		Case 123: "ApiChangeCsvState";
		Default: "unknown";
	}
}

