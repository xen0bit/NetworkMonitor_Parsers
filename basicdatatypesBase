//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  BasicDataTypes
//#
//#  Details:                Definitions of Basic Data Types for all NPL
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 8/31/2009
//#
//####

//
// Char
//

Number CHAR
{
	Size = 1;
	DisplayFormat = FormatString( "%c", this );
}

Number WCHAR
{
	Size = 2;
	DisplayFormat = FormatString( "%c", this );
}

//
// Boolean
//

UnsignedNumber BOOLEAN
{
	Size = 1;
	DisplayFormat = FormatString( "%s", this ? "TRUE" : "FALSE" );
}

UnsignedNumber BOOL
{
	Size = 4;
	DisplayFormat = FormatString( "%s", this ? "TRUE" : "FALSE" );
}

UnsignedNumber VARIANTBOOL
{
	Size = 2;
	DisplayFormat = FormatString( "%s", this ? "TRUE" : "FALSE" );
}
//
// Signed Data Types
//

Number INT8
{
	Size = 1;
	DisplayFormat = FormatString( "%d (0x%X)", this, this );
}

Number INT16
{
	Size = 2;
	DisplayFormat = FormatString( "%d (0x%X)", this, this );
}

Number INT24
{
	Size = 3;
	DisplayFormat = FormatString( "%d (0x%X)", this, this );
}

Number INT32
{
	Size = 4;
	DisplayFormat = FormatString( "%d (0x%X)", this, this );
}

Number INT40
{
	Size = 5;
	DisplayFormat = FormatString( "%I64d (0x%I64X)", this, this );
}

Number INT48
{
	Size = 6;
	DisplayFormat = FormatString( "%I64d (0x%I64X)", this, this );
}

Number INT56
{
	Size = 7;
	DisplayFormat = FormatString( "%I64d (0x%I64X)", this, this );
}

Number INT64
{
	Size = 8;
	DisplayFormat = FormatString( "%I64d (0x%I64X)", this, this );
}

//
// Unsigned Data Types
//

UnsignedNumber UINT8
{
	Size = 1;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber UINT16
{
	Size = 2;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber UINT24
{
	Size = 3;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber UINT32
{
	Size = 4;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber UINT40
{
	Size = 5;
	DisplayFormat = FormatString( "%I64u (0x%I64X)", this, this );
}

UnsignedNumber UINT48
{
	Size = 6;
	DisplayFormat = FormatString( "%I64u (0x%I64X)", this, this );
}

UnsignedNumber UINT56
{
	Size = 7;
	DisplayFormat = FormatString( "%I64u (0x%I64X)", this, this );
}

UnsignedNumber UINT64
{
	Size = 8;
	DisplayFormat = FormatString( "%I64u (0x%I64X)", this, this );
}

UnsignedNumber HCALL
{
	Size = 4;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

//
// Decimal
//

Decimal Float
{
	Size = 4;
	DisplayFormat = FormatString( "%f", this );
}

Decimal Double
{
	Size = 8;
	DisplayFormat = FormatString( "%f", this );
}

//
// Time
//

Time TIMESTAMP
{
	Size = 4;
	DisplayFormat = (this!= 0)? FormatString( "%T{MM/dd/yyyy}, %t{HH':'mm':'ss} .%t{ffff} ", this, this, this )
	: "No Time Specified (0)"
}

Time FILETIME
{
	Size = 8;
	DisplayFormat = (this!= 0)? FormatString( "%T{MM/dd/yyyy}, %t{HH':'mm':'ss}.%t{ffffff tt}", this, this, this )
	: "No Time Specified (0)"
}

Number UNIXTIMESTAMP
{
	//0x19DB1DED53E8000 = Number of nano seconds from 1601 to 1970
	Size = 4;
	DisplayFormat = FormatString( "%T{MM/dd/yyyy}, %t{HH':'mm':'ss} .%t{ffff} ", ( this * 10000000)  + 0x19DB1DED53E8000,  ( this * 10000000) + 0x19DB1DED53E8000 , ( this * 10000000)  + 0x19DB1DED53E8000  );
}

//
// Variable Length Data Types
//

UnsignedNumber Integer ( Length )
{
	Size = Length;
	DisplayFormat = Length <= 4 ? FormatString( "%u (0x%X)", this, this ) : FormatString( "%I64u (0x%I64X)", this, this );
}

UnsignedNumber BLOB ( Length )
{
	Size = Length;
	DisplayFormat = FormatString( "Binary Large Object (%u Bytes)", Length );
}

//
// Other
//

UnsignedNumber MacAddress
{
	Size = 6;
	DisplayFormat = FormatString( "%02X-%02X-%02X-%02X-%02X-%02X", this[5], this[4], this[3], this[2], this[1], this[0] );
}

UnsignedNumber IPv4Address
{
	Size = 4;
	DisplayFormat = FormatString( "%u.%u.%u.%u", this[3], this[2], this[1], this[0] );
}

UnsignedNumber IPv6Address
{
	Size = 16;
	DisplayFormat = FormatString( "%X:%X:%X:%X:%X:%X:%X:%X", this[15] * 256 + this[14],
								 this[13] * 256 + this[12], this[11] * 256 + this[10],
								 this[9] * 256 + this[8], this[7] * 256 + this[6],
								 this[5] * 256 + this[4], this[3] * 256 + this[2],
								 this[1] * 256 + this[0] );
}

UnsignedNumber GUID ( Marshalled )
{
	Size = 16;
	DisplayFormat = Marshalled ? FormatString( "{%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X}",
													this[3], this[2], this[1], this[0], this[5], this[4], this[7], this[6],
													this[8], this[9], this[10], this[11], this[12], this[13], this[14], this[15] )
												: FormatString( "{%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X}",
													this[15], this[14], this[13], this[12], this[11], this[10], this[9], this[8],
													this[7], this[6], this[5], this[4], this[3], this[2], this[1], this[0] );
}

UnsignedNumber UUID ( Marshalled )
{
	Size = 16;
	DisplayFormat = Marshalled ? FormatString( "{%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X}",
													this[3], this[2], this[1], this[0], this[5], this[4], this[7], this[6],
													this[8], this[9], this[10], this[11], this[12], this[13], this[14], this[15] )
												: FormatString( "{%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X}",
													this[15], this[14], this[13], this[12], this[11], this[10], this[9], this[8],
													this[7], this[6], this[5], this[4], this[3], this[2], this[1], this[0] );
}

UnsignedNumber CONTEXT_HANDLE
{
	Size = 20;
	DisplayFormat = FormatString( "{%02X%02X%02X%02X-%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X}",
									this[0], this[1], this[2], this[3], this[4], this[5], this[6], this[7], this[8], this[9],
									this[10], this[11], this[12], this[13], this[14], this[15], this[16], this[17], this[18], this[19] );
}

/*
//
// Obsolete Data Types
//
Number INT
{
	Size = 4;
	DisplayFormat = FormatString( "%d (0x%X)", this, this );
}

Number LONG
{
	Size = 4;
	DisplayFormat = FormatString( "%d (0x%X)", this, this );
}

Number LONGLONG
{
	Size = 8;
	DisplayFormat = FormatString( "%d (0x%X)", this, this );
}

Number SHORT
{
	Size = 2;
	DisplayFormat = FormatString( "%d (0x%X)", this, this );
}

UnsignedNumber BYTE
{
	Size = 1;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber UCHAR
{
	Size = 1;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}


UnsignedNumber USHORT
{
	Size = 2;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber ULONG
{
	Size = 4;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber ULONGLONG
{
	Size = 8;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber ULONG64
{
	Size = 8;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber WORD
{
	Size = 2,
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber DWORD
{
	Size = 4;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber DWORDLONG
{
	Size = 8;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber LARGE_INTEGER
{
	Size = 8;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber TRIPLEBYTE
{
	Size = 3,
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}


//
// Data Types Which Flip The Byte Order (Obsoleted)
//

UnsignedNumber RWORD
{
	Size = 2;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
	ByteOrder = LittleEndian;
}

UnsignedNumber RDWORD
{
	Size = 4;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
	ByteOrder = LittleEndian;
}

UnsignedNumber DWORDLITTLE
{
	Size = 4;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
	ByteOrder = LittleEndian;
}

UnsignedNumber USHORTLITTLE
{
	Size = 2;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
	ByteOrder = LittleEndian;
}
*/
