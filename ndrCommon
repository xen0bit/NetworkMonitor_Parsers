//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Network Data Representation -- NDR
//#
//#  Details:                
//#
//#  Public References:      [C706]
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 2/24/2010
//#
//####

//
// NDR structures
//

UnsignedNumber NdrRefid(Size)
{
	Size = Size;
	DisplayFormat = FormatString(FormatString("0x%s0%dX", "%", Size*2), this);
}

UnsignedNumber NdrOffset(Size)
{
	Size = Size;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber NdrCount(Size)
{
	Size = Size;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber NdrEnumeration(Size)
{
	Size = Size;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

UnsignedNumber NdrV1Enum(Size)
{
	Size = Size;
	DisplayFormat = FormatString( "%u (0x%X)", this, this );
}

struct NdrAlign = (Property.ParserWarning == 1) ? " Warning: " + Property.ParserWarningMessage : Property.MSRPCNdr64 ? Align8Padding.ToString : Align4Padding.ToString
{
	switch
	{
		case !(ConvID > 0):
		_struct ReportWarning
		{
			ReportParserWarning( "MSRPC", "May not parsed correctly when conversation off") ParserWarning;
		};
	}
	switch
	{
		case Property.MSRPCNdr64 == TRUE : ALIGN8 Align8Padding;
		default : ALIGN4 Align4Padding;
	}
}

//struct NdrSwitchValue = FormatString( "Value = %u", SwitchValue ) {
	//switch
	//{
		//case !(ConvID > 0):
		//_struct ReportWarning
		//{
			//ReportParserWarning( "MSRPC", "May not parsed correctly when conversation off") ParserWarning;
		//};
	//}
	//switch
	//{
		//case property.MSRPCNdr64 && CurrentProtocolOffset % 8 > 0 ||
			 //!property.MSRPCNdr64 && CurrentProtocolOffset % 4 > 0:
			//NdrAlign Pad;
	//}
	//NdrValue(property.MSRPCNdr64 ? 8 : 4) SwitchValue = FormatString( "%u", this );
//}

struct NdrConformant = FormatString( "%d Elements", MaxCount ) {
	switch
	{
		case !(ConvID > 0):
		_struct ReportWarning
		{
			ReportParserWarning( "MSRPC", "May not parsed correctly when conversation off") ParserWarning;
		};
	}
	switch
	{
		case property.MSRPCNdr64 && CurrentProtocolOffset % 8 > 0 ||
			 !property.MSRPCNdr64 && CurrentProtocolOffset % 4 > 0:
			NdrAlign Pad;
	}
	NdrCount(property.MSRPCNdr64 ? 8 : 4) MaxCount = FormatString( "%u", this );
}

struct NdrVarying = FormatString( "%d Elements", ActualCount )
{
	switch
	{
		case !(ConvID > 0):
		_struct ReportWarning
		{
			ReportParserWarning( "MSRPC", "May not parsed correctly when conversation off") ParserWarning;
		};
	}
	switch
	{
		case property.MSRPCNdr64 && CurrentProtocolOffset % 8 > 0 ||
			 !property.MSRPCNdr64 && CurrentProtocolOffset % 4 > 0:
			NdrAlign Pad;
	}
	NdrOffset(property.MSRPCNdr64 ? 8 : 4) Offset = FormatString( "%u", this );
	NdrCount(property.MSRPCNdr64 ? 8 : 4) ActualCount = FormatString( "%u", this );
}

struct NdrConformantVarying = FormatString( "%d Elements", ActualCount )
{
	switch
	{
		case !(ConvID > 0):
		_struct ReportWarning
		{
			ReportParserWarning( "MSRPC", "May not parsed correctly when conversation off") ParserWarning;
		};
	}
	switch
	{
		case property.MSRPCNdr64 && CurrentProtocolOffset % 8 > 0 ||
			 !property.MSRPCNdr64 && CurrentProtocolOffset % 4 > 0:
			NdrAlign Pad;
	}
	NdrCount(property.MSRPCNdr64 ? 8 : 4) MaxCount = FormatString( "%u", this );
	NdrOffset(property.MSRPCNdr64 ? 8 : 4) Offset = FormatString( "%u", this );
	NdrCount(property.MSRPCNdr64 ? 8 : 4) ActualCount = FormatString( "%u", this );
}

struct NdrEnum = value 
{
	switch
	{
		case !(ConvID > 0):
		_struct ReportWarning
		{
			ReportParserWarning( "MSRPC", "May not parsed correctly when conversation off") ParserWarning;
		};
	}
	// Embedded alignment 
	switch
	{
			case property.MSRPCNdr64 && CurrentProtocolOffset % 4 > 0: Align4 Pad1;
			case !property.MSRPCNdr64 && CurrentProtocolOffset % 2 > 0: Align2 Pad2;
	}
	[Property.NdrEnumValue]
	NdrEnumeration(property.MSRPCNdr64 ? 4 : 2) value;
}

struct NdrPtr = ReferentID ? FormatString( "Pointer To %s", ReferentID.ToString ) : FormatString( "Pointer To NULL" ) {
	switch
	{
		case !(ConvID > 0):
		_struct ReportWarning
		{
			ReportParserWarning( "MSRPC", "May not parsed correctly when conversation off") ParserWarning;
		};
	}
	switch
	{
		case property.MSRPCNdr64 && CurrentProtocolOffset % 8 > 0 ||
			 !property.MSRPCNdr64 && CurrentProtocolOffset % 4 > 0:
			NdrAlign Pad;
	}
	NdrRefid(property.MSRPCNdr64 ? 8 : 4) ReferentID;
}

struct NdrPtrToConformant = ReferentID ? FormatString( "Pointer To %s, %d Elements", ReferentID.ToString, MaxCount ) : FormatString( "Pointer To NULL" )
{
	switch
	{
		case !(ConvID > 0):
		_struct ReportWarning
		{
			ReportParserWarning( "MSRPC", "May not parsed correctly when conversation off") ParserWarning;
		};
	}
	switch
	{
		case property.MSRPCNdr64 && CurrentProtocolOffset % 8 > 0 ||
			 !property.MSRPCNdr64 && CurrentProtocolOffset % 4 > 0:
			NdrAlign Pad;
	}
	NdrRefid(property.MSRPCNdr64 ? 8 : 4) ReferentID = FormatString( "0x%08X", this );
	switch {
		case ReferentID > 0: NdrCount(property.MSRPCNdr64 ? 8 : 4) MaxCount = FormatString( "%u", this );
	}
}

struct NdrString = Length.ActualCount > 0 ? Array.ArrayData.ToString : "<Empty>"
{
	NdrConformantVarying Length;
	switch
	{
		case Length.ActualCount > 0:
		struct Array = ArrayData.ToString
		{
			AsciiString (Length.ActualCount) ArrayData = UINT8( FrameData, Offset ) ? AsciiString( FrameData, Offset, Length.ActualCount ) : "<Empty>";
		}
	}
}

struct NdrVaryingString = Length.ActualCount > 0 ? Array.ArrayData.ToString : "<Empty>"
{
	NdrVarying Length;
	switch
	{
		case Length.ActualCount > 0:
		struct Array = ArrayData.ToString
		{
			AsciiString (Length.ActualCount) ArrayData = UINT8( FrameData, Offset ) ? AsciiString( FrameData, Offset, Length.ActualCount ) : "<Empty>";
		}
	}
}

struct NdrWideString = Length.ActualCount > 0 ? Array.ArrayData.ToString : "<Empty>"
{
	NdrConformantVarying Length;
	switch
	{
		case Length.ActualCount > 0:
		struct Array = ArrayData.ToString
		{
			[DataFieldByteOrder = LittleEndian]
			UnicodeString (Length.ActualCount) ArrayData = UINT16( FrameData, Offset ) ? this : "<Empty>";
		}
	}
}

struct NdrVaryingWideString = Length.ActualCount > 0 ? Array.ArrayData.ToString : "<Empty>"
{
	NdrVarying Length;
	switch
	{
		case Length.ActualCount > 0:
		struct Array = ArrayData.ToString
		{
			[DataFieldByteOrder = LittleEndian]
			UnicodeString (Length.ActualCount) ArrayData = UINT16( FrameData, Offset ) ? this : "<Empty>";
		}
	}
}

[WideStringCount = 0]
struct NdrWideStrings = Length.ActualCount > 0 ? Property.WideStringCount ? FormatString( "%u Strings", Property.WideStringCount ) : ArrayData.ToString : "<Empty>"
{
	NdrConformantVarying Length;
	switch
	{
		case Length.ActualCount > 0:
		switch
		{
			case WCHAR( FrameData, Offset ) == 0x00:
			BLOB (Length.ActualCount * 2) ArrayData;

			Default:
			struct
			{
				While Array[ !(UINT8( Framedata, Offset ) == 0x00) ] {
					struct Array = ArrayData {
						[WideStringCount = WideStringCount + 1] 
						[DataFieldByteOrder = LittleEndian]
						UnicodeString ArrayData;
					}
				}
			}
		}
	}
}

struct NdrUnicodeString = (Pointer.ReferentID > 0) ? sValue.toString : FormatString( "NULL" )
{
	switch
	{
		case property.MSRPCNdr64 && CurrentProtocolOffset % 8 > 0 ||
			 !property.MSRPCNdr64 && CurrentProtocolOffset % 4 > 0:
			NdrAlign Pad;
	}
	UINT16 Length;
	UINT16 MaximumLength;

	switch {
		case !(ConvID > 0):
		_struct ReportWarning
		{
			ReportParserWarning( "MSRPC", "May not parsed correctly when conversation off") ParserWarning;
		};
	}
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: NdrWideString sValue;
	}
}

struct NdrConformantArray (Pointer, Varying) = Property.ConformantArraySize ? Array.ArrayData.ToString : "<Empty>"
{
	switch {
		case Pointer == TRUE: NdrPtr Pointer;
	}

	switch( Varying )
	{
		case TRUE:
		struct {
			[ConformantArraySize = this.MaxCount]
			NdrConformant Size;
		}
		
		Default:
		struct {
			[ConformantArraySize = this.MaxCount]
			NdrConformantVarying Size;
		}
	}

	switch
	{
		case Property.ConformantArraySize > 0:
		struct Array
		{
			Blob (Property.ConformantArraySize) ArrayData;
			switch {
				case CurrentProtocolOffset % 4 > 0 && FrameLength - Offset > 0: ALIGN4 Padding;
			}
		}
	}
}

struct NdrSecurityDescriptor = FormatString( "%s %s", SecurityDescriptorOwnerSID, SecurityDescriptorGroupSID ) 
{
	[
		SecurityDescriptorOffset = Frameoffset,
		SecurityDescriptorOwnerSID = "",
		SecurityDescriptorGroupSID = ""
	]
	UINT8 Revision;
	UINT8 Sbz1;
	struct SecurityDescriptorControl = FormatString( "0x%04X", UINT16( FrameData, Offset ) )
	{
		switch( Property.MSRPCByteOrder )
		{
			case LittleEndian:
			struct
			{
				UINT16 SeOwnerDefaulted:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Owner SID was provided by a defaulting mechanism." : "Owner SID was provided by the security descriptor's original provider.");
				UINT16 SeGroupDefaulted:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Group SID was provided by a defaulting mechanism." : "Group SID was provided by the security descriptor's original provider.");
				UINT16 SeDaclPresent:1 = FormatString("       (%s) %s", this.ToBitString, this ? "DACL is present in the security descriptor" : "DACL is NOT present in the security descriptor");
				UINT16 SeDaclDefaulted:1 = FormatString("     (%s) %s", this.ToBitString, this ? "DACL member was provided by a defaulting mechanism" : "DACL member was provided by the security descriptor's original provider.");
				UINT16 SeSaclPresent:1 = FormatString("       (%s) %s", this.ToBitString, this ? "SACL is present in the security descriptor" : "SACL is NOT present in the security descriptor");
				UINT16 SeSaclDefaulted:1 = FormatString("     (%s) %s", this.ToBitString, this ? "SACL member was provided by a defaulting mechanism" : "SACL member was provided by the security descriptor's original provider.");
				UINT16 Bit06:1 = FormatString("               (%s) %s", this.ToBitString, "");
				UINT16 Bit07:1 = FormatString("               (%s) %s", this.ToBitString, "");
				UINT16 SeDaclAutoInheritReq:1 = FormatString("(%s) %s", this.ToBitString, this ? "Requesting to automatically propagate the DACL to existing child objects" : "NOT Requesting to automatically propagate the DACL to existing child objects");
				UINT16 SeSaclAutoInheritReq:1 = FormatString("(%s) %s", this.ToBitString, this ? "Requesting to automatically propagate the SACL to existing child objects" : "NOT Requesting to automatically propagate the SACL to existing child objects");
				UINT16 SeDaclAutoInherited:1 = FormatString(" (%s) %s", this.ToBitString, this ? "DACL is set up to support automatic propagation of inheritable ACEs to existing child objects" : "DACL is NOT set up to support automatic propagation of inheritable ACEs to existing child objects");
				UINT16 SeSaclAutoInherited:1 = FormatString(" (%s) %s", this.ToBitString, this ? "SACL is set up to support automatic propagation of inheritable ACEs to existing child objects" : "SACL is NOT set up to support automatic propagation of inheritable ACEs to existing child objects");
				UINT16 SeDaclProtected:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Prevents the DACL of the security descriptor from being modified by inheritable ACEs" : "Does NOT prevent the DACL of the security descriptor from being modified by inheritable ACEs");
				UINT16 SeSaclProtected:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Prevents the SACL of the security descriptor from being modified by inheritable ACEs" : "Does NOT prevent the SACL of the security descriptor from being modified by inheritable ACEs");
				UINT16 SeRmControlValid:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Resource manager control bits are valid" : "Resource manager control bits are NOT valid");
				UINT16 SeSelfRelative:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Security Descriptor is in self-relative format" : "Security Descriptor is NOT in self-relative format");
			}
			Default:
			struct
			{
				UINT16 SeSelfRelative:1 = FormatString("      (%s) %s", this.ToBitString, this ? "Security Descriptor is in self-relative format" : "Security Descriptor is NOT in self-relative format");
				UINT16 SeRmControlValid:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Resource manager control bits are valid" : "Resource manager control bits are NOT valid");
				UINT16 SeSaclProtected:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Prevents the SACL of the security descriptor from being modified by inheritable ACEs" : "Does NOT prevent the SACL of the security descriptor from being modified by inheritable ACEs");
				UINT16 SeDaclProtected:1 = FormatString("     (%s) %s", this.ToBitString, this ? "Prevents the DACL of the security descriptor from being modified by inheritable ACEs" : "Does NOT prevent the DACL of the security descriptor from being modified by inheritable ACEs");
				UINT16 SeSaclAutoInherited:1 = FormatString(" (%s) %s", this.ToBitString, this ? "SACL is set up to support automatic propagation of inheritable ACEs to existing child objects" : "SACL is NOT set up to support automatic propagation of inheritable ACEs to existing child objects");
				UINT16 SeDaclAutoInherited:1 = FormatString(" (%s) %s", this.ToBitString, this ? "DACL is set up to support automatic propagation of inheritable ACEs to existing child objects" : "DACL is NOT set up to support automatic propagation of inheritable ACEs to existing child objects");
				UINT16 SeSaclAutoInheritReq:1 = FormatString("(%s) %s", this.ToBitString, this ? "Requesting to automatically propagate the SACL to existing child objects" : "NOT Requesting to automatically propagate the SACL to existing child objects");
				UINT16 SeDaclAutoInheritReq:1 = FormatString("(%s) %s", this.ToBitString, this ? "Requesting to automatically propagate the DACL to existing child objects" : "NOT Requesting to automatically propagate the DACL to existing child objects");
				UINT16 Bit07:1 = FormatString("               (%s) %s", this.ToBitString, "");
				UINT16 Bit06:1 = FormatString("               (%s) %s", this.ToBitString, "");
				UINT16 SeSaclDefaulted:1 = FormatString("     (%s) %s", this.ToBitString, this ? "SACL member was provided by a defaulting mechanism" : "SACL member was provided by the security descriptor's original provider.");
				UINT16 SeSaclPresent:1 = FormatString("       (%s) %s", this.ToBitString, this ? "SACL is present in the security descriptor" : "SACL is NOT present in the security descriptor");
				UINT16 SeDaclDefaulted:1 = FormatString("     (%s) %s", this.ToBitString, this ? "DACL member was provided by a defaulting mechanism" : "DACL member was provided by the security descriptor's original provider.");
				UINT16 SeDaclPresent:1 = FormatString("       (%s) %s", this.ToBitString, this ? "DACL is present in the security descriptor" : "DACL is NOT present in the security descriptor");
				UINT16 SeGroupDefaulted:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Group SID was provided by a defaulting mechanism." : "Group SID was provided by the security descriptor's original provider.");
				UINT16 SeOwnerDefaulted:1 = FormatString("    (%s) %s", this.ToBitString, this ? "Owner SID was provided by a defaulting mechanism." : "Owner SID was provided by the security descriptor's original provider.");
			}
		}
	}
	
	switch( SecurityDescriptorControl.SeSelfRelative )
	{
		case 1: //self relative
			struct SelfRelativeDescriptor
			{
				[
					SecurityDescriptorCount = ( this ? 1 : 0 ), 
					SecurityDescriptorLastOffset = this
				]
				UINT32 OffsetToOwnerSID = FormatString( "%d (0x%X) %s", this, this, this ? FormatString( "Offset: 0x%X", this + SecurityDescriptorOffset ) : "" );
				[
					SecurityDescriptorCount = SecurityDescriptorCount + ( this ? 1 : 0 ), 
					SecurityDescriptorLastOffset = this > SecurityDescriptorLastOffset ? this : SecurityDescriptorLastOffset
				]
				UINT32 OffsetToGroupSID = FormatString( "%d (0x%X) %s", this, this, this ? FormatString( "Offset: 0x%X", this + SecurityDescriptorOffset ) : "" );
				[
					SecurityDescriptorCount = SecurityDescriptorCount + ( this ? 1 : 0 ), 
					SecurityDescriptorLastOffset = this > SecurityDescriptorLastOffset ? this : SecurityDescriptorLastOffset
				]
				UINT32 OffsetToSacl = FormatString( "%d (0x%X) %s", this, this, this ? FormatString( "Offset: 0x%X", this + SecurityDescriptorOffset ) : "" );
				[
					SecurityDescriptorCount = SecurityDescriptorCount + ( this ? 1 : 0 ), 
					SecurityDescriptorLastOffset = this > SecurityDescriptorLastOffset ? this : SecurityDescriptorLastOffset
				]
				UINT32 OffsetToDacl = FormatString( "%d (0x%X) %s", this, this, this ? FormatString( "Offset: 0x%X", this + SecurityDescriptorOffset ) : "" );
				
				While [ SecurityDescriptorCount > 0 && Frameoffset <= SecurityDescriptorOffset + SecurityDescriptorLastOffset ]
				{
					[SecurityDescriptorCount = SecurityDescriptorCount - 1]
					[SecurityDescriptorThisOffset = Frameoffset - SecurityDescriptorOffset]
					switch
					{
						case SecurityDescriptorThisOffset == OffsetToOwnerSID: 
							[SecurityDescriptorOwnerSID = "OwnerSID: " + OwnerSid.toString] SID(FALSE) OwnerSid;
						case SecurityDescriptorThisOffset == OffsetToGroupSID: 
							[SecurityDescriptorGroupSID = "GroupSID: " + GroupSid.toString] SID(FALSE) GroupSid;
						case SecurityDescriptorThisOffset == OffsetToSacl: AccessControlList Sacl;
						case SecurityDescriptorThisOffset == OffsetToDacl: AccessControlList Dacl;
					}
				}
			}
		Default:
			struct AbsoluteDescriptor
			{
				[SecurityDescriptorOwnerSIDReferentId = OwnerSIDPtr.ReferentId]
				NdrPtr OwnerSIDPtr;
				[SecurityDescriptorGroupSIDReferentId = GroupSIDPtr.ReferentId]
				NdrPtr GroupSIDPtr;
				[SecurityDescriptorSaclReferentId = SaclPtr.ReferentId]
				NdrPtr SaclPtr;
				[SecurityDescriptorDaclReferentId = DaclPtr.ReferentId]
				NdrPtr DaclPtr;
				switch {
					case SecurityDescriptorOwnerSIDReferentId > 0:
						[SecurityDescriptorOwnerSID = "OwnerSID: " + OwnerSid.toString] SID(FALSE) OwnerSid;
				}
				switch {
					case SecurityDescriptorGroupSIDReferentId > 0:
						[SecurityDescriptorGroupSID = "GroupSID: " + GroupSid.toString] SID(FALSE) GroupSid;
				}
				switch {
					case SecurityDescriptorSaclReferentId > 0: AccessControlList Sacl;
				}
				switch {
					case SecurityDescriptorDaclReferentId > 0: AccessControlList Dacl;
				}
			}
	}
}

struct NdrSecurityDescriptorPtr
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: NdrSecurityDescriptor SecurityDescriptor;
	}
}

struct SIDPtr = Pointer.ReferentID ? SID.ToString : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: SID (TRUE) SID;
	}
}

struct FileTimePtr
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0:FILETIME fileTime;
			
	}
}

struct BOOLPtr = (Pointer.ReferentID > 0) ? bValue.toString : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: BOOL bValue;
	}
}

struct NdrStringPtr = (Pointer.ReferentID > 0) ? stringValue.toString : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: NdrString stringValue;
	}
}

struct NdrWIDESTRINGPtr = (Pointer.ReferentID > 0) ? stringValue.toString : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: NdrWideString stringValue;
	}
}

struct NdrWIDESTRINGSPtr = (Pointer.ReferentID > 0) ? stringsValue.toString : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: NdrWideStrings stringsValue;
	}
}

struct NdrUnicodeStringPtr = (Pointer.ReferentID > 0) ? stringValue.toString : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: NdrUnicodeString stringValue;
	}
}

struct CHARPtr
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: CHAR Value;
	}
}

struct WCHARPtr
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: WCHAR Value;
	}
}

struct INT8Ptr = (Pointer.ReferentID > 0) ? FormatString( "%u (0x%02X)", Value, Value ) : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: INT8 Value;
	}
}

struct INT16Ptr = (Pointer.ReferentID > 0) ? FormatString( "%u (0x%04X)", Value, Value ) : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: INT16 Value;
	}
}

struct INT32Ptr = (Pointer.ReferentID > 0) ? FormatString( "%u (0x%08X)", Value, Value ) : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: INT32 Value;
	}
}

struct INT64Ptr = (Pointer.ReferentID > 0) ? FormatString( "%u (0x%16X)", Value, Value ) : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: INT64 Value;
	}
}

struct UINT8Ptr = (Pointer.ReferentID > 0) ? FormatString( "%u (0x%02X)", Value, Value ) : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: UINT8 Value;
	}
}

struct UINT16Ptr = (Pointer.ReferentID > 0) ? FormatString( "%u (0x%04X)", Value, Value ) : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: UINT16 Value;
	}
}

struct UINT32Ptr = (Pointer.ReferentID > 0) ? FormatString( "%u (0x%08X)", Value, Value ) : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: UINT32 Value;
	}
}

struct UINT64Ptr = (Pointer.ReferentID > 0) ? FormatString( "%u (0x%16X)", Value, Value ) : "NULL"
{
	NdrPtr Pointer;
	switch {
		case Pointer.ReferentID > 0: UINT64 Value;
	}
}


// [MS-OAUT] 2.2.23.2 BSTR Type Definition
struct BSTR = (Pointer.ReferentID != 0) ? FlaggedWordBlob.Data.ToString : "NULL"
{
	NdrPtr	Pointer;
	Switch {
		Case Pointer.ReferentID != 0:
			Struct FlaggedWordBlob
			{
				NdrConformant Size;
				UINT32 CBytes;
				UINT32 CSize;
				[DataFieldByteOrder = LittleEndian]
				UnicodeString( CSize ) Data;
			}
	}
}

struct ContextHandle
{
	INT32 ContextType;
	GUID(0) ContextUuid;
}

//
//	_RPC_UNICODE_STRING Pointer Part
//	Alignment:NdrAlign
//

Struct NdrUnicodeStringHeader = BufferPtr.ToString
{
	NdrAlign Pad;
	UINT16 Length;
	UINT16 MaximumLength;
	[
		Property.NdrUnicodeStringHeaderPtr = BufferPtr.ReferentID,
		Property.NdrUnicodeStringHeaderPtrCount = Property.NdrUnicodeStringHeaderPtrCount + (BufferPtr.ReferentID !=0 ?1:0),
		NdrUnicodeStringHeaderArray$[ RpcUnicodeLoop ] = BufferPtr.ReferentID, Post.RpcUnicodeLoop = RpcUnicodeLoop + 1
	]
	NdrPtr BufferPtr;
}

//
//	_RPC_UNICODE_STRING Referent Part
//	Alignment:None
//

Struct NdrUnicodeStringRef
{
	NdrWideString Element;
}

struct ChunkElement
{
	NdrAlign pad1;
	UINT32 size;
	Blob(size) Element;
	
}

struct NdrPipe
{
	switch
	{
		case property.MSRPCNdr64:
			struct
			{
				while [!(UINT64(FrameData, FrameOffset + (CurrentProtocolOffset % 8 > 0 ? (8 - CurrentProtocolOffset % 8) : 0 ))==0) && !(UINT64(FrameData, FrameOffset + (CurrentProtocolOffset % 8 > 0 ?(8 - CurrentProtocolOffset % 8) : 0) + 8)==0)]
				{
					ChunkElement ChunkElement = FormatString("Align = %u, size = %u", CurrentProtocolOffset % 8 > 0 ?(8 - CurrentProtocolOffset % 8) : 0, UINT32(FrameData, FrameOffset + (CurrentProtocolOffset % 8 > 0 ?(8 - CurrentProtocolOffset % 8) : 0)));
				}
				Align8 pad2;
				UINT64 Endsize;
				UINT64 EndNegatedsize;
			}
		default:
			struct
			{
				while [!(UINT32(FrameData, FrameOffset + (CurrentProtocolOffset % 4 > 0 ?(4 - CurrentProtocolOffset % 4) : 0))==0)]
				{
					ChunkElement ChunkElement = FormatString("Align = %u, size = %u", CurrentProtocolOffset % 4 > 0 ?(4 - CurrentProtocolOffset % 4) : 0, UINT32(FrameData, FrameOffset + (CurrentProtocolOffset % 4 > 0 ?(4 - CurrentProtocolOffset % 4) : 0)));
				}
				Align4 pad2;
				UINT32 EndSize;
			}
	}
}