//#  (c) 2009 CodePlex Foundation
//#
//#  Title:                  Microsoft-Windows-onex
//#
//#  Details:                
//#
//#  Public References:      onex.man
//#
//#  Comments:               
//#
//#  Revision Class and Date:Minor, 4/1/2009
//#
//####
[RegisterBefore(NetEvent.UserData, MicrosoftWindowsOneX, "{AB0D8EF9-866D-4d39-B83F-453F3B8F6325}")]
Protocol ONEX_MicrosoftWindowsOneX = property.ETLSummary
{
	[BuildConversationWithParent, conversation.ConversationDescription = ""]
	switch(property.EventID)
	{
		case 1: [property.ETLSummary = this.ToString] ONEX_SupplicantPortDestroyed SupplicantPortDestroyed;
		case 2: [property.ETLSummary = this.ToString] ONEX_AuthenticationStart AuthenticationStart;
		case 3: [property.ETLSummary = this.ToString] ONEX_AuthenticationStop AuthenticationStop;
		case 4: [property.ETLSummary = this.ToString] ONEX_EAPError EAPError;
		case 5: [property.ETLSummary = this.ToString] ONEX_RetryAltCredAuthentication RetryAltCredAuthentication;
		case 6: [property.ETLSummary = this.ToString] ONEX_EAPFailureIndication EAPFailureIndication;
		case 7: [property.ETLSummary = this.ToString] ONEX_SaveUpdatedUserData SaveUpdatedUserData;
		case 8: [property.ETLSummary = this.ToString] ONEX_SaveUpdatedConnectionData SaveUpdatedConnectionData;
		case 9: [property.ETLSummary = this.ToString] ONEX_UIResponseReceived UIResponseReceived;
		case 10: [property.ETLSummary = this.ToString] ONEX_PacketValidityResult PacketValidityResult;
		case 11: [property.ETLSummary = this.ToString] ONEX_EAPRestartAuth EAPRestartAuth;
		case 12: [property.ETLSummary = this.ToString] ONEX_EAPHostPeerInitializeFailed EAPHostPeerInitializeFailed;
		case 13: [property.ETLSummary = this.ToString] ONEX_EAPHostPeerEndSessionFailed EAPHostPeerEndSessionFailed;
		case 14: [property.ETLSummary = this.ToString] ONEX_GeneratePacketEventFailed GeneratePacketEventFailed;
		case 15: [property.ETLSummary = this.ToString] ONEX_GeneratePeerAuthRestartedEventFailed GeneratePeerAuthRestartedEventFailed;
		case 16: [property.ETLSummary = this.ToString] ONEX_GetPeerAuthStatusFailed GetPeerAuthStatusFailed;
		case 17: [property.ETLSummary = this.ToString] ONEX_MSMUIRequestFailed MSMUIRequestFailed;
		case 18: [property.ETLSummary = this.ToString] ONEX_CompareSessionUserWithOwnerFailed CompareSessionUserWithOwnerFailed;
		case 19: [property.ETLSummary = this.ToString] ONEX_ProcessEAPHostTLVFailed ProcessEAPHostTLVFailed;
		case 20: [property.ETLSummary = this.ToString] ONEX_CannotSendUIRequest CannotSendUIRequest;
		case 21: [property.ETLSummary = this.ToString] ONEX_WTSQueryUserTokenFailed WTSQueryUserTokenFailed;
		case 22: [property.ETLSummary = this.ToString] ONEX_GetRuntimeUserTokenFailed GetRuntimeUserTokenFailed;
		case 23: [property.ETLSummary = this.ToString] ONEX_NoAppropriateUserForUserAuth NoAppropriateUserForUserAuth;
		case 24: [property.ETLSummary = this.ToString] ONEX_CompareOneXCredentialsFailed CompareOneXCredentialsFailed;
		case 25: [property.ETLSummary = this.ToString] ONEX_ConditionalSendStartPacketFailed ConditionalSendStartPacketFailed;
		case 26: [property.ETLSummary = this.ToString] ONEX_GenerateForceAuthenticatedEventFailed GenerateForceAuthenticatedEventFailed;
		case 27: [property.ETLSummary = this.ToString] ONEX_ValidateProfileFailed ValidateProfileFailed;
		case 28: [property.ETLSummary = this.ToString] ONEX_EAPUIRequestNotAllowed EAPUIRequestNotAllowed;
		case 29: [property.ETLSummary = this.ToString] ONEX_KeyDerivationNotSupported KeyDerivationNotSupported;
		case 30: [property.ETLSummary = this.ToString] ONEX_MutualAuthNotSupported MutualAuthNotSupported;
		case 31: [property.ETLSummary = this.ToString] ONEX_DiscoveryProfilesCreated DiscoveryProfilesCreated;
		case 32: [property.ETLSummary = this.ToString] ONEX_OneXProfileCreatedForDiscovery OneXProfileCreatedForDiscovery;
		case 33: [property.ETLSummary = this.ToString] ONEX_MediaTypeNotAllowed MediaTypeNotAllowed;
		case 34: [property.ETLSummary = this.ToString] ONEX_MSMUIRequestSent MSMUIRequestSent;
		case 35: [property.ETLSummary = this.ToString] ONEX_SessionChangeEventReceived SessionChangeEventReceived;
		case 36: [property.ETLSummary = this.ToString] ONEX_PortInitialized PortInitialized;
		case 37: [property.ETLSummary = this.ToString] ONEX_MPPEKeysDerivedBySupplicant MPPEKeysDerivedBySupplicant;
		case 38: [property.ETLSummary = this.ToString] ONEX_SendingMSMUIRequest SendingMSMUIRequest;
		case 39: [property.ETLSummary = this.ToString] ONEX_Delete1XUserProfile Delete1XUserProfile;
		case 40: [property.ETLSummary = this.ToString] ONEX_ReceivedEAPPacket ReceivedEAPPacket;
		case 41: [property.ETLSummary = this.ToString] ONEX_EAPOLStartSent EAPOLStartSent;
		case 42: [property.ETLSummary = this.ToString] ONEX_SupplicantConfiguredToNotSendStart SupplicantConfiguredToNotSendStart;
		case 43: [property.ETLSummary = this.ToString] ONEX_RestartingAuthentication RestartingAuthentication;
		case 44: [property.ETLSummary = this.ToString] ONEX_AuthPerfStart AuthPerfStart;
		case 45: [property.ETLSummary = this.ToString] ONEX_AuthPerfStop AuthPerfStop;
		case 46: [property.ETLSummary = this.ToString] ONEX_AuthTimeTaken AuthTimeTaken;
		case 47: [property.ETLSummary = this.ToString] ONEX_OneXUserIdentified OneXUserIdentified;
		case 48: [property.ETLSummary = this.ToString] ONEX_StopCurrentAuth StopCurrentAuth;
		case 49: [property.ETLSummary = this.ToString] ONEX_StartAuth StartAuth;
		case 50: [property.ETLSummary = this.ToString] ONEX_AltCredentialsUsed AltCredentialsUsed;
		case 51: [property.ETLSummary = this.ToString] ONEX_AttemptingDiscoveryProfile AttemptingDiscoveryProfile;
		case 52: [property.ETLSummary = this.ToString] ONEX_TryingTimelyConfiguration TryingTimelyConfiguration;
		case 53: [property.ETLSummary = this.ToString] ONEX_Completed1XAuth Completed1XAuth;
		case 54: [property.ETLSummary = this.ToString] ONEX_Completed1XAuthWithNoAuthentication Completed1XAuthWithNoAuthentication;
		case 55: [property.ETLSummary = this.ToString] ONEX_UIResponseDiscarded UIResponseDiscarded;
		case 56: [property.ETLSummary = this.ToString] ONEX_PendingUIRequest PendingUIRequest;
		case 57: [property.ETLSummary = this.ToString] ONEX_UserAuthProposed UserAuthProposed;
		case 58: [property.ETLSummary = this.ToString] ONEX_MachineAuthProposed MachineAuthProposed;
		case 59: [property.ETLSummary = this.ToString] ONEX_InvokeInteractiveUIFailed InvokeInteractiveUIFailed;
		case 60: [property.ETLSummary = this.ToString] ONEX_NoEAPCredFieldsToDisplay NoEAPCredFieldsToDisplay;
		case 61: [property.ETLSummary = this.ToString] ONEX_ConvertToEAPCredsFailed ConvertToEAPCredsFailed;
		case 62: [property.ETLSummary = this.ToString] ONEX_QueryInteractiveUIInputFieldsFailed QueryInteractiveUIInputFieldsFailed;
		case 63: [property.ETLSummary = this.ToString] ONEX_DisplayChangePasswordDialog DisplayChangePasswordDialog;
		case 64: [property.ETLSummary = this.ToString] ONEX_SendingEAPPacket SendingEAPPacket;
		case 65: [property.ETLSummary = this.ToString] ONEX_IdentityInResponsePacket IdentityInResponsePacket;
		case 60001: [property.ETLSummary = this.ToString] ONEX_NetError NetError;
		case 60002: [property.ETLSummary = this.ToString] ONEX_NetWarning NetWarning;
		case 60003: [property.ETLSummary = this.ToString] ONEX_StateTransition StateTransition;
		case 60004: [property.ETLSummary = this.ToString] ONEX_ContextUpdate ContextUpdate;
		case 60101: [property.ETLSummary = this.ToString] ONEX_V4Tuple V4Tuple;
		case 60102: [property.ETLSummary = this.ToString] ONEX_V6Tuple V6Tuple;
		case 60103: [property.ETLSummary = this.ToString] ONEX_InterfaceInfo InterfaceInfo;
		default: [property.ETLSummary = "Not exist EventID"]struct{};
	}
}
Table ONEX_EAPPacketTypeMap(value)
{
	switch(value)
	{
		case 0: "None";
		case 1: "Notification";
		case 2: "RequestId";
		case 3: "Success";
		case 4: "Fail";
		case 5: "RequestOther";
		case 6: "ResponseId";
		case 7: "ResponseNak";
		case 8: "ResponseOther";
		case 9: "PacketInvalid";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table ONEX_SessionChangeEventTypeMap(value)
{
	switch(value)
	{
		case 1: "Console Connect";
		case 2: "Console Disconnect";
		case 3: "Remote Connect";
		case 4: "Remote Disconnect";
		case 5: "Session Logon";
		case 6: "Session Logoff";
		case 7: "Session Lock";
		case 8: "Session Unlock";
		case 9: "Remote Control";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table ONEX_PeerResponseActionMap(value)
{
	switch(value)
	{
		case 0: "Discard";
		case 1: "Send";
		case 2: "Result";
		case 3: "InvokeUI";
		case 4: "Respond";
		case 5: "StartAuthentication";
		case 6: "None";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table ONEX_AuthRestartReasonMap(value)
{
	switch(value)
	{
		case 0: "Peer Initiated";
		case 1: "Msm Initiated";
		case 2: "OneX Held State Timeout";
		case 3: "OneX Auth Timeout";
		case 4: "OneX Configuration Changed";
		case 5: "OneX User Changed";
		case 6: "Quarantine State Changed";
		case 7: "Alternate Creds Trial";
		case 8: "Invalid";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table ONEX_StartAuthReasonMap(value)
{
	switch(value)
	{
		case 1: "User change";
		case 2: "MSM initiated";
		case 3: "Config change";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table ONEX_UserAuthProposedReasonMap(value)
{
	switch(value)
	{
		case 1: "PLAP profile";
		case 2: "TIMELY profile";
		case 3: "User token specified";
		case 4: "Logged-on user token";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table ONEX_PassDlgResultMap(value)
{
	switch(value)
	{
		case 1: "Success";
		case 2: "Failure";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Table ONEX_utOpcodeMap(value)
{
	switch(value)
	{
		case 180: "Start State";
		case 181: "End State";
		case 182: "Closed State";
		case 183: "Open State";
		case 184: "Connect State";
		case 185: "Listen State";
		case 186: "Association State";
		case 187: "Authentication State";
		case 188: "Established State";
		default:
			FormatString("Unknown value: %d", value);
	}
}
Struct ONEX_SupplicantPortDestroyed = FormatString("OneXDestroySupplicantPort")
{
	UINT32 PortId;
}
Struct ONEX_AuthenticationStart = FormatString("OneXStartAuthentication")
{
	UINT32 PortId;
}
Struct ONEX_AuthenticationStop = FormatString("OneXStopAuthentication")
{
	UINT32 PortId;
}
Struct ONEX_EAPError = FormatString("Port(%s): EAP error WinError=%s, ReasonCode=%s, EapMethod(Type=%s), RootCause is %s", PortId.ToString, WinError.ToString, ReasonCode.ToString, EAPMethodType.ToString, RootCauseString.ToString)
{
	UINT32 PortId;
	WinErrorCode WinError;
	WinErrorCode ReasonCode;
	UINT8 EAPMethodType;
	UnicodeString RootCauseString;
}
Struct ONEX_RetryAltCredAuthentication = FormatString("Port(%s): Account is disabled and user is non-domain joined. Authentication will be tried with alternate credentials profile.", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_EAPFailureIndication = FormatString("Port(%s): EAP failure indication with error code %s and reason code %s", PortId.ToString, WinError.ToString, ReasonCode.ToString)
{
	UINT32 PortId;
	WinErrorCode WinError;
	WinErrorCode ReasonCode;
}
Struct ONEX_SaveUpdatedUserData = FormatString("Port(%s): Saving updated user data of size (%s)", PortId.ToString, UserDataSize.ToString)
{
	UINT32 PortId;
	UINT32 UserDataSize;
}
Struct ONEX_SaveUpdatedConnectionData = FormatString("Port(%s): Saving updated connection data of size (%s)", PortId.ToString, UserDataSize.ToString)
{
	UINT32 PortId;
	UINT32 UserDataSize;
}
Struct ONEX_UIResponseReceived = FormatString("Port(%s): Successfully received UI Response", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_PacketValidityResult = FormatString("Port(%s): EapProcessPacketValidityAndGetResult returned action %s", PortId.ToString, Response.ToString)
{
	UINT32 PortId;
	UINT32 Response = ONEX_PeerResponseActionMap(this);
}
Struct ONEX_EAPRestartAuth = FormatString("Port(%s): EAP requested authentication restart", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_EAPHostPeerInitializeFailed = FormatString("Port(%s): EapHostPeerInitialize failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_EAPHostPeerEndSessionFailed = FormatString("Port(%s): EapHostPeerEndSession failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_GeneratePacketEventFailed = FormatString("Port(%s): OneXGeneratePacketEvent failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_GeneratePeerAuthRestartedEventFailed = FormatString("Port(%s): OneXGeneratePeerAuthRestartedEvent failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_GetPeerAuthStatusFailed = FormatString("Port(%s): EapHostPeerGetAuthStatus failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_MSMUIRequestFailed = FormatString("Port(%s): MSMUIRequest failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_CompareSessionUserWithOwnerFailed = FormatString("Port(%s): CompareSessionUserWithOwner failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_ProcessEAPHostTLVFailed = FormatString("Port(%s): ProcessEapHostTLV failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_CannotSendUIRequest = FormatString("Port(%s): Cannot send UI Request (code=%s) to MSM since UI is disabled for the port", PortId.ToString, UIRequestCode.ToString)
{
	UINT32 PortId;
	UINT32 UIRequestCode;
}
Struct ONEX_WTSQueryUserTokenFailed = FormatString("Port(%s): Error %s in calling WTSQueryUserToken. Proposing machine authentication.", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_GetRuntimeUserTokenFailed = FormatString("Port(%s): SupplicantGetUserTokenFromRuntimeState failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_NoAppropriateUserForUserAuth = FormatString("Port(%s): The auth mode is User only but an appropriate user can't be found", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_CompareOneXCredentialsFailed = FormatString("Port(%s): CompareOneXCredentials failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_ConditionalSendStartPacketFailed = FormatString("Port(%s): Failed to conditionally send Eapol start packet. Ignoring error %s", Context.ToString, WarningCode.ToString)
{
	WinErrorCode WarningCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_GenerateForceAuthenticatedEventFailed = FormatString("Port(%s): OneXGenerateForceAuthenticatedEvent failed, error %s", Context.ToString, ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_ValidateProfileFailed = FormatString("OneXValidateProfile failed, error %s, reason code %s", ErrorCode.ToString, Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_EAPUIRequestNotAllowed = FormatString("EAP dll requested to show UI, but the UI for the port is not allowed with current credentials")
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_KeyDerivationNotSupported = FormatString("The EAP method does not support key derivation and will not be used for discovery")
{
	UINT8 EAPMethodType;
}
Struct ONEX_MutualAuthNotSupported = FormatString("The EAP method does not support mutual authentication and will not be used for discovery")
{
	UINT8 EAPMethodType;
}
Struct ONEX_DiscoveryProfilesCreated = FormatString("Done with creating discovery profiles. Created %s profiles", ProfilesCount.ToString)
{
	UINT32 ProfilesCount;
}
Struct ONEX_OneXProfileCreatedForDiscovery = FormatString("Created a 1X profile for discovery with eapType=%s and AuthMode=%s", EAPMethodType.ToString, AuthMode.ToString)
{
	UINT8 EAPMethodType;
	UnicodeString AuthMode;
}
Struct ONEX_MediaTypeNotAllowed = FormatString("The EAP method %s is not allowed for media type %s and will not be used for discovery", EAPMethodType.ToString, MediaType.ToString)
{
	UINT8 EAPMethodType;
	UINT32 MediaType;
}
Struct ONEX_MSMUIRequestSent = FormatString("Port(%s): Successfully sent UI Request (code=%s) to MSM", PortId.ToString, UIRequestCode.ToString)
{
	UINT32 PortId;
	UINT32 UIRequestCode;
}
Struct ONEX_SessionChangeEventReceived = FormatString("Received a session change event (%s)", ChangeType.ToString)
{
	UINT32 ChangeType = ONEX_SessionChangeEventTypeMap(this);
}
Struct ONEX_PortInitialized = FormatString("Finished initializing a new port with id=%s and friendly name=%s", PortId.ToString, FriendlyName.ToString)
{
	UINT32 PortId;
	UnicodeString FriendlyName;
}
Struct ONEX_MPPEKeysDerivedBySupplicant = FormatString("Port(%s): MPPE-Send/Recv-Keys have been derived by supplicant", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_SendingMSMUIRequest = FormatString("Port(%s): Sending UI Request (code=%s) to MSM", PortId.ToString, UIRequestCode.ToString)
{
	UINT32 PortId;
	UINT32 UIRequestCode;
}
Struct ONEX_Delete1XUserProfile = FormatString("Port(%s): Asking MSM to delete user data for user token", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_ReceivedEAPPacket = FormatString("Port(%s): Received an EAP packet length=%s, type=%s, identifier=%s, eapType=%s", PortId.ToString, PacketLength.ToString, PacketType.ToString, Identifier.ToString, EapMethodType.ToString)
{
	UINT32 PortId;
	UINT16 PacketLength;
	UINT32 PacketType = ONEX_EAPPacketTypeMap(this);
	UINT8 Identifier;
	UINT32 EapMethodType;
}
Struct ONEX_EAPOLStartSent = FormatString("Port(%s): Sent an Eapol start packet", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_SupplicantConfiguredToNotSendStart = FormatString("Port(%s): The supplicant is configured to not send an Eapol start packet", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_RestartingAuthentication = FormatString("Port(%s): Restarting authentication due to reason = %s", PortId.ToString, Reason.ToString)
{
	UINT32 PortId;
	UINT32 Reason = ONEX_AuthRestartReasonMap(this);
}
Struct ONEX_AuthPerfStart = FormatString("Port(%s): Authentication Starting", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_AuthPerfStop = FormatString("Port(%s): Authentication Completed", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_AuthTimeTaken = FormatString("Port(%s): Time taken for this authentication = %s ms", PortId.ToString, TimeTaken.ToString)
{
	UINT32 PortId;
	UINT32 TimeTaken;
}
Struct ONEX_OneXUserIdentified = FormatString("Port(%s): 802.1X user identified. auth identity = %s, sessionId = %s, username=%s, domain=%s", PortId.ToString, AuthIdentity.ToString, SessionId.ToString, Username.ToString, Domain.ToString)
{
	UINT32 PortId;
	UnicodeString AuthIdentity;
	UINT32 SessionId;
	UnicodeString Username;
	UnicodeString Domain;
}
Struct ONEX_StopCurrentAuth = FormatString("Port(%s): Stopping the current 802.1X authentication", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_StartAuth = FormatString("Port(%s): Starting a new 802.1X authentication (%s)", PortId.ToString, Reason.ToString)
{
	UINT32 PortId;
	UINT32 Reason = ONEX_StartAuthReasonMap(this);
}
Struct ONEX_AltCredentialsUsed = FormatString("Port(%s): Alternate credentials will be used for this profile", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_AttemptingDiscoveryProfile = FormatString("Port(%s): This is a discovery profile being attempted", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_TryingTimelyConfiguration = FormatString("Port(%s): Trying timely configuration", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_Completed1XAuth = FormatString("Port(%s): Completed the 802.1X authentication successfully", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_Completed1XAuthWithNoAuthentication = FormatString("Port(%s): Completed the 802.1X authentication because no authenticator was found", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_UIResponseDiscarded = FormatString("Port(%s): The session id (%s) received with the UI response is different than the session id for which the request was sent (%s). Discarding this response", PortId.ToString, SessionId.ToString, UIRequestSessionId.ToString)
{
	UINT32 PortId;
	UINT32 SessionId;
	UINT32 UIRequestSessionId;
}
Struct ONEX_PendingUIRequest = FormatString("Port(%s): A pending UI request exists size=%s, sessionId=%s", PortId.ToString, Size.ToString, SessionId.ToString)
{
	UINT32 PortId;
	UINT32 Size;
	UINT32 SessionId;
}
Struct ONEX_UserAuthProposed = FormatString("Port(%s): User auth proposed for sessionId=%s (%s)", PortId.ToString, SessionId.ToString, Reason.ToString)
{
	UINT32 PortId;
	UINT32 Reason = ONEX_UserAuthProposedReasonMap(this);
	UINT32 SessionId;
}
Struct ONEX_MachineAuthProposed = FormatString("Port(%s): The machine is in app server mode. Proposing machine auth", PortId.ToString)
{
	UINT32 PortId;
}
Struct ONEX_InvokeInteractiveUIFailed = FormatString("EapHostPeerInvokeInteractiveUI failed, Error = %s Reason = %s", WinError.ToString, ReasonCode.ToString)
{
	UINT32 PortId;
	WinErrorCode WinError;
	WinErrorCode ReasonCode;
}
Struct ONEX_NoEAPCredFieldsToDisplay = FormatString("No EAP Cred fields to display")
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_ConvertToEAPCredsFailed = FormatString("Creds conversion failed (error=%s)", ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_QueryInteractiveUIInputFieldsFailed = FormatString("EapHostPeerQueryInteractiveUIInputFields failed (error=%s)", ErrorCode.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_DisplayChangePasswordDialog = FormatString("Displaying the change password dialog - %s", Result.ToString)
{
	UINT32 Result = ONEX_PassDlgResultMap(this);
}
Struct ONEX_SendingEAPPacket = FormatString("Port(%s): Sending an EAP packet length=%s, type=%s, identifier=%s, eapType=%s", PortId.ToString, PacketLength.ToString, PacketType.ToString, Identifier.ToString, EapMethodType.ToString)
{
	UINT32 PortId;
	UINT16 PacketLength;
	UINT32 PacketType = ONEX_EAPPacketTypeMap(this);
	UINT8 Identifier;
	UINT32 EapMethodType;
}
Struct ONEX_IdentityInResponsePacket = FormatString("Port(%s): Identity being sent in the ResponseId packet is %s", PortId.ToString, Identity.ToString)
{
	UINT32 PortId;
	AsciiString Identity;
}
Struct ONEX_NetError = FormatString("Error: %s Location: %s Context: %s", ErrorCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode ErrorCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_NetWarning = FormatString("Warning: %s Location: %s Context: %s", WarningCode.ToString, Location.ToString, Context.ToString)
{
	WinErrorCode WarningCode;
	UINT32 Location;
	UINT32 Context;
}
Struct ONEX_StateTransition = FormatString("Transitioned to State: %s Context: %s", NextState.ToString, Context.ToString)
{
	UINT8 NextState = ONEX_utOpcodeMap(this);
	UINT32 Context;
}
Struct ONEX_ContextUpdate = FormatString("Updated Context: %s Update Reason: %s", Context.ToString, UpdateReasonCode.ToString)
{
	UINT32 Context;
	UINT32 UpdateReasonCode;
}
Struct ONEX_V4Tuple = FormatString("SourceAddress: %s SourcePort: %s DestinationAddress: %s DestinationPort: %s Protocol: %s ReferenceContext: %s", SourceAddress.ToString, SourcePort.ToString, DestinationAddress.ToString, DestinationPort.ToString, Protocol.ToString, ReferenceContext.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv4Address SourceAddress;
	UINT32 SourcePort;
	[DataFieldByteOrder = BigEndian]IPv4Address DestinationAddress;
	UINT32 DestinationPort;
	UINT32 Protocol;
	UINT32 ReferenceContext;
}
Struct ONEX_V6Tuple = FormatString("SourceAddress: %s SourcePort: %s DestinationAddress: %s DestinationPort: %s Protocol: %s ReferenceContext: %s", SourceAddress.ToString, SourcePort.ToString, DestinationAddress.ToString, DestinationPort.ToString, Protocol.ToString, ReferenceContext.ToString)
{
	[DataFieldByteOrder = BigEndian]IPv6Address SourceAddress;
	UINT32 SourcePort;
	[DataFieldByteOrder = BigEndian]IPv6Address DestinationAddress;
	UINT32 DestinationPort;
	UINT32 Protocol;
	UINT32 ReferenceContext;
}
Struct ONEX_InterfaceInfo = FormatString("Interface Guid: %s IfIndex: %s Interface Luid: %s ReferenceContext: %s", IfGuid.ToString, IfIndex.ToString, IfLuid.ToString, ReferenceContext.ToString)
{
	GUID(true) IfGuid;
	UINT32 IfIndex;
	UINT64 IfLuid;
	UINT32 ReferenceContext;
}
[RegisterBefore(EventDescriptor.DefaultKeyword, MicrosoftWindowsOneX_Keyword, "{AB0D8EF9-866D-4d39-B83F-453F3B8F6325}")]
struct ONEX_MicrosoftWindowsOneX_Keyword
{
	UINT64 Reserved1:32 = FormatString("        (%s)", this.ToBitString);
	UINT64 utSendPath:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_SEND": "");
	UINT64 utReceivePath:1 = FormatString("    (%s) %s", this.ToBitString, this? "KW_RECEIVE":"");
	UINT64 utL3ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L3_CONNECT":"");
	UINT64 utL2ConnectPath:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_L2_CONNECT":"");
	UINT64 utClosePath:1 = FormatString("      (%s) %s", this.ToBitString, this? "KW_CLOSE":"");
	UINT64 utAuthentication:1 = FormatString(" (%s) %s", this.ToBitString, this? "KW_AUTHENTICATION":"");
	UINT64 utConfiguration:1 = FormatString("  (%s) %s", this.ToBitString, this? "KW_CONFIGURATION":"");
	UINT64 utGlobal:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_GLOBAL":"");
	UINT64 utDropped:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_DROPPED":"");
	UINT64 utPiiPresent:1 = FormatString("     (%s) %s", this.ToBitString, this? "KW_PII_PRESENT":"");
	UINT64 utPacket:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_PACKET":"");
	UINT64 utAddress:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ADDRESS":"");
	UINT64 utStdTemplateHint:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STD_TEMPLATE_HINT":"");
	UINT64 utStateTransition:1 = FormatString("(%s) %s", this.ToBitString, this? "KW_STATE_TRANSITION":"");
	UINT64 Reserved2:1 = FormatString("        (%s)", this.ToBitString);
	UINT64 API:1 = FormatString("              (%s) %s", this.ToBitString, this? "KW_ONEX_API": "");
	UINT64 Reserved3:1 = FormatString("        (%s)", this.ToBitString);
	UINT64 Profile:1 = FormatString("          (%s) %s", this.ToBitString, this? "KW_ONEX_PROFILE": "");
	UINT64 Reserved4:1 = FormatString("        (%s)", this.ToBitString);
	UINT64 EAP:1 = FormatString("              (%s) %s", this.ToBitString, this? "KW_ONEX_EAP": "");
	UINT64 Reserved5:1 = FormatString("        (%s)", this.ToBitString);
	UINT64 Semantic:1 = FormatString("         (%s) %s", this.ToBitString, this? "KW_ONEX_SEMANTIC": "");
	UINT64 Reserved6:1 = FormatString("        (%s)", this.ToBitString);
	UINT64 EAPPacket:1 = FormatString("        (%s) %s", this.ToBitString, this? "KW_ONEX_EAPPACKET": "");
	UINT64 Reserved7:1 = FormatString("        (%s)", this.ToBitString);
	UINT64 Supplicant:1 = FormatString("       (%s) %s", this.ToBitString, this? "KW_ONEX_SUPPLICANT": "");
	UINT64 Reserved8:1 = FormatString("        (%s)", this.ToBitString);
	UINT64 OneXUI:1 = FormatString("           (%s) %s", this.ToBitString, this? "KW_ONEX_ONEXUI": "");
	UINT64 Reserved9:1 = FormatString("        (%s)", this.ToBitString);
	UINT64 User:1 = FormatString("             (%s) %s", this.ToBitString, this? "KW_ONEX_USER": "");
	UINT64 Reserved10:2 = FormatString("       (%s)", this.ToBitString);
}
